// Copyright Â© 2022 ZeroPass <zeropass@pm.me>
// Author: Crt Vavros

#include <array>

// Benchmark test vectors

struct rsa_1024_sha1 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 1024 with SHA-1
    constexpr static auto exp = std::array<byte_t, 3>{ 0xfe, 0x3f, 0xa1 };
    constexpr static auto mod = std::array<byte_t, 128>{
        0xDD, 0x07, 0xF4, 0x35, 0x34, 0xAD, 0xEF, 0xB5, 0x40, 0x7C, 0xC1, 0x63,
        0xAA, 0xCC, 0x7A, 0xBE, 0x9F, 0x93, 0xCB, 0x74, 0x96, 0x43, 0xEA, 0xEC,
        0x22, 0xA3, 0xEF, 0x16, 0xE7, 0x78, 0x13, 0xD7, 0x7D, 0xF2, 0x0E, 0x84,
        0xA7, 0x55, 0x08, 0x88, 0x72, 0xFD, 0xE2, 0x1D, 0x3D, 0x31, 0x92, 0xF9,
        0xA7, 0x8D, 0x72, 0x6E, 0xF3, 0xD0, 0xDA, 0xA9, 0xD6, 0xBC, 0x19, 0xDA,
        0xF6, 0x82, 0x2E, 0xB8, 0x34, 0xFB, 0xF8, 0x37, 0xED, 0x03, 0xD0, 0xF8,
        0x4A, 0x7F, 0xC7, 0x70, 0x9B, 0xE3, 0x82, 0xE8, 0x80, 0xE7, 0x7B, 0xA3,
        0xCE, 0x3D, 0x91, 0xCA, 0x1C, 0xBF, 0x56, 0x7F, 0xC2, 0xE6, 0x21, 0x69,
        0x84, 0x34, 0x89, 0x18, 0x8A, 0x12, 0x8E, 0xC8, 0x53, 0x07, 0x9E, 0x79,
        0x42, 0xE6, 0x59, 0x05, 0x08, 0xEA, 0x2F, 0xAA, 0xB1, 0xCF, 0x87, 0xB8,
        0x60, 0xB2, 0x1B, 0x95, 0x46, 0x44, 0x24, 0x55
    };

    constexpr static auto md = std::array<byte_t, 20>{
        0x9D, 0x71, 0xBB, 0xD0, 0xB0, 0x5E, 0x35, 0xAD, 0x04, 0x39, 0x1D, 0xCD,
        0x70, 0x4A, 0x3E, 0x7C, 0x86, 0xD5, 0x36, 0xB5
    };

    constexpr static auto sig = std::array<byte_t, 128>{
        0x25, 0x49, 0x3B, 0x7D, 0x70, 0xCC, 0x07, 0xE9, 0x26, 0x9A, 0x24, 0x86,
        0x32, 0xC2, 0xC8, 0x9C, 0x85, 0x14, 0xFE, 0x82, 0x98, 0xED, 0x84, 0x31,
        0x9E, 0xC6, 0x64, 0xF0, 0x1D, 0xB9, 0x80, 0xE2, 0x4B, 0xBB, 0x59, 0xEE,
        0xA5, 0x86, 0x73, 0x16, 0x79, 0x2F, 0xEC, 0x36, 0xCB, 0xE9, 0xEE, 0x9D,
        0x3C, 0x69, 0x34, 0x6B, 0x99, 0x23, 0x77, 0xF3, 0x5C, 0x08, 0xD1, 0x9D,
        0xE0, 0xD6, 0xDD, 0x37, 0x48, 0x20, 0x74, 0xCF, 0x5D, 0x3C, 0x5C, 0xD2,
        0xB5, 0x4D, 0x09, 0xA3, 0xED, 0x29, 0x61, 0x87, 0xF4, 0xEE, 0x5B, 0x30,
        0x92, 0x6A, 0x7A, 0xA7, 0x94, 0xC8, 0x8A, 0x2C, 0x0F, 0x9D, 0x09, 0xF7,
        0x21, 0x43, 0x6E, 0x5A, 0x9B, 0xD4, 0xFE, 0xF6, 0x2E, 0x20, 0xE4, 0x30,
        0x95, 0xFA, 0xEE, 0x7F, 0x5F, 0x1E, 0x6C, 0xE8, 0x77, 0x05, 0xC2, 0x7A,
        0xA5, 0xCD, 0xB0, 0x8D, 0x50, 0xBD, 0x2C, 0xF0
    };
};

struct rsa_2048_sha1 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 2048 with SHA-1
    constexpr static auto exp = std::array<byte_t, 3>{ 0x0b, 0x8f, 0x69 };
    constexpr static auto mod = std::array<byte_t, 256>{
        0x8C, 0xFF, 0x98, 0x58, 0xFA, 0x12, 0x77, 0x3E, 0xF9, 0x0C, 0x10, 0xE8,
        0xF1, 0x42, 0xF6, 0x9C, 0x03, 0x50, 0x77, 0x2F, 0x99, 0x9F, 0xF1, 0x0B,
        0xA2, 0xA5, 0xEC, 0x71, 0xCB, 0xEE, 0x03, 0x7F, 0x3A, 0x78, 0xA1, 0xC4,
        0x60, 0x28, 0x15, 0x0A, 0x00, 0x04, 0xFD, 0x01, 0x98, 0xBB, 0x81, 0x75,
        0xFA, 0x30, 0xFD, 0x97, 0x65, 0xA4, 0xE2, 0xC6, 0x79, 0x12, 0x4D, 0xED,
        0x05, 0x5C, 0xD3, 0x7D, 0x41, 0x02, 0xB5, 0xE6, 0x95, 0xD9, 0x1B, 0x58,
        0xBB, 0xB4, 0x4E, 0x72, 0xC1, 0x36, 0xC5, 0xE3, 0xDA, 0x43, 0xB4, 0xE6,
        0xD5, 0x60, 0x4E, 0xDC, 0x36, 0x77, 0x4C, 0x35, 0x3A, 0x72, 0x9B, 0xB1,
        0x64, 0x7F, 0x4A, 0x33, 0xD7, 0x4C, 0xCB, 0x70, 0xF7, 0xB0, 0x03, 0x61,
        0x7B, 0xAB, 0x79, 0x88, 0x87, 0xB8, 0xF6, 0x5C, 0xBE, 0x11, 0xAA, 0x83,
        0x49, 0xDB, 0xFC, 0x0F, 0x50, 0x36, 0x04, 0x2D, 0x6C, 0xD4, 0xC4, 0x9B,
        0x10, 0x63, 0x4F, 0xDD, 0x9D, 0x9C, 0xBF, 0x61, 0xD9, 0xF8, 0x5C, 0x94,
        0xAE, 0x98, 0xCB, 0xF7, 0x71, 0x72, 0xC6, 0x16, 0x96, 0x43, 0x4E, 0xBC,
        0x2A, 0xC6, 0xAE, 0x8F, 0x67, 0x8F, 0x0E, 0x40, 0x29, 0xEA, 0xCC, 0x8F,
        0xB1, 0x69, 0x99, 0x16, 0xBD, 0xCE, 0x02, 0x6C, 0xD9, 0x47, 0x80, 0xDE,
        0x58, 0xA7, 0x07, 0x65, 0x9F, 0xF6, 0x50, 0xDA, 0xE7, 0x59, 0x9B, 0x6B,
        0x1B, 0x63, 0x37, 0x32, 0x38, 0x32, 0xB4, 0x5A, 0x4E, 0xDE, 0x37, 0xFB,
        0xA8, 0x70, 0x51, 0x65, 0x8E, 0x79, 0x24, 0x8F, 0xCE, 0xBD, 0xE7, 0xC3,
        0x60, 0x09, 0x95, 0x49, 0x19, 0xC8, 0x7F, 0x83, 0x6A, 0x20, 0x84, 0xD8,
        0x8F, 0x52, 0x37, 0xF7, 0x2F, 0x4D, 0x20, 0x84, 0x12, 0xE9, 0x1F, 0xF6,
        0xF3, 0x25, 0x25, 0x74, 0xDF, 0x7C, 0x00, 0x33, 0x4A, 0x0F, 0xCF, 0x8F,
        0xCC, 0x7E, 0xCC, 0x2B
    };

    constexpr static auto md = std::array<byte_t, 20>{
        0x50, 0xBC, 0xB0, 0xA1, 0x72, 0xB9, 0xAB, 0x76, 0x64, 0xC7, 0x97, 0x79,
        0xBE, 0xBE, 0x16, 0x9A, 0x50, 0xAC, 0xC1, 0xCE
    };

    constexpr static auto sig = std::array<byte_t, 256>{
        0x80, 0xAB, 0x1F, 0x8E, 0x28, 0xC9, 0xF9, 0x39, 0xA7, 0xA1, 0x5A, 0x6F,
        0x81, 0xB4, 0x15, 0x47, 0xE8, 0x49, 0x7B, 0x5B, 0xA2, 0xDD, 0x08, 0x33,
        0x32, 0x43, 0x35, 0x2E, 0x9D, 0x7A, 0xA3, 0x47, 0xDC, 0xDE, 0x62, 0x00,
        0xA5, 0xE1, 0xCF, 0xC8, 0x13, 0x6D, 0x3C, 0x59, 0x99, 0x9E, 0xE5, 0x71,
        0x34, 0x7C, 0x8A, 0x48, 0xD9, 0x1E, 0x18, 0x5D, 0x0B, 0x08, 0xCA, 0x31,
        0xC8, 0xEA, 0x83, 0xD5, 0x78, 0xF0, 0xFE, 0xA6, 0xAD, 0x38, 0xC8, 0x20,
        0xD6, 0x8B, 0x10, 0x22, 0x1D, 0x49, 0x3E, 0xA9, 0x3E, 0x06, 0x5F, 0xD8,
        0x46, 0x34, 0x0A, 0xE0, 0x9B, 0x94, 0xC6, 0xDC, 0xB7, 0x8C, 0xFF, 0xC7,
        0x9B, 0x95, 0x85, 0x40, 0x68, 0x94, 0x55, 0x73, 0x4A, 0x9A, 0xDE, 0xBB,
        0xBE, 0x50, 0xBE, 0xD6, 0xE9, 0x98, 0xE9, 0x57, 0x07, 0x9D, 0x11, 0x81,
        0x2B, 0xC2, 0xB4, 0xB4, 0x97, 0xF9, 0xB9, 0xFC, 0x14, 0x96, 0xA6, 0x39,
        0xE0, 0x21, 0x33, 0x7D, 0x86, 0xC4, 0xDF, 0x2B, 0xAE, 0x4A, 0x06, 0x5F,
        0xE6, 0x9E, 0x51, 0x76, 0x55, 0xA5, 0x71, 0x36, 0x9A, 0x44, 0x54, 0xA1,
        0xE2, 0x93, 0x70, 0x68, 0x9F, 0x88, 0x66, 0x37, 0x5F, 0xAD, 0x63, 0x07,
        0x5E, 0xF1, 0x89, 0xF0, 0xEC, 0x3B, 0x68, 0x6B, 0x5F, 0x3F, 0x02, 0xAE,
        0x84, 0xC9, 0x9E, 0xA6, 0x77, 0x01, 0xD6, 0x90, 0x6A, 0xD8, 0x67, 0xD0,
        0xDA, 0xBE, 0xF4, 0xF2, 0x10, 0xE5, 0x33, 0xD7, 0xDA, 0xCE, 0xDA, 0x12,
        0xEE, 0x0A, 0xD2, 0xA6, 0x82, 0x61, 0x78, 0x50, 0x3A, 0xE4, 0x72, 0xF2,
        0x78, 0xB7, 0xF2, 0x5D, 0x51, 0xC1, 0xFE, 0x8E, 0xF4, 0xB3, 0xD6, 0x1D,
        0xA0, 0x92, 0x8F, 0x4D, 0x73, 0x15, 0xAB, 0xB2, 0x7E, 0x57, 0x0E, 0xC3,
        0x6F, 0xBD, 0xFB, 0xB4, 0xE3, 0x15, 0x8E, 0x29, 0xB4, 0x60, 0x5E, 0x1B,
        0x08, 0x2E, 0x56, 0xEF
    };
};

struct rsa_1024_sha256 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 1024 with SHA-256
    constexpr static auto exp = std::array<byte_t, 3>{ 0xee, 0xf2, 0x11 };
    constexpr static auto mod = std::array<byte_t, 128>{
        0x85, 0x92, 0xB5, 0x85, 0x0B, 0x9B, 0xA9, 0x6E, 0x7F, 0xAE, 0xCB, 0xDD,
        0x67, 0xE5, 0x0E, 0xD5, 0xFB, 0x20, 0x18, 0xFD, 0xA0, 0xBC, 0x6A, 0x09,
        0xAB, 0x63, 0x45, 0x91, 0x0F, 0xC4, 0x45, 0xAC, 0x6B, 0xDB, 0x0E, 0x7A,
        0x4C, 0x6B, 0x72, 0xC9, 0x44, 0x16, 0x49, 0xC9, 0xE7, 0x81, 0x09, 0xBB,
        0xAA, 0x1D, 0x79, 0xF9, 0xFA, 0xFB, 0x87, 0x94, 0xA1, 0xA0, 0x6C, 0xB6,
        0x38, 0xBD, 0x8F, 0x3C, 0x34, 0x16, 0xD4, 0x4C, 0x43, 0xCF, 0x86, 0x2B,
        0x8A, 0xC1, 0xD5, 0x00, 0x63, 0x10, 0xB0, 0x5A, 0x77, 0x60, 0xD3, 0x41,
        0xD0, 0x70, 0x77, 0xAE, 0x77, 0x5F, 0x16, 0x95, 0x06, 0x1D, 0x3C, 0x72,
        0x97, 0xDD, 0x3A, 0xB8, 0xFC, 0x5D, 0x03, 0xD0, 0x9E, 0xD1, 0x60, 0x2A,
        0x1B, 0xB6, 0x98, 0x91, 0xBB, 0x37, 0x7F, 0xD0, 0xAA, 0xD6, 0xCD, 0x90,
        0xF8, 0xB2, 0x07, 0x46, 0x7D, 0xB3, 0x62, 0x79
    };

    constexpr static auto md = std::array<byte_t, 32>{
        0xF9, 0x62, 0x5E, 0x08, 0x91, 0x9E, 0x66, 0x32, 0xF9, 0x0B, 0x9A, 0x9F,
        0xBD, 0xF8, 0x93, 0x0E, 0x71, 0xCB, 0x17, 0x25, 0xB8, 0x33, 0x48, 0xF9,
        0x39, 0x05, 0xC7, 0xB2, 0x02, 0x9C, 0x91, 0xC7
    };

    constexpr static auto sig = std::array<byte_t, 128>{
        0x2E, 0x37, 0xC8, 0x22, 0x15, 0x97, 0xF7, 0xE2, 0xB1, 0x97, 0x0C, 0x40,
        0xA5, 0x0D, 0xB5, 0xFE, 0xFD, 0xE3, 0x1B, 0x1D, 0xFF, 0x1E, 0x9B, 0x9D,
        0x6A, 0x70, 0xB0, 0x23, 0xAC, 0xB0, 0x14, 0x97, 0x15, 0x80, 0xED, 0xDF,
        0x1D, 0x67, 0xF1, 0x5D, 0x9F, 0xBB, 0xDD, 0xFC, 0xDF, 0x49, 0xCD, 0xA1,
        0x4C, 0xCB, 0x75, 0x16, 0xC3, 0x3B, 0x78, 0x7A, 0x3A, 0x3F, 0xD4, 0x3D,
        0x00, 0x5D, 0x02, 0xDE, 0x10, 0xF9, 0x3F, 0xFC, 0x99, 0x58, 0x5A, 0xE5,
        0xDF, 0xAA, 0x76, 0x6C, 0x0F, 0x1F, 0x5B, 0xFA, 0x62, 0xE5, 0x0E, 0x76,
        0xA0, 0x59, 0xA4, 0xA1, 0xE8, 0x14, 0xC1, 0xEE, 0x98, 0x36, 0xE0, 0x15,
        0x95, 0x73, 0x1D, 0xCE, 0x48, 0xF9, 0x4A, 0xA1, 0xAE, 0x36, 0xD9, 0xC5,
        0x16, 0x5A, 0x3E, 0xB2, 0x80, 0x13, 0xFA, 0xC2, 0x71, 0xE0, 0x91, 0xF7,
        0x01, 0x8F, 0xE9, 0x6E, 0xC2, 0x60, 0x09, 0xC1
    };
};

struct rsa_2048_sha256 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 2048 with SHA-256
    constexpr static auto exp = std::array<byte_t, 3>{ 0x49, 0xd2, 0xa1 };
    constexpr static auto mod = std::array<byte_t, 256>{
        0xC4, 0x7A, 0xBA, 0xCC, 0x2A, 0x84, 0xD5, 0x6F, 0x36, 0x14, 0xD9, 0x2F,
        0xD6, 0x2E, 0xD3, 0x6D, 0xDD, 0xE4, 0x59, 0x66, 0x4B, 0x93, 0x01, 0xDC,
        0xD1, 0xD6, 0x17, 0x81, 0xCF, 0xCC, 0x02, 0x6B, 0xCB, 0x23, 0x99, 0xBE,
        0xE7, 0xE7, 0x56, 0x81, 0xA8, 0x0B, 0x7B, 0xF5, 0x00, 0xE2, 0xD0, 0x8C,
        0xEA, 0xE1, 0xC4, 0x2E, 0xC0, 0xB7, 0x07, 0x92, 0x7F, 0x2B, 0x2F, 0xE9,
        0x2A, 0xE8, 0x52, 0x08, 0x7D, 0x25, 0xF1, 0xD2, 0x60, 0xCC, 0x74, 0x90,
        0x5E, 0xE5, 0xF9, 0xB2, 0x54, 0xED, 0x05, 0x49, 0x4A, 0x9F, 0xE0, 0x67,
        0x32, 0xC3, 0x68, 0x09, 0x92, 0xDD, 0x6F, 0x0D, 0xC6, 0x34, 0x56, 0x8D,
        0x11, 0x54, 0x2A, 0x70, 0x5F, 0x83, 0xAE, 0x96, 0xD2, 0xA4, 0x97, 0x63,
        0xD5, 0xFB, 0xB2, 0x43, 0x98, 0xED, 0xF3, 0x70, 0x2B, 0xC9, 0x4B, 0xC1,
        0x68, 0x19, 0x01, 0x66, 0x49, 0x2B, 0x86, 0x71, 0xDE, 0x87, 0x4B, 0xB9,
        0xCE, 0xCB, 0x05, 0x8C, 0x6C, 0x83, 0x44, 0xAA, 0x8C, 0x93, 0x75, 0x4D,
        0x6E, 0xFF, 0xCD, 0x44, 0xA4, 0x1E, 0xD7, 0xDE, 0x0A, 0x9D, 0xCD, 0x91,
        0x44, 0x43, 0x7F, 0x21, 0x2B, 0x18, 0x88, 0x1D, 0x04, 0x2D, 0x33, 0x1A,
        0x46, 0x18, 0xA9, 0xE6, 0x30, 0xEF, 0x9B, 0xB6, 0x63, 0x05, 0xE4, 0xFD,
        0xF8, 0xF0, 0x39, 0x1B, 0x3B, 0x23, 0x13, 0xFE, 0x54, 0x9F, 0x01, 0x89,
        0xFF, 0x96, 0x8B, 0x92, 0xF3, 0x3C, 0x26, 0x6A, 0x4B, 0xC2, 0xCF, 0xFC,
        0x89, 0x7D, 0x19, 0x37, 0xEE, 0xB9, 0xE4, 0x06, 0xF5, 0xD0, 0xEA, 0xA7,
        0xA1, 0x47, 0x82, 0xE7, 0x6A, 0xF3, 0xFC, 0xE9, 0x8F, 0x54, 0xED, 0x23,
        0x7B, 0x4A, 0x04, 0xA4, 0x15, 0x9A, 0x5F, 0x62, 0x50, 0xA2, 0x96, 0xA9,
        0x02, 0x88, 0x02, 0x04, 0xE6, 0x1D, 0x89, 0x1C, 0x4D, 0xA2, 0x9F, 0x2D,
        0x65, 0xF3, 0x4C, 0xBB
    };

    constexpr static auto md = std::array<byte_t, 32>{
        0x56, 0x5F, 0xF4, 0xF3, 0x6E, 0x8B, 0xD4, 0xA9, 0x60, 0x07, 0xED, 0x57,
        0x7F, 0x32, 0x48, 0xB4, 0xF9, 0x94, 0x38, 0x26, 0xD7, 0x21, 0xB4, 0x17,
        0xA2, 0x0B, 0xB1, 0x2C, 0x3A, 0xE6, 0xE8, 0x74
    };

    constexpr static auto sig = std::array<byte_t, 256>{
        0x51, 0x26, 0x5D, 0x96, 0xF1, 0x1A, 0xB3, 0x38, 0x76, 0x28, 0x91, 0xCB,
        0x29, 0xBF, 0x3F, 0x1D, 0x2B, 0x33, 0x05, 0x10, 0x70, 0x63, 0xF5, 0xF3,
        0x24, 0x5A, 0xF3, 0x76, 0xDF, 0xCC, 0x70, 0x27, 0xD3, 0x93, 0x65, 0xDE,
        0x70, 0xA3, 0x1D, 0xB0, 0x5E, 0x9E, 0x10, 0xEB, 0x61, 0x48, 0xCB, 0x7F,
        0x64, 0x25, 0xF0, 0xC9, 0x3C, 0x4F, 0xB0, 0xE2, 0x29, 0x1A, 0xDB, 0xD2,
        0x2C, 0x77, 0x65, 0x6A, 0xFC, 0x19, 0x68, 0x58, 0xA1, 0x1E, 0x1C, 0x67,
        0x0D, 0x9E, 0xEB, 0x59, 0x26, 0x13, 0xE6, 0x9E, 0xB4, 0xF3, 0xAA, 0x50,
        0x17, 0x30, 0x74, 0x3A, 0xC4, 0x46, 0x44, 0x86, 0xC7, 0xAE, 0x68, 0xFD,
        0x50, 0x9E, 0x89, 0x6F, 0x63, 0x88, 0x4E, 0x94, 0x24, 0xF6, 0x9C, 0x1C,
        0x53, 0x97, 0x95, 0x9F, 0x1E, 0x52, 0xA3, 0x68, 0x66, 0x7A, 0x59, 0x8A,
        0x1F, 0xC9, 0x01, 0x25, 0x27, 0x3D, 0x93, 0x41, 0x29, 0x5D, 0x2F, 0x8E,
        0x1C, 0xC4, 0x96, 0x9B, 0xF2, 0x28, 0xC8, 0x60, 0xE0, 0x7A, 0x35, 0x46,
        0xBE, 0x2E, 0xED, 0xA1, 0xCD, 0xE4, 0x8E, 0xE9, 0x4D, 0x06, 0x28, 0x01,
        0xFE, 0x66, 0x6E, 0x4A, 0x7A, 0xE8, 0xCB, 0x9C, 0xD7, 0x92, 0x62, 0xC0,
        0x17, 0xB0, 0x81, 0xAF, 0x87, 0x4F, 0xF0, 0x04, 0x53, 0xCA, 0x43, 0xE3,
        0x4E, 0xFD, 0xB4, 0x3F, 0xFF, 0xB0, 0xBB, 0x42, 0xA4, 0xE2, 0xD3, 0x2A,
        0x5E, 0x5C, 0xC9, 0xE8, 0x54, 0x6A, 0x22, 0x1F, 0xE9, 0x30, 0x25, 0x0E,
        0x5F, 0x53, 0x33, 0xE0, 0xEF, 0xE5, 0x8F, 0xFE, 0xBF, 0x19, 0x36, 0x9A,
        0x3B, 0x8A, 0xE5, 0xA6, 0x7F, 0x6A, 0x04, 0x8B, 0xC9, 0xEF, 0x91, 0x5B,
        0xDA, 0x25, 0x16, 0x07, 0x29, 0xB5, 0x08, 0x66, 0x7A, 0xDA, 0x84, 0xA0,
        0xC2, 0x7E, 0x7E, 0x26, 0xCF, 0x2A, 0xBC, 0xA4, 0x13, 0xE5, 0xE4, 0x69,
        0x3F, 0x4A, 0x94, 0x05
    };
};

struct rsa_4096_sha256 {
    // Custom test vector
    constexpr static auto exp = std::array<byte_t, 3>{ 0x01, 0x00, 0x01 };
    constexpr static auto mod = std::array<byte_t, 512>{
        0x9E, 0xF3, 0x0D, 0x03, 0x28, 0x73, 0x44, 0xB1, 0x8C, 0x45, 0x8E, 0x91,
        0xD6, 0xA5, 0xA3, 0x65, 0xB8, 0x6D, 0x77, 0xEC, 0x7F, 0xDB, 0x39, 0x2E,
        0xF2, 0x89, 0x79, 0xAF, 0x4D, 0xE1, 0xF8, 0x5F, 0x41, 0xCF, 0xE8, 0xD0,
        0xF6, 0xE9, 0xFF, 0xB0, 0x89, 0x72, 0x62, 0xC4, 0xF2, 0x50, 0x42, 0x4F,
        0x6B, 0x26, 0xD1, 0x34, 0xFF, 0x13, 0xEC, 0x8B, 0x2D, 0x4D, 0x12, 0x0E,
        0x62, 0xF3, 0xD5, 0xF3, 0x89, 0x15, 0xDE, 0x92, 0x87, 0x05, 0xC4, 0x1A,
        0xE8, 0x25, 0xD9, 0x58, 0x71, 0xD1, 0x9E, 0x7B, 0xDD, 0x11, 0x84, 0x75,
        0x15, 0xCE, 0x7E, 0x60, 0x4E, 0xE0, 0x2B, 0x22, 0x30, 0x64, 0xBA, 0xE2,
        0xBB, 0x80, 0x99, 0xF7, 0x92, 0xE9, 0x71, 0x44, 0x18, 0x29, 0xF7, 0xBC,
        0x45, 0x68, 0xB3, 0xF4, 0x07, 0x5C, 0xA0, 0xBB, 0xE6, 0x34, 0xBB, 0x69,
        0xAF, 0x97, 0xAA, 0xC0, 0xA0, 0x2B, 0xC5, 0xF1, 0x32, 0x33, 0x06, 0x50,
        0xAF, 0x81, 0x99, 0xDC, 0xE3, 0x2C, 0xF7, 0xA0, 0xB2, 0xE5, 0x89, 0x4F,
        0x96, 0x28, 0xE8, 0xB8, 0x4F, 0x2F, 0x11, 0x93, 0xCD, 0xFE, 0xAC, 0xEC,
        0x27, 0x91, 0x74, 0x37, 0x82, 0x3D, 0x1E, 0xF2, 0x2E, 0x31, 0x78, 0x1F,
        0xAB, 0x4B, 0x5E, 0x60, 0x0C, 0x2B, 0xA4, 0xDD, 0x7C, 0xEE, 0x79, 0x2D,
        0xC6, 0x10, 0xBB, 0x22, 0x8F, 0x2E, 0xA7, 0x2A, 0x2C, 0xFC, 0xC4, 0x68,
        0xAA, 0xB0, 0x14, 0x5C, 0xEC, 0xB1, 0x43, 0xD5, 0x3C, 0x01, 0x6F, 0x54,
        0xD2, 0x3B, 0x85, 0x22, 0x70, 0x6F, 0xC0, 0xE9, 0x15, 0x57, 0xD1, 0x7C,
        0x78, 0xE8, 0xEA, 0xA6, 0xB4, 0xEC, 0xAA, 0x07, 0xC0, 0x46, 0x56, 0xE1,
        0x54, 0x86, 0x87, 0xF5, 0xF0, 0xBB, 0xAC, 0x1B, 0x8F, 0xA3, 0x33, 0x92,
        0x98, 0x67, 0x4C, 0x74, 0x9A, 0x82, 0x5D, 0xCD, 0x74, 0x16, 0xAA, 0xE2,
        0x4D, 0xDD, 0x57, 0x7A, 0xCC, 0x13, 0x57, 0xEB, 0x37, 0xB7, 0xE5, 0xCA,
        0x0A, 0x89, 0x90, 0xDD, 0xF1, 0xC1, 0x29, 0xB7, 0xE7, 0x7B, 0xDC, 0xB7,
        0x89, 0xC8, 0x6A, 0x57, 0x9E, 0x90, 0x43, 0xF4, 0x78, 0x92, 0xE6, 0x06,
        0x8B, 0x42, 0x55, 0x12, 0x68, 0x91, 0x4F, 0x3B, 0x1E, 0xC0, 0xD5, 0x9A,
        0xF0, 0x9F, 0x7B, 0xE0, 0xAD, 0x38, 0xE3, 0x96, 0x5D, 0x71, 0x6C, 0xDE,
        0x02, 0x32, 0xDF, 0x7A, 0x55, 0x7C, 0x40, 0x16, 0xFD, 0x84, 0x4B, 0x5F,
        0xC3, 0xEE, 0x73, 0xE4, 0xE1, 0xD6, 0x19, 0x88, 0x19, 0xF3, 0xB3, 0xC6,
        0x24, 0x71, 0xBA, 0xFF, 0x60, 0xF1, 0x53, 0x9E, 0x83, 0x1F, 0xC1, 0x08,
        0x8A, 0xC9, 0xEF, 0xAF, 0xCB, 0x20, 0xC3, 0x85, 0x3A, 0x18, 0x03, 0xE2,
        0x18, 0x20, 0xBA, 0x8E, 0x04, 0x68, 0x2D, 0x82, 0x19, 0xC0, 0xE0, 0x5D,
        0x9C, 0xE2, 0x38, 0x1F, 0xE3, 0xBD, 0x6A, 0xA2, 0x1C, 0x7A, 0xFF, 0x2B,
        0xE7, 0x6D, 0xD7, 0xFD, 0x5E, 0xBE, 0xC2, 0x24, 0x95, 0xBC, 0x3D, 0x21,
        0xA7, 0xDD, 0x73, 0x17, 0x80, 0x51, 0x31, 0x28, 0x1A, 0x43, 0xDB, 0xA7,
        0x63, 0x31, 0x90, 0x38, 0x28, 0x95, 0x3D, 0x22, 0x74, 0x87, 0x21, 0xB9,
        0xE8, 0xCA, 0xBD, 0xF3, 0xD6, 0xC1, 0xA2, 0xAC, 0xF8, 0x4F, 0x7C, 0xCF,
        0xAE, 0x84, 0x6F, 0x69, 0x68, 0xFB, 0x97, 0x17, 0x3F, 0x21, 0xAF, 0x9C,
        0xD1, 0x39, 0xDB, 0xCB, 0x6C, 0x12, 0x45, 0x89, 0x3D, 0x10, 0xA7, 0x5B,
        0x81, 0xFD, 0x7A, 0x7C, 0x1A, 0xC4, 0xF8, 0x14, 0x61, 0x8B, 0x2D, 0x87,
        0xF2, 0x6E, 0xD1, 0x4C, 0x6D, 0x24, 0x53, 0x77, 0x52, 0x76, 0xDD, 0xE9,
        0x45, 0x23, 0x23, 0x01, 0x35, 0x11, 0xEE, 0xCE, 0x1F, 0xC8, 0x67, 0xB5,
        0xA6, 0x3C, 0x26, 0x5F, 0x43, 0xD7, 0xDF, 0xB0, 0xD8, 0x3E, 0x53, 0xA7,
        0xD0, 0x50, 0xD7, 0x15, 0x50, 0x1A, 0x4A, 0xB3
    };

    constexpr static auto md = std::array<byte_t, 32>{
        0x42, 0x95, 0xCF, 0x86, 0xE1, 0x1B, 0x13, 0x7A, 0x6A, 0xC2, 0x31, 0xA0,
        0xB0, 0xC1, 0xD1, 0x2B, 0x19, 0x69, 0x9E, 0x3F, 0xC6, 0x99, 0xD8, 0x9C,
        0xF2, 0x04, 0x5D, 0xDE, 0x30, 0x38, 0x00, 0x98
    };

    constexpr static auto sig = std::array<byte_t, 512>{
        0x4D, 0x1B, 0x86, 0x2F, 0x07, 0x7B, 0x55, 0x21, 0x5B, 0x03, 0x7F, 0xA6,
        0x88, 0x55, 0xD5, 0xF5, 0x8D, 0x7D, 0xC1, 0x93, 0xA4, 0x2E, 0x92, 0xDF,
        0xF7, 0xBD, 0x63, 0x6E, 0x11, 0xD0, 0x26, 0x9C, 0x42, 0x0E, 0x25, 0xAF,
        0x5D, 0x05, 0xC5, 0x1D, 0x42, 0xAA, 0xBB, 0x53, 0xEC, 0xF0, 0x0B, 0xB7,
        0x78, 0xD3, 0xF2, 0x88, 0x14, 0xD8, 0xCB, 0x3D, 0x03, 0xC3, 0x85, 0x82,
        0xDF, 0xE8, 0x17, 0x86, 0x02, 0x3C, 0xE0, 0xBE, 0x25, 0x18, 0xC3, 0x41,
        0xD5, 0x82, 0xAE, 0xE4, 0xEF, 0x64, 0xD0, 0x99, 0xE0, 0x61, 0xF1, 0xB5,
        0x93, 0x87, 0x0E, 0x12, 0x2D, 0x50, 0x68, 0x3D, 0x46, 0x9D, 0x5D, 0x77,
        0x17, 0x85, 0x77, 0xDC, 0xF5, 0x11, 0xB1, 0x2A, 0x37, 0x6A, 0x51, 0x48,
        0x72, 0xF7, 0x77, 0x7C, 0x95, 0xFA, 0xCC, 0x04, 0xFB, 0xDD, 0x1C, 0x09,
        0x8F, 0xE5, 0xC0, 0x8D, 0x6E, 0xDB, 0xF7, 0xBB, 0xE7, 0x53, 0xDE, 0x57,
        0x64, 0xA6, 0xE1, 0x41, 0x65, 0xE5, 0x1E, 0x10, 0x60, 0x5D, 0x09, 0xE6,
        0xB8, 0xF1, 0xA4, 0x91, 0xAA, 0xD3, 0x24, 0xD3, 0x6D, 0xFF, 0x60, 0xAD,
        0x9D, 0x84, 0x7B, 0x96, 0x94, 0x0A, 0x43, 0x3A, 0xE7, 0x07, 0xD5, 0x97,
        0xDA, 0xD2, 0xB8, 0x4E, 0x1F, 0xA5, 0x09, 0x6E, 0xCC, 0x88, 0x0A, 0x8D,
        0x89, 0xA2, 0x64, 0x7A, 0xB4, 0x28, 0x47, 0x57, 0x4E, 0x96, 0x88, 0x84,
        0xB4, 0x3F, 0x48, 0x79, 0x8D, 0x02, 0x59, 0x97, 0x8B, 0x8C, 0xCF, 0xBC,
        0x00, 0x46, 0x54, 0x5A, 0x03, 0xC2, 0x67, 0x02, 0x69, 0xC9, 0x75, 0x8B,
        0x9B, 0xFA, 0x75, 0x8C, 0xD2, 0x84, 0x70, 0x7F, 0xE5, 0x38, 0xF2, 0xBB,
        0x61, 0x3A, 0x10, 0xE0, 0xAA, 0x91, 0xBC, 0x7C, 0x65, 0x1B, 0x33, 0xAA,
        0xAF, 0x0C, 0x3C, 0x8E, 0xBD, 0xD3, 0x5C, 0xD8, 0x72, 0x7B, 0x69, 0x15,
        0xEF, 0xD1, 0xB1, 0x71, 0x49, 0x59, 0x78, 0x03, 0xD3, 0xE5, 0x18, 0x7B,
        0x34, 0xDD, 0x9E, 0xD8, 0xCF, 0xED, 0xB4, 0xEB, 0xB5, 0x8D, 0x78, 0xB5,
        0x47, 0x25, 0x39, 0x94, 0x91, 0xD3, 0x31, 0x6B, 0x12, 0x58, 0x37, 0xD8,
        0xE1, 0x26, 0xF0, 0xF9, 0x24, 0x81, 0xD4, 0x7E, 0x0C, 0xEB, 0xCC, 0xE0,
        0x73, 0xBA, 0xD5, 0x5A, 0xA5, 0xC6, 0x8C, 0x8F, 0x0D, 0x2C, 0x3B, 0xFA,
        0xDF, 0x71, 0xB3, 0xE7, 0x5F, 0x39, 0x04, 0xC2, 0xF2, 0xFF, 0x74, 0x9C,
        0x60, 0xBF, 0xAC, 0x05, 0xA3, 0x51, 0xE3, 0xF8, 0x52, 0xE0, 0x56, 0xCF,
        0xDA, 0xA9, 0x30, 0x64, 0x8A, 0xF1, 0x94, 0x8F, 0x3F, 0x9E, 0xD1, 0x32,
        0xDE, 0x22, 0x2B, 0xC9, 0xC0, 0x51, 0x46, 0xE3, 0x60, 0x49, 0x28, 0x02,
        0xBA, 0xA6, 0xEA, 0x25, 0xD4, 0x5E, 0x69, 0x45, 0x21, 0x3D, 0x3E, 0x4E,
        0xA7, 0xAC, 0x82, 0x4C, 0x7C, 0xD1, 0xD9, 0x02, 0x80, 0x12, 0x11, 0xFA,
        0x34, 0xAF, 0x8E, 0xBC, 0xBA, 0x96, 0x92, 0x9F, 0x82, 0x59, 0x16, 0xDA,
        0x83, 0xCC, 0xB7, 0xA9, 0x5B, 0xA3, 0xDD, 0x83, 0x6C, 0x6D, 0xD0, 0x91,
        0xA3, 0x0B, 0x66, 0x95, 0x7F, 0xFD, 0x08, 0x4E, 0x0A, 0x0B, 0x1A, 0xEA,
        0xA0, 0xB5, 0xCC, 0x24, 0x21, 0x80, 0xDE, 0x96, 0x50, 0xFB, 0x92, 0x1B,
        0xE6, 0xD0, 0x1B, 0x24, 0xF0, 0x78, 0x48, 0x7A, 0x62, 0x94, 0x61, 0xFB,
        0xD2, 0x68, 0x4D, 0xB0, 0xB6, 0x90, 0x15, 0xC4, 0x8A, 0xAA, 0x0A, 0x6E,
        0xDD, 0xB0, 0x4E, 0xF8, 0x7B, 0xDD, 0x01, 0x2C, 0xC8, 0xFD, 0xBF, 0x4E,
        0x05, 0xCB, 0x69, 0x46, 0xFD, 0x8E, 0x4A, 0x89, 0xA0, 0xF6, 0x9E, 0xAA,
        0x86, 0xD3, 0xF4, 0x0F, 0x01, 0xC3, 0xFE, 0x0D, 0xEB, 0x81, 0x1C, 0xE2,
        0x83, 0xD7, 0x72, 0x99, 0xF6, 0x45, 0x48, 0x8F, 0xEF, 0x41, 0xA7, 0x69,
        0x2D, 0x40, 0x0F, 0x9A, 0xFE, 0xBB, 0x6A, 0x67
    };
};

struct rsa_1024_sha512 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 1024 with SHA-512
    constexpr static auto exp = std::array<byte_t, 3>{ 0xd4, 0x3d, 0x27 };
    constexpr static auto mod = std::array<byte_t, 128>{
        0xA9, 0xF1, 0x79, 0x5F, 0xC6, 0x4A, 0x9F, 0xAC, 0x0E, 0xDD, 0x45, 0x53,
        0xEA, 0x5B, 0x72, 0x2B, 0x34, 0xB5, 0x26, 0x6B, 0xEF, 0x29, 0x59, 0x4F,
        0xA8, 0x0D, 0xC8, 0xC6, 0x4D, 0x33, 0xC3, 0x45, 0x9E, 0xDB, 0xFD, 0x36,
        0xFD, 0x7B, 0x85, 0x20, 0x3D, 0xBE, 0x4C, 0xA1, 0x7C, 0xDF, 0x7A, 0xE5,
        0x3E, 0x5F, 0xAF, 0xDE, 0xED, 0x8E, 0x8A, 0x68, 0x82, 0x64, 0x85, 0x8D,
        0xB1, 0x81, 0x24, 0x43, 0x8A, 0x3B, 0xF3, 0x11, 0x0A, 0x72, 0x1D, 0x94,
        0x27, 0x6C, 0xD4, 0x7D, 0x7E, 0x5C, 0x2E, 0x15, 0x47, 0xDD, 0x5C, 0xB8,
        0x02, 0x12, 0xD5, 0x94, 0x57, 0x14, 0x32, 0x50, 0x69, 0x87, 0xDB, 0xB4,
        0xA2, 0x50, 0xDE, 0x62, 0xEE, 0xBD, 0xC1, 0x9A, 0x79, 0xF8, 0x76, 0x22,
        0x8B, 0x2C, 0x4D, 0x04, 0xA1, 0xB5, 0x91, 0x03, 0x95, 0xA8, 0x71, 0x45,
        0x20, 0xE7, 0x8B, 0x99, 0x7B, 0x3B, 0x63, 0x89
    };

    constexpr static auto md = std::array<byte_t, 64>{
        0x27, 0xF4, 0xE0, 0xD2, 0xA3, 0x32, 0x7B, 0xFF, 0xE9, 0xC3, 0xA5, 0x02,
        0x38, 0x00, 0x3F, 0xBF, 0xDD, 0x18, 0x81, 0x9D, 0x56, 0x78, 0x79, 0x19,
        0x05, 0x84, 0x69, 0x63, 0x08, 0xF8, 0xFD, 0xE0, 0x04, 0x5F, 0xEA, 0x06,
        0x9F, 0xE6, 0x1D, 0x89, 0xB5, 0xFF, 0xF7, 0x81, 0x33, 0x88, 0x0A, 0xDD,
        0xA4, 0x1B, 0xD7, 0x12, 0x7A, 0x15, 0x4C, 0xEE, 0xBE, 0x6C, 0x01, 0xFE,
        0x1F, 0x50, 0x64, 0x36
    };

    constexpr static auto sig = std::array<byte_t, 128>{
        0x3F, 0x8E, 0xE1, 0x47, 0x64, 0x3E, 0x68, 0x5B, 0x32, 0x5C, 0x13, 0x55,
        0x7F, 0x44, 0x94, 0x5C, 0x99, 0xEF, 0xEB, 0x0A, 0xEA, 0xBE, 0x71, 0x9A,
        0xC1, 0xDA, 0x3F, 0x69, 0x23, 0xD0, 0x2E, 0xE7, 0x4B, 0x07, 0x67, 0x55,
        0x82, 0x25, 0x54, 0x8F, 0x27, 0x6D, 0x4B, 0xAB, 0x34, 0xE8, 0xF0, 0x9C,
        0x49, 0x09, 0xA2, 0x51, 0xCD, 0xFD, 0x7B, 0xE3, 0xCB, 0x7F, 0x57, 0xF4,
        0xD8, 0xF4, 0xBC, 0xD0, 0x1D, 0xFF, 0x0F, 0xA5, 0x32, 0xAC, 0x31, 0x16,
        0x77, 0x0F, 0x05, 0x27, 0xB5, 0x6C, 0x44, 0x15, 0xDF, 0x19, 0xFB, 0xA0,
        0x48, 0x58, 0xE7, 0x07, 0x03, 0xF0, 0x6B, 0x6F, 0x02, 0xCD, 0xD6, 0x42,
        0x0D, 0x25, 0x5A, 0x21, 0x95, 0x3A, 0xE3, 0x28, 0xAA, 0x17, 0xEB, 0x9E,
        0x15, 0x1E, 0xA1, 0xFC, 0x09, 0x16, 0xFE, 0x3F, 0x35, 0x06, 0xD8, 0xF1,
        0x4E, 0xF8, 0xE8, 0xE0, 0x9F, 0x6E, 0x2E, 0x26
    };
};

struct rsa_2048_sha512 {
    // NIST FIPS 186-4 test vectors
    // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
    // CAVS 11.0
    // "SigVer PKCS#1 Ver 1.5" information
    // Combinations selected: Mod Size 2048 with SHA-512
    constexpr static auto exp = std::array<byte_t, 3>{ 0xa3, 0xe1, 0x87 };
    constexpr static auto mod = std::array<byte_t, 256>{
        0xB6, 0x51, 0x50, 0x48, 0xE1, 0xF7, 0xA3, 0x50, 0x6D, 0x6B, 0xF0, 0x28,
        0xEA, 0x05, 0x16, 0x59, 0x20, 0x78, 0xA2, 0xEB, 0xD6, 0xDB, 0x04, 0xAF,
        0x60, 0x40, 0xBB, 0x5D, 0xDE, 0x88, 0x88, 0x78, 0x7E, 0x1F, 0xD9, 0x73,
        0xB1, 0xD1, 0x60, 0xDA, 0x25, 0xBA, 0x90, 0x95, 0x45, 0x0D, 0x86, 0x66,
        0x25, 0xAE, 0xB7, 0xCF, 0x68, 0x4B, 0x52, 0x2A, 0xF4, 0xED, 0xBC, 0x20,
        0xAD, 0xFA, 0xD0, 0x9E, 0x9C, 0x4C, 0x42, 0x91, 0x9B, 0x76, 0x91, 0xE1,
        0x40, 0x4A, 0xFE, 0x88, 0x15, 0xF2, 0x29, 0x00, 0x1B, 0xF7, 0xF8, 0xE2,
        0xB1, 0xC5, 0x11, 0xD5, 0x62, 0x07, 0x97, 0x2E, 0x3E, 0xFA, 0x58, 0x8F,
        0x04, 0xF7, 0xBE, 0xA8, 0x2B, 0x64, 0xC4, 0x5B, 0xC2, 0x8B, 0xBC, 0x5E,
        0x3C, 0xA3, 0xB1, 0xBE, 0x86, 0x52, 0xC5, 0x4A, 0x33, 0x93, 0xE9, 0x5A,
        0x58, 0xC7, 0x8C, 0x34, 0xC7, 0xC7, 0xCE, 0xEC, 0xA9, 0x83, 0xE9, 0x19,
        0x20, 0x46, 0x7D, 0x18, 0x4E, 0xCD, 0x5A, 0xAD, 0x01, 0x14, 0xF8, 0x3D,
        0x05, 0x17, 0xE6, 0xEE, 0x82, 0x94, 0x4C, 0xF1, 0x34, 0xE9, 0xEF, 0xDB,
        0x68, 0xF1, 0x43, 0x22, 0x51, 0x7A, 0xCC, 0x10, 0x28, 0x5C, 0x89, 0x2C,
        0x94, 0xE6, 0x89, 0x2C, 0x96, 0x59, 0xFB, 0x85, 0xAF, 0x6D, 0x11, 0x32,
        0x2D, 0xF9, 0x4E, 0xDE, 0xB7, 0x7A, 0x37, 0x9E, 0x97, 0xC7, 0x60, 0x8E,
        0x5D, 0x23, 0xC8, 0x9B, 0x56, 0xA7, 0x22, 0xB5, 0x4D, 0x91, 0xF0, 0x81,
        0x18, 0x55, 0xC2, 0x1E, 0x0C, 0x41, 0xED, 0x36, 0x2A, 0xE1, 0x44, 0xE2,
        0xF4, 0x6E, 0xEB, 0xB9, 0x7A, 0x90, 0x57, 0xC6, 0x73, 0xDD, 0xCC, 0xC0,
        0xF2, 0xCE, 0x17, 0x8C, 0x3A, 0xF0, 0x86, 0xD1, 0xF9, 0x3A, 0x09, 0x2A,
        0x2A, 0xE5, 0x8B, 0xB0, 0x70, 0x3C, 0xA6, 0x63, 0x18, 0x91, 0x3E, 0x69,
        0xE3, 0x6F, 0xD9, 0x97
    };

    constexpr static auto md = std::array<byte_t, 64>{
        0x79, 0x50, 0xF8, 0x74, 0x43, 0x54, 0xA1, 0xEC, 0x6F, 0xA4, 0x63, 0xAD,
        0xC4, 0x29, 0x56, 0x29, 0x85, 0xB9, 0x4E, 0x64, 0xC8, 0xF2, 0xE5, 0xD7,
        0x16, 0xF1, 0xC3, 0xB1, 0x55, 0x6D, 0xBA, 0x31, 0xBB, 0x29, 0x0E, 0x89,
        0xE8, 0x89, 0x67, 0x95, 0x7F, 0xBC, 0xBC, 0x15, 0x33, 0xDC, 0x23, 0x00,
        0xCE, 0xC2, 0x73, 0xB0, 0x99, 0x0B, 0x7C, 0x93, 0x87, 0x51, 0x57, 0x25,
        0x7E, 0xE4, 0x5F, 0x37
    };

    constexpr static auto sig = std::array<byte_t, 256>{
        0xAC, 0x87, 0xAA, 0xD4, 0xCE, 0x85, 0x03, 0x8B, 0x85, 0x52, 0xC4, 0xA6,
        0xE9, 0x3E, 0xD9, 0x43, 0x68, 0xBB, 0x33, 0x76, 0xCE, 0x17, 0xBA, 0x1D,
        0x08, 0x81, 0x2E, 0x00, 0x4B, 0x43, 0xA9, 0x52, 0xE2, 0x7F, 0xC5, 0x0D,
        0xAE, 0xE8, 0x92, 0x90, 0x94, 0xE7, 0x47, 0xDF, 0xBE, 0x02, 0x58, 0x4A,
        0x76, 0x54, 0xD9, 0x50, 0xD2, 0x17, 0x00, 0x60, 0x5E, 0x69, 0x95, 0x61,
        0xC0, 0x3E, 0x64, 0xD2, 0x01, 0x64, 0x04, 0xDA, 0x7B, 0x9C, 0x0B, 0x00,
        0x11, 0xFF, 0x64, 0xF2, 0x06, 0x22, 0x5D, 0xB1, 0xC8, 0xB5, 0xF9, 0x74,
        0xBB, 0xEC, 0xA7, 0x20, 0xA7, 0xC2, 0xEC, 0x73, 0xE6, 0xFB, 0xF5, 0x8A,
        0xDC, 0xC6, 0xF5, 0xCC, 0x24, 0xDF, 0x6D, 0x09, 0xAD, 0xE7, 0x44, 0x16,
        0xF3, 0x0D, 0xF7, 0x0C, 0x44, 0x49, 0x82, 0x0F, 0x24, 0x37, 0x8B, 0x90,
        0xC1, 0x76, 0xF6, 0x56, 0x51, 0xAB, 0x1C, 0x1F, 0xC8, 0x2D, 0x3F, 0xE8,
        0x34, 0xE7, 0xB6, 0x6D, 0x0D, 0xAE, 0xA4, 0x7B, 0x8D, 0x19, 0x31, 0xA8,
        0x1D, 0x1F, 0xED, 0xD4, 0xE6, 0x99, 0x6C, 0x56, 0xED, 0xBE, 0x49, 0x6F,
        0xA2, 0x37, 0xFB, 0xD4, 0x18, 0x76, 0xA4, 0x60, 0x78, 0x01, 0x00, 0xE4,
        0xE6, 0xF0, 0x86, 0x4B, 0x6F, 0x92, 0x82, 0xAB, 0xAE, 0x4E, 0xCD, 0x98,
        0x63, 0x05, 0x48, 0xB5, 0xCB, 0x42, 0xE6, 0x6C, 0xF9, 0xEB, 0x89, 0x0E,
        0x06, 0x51, 0xF1, 0x59, 0xF3, 0x56, 0x28, 0x3A, 0xF4, 0x0C, 0x02, 0x91,
        0x3D, 0x2F, 0x3B, 0xBF, 0x6D, 0x8E, 0xBA, 0xF6, 0xB7, 0xD8, 0x8E, 0x66,
        0x99, 0xF4, 0x82, 0xD7, 0x82, 0x54, 0x28, 0xCC, 0xB7, 0xEF, 0x81, 0x29,
        0xDB, 0xC6, 0x65, 0xBD, 0x4D, 0xF8, 0xE9, 0xA0, 0x7C, 0x33, 0x9A, 0x11,
        0x34, 0xE9, 0x07, 0xE4, 0x39, 0xD0, 0x84, 0x64, 0x80, 0xAE, 0x6C, 0x88,
        0x8C, 0x1E, 0x9B, 0xE2
    };
};
