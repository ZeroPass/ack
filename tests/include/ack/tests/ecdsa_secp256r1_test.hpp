// Copyright Â© 2023 ZeroPass <zeropass@pm.me>
// Author: Crt Vavros
#pragma once
#include <ack/ec.hpp>
#include <ack/ec_curve.hpp>
#include <ack/ecdsa.hpp>
#include <ack/keccak.hpp>
#include <ack/utils.hpp>
#include <ack/tests/ecdsa_test_utils.hpp>
#include <ack/tests/utils.hpp>

#include <eosio/crypto.hpp>
#include <eosio/tester.hpp>

namespace ack::tests {
    EOSIO_TEST_BEGIN( ecdsa_secp256r1_test )
        using namespace ec_curve;
        using bn_t = ec_fixed_bigint<256>;
        constexpr auto& curve = secp256r1;

        // Verify that the curve parameters are correct
        REQUIRE_EQUAL( secp256r1.p  , "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff" )
        REQUIRE_EQUAL( secp256r1.a  , "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc" )
        REQUIRE_EQUAL( secp256r1.b  , "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b" )
        REQUIRE_EQUAL( secp256r1.g.x, "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296" )
        REQUIRE_EQUAL( secp256r1.g.y, "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" )
        REQUIRE_EQUAL( secp256r1.n  , "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551" )
        REQUIRE_EQUAL( secp256r1.h  , 1 )
        REQUIRE_EQUAL( secp256r1.verify(), true )

        // Custom test vectors
        {
            constexpr auto pubkey_point = curve.make_point(
                "E424DC61D4BB3CB7EF4344A7F8957A0C5134E16F7A67C074F82E6E12F49ABF3C",
                "970EED7AA2BC48651545949DE1DDDAF0127E5965AC85D1243D6F60E7DFAEE927"
            );

            constexpr bn_t sig_r = "BF96B99AA49C705C910BE33142017C642FF540C76349B9DAB72F981FD9347F4F";
            constexpr bn_t sig_s = "17C55095819089C2E03B9CD415ABDF12444E323075D98F31920B9E0F57EC871C";

            auto digest = hash256( from_hex( "D1B8EF21EB4182EE270638061063A3F3C16C114E33937F69FB232CC833965A94" ) );
            bool result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, digest, sig_r, sig_s, curve );
        }

        // Test vectors from RFC-6979
        // Appendix A.2.5.  ECDSA, 256 Bits (Prime Field)
        // https://www.ietf.org/rfc/rfc6979.txt
        {
            constexpr auto pubkey_point = curve.make_point(
                "60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6",
                "7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299"
            );

            auto msg    = make_bytes( "sample" );
            auto d160   = eosio::sha1( (const char*)msg.data(), msg.size() );
            bn_t sig_r  = "61340C88C3AAEBEB4F6D667F672CA9759A6CCAA9FA8811313039EE4A35471D32";
            bn_t sig_s  = "6D7F147DAC089441BB2E2FE8F7A3FA264B9C475098FDCF6E00D7C996E1B8B7EB";
            bool result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d160, sig_r, sig_s, curve );

            auto d256 = eosio::sha256( (const char*)msg.data(), msg.size() );
            sig_r     = "EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716";
            sig_s     = "F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8";
            result    = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d256, sig_r, sig_s, curve );

            auto d512 = eosio::sha512( (const char*)msg.data(), msg.size() );
            sig_r     = "8496A60B5E9B47C825488827E0495B0E3FA109EC4568FD3F8D1097678EB97F00";
            sig_s     = "2362AB1ADBE2B8ADF9CB9EDAB740EA6049C028114F2460F96554F61FAE3302FE";
            result    = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d512, sig_r, sig_s, curve );

            msg    = make_bytes( "test" );
            d160   = eosio::sha1( (const char*)msg.data(), msg.size() );
            sig_r  = "0CBCC86FD6ABD1D99E703E1EC50069EE5C0B4BA4B9AC60E409E8EC5910D81A89";
            sig_s  = "01B9D7B73DFAA60D5651EC4591A0136F87653E0FD780C3B1BC872FFDEAE479B1";
            result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d160, sig_r, sig_s, curve );

            d256   = eosio::sha256( (const char*)msg.data(), msg.size() );
            sig_r  = "F1ABB023518351CD71D881567B1EA663ED3EFCF6C5132B354F28D3B0B7D38367";
            sig_s  = "019F4113742A2B14BD25926B49C649155F267E60D3814B4C0CC84250E46F0083";
            result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d256, sig_r, sig_s, curve );

            d512   = eosio::sha512( (const char*)msg.data(), msg.size() );
            sig_r  = "461D93F31B6540894788FD206C07CFA0CC35F46FA3C91816FFF1040AD1581A04";
            sig_s  = "39AF9F15DE0DB8D97E72719C74820D304CE5226E32DEDAE67519E840D1194E55";
            result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, d512, sig_r, sig_s, curve );
        }

        // https://github.com/kmackay/micro-ecc/issues/196
        {
            {
                constexpr auto pubkey_point = curve.make_point(
                    "7CF27B188D034F7E8A52380304B51AC3C08969E277F21B35A60B48FC47669978",
                    "07775510DB8ED040293D9AC69F7430DBBA7DADE63CE982299E04B79D227873D1"
                );

                constexpr bn_t sig_r = "56CD9CF152BCCC3A64E41E2B2BF91ED0661E0821B14B50ABE93C05EA889AFED3";
                constexpr bn_t sig_s = "F93452957106BAB410617E306D876BB58FA7D7B5A515AC6B6181D8D638651FC7";

                auto digest = hash256( from_hex( "797601B76D29603D167FA1062CC27B00BB0E39493BF3B7BBAFA610C2B24F4A20" ) );
                bool result = true; // Signature is valid
                test_ecdsa_verification( result, pubkey_point, digest, sig_r, sig_s, curve );
            }
            {
                constexpr auto pubkey_point = curve.make_point(
                    "495D1499B6626EA994AF768FF960ACFAC3AF290F8C9816A158A7EE71BE895E79",
                    "2A168AAEB797EA665786966356715BCB44CC51D792F4BCD6320C370A73871F69"
                );

                constexpr bn_t sig_r = "495D1499B6626EA994AF768FF960ACFAC3AF290F8C9816A158A7EE71BE895E79";
                constexpr bn_t sig_s = "06783594BFE892D4C1DAA797F9B49D4C29B9F5131F9A203C717C0224329B18F9";

                auto digest = hash256( from_hex( "EF798CFF4C935DCA6CC19338F48FFD6185A7EB461216985FC3D72552F5B91836" ) );
                bool result = true; // Signature is valid
                test_ecdsa_verification( result, pubkey_point, digest, sig_r, sig_s, curve );
            }
        }

        // NIST FIPS 186-4 test vectors
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.0
        // "SigVer" information
        // Curves/SHAs selected: P-256,SHA-1 P-256,SHA-256 P-256,SHA-512
        // Generated on Wed Mar 16 16:16:55 2011
        {
            // [P-256,SHA-1]
            {
                auto pubkey = curve.make_point( "1198b3c409a8b47edb1347e0982d533cb1813e5cb2a92c824b2881b3cd2f3f4a", "0bdbac5fa02e41e775f8d602446d58ecb2209b5a3d79ae69eef399016e992e87" );
                auto m      = "2d9c344f6877877290ad536c9eca2cfb92f3973b208367b90eaa73320326025663959b0d165ab88902c891dc1bf61a96a76e4488d6c299698e94f36b198e1f2b0d243d184ab145eb5c2253ff7ad10fd2df710e15015493f1b2fcbb28d5cd734b638d8d123bde9ff03027ac7345b5928c1963645b80f0e8dfa53fb3f694cc8bda"_hex;
                bn_t sig_r  = "9206d435f148f88c15b2effbf3c506e41b2c620102022b801e371d0767b54bea";
                bn_t sig_s  = "cbc4e1674ae1af69873946ccf6275946e59e0107278749b2d0010795833d80fa";
                auto r = false; // Result = F (3 - S changed)
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "f7c6280aecd6b936513b0ca84e63346333dc41437a15442e605d46bba93ae101", "3c834cecc16167b07866a9478f9f2d882de7ef937da447cd837e60cb5ed65d81" );
                m      = "b6f46b2a2e9e8ab9ab1927ff7c86ea3df6e8dc391248644bded191af47e53ff6eb251e3b724feaa704c59ee9c99973ef83a4d38f7c2f0297d6f8f43bb33b672ccb4aa1b48bb8977f31e494a3236fed1ed5f2ff7e895e3edb55fb0e1410eb8e858ec037e09076256dbed71aa914e4c8af63fdd4b69832bb69019ad841e15b35d0"_hex;
                sig_r  = "f615af212ab030c4bbf9362d9815a1462312df4beb4358a7ce80d820355420bf";
                sig_s  = "d12ed715ef65cfe6fe6bf348364088a0e7f70927bbafe4c12fc4cb65c0cc51bc";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "0e7632dbc4db879e10d1d80f2789d9fa414c1fe77a6c1e56d6667af43e36e610", "6f0dd2a5840e5a6f6ff7e23f656f5c945b7a493fbb0cfd5b9b531bf04435b1ef" );
                m      = "ef1e60767413eb9c0e24e578c78b3b14613047f9217901996dfa6f61e2f6f953fd7ae253e6a3a1e12754aa4e2b2251654b861073f5db8615f783813c686547ffe9457a30fe86ab4a6cd5c5c05e23f7407f21f6413efdfe84bcc0d0b2852675c07aa579296d8d7a08d0b9bf863c8e2fb106741d977272ab8d307f31824a693dbf"_hex;
                sig_r  = "2b0b9ab4a575732a168f28494b66a855fc1a757fb1177864bf3e4f0a000c4a86";
                sig_s  = "54901ce2f92f55ac112afa0f8b62bc00b44c8c10fe0c863675bfd305d6dc0cd8";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "1613f12bae8e98d09b4bba53f5229596a0d417d2c625f41bb15f923b3c1e4b57", "411319fa85227997a4cf3b1756161485124d2cedc38c9c30d82f42dc2647d545" );
                m      = "3b9e4ed5930c37f2dd52ae3dd938aa2d4f265839b31b986e04eb6cf6b1f35743a3ef8260aadee414c75e13900b2e35ffa4fc7cbee8a8b4f14354eb2a5510e483c62ba74723803e802df4f3d6dc24017ed86772fe964c49ad7ac3b6f218a5752c972be718824f85a42e71269c187494d5a52258c3e9059d962132b9ae8aa70bd8"_hex;
                sig_r  = "ed058d476a77be99c1b0fc8502abe545541b4c0ff3eed3f558133ae2f02042b0";
                sig_s  = "c571b4895712a4f64f7220b0694cab767379b09f1824fe7874acd127deb2371e";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "88bb041dcb1733a676a7f4ae8d3e407d72d5396547f07db77078485c1d5db077", "72cf2b55e596cd140c58228f1b0a19c34fca26ffac043528a417c5abb6fca9c9" );
                m      = "06a04290ea6f64ff0ee5f59b325c9108a9acc4f70af32092a321cd9dd14115e48ad5e4f1ec5cc1cbd05a29d06cf8f5c4a7101301c117fcd62b18e081156a1049d0a11545647d41b16e4edc2aa51460853283c8411cfd8a45172ebe540c06881c85f3a84718440cc7835d5128b63e3e158f30ac4e284757996958b2905b06c8d7"_hex;
                sig_r  = "87208734deb125dca68f0d33f9d369cf1b79cf5a021391b9c6c1727d2efe663a";
                sig_s  = "b984f722de18f1ce407104342948f03f2b55413a096c4b5fca1e032a2c814a4a";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "811eb5180def7fb60d632f8cb2cba831b88cee778aa2a82ec3a5fc3d80ff7fb6", "db88d65b0fc35d9ba1f1ced0400434979ae895d371d1441d7c7a441a9fb1709b" );
                m      = "6e7047fefb707b9f8c1b645ea78958f7136519a3cb111485979c318637fd7247fe093ea93c02c78dbb590cdfcb3e9702ed7bef95ed3000d6a5b7ea9014f6588b10985f105b4e53494adb23b7ebadbb844fa239c02e3781776b9a6ce476d1078664f226d280615af80c4ecff2c718e57bfc4ca5da4aeb7bfbda021cf48603d723"_hex;
                sig_r  = "c329fa28dac0018276c5af0cd770e60be50bc14e2562d5556991971edc7d4916";
                sig_s  = "2d111d13837a02fa279fe835a7dc59a521864d92b26649ca4e24b36ae93878e8";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "4a6f1e7f7268174d23993b8b58aa60c2a87b18de79b36a750ec86dd6f9e12227", "572df22bd6487a863a51ca544b8c5de2b47f801372a881cb996a97d9a98aa825" );
                m      = "3779c87fe0fd8d54e7a677a3610851611d1953ecb50b2919d76233ced63fc8b5a92ae278ebabfaac3eb59684217445ec240c192e1956b24bbabd80a6a7871675634f1149465ba90f8fc4d68182798a4ea86596747a29f8d10555f35752d891678a62b86036b68bc118138cf684e9abb843bcfd3e1c899bc490354525dbecb824"_hex;
                sig_r  = "4a800e24de65e5c57d4cab4dd1ef7b6c38a2f0aa5cfd3a571a4b552fb1993e69";
                sig_s  = "d9c89fb983640a7e65edf632cacd1de0823b7efbc798fc1f7bbfacdda7398955";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "f3033d1e548d245b5e45ff1147db8cd44db8a1f2823c3c164125be88f9a982c2", "3c078f6cee2f50e95e8916aa9c4e93de3fdf9b045abac6f707cfcb22d065638e" );
                m      = "485f372d91b762635d3fdbc6d80c5263fafd5f5908cab548a78a74ea6bf07657a12a61c8714dd41d6c670bdb700e315b483f83efc1821ab19e56810ff36aa8c462a1a0f56e269e121ef56efef1bb83c64941e5cf33894fabb821557f8cfe71cdb8e6015df4df41e85d8ae936d9cd54551045ed404e79a69abbd909071475c6cb"_hex;
                sig_r  = "d4255db86a416a5a688de4e238071ef16e5f2a20e31b9490c03dee9ae6164c34";
                sig_s  = "4e0ac1e1a6725bf7c6bd207439b2d370c5f2dea1ff4decf1650ab84c7769efc0";
                r = true; // Result = P (0 )
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "0ea0a6bb6c70966fad1a2307479c12de2322795bdecb70e4b286bd6200ba9c1a", "c40eda3947021348db691ac4086fb6c06b587ce37c155bb0a7d912b93226de81" );
                m      = "e1214be446927e95011ec806444ce37ddb21a1a1d14e939b5a4c834991f85ba84bde22d9afb093c20752cca101cf6d0aefc8fb4593c18ac9dd9d838a1d7f28bbce1e9a20b08226152eb03590e37078c444f91ed24c7934c3c19b7316cf0f3183821df6cc0743c0f3b233eb70359981db0e19be05e135834d4f76bcad4b862961"_hex;
                sig_r  = "f5509deff7bfda3f3759800fa4033af6a84466b114ecb48eac37eff48d2ae1b3";
                sig_s  = "8c4b62dce2082f80caf220cdbb1d02567bbdfab40564b90ef31d86e3e10ce80a";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "e7a57e0f6ec0fa9c7c34978034cf82f039f8fd62804070ad943573fc8efa5775", "87b2cc85dfff2dae5620fbe3e6256bd728de28fc9dc1b5eb6b5d7bd5d29186ad" );
                m      = "7d0853cca7bf29d22b02c49bc19091c3c4a067999fefefebdcfd5998563b5aebef3b6e779fc665ba0954077f63d0608ce4d16ee9edea3646e34dc38f198ce0b25760360a422a3a1946a8e9903fcfc951733676d3b27d6b9c5f73af0ff098da920121bfb06a8741dc52bc1b01c73a1b0d8c517c2904e16fb7cf63306fe2e2da6e"_hex;
                sig_r  = "97642038932fdddbe2021ec1af53ae6b9af00ef9c8b9f26aea582892e80e6285";
                sig_s  = "9cb14918359338041cf795cf6781e4905837fa5ce3b3e50ffafb5f13c73b5bc8";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "be7a651be0c87278569987cf62d7fa1dd1b3d6e1b868d8f4dfb56135a9960eec", "b7a62c588a987760b915edbd7f95506870c60f042471de1d8b2d4cd9d6563391" );
                m      = "d2491a19cc2c114f3b42d9da78e27364360b4e59fdb5b4f0aa330fa22798a34d2356de0123b6b459a386a3ef8eae30738149ea3742c53b5fa195f390fad647ea1b7a09d8ae312f5d3bebcbd3e756ff831e9010a078ed663588f555a39122a6e9786b7a5b709c634e86b88f41a0028e5151cdc6d11874d184c2093c48682f4289"_hex;
                sig_r  = "aa889fb608b6939f6eeacf2f64c3b2e3a6061f2834058c7e724321720b737a63";
                sig_s  = "6cd6d0ef2b93a760daa914e11b9b414bd4d72457405f00a62ab63f36d76efb73";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "76ddc46d8db8d7ce2ce837f60cdabcee92b7c7817ee41c8f066f1ae65f85c318", "bea47191f1c584c87250370ce337a1de1583bcfc20ccc23b7a82e83f19adaa88" );
                m      = "546138ac0fc0c031eee621e5b8779abb728c15c6a71369f644bbc56e36e61f91e91ccd80b15d9bd75fe46493c928c7a3c0eadc2bb9acce0a173e41eeb5957cf232f744116ef875fb708b42fe8e3b184bea118ce06741bd6bc8e0842024ad67eadf811d37a37f7d572cd4ea76184f61e08f81c3b664c46db4fa797d08f9de61a6"_hex;
                sig_r  = "84a42efbf7ec04166ad144d19cd98c120aa2e79d483b5eea6fbdfa7f1222e07b";
                sig_s  = "e41531205e691e65668f69f518abc7b60f32c373434872a043b7358462babf83";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "2f71b932f770ba9daf7c1dd47444ab6cb8881f71a1c597e719845b15cb84ca35", "ab928625b40ec0738d0fc8dbc4df4a1f65d20bc0447b69cfa13bb20b95bb41d4" );
                m      = "41e6ef0cae4eb07fbb5cc0d381029072974fb68f92a7dd5fe9279fcd86949ef5777e8e555ae5d90966de5decd00ec8894b2d8ae2b227789ef6a0697444b40bfd3e5880b97dd993131e2de92853a6f402cff1bbf1e0071d2c66c581ff1727d38ca486e0456dcda16d82a67b46a2f48786e902754016cf3c1df2152aea907de65c"_hex;
                sig_r  = "63fca172bbca6197cd2802a9cb61d74c2b47cf35f6d35203e67ffbaa838be775";
                sig_s  = "e70ec283cd212df6ba3723e26b697501f112d7cf64e4f45185dae76055e09f1e";
                r = true; // Result = P (0 )
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "ce775648b928db82ac5edb3b009d32959a73b86c45e96d4b8d5b6e640b7c2790", "52455caf08ee94d86f0984e9ec9268d74823f2102dd97fced59638055f6af18e" );
                m      = "e2bb35226f7ac77b652c98993b4a0d45f7f25513d66b7a0a25b6a2ccdb2772d7423d034aca445cc4e5332e53c580d1fd48dabbf09f6010fe251efc4ff9f6c09a121d5718d4ce5b26ec35fb5360f4ed9b70ff0cd8fb015cb96f8246acd697be78046ea3906cb0614b50691336d7990f23994a96e0975492524438384e71166048"_hex;
                sig_r  = "2a64b29146588f3153fee1029a0131ac0a8a25ba2ecc494f697c166c7c91fc08";
                sig_s  = "7b429bc12a72ca3d76c119eea9f4098633cc31c87831e54d5d93afd6e8d20f4f";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "cd2f29a53f0ce57e0e4a542c3256e65ebbdc30415f4de771d5d706d3aeacc852", "dbbf2c129f30d11fe77d7816a24187764eae3fb2ff70c1ec745e876e26f5232f" );
                m      = "27500d3ee8bc458633114e09e4fe23fc5a6e2a10f2d32865b55b0dce15f9738366fd0098d7f482923f7fa22d360261a272b5dca94218bae2f88700045a645cf21b23e815170343a4c192a336ba79934d022be0b7104e68bc5c79e411bd3b2c6fca529b19a78df6d901f54cfd39138bf83a6e6c1a4b665e596ccd71a3fe42917c"_hex;
                sig_r  = "2454c5ee84e4f77b554acd368dd412389db8c78429590a092f24db2da43cb761";
                sig_s  = "63e870ce2fa4085d4ff1e360f7a5c101a1f8b288abe71cca56887e613ad034b7";
                r = true; // Result = P (0 )
                d = eosio::sha1( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            // [P-256,SHA-256]
            {
                auto pubkey = curve.make_point( "87f8f2b218f49845f6f10eec3877136269f5c1a54736dbdf69f89940cad41555", "e15f369036f49842fac7a86c8a2b0557609776814448b8f5e84aa9f4395205e9" );
                auto m      = "e4796db5f785f207aa30d311693b3702821dff1168fd2e04c0836825aefd850d9aa60326d88cde1a23c7745351392ca2288d632c264f197d05cd424a30336c19fd09bb229654f0222fcb881a4b35c290a093ac159ce13409111ff0358411133c24f5b8e2090d6db6558afc36f06ca1f6ef779785adba68db27a409859fc4c4a0"_hex;
                bn_t sig_r  = "d19ff48b324915576416097d2544f7cbdf8768b1454ad20e0baac50e211f23b0";
                bn_t sig_s  = "a3e81e59311cdfff2d4784949f7a2cb50ba6c3a91fa54710568e61aca3e847c6";
                auto r = false; // Result = F (3 - S changed)
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "5cf02a00d205bdfee2016f7421807fc38ae69e6b7ccd064ee689fc1a94a9f7d2", "ec530ce3cc5c9d1af463f264d685afe2b4db4b5828d7e61b748930f3ce622a85" );
                m      = "069a6e6b93dfee6df6ef6997cd80dd2182c36653cef10c655d524585655462d683877f95ecc6d6c81623d8fac4e900ed0019964094e7de91f1481989ae1873004565789cbf5dc56c62aedc63f62f3b894c9c6f7788c8ecaadc9bd0e81ad91b2b3569ea12260e93924fdddd3972af5273198f5efda0746219475017557616170e"_hex;
                sig_r  = "dc23d130c6117fb5751201455e99f36f59aba1a6a21cf2d0e7481a97451d6693";
                sig_s  = "d6ce7708c18dbf35d4f8aa7240922dc6823f2e7058cbc1484fcad1599db5018c";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "2ddfd145767883ffbb0ac003ab4a44346d08fa2570b3120dcce94562422244cb", "5f70c7d11ac2b7a435ccfbbae02c3df1ea6b532cc0e9db74f93fffca7c6f9a64" );
                m      = "df04a346cf4d0e331a6db78cca2d456d31b0a000aa51441defdb97bbeb20b94d8d746429a393ba88840d661615e07def615a342abedfa4ce912e562af714959896858af817317a840dcff85a057bb91a3c2bf90105500362754a6dd321cdd86128cfc5f04667b57aa78c112411e42da304f1012d48cd6a7052d7de44ebcc01de"_hex;
                sig_r  = "9913111cff6f20c5bf453a99cd2c2019a4e749a49724a08774d14e4c113edda8";
                sig_s  = "9467cd4cd21ecb56b0cab0a9a453b43386845459127a952421f5c6382866c5cc";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "e424dc61d4bb3cb7ef4344a7f8957a0c5134e16f7a67c074f82e6e12f49abf3c", "970eed7aa2bc48651545949de1dddaf0127e5965ac85d1243d6f60e7dfaee927" );
                m      = "e1130af6a38ccb412a9c8d13e15dbfc9e69a16385af3c3f1e5da954fd5e7c45fd75e2b8c36699228e92840c0562fbf3772f07e17f1add56588dd45f7450e1217ad239922dd9c32695dc71ff2424ca0dec1321aa47064a044b7fe3c2b97d03ce470a592304c5ef21eed9f93da56bb232d1eeb0035f9bf0dfafdcc4606272b20a3"_hex;
                sig_r  = "bf96b99aa49c705c910be33142017c642ff540c76349b9dab72f981fd9347f4f";
                sig_s  = "17c55095819089c2e03b9cd415abdf12444e323075d98f31920b9e0f57ec871c";
                r = true; // Result = P (0 )
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "e0fc6a6f50e1c57475673ee54e3a57f9a49f3328e743bf52f335e3eeaa3d2864", "7f59d689c91e463607d9194d99faf316e25432870816dde63f5d4b373f12f22a" );
                m      = "73c5f6a67456ae48209b5f85d1e7de7758bf235300c6ae2bdceb1dcb27a7730fb68c950b7fcada0ecc4661d3578230f225a875e69aaa17f1e71c6be5c831f22663bac63d0c7a9635edb0043ff8c6f26470f02a7bc56556f1437f06dfa27b487a6c4290d8bad38d4879b334e341ba092dde4e4ae694a9c09302e2dbf443581c08"_hex;
                sig_r  = "1d75830cd36f4c9aa181b2c4221e87f176b7f05b7c87824e82e396c88315c407";
                sig_s  = "cb2acb01dac96efc53a32d4a0d85d0c2e48955214783ecf50a4f0414a319c05a";
                r = true; // Result = P (0 )
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "a849bef575cac3c6920fbce675c3b787136209f855de19ffe2e8d29b31a5ad86", "bf5fe4f7858f9b805bd8dcc05ad5e7fb889de2f822f3d8b41694e6c55c16b471" );
                m      = "666036d9b4a2426ed6585a4e0fd931a8761451d29ab04bd7dc6d0c5b9e38e6c2b263ff6cb837bd04399de3d757c6c7005f6d7a987063cf6d7e8cb38a4bf0d74a282572bd01d0f41e3fd066e3021575f0fa04f27b700d5b7ddddf50965993c3f9c7118ed78888da7cb221849b3260592b8e632d7c51e935a0ceae15207bedd548"_hex;
                sig_r  = "25acc3aa9d9e84c7abf08f73fa4195acc506491d6fc37cb9074528a7db87b9d6";
                sig_s  = "9b21d5b5259ed3f2ef07dfec6cc90d3a37855d1ce122a85ba6a333f307d31537";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "3dfb6f40f2471b29b77fdccba72d37c21bba019efa40c1c8f91ec405d7dcc5df", "f22f953f1e395a52ead7f3ae3fc47451b438117b1e04d613bc8555b7d6e6d1bb" );
                m      = "7e80436bce57339ce8da1b5660149a20240b146d108deef3ec5da4ae256f8f894edcbbc57b34ce37089c0daa17f0c46cd82b5a1599314fd79d2fd2f446bd5a25b8e32fcf05b76d644573a6df4ad1dfea707b479d97237a346f1ec632ea5660efb57e8717a8628d7f82af50a4e84b11f21bdff6839196a880ae20b2a0918d58cd"_hex;
                sig_r  = "548886278e5ec26bed811dbb72db1e154b6f17be70deb1b210107decb1ec2a5a";
                sig_s  = "e93bfebd2f14f3d827ca32b464be6e69187f5edbd52def4f96599c37d58eee75";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "69b7667056e1e11d6caf6e45643f8b21e7a4bebda463c7fdbc13bc98efbd0214", "d3f9b12eb46c7c6fda0da3fc85bc1fd831557f9abc902a3be3cb3e8be7d1aa2f" );
                m      = "1669bfb657fdc62c3ddd63269787fc1c969f1850fb04c933dda063ef74a56ce13e3a649700820f0061efabf849a85d474326c8a541d99830eea8131eaea584f22d88c353965dabcdc4bf6b55949fd529507dfb803ab6b480cd73ca0ba00ca19c438849e2cea262a1c57d8f81cd257fb58e19dec7904da97d8386e87b84948169"_hex;
                sig_r  = "288f7a1cd391842cce21f00e6f15471c04dc182fe4b14d92dc18910879799790";
                sig_s  = "247b3c4e89a3bcadfea73c7bfd361def43715fa382b8c3edf4ae15d6e55e9979";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "bf02cbcf6d8cc26e91766d8af0b164fc5968535e84c158eb3bc4e2d79c3cc682", "069ba6cb06b49d60812066afa16ecf7b51352f2c03bd93ec220822b1f3dfba03" );
                m      = "3fe60dd9ad6caccf5a6f583b3ae65953563446c4510b70da115ffaa0ba04c076115c7043ab8733403cd69c7d14c212c655c07b43a7c71b9a4cffe22c2684788ec6870dc2013f269172c822256f9e7cc674791bf2d8486c0f5684283e1649576efc982ede17c7b74b214754d70402fb4bb45ad086cf2cf76b3d63f7fce39ac970"_hex;
                sig_r  = "f5acb06c59c2b4927fb852faa07faf4b1852bbb5d06840935e849c4d293d1bad";
                sig_s  = "049dab79c89cc02f1484c437f523e080a75f134917fda752f2d5ca397addfe5d";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "224a4d65b958f6d6afb2904863efd2a734b31798884801fcab5a590f4d6da9de", "178d51fddada62806f097aa615d33b8f2404e6b1479f5fd4859d595734d6d2b9" );
                m      = "983a71b9994d95e876d84d28946a041f8f0a3f544cfcc055496580f1dfd4e312a2ad418fe69dbc61db230cc0c0ed97e360abab7d6ff4b81ee970a7e97466acfd9644f828ffec538abc383d0e92326d1c88c55e1f46a668a039beaa1be631a89129938c00a81a3ae46d4aecbf9707f764dbaccea3ef7665e4c4307fa0b0a3075c"_hex;
                sig_r  = "87b93ee2fecfda54deb8dff8e426f3c72c8864991f8ec2b3205bb3b416de93d2";
                sig_s  = "4044a24df85be0cc76f21a4430b75b8e77b932a87f51e4eccbc45c263ebf8f66";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "43691c7795a57ead8c5c68536fe934538d46f12889680a9cb6d055a066228369", "f8790110b3c3b281aa1eae037d4f1234aff587d903d93ba3af225c27ddc9ccac" );
                m      = "4a8c071ac4fd0d52faa407b0fe5dab759f7394a5832127f2a3498f34aac287339e043b4ffa79528faf199dc917f7b066ad65505dab0e11e6948515052ce20cfdb892ffb8aa9bf3f1aa5be30a5bbe85823bddf70b39fd7ebd4a93a2f75472c1d4f606247a9821f1a8c45a6cb80545de2e0c6c0174e2392088c754e9c8443eb5af"_hex;
                sig_r  = "8acd62e8c262fa50dd9840480969f4ef70f218ebf8ef9584f199031132c6b1ce";
                sig_s  = "cfca7ed3d4347fb2a29e526b43c348ae1ce6c60d44f3191b6d8ea3a2d9c92154";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "9157dbfcf8cf385f5bb1568ad5c6e2a8652ba6dfc63bc1753edf5268cb7eb596", "972570f4313d47fc96f7c02d5594d77d46f91e949808825b3d31f029e8296405" );
                m      = "0a3a12c3084c865daf1d302c78215d39bfe0b8bf28272b3c0b74beb4b7409db0718239de700785581514321c6440a4bbaea4c76fa47401e151e68cb6c29017f0bce4631290af5ea5e2bf3ed742ae110b04ade83a5dbd7358f29a85938e23d87ac8233072b79c94670ff0959f9c7f4517862ff829452096c78f5f2e9a7e4e9216"_hex;
                sig_r  = "dfaea6f297fa320b707866125c2a7d5d515b51a503bee817de9faa343cc48eeb";
                sig_s  = "8f780ad713f9c3e5a4f7fa4c519833dfefc6a7432389b1e4af463961f09764f2";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "072b10c081a4c1713a294f248aef850e297991aca47fa96a7470abe3b8acfdda", "9581145cca04a0fb94cedce752c8f0370861916d2a94e7c647c5373ce6a4c8f5" );
                m      = "785d07a3c54f63dca11f5d1a5f496ee2c2f9288e55007e666c78b007d95cc28581dce51f490b30fa73dc9e2d45d075d7e3a95fb8a9e1465ad191904124160b7c60fa720ef4ef1c5d2998f40570ae2a870ef3e894c2bc617d8a1dc85c3c55774928c38789b4e661349d3f84d2441a3b856a76949b9f1f80bc161648a1cad5588e"_hex;
                sig_r  = "09f5483eccec80f9d104815a1be9cc1a8e5b12b6eb482a65c6907b7480cf4f19";
                sig_s  = "a4f90e560c5e4eb8696cb276e5165b6a9d486345dedfb094a76e8442d026378d";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "09308ea5bfad6e5adf408634b3d5ce9240d35442f7fe116452aaec0d25be8c24", "f40c93e023ef494b1c3079b2d10ef67f3170740495ce2cc57f8ee4b0618b8ee5" );
                m      = "76f987ec5448dd72219bd30bf6b66b0775c80b394851a43ff1f537f140a6e7229ef8cd72ad58b1d2d20298539d6347dd5598812bc65323aceaf05228f738b5ad3e8d9fe4100fd767c2f098c77cb99c2992843ba3eed91d32444f3b6db6cd212dd4e5609548f4bb62812a920f6e2bf1581be1ebeebdd06ec4e971862cc42055ca"_hex;
                sig_r  = "5cc8aa7c35743ec0c23dde88dabd5e4fcd0192d2116f6926fef788cddb754e73";
                sig_s  = "9c9c045ebaa1b828c32f82ace0d18daebf5e156eb7cbfdc1eff4399a8a900ae7";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "2d98ea01f754d34bbc3003df5050200abf445ec728556d7ed7d5c54c55552b6d", "9b52672742d637a32add056dfd6d8792f2a33c2e69dafabea09b960bc61e230a" );
                m      = "60cd64b2cd2be6c33859b94875120361a24085f3765cb8b2bf11e026fa9d8855dbe435acf7882e84f3c7857f96e2baab4d9afe4588e4a82e17a78827bfdb5ddbd1c211fbc2e6d884cddd7cb9d90d5bf4a7311b83f352508033812c776a0e00c003c7e0d628e50736c7512df0acfa9f2320bd102229f46495ae6d0857cc452a84"_hex;
                sig_r  = "06108e525f845d0155bf60193222b3219c98e3d49424c2fb2a0987f825c17959";
                sig_s  = "62b5cdd591e5b507e560167ba8f6f7cda74673eb315680cb89ccbc4eec477dce";
                r = true; // Result = P (0 )
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

            }

            // [P-256,SHA-512]
            {
                auto pubkey = curve.make_point( "484e31e69ef70bb8527853c22c6b6b4cd2a51311dde66c7b63f097dbb6ab27bf", "e1ff8177f4061d4fbbacbbc70519f0fc8c8b6053d72af0fe4f048d615004f74e" );
                auto m      = "273b063224ab48a1bf6c7efc93429d1f89de48fc4a4fa3ffe7a49ebba1a58ff5d208a9e4bff27b418252526243ba042d1605b6df3c2ec916ceef027853a41137f7bfb6fc63844de95f58e82b9ad2565f1367d2c69bd29100f6db21a8ab7ab58affd1661add0322bd915721378df9fa233ef0b7e0a0a85be31689e21891ec8977"_hex;
                bn_t sig_r  = "91a303d8fe3ab4176070f6406267f6b79bfe5eb5f62ae6aeb374d90667858518";
                bn_t sig_s  = "e152119cefa26826ea07ec40a428869132d70812c5578c5a260e48d6800e046a";
                auto r = false; // Result = F (1 - Message changed)
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "8b75fc0129c9a78f8395c63ae9694b05cd6950665cf5da7d66118de451422624", "b394171981d4896d6e1b4ef2336d9befe7d27e1eb87f1c14b8ddda622af379dc" );
                m      = "d64ea1a768b0de29ab018ae93baa645d078c70a2f7aa4acd4ae7526538ebd5f697a11927cfd0ddc9187c095f14ad30544cb63ede9353af8b23c18ce22843881fe2d7bde748fc69085921677858d87d2dc3e244f6c7e2c2b2bd791f450dfdd4ff0ddd35ab2ada4f1b90ab16ef2bf63b3fbe88ce8a5d5bb85430740d3744849c13"_hex;
                sig_r  = "17e298e67ad2af76f6892fdcead00a88256573868f79dc74431b55103058f0b0";
                sig_s  = "881328cd91e43d30133f6e471e0b9b04353b17893fb7614fd7333d812a3df6b4";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "76e51086e078b2b116fd1e9c6fa3d53f675ae40252fb9f0cc62817bd9ce8831d", "ca7e609a0b1d14b7c9249b53da0b2050450e2a25cb6c8f81c5311974a7efb576" );
                m      = "1db85445c9d8d1478a97dd9d6ffbf11ebcd2114d2ed4e8b6811171d947e7d4daedea35af6177debe2ef6d93f94ff9d770b45d458e91deb4eef59856425d7b00291aff9b6c9fa02375ec1a06f71f7548721790023301cf6ac7fee1d451228106ef4472681e652c8cd59b15d6d16f1e13440d888e265817cb4a654f7246e0980df"_hex;
                sig_r  = "23b653faaa7d4552388771931803ce939dd5ee62d3fa72b019be1b2272c85592";
                sig_s  = "a03c6f5c54a10861d6b8922821708e9306fd6d5d10d566845a106539cbf4fadd";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "bc7c8e09bd093468f706740a4130c544374fdc924a535ef02e9d3be6c6d3bbfa", "af3f813ae6646f5b6dbfb0f261fd42537705c800bb1647386343428a9f2e10fc" );
                m      = "918d9f420e927b3e0a55d276b8b40d8a2c5df748727ff72a438c7e6593f542274050dce727980d3ef90c8aa5c13d53f1e8d631ebb650dee11b94902bbd7c92b8186af9039c56c43f3110697792c8cd1614166f06d09cdb58dab168cc3680a8473b1a623bf85dba855eace579d9410d2c4ca5ede6dc1e3db81e233c34ae922f49"_hex;
                sig_r  = "6bd7ce95af25abfbf14aef4b17392f1da877ab562eca38d785fe39682e9c9324";
                sig_s  = "6688bea20c87bab34d420642da9bdd4c69456bdec50835887367bb4fb7cd8650";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "9cb0cf69303dafc761d4e4687b4ecf039e6d34ab964af80810d8d558a4a8d6f7", "2d51233a1788920a86ee08a1962c79efa317fb7879e297dad2146db995fa1c78" );
                m      = "6e2932153301a4eef680e6428929adae988c108d668a31ff55d0489947d75ff81a46bf89e84d6401f023be6e87688fbcd784d785ca846735524acb52d00452c84040a479e7cc330936441d93bbe722a9432a6e1db112b5c9403b10272cb1347fd619d463f7a9d223ad76fde06d8a6883500fb843235abff98e241bdfb5538c3e"_hex;
                sig_r  = "4b9f91e4285287261a1d1c923cf619cd52c175cfe7f1be60a5258c610348ba3d";
                sig_s  = "28c45f901d71c41b298638ec0d6a85d7fcb0c33bbfec5a9c810846b639289a84";
                r = true; // Result = P (0 )
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "e31096c2d512fbf84f81e9bdb16f33121702897605b43a3db546f8fb695b5f6f", "6fbec6a04a8c59d61c900a851d8bf8522187d3ec2637b10fa8f377689e086bba" );
                m      = "2f48ec387f181035b350772e27f478ae6ec7487923692fae217e0f8636acd062a6ac39f7435f27a0ebcfd8187a91ef00fb68d106b8da4a1dedc5a40a4fae709e92b00fcc218de76417d75185e59dff76ec1543fb429d87c2ca8134ff5ae9b45456cad93fc67223c68293231395287dc0b756355660721a1f5df83bf5bcb8456e"_hex;
                sig_r  = "1b244c21c08c0c0a10477fb7a21382d405b95c755088292859ca0e71bab68361";
                sig_s  = "852f4cbfd346e90f404e1dd5c4b2c1debca3ea1abefe8400685d703aea6c5c7f";
                r = false; // Result = F (4 - Q changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "633c2ee5630b62c9ce839efd4d485a6d35e8b9430d264ffe501d28dbace79123", "4b668a1a6d1a25b089f75c2bd8d8c6a9a14fe7b729f45a82565da2e866e2c490" );
                m      = "fd2e5de421ee46c9fe6290a33f95b394bd5b7762f23178f7f6834f1f056fa9a8831446403c098ff4dd764173f974be4c89d376119613a4a1890f6fc2ddff862bda292dd49f5410d9b1cfe1d97ef4582b6152494372fc083885f540c01f86d780e6f3e75a954af2190fdae9604e3f8ab32ab0292dc0d790bd2627e37b4b4885df"_hex;
                sig_r  = "bf2111c93ec055a7eda90c106fce494fd866045634fd2aa28d6e018f9106994e";
                sig_s  = "86b0341208a0aa55edecfd272f49cb34408ce54b7febc1d0a1c2ce77ab6988f8";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "f78dce40d1cb8c4af2749bf22c6f8a9a470b1e41112796215dd017e57df1b38a", "61b29b0bc03dff7fa00613b4de1e2317cfbf2badd50dee3376c032a887c5b865" );
                m      = "4bc2d9a898395b12701635f1048fbfd263ec115e4150532b034d59e625238f4ed32619744c612e35ac5a23bee8d5f5651641a492217d305e5051321c273647f14bc7c4afab518554e01c82d6fc1694c8bdbeb326bb607bcaf5436303bc09f64c02c6ec50de409a484f5237f7d34e2651ada7ec429ca3b99dd87c6015d2f4b342"_hex;
                sig_r  = "4a96169a5dea36a2594011537ee0dc19e8f9f74e82c07434079447155a830152";
                sig_s  = "a204eaa4e97d7553a1521d9f6baadc0b6d6183ba0f385d8593d6ca83607c4d82";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "3fcc3b3e1b103fe435ac214c756bdaad309389e1c803e6d84bbbc27039fcf900", "7f09edd1ec87a6d36dc81c1528d52a62776e666c274415a9f441d6a8df6b9237" );
                m      = "d3356a683417508a9b913643e6ceac1281ef583f428968f9d2b6540a189d7041c477da8d207d0529720f70dab6b0da8c2168837476c1c6b63b517ed3cad48ae331cf716ecf47a0f7d00b57073ac6a4749716d49d80c4d46261d38e2e34b4f43e0f20b280842f6e3ea34fefdddfb9fa2a040ffe915e8784cfdb29b3364a34ca62"_hex;
                sig_r  = "1cac13f277354456ae67ab09b09e07eb1af2a2bf45108da70f5c8c6a4cbcd538";
                sig_s  = "5d83752e540525602ba7e6fee4d4263f3eda59e67df20aac79ca67e8899fed0d";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "5ec702d43a67ada86efbfc136cf16d96078906954a3f1f9e440674cd907e4676", "05a62044fed8470dd4fca38d89d583ce36d50d28b66ab0b51922b21da92c56d9" );
                m      = "d7f5da9f4cf9299b7f86c52b88364ce28fe9ada55dd551a1018790f9e1205e2405ac62429d65093f74ec35a16d9f195c993cd4eb8dc0aa0dabb70a503321d8a9649160d6b3d0a0854bb68c4c39693f592ef5dd478aa2432d0865d87d48b3aea9c7d7d114165c9200e4e8d7bd02a7895ec4418e6f2fed6b244bf66209039e98a9"_hex;
                sig_r  = "75f3037298f1457dba55743999976a1c2636b2b8ab2ed3df4736a6d2934acc83";
                sig_s  = "19d43ad168dda1bb8ac423f8f08876515234b3d841e57faef1b5ab27359b27ef";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "f63afe99e1b5fc652782f86b59926af22e6072be93390fe41f541204f9c935d1", "f6e19ce5935e336183c21becf66596b8f559d2d02ee282aa87a7d6f936f7260c" );
                m      = "68f4b444e1cc2025e8ff55e8046ead735e6e317082edf7ce65e83573501cb92c408c1c1c6c4fcca6b96ad34224f17b20be471cc9f4f97f0a5b7bfae9558bdb2ecb6e452bb743603724273d9e8d2ca22afdda35c8a371b28153d772303e4a25dc4f28e9a6dc9635331450f5af290dfa3431c3c08b91d5c97284361c03ec78f1bc"_hex;
                sig_r  = "cef4831e4515c77ca062282614b54a11b7dc4057e6997685c2fbfa95b392bf72";
                sig_s  = "f20dc01bf38e1344ba675a22239d9893b3a3e33d9a403329a3d21650e9125b75";
                r = true; // Result = P (0 )
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "6d11b09d2767cf8d275faee746c203486259f66dd2bfa3a65c39371a66b23385", "4eb05c73e05261e979182833f20311e5366f72f4b949665ff294f959375534c6" );
                m      = "e75be05be0aaf70719b488b89aaae9008707ca528994461db7130c4368575a024bf0981c305d61265e8b97599ec35c03badd1256b80d6bf70547ad6089b983e3bcc3481828f3259e43e655e177fc423fd7e066bd3ed68d81df84f773c0f9e5f8bf4469960b8b4d7b2a372fd0edd3521f6be670908f2d90a343f416358ea70e7e"_hex;
                sig_r  = "15a697cdb614e11c0810e1e764cd501fcabc70874c957587bc4883d9438e177f";
                sig_s  = "7bf6244f92bc768063cecb5336c8eaacd23db930b28703560f241c7d93950dfd";
                r = false; // Result = F (2 - R changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "f3899caba038efb534c4cea0bd276814ffd80194473c903b81af11c8c05cb6e6", "6ea6b17402fcf2e8e737d11ffc7c2ed3b2d0bc3b8f271a381f4294cff62682c3" );
                m      = "0dc4a3eab66bd2e703a8fff566c34d466f9823ae42bd2104f61a6b051c0b017833fcef4d609d137ad97c209c80eebe252857aa7fafc35f16000a2bd4b4be0fa83b6e229eddfd180101f1f40d0453148053d8306833df64d59599b90194b55541d7f22dd589da9f7be519cbbb9db416c71bfe40ec090b5b7a600eec29bfd47306"_hex;
                sig_r  = "57b99380452e1d37b133c49b9ba493dee8630940477ca3351a43d90b99871e6a";
                sig_s  = "df599c3a37105af3ecc159b3b685ccb3e151b7d5cf2d97147974ae71f466b615";
                r = false; // Result = F (3 - S changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "1fd6f4b98d0755291e7a230e9f81ecf909e6350aadb08e42a3262ff19200fbd2", "5578fef79bc477acfb8ed0dc10c4f5809c14dc5492405b3792a7940650b305d7" );
                m      = "d55e5e124a7217879ca986f285e22ac51940b35959bbf5543104b5547356fd1a0ec37c0a23209004a2ec5bcaf3335bc45e4dc990eacd29b2d9b5cf349c7ba67711356299bceab6f048df761c65f2988803133d6723a2820fefb2654cc7c5f032f833ba78a34d2878c6b0ba654ebe26b110c935abb56024bd5d0f09b367724c07"_hex;
                sig_r  = "97a99e96e407b3ada2c2dcf9ceeeb984d9a4d0aa66ddf0a74ca23cabfb1566cc";
                sig_s  = "0ecac315dc199cfea3c15348c130924a1f787019fe4cd3ae47ca8b111268754a";
                r = false; // Result = F (1 - Message changed)
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                pubkey = curve.make_point( "2dcbd8790cee552e9f18f2b3149a2252dcd58b99ca7dc9680b92c8c43aa33874", "5dbc8bb8813c8e019d80e19acdb0792f537980fecde93db621aaf1f6d0e6ee34" );
                m      = "7753c03b4202cb38bc0190a9f931eb31858d705d92d650320ff449fc99167fb3770b764c8988f6b34ac5a3d507a10e0aff7f88293f6a22c7ed8a24248a52dc125e416e158833fc38af29199f8ca4931068d4ccaa87e299e95642068f68c208cb782df13908f950564743ed1692502bafafaff169dc8fe674fb5e4f3ffd578c35"_hex;
                sig_r  = "2bdbd8b0d759595662cc10b10236136ef6ce429641f68cf6480f472fcc77bc9f";
                sig_s  = "7e7df0c8b86f7db06caf1610166f7b9c4c75447f991d5aaf4dea720c25985c8c";
                r = true; // Result = P (0 )
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha256_p1363_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha256_p1363_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                bn_t sig_s = "4cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd76";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8bd6b94d5ed80a6d9d1190a436ebccc0833490686deac8635bcb9bf5369";
                sig_s = "00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f478a2bbd0a6c384ee1493b1f518276e0e4a5375928d6fcd160c11cb6d2c";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3639383139"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "16aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266";
                sig_s = "252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "9cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882";
                sig_s = "093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c32";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "73b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa43";
                sig_s = "2f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c88634";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3dd";
                sig_s = "bdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd";
                sig_s = "51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa03";
                sig_s = "99ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b";
                sig_s = "8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d3610";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "9f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831d";
                sig_s = "b26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e9902";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b7";
                sig_s = "20aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db9";
                sig_s = "3df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d21350";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675";
                sig_s = "d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "3b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a8";
                sig_s = "4c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d99258";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf";
                sig_s = "47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "38686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52";
                sig_s = "067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "44a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf";
                sig_s = "2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e9";
                sig_s = "7d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8f";
                sig_s = "f6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6";
                sig_s = "d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab244726";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d";
                sig_s = "3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "9505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7a";
                sig_s = "c60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c5021";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "bbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d";
                sig_s = "9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f00";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "2ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e";
                sig_s = "7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a19878";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c59";
                sig_s = "2ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "5291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c9466";
                sig_s = "65d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107";
                sig_s = "cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf7592767";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "6554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728";
                sig_s = "aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f929";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfc";
                sig_s = "e99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf";
                sig_s = "7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf919622";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "5694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e";
                sig_s = "0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "a0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba6";
                sig_s = "5e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c65424339";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88";
                sig_s = "737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa";
                sig_s = "6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad2";
                sig_s = "42c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d693";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b2";
                sig_s = "9d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8";
                sig_s = "e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c89";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443";
                sig_s = "e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a1939123";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad";
                sig_s = "1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "4a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb";
                sig_s = "3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc5981725782";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "eacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e96";
                sig_s = "7451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d1";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052";
                sig_s = "ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b3300219";
                sig_s = "79938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "81f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8";
                sig_s = "cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f74300";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808";
                sig_s = "048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a5762";
                sig_s = "93320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c199345";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "ac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883";
                sig_s = "f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a8";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f7";
                sig_s = "6b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0";
                sig_s = "918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b2443";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a3";
                sig_s = "1dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f49584389772";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff11";
                sig_s = "45b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d75";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "5e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06f";
                sig_s = "b1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c20";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32e";
                sig_s = "db1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a";
                sig_s = "3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5";
                sig_s = "249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348";
                sig_s = "fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0ad99500288d466940031d72a9f5445a4d43784640855bf0a69874d2de5fe103", "00c5011e6ef2c42dcd50d5d3d29f99ae6eba2c80c9244f4c5422f0979ff0c3ba5e" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000004319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab05fd9d0de26b9ce6f4819652d9fc69193d0aa398f0fba8013e09c582204554", "19235271228c786759095d12b75af0692dd4103f19f6a8c32f49435a1e9b8d45" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0080984f39a1ff38a86a68aa4201b6be5dfbfecf876219710b07badf6fdd4c6c56", "11feb97390d9826e7a06dfb41871c940d74415ed3cac2089f1445019bb55ed95" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4201b4272944201c3294f5baa9a3232b6dd687495fcc19a70a95bc602b4f7c05", "0095c37eba9ee8171c1bb5ac6feaf753bc36f463e3aef16629572c0c0a8fb0800e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a71af64de5126a4a4e02b7922d66ce9415ce88a4c9d25514d91082c8725ac957", "5d47723c8fbe580bb369fec9c2665d8e30a435b9932645482e7c9f11e872296b" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "01";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6627cec4f0731ea23fc2931f90ebe5b7572f597d20df08fc2b31ee8ef16b1572", "6170ed77d8d0a14fc5c9c3c4c9be7f0d3ee18f709bb275eaf2073e258fe694a5" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "03";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5a7c8825e85691cce1f5e7544c54e73f14afc010cb731343262ca7ec5a77f5bf", "00ef6edf62a4497c1bd7b147fb6c3d22af3c39bfce95f30e13a16d3d7b2812f813" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000005";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "05";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cbe0c29132cd738364fedd603152990c048e5e2fff996d883fa6caca7978c737", "70af6a8ce44cb41224b2603606f4c04d188e80bff7cc31ad5189d4ab0d70e8c1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "06";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4be4178097002f0deab68f0d9a130e0ed33a6795d02a20796db83444b037e139", "20f13051e0eecdcfce4dacea0f50d1f247caa669f193c1b4075b51ae296d2d56" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0f73792203716afd4be4329faa48d269f15313ebbba379d7783c97bf3e890d9", "00971f4a3206605bec21782bf5e275c714417e8f566549e6bc68690d2363c89cc1" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4838b2be35a6276a80ef9e228140f9d9b96ce83b7a254f71ccdebbb8054ce05f", "00fa9cbc123c919b19e00238198d04069043bd660a828814051fcb8aac738a6c6b" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000000000000000002d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7393983ca30a520bbc4783dc9960746aab444ef520c0a8e771119aa4e74b0f64", "00e9d7be1ab01a0bf626e709863e6a486dbaf32793afccf774e2c6cd27b1857526" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000001033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5ac331a1103fe966697379f356a937f350588a05477e308851b8a502d5dfcdc5", "00fe9993df4b57939b2b8da095bf6d794265204cfe03be995a02e65d408c871c0b" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d209be8de2de877095a399d3904c74cc458d926e27bb8e58e5eae5767c41509", "00dd59e04c214f7b18dce351fc2a549893a6860e80163f38cc60a4f2c9d040d8c9" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "00000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "083539fbee44625e3acaafa2fcb41349392cef0633a1b8fabecee0c133b10e99", "00915c1ebe7bf00df8535196770a58047ae2a402f26326bb7d41d4d7616337911e" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aeb368a7027a4d64abdea37390c0c1d6a26f399e2d9734de1eb3d0e19373874", "05bd13834715e1dbae9b875cf07bd55e1b6691c7f7536aef3b19bf7a4adf576d" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b533d4695dd5b8c5e07757e55e6e516f7e2c88fa0239e23f60e8ec07dd70f287", "1b134ee58cc583278456863f33c3a85d881f7d4a39850143e29d4eaf009afe47" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f50d371b91bfb1d7d14e1323523bc3aa8cbf2c57f9e284de628c8b4536787b86", "00f94ad887ac94d527247cd2e7d0c8b1291c553c9730405380b14cbb209f5fa2dd" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "68ec6e298eafe16539156ce57a14b04a7047c221bafc3a582eaeb0d857c4d946", "0097bed1af17850117fdb39b2324f220a5698ed16c426a27335bb385ac8ca6fb30" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69da0364734d2e530fece94019265fefb781a0f1b08f6c8897bdf6557927c8b8", "66d2d3c7dcd518b23d726960f069ad71a933d86ef8abbcce8b20f71e2a847002" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d8adc00023a8edc02576e2b63e3e30621a471e2b2320620187bf067a1ac1ff32", "33e2b50ec09807accb36131fff95ed12a09a86b4ea9690aa32861576ba2362e1" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3623ac973ced0a56fa6d882f03a7d5c7edca02cfc7b2401fab3690dbe75ab785", "008db06908e64b28613da7257e737f39793da8e713ba0643b92e9bb3252be7f8fe" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cf04ea77e9622523d894b93ff52dc3027b31959503b6fa3890e5e04263f922f1", "00e8528fb7c006b3983c8b8400e57b4ed71740c2f3975438821199bedeaecab2e9" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db7a2c8a1ab573e5929dc24077b508d7e683d49227996bda3e9f78dbeff77350", "4f417f3bc9a88075c2e0aadd5a13311730cf7cc76a82f11a36eaf08a6c99a206" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e91e1ba60fdedb76a46bcb51dc0b8b4b7e019f0a28721885fa5d3a8196623397";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dead11c7a5b396862f21974dc4752fadeff994efe9bbd05ab413765ea80b6e1f", "1de3f0640e8ac6edcf89cff53c40e265bb94078a343736df07aa0318fc7fe1ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "fdea5843ffeb73af94313ba4831b53fe24f799e525b1e8e8c87b59b95b430ad9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0bc472e0d7c81ebaed3a6ef96c18613bb1fea6f994326fbe80e00dfde67c7e9", "00986c723ea4843d48389b946f64ad56c83ad70ff17ba85335667d1bb9fa619efd" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "03ffcabf2f1b4d2a65190db1680d62bb994e41c5251cd73b3c3dfc5e5bafc035";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a0a44ca947d66a2acb736008b9c08d1ab2ad03776e02640f78495d458dd51c32", "6337fe5cf8c4604b1f1c409dc2d872d4294a4762420df43a30a2392e40426add" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "4dfbc401f971cd304b33dfdb17d0fed0fe4c1a88ae648e0d2847f74977534989";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c9c2115290d008b45fb65fad0f602389298c25420b775019d42b62c3ce8a96b7", "3877d25a8080dc02d987ca730f0405c2c9dbefac46f9e601cc3f06e9713973fd" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bc4024761cd2ffd43dfdb17d0fed112b988977055cd3a8e54971eba9cda5ca71";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5eca1ef4c287dddc66b8bccf1b88e8a24c0018962f3c5e7efa83bc1a5ff6033e", "5e79c4cb2c245b8c45abdce8a8e4da758d92a607c32cd407ecaef22f1c934a71" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "788048ed39a5ffa77bfb62fa1fda2257742bf35d128fb3459f2a0c909ee86f91";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5caaa030e7fdf0e4936bc7ab5a96353e0a01e4130c3f8bf22d473e317029a47a", "00deb6adc462f7058f2a20d371e9702254e9b201642005b3ceda926b42b178bef9" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "476d9131fd381bd917d0fed112bc9e0a5924b5ed5b11167edd8b23582b3cb15e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2fd20bac06e555bb8ac0ce69eb1ea20f83a1fc3501c8a66469b1a31f619b098", "6237050779f52b615bd7b8d76a25fc95ca2ed32525c75f27ffc87ac397e6cbaf" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8374253e3e21bd154448d0a8f640fe46fafa8b19ce78d538f6cc0a19662d3601";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3fd6a1ca7f77fb3b0bbe726c372010068426e11ea6ae78ce17bedae4bba86ced", "03ce5516406bf8cfaab8745eac1cd69018ad6f50b5461872ddfc56e0db3c8ff4" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "357cfd3be4d01d413c5b9ede36cba5452c11ee7fe14879e749ae6a2d897a52d6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009cb8e51e27a5ae3b624a60d6dc32734e4989db20e9bca3ede1edf7b086911114", "00b4c104ab3c677e4b36d6556e8ad5f523410a19f2e277aa895fc57322b4427544" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "29798c5c0ee287d4a5e8e6b799fd86b8df5225298e6ffc807cd2f2bc27a0a6d8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a3e52c156dcaf10502620b7955bc2b40bc78ef3d569e1223c262512d8f49602a", "4a2039f31c1097024ad3cc86e57321de032355463486164cf192944977df147f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "0b70f22c781092452dca1a5711fa3a5a1f72add1bf52c2ff7cae4820b30078dd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f19b78928720d5bee8e670fb90010fb15c37bf91b58a5157c3f3c059b2655e88", "00cf701ec962fb4a11dcf273f5dc357e58468560c7cfeb942d074abd4329260509" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "16e1e458f021248a5b9434ae23f474b43ee55ba37ea585fef95c90416600f1ba";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0083a744459ecdfb01a5cf52b27a05bb7337482d242f235d7b4cb89345545c90a8", "00c05d49337b9649813287de9ffe90355fd905df5f3c32945828121f37cc50de6e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "2252d6856831b6cf895e4f0535eeaf0e5e5809753df848fe760ad86219016a97";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd13c6b34c56982ddae124f039dfd23f4b19bbe88cee8e528ae51e5d6f3a21d7", "00bfad4c2e6f263fe5eb59ca974d039fc0e4c3345692fb5320bdae4bd3b42a45ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "81ffe55f178da695b28c86d8b406b15dab1a9e39661a3ae017fbe390ac0972c3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "67e6f659cdde869a2f65f094e94e5b4dfad636bbf95192feeed01b0f3deb7460", "00a37e0a51f258b7aeb51dfe592f5cfd5685bbe58712c8d9233c62886437c38ba0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2eb6412505aec05c6545f029932087e490d05511e8ec1f599617bb367f9ecaaf", "00805f51efcc4803403f9b1ae0124890f06a43fedcddb31830f6669af292895cb0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0084db645868eab35e3a9fd80e056e2e855435e3a6b68d75a50a854625fe0d7f35", "6d2589ac655edc9a11ef3e075eddda9abf92e72171570ef7bf43a2ee39338cfe" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0091b9e47c56278662d75c0983b22ca8ea6aa5059b7a2ff7637eb2975e386ad663", "49aa8ff283d0f77c18d6d11dc062165fd13c3c0310679c1408302a16854ecfbd" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f3ec2f13caf04d0192b47fb4c5311fb6d4dc6b0a9e802e5327f7ec5ee8e4834d", "00f97e3e468b7d0db867d6ecfe81e2b0f9531df87efdb47c1338ac321fefe5a432" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d92b200aefcab6ac7dafd9acaf2fa10b3180235b8f46b4503e4693c670fccc88", "5ef2f3aebf5b317475336256768f7c19efb7352d27e4cccadc85b6b8ab922c72" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a88361eb92ecca2625b38e5f98bbabb96bf179b3d76fc48140a3bcd881523cd", "00e6bdf56033f84a5054035597375d90866aa2c96b86a41ccf6edebf47298ad489" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0fb17ccd8fafe827e0c1afc5d8d80366e2b20e7f14a563a2ba50469d84375e8", "68612569d39e2bb9f554355564646de99ac602cc6349cf8c1e236a7de7637d93" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00836f33bbc1dc0d3d3abbcef0d91f11e2ac4181076c9af0a22b1e4309d3edb276", "009ab443ff6f901e30c773867582997c2bec2b0cb8120d760236f3a95bbe881f75" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0092f99fbe973ed4a299719baee4b432741237034dec8d72ba5103cb33e55feeb8", "033dd0e91134c734174889f3ebcf1b7a1ac05767289280ee7a794cebd6e69697" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d35ba58da30197d378e618ec0fa7e2e2d12cffd73ebbb2049d130bba434af09e", "00ff83986e6875e41ea432b7585a49b3a6c77cbb3c47919f8e82874c794635c1d2" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008651ce490f1b46d73f3ff475149be29136697334a519d7ddab0725c8d0793224", "00e11c65bd8ca92dc8bc9ae82911f0b52751ce21dd9003ae60900bd825f590cc28" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d8e1b12c831a0da8795650ff95f101ed921d9e2f72b15b1cdaca9826b9cfc6d", "00ef6d63e2bc5c089570394a4bc9f892d5e6c7a6a637b20469a58c106ad486bf37" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0ae580bae933b4ef2997cbdbb0922328ca9a410f627a0f7dff24cb4d920e1542", "008911e7f8cc365a8a88eb81421a361ccc2b99e309d8dcd9a98ba83c3949d893e3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963", "00838a40f2a36092e9004e92d8d940cf5638550ce672ce8b8d4e15eba5499249e9" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963", "7c75bf0c5c9f6d17ffb16d2726bf30a9c7aaf31a8d317472b1ea145ab66db616" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6adda82b90261b0f319faa0d878665a6b6da497f09c903176222c34acfef72a6", "47e6f50dcc40ad5d9b59f7602bb222fad71a41bf5e1f9df4959a364c62e488d9" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2fca0d0a47914de77ed56e7eccc3276a601120c6df0069c825c8f6a01c9f3820", "65f3450a1d17c6b24989a39beb1c7decfca8384fbdc294418e5d807b3c6ed7de" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "003333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd86d3b5f4a13e8511083b78002081c53ff467f11ebd98a51a633db76665d250", "45d5c8200c89f2fa10d849349226d21d8dfaed6ff8d5cb3e1b7e17474ebc18f7" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4fea55b32cb32aca0c12c4cd0abfb4e64b0f5a516e578c016591a93f5a0fbcc5", "00d7d3fd10b2be668c547b212f6bb14c88f0fecd38a8a4b2c785ed3be62ce4b280" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c6a771527024227792170a6f8eee735bf32b7f98af669ead299802e32d7c3107", "00bc3b4b5e65ab887bbd343572b3e5619261fe3a073e2ffd78412f726867db589e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00851c2bbad08e54ec7a9af99f49f03644d6ec6d59b207fec98de85a7d15b956ef", "00cee9960283045075684b410be8d0f7494b91aa2379f60727319f10ddeb0fe9d6" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f6417c8a670584e388676949e53da7fc55911ff68318d1bf3061205acb19c48f", "008f2b743df34ad0f72674acb7505929784779cd9ac916c3669ead43026ab6d43f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "501421277be45a5eefec6c639930d636032565af420cf3373f557faa7f8a0643", "008673d6cb6076e1cfcdc7dfe7384c8e5cac08d74501f2ae6e89cad195d0aa1371" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0d935bf9ffc115a527735f729ca8a4ca23ee01a4894adf0e3415ac84e808bb34", "3195a3762fea29ed38912bd9ea6c4fde70c3050893a4375850ce61d82eba33c5" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e59f50708646be8a589355014308e60b668fb670196206c41e748e64e4dca21", "5de37fee5c97bcaf7144d5b459982f52eeeafbdf03aacbafef38e213624a01de" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "169fb797325843faff2f7a5b5445da9e2fd6226f7ef90ef0bfe924104b02db8e", "7bbb8de662c7b9b1cf9b22f7a2e582bd46d581d68878efb2b861b131d8a1d667" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "271cd89c000143096b62d4e9e4ca885aef2f7023d18affdaf8b7b54898148754", "0a1c6e954e32108435b55fa385b0f76481a609b9149ccb4b02b2ca47fe8e4da5" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3d0bc7ed8f09d2cb7ddb46ebc1ed799ab1563a9ab84bf524587a220afe499c12", "00e22dc3b3c103824a4f378d96adb0a408abf19ce7d68aa6244f78cb216fa3f8df" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a6c885ade1a4c566f9bb010d066974abb281797fa701288c721bcbd23663a9b7", "2e424b690957168d193a6096fc77a2b004a9c7d467e007e1f2058458f98af316" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008d3c2c2c3b765ba8289e6ac3812572a25bf75df62d87ab7330c3bdbad9ebfa5c", "4c6845442d66935b238578d43aec54f7caa1621d1af241d4632e0b780c423f5d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a";
                bn_t sig_s = "0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "530bd6b0c9af2d69ba897f6b5fb59695cfbf33afe66dbadcf5b8d2a2a6538e23";
                sig_s = "d85e489cb7a161fd55ededcedbf4cc0c0987e3e3f0f242cae934c72caa3f43e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388";
                sig_s = "f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb71";
                sig_s = "3dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f1";
                bn_t sig_s = "9b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b";
                sig_s = "500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df55737";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3";
                sig_s = "541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb55677";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a";
                bn_t sig_s = "59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b43";
                sig_s = "9638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04";
                sig_s = "a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830";
                bn_t sig_s = "228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f285519";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d";
                sig_s = "3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a1251336";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86";
                sig_s = "ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b4";
                bn_t sig_s = "3dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd139929";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "5eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af78";
                sig_s = "2c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "96843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28";
                sig_s = "f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6";
                bn_t sig_s = "402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9";
                sig_s = "edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84";
                sig_s = "feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7";
                bn_t sig_s = "b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "6b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f7";
                sig_s = "5939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361";
                sig_s = "f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "31230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb07";
                bn_t sig_s = "0f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beff";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743";
                sig_s = "cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "7e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed800185945";
                sig_s = "9450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b356";
                bn_t sig_s = "89c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b34";
                sig_s = "72b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "70bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67";
                sig_s = "aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha256_p1363_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha256_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                bn_t sig_s = "4cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd76";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e180000";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db0000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e180500";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db0500";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "29a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "02b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e98";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568475b";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "ff00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8bd6b94d5ed80a6d9d1190a436ebccc0833490686deac8635bcb9bf5369";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff2ba3a8bf6b94d5eb80a6d9d1190a436f42fe12d7fad749d4c512a036c0f908c7";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fed45c5742946b2a127f59262ee6f5bc914333f7ccb6f979215379ca434640ac97";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f478a2bbd0a6c384ee1493b1f518276e0e4a5375928d6fcd160c11cb6d2c";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f47aa2bbd0a4c384ee1493b1f518ada018ef05465583885980861905228a";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "ff4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "fe4cd60b875d442f593c7b11eb6c4e0ae7d891f1b5ac8a6d729032e9f3ee3492d4";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3639383139"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "16aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266";
                sig_s = "252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "9cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882";
                sig_s = "093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c32";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "73b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa43";
                sig_s = "2f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c88634";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3dd";
                sig_s = "bdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd";
                sig_s = "51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa03";
                sig_s = "99ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b";
                sig_s = "8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d3610";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "9f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831d";
                sig_s = "b26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e9902";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b7";
                sig_s = "20aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db9";
                sig_s = "3df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d21350";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675";
                sig_s = "d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "3b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a8";
                sig_s = "4c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d99258";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf";
                sig_s = "47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "38686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52";
                sig_s = "067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "44a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf";
                sig_s = "2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e9";
                sig_s = "7d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8f";
                sig_s = "f6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6";
                sig_s = "d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab244726";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d";
                sig_s = "3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "9505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7a";
                sig_s = "c60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c5021";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "bbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d";
                sig_s = "9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f00";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "2ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e";
                sig_s = "7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a19878";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c59";
                sig_s = "2ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "5291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c9466";
                sig_s = "65d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107";
                sig_s = "cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf7592767";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "6554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728";
                sig_s = "aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f929";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfc";
                sig_s = "e99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf";
                sig_s = "7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf919622";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "5694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e";
                sig_s = "0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "a0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba6";
                sig_s = "5e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c65424339";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88";
                sig_s = "737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa";
                sig_s = "6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad2";
                sig_s = "42c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d693";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b2";
                sig_s = "9d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8";
                sig_s = "e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c89";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443";
                sig_s = "e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a1939123";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad";
                sig_s = "1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "4a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb";
                sig_s = "3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc5981725782";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "eacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e96";
                sig_s = "7451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d1";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052";
                sig_s = "ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b3300219";
                sig_s = "79938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "81f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8";
                sig_s = "cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f74300";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808";
                sig_s = "048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a5762";
                sig_s = "93320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c199345";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "ac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883";
                sig_s = "f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a8";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f7";
                sig_s = "6b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0";
                sig_s = "918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b2443";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a3";
                sig_s = "1dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f49584389772";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff11";
                sig_s = "45b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d75";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "5e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06f";
                sig_s = "b1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c20";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32e";
                sig_s = "db1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a";
                sig_s = "3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5";
                sig_s = "249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348";
                sig_s = "fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0ad99500288d466940031d72a9f5445a4d43784640855bf0a69874d2de5fe103", "00c5011e6ef2c42dcd50d5d3d29f99ae6eba2c80c9244f4c5422f0979ff0c3ba5e" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "4319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab05fd9d0de26b9ce6f4819652d9fc69193d0aa398f0fba8013e09c582204554", "19235271228c786759095d12b75af0692dd4103f19f6a8c32f49435a1e9b8d45" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0080984f39a1ff38a86a68aa4201b6be5dfbfecf876219710b07badf6fdd4c6c56", "11feb97390d9826e7a06dfb41871c940d74415ed3cac2089f1445019bb55ed95" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4201b4272944201c3294f5baa9a3232b6dd687495fcc19a70a95bc602b4f7c05", "0095c37eba9ee8171c1bb5ac6feaf753bc36f463e3aef16629572c0c0a8fb0800e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a71af64de5126a4a4e02b7922d66ce9415ce88a4c9d25514d91082c8725ac957", "5d47723c8fbe580bb369fec9c2665d8e30a435b9932645482e7c9f11e872296b" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6627cec4f0731ea23fc2931f90ebe5b7572f597d20df08fc2b31ee8ef16b1572", "6170ed77d8d0a14fc5c9c3c4c9be7f0d3ee18f709bb275eaf2073e258fe694a5" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5a7c8825e85691cce1f5e7544c54e73f14afc010cb731343262ca7ec5a77f5bf", "00ef6edf62a4497c1bd7b147fb6c3d22af3c39bfce95f30e13a16d3d7b2812f813" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "05";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cbe0c29132cd738364fedd603152990c048e5e2fff996d883fa6caca7978c737", "70af6a8ce44cb41224b2603606f4c04d188e80bff7cc31ad5189d4ab0d70e8c1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "06";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "06";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4be4178097002f0deab68f0d9a130e0ed33a6795d02a20796db83444b037e139", "20f13051e0eecdcfce4dacea0f50d1f247caa669f193c1b4075b51ae296d2d56" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0f73792203716afd4be4329faa48d269f15313ebbba379d7783c97bf3e890d9", "00971f4a3206605bec21782bf5e275c714417e8f566549e6bc68690d2363c89cc1" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4838b2be35a6276a80ef9e228140f9d9b96ce83b7a254f71ccdebbb8054ce05f", "00fa9cbc123c919b19e00238198d04069043bd660a828814051fcb8aac738a6c6b" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7393983ca30a520bbc4783dc9960746aab444ef520c0a8e771119aa4e74b0f64", "00e9d7be1ab01a0bf626e709863e6a486dbaf32793afccf774e2c6cd27b1857526" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5ac331a1103fe966697379f356a937f350588a05477e308851b8a502d5dfcdc5", "00fe9993df4b57939b2b8da095bf6d794265204cfe03be995a02e65d408c871c0b" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d209be8de2de877095a399d3904c74cc458d926e27bb8e58e5eae5767c41509", "00dd59e04c214f7b18dce351fc2a549893a6860e80163f38cc60a4f2c9d040d8c9" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "083539fbee44625e3acaafa2fcb41349392cef0633a1b8fabecee0c133b10e99", "00915c1ebe7bf00df8535196770a58047ae2a402f26326bb7d41d4d7616337911e" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aeb368a7027a4d64abdea37390c0c1d6a26f399e2d9734de1eb3d0e19373874", "05bd13834715e1dbae9b875cf07bd55e1b6691c7f7536aef3b19bf7a4adf576d" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b533d4695dd5b8c5e07757e55e6e516f7e2c88fa0239e23f60e8ec07dd70f287", "1b134ee58cc583278456863f33c3a85d881f7d4a39850143e29d4eaf009afe47" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f50d371b91bfb1d7d14e1323523bc3aa8cbf2c57f9e284de628c8b4536787b86", "00f94ad887ac94d527247cd2e7d0c8b1291c553c9730405380b14cbb209f5fa2dd" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "68ec6e298eafe16539156ce57a14b04a7047c221bafc3a582eaeb0d857c4d946", "0097bed1af17850117fdb39b2324f220a5698ed16c426a27335bb385ac8ca6fb30" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69da0364734d2e530fece94019265fefb781a0f1b08f6c8897bdf6557927c8b8", "66d2d3c7dcd518b23d726960f069ad71a933d86ef8abbcce8b20f71e2a847002" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d8adc00023a8edc02576e2b63e3e30621a471e2b2320620187bf067a1ac1ff32", "33e2b50ec09807accb36131fff95ed12a09a86b4ea9690aa32861576ba2362e1" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3623ac973ced0a56fa6d882f03a7d5c7edca02cfc7b2401fab3690dbe75ab785", "008db06908e64b28613da7257e737f39793da8e713ba0643b92e9bb3252be7f8fe" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cf04ea77e9622523d894b93ff52dc3027b31959503b6fa3890e5e04263f922f1", "00e8528fb7c006b3983c8b8400e57b4ed71740c2f3975438821199bedeaecab2e9" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db7a2c8a1ab573e5929dc24077b508d7e683d49227996bda3e9f78dbeff77350", "4f417f3bc9a88075c2e0aadd5a13311730cf7cc76a82f11a36eaf08a6c99a206" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e91e1ba60fdedb76a46bcb51dc0b8b4b7e019f0a28721885fa5d3a8196623397";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dead11c7a5b396862f21974dc4752fadeff994efe9bbd05ab413765ea80b6e1f", "1de3f0640e8ac6edcf89cff53c40e265bb94078a343736df07aa0318fc7fe1ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "fdea5843ffeb73af94313ba4831b53fe24f799e525b1e8e8c87b59b95b430ad9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0bc472e0d7c81ebaed3a6ef96c18613bb1fea6f994326fbe80e00dfde67c7e9", "00986c723ea4843d48389b946f64ad56c83ad70ff17ba85335667d1bb9fa619efd" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "03ffcabf2f1b4d2a65190db1680d62bb994e41c5251cd73b3c3dfc5e5bafc035";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a0a44ca947d66a2acb736008b9c08d1ab2ad03776e02640f78495d458dd51c32", "6337fe5cf8c4604b1f1c409dc2d872d4294a4762420df43a30a2392e40426add" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "4dfbc401f971cd304b33dfdb17d0fed0fe4c1a88ae648e0d2847f74977534989";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c9c2115290d008b45fb65fad0f602389298c25420b775019d42b62c3ce8a96b7", "3877d25a8080dc02d987ca730f0405c2c9dbefac46f9e601cc3f06e9713973fd" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bc4024761cd2ffd43dfdb17d0fed112b988977055cd3a8e54971eba9cda5ca71";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5eca1ef4c287dddc66b8bccf1b88e8a24c0018962f3c5e7efa83bc1a5ff6033e", "5e79c4cb2c245b8c45abdce8a8e4da758d92a607c32cd407ecaef22f1c934a71" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "788048ed39a5ffa77bfb62fa1fda2257742bf35d128fb3459f2a0c909ee86f91";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5caaa030e7fdf0e4936bc7ab5a96353e0a01e4130c3f8bf22d473e317029a47a", "00deb6adc462f7058f2a20d371e9702254e9b201642005b3ceda926b42b178bef9" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "476d9131fd381bd917d0fed112bc9e0a5924b5ed5b11167edd8b23582b3cb15e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2fd20bac06e555bb8ac0ce69eb1ea20f83a1fc3501c8a66469b1a31f619b098", "6237050779f52b615bd7b8d76a25fc95ca2ed32525c75f27ffc87ac397e6cbaf" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8374253e3e21bd154448d0a8f640fe46fafa8b19ce78d538f6cc0a19662d3601";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3fd6a1ca7f77fb3b0bbe726c372010068426e11ea6ae78ce17bedae4bba86ced", "03ce5516406bf8cfaab8745eac1cd69018ad6f50b5461872ddfc56e0db3c8ff4" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "357cfd3be4d01d413c5b9ede36cba5452c11ee7fe14879e749ae6a2d897a52d6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009cb8e51e27a5ae3b624a60d6dc32734e4989db20e9bca3ede1edf7b086911114", "00b4c104ab3c677e4b36d6556e8ad5f523410a19f2e277aa895fc57322b4427544" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "29798c5c0ee287d4a5e8e6b799fd86b8df5225298e6ffc807cd2f2bc27a0a6d8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a3e52c156dcaf10502620b7955bc2b40bc78ef3d569e1223c262512d8f49602a", "4a2039f31c1097024ad3cc86e57321de032355463486164cf192944977df147f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "0b70f22c781092452dca1a5711fa3a5a1f72add1bf52c2ff7cae4820b30078dd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f19b78928720d5bee8e670fb90010fb15c37bf91b58a5157c3f3c059b2655e88", "00cf701ec962fb4a11dcf273f5dc357e58468560c7cfeb942d074abd4329260509" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "16e1e458f021248a5b9434ae23f474b43ee55ba37ea585fef95c90416600f1ba";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0083a744459ecdfb01a5cf52b27a05bb7337482d242f235d7b4cb89345545c90a8", "00c05d49337b9649813287de9ffe90355fd905df5f3c32945828121f37cc50de6e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "2252d6856831b6cf895e4f0535eeaf0e5e5809753df848fe760ad86219016a97";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd13c6b34c56982ddae124f039dfd23f4b19bbe88cee8e528ae51e5d6f3a21d7", "00bfad4c2e6f263fe5eb59ca974d039fc0e4c3345692fb5320bdae4bd3b42a45ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "81ffe55f178da695b28c86d8b406b15dab1a9e39661a3ae017fbe390ac0972c3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "67e6f659cdde869a2f65f094e94e5b4dfad636bbf95192feeed01b0f3deb7460", "00a37e0a51f258b7aeb51dfe592f5cfd5685bbe58712c8d9233c62886437c38ba0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2eb6412505aec05c6545f029932087e490d05511e8ec1f599617bb367f9ecaaf", "00805f51efcc4803403f9b1ae0124890f06a43fedcddb31830f6669af292895cb0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0084db645868eab35e3a9fd80e056e2e855435e3a6b68d75a50a854625fe0d7f35", "6d2589ac655edc9a11ef3e075eddda9abf92e72171570ef7bf43a2ee39338cfe" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0091b9e47c56278662d75c0983b22ca8ea6aa5059b7a2ff7637eb2975e386ad663", "49aa8ff283d0f77c18d6d11dc062165fd13c3c0310679c1408302a16854ecfbd" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f3ec2f13caf04d0192b47fb4c5311fb6d4dc6b0a9e802e5327f7ec5ee8e4834d", "00f97e3e468b7d0db867d6ecfe81e2b0f9531df87efdb47c1338ac321fefe5a432" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d92b200aefcab6ac7dafd9acaf2fa10b3180235b8f46b4503e4693c670fccc88", "5ef2f3aebf5b317475336256768f7c19efb7352d27e4cccadc85b6b8ab922c72" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a88361eb92ecca2625b38e5f98bbabb96bf179b3d76fc48140a3bcd881523cd", "00e6bdf56033f84a5054035597375d90866aa2c96b86a41ccf6edebf47298ad489" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0fb17ccd8fafe827e0c1afc5d8d80366e2b20e7f14a563a2ba50469d84375e8", "68612569d39e2bb9f554355564646de99ac602cc6349cf8c1e236a7de7637d93" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00836f33bbc1dc0d3d3abbcef0d91f11e2ac4181076c9af0a22b1e4309d3edb276", "009ab443ff6f901e30c773867582997c2bec2b0cb8120d760236f3a95bbe881f75" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0092f99fbe973ed4a299719baee4b432741237034dec8d72ba5103cb33e55feeb8", "033dd0e91134c734174889f3ebcf1b7a1ac05767289280ee7a794cebd6e69697" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d35ba58da30197d378e618ec0fa7e2e2d12cffd73ebbb2049d130bba434af09e", "00ff83986e6875e41ea432b7585a49b3a6c77cbb3c47919f8e82874c794635c1d2" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008651ce490f1b46d73f3ff475149be29136697334a519d7ddab0725c8d0793224", "00e11c65bd8ca92dc8bc9ae82911f0b52751ce21dd9003ae60900bd825f590cc28" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d8e1b12c831a0da8795650ff95f101ed921d9e2f72b15b1cdaca9826b9cfc6d", "00ef6d63e2bc5c089570394a4bc9f892d5e6c7a6a637b20469a58c106ad486bf37" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0ae580bae933b4ef2997cbdbb0922328ca9a410f627a0f7dff24cb4d920e1542", "008911e7f8cc365a8a88eb81421a361ccc2b99e309d8dcd9a98ba83c3949d893e3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963", "00838a40f2a36092e9004e92d8d940cf5638550ce672ce8b8d4e15eba5499249e9" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963", "7c75bf0c5c9f6d17ffb16d2726bf30a9c7aaf31a8d317472b1ea145ab66db616" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6adda82b90261b0f319faa0d878665a6b6da497f09c903176222c34acfef72a6", "47e6f50dcc40ad5d9b59f7602bb222fad71a41bf5e1f9df4959a364c62e488d9" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2fca0d0a47914de77ed56e7eccc3276a601120c6df0069c825c8f6a01c9f3820", "65f3450a1d17c6b24989a39beb1c7decfca8384fbdc294418e5d807b3c6ed7de" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd86d3b5f4a13e8511083b78002081c53ff467f11ebd98a51a633db76665d250", "45d5c8200c89f2fa10d849349226d21d8dfaed6ff8d5cb3e1b7e17474ebc18f7" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4fea55b32cb32aca0c12c4cd0abfb4e64b0f5a516e578c016591a93f5a0fbcc5", "00d7d3fd10b2be668c547b212f6bb14c88f0fecd38a8a4b2c785ed3be62ce4b280" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c6a771527024227792170a6f8eee735bf32b7f98af669ead299802e32d7c3107", "00bc3b4b5e65ab887bbd343572b3e5619261fe3a073e2ffd78412f726867db589e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00851c2bbad08e54ec7a9af99f49f03644d6ec6d59b207fec98de85a7d15b956ef", "00cee9960283045075684b410be8d0f7494b91aa2379f60727319f10ddeb0fe9d6" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f6417c8a670584e388676949e53da7fc55911ff68318d1bf3061205acb19c48f", "008f2b743df34ad0f72674acb7505929784779cd9ac916c3669ead43026ab6d43f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "501421277be45a5eefec6c639930d636032565af420cf3373f557faa7f8a0643", "008673d6cb6076e1cfcdc7dfe7384c8e5cac08d74501f2ae6e89cad195d0aa1371" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0d935bf9ffc115a527735f729ca8a4ca23ee01a4894adf0e3415ac84e808bb34", "3195a3762fea29ed38912bd9ea6c4fde70c3050893a4375850ce61d82eba33c5" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e59f50708646be8a589355014308e60b668fb670196206c41e748e64e4dca21", "5de37fee5c97bcaf7144d5b459982f52eeeafbdf03aacbafef38e213624a01de" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "169fb797325843faff2f7a5b5445da9e2fd6226f7ef90ef0bfe924104b02db8e", "7bbb8de662c7b9b1cf9b22f7a2e582bd46d581d68878efb2b861b131d8a1d667" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "271cd89c000143096b62d4e9e4ca885aef2f7023d18affdaf8b7b54898148754", "0a1c6e954e32108435b55fa385b0f76481a609b9149ccb4b02b2ca47fe8e4da5" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3d0bc7ed8f09d2cb7ddb46ebc1ed799ab1563a9ab84bf524587a220afe499c12", "00e22dc3b3c103824a4f378d96adb0a408abf19ce7d68aa6244f78cb216fa3f8df" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a6c885ade1a4c566f9bb010d066974abb281797fa701288c721bcbd23663a9b7", "2e424b690957168d193a6096fc77a2b004a9c7d467e007e1f2058458f98af316" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008d3c2c2c3b765ba8289e6ac3812572a25bf75df62d87ab7330c3bdbad9ebfa5c", "4c6845442d66935b238578d43aec54f7caa1621d1af241d4632e0b780c423f5d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a";
                bn_t sig_s = "0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "530bd6b0c9af2d69ba897f6b5fb59695cfbf33afe66dbadcf5b8d2a2a6538e23";
                sig_s = "d85e489cb7a161fd55ededcedbf4cc0c0987e3e3f0f242cae934c72caa3f43e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388";
                sig_s = "f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb71";
                sig_s = "3dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f1";
                bn_t sig_s = "9b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b";
                sig_s = "500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df55737";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3";
                sig_s = "541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb55677";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a";
                bn_t sig_s = "59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b43";
                sig_s = "9638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04";
                sig_s = "a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830";
                bn_t sig_s = "228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f285519";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d";
                sig_s = "3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a1251336";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86";
                sig_s = "ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b4";
                bn_t sig_s = "3dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd139929";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "5eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af78";
                sig_s = "2c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "96843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28";
                sig_s = "f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6";
                bn_t sig_s = "402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9";
                sig_s = "edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84";
                sig_s = "feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7";
                bn_t sig_s = "b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "6b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f7";
                sig_s = "5939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361";
                sig_s = "f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "31230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb07";
                bn_t sig_s = "0f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beff";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743";
                sig_s = "cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "7e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed800185945";
                sig_s = "9450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b356";
                bn_t sig_s = "89c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b34";
                sig_s = "72b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "70bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67";
                sig_s = "aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha256_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha512_p1363_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha512_p1363_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                bn_t sig_s = "5f85a63a5be977ad714cea16b10035f07cadf7513ae8cca86f35b7692aafd69f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012478f1cf49f6d858ac900a7af177222661ac95e206d32ee63020beee955ca711";
                sig_s = "00a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "db870e2eb60927a9536ff5850e88ddd918215f79475c0e23b752d6976369a391";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "00a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "db870e2fb60927a8536ff5850e88ddd95b3a64cba0446f9ec3990bd467067e40";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "01a07a59c3a41688548eb315e94effca0efd1ffe0a13467061783dde1cce167403";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "01a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "5f85a63b5be977ac714cea16b10035f0bfc6fca393d12e237b7beca62e4cb14e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3932323038"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "3c623e7f7598376825fa8bc09e727c75794cbb4ee8716ae15c31cd1cbe9ca3ee";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439313934313732"_hex;
                sig_r = "3a4f61f7f8c4546e3580f7848411786fee1229a07a6ecf5fb84870869188215d";
                sig_s = "18c5ce44354e2274eadb8fea319f8d6f60944532dbaae86bfd8105f253041bcb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333637363431383737"_hex;
                sig_r = "3fa9975fb2b08b7b6e33f3843099da3f43f1dcfe9b171a60cafd5489ca9c5328";
                sig_s = "985a86825a0cc728f5d9dac2a513b49127a06100f0fc4b8b1f200903e0df9ed2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363731343831303935"_hex;
                sig_r = "4d66e7ee5edd02ab96db25954050079ef8de1d0f02f34d4d75112eaf3f731240";
                sig_s = "6292d1563140013c589be40e599862bdd6bda2103809928928a119b43851a2ce";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323037313732393039"_hex;
                sig_r = "a9228305f7b486f568eb65d44e49ba007e3f14b8f23c689c952e4ced1e6cf91e";
                sig_s = "b73c74d28bd1268002bed784a6b06c40a90ee5938ea6d08f272d027e0f96a72c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323938303334323336"_hex;
                sig_r = "3fa39842bfab6c38afa7963c60beb09484d4579fc75ef09efff44e91bc62ca83";
                sig_s = "5612add1924f0285ace5b158828e2b32ab2b6e7f10ee68dca1cc54591fee1fec";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383736303239363833"_hex;
                sig_r = "06c04b02edfeecd8620f035ea4f449bd924593e86e5288a6f22d1923b0e2e8a9";
                sig_s = "f666718e6fefb515bb9339d29cc0e58cfba89d605ca0066bca87f6a3f08ebcfa";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230323034323936353139"_hex;
                sig_r = "1ddd953c32a5f84109cd4d9ec8c364dd318376ff5d228211a367483077d63880";
                sig_s = "563dba4845de762baf04910618d587e0dd0c97dd1c9785c24ffdf2f8a660abf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343531363639313830"_hex;
                sig_r = "9fe4ec4831ef4945f100d5d35a2e6312411ca5df6c900ca60690f2985d553482";
                sig_s = "c674ad5e1bead2f767c9248e444452a4a8530dd47246cbbc968da865bdf212b6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303933363835393531"_hex;
                sig_r = "e8703d6b16a79fc2ab3653cece29d06f65dd6f2c230cb08ee30c5517407d75db";
                sig_s = "8cfeb87b8e95ddacd638b37d315393c5005f3ab8bba0cc1cd1a050829b775bfb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323139353630323031"_hex;
                sig_r = "def608caf1f277d71403009f209c1d7eef11aaa7920397fbf429b8146181aece";
                sig_s = "f3b8f2aa5b3df9a8b37313ea66ad5b74673f3e8614ff471b1eb6773217511fb0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363832343734333033"_hex;
                sig_r = "4f5d08e8d936ce831d02d6b23fb8fce0e0750101af3ab9c3b28636b95a5e24ad";
                sig_s = "6f034480553bcecac221f8be8288163c55492e2e56a88f4d0341b61436a0a6c0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373336353331373836"_hex;
                sig_r = "bdd822bfe3733d9f4b88764fe091db2e8f8af366e4c44d876bf82e62bd48c7ee";
                sig_s = "7fbf7750c5dc849a2c55dbdd067806f869652a7b3a57baa4733781d3128f02de";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373935393033373932"_hex;
                sig_r = "1c4fc02961b7f4245566b410bf08f447502ea4f75b15690344681efa2edf7b4b";
                sig_s = "7d63eef119dc88bc4a1b2c43ac21cd53892443661f8c3a97d558bf888c29f769";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333939363131303037"_hex;
                sig_r = "6406f2d249ab1264e175476ca3300efd049fcad569dff40b922082b41cc7b7ce";
                sig_s = "461872b803383f785077714a9566c4d652e87b2cad90dd4f4cc84bc55004c530";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303837343931313835"_hex;
                sig_r = "415c924b9ba1902b340058117d90623602d48b8280583fb231dc93823b83a153";
                sig_s = "f18be8cdc2063a26ab030504d3397dc6e9c6b6c56f4e3a59832c0e4643c0263c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323336363738353030"_hex;
                sig_r = "d12e96c7d2f177b7cf6d8a1ede060a2b174dc993d43f5fe60f75604824b64fef";
                sig_s = "0c97d87035fcca0a5f47fe6461bb30cbaf05b37e4211ec3fcd51fc71a12239ca";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343438393937373033"_hex;
                sig_r = "7df72a64c7e982c88f83b3a22802690098147e0e42ef4371ef069910858c0646";
                sig_s = "adbaa7b10c6a3f995ed5f83d7bda4ba626b355f34a72bf92ff788300b70e72d0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373134363332383037"_hex;
                sig_r = "047c4306f8d30e425ae70e0bee9e0b94faa4ef18a9c6d7f2c95de0fe6e2a3237";
                sig_s = "7a4d0d0a596bd9ea3fe9850e9c8c77322594344623c0b46ac2a8c95948aefd98";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323236343837343932"_hex;
                sig_r = "57d603a367e23af39c95dd418c0176da8b211d50b1be82bf5ef621a2640204f7";
                sig_s = "5dc3f285ad015c4d71157bd11e5b8df6a89e4b267393b08b5ad5013bdae544b1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333533343439343739"_hex;
                sig_r = "11df6741021ec8cc567584aea16817c540859c4e5011551c00b097fcfc2337e5";
                sig_s = "668551919d43206ac0571fc5ad3ac0efb489bea599e7bf99fe4c7468d6c2c5e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373837333033383830"_hex;
                sig_r = "7451ffede471bd370406533436fc42a89daa0af4903d087cbc062fe7e54dbf70";
                sig_s = "590895398f22b48ce72cbf7c3d3ee1dd7fb0ee645edb0b1b1de35f370e5bf5ee";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332313935383233"_hex;
                sig_r = "fc4c4d81da6f687a6426263193c1a680b67734a1b180647b8c76407cc4f0a9c6";
                sig_s = "56f775d372c9bee685374085be676c9cf31cf1f978a5e6ccb04e4a0761159cc7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130373339333931393137"_hex;
                sig_r = "feb978ca33c46ffba47eb63bb40de7833e43d5654575b54de1fea3d1de3c8ad5";
                sig_s = "108078ba997bfa064521baf342c97b0c64bd25240c8fd0fd7533ae2d03081b70";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383831303237333135"_hex;
                sig_r = "cc61729698467ba53da199ff481fe7433f194fc96367907e8dc5e1d9f42b1e21";
                sig_s = "83dd9ef156e7c1f9c09b3bf86a4f1c88e5dd20cd74d997858e600797dbe74ad2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36303631363933393037"_hex;
                sig_r = "d47f616303ff0eb813eac32e760ba30ad445e0af7dc57e70756104823f6a895f";
                sig_s = "047f2217b399c46a426b936a124980a6011f0896f51dbe07632828a72d7173f1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38383935323237303934"_hex;
                sig_r = "cff73dfa2bac67ce1340b25c885abb3e7979ef7f840f15d5f19e86640cdd40a3";
                sig_s = "c7d1210802796c4f251049ee08a2c29f5c71064033d17010c65bf2e94499381e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353830323334303934"_hex;
                sig_r = "10acaf9c485ab1220355b95be269f124e12eb252f2224b0fc50785eb2ee3df45";
                sig_s = "32443b557efc6896347fa778e1fcf33cbb769c9a7da896b20d93fea7c2791ea4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393635393931353132"_hex;
                sig_r = "f919da0651abc2bff994a879d2778fa5195d57400e003e8dd6adb3fc7a0cc4cc";
                sig_s = "9b945d06bd119665b278a59bd24fdd2350817d0be87997bee57b70c479d64a2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323838373332313938"_hex;
                sig_r = "cc38e7a018f6d70b2d9b49120cc9b4a169f2f72238821a86b81f553b6225d24e";
                sig_s = "276efd8bf06ccce07c7aae35eaac3bd1c374dcf0cf0588d5e0e4171936688636";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323330383837333139"_hex;
                sig_r = "ff85ad66621991c318b85cef73c576cb2a8d43c568c1aafc85b40ef2a9a6b41c";
                sig_s = "732a79e6837ebf8434fea6e7fefa948f506ae455c1a3eb36a030185a23037d96";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313239303536393337"_hex;
                sig_r = "33f016e51eef9b1136380cb8b84c6b38b107e24c6731bd07cb1c7f4a29f33a83";
                sig_s = "36b177bb8be94c8be67ff3a41fcc4d22b5c9eb377da713eb014ae01c64ca6dd7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373438363536343338"_hex;
                sig_r = "929413ee91f27454d74e91370a10a86fc98ac7305c8ab4ca59752bda3a7bfc37";
                sig_s = "483b47a26a0d7d2e6bd37d351d9ee37c5ec2a4686d884d78b6beb7f6b08c50f9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353833353032363034"_hex;
                sig_r = "578202c7d0abac93ca43dde3cb44414e5601c1eb557604cb9adb4bde0a12633b";
                sig_s = "fb9a7412e307aee95ef4b53540571a21559414e5306794ab5182cfb229dab3e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333237373534323739"_hex;
                sig_r = "46d45ad0bb75b8639d0e91d8450fc31887c211328a5784fc83b4cb7f5b962c1b";
                sig_s = "d6751d13ede2079b7aa1d822bdb32d7f3cf00273a1ff03df90c0ec7c62a47568";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373735353038353834"_hex;
                sig_r = "abe84c941783d5ced284fea56341ecc68d6bdd3196d318fbd074641f8c885bd5";
                sig_s = "bdea3c44d48e01aa40935c1c9723ff733199563440f26b4ecf0b444b0418d9f5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137393832363438333832"_hex;
                sig_r = "05277cdbf491e336fe81be24e393a161a4fb89112c9ffed1ee6649c406713408";
                sig_s = "ab6934332e68e108bb0484d21c457dcf381a620c3a4712fdbfeb658a3fafd60c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333936373737333635"_hex;
                sig_r = "293825737c8c14430ed10dbadd7da337275f9b61d1d26377f778ffaa00c139de";
                sig_s = "cdddec267a8678c96829bf6c1d6f38322e119937cfd2fee01e9dc9525f43ed6b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393938313035383031"_hex;
                sig_r = "2041fdd6111c45dfd29e750e082dcdadc9a584a8a2be46580fb0ba3b3dc65862";
                sig_s = "421824fe987e4172a0f8bbcb7bcd9e1b073b7742ed9f9df98f2a1a37cd374ce3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136363737383237303537"_hex;
                sig_r = "267941db660e046ab14e795669e002b852f7788447c53ebef46a2056978b5574";
                sig_s = "d00183bcaf75bc11e37653f952f6a6537151c3aa0a1b9e4e41b004a29185395b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323036323134333632"_hex;
                sig_r = "5dcd7f6814739d47f80a363b9414e6cbfb5f0846223888510abd5b3903d7ae09";
                sig_s = "43418f138bb3c857c0ad750ca8389ebcf3719cb389634ac54a91de9f18fd7238";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383432343936303435"_hex;
                sig_r = "5e0e8cc0280409a0ce252da02b2424d2de3a52b406c3778932dbc60cb86c3567";
                sig_s = "93d25e929c5b00e950d89585ec6c01b6589ae0ec0af8a79c04df9e5b27b58bc5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323639383937333231"_hex;
                sig_r = "4fcf9c9d9ffbf4e0b98268c087071bffe0673bb8dcb32aa667f8a639c364ea47";
                sig_s = "820db0730bee8227fc831643fcb8e2ef9c0f7059ce42da45cf74828effa8d772";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333837333234363932"_hex;
                sig_r = "c60cd2e08248d58d1639b123633643c63f89aff611f998937ccb08c9113bcdca";
                sig_s = "ac4bb470ce0164616dada7a173364ed3f9d16fd32c686136f904c99266fda17e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313138383837353336"_hex;
                sig_r = "7cfdaf6f22c1c7668d7b6f56f8a7be3fdeeb17a7863539555bbfa899dd70c5f1";
                sig_s = "cee151adc71e68483b95a7857a862ae0c5a6eee478d93d40ccc7d40a31dcbd90";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838363036353435"_hex;
                sig_r = "2270be7ee033a706b59746eab34816be7e15c8784061d5281060707a0abe0a7d";
                sig_s = "56a163341ee95e7e3c04294a57f5f7d24bf3c3c6f13ef2f161077c47bd27665d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343739313135383435"_hex;
                sig_r = "16b5d2bfcaba21167a69f7433d0c476b21ded37d84dc74ca401a3ecddb2752a8";
                sig_s = "62852cf97d89adfb0ebbe6f398ee641bfea8a2271580aac8a3d8326d8c6e0ef9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303736383837333637"_hex;
                sig_r = "d907eefa664115848b90c3d5baa0236f08eafaf81c0d52bb9d0f8acb57490847";
                sig_s = "fd91bc45a76e31cdc58c4bfb3df27f6470d20b19f0fba6a77b6c8846650ed8a6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838353036393637"_hex;
                sig_r = "048337b34f427e8774b3bf7c8ff4b1ae65d132ac8af94829bb2d32944579bb31";
                sig_s = "bd6f8eab82213ccf80764644204bb6bf16c668729cdd31dd8596286c15686e8e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373231333036313331"_hex;
                sig_r = "b2bc46b7c44293557ab7ebeb0264924277193f87a25d94c924df1518ba7c7260";
                sig_s = "abf1f6238ff696aaafaf4f0cbbe152c3d771c5bfc43f36d7e5f5235819d02c1a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323034313031363535"_hex;
                sig_r = "40d4b38a61232e654ffd08b91e18609851f4189f7bf8a425ad59d9cbb1b54c99";
                sig_s = "9e775a7bd0d934c3ed886037f5d3b356f60eda41191690566e99677d7aaf64f3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530363830393530"_hex;
                sig_r = "ac8f64d7df8d9fea005744e3ac4af70aa3a38e5a0f3d069d85806a4f29710339";
                sig_s = "c014e96decfef3857cc174f2c46ad0882bef0c4c8a17ce09441961e4ae8d2df3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373237343630313033"_hex;
                sig_r = "41b3766f41a673a01e2c0cab5ceedbcec8d82530a393f884d72aa4e6685dea0a";
                sig_s = "073a55dca2da577cafb40e12dd20bf8529a13a6acdf9a1c7d4b2048d60876cb3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134353731343631323235"_hex;
                sig_r = "1942755aa8128382cd8e35a4350c22cc45ba5704d99e8a240970df11956ad866";
                sig_s = "f64cf1e0816cf7ac5044f73ba938e142ef3305cb09becb80a0a5b9ad7ba3eb07";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313739353136303930"_hex;
                sig_r = "51aba4ff1c7ddf17e0632ab71684d8de6dc700219ef346cb28ce9dafc3565b3b";
                sig_s = "b6aaebe1af0ad01f07a68bf1cf57f9d6040b43c14b7eb8238542760e32ce3b0c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383932373133303534"_hex;
                sig_r = "91efbfcc731650e9f004c38b71db146c17bf871c82c4e87716f7ff2f7f9e51d0";
                sig_s = "089ea631a7c5f05311c521d21ba798b5174881f0fd8095fb3a77515913efb6e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383936313832323937"_hex;
                sig_r = "4a7e47bd281ea09b9e3a32934c7a969e1f788f978b41585989f4689e804663fb";
                sig_s = "e65f6bd702403cbbed7f8ad0045f331d4a96fbf8c43f71f11615b7d1b9153b7f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38323833333436373332"_hex;
                sig_r = "c795f5da86e10a604d4f94bf7cac381c73edad1461d66929e53aa57ca294e89f";
                sig_s = "bae784ab6c7b58332ee05e7d54169edf55ce45f030e71ae8df63969fb327a10c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333636393734383931"_hex;
                sig_r = "ea68b24843b225f505e01c0e608b20b4d93e8faf6b9cf70cf8f9134a80e7b668";
                sig_s = "a3abc044b4728f80fe414bdc66f032b262356720547bec7729fad94151c6adc7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313939313533323239"_hex;
                sig_r = "bfe7502140c57a24a77edc3d9b3c4bc11d21bdb0b196977b7f2b13ac973ad697";
                sig_s = "947a01da9731849d72b67ef7bc40b012480fd389895aad1f6b1cdbeab3b93b8d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363030333136383232"_hex;
                sig_r = "3434ee1142740a0ab8623b97fc8dc2567eda45dadf6039b45c448819e840cf30";
                sig_s = "3c0fac0487841997202c29f3bf2df540b115b29dc619160d52203d4a1fd4b9f7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383639363531363935"_hex;
                sig_r = "5338500e23ba96a0adc6ef84932e25fbad7435d9f70eb7f476c6912de12e33c8";
                sig_s = "a002f5583ea8c0d7fb17136d0ee0415acf629879ce6b01ac52e3ecd7772a3704";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353833393236333732"_hex;
                sig_r = "4ff2d4e31f4180de6901d2d20341d12387c9c55f4cf003a742f049b84af6fe05";
                sig_s = "0312f38771414555fa5ed2817dcc629a8c7cf69d306300e87bc167278ec3ef37";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133323035303135373235"_hex;
                sig_r = "51d665bad5f2d6306c6bbfe1f27555887670061d4df36ec9f4ce6cdfaf9ea7ac";
                sig_s = "2905e43f6207ee93df35a2e9fb9bc8098c448ae98a14e4ad1ebaea5d56b6e493";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303835333330373931"_hex;
                sig_r = "b804e0235f135aba7b7531b6831f26cc9fb77d3f83854957431be20706b81369";
                sig_s = "9d317fd08e4e0467617db819cde1d7d4d74da489b2bce4db055ea01eccfafcf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383636383133313139"_hex;
                sig_r = "8ab50ef3660ccb6af34c78e795ded6b256ffca5c94f249f3d907fb65235ef680";
                sig_s = "49d5aaeae5a6d0c15b286e428b5e720cf37a822ede445baa143ffae69aba91b8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303832353339343239"_hex;
                sig_r = "571b9c46a47c5cc53a574c196c3fb07f3510c0f4443b9f2fe781252c24d343de";
                sig_s = "68a9aebd50ff165c89b5b9cb6c1754191958f360b4d2851a481a3e1106ee7809";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130303635393536363937"_hex;
                sig_r = "4cb7817b04dc73be60d3711803bc10687a6e3f4ab79c4c1a4e9d63a73174d4eb";
                sig_s = "ce398d2d6602d2af58a64042f830bf774aee18209d6fb5c743b6a6e437826b98";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303234313831363034"_hex;
                sig_r = "684399c6cd6ebb1c5d5efb0d78dce40ebd48d9d944eb6548c9ce68d7fdc82229";
                sig_s = "cf25c8e427fae359bfe60fa02964f4c9b8d6db54612e05c78c341f0a8c52d0b5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373637383532383734"_hex;
                sig_r = "20b7b36d5bc76fa182ca27152a99a956e6a0880000694296e31af98a7312d04b";
                sig_s = "eeeabc5521f9856e920eb7d29ed7e4042f178ff706dff8eeb24b429e3b63402a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353434313939393734"_hex;
                sig_r = "6b65c95e8e121d2e6ee506cfd62cb88e0bfb3589da40876898ef66c43982aca9";
                sig_s = "09642c05ad619b4402fd297eb57e29cca5c2eb6823931ba82de32d7c652ba73e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383433343830333931"_hex;
                sig_r = "67c74cbf5ea4b777bf521ace099f4f094d8f58900e15e67e1b4bd399056629ed";
                sig_s = "3d2884655c49b8b5f64e802a054e7bf09b0fc80ca18ebf927b82e58bb4a00400";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373138383932363239"_hex;
                sig_r = "79a5e40da5cf34c4c39adf7dfc5d454995a250314ebd212b5c8e3f4e6f875feb";
                sig_s = "b268920e403ba17828ff271938a6558a5b2dd000229f8edb4a9d9f9b6ac1b472";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373433323233343433"_hex;
                sig_r = "c8b13006c3a51a322fff9321761b01de134f526be582b22e19693c443fc9fe46";
                sig_s = "34e7f60179c6162ab980fcd58f173b0e6c30b524d35c67921677522dcef843a1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343036303035393336"_hex;
                sig_r = "3513db745489a487c88a6cedf8795b640f8f71578397bdabd6cc586c25bd66ad";
                sig_s = "99a72cd3f0ca6c799149283ca0af37f86b88200d0c905bd3c9f1b859e55b1659";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363134303336393838"_hex;
                sig_r = "3a6386afb08f7ff8140b5a270f764e8706ef2830fb177446f7b4eeb8a25aac64";
                sig_s = "4b70854b38c29245b2b980eba10ea936c68a38c1da5255ce2386db23afc7c06a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303935343235363835"_hex;
                sig_r = "b8fc54a8a6be3c55e99c06f99ccdcce7af5c18a3c5829726a870cc1068458f64";
                sig_s = "cc7237c39c8e6a4a1c8c62f5f88636549c7410798b89684c502c3adfe5fb7ad2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303038303938393833"_hex;
                sig_r = "47b460851e5607f2021626635c565a63f78f558795e1b330d09115970dbbb8ab";
                sig_s = "a6a9f4f213e08d3c736d3e1c44a35140cb107619f265a5b13608ed729fd6d894";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353734313437393237"_hex;
                sig_r = "8cfda4f7a65864ebbea3144863da9b075c07b5b42cb4569643ddfd70dd753b19";
                sig_s = "595784b1ab217874b82b9585521f8090b9f6322884ab7a620464f51cf846c5b7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383636373731353232"_hex;
                sig_r = "4cd6a45bd7c8bf0edbdf073dbf1f746234cbbca31ec20b526b077c9f480096e7";
                sig_s = "7cf97ae0d33f50b73a5d7adf8aa4eeeb6ff10f89a8794efe1d874e23299c1b3d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363934323830373837"_hex;
                sig_r = "2e233f4df8ffebeaec64842b23cce161c80d303b016eca562429b227ae2b58ec";
                sig_s = "46b6b56adec82f82b54daa6a5fca286740a1704828052072a5f0bc8c7b884242";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39393231363932353638"_hex;
                sig_r = "549f658d4a3f98233a2c93bd5b1a52d64af10815ae60becb4139cac822b579c3";
                sig_s = "27bdddf0dbcf374a2aec8accc47a8ac897f8d1823dda8eb2052590970b39ce2a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131363039343339373938"_hex;
                sig_r = "9fabcc1e5fd965226902f594559e231369e584453974e74f49d7d762e134fb9d";
                sig_s = "293cccc510793bac45ce5da2bb6c9e906437f59435ca206655f74b625df07c7c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313836313632313030"_hex;
                sig_r = "2e5c140fd6f5f823addc8088ffaae967e7f4897274316769561dfb31435825d9";
                sig_s = "eda47327d7cfae1daa344ff5582a467bd18eb9f01caeab9c6da3c0cc89df6713";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323934333437313737"_hex;
                sig_r = "4c11e3b7efbe3908ad2118e54d7d34d6c6eb4570bf7fdb11a7679fe93afa254c";
                sig_s = "712e90f421836e542dac49d10bb39db4a98b2735b6336d8a3c392f3b90e60bbe";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3138353134343535313230"_hex;
                sig_r = "dfb4619303f4ff689563d2275069fac44d63ea3c3b18f4fb1ac805d7df3d12ec";
                sig_s = "68e37b846583901db256329f9cf64f40c416fba50dcb9be333a3e29c76ae32db";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343736303433393330"_hex;
                sig_r = "e70e8e17bd758ff0c48f91cb2c53d293f0f5ae82eb9dfe76ab98f9b064278635";
                sig_s = "21dde32cb0389cad7bdf676d9b9b7d25bb034ad25a55ea71ee7ee26a18359dd2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353637333738373431"_hex;
                sig_r = "421397ecae30617a5a6081ad1badf6ce9d9d4cb2afdabf1f900e7fdb7fb0af5a";
                sig_s = "57ca89dc22801c75fdbefdaeca65c675625f94de7d635062b08ed308df5762cc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373339393334393935"_hex;
                sig_r = "0610c08076909bb722fba105c23eac8f66b4db1d58f66a882fc90d59acdec8e0";
                sig_s = "af59e8d570761cac589d49f11c884007f7ac1eea1a44c6f3fdad1d542187d25e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343738333636313339"_hex;
                sig_r = "59a1181cab0ee8ce94ab2b5ab4f4b13a422e38efe69f634bf947485a5b9ea49c";
                sig_s = "9b3c913d98a4ab15f6a39f1802b8f2d28559aa1f8d03a3a88df00c89dc293a97";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363439303532363032"_hex;
                sig_r = "8cae6c4dfbf901bd66ab82541011fa15c8e90e2c18c01bd881acaa2b63cb587b";
                sig_s = "a86acf943f29cef91d1b66a7de5547df6cdfc45dd7bef816dcb8de9f5a425d2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373633383837343936"_hex;
                sig_r = "8b00c74b86474d782eac9974aea606d8f7ee78c79597e15687021f5991e86acd";
                sig_s = "309dfe3686648eae104e87b3e9b5616a3ad479ca4f0b558ae4f1e5ab3115346a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353739303230303830"_hex;
                sig_r = "433a915504c977809634a36fcf4480e4c8069fc127d201d30dfdb1f423c95fd4";
                sig_s = "bcb1b89aafd50a1766b09741fc6a9a96e744ae9826d839bf85ffb50a91981773";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333434373837383438"_hex;
                sig_r = "4b69abd2b39840a545cdd4a72d384234580e2fd938b7091d0ecdb562780857db";
                sig_s = "fdab9957119e0a4092af82f6cc29f3c8a692671ec86efb0a03c1112a0a1e0467";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3139323636343130393230"_hex;
                sig_r = "dab9d3686c28363ad017b4a2b36d35bf2eb80633613d44deb9501d42a3efbd38";
                sig_s = "1392a562d79f9ab19014e4f7e2f2668259f3720a76c120d4a3c3964e880f7679";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373033393135373035"_hex;
                sig_r = "23f94e47b440ce379b74c9311232b19a64e3e7c9b90da34b0c1c3f3d7af28105";
                sig_s = "e1425903b1479c2ce18b108a6d1ec8b7a4f0f657dedb00de3a3ceea7fdeee9be";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3831353435373730"_hex;
                sig_r = "9d706a8fa85d15bd0c3492c6672dfe529f4073b217b3947b5b2cfd61f87ccb71";
                sig_s = "6aaaaf369f82a0e542f72ded7d7eb90c8314ffa613a0ea81da1c8393dbae2bac";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313935353330333737"_hex;
                sig_r = "ac77918c4085c8a7ce5020b00c315629aee053a445cb4661eb50f6b62a47da29";
                sig_s = "df2aea2b9c11a6ce39d3cd9e1faf4a53057e0b1b2e48a324be9e773203fe9fbb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323637383130393033"_hex;
                sig_r = "9db2dbd2935f147fae7f6a95c8e2307bd8537c3d96eb732ad6d5ebdd89bc754e";
                sig_s = "93a9ab99d2de9d08fe0a61e26c8fe1ebbf88726e4b69d551b57d15f0ae16df5a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131313830373230383135"_hex;
                sig_r = "769f70093939afbd1fa15873decfa803ca523ace8040280ba78cf833497722bc";
                sig_s = "369875aba5e1ced5a4ca8444ec9399a38038b00e153a0ae34d9b3c9781447eea";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333831383639323930"_hex;
                sig_r = "26e5182b9822550ad52f46ad80781d6bef3d110a204db5e58a0746f796982200";
                sig_s = "a9418e76029ced0cf78a571a9e59ad04086e91f70e6813981bb33c1dee891165";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313331323837323737"_hex;
                sig_r = "e7bd6aefcf7b27e1f3fadbe713f9adb3d23398e88200cd2e94989c9d12e92177";
                sig_s = "9583e0de3b76f8d4b1e634a81cbc34af54e2f8599f3684ce48d372760c8204c4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333331393236353338"_hex;
                sig_r = "8638ed7eaa83609a01a6af9c52ec9bfddda90442b1e6031d61cfa22e48b2e1e2";
                sig_s = "20c284d596f71c6c8df732f5a5a2006302301e1a792e2b39663d93a9760762d2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333434393038323336"_hex;
                sig_r = "61d924307a96180b06383608ba91674e15c3ea06ff2534412b93a587dde649c1";
                sig_s = "59b84aa2115b2547edac88088ca6313e9fbe1ca6a361c7e57938f9dde3f4349c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383239383335393239"_hex;
                sig_r = "424fcfc3fd63d128c2eb125e88c7fe5d283b63470a786b82783edbb8a0b7a6d7";
                sig_s = "b11548c2cd7fce9d44e795ca51af0b2f6a5180e9c9be0314007ed9e7f4bbe5e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343435313538303233"_hex;
                sig_r = "a5f747ae6290fa9582c6ce8d5608621d495f061551bc4531bacba586a563b184";
                sig_s = "62faf8f92291e12812835b3f1d43c967bceb885b110bd06e5a68e2d74781ae2b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132363937393837363434"_hex;
                sig_r = "b731dc0d92c2cc7a605d78233f7814699bdf1cab2df297b6844eec4015af8ea0";
                sig_s = "39b1a0cc88eb85bcdc356b3620c51f1298c60aec5306b107e900ffdba049dd6f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333939323432353533"_hex;
                sig_r = "ef73c4fa322da39fb6503bab6b66b64d241056afbcd6908f84b61ccbbe890433";
                sig_s = "f1ef85413e5764aa58a3128ccfcf388324fe5340e5edf8d0135ae76786ce415b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363031393737393737"_hex;
                sig_r = "694cd30e2ad0182579331474b271ee2d48723bc8415dc6513873586ce705b76b";
                sig_s = "c5ac0c0ed5a4017d110cb45d63aa955dc7dc5ce23e7965c5397c3ff46a884636";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130383738373535313435"_hex;
                sig_r = "f38b2236be3024e10b894ffb1cc68d0bb8d4cf0fcd2cfc1779f8883765d3cd96";
                sig_s = "da69cd0b74c25566d60a486edd559fc39d569fb2751445a4798df8a36891802c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303034323532393939"_hex;
                sig_r = "a881732c205a0b4b95669c00756fd91973450109a46f17d5a9d971b5e92b9aa4";
                sig_s = "8acefdca4e06c16b47ccad1c57c05912637e107096ba230c92b97187db79e19e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353635333235323833"_hex;
                sig_r = "04452f554bae819b42effb84ef44a9f1cb7e2d75b4ba9ff9b9cfffaddde3fd1b";
                sig_s = "61a3fbc5e73c350f2e3d85a7452cd231a3f3375fc11f5fe153b185f53b09c1d0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3233383236333432333530"_hex;
                sig_r = "05814f57f58efc7cb490119e584e635e6f0ad1c19fb5dc2edafda075bb55f98e";
                sig_s = "9dd5c6e39009d67d965903ecffe08a851775cc1248cc19c0b77798282131b8f6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343437383437303635"_hex;
                sig_r = "dc1c4a46085e198843b1f01980cd5e4a1ff6f8e8ff7014397f0afd5b247fb0a0";
                sig_s = "38a13dc723ed90b30251d742b14733a03292ff26530a1ebcaf3d10862a6eff82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134323630323035353434"_hex;
                sig_r = "1067667bf525734ca7f2510e36348fd9c2c9bccf032dfd571de6d45abd49361a";
                sig_s = "fa762568d3a19e5a1d8ea65e00202a5b16f9afae56733a01f86e35378c558da4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393933383335323835"_hex;
                sig_r = "e58d69dc56bc1031644847e3e046e2ea845a515d969d07ea1aa53aea5bd92fa1";
                sig_s = "bfe50b80f7c512f5ab521fe7e1a131045fde78d4de826c91573baaba1e35ca97";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323932313533353233"_hex;
                sig_r = "fe79c6b8c14d0f23d426e3d157f1b541f6bb91bf29957ef97c55949c9ba48a35";
                sig_s = "9da112c4a4cf4b1ff490c426f6c8ff122183964a0de56f7336ab382dc9d10285";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343539393031343936"_hex;
                sig_r = "45d4ed7e9edacb5a730944ab0037fba0a136ed9d0d26b2f4d4058554f148fa6f";
                sig_s = "f136f15fd30cfe5e5548b3f4965c16a66a7c12904686abe12da777619212ae8c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333933393731313731"_hex;
                sig_r = "4fb7c1727e40bae272f6143a50001b54b536f90233157896dbf845e263f24863";
                sig_s = "6fea5c924dca17519f6e502ef67efa08d39eb5cc3381266f0216864d2bd00a62";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333930363936343935"_hex;
                sig_r = "779aac665dd988054b04f2e9d483ca79179b3372b58ca00fe43520f44fcb4c32";
                sig_s = "b4eca1182cd51f0abd3ea2268dcda49a807ad4116a583102047498aa863653f5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343436303536323634"_hex;
                sig_r = "db7ac6f65fb1c38d80064fd11861631237a09924b4eeca4e1569fa4b7d80ad24";
                sig_s = "a38d178d37e13e1afa07a9d03da025d594461938a62a6c6744f5c8f7d7b7bb81";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363835303034373530"_hex;
                sig_r = "c90043b4aadf795d870ac223f33acdbd1948c31afff059054dc99528c6503fa6";
                sig_s = "829f67b312bb134f6954a23c611a7f7b5b2a69efced9c48db589ac0b4d3da827";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3232323035333630363139"_hex;
                sig_r = "fa16c0125b6615b90e81f7499804308a90179bf3fcff6a4b2695271c68b23ded";
                sig_s = "0d6cda5ce041dc5a5f319ad9c0de4927d0cf5e89e37b79216194413d42976d54";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323135363635313234"_hex;
                sig_r = "1a4b5bd0f806549f46a3e71bfe412d6d89206017640ded66f3d0b2d9b26bec45";
                sig_s = "aac5f74e3130264e01428570ee82ee47e245d160ed812ae252dedffd82e1ec2c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "f8e272234b51475ec4c6f327562a6e5c9080a96225e88b2e5f72a8eecbd41ab4";
                sig_s = "516b91617fc39e3141b3bc769f6a3b2e468e687f50bdc29e19088af62d203f4b";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b6e08b1bcc89e7fb0b84d7497e310553495be4877eccc4b3d6d79f7c68a05734", "31760fa1bcea4972759174ac1103bc6011985ccee251918d0573fbcb78969116" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000004319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3590c6a10353d669bc94d8e2ff9e14bbeed4a7f45b887255ab7e37b676387bb6", "15fc6f97ce39a3874c2b34cc571889abfa0a706c2cfb0e5a4750cc25690696f8" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "369e96402f2cfd1a37b3acbdecfc562862dbca944a0f12d7aaacb8d325d7650a", "00a723621922be2bdac9186290fdcdda028d94437966507d93f2fc1f5c887fdedb" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "27a0a80ea2e1aa798ea9bcc3aedbf01ab78e49c9ec2ad0e08a0429a0e1db4d0d", "32a8ee7bee9d0a40014e484f34a92bd6f33fe63624ea9579657441ac79666e7f" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009cff61712d4bc5b3638341e6e0a576a8098c9c6d3f198d389c4669f398dc0867", "00f3b9e09f567f3dfd9c4d2c1163e82beadf16c76e8f9d7a64673800ea76fa1e59" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "01";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d9117cae81295e82682fa387991e668e1570e0e90100bf4e63964822460561bc", "19f96b1787ed15769929978ba3dd7f68c97adf5c16f671e756cd8f08c49456ca" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "03";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cfcbad3524c22b992529f943e3ce0b2d126085501d6e3edd4f1dbf74bdca21e", "00afb259b1ba179cac09e8e43a88c8a09e7339910a7c941932e44b8be56f1fccde" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000005";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "05";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fbb51127e1f1b6a38e9fe9a2544614edb8e43ad7cd8c56f14b3235dda3bc1117", "009abd9753a9e647e9340c395fb2b91384d6d33fcb6456214350b6f3fa00f4364c" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "05";
                sig_s = "06";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dc80905500d7d74ed47de5224d8734545f22b776ae086cabfffe6ce58d5ef994", "00dc3067ce7d2cdfa9f4d5ace296b752814acc69c19a932d8b14077927901de3bf" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1b824a11eed94fbcd9b722d06613bbcf7eca00b9136f2652642178f37b1a920e", "00e900de495d9ef56fa6d19f3dd1e0edb23d23835ac8c2d3d13c0227e852e503eb" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2914b30c4c784696ffc3dddcec05f36cb1488bc342b9f529d5387acb9e48cb8d", "3dbd30d0d5d6d6a39108863c2d6a6e8571cd3261fb9eb98ce46125bd8f139136" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000000000000000002d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2579f546fe2f2aeb5f822feb28f2f8371618d04815455a7e903c10024a17da41", "5528e951147f76bee1314e65a49c6ec70686e62d38fbc23472f96e3d3b33fd1f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000001033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b102196bf455ee5aafc6f895504d3c3b6b2d37c35f8669bd0f0b694795fbd992", "00f777b6f829b9628ac35db0ef43f6a89f0a42812614e4c15924d8d47ebe45bae5" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4d056ab2ff57662fd6eebbe23930fef5cd08083e24146190cd01960b1fcd3749", "00fe7ec5847651c857898be0f09efd6e0116a5dbe327f6f3080a65fc966bf64d91" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "00000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "361c4a62cd867613138dfe24ccebc4b7df1b55fc7410f4995ee2b6b9ab222058", "4f116c6c84e53d262fd13a5f5de6b57e7a1981de4ecdffdf3323b4e91d80649c" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db9d5c5113f00822a146c9cda2e75cb6634cd0dff54aff6e22875171f57a0dad", "1c424cdd83eb01c02f6f8d36f42c6dc7e39db74358da8ac9bc9dc5890d46f667" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0099f19f07b33e03caf4703e04b930d57d6d9baa44460c596a2d3064e0b63ea412", "0086a74c4612a812ee348d2b43f80de627c11c75d81511e22a199c32119b792c6a" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "313f3309b236484c6eb4ea381e007854467a617343a2e97d845801c01a632cfe", "33f231854bba89a8ca3f802a2764d3bf6c3233c811a31e5e8028a0b862cb1977" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d3aa01fe59bad92cffe3db59e1385391fafd7af4e4ce462e8aac157274cc8a05", "00c7a7e603e18538aac15f89610beacc21e39898e6c5f7680a81c5bd7bd744a989" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e31eccd4704ebf7a4247ea57f9351abadff63679f2276e2a3b05009ebc1b8df", "648465a925010db823b2a5f3a6072343a6cc9961a9c482399d0d82051c2e3232" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ce0a47f881fd7315a733c4317848fa33c72e38de0b8fda36b61aa9a164f5808a", "0085b05d25115ea4097ddf63f878c8e83657e66de136a8f9e62ed81a58bf117ff9" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cd6f487b47f36c0dea8f4b04c4e6ac637c76b725929c611f48addcf3d2f65941", "00b50ea8f3a491190ee0b20cfb6efd113608e7c7c127577500e7f5c4a4e490fd60" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "456e5f8067d68a1b0a2e8fe2b28acad5755687154a0f167734ebabbdc059070d", "720dbe96659a66ef0cf27a73e7b3f3f145a60e0ad29f1e21dcc2bb42f0d82c1e" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "42bf0c0ac1e3850baf5515748a878e34249f71035e20a9f54ed468ec273cb0fc", "5b3138500230055c71f12d53f5c7d0e3d8aa54a94c668cb311e20d195fc71abb" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "6bfd55a8f8fdb68472e52873ef39ac3eace6d53df576f0ad2da4607bb52c0d46";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ffdd48da63d3af67223f16c51eb7e95600eb0b0e8b964f4fcd8c534face3c2c2", "00b4e009ab2a76829480e69c9e43b2f1fe076cfafb3fa8d27dd4d6bab4d6c3db54" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "654937791db0686f712ff9b453eeadb0026c9b058bba49199ca3e8fac03c094f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "793cbfce6f335dcfede7c6898ea1c537d7661ed6a8c9d308d64a2560d21c6e2c", "483d23a5ff05da00eaf9d52cf5362be9b53b95316c6a32e9ebe68d9ac35c2fd6" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "c51bbee23a95437abe5c978f8fe596a31c858ac8d55be9786aa5d36a5ac74e97";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a9f7023f559d4bb6c9f4bc3643e2824aff5451d929479ec3ea5eb30bad2c36ac", "6a7c77e8dd21f4ad49b103e67da9d3cda62b653dd194fad2ba8d1dd37bb0ea9b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ba4c3da7154ba564ab344ae12005aa482b6c1639ea191f8568afb6e47163c45";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00df79ee082b2fc77e9ce4633471f569bbcb5ce53856e3067774f37e8a64a2c7ff", "00aa488a6c34d499df76f427de3609bfcfd9feae67ffe0b0de594463c453b0ab16" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "4c3dafcf4ba55bf1344ae12005aa4a74f46eaa85f5023131cc637ae2ea90ab26";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4cc3bf65e32e00284adfca00f40df755415c485091ac0489ae9a337103a5f8f0", "123ab86dd433b933b4f2063c002144df3cfeba78dad0ed89c0377541532908c2" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "987b5f9e974ab7e26895c2400b5494e9e8dd550bea04626398c6f5c5d521564c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "264a7ad439a4828a9dc97ecf837155355f99ae0b65975f851b541ad3a0e032f0", "67268b7298c73e581866fbcbd161689b16b81cf262e007ce68e25a28c83ef041" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "fcf97e2fbf0e80d412005aa4a75086a3f004f59d512cb47271798733ab418606";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d7ff4d3a41206c8143635f12876e0ea0875ea5e4a5a249250d0eda33daa211f", "56e89c0beaf910ac934ca12380455600d0fd85b56a7035cb171b3f1c72a15569" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "79d482b60864d6c5cb4fd5db9e7e28ccd9a5948c316c8740fb429c0f37169a02";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b09685f338dceb421778a1458d52bed734c236242da2baa280d6f6b7b86e4f11", "7fe6a34146b422d7aebd1a51b20948d7872a514c4cfd7686dc436b70733d6473" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ecd11081a4d0759c14f7bf46813d52cc6738115321be0a4da78a3356bb71510";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd811f2c0f5e9d4fbb2ef31818c1cd807247bc14fcd1170bef00e2c71dc037b4", "43a15cdf8f3fbdc87e06250c0720d261d2b8d087fa7bf9548f6293f0ce5ae899" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e8dbffed13c9a2093085c079714f11f24eb583d73ba2b416b3169183e7d9b4c2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69d60ae1f39e1da95809d408894707ad2134f4943a1db089bebf815a391f18db", "32b401d98bf894d3b6d59e6eb45573285642e358ad687b7d7bf9600b1987809e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca01552a838124bec68d6bc6086329e06673900eac5c262e5ce79a8521cd1eae";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a658553a0620c95e987b5c3163bcfea68c52065f53c9d553f2a924d8b3ed511f", "79f0dfec4536b65aa5fb31297e96f6b464aa669b9268b3156c43d4612978a577" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "9402aa560702497c8d1ad78c10c653c11000256fb1a0add7c6156a474737180b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc4d3354a6a973dd8088919cc181194e879ed7920db30d0d1278edf74413b7b9", "2450d162b26dcb25fbbd53ea4044189981d737055925bd2e86bfb0374b09f3ca" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5e03ff818a836e3a53a8435219297da1b98cbad0b6e535812f433a096ca11168";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0eb628724fce764c687d874ade7b8e0aa4abf20ee6e3610fac9fe3e72f97ab5a", "00ed09f4843660eb1daf015d397a7c1073d7ae43bda0ba3e117008785abfffa00f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e28ddf709d4aa1bddf2e4bc7c7f2cb516cb642bb3e39c3feaf2fcf16ab9539f4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e7ac5cc7f296912f703f59fe88e49b521da245e12e6eee161ee6b3b1127611a7", "7b3bedd2a773cf58b0629b936dd85dad2d0c39676306ed63e1a9bcd0e08bccc2" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2407b60abf3ee5edaf92ed505a11d0ddce0ea33eca58a031bb2f162c512f4062", "00fb81bff36bf967e834e3d5d468730dcd70440022ab60061a62fac53350fe259f" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "47b2ad96dfc2f23fe5926809f38042b2c801962bd7394cefbf4aacb2554b7b0b", "00df2b937a16a7d96a2a0682cd164428890208597f2cdcc734fda73600b5cf6c59" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69a65b75f31ae7b4930292f90902461befcee5d1606939c28e01b652a7fbc498", "00cf68619e5860128f56cecf53eba2ffe82889a9bb04a5fa4c8b722bc91d55978a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b2037176c84db04a6c773e32f9ed1d6b25ef4c303c6725c6932ec2cc2788bcbb", "009361505e6b771691adb41598f292d6521722404bf183241b195738b77abd6cfe" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1eef95aef71f793afd50bb2604064d63e88bef7404a4d0e206446245ae2e7834", "00c96e86dd040f9794b63712d90e719576b8b92c406ab0f288ad9b327bd124454f" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a9734899c954e5b7adbca8f783428b5fbcbdfd3d2813f8d2f95b31a78ab10756", "7667abf8c02ce4951bc59b2564130c27d7b64cdbc5cad95ca42d5bbb7cd4e793" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1ae51662331a1dbfab0751d30dfab2273a04a239e055a537b16ab595f9612396", "434f21c2bfe6555c9fc4a8e82dab1fa5631881b016e0831d9e1bbf5799fcf32e" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "53c90cdd8b0dadd21c44ad557b327f4dbf57144aaf06597deb3f94125206a6c1", "4603475bd79b30e36340cd09b0b59e6cd46ce90150e9ffe5c8a0172b2c9898e3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "33797539515c51f429967b8e36930d9fdda1edb13aecec9771f7cde5f6f2e74e", "00ba51d0b6456bb902dba1f3ea436f96ad2355da454dc9b32c503c4bc6cfd6d410" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a8f5f1d5bbd2783fa7f37c86879057fb2fcf25383aafb86d03d6bafb41a17b3", "00eaf6da715fe950349fd5736117b08e15e32cf1d2fdc003e510009f1b4ba1e648" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1dbc94e96c056b9d2cb6773bb24b69ed473851badf927a29955aff290ef3675a", "65e587561122aa8226facb95df08308cadf01c8351a1569176d917821113aa7c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "084ab885dbff7f12e6cdadb59d456e500797779425c7518c259c83718289e6e9", "0091c345d3a093e86670605bbc2ff4c69d0ed694fd433ec6b6ba1bf7d56c3e6b51" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3adfa4c620a207096cd18ee8fd2a90e20106cf824a0c63d6dec727a9fe7f50", "009430d26bdd5f71e819d12b70069901461ae083cc809122d4fb86b5c475244e5a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7c98b2d47eb433c0d18e533cfbc8909d66f7b79d5925ccb17eccec9d105c5884", "008d5ca99b350bd7d10ab5ee6fcfe46623fdc03e9f828158f4d4cc08ad1ff83de4" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "b4cfa1996ec1d24cdbc8fa17fcabc3a5d4b2b36cf4b50a7b775ab78785710746";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7c98b2d47eb433c0d18e533cfbc8909d66f7b79d5925ccb17eccec9d105c5884", "72a35663caf4282ff54a1190301b99dc023fc1617d7ea70b2b33f752e007c21b" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "b4cfa1996ec1d24cdbc8fa17fcabc3a5d4b2b36cf4b50a7b775ab78785710746";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7a90e21e7547d73267940033cea05042c50f7c9fa5eaeb471cd6260c685f2e3", "008bb7309d0c3bab249faaf3e44179d6dd5302375c580fd0570a788c6be3680c67" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1550a173373b2d594374f0642cd73de06a045c09c7a4f388c731e8cd8971adfc", "009a3a9843583a86c0e1c62cbde67165f40a926b1028ba38aa3895e188ebbc7066" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "003333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "313447778195daa1791a6530cd0697ae34bf9d8d225984394f72eef350597111", "0996a8fbdd1a70ecd64cb00b595afe1669bfef80d91756a62d84c1d83e0f22ab" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ada634941476ca63c2c5803eec2f33b2d17920f798a5be6275f5a54cd2e7639", "00b1a04bead5c7314c427492db21b9544d81caa8159587e41aa023aa967f31aaa1" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aacce093270fa59ad412b5459a08e490743b97086c781ac3c8d54030b41a3119", "3bece4956172d56befb7011d684e772905e48d2115444a75ac7a325a3f25f4b1" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f62b8d7feeff5a847ab79212269e55e62fa87ebe930821747b57a511a5ea99f0", "439ee057bb27898582a683c3fdb7f95404d41d42f276803751a316eb3aab7ebf" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4baa07ff6e7bb9aa223d1c61932005fe98fe78b787fdab4bd3619bc8833072a2", "00bcacd63802c56af82607953e72a0f5d3c23bd265544e020951824ea485555d33" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0c753ed1ba92f766800fdd0ae1c0d7f8f4cd8305fd803d8bca881397b5937e2d", "00b568509b1faf3cf251de6db9810e8b8caed235da10eeddbed62775c8e5c9460a" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "030fdcae6541f22c5bab254e4f1a285c507d1cefea03bf90cf19daf3cb62df69", "5ff2c94d588f2c2b2b0a12bebc011bcee4fa1b54506ec07d0a29d24a0891193c" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fc621eaf90c23d8f9fa125d2c59b8728ebccb30ca3e3db879a06ca90f20cdc", "00ae58d3f0c6aef0e805be10ea54e23cf6f0397f9addddc2b09088855316b0ef44" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "70f2ce24dc62923bb09cc92d74329bbd0d2e6b0e354c0be2383d24acdccb9e4c", "00d42d1f973466f5e5462a939084a294ebfc7a45629c70ee5def46de9536ea7bf7" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "732b8ac0c30fe44307431235271cb5d6e5f677a19ce3f058b939a7bf19349d3c", "00858cc735af8577468275847cf5ec19972e6c20738276e2708b23c595bfc4433d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "47aff9501825a166782bb58a5b459006eacdbce5e5323addad34ec1b6444cdce", "009199c31502ad4277c73ddd0c807b72634c45762404837d9814a5d4b5a7c3f398" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aed8eeff77644bf83b9222f8f57173fa8217ec7e0763ee7d7171fb6092fba5c0", "6486a86d94f48834ba5adbaf349687f9cee400389642b828e68207b147ca2c46" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f7c54a585a904300d05b53ef3b854e71999a344b89adc0caaa28e254db9bc7c7", "00c161a79f38ff446051303577e40638fb020329940a63c241bb32c2205eb57b7d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "093f3825c0cf820cced816a3a67446c85606a6d529e43857643fccc11e1f705f";
                bn_t sig_s = "769782888c63058630f97a5891c8700e82979e4f233586bfc5042fa73cb70a4e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "e8564e3e515a09f9f35258442b99e162d27e10975fcb7963d3c26319dc093f84";
                sig_s = "c3af01ed0fd0148749ca323364846c862fc6f4beb682b7ead3b2d89b9da8bad4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "1412254f8c1dd2742a00ddee5192e7baa288741026871f3057ad9f983b5ab114";
                sig_s = "bcdf878fa156f37040922698ad6fb6928601ddc26c40448ea660e67c25eda090";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "9e0676048381839bb0a4703a0ae38facfe1e2c61bd25950c896aa975cd6ec869";
                sig_s = "6ea0cedf96f11fff0e746941183492f4d17272c92449afd20e34041a6894ee82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "554482404173a5582884b0d168a32ef8033d7eb780936c390e8eedf720c7f564";
                bn_t sig_s = "0a15413f9ed0d454b92ab901119e7251a4d444ba1421ba639fa57e0d8cf6b313";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0b1d838dd54a462745e2c8d5f32637f26fb16dde20a385e45f8a20a8a1f8370e";
                sig_s = "ae855e0a10ef087075fda0ed84e2bc5786a681172ea9834e53351316df332bbd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "af89e4f2b03e5d1f0352e258ef71493040c17d70c36cfd044128302df2ed5e4a";
                sig_s = "420f04148c3e6f06561bd448362d6c6fa3f9aeeb7e42843b4674e7ddfd0ba901";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6c1581f1485ccc4e657606fa1a38cf227e3870dc9f41e26b84e28483635e321b";
                bn_t sig_s = "1b3e3c22af23e919b30330f8710f6ef3760c0e2237a9a9f5cf30a1d9f5bbd464";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "dc83bf97ca28db0e04104a16fe3de694311a6cd9f230a300504ae71d8ec755b1";
                sig_s = "64a83af0ab3e6037003a1f4240dffd8a342afdee50604ed1afa416fd009e4668";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "575b70b4375684291b95d81e3c820ed9bde9e5b7343036e4951f3c46894a6d9d";
                sig_s = "f10d716efbfeba953701b603fc9ef6ff6e47edef38c9eeef2d55e6486bc4d6e6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "8d4f113189dfd3d3239e331f76d3fca9cef86fcd5dc9b4ab2ca38aeba56c178b";
                bn_t sig_s = "78389c3cf11dcff6d6c7f5efd277d480060691144b568a6f090c8902557bfc61";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "834d10ec2d2d50eeebfecd6328f03fafbb488fc043c362cbc67880ec0ebd04b3";
                sig_s = "94c026feaf6e68759146fe5b6fd52eaa3c3c5552d83719d2cb900615e2a634db";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "6894de495e7bb5566807d475d96a0d414a94f4f02c3ab7c2edc2916deafc1e1f";
                sig_s = "a603642c20fabc07182867fcc6923d35be23ad3f97a5f93c6ec5b9cce8239569";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "e500c086fedd59e090ce7bfb615751ed9abe4c09b839ee8f05320245b9796f3e";
                bn_t sig_s = "807b1d0638c86ef6113fff0d63497800e1b848b5a303a54c748e45ca8f35d7d7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b922c1abe1a8309c0acf90e586c6de8c33e37057673390a97ff098f71680b32b";
                sig_s = "f86d92b051b7923d82555c205e21b54eab869766c716209648c3e6cc2629057d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "823c37e46c74ec8497d89245fde3bf53ddb462c00d840e983dcb1b72bbf8bf27";
                sig_s = "c4552f2425d14f0f0fa988778403d60a58962e7c548715af83b2edabbb24a49f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "577a08a95db6dcda9985109942d3786630f640190f920b95bd4d5d84e0f163ef";
                bn_t sig_s = "d762286e92925973fd38b67ef944a99c0ec5b499b7175cbb4369e053c1fcbb10";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "7ba458cfe952326922c7aa2854bdc673ce3daaf65d464dfb9f700701503056b1";
                sig_s = "0df8821c92d20546fa741fb426bf56728a53182691964225c9b380b56b22ee6d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "5cd60c3b021b4be116f06f1d447f65e458329a8bbae1d9b5977d18cf56184861";
                sig_s = "4c635cd7aa9aebb5716d5ae09e57f8c481a741a029b40f71ec47344ef883e86e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "4b50e1e8cf830e04c17e7472caf60da8150ffa568e2c64498cc972a379e542e5";
                bn_t sig_s = "2e3adaa5afab89cca91693609555f40543578852cde29c21cb037c0c0b78478e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "5aea930c7d8fffcd5c6df2c9430ef76f8b5ed58a8b9c95847288abf8f09a1ac2";
                sig_s = "7ddfef7688a6053ce4eeeeefd6f1a9d71381b7548925f6682aa0a9d05cf5a3a3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "98b092c2d14b5b14a23e9368e0ce1be744dfae9f9a5cdaba51e7872099df96f2";
                sig_s = "90d3e4f87bd7bc94589f8150b6b01045cd8759a00af78b24d7de771887610df5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "9e95f2856a9fff9a172b07817c8c60fe185cd3ce9582678f8cc4b02bc444621a";
                bn_t sig_s = "c54ca51d8117d904f0d3773911cb2792348fae21c2da7dad25f990d122376e4c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "e77df8f9782696344c33de29ebdc9f8d3fcf463d950cdbe256fd4fc2fd44877e";
                sig_s = "87028850c962cf2fb450ffe6b983981e499dc498fbd654fa454c9e07c8cb5ca8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "bd2dd6f5026d2b5ad7ead74bdf52b8cbcabc08facee0a1c8584658a85ed0c5dc";
                sig_s = "3e8543e819bdae47d872e29a85ba38addf3eaeaad8786d79c3fb027f6f1ff4bf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "bd5c0294acc28c15c5d1ebc7274c9ca21a081c8a67da430a34a7fff1a564fabb";
                bn_t sig_s = "7ec103a2385b4ff38b47d306434e9091de24dc9f1a25967ee06f8a0a53ac0181";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "3c7dbfb43dd80379ee2c23ad5472873a22c8a0179ac8f381ad9e0f193231dc1f";
                sig_s = "7cf8e07530ade503b3d43a84b75a2a76fc40763daed4e9734e745c58c9ae72d3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "b38ca4dac6d949be5e5f969860269f0eedff2eb92f45bfc02470300cc96dd526";
                sig_s = "1c7b22992bb13749cc0c5bc25330a17446e40db734203f9035172725fc70f863";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha512_p1363_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha512_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                bn_t sig_s = "5f85a63a5be977ad714cea16b10035f07cadf7513ae8cca86f35b7692aafd69f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c00000";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb20000";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c00500";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb20500";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "2678f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "02a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f98140";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34e32";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "78f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "ff00a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012478f1cf49f6d858ac900a7af177222661ac95e206d32ee63020beee955ca711";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff2478f1d149f6d856ac900a7af1772226e7dea086b8a3f1dc48ad29689c965c6f";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "db870e2fb60927a8536ff5850e88ddd95b3a64cba0446f9ec3990bd467067e40";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "db870e2eb60927a9536ff5850e88ddd918215f79475c0e23b752d6976369a391";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fedb870e30b60927a7536ff5850e88ddd99e536a1df92cd119cfdf41116aa358ef";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "db870e2fb60927a8536ff5850e88ddd95b3a64cba0446f9ec3990bd467067e40";
                sig_s = "a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "01a07a59c3a41688548eb315e94effca0efd1ffe0a13467061783dde1cce167403";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "a07a59c5a41688528eb315e94effca0f835208aec517335790ca4896d5502961";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "ff5f85a63b5be977ac714cea16b10035f0bfc6fca393d12e237b7beca62e4cb14e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "fe5f85a63c5be977ab714cea16b10035f102e001f5ecb98f9e87c221e331e98bfd";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "01a07a59c4a41688538eb315e94effca0f4039035c6c2ed1dc84841359d1b34eb2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2478f1d049f6d857ac900a7af1772226a4c59b345fbb90613c66f42b98f981c0";
                sig_s = "5f85a63b5be977ac714cea16b10035f0bfc6fca393d12e237b7beca62e4cb14e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3932323038"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "3c623e7f7598376825fa8bc09e727c75794cbb4ee8716ae15c31cd1cbe9ca3ee";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439313934313732"_hex;
                sig_r = "3a4f61f7f8c4546e3580f7848411786fee1229a07a6ecf5fb84870869188215d";
                sig_s = "18c5ce44354e2274eadb8fea319f8d6f60944532dbaae86bfd8105f253041bcb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333637363431383737"_hex;
                sig_r = "3fa9975fb2b08b7b6e33f3843099da3f43f1dcfe9b171a60cafd5489ca9c5328";
                sig_s = "985a86825a0cc728f5d9dac2a513b49127a06100f0fc4b8b1f200903e0df9ed2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363731343831303935"_hex;
                sig_r = "4d66e7ee5edd02ab96db25954050079ef8de1d0f02f34d4d75112eaf3f731240";
                sig_s = "6292d1563140013c589be40e599862bdd6bda2103809928928a119b43851a2ce";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323037313732393039"_hex;
                sig_r = "a9228305f7b486f568eb65d44e49ba007e3f14b8f23c689c952e4ced1e6cf91e";
                sig_s = "b73c74d28bd1268002bed784a6b06c40a90ee5938ea6d08f272d027e0f96a72c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323938303334323336"_hex;
                sig_r = "3fa39842bfab6c38afa7963c60beb09484d4579fc75ef09efff44e91bc62ca83";
                sig_s = "5612add1924f0285ace5b158828e2b32ab2b6e7f10ee68dca1cc54591fee1fec";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383736303239363833"_hex;
                sig_r = "06c04b02edfeecd8620f035ea4f449bd924593e86e5288a6f22d1923b0e2e8a9";
                sig_s = "f666718e6fefb515bb9339d29cc0e58cfba89d605ca0066bca87f6a3f08ebcfa";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230323034323936353139"_hex;
                sig_r = "1ddd953c32a5f84109cd4d9ec8c364dd318376ff5d228211a367483077d63880";
                sig_s = "563dba4845de762baf04910618d587e0dd0c97dd1c9785c24ffdf2f8a660abf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343531363639313830"_hex;
                sig_r = "9fe4ec4831ef4945f100d5d35a2e6312411ca5df6c900ca60690f2985d553482";
                sig_s = "c674ad5e1bead2f767c9248e444452a4a8530dd47246cbbc968da865bdf212b6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303933363835393531"_hex;
                sig_r = "e8703d6b16a79fc2ab3653cece29d06f65dd6f2c230cb08ee30c5517407d75db";
                sig_s = "8cfeb87b8e95ddacd638b37d315393c5005f3ab8bba0cc1cd1a050829b775bfb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323139353630323031"_hex;
                sig_r = "def608caf1f277d71403009f209c1d7eef11aaa7920397fbf429b8146181aece";
                sig_s = "f3b8f2aa5b3df9a8b37313ea66ad5b74673f3e8614ff471b1eb6773217511fb0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363832343734333033"_hex;
                sig_r = "4f5d08e8d936ce831d02d6b23fb8fce0e0750101af3ab9c3b28636b95a5e24ad";
                sig_s = "6f034480553bcecac221f8be8288163c55492e2e56a88f4d0341b61436a0a6c0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373336353331373836"_hex;
                sig_r = "bdd822bfe3733d9f4b88764fe091db2e8f8af366e4c44d876bf82e62bd48c7ee";
                sig_s = "7fbf7750c5dc849a2c55dbdd067806f869652a7b3a57baa4733781d3128f02de";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373935393033373932"_hex;
                sig_r = "1c4fc02961b7f4245566b410bf08f447502ea4f75b15690344681efa2edf7b4b";
                sig_s = "7d63eef119dc88bc4a1b2c43ac21cd53892443661f8c3a97d558bf888c29f769";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333939363131303037"_hex;
                sig_r = "6406f2d249ab1264e175476ca3300efd049fcad569dff40b922082b41cc7b7ce";
                sig_s = "461872b803383f785077714a9566c4d652e87b2cad90dd4f4cc84bc55004c530";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303837343931313835"_hex;
                sig_r = "415c924b9ba1902b340058117d90623602d48b8280583fb231dc93823b83a153";
                sig_s = "f18be8cdc2063a26ab030504d3397dc6e9c6b6c56f4e3a59832c0e4643c0263c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323336363738353030"_hex;
                sig_r = "d12e96c7d2f177b7cf6d8a1ede060a2b174dc993d43f5fe60f75604824b64fef";
                sig_s = "0c97d87035fcca0a5f47fe6461bb30cbaf05b37e4211ec3fcd51fc71a12239ca";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343438393937373033"_hex;
                sig_r = "7df72a64c7e982c88f83b3a22802690098147e0e42ef4371ef069910858c0646";
                sig_s = "adbaa7b10c6a3f995ed5f83d7bda4ba626b355f34a72bf92ff788300b70e72d0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373134363332383037"_hex;
                sig_r = "047c4306f8d30e425ae70e0bee9e0b94faa4ef18a9c6d7f2c95de0fe6e2a3237";
                sig_s = "7a4d0d0a596bd9ea3fe9850e9c8c77322594344623c0b46ac2a8c95948aefd98";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323236343837343932"_hex;
                sig_r = "57d603a367e23af39c95dd418c0176da8b211d50b1be82bf5ef621a2640204f7";
                sig_s = "5dc3f285ad015c4d71157bd11e5b8df6a89e4b267393b08b5ad5013bdae544b1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333533343439343739"_hex;
                sig_r = "11df6741021ec8cc567584aea16817c540859c4e5011551c00b097fcfc2337e5";
                sig_s = "668551919d43206ac0571fc5ad3ac0efb489bea599e7bf99fe4c7468d6c2c5e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373837333033383830"_hex;
                sig_r = "7451ffede471bd370406533436fc42a89daa0af4903d087cbc062fe7e54dbf70";
                sig_s = "590895398f22b48ce72cbf7c3d3ee1dd7fb0ee645edb0b1b1de35f370e5bf5ee";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332313935383233"_hex;
                sig_r = "fc4c4d81da6f687a6426263193c1a680b67734a1b180647b8c76407cc4f0a9c6";
                sig_s = "56f775d372c9bee685374085be676c9cf31cf1f978a5e6ccb04e4a0761159cc7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130373339333931393137"_hex;
                sig_r = "feb978ca33c46ffba47eb63bb40de7833e43d5654575b54de1fea3d1de3c8ad5";
                sig_s = "108078ba997bfa064521baf342c97b0c64bd25240c8fd0fd7533ae2d03081b70";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383831303237333135"_hex;
                sig_r = "cc61729698467ba53da199ff481fe7433f194fc96367907e8dc5e1d9f42b1e21";
                sig_s = "83dd9ef156e7c1f9c09b3bf86a4f1c88e5dd20cd74d997858e600797dbe74ad2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36303631363933393037"_hex;
                sig_r = "d47f616303ff0eb813eac32e760ba30ad445e0af7dc57e70756104823f6a895f";
                sig_s = "047f2217b399c46a426b936a124980a6011f0896f51dbe07632828a72d7173f1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38383935323237303934"_hex;
                sig_r = "cff73dfa2bac67ce1340b25c885abb3e7979ef7f840f15d5f19e86640cdd40a3";
                sig_s = "c7d1210802796c4f251049ee08a2c29f5c71064033d17010c65bf2e94499381e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353830323334303934"_hex;
                sig_r = "10acaf9c485ab1220355b95be269f124e12eb252f2224b0fc50785eb2ee3df45";
                sig_s = "32443b557efc6896347fa778e1fcf33cbb769c9a7da896b20d93fea7c2791ea4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393635393931353132"_hex;
                sig_r = "f919da0651abc2bff994a879d2778fa5195d57400e003e8dd6adb3fc7a0cc4cc";
                sig_s = "9b945d06bd119665b278a59bd24fdd2350817d0be87997bee57b70c479d64a2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323838373332313938"_hex;
                sig_r = "cc38e7a018f6d70b2d9b49120cc9b4a169f2f72238821a86b81f553b6225d24e";
                sig_s = "276efd8bf06ccce07c7aae35eaac3bd1c374dcf0cf0588d5e0e4171936688636";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323330383837333139"_hex;
                sig_r = "ff85ad66621991c318b85cef73c576cb2a8d43c568c1aafc85b40ef2a9a6b41c";
                sig_s = "732a79e6837ebf8434fea6e7fefa948f506ae455c1a3eb36a030185a23037d96";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313239303536393337"_hex;
                sig_r = "33f016e51eef9b1136380cb8b84c6b38b107e24c6731bd07cb1c7f4a29f33a83";
                sig_s = "36b177bb8be94c8be67ff3a41fcc4d22b5c9eb377da713eb014ae01c64ca6dd7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373438363536343338"_hex;
                sig_r = "929413ee91f27454d74e91370a10a86fc98ac7305c8ab4ca59752bda3a7bfc37";
                sig_s = "483b47a26a0d7d2e6bd37d351d9ee37c5ec2a4686d884d78b6beb7f6b08c50f9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353833353032363034"_hex;
                sig_r = "578202c7d0abac93ca43dde3cb44414e5601c1eb557604cb9adb4bde0a12633b";
                sig_s = "fb9a7412e307aee95ef4b53540571a21559414e5306794ab5182cfb229dab3e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333237373534323739"_hex;
                sig_r = "46d45ad0bb75b8639d0e91d8450fc31887c211328a5784fc83b4cb7f5b962c1b";
                sig_s = "d6751d13ede2079b7aa1d822bdb32d7f3cf00273a1ff03df90c0ec7c62a47568";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373735353038353834"_hex;
                sig_r = "abe84c941783d5ced284fea56341ecc68d6bdd3196d318fbd074641f8c885bd5";
                sig_s = "bdea3c44d48e01aa40935c1c9723ff733199563440f26b4ecf0b444b0418d9f5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137393832363438333832"_hex;
                sig_r = "05277cdbf491e336fe81be24e393a161a4fb89112c9ffed1ee6649c406713408";
                sig_s = "ab6934332e68e108bb0484d21c457dcf381a620c3a4712fdbfeb658a3fafd60c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333936373737333635"_hex;
                sig_r = "293825737c8c14430ed10dbadd7da337275f9b61d1d26377f778ffaa00c139de";
                sig_s = "cdddec267a8678c96829bf6c1d6f38322e119937cfd2fee01e9dc9525f43ed6b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393938313035383031"_hex;
                sig_r = "2041fdd6111c45dfd29e750e082dcdadc9a584a8a2be46580fb0ba3b3dc65862";
                sig_s = "421824fe987e4172a0f8bbcb7bcd9e1b073b7742ed9f9df98f2a1a37cd374ce3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136363737383237303537"_hex;
                sig_r = "267941db660e046ab14e795669e002b852f7788447c53ebef46a2056978b5574";
                sig_s = "d00183bcaf75bc11e37653f952f6a6537151c3aa0a1b9e4e41b004a29185395b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323036323134333632"_hex;
                sig_r = "5dcd7f6814739d47f80a363b9414e6cbfb5f0846223888510abd5b3903d7ae09";
                sig_s = "43418f138bb3c857c0ad750ca8389ebcf3719cb389634ac54a91de9f18fd7238";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383432343936303435"_hex;
                sig_r = "5e0e8cc0280409a0ce252da02b2424d2de3a52b406c3778932dbc60cb86c3567";
                sig_s = "93d25e929c5b00e950d89585ec6c01b6589ae0ec0af8a79c04df9e5b27b58bc5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323639383937333231"_hex;
                sig_r = "4fcf9c9d9ffbf4e0b98268c087071bffe0673bb8dcb32aa667f8a639c364ea47";
                sig_s = "820db0730bee8227fc831643fcb8e2ef9c0f7059ce42da45cf74828effa8d772";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333837333234363932"_hex;
                sig_r = "c60cd2e08248d58d1639b123633643c63f89aff611f998937ccb08c9113bcdca";
                sig_s = "ac4bb470ce0164616dada7a173364ed3f9d16fd32c686136f904c99266fda17e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313138383837353336"_hex;
                sig_r = "7cfdaf6f22c1c7668d7b6f56f8a7be3fdeeb17a7863539555bbfa899dd70c5f1";
                sig_s = "cee151adc71e68483b95a7857a862ae0c5a6eee478d93d40ccc7d40a31dcbd90";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838363036353435"_hex;
                sig_r = "2270be7ee033a706b59746eab34816be7e15c8784061d5281060707a0abe0a7d";
                sig_s = "56a163341ee95e7e3c04294a57f5f7d24bf3c3c6f13ef2f161077c47bd27665d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343739313135383435"_hex;
                sig_r = "16b5d2bfcaba21167a69f7433d0c476b21ded37d84dc74ca401a3ecddb2752a8";
                sig_s = "62852cf97d89adfb0ebbe6f398ee641bfea8a2271580aac8a3d8326d8c6e0ef9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303736383837333637"_hex;
                sig_r = "d907eefa664115848b90c3d5baa0236f08eafaf81c0d52bb9d0f8acb57490847";
                sig_s = "fd91bc45a76e31cdc58c4bfb3df27f6470d20b19f0fba6a77b6c8846650ed8a6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838353036393637"_hex;
                sig_r = "048337b34f427e8774b3bf7c8ff4b1ae65d132ac8af94829bb2d32944579bb31";
                sig_s = "bd6f8eab82213ccf80764644204bb6bf16c668729cdd31dd8596286c15686e8e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373231333036313331"_hex;
                sig_r = "b2bc46b7c44293557ab7ebeb0264924277193f87a25d94c924df1518ba7c7260";
                sig_s = "abf1f6238ff696aaafaf4f0cbbe152c3d771c5bfc43f36d7e5f5235819d02c1a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323034313031363535"_hex;
                sig_r = "40d4b38a61232e654ffd08b91e18609851f4189f7bf8a425ad59d9cbb1b54c99";
                sig_s = "9e775a7bd0d934c3ed886037f5d3b356f60eda41191690566e99677d7aaf64f3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530363830393530"_hex;
                sig_r = "ac8f64d7df8d9fea005744e3ac4af70aa3a38e5a0f3d069d85806a4f29710339";
                sig_s = "c014e96decfef3857cc174f2c46ad0882bef0c4c8a17ce09441961e4ae8d2df3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373237343630313033"_hex;
                sig_r = "41b3766f41a673a01e2c0cab5ceedbcec8d82530a393f884d72aa4e6685dea0a";
                sig_s = "073a55dca2da577cafb40e12dd20bf8529a13a6acdf9a1c7d4b2048d60876cb3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134353731343631323235"_hex;
                sig_r = "1942755aa8128382cd8e35a4350c22cc45ba5704d99e8a240970df11956ad866";
                sig_s = "f64cf1e0816cf7ac5044f73ba938e142ef3305cb09becb80a0a5b9ad7ba3eb07";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313739353136303930"_hex;
                sig_r = "51aba4ff1c7ddf17e0632ab71684d8de6dc700219ef346cb28ce9dafc3565b3b";
                sig_s = "b6aaebe1af0ad01f07a68bf1cf57f9d6040b43c14b7eb8238542760e32ce3b0c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383932373133303534"_hex;
                sig_r = "91efbfcc731650e9f004c38b71db146c17bf871c82c4e87716f7ff2f7f9e51d0";
                sig_s = "089ea631a7c5f05311c521d21ba798b5174881f0fd8095fb3a77515913efb6e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383936313832323937"_hex;
                sig_r = "4a7e47bd281ea09b9e3a32934c7a969e1f788f978b41585989f4689e804663fb";
                sig_s = "e65f6bd702403cbbed7f8ad0045f331d4a96fbf8c43f71f11615b7d1b9153b7f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38323833333436373332"_hex;
                sig_r = "c795f5da86e10a604d4f94bf7cac381c73edad1461d66929e53aa57ca294e89f";
                sig_s = "bae784ab6c7b58332ee05e7d54169edf55ce45f030e71ae8df63969fb327a10c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333636393734383931"_hex;
                sig_r = "ea68b24843b225f505e01c0e608b20b4d93e8faf6b9cf70cf8f9134a80e7b668";
                sig_s = "a3abc044b4728f80fe414bdc66f032b262356720547bec7729fad94151c6adc7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313939313533323239"_hex;
                sig_r = "bfe7502140c57a24a77edc3d9b3c4bc11d21bdb0b196977b7f2b13ac973ad697";
                sig_s = "947a01da9731849d72b67ef7bc40b012480fd389895aad1f6b1cdbeab3b93b8d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363030333136383232"_hex;
                sig_r = "3434ee1142740a0ab8623b97fc8dc2567eda45dadf6039b45c448819e840cf30";
                sig_s = "3c0fac0487841997202c29f3bf2df540b115b29dc619160d52203d4a1fd4b9f7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383639363531363935"_hex;
                sig_r = "5338500e23ba96a0adc6ef84932e25fbad7435d9f70eb7f476c6912de12e33c8";
                sig_s = "a002f5583ea8c0d7fb17136d0ee0415acf629879ce6b01ac52e3ecd7772a3704";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353833393236333732"_hex;
                sig_r = "4ff2d4e31f4180de6901d2d20341d12387c9c55f4cf003a742f049b84af6fe05";
                sig_s = "0312f38771414555fa5ed2817dcc629a8c7cf69d306300e87bc167278ec3ef37";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133323035303135373235"_hex;
                sig_r = "51d665bad5f2d6306c6bbfe1f27555887670061d4df36ec9f4ce6cdfaf9ea7ac";
                sig_s = "2905e43f6207ee93df35a2e9fb9bc8098c448ae98a14e4ad1ebaea5d56b6e493";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303835333330373931"_hex;
                sig_r = "b804e0235f135aba7b7531b6831f26cc9fb77d3f83854957431be20706b81369";
                sig_s = "9d317fd08e4e0467617db819cde1d7d4d74da489b2bce4db055ea01eccfafcf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383636383133313139"_hex;
                sig_r = "8ab50ef3660ccb6af34c78e795ded6b256ffca5c94f249f3d907fb65235ef680";
                sig_s = "49d5aaeae5a6d0c15b286e428b5e720cf37a822ede445baa143ffae69aba91b8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303832353339343239"_hex;
                sig_r = "571b9c46a47c5cc53a574c196c3fb07f3510c0f4443b9f2fe781252c24d343de";
                sig_s = "68a9aebd50ff165c89b5b9cb6c1754191958f360b4d2851a481a3e1106ee7809";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130303635393536363937"_hex;
                sig_r = "4cb7817b04dc73be60d3711803bc10687a6e3f4ab79c4c1a4e9d63a73174d4eb";
                sig_s = "ce398d2d6602d2af58a64042f830bf774aee18209d6fb5c743b6a6e437826b98";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303234313831363034"_hex;
                sig_r = "684399c6cd6ebb1c5d5efb0d78dce40ebd48d9d944eb6548c9ce68d7fdc82229";
                sig_s = "cf25c8e427fae359bfe60fa02964f4c9b8d6db54612e05c78c341f0a8c52d0b5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373637383532383734"_hex;
                sig_r = "20b7b36d5bc76fa182ca27152a99a956e6a0880000694296e31af98a7312d04b";
                sig_s = "eeeabc5521f9856e920eb7d29ed7e4042f178ff706dff8eeb24b429e3b63402a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353434313939393734"_hex;
                sig_r = "6b65c95e8e121d2e6ee506cfd62cb88e0bfb3589da40876898ef66c43982aca9";
                sig_s = "09642c05ad619b4402fd297eb57e29cca5c2eb6823931ba82de32d7c652ba73e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383433343830333931"_hex;
                sig_r = "67c74cbf5ea4b777bf521ace099f4f094d8f58900e15e67e1b4bd399056629ed";
                sig_s = "3d2884655c49b8b5f64e802a054e7bf09b0fc80ca18ebf927b82e58bb4a00400";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373138383932363239"_hex;
                sig_r = "79a5e40da5cf34c4c39adf7dfc5d454995a250314ebd212b5c8e3f4e6f875feb";
                sig_s = "b268920e403ba17828ff271938a6558a5b2dd000229f8edb4a9d9f9b6ac1b472";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373433323233343433"_hex;
                sig_r = "c8b13006c3a51a322fff9321761b01de134f526be582b22e19693c443fc9fe46";
                sig_s = "34e7f60179c6162ab980fcd58f173b0e6c30b524d35c67921677522dcef843a1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343036303035393336"_hex;
                sig_r = "3513db745489a487c88a6cedf8795b640f8f71578397bdabd6cc586c25bd66ad";
                sig_s = "99a72cd3f0ca6c799149283ca0af37f86b88200d0c905bd3c9f1b859e55b1659";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363134303336393838"_hex;
                sig_r = "3a6386afb08f7ff8140b5a270f764e8706ef2830fb177446f7b4eeb8a25aac64";
                sig_s = "4b70854b38c29245b2b980eba10ea936c68a38c1da5255ce2386db23afc7c06a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303935343235363835"_hex;
                sig_r = "b8fc54a8a6be3c55e99c06f99ccdcce7af5c18a3c5829726a870cc1068458f64";
                sig_s = "cc7237c39c8e6a4a1c8c62f5f88636549c7410798b89684c502c3adfe5fb7ad2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303038303938393833"_hex;
                sig_r = "47b460851e5607f2021626635c565a63f78f558795e1b330d09115970dbbb8ab";
                sig_s = "a6a9f4f213e08d3c736d3e1c44a35140cb107619f265a5b13608ed729fd6d894";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353734313437393237"_hex;
                sig_r = "8cfda4f7a65864ebbea3144863da9b075c07b5b42cb4569643ddfd70dd753b19";
                sig_s = "595784b1ab217874b82b9585521f8090b9f6322884ab7a620464f51cf846c5b7";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383636373731353232"_hex;
                sig_r = "4cd6a45bd7c8bf0edbdf073dbf1f746234cbbca31ec20b526b077c9f480096e7";
                sig_s = "7cf97ae0d33f50b73a5d7adf8aa4eeeb6ff10f89a8794efe1d874e23299c1b3d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363934323830373837"_hex;
                sig_r = "2e233f4df8ffebeaec64842b23cce161c80d303b016eca562429b227ae2b58ec";
                sig_s = "46b6b56adec82f82b54daa6a5fca286740a1704828052072a5f0bc8c7b884242";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39393231363932353638"_hex;
                sig_r = "549f658d4a3f98233a2c93bd5b1a52d64af10815ae60becb4139cac822b579c3";
                sig_s = "27bdddf0dbcf374a2aec8accc47a8ac897f8d1823dda8eb2052590970b39ce2a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131363039343339373938"_hex;
                sig_r = "9fabcc1e5fd965226902f594559e231369e584453974e74f49d7d762e134fb9d";
                sig_s = "293cccc510793bac45ce5da2bb6c9e906437f59435ca206655f74b625df07c7c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313836313632313030"_hex;
                sig_r = "2e5c140fd6f5f823addc8088ffaae967e7f4897274316769561dfb31435825d9";
                sig_s = "eda47327d7cfae1daa344ff5582a467bd18eb9f01caeab9c6da3c0cc89df6713";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323934333437313737"_hex;
                sig_r = "4c11e3b7efbe3908ad2118e54d7d34d6c6eb4570bf7fdb11a7679fe93afa254c";
                sig_s = "712e90f421836e542dac49d10bb39db4a98b2735b6336d8a3c392f3b90e60bbe";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3138353134343535313230"_hex;
                sig_r = "dfb4619303f4ff689563d2275069fac44d63ea3c3b18f4fb1ac805d7df3d12ec";
                sig_s = "68e37b846583901db256329f9cf64f40c416fba50dcb9be333a3e29c76ae32db";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343736303433393330"_hex;
                sig_r = "e70e8e17bd758ff0c48f91cb2c53d293f0f5ae82eb9dfe76ab98f9b064278635";
                sig_s = "21dde32cb0389cad7bdf676d9b9b7d25bb034ad25a55ea71ee7ee26a18359dd2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353637333738373431"_hex;
                sig_r = "421397ecae30617a5a6081ad1badf6ce9d9d4cb2afdabf1f900e7fdb7fb0af5a";
                sig_s = "57ca89dc22801c75fdbefdaeca65c675625f94de7d635062b08ed308df5762cc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373339393334393935"_hex;
                sig_r = "0610c08076909bb722fba105c23eac8f66b4db1d58f66a882fc90d59acdec8e0";
                sig_s = "af59e8d570761cac589d49f11c884007f7ac1eea1a44c6f3fdad1d542187d25e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343738333636313339"_hex;
                sig_r = "59a1181cab0ee8ce94ab2b5ab4f4b13a422e38efe69f634bf947485a5b9ea49c";
                sig_s = "9b3c913d98a4ab15f6a39f1802b8f2d28559aa1f8d03a3a88df00c89dc293a97";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363439303532363032"_hex;
                sig_r = "8cae6c4dfbf901bd66ab82541011fa15c8e90e2c18c01bd881acaa2b63cb587b";
                sig_s = "a86acf943f29cef91d1b66a7de5547df6cdfc45dd7bef816dcb8de9f5a425d2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373633383837343936"_hex;
                sig_r = "8b00c74b86474d782eac9974aea606d8f7ee78c79597e15687021f5991e86acd";
                sig_s = "309dfe3686648eae104e87b3e9b5616a3ad479ca4f0b558ae4f1e5ab3115346a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353739303230303830"_hex;
                sig_r = "433a915504c977809634a36fcf4480e4c8069fc127d201d30dfdb1f423c95fd4";
                sig_s = "bcb1b89aafd50a1766b09741fc6a9a96e744ae9826d839bf85ffb50a91981773";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333434373837383438"_hex;
                sig_r = "4b69abd2b39840a545cdd4a72d384234580e2fd938b7091d0ecdb562780857db";
                sig_s = "fdab9957119e0a4092af82f6cc29f3c8a692671ec86efb0a03c1112a0a1e0467";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3139323636343130393230"_hex;
                sig_r = "dab9d3686c28363ad017b4a2b36d35bf2eb80633613d44deb9501d42a3efbd38";
                sig_s = "1392a562d79f9ab19014e4f7e2f2668259f3720a76c120d4a3c3964e880f7679";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373033393135373035"_hex;
                sig_r = "23f94e47b440ce379b74c9311232b19a64e3e7c9b90da34b0c1c3f3d7af28105";
                sig_s = "e1425903b1479c2ce18b108a6d1ec8b7a4f0f657dedb00de3a3ceea7fdeee9be";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3831353435373730"_hex;
                sig_r = "9d706a8fa85d15bd0c3492c6672dfe529f4073b217b3947b5b2cfd61f87ccb71";
                sig_s = "6aaaaf369f82a0e542f72ded7d7eb90c8314ffa613a0ea81da1c8393dbae2bac";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313935353330333737"_hex;
                sig_r = "ac77918c4085c8a7ce5020b00c315629aee053a445cb4661eb50f6b62a47da29";
                sig_s = "df2aea2b9c11a6ce39d3cd9e1faf4a53057e0b1b2e48a324be9e773203fe9fbb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323637383130393033"_hex;
                sig_r = "9db2dbd2935f147fae7f6a95c8e2307bd8537c3d96eb732ad6d5ebdd89bc754e";
                sig_s = "93a9ab99d2de9d08fe0a61e26c8fe1ebbf88726e4b69d551b57d15f0ae16df5a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131313830373230383135"_hex;
                sig_r = "769f70093939afbd1fa15873decfa803ca523ace8040280ba78cf833497722bc";
                sig_s = "369875aba5e1ced5a4ca8444ec9399a38038b00e153a0ae34d9b3c9781447eea";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333831383639323930"_hex;
                sig_r = "26e5182b9822550ad52f46ad80781d6bef3d110a204db5e58a0746f796982200";
                sig_s = "a9418e76029ced0cf78a571a9e59ad04086e91f70e6813981bb33c1dee891165";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313331323837323737"_hex;
                sig_r = "e7bd6aefcf7b27e1f3fadbe713f9adb3d23398e88200cd2e94989c9d12e92177";
                sig_s = "9583e0de3b76f8d4b1e634a81cbc34af54e2f8599f3684ce48d372760c8204c4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333331393236353338"_hex;
                sig_r = "8638ed7eaa83609a01a6af9c52ec9bfddda90442b1e6031d61cfa22e48b2e1e2";
                sig_s = "20c284d596f71c6c8df732f5a5a2006302301e1a792e2b39663d93a9760762d2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333434393038323336"_hex;
                sig_r = "61d924307a96180b06383608ba91674e15c3ea06ff2534412b93a587dde649c1";
                sig_s = "59b84aa2115b2547edac88088ca6313e9fbe1ca6a361c7e57938f9dde3f4349c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383239383335393239"_hex;
                sig_r = "424fcfc3fd63d128c2eb125e88c7fe5d283b63470a786b82783edbb8a0b7a6d7";
                sig_s = "b11548c2cd7fce9d44e795ca51af0b2f6a5180e9c9be0314007ed9e7f4bbe5e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343435313538303233"_hex;
                sig_r = "a5f747ae6290fa9582c6ce8d5608621d495f061551bc4531bacba586a563b184";
                sig_s = "62faf8f92291e12812835b3f1d43c967bceb885b110bd06e5a68e2d74781ae2b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132363937393837363434"_hex;
                sig_r = "b731dc0d92c2cc7a605d78233f7814699bdf1cab2df297b6844eec4015af8ea0";
                sig_s = "39b1a0cc88eb85bcdc356b3620c51f1298c60aec5306b107e900ffdba049dd6f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333939323432353533"_hex;
                sig_r = "ef73c4fa322da39fb6503bab6b66b64d241056afbcd6908f84b61ccbbe890433";
                sig_s = "f1ef85413e5764aa58a3128ccfcf388324fe5340e5edf8d0135ae76786ce415b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363031393737393737"_hex;
                sig_r = "694cd30e2ad0182579331474b271ee2d48723bc8415dc6513873586ce705b76b";
                sig_s = "c5ac0c0ed5a4017d110cb45d63aa955dc7dc5ce23e7965c5397c3ff46a884636";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130383738373535313435"_hex;
                sig_r = "f38b2236be3024e10b894ffb1cc68d0bb8d4cf0fcd2cfc1779f8883765d3cd96";
                sig_s = "da69cd0b74c25566d60a486edd559fc39d569fb2751445a4798df8a36891802c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303034323532393939"_hex;
                sig_r = "a881732c205a0b4b95669c00756fd91973450109a46f17d5a9d971b5e92b9aa4";
                sig_s = "8acefdca4e06c16b47ccad1c57c05912637e107096ba230c92b97187db79e19e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353635333235323833"_hex;
                sig_r = "04452f554bae819b42effb84ef44a9f1cb7e2d75b4ba9ff9b9cfffaddde3fd1b";
                sig_s = "61a3fbc5e73c350f2e3d85a7452cd231a3f3375fc11f5fe153b185f53b09c1d0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3233383236333432333530"_hex;
                sig_r = "05814f57f58efc7cb490119e584e635e6f0ad1c19fb5dc2edafda075bb55f98e";
                sig_s = "9dd5c6e39009d67d965903ecffe08a851775cc1248cc19c0b77798282131b8f6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343437383437303635"_hex;
                sig_r = "dc1c4a46085e198843b1f01980cd5e4a1ff6f8e8ff7014397f0afd5b247fb0a0";
                sig_s = "38a13dc723ed90b30251d742b14733a03292ff26530a1ebcaf3d10862a6eff82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134323630323035353434"_hex;
                sig_r = "1067667bf525734ca7f2510e36348fd9c2c9bccf032dfd571de6d45abd49361a";
                sig_s = "fa762568d3a19e5a1d8ea65e00202a5b16f9afae56733a01f86e35378c558da4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393933383335323835"_hex;
                sig_r = "e58d69dc56bc1031644847e3e046e2ea845a515d969d07ea1aa53aea5bd92fa1";
                sig_s = "bfe50b80f7c512f5ab521fe7e1a131045fde78d4de826c91573baaba1e35ca97";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323932313533353233"_hex;
                sig_r = "fe79c6b8c14d0f23d426e3d157f1b541f6bb91bf29957ef97c55949c9ba48a35";
                sig_s = "9da112c4a4cf4b1ff490c426f6c8ff122183964a0de56f7336ab382dc9d10285";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343539393031343936"_hex;
                sig_r = "45d4ed7e9edacb5a730944ab0037fba0a136ed9d0d26b2f4d4058554f148fa6f";
                sig_s = "f136f15fd30cfe5e5548b3f4965c16a66a7c12904686abe12da777619212ae8c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333933393731313731"_hex;
                sig_r = "4fb7c1727e40bae272f6143a50001b54b536f90233157896dbf845e263f24863";
                sig_s = "6fea5c924dca17519f6e502ef67efa08d39eb5cc3381266f0216864d2bd00a62";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333930363936343935"_hex;
                sig_r = "779aac665dd988054b04f2e9d483ca79179b3372b58ca00fe43520f44fcb4c32";
                sig_s = "b4eca1182cd51f0abd3ea2268dcda49a807ad4116a583102047498aa863653f5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343436303536323634"_hex;
                sig_r = "db7ac6f65fb1c38d80064fd11861631237a09924b4eeca4e1569fa4b7d80ad24";
                sig_s = "a38d178d37e13e1afa07a9d03da025d594461938a62a6c6744f5c8f7d7b7bb81";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363835303034373530"_hex;
                sig_r = "c90043b4aadf795d870ac223f33acdbd1948c31afff059054dc99528c6503fa6";
                sig_s = "829f67b312bb134f6954a23c611a7f7b5b2a69efced9c48db589ac0b4d3da827";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3232323035333630363139"_hex;
                sig_r = "fa16c0125b6615b90e81f7499804308a90179bf3fcff6a4b2695271c68b23ded";
                sig_s = "0d6cda5ce041dc5a5f319ad9c0de4927d0cf5e89e37b79216194413d42976d54";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323135363635313234"_hex;
                sig_r = "1a4b5bd0f806549f46a3e71bfe412d6d89206017640ded66f3d0b2d9b26bec45";
                sig_s = "aac5f74e3130264e01428570ee82ee47e245d160ed812ae252dedffd82e1ec2c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "f8e272234b51475ec4c6f327562a6e5c9080a96225e88b2e5f72a8eecbd41ab4";
                sig_s = "516b91617fc39e3141b3bc769f6a3b2e468e687f50bdc29e19088af62d203f4b";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b6e08b1bcc89e7fb0b84d7497e310553495be4877eccc4b3d6d79f7c68a05734", "31760fa1bcea4972759174ac1103bc6011985ccee251918d0573fbcb78969116" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "4319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3590c6a10353d669bc94d8e2ff9e14bbeed4a7f45b887255ab7e37b676387bb6", "15fc6f97ce39a3874c2b34cc571889abfa0a706c2cfb0e5a4750cc25690696f8" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "369e96402f2cfd1a37b3acbdecfc562862dbca944a0f12d7aaacb8d325d7650a", "00a723621922be2bdac9186290fdcdda028d94437966507d93f2fc1f5c887fdedb" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "27a0a80ea2e1aa798ea9bcc3aedbf01ab78e49c9ec2ad0e08a0429a0e1db4d0d", "32a8ee7bee9d0a40014e484f34a92bd6f33fe63624ea9579657441ac79666e7f" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009cff61712d4bc5b3638341e6e0a576a8098c9c6d3f198d389c4669f398dc0867", "00f3b9e09f567f3dfd9c4d2c1163e82beadf16c76e8f9d7a64673800ea76fa1e59" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d9117cae81295e82682fa387991e668e1570e0e90100bf4e63964822460561bc", "19f96b1787ed15769929978ba3dd7f68c97adf5c16f671e756cd8f08c49456ca" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cfcbad3524c22b992529f943e3ce0b2d126085501d6e3edd4f1dbf74bdca21e", "00afb259b1ba179cac09e8e43a88c8a09e7339910a7c941932e44b8be56f1fccde" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "05";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fbb51127e1f1b6a38e9fe9a2544614edb8e43ad7cd8c56f14b3235dda3bc1117", "009abd9753a9e647e9340c395fb2b91384d6d33fcb6456214350b6f3fa00f4364c" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "06";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "06";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dc80905500d7d74ed47de5224d8734545f22b776ae086cabfffe6ce58d5ef994", "00dc3067ce7d2cdfa9f4d5ace296b752814acc69c19a932d8b14077927901de3bf" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1b824a11eed94fbcd9b722d06613bbcf7eca00b9136f2652642178f37b1a920e", "00e900de495d9ef56fa6d19f3dd1e0edb23d23835ac8c2d3d13c0227e852e503eb" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2914b30c4c784696ffc3dddcec05f36cb1488bc342b9f529d5387acb9e48cb8d", "3dbd30d0d5d6d6a39108863c2d6a6e8571cd3261fb9eb98ce46125bd8f139136" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2579f546fe2f2aeb5f822feb28f2f8371618d04815455a7e903c10024a17da41", "5528e951147f76bee1314e65a49c6ec70686e62d38fbc23472f96e3d3b33fd1f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b102196bf455ee5aafc6f895504d3c3b6b2d37c35f8669bd0f0b694795fbd992", "00f777b6f829b9628ac35db0ef43f6a89f0a42812614e4c15924d8d47ebe45bae5" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4d056ab2ff57662fd6eebbe23930fef5cd08083e24146190cd01960b1fcd3749", "00fe7ec5847651c857898be0f09efd6e0116a5dbe327f6f3080a65fc966bf64d91" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "361c4a62cd867613138dfe24ccebc4b7df1b55fc7410f4995ee2b6b9ab222058", "4f116c6c84e53d262fd13a5f5de6b57e7a1981de4ecdffdf3323b4e91d80649c" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db9d5c5113f00822a146c9cda2e75cb6634cd0dff54aff6e22875171f57a0dad", "1c424cdd83eb01c02f6f8d36f42c6dc7e39db74358da8ac9bc9dc5890d46f667" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0099f19f07b33e03caf4703e04b930d57d6d9baa44460c596a2d3064e0b63ea412", "0086a74c4612a812ee348d2b43f80de627c11c75d81511e22a199c32119b792c6a" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "313f3309b236484c6eb4ea381e007854467a617343a2e97d845801c01a632cfe", "33f231854bba89a8ca3f802a2764d3bf6c3233c811a31e5e8028a0b862cb1977" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d3aa01fe59bad92cffe3db59e1385391fafd7af4e4ce462e8aac157274cc8a05", "00c7a7e603e18538aac15f89610beacc21e39898e6c5f7680a81c5bd7bd744a989" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e31eccd4704ebf7a4247ea57f9351abadff63679f2276e2a3b05009ebc1b8df", "648465a925010db823b2a5f3a6072343a6cc9961a9c482399d0d82051c2e3232" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ce0a47f881fd7315a733c4317848fa33c72e38de0b8fda36b61aa9a164f5808a", "0085b05d25115ea4097ddf63f878c8e83657e66de136a8f9e62ed81a58bf117ff9" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cd6f487b47f36c0dea8f4b04c4e6ac637c76b725929c611f48addcf3d2f65941", "00b50ea8f3a491190ee0b20cfb6efd113608e7c7c127577500e7f5c4a4e490fd60" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "456e5f8067d68a1b0a2e8fe2b28acad5755687154a0f167734ebabbdc059070d", "720dbe96659a66ef0cf27a73e7b3f3f145a60e0ad29f1e21dcc2bb42f0d82c1e" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "42bf0c0ac1e3850baf5515748a878e34249f71035e20a9f54ed468ec273cb0fc", "5b3138500230055c71f12d53f5c7d0e3d8aa54a94c668cb311e20d195fc71abb" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "6bfd55a8f8fdb68472e52873ef39ac3eace6d53df576f0ad2da4607bb52c0d46";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ffdd48da63d3af67223f16c51eb7e95600eb0b0e8b964f4fcd8c534face3c2c2", "00b4e009ab2a76829480e69c9e43b2f1fe076cfafb3fa8d27dd4d6bab4d6c3db54" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "654937791db0686f712ff9b453eeadb0026c9b058bba49199ca3e8fac03c094f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "793cbfce6f335dcfede7c6898ea1c537d7661ed6a8c9d308d64a2560d21c6e2c", "483d23a5ff05da00eaf9d52cf5362be9b53b95316c6a32e9ebe68d9ac35c2fd6" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "c51bbee23a95437abe5c978f8fe596a31c858ac8d55be9786aa5d36a5ac74e97";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a9f7023f559d4bb6c9f4bc3643e2824aff5451d929479ec3ea5eb30bad2c36ac", "6a7c77e8dd21f4ad49b103e67da9d3cda62b653dd194fad2ba8d1dd37bb0ea9b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ba4c3da7154ba564ab344ae12005aa482b6c1639ea191f8568afb6e47163c45";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00df79ee082b2fc77e9ce4633471f569bbcb5ce53856e3067774f37e8a64a2c7ff", "00aa488a6c34d499df76f427de3609bfcfd9feae67ffe0b0de594463c453b0ab16" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "4c3dafcf4ba55bf1344ae12005aa4a74f46eaa85f5023131cc637ae2ea90ab26";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4cc3bf65e32e00284adfca00f40df755415c485091ac0489ae9a337103a5f8f0", "123ab86dd433b933b4f2063c002144df3cfeba78dad0ed89c0377541532908c2" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "987b5f9e974ab7e26895c2400b5494e9e8dd550bea04626398c6f5c5d521564c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "264a7ad439a4828a9dc97ecf837155355f99ae0b65975f851b541ad3a0e032f0", "67268b7298c73e581866fbcbd161689b16b81cf262e007ce68e25a28c83ef041" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "fcf97e2fbf0e80d412005aa4a75086a3f004f59d512cb47271798733ab418606";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d7ff4d3a41206c8143635f12876e0ea0875ea5e4a5a249250d0eda33daa211f", "56e89c0beaf910ac934ca12380455600d0fd85b56a7035cb171b3f1c72a15569" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "79d482b60864d6c5cb4fd5db9e7e28ccd9a5948c316c8740fb429c0f37169a02";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b09685f338dceb421778a1458d52bed734c236242da2baa280d6f6b7b86e4f11", "7fe6a34146b422d7aebd1a51b20948d7872a514c4cfd7686dc436b70733d6473" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ecd11081a4d0759c14f7bf46813d52cc6738115321be0a4da78a3356bb71510";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd811f2c0f5e9d4fbb2ef31818c1cd807247bc14fcd1170bef00e2c71dc037b4", "43a15cdf8f3fbdc87e06250c0720d261d2b8d087fa7bf9548f6293f0ce5ae899" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e8dbffed13c9a2093085c079714f11f24eb583d73ba2b416b3169183e7d9b4c2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69d60ae1f39e1da95809d408894707ad2134f4943a1db089bebf815a391f18db", "32b401d98bf894d3b6d59e6eb45573285642e358ad687b7d7bf9600b1987809e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca01552a838124bec68d6bc6086329e06673900eac5c262e5ce79a8521cd1eae";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a658553a0620c95e987b5c3163bcfea68c52065f53c9d553f2a924d8b3ed511f", "79f0dfec4536b65aa5fb31297e96f6b464aa669b9268b3156c43d4612978a577" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "9402aa560702497c8d1ad78c10c653c11000256fb1a0add7c6156a474737180b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc4d3354a6a973dd8088919cc181194e879ed7920db30d0d1278edf74413b7b9", "2450d162b26dcb25fbbd53ea4044189981d737055925bd2e86bfb0374b09f3ca" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5e03ff818a836e3a53a8435219297da1b98cbad0b6e535812f433a096ca11168";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0eb628724fce764c687d874ade7b8e0aa4abf20ee6e3610fac9fe3e72f97ab5a", "00ed09f4843660eb1daf015d397a7c1073d7ae43bda0ba3e117008785abfffa00f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e28ddf709d4aa1bddf2e4bc7c7f2cb516cb642bb3e39c3feaf2fcf16ab9539f4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e7ac5cc7f296912f703f59fe88e49b521da245e12e6eee161ee6b3b1127611a7", "7b3bedd2a773cf58b0629b936dd85dad2d0c39676306ed63e1a9bcd0e08bccc2" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2407b60abf3ee5edaf92ed505a11d0ddce0ea33eca58a031bb2f162c512f4062", "00fb81bff36bf967e834e3d5d468730dcd70440022ab60061a62fac53350fe259f" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "47b2ad96dfc2f23fe5926809f38042b2c801962bd7394cefbf4aacb2554b7b0b", "00df2b937a16a7d96a2a0682cd164428890208597f2cdcc734fda73600b5cf6c59" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69a65b75f31ae7b4930292f90902461befcee5d1606939c28e01b652a7fbc498", "00cf68619e5860128f56cecf53eba2ffe82889a9bb04a5fa4c8b722bc91d55978a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b2037176c84db04a6c773e32f9ed1d6b25ef4c303c6725c6932ec2cc2788bcbb", "009361505e6b771691adb41598f292d6521722404bf183241b195738b77abd6cfe" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1eef95aef71f793afd50bb2604064d63e88bef7404a4d0e206446245ae2e7834", "00c96e86dd040f9794b63712d90e719576b8b92c406ab0f288ad9b327bd124454f" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a9734899c954e5b7adbca8f783428b5fbcbdfd3d2813f8d2f95b31a78ab10756", "7667abf8c02ce4951bc59b2564130c27d7b64cdbc5cad95ca42d5bbb7cd4e793" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1ae51662331a1dbfab0751d30dfab2273a04a239e055a537b16ab595f9612396", "434f21c2bfe6555c9fc4a8e82dab1fa5631881b016e0831d9e1bbf5799fcf32e" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "53c90cdd8b0dadd21c44ad557b327f4dbf57144aaf06597deb3f94125206a6c1", "4603475bd79b30e36340cd09b0b59e6cd46ce90150e9ffe5c8a0172b2c9898e3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "33797539515c51f429967b8e36930d9fdda1edb13aecec9771f7cde5f6f2e74e", "00ba51d0b6456bb902dba1f3ea436f96ad2355da454dc9b32c503c4bc6cfd6d410" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a8f5f1d5bbd2783fa7f37c86879057fb2fcf25383aafb86d03d6bafb41a17b3", "00eaf6da715fe950349fd5736117b08e15e32cf1d2fdc003e510009f1b4ba1e648" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1dbc94e96c056b9d2cb6773bb24b69ed473851badf927a29955aff290ef3675a", "65e587561122aa8226facb95df08308cadf01c8351a1569176d917821113aa7c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "084ab885dbff7f12e6cdadb59d456e500797779425c7518c259c83718289e6e9", "0091c345d3a093e86670605bbc2ff4c69d0ed694fd433ec6b6ba1bf7d56c3e6b51" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3adfa4c620a207096cd18ee8fd2a90e20106cf824a0c63d6dec727a9fe7f50", "009430d26bdd5f71e819d12b70069901461ae083cc809122d4fb86b5c475244e5a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7c98b2d47eb433c0d18e533cfbc8909d66f7b79d5925ccb17eccec9d105c5884", "008d5ca99b350bd7d10ab5ee6fcfe46623fdc03e9f828158f4d4cc08ad1ff83de4" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "b4cfa1996ec1d24cdbc8fa17fcabc3a5d4b2b36cf4b50a7b775ab78785710746";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7c98b2d47eb433c0d18e533cfbc8909d66f7b79d5925ccb17eccec9d105c5884", "72a35663caf4282ff54a1190301b99dc023fc1617d7ea70b2b33f752e007c21b" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "b4cfa1996ec1d24cdbc8fa17fcabc3a5d4b2b36cf4b50a7b775ab78785710746";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7a90e21e7547d73267940033cea05042c50f7c9fa5eaeb471cd6260c685f2e3", "008bb7309d0c3bab249faaf3e44179d6dd5302375c580fd0570a788c6be3680c67" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1550a173373b2d594374f0642cd73de06a045c09c7a4f388c731e8cd8971adfc", "009a3a9843583a86c0e1c62cbde67165f40a926b1028ba38aa3895e188ebbc7066" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "313447778195daa1791a6530cd0697ae34bf9d8d225984394f72eef350597111", "0996a8fbdd1a70ecd64cb00b595afe1669bfef80d91756a62d84c1d83e0f22ab" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ada634941476ca63c2c5803eec2f33b2d17920f798a5be6275f5a54cd2e7639", "00b1a04bead5c7314c427492db21b9544d81caa8159587e41aa023aa967f31aaa1" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aacce093270fa59ad412b5459a08e490743b97086c781ac3c8d54030b41a3119", "3bece4956172d56befb7011d684e772905e48d2115444a75ac7a325a3f25f4b1" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f62b8d7feeff5a847ab79212269e55e62fa87ebe930821747b57a511a5ea99f0", "439ee057bb27898582a683c3fdb7f95404d41d42f276803751a316eb3aab7ebf" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4baa07ff6e7bb9aa223d1c61932005fe98fe78b787fdab4bd3619bc8833072a2", "00bcacd63802c56af82607953e72a0f5d3c23bd265544e020951824ea485555d33" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0c753ed1ba92f766800fdd0ae1c0d7f8f4cd8305fd803d8bca881397b5937e2d", "00b568509b1faf3cf251de6db9810e8b8caed235da10eeddbed62775c8e5c9460a" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "030fdcae6541f22c5bab254e4f1a285c507d1cefea03bf90cf19daf3cb62df69", "5ff2c94d588f2c2b2b0a12bebc011bcee4fa1b54506ec07d0a29d24a0891193c" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fc621eaf90c23d8f9fa125d2c59b8728ebccb30ca3e3db879a06ca90f20cdc", "00ae58d3f0c6aef0e805be10ea54e23cf6f0397f9addddc2b09088855316b0ef44" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "70f2ce24dc62923bb09cc92d74329bbd0d2e6b0e354c0be2383d24acdccb9e4c", "00d42d1f973466f5e5462a939084a294ebfc7a45629c70ee5def46de9536ea7bf7" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "732b8ac0c30fe44307431235271cb5d6e5f677a19ce3f058b939a7bf19349d3c", "00858cc735af8577468275847cf5ec19972e6c20738276e2708b23c595bfc4433d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "47aff9501825a166782bb58a5b459006eacdbce5e5323addad34ec1b6444cdce", "009199c31502ad4277c73ddd0c807b72634c45762404837d9814a5d4b5a7c3f398" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aed8eeff77644bf83b9222f8f57173fa8217ec7e0763ee7d7171fb6092fba5c0", "6486a86d94f48834ba5adbaf349687f9cee400389642b828e68207b147ca2c46" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f7c54a585a904300d05b53ef3b854e71999a344b89adc0caaa28e254db9bc7c7", "00c161a79f38ff446051303577e40638fb020329940a63c241bb32c2205eb57b7d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff031506dc74a75086a43252fb43731975a16dca6b025e867412d94222d0";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "093f3825c0cf820cced816a3a67446c85606a6d529e43857643fccc11e1f705f";
                bn_t sig_s = "769782888c63058630f97a5891c8700e82979e4f233586bfc5042fa73cb70a4e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "e8564e3e515a09f9f35258442b99e162d27e10975fcb7963d3c26319dc093f84";
                sig_s = "c3af01ed0fd0148749ca323364846c862fc6f4beb682b7ead3b2d89b9da8bad4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "1412254f8c1dd2742a00ddee5192e7baa288741026871f3057ad9f983b5ab114";
                sig_s = "bcdf878fa156f37040922698ad6fb6928601ddc26c40448ea660e67c25eda090";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "9e0676048381839bb0a4703a0ae38facfe1e2c61bd25950c896aa975cd6ec869";
                sig_s = "6ea0cedf96f11fff0e746941183492f4d17272c92449afd20e34041a6894ee82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "554482404173a5582884b0d168a32ef8033d7eb780936c390e8eedf720c7f564";
                bn_t sig_s = "0a15413f9ed0d454b92ab901119e7251a4d444ba1421ba639fa57e0d8cf6b313";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0b1d838dd54a462745e2c8d5f32637f26fb16dde20a385e45f8a20a8a1f8370e";
                sig_s = "ae855e0a10ef087075fda0ed84e2bc5786a681172ea9834e53351316df332bbd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "af89e4f2b03e5d1f0352e258ef71493040c17d70c36cfd044128302df2ed5e4a";
                sig_s = "420f04148c3e6f06561bd448362d6c6fa3f9aeeb7e42843b4674e7ddfd0ba901";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6c1581f1485ccc4e657606fa1a38cf227e3870dc9f41e26b84e28483635e321b";
                bn_t sig_s = "1b3e3c22af23e919b30330f8710f6ef3760c0e2237a9a9f5cf30a1d9f5bbd464";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "dc83bf97ca28db0e04104a16fe3de694311a6cd9f230a300504ae71d8ec755b1";
                sig_s = "64a83af0ab3e6037003a1f4240dffd8a342afdee50604ed1afa416fd009e4668";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "575b70b4375684291b95d81e3c820ed9bde9e5b7343036e4951f3c46894a6d9d";
                sig_s = "f10d716efbfeba953701b603fc9ef6ff6e47edef38c9eeef2d55e6486bc4d6e6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "8d4f113189dfd3d3239e331f76d3fca9cef86fcd5dc9b4ab2ca38aeba56c178b";
                bn_t sig_s = "78389c3cf11dcff6d6c7f5efd277d480060691144b568a6f090c8902557bfc61";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "834d10ec2d2d50eeebfecd6328f03fafbb488fc043c362cbc67880ec0ebd04b3";
                sig_s = "94c026feaf6e68759146fe5b6fd52eaa3c3c5552d83719d2cb900615e2a634db";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "6894de495e7bb5566807d475d96a0d414a94f4f02c3ab7c2edc2916deafc1e1f";
                sig_s = "a603642c20fabc07182867fcc6923d35be23ad3f97a5f93c6ec5b9cce8239569";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "e500c086fedd59e090ce7bfb615751ed9abe4c09b839ee8f05320245b9796f3e";
                bn_t sig_s = "807b1d0638c86ef6113fff0d63497800e1b848b5a303a54c748e45ca8f35d7d7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b922c1abe1a8309c0acf90e586c6de8c33e37057673390a97ff098f71680b32b";
                sig_s = "f86d92b051b7923d82555c205e21b54eab869766c716209648c3e6cc2629057d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "823c37e46c74ec8497d89245fde3bf53ddb462c00d840e983dcb1b72bbf8bf27";
                sig_s = "c4552f2425d14f0f0fa988778403d60a58962e7c548715af83b2edabbb24a49f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "577a08a95db6dcda9985109942d3786630f640190f920b95bd4d5d84e0f163ef";
                bn_t sig_s = "d762286e92925973fd38b67ef944a99c0ec5b499b7175cbb4369e053c1fcbb10";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "7ba458cfe952326922c7aa2854bdc673ce3daaf65d464dfb9f700701503056b1";
                sig_s = "0df8821c92d20546fa741fb426bf56728a53182691964225c9b380b56b22ee6d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "5cd60c3b021b4be116f06f1d447f65e458329a8bbae1d9b5977d18cf56184861";
                sig_s = "4c635cd7aa9aebb5716d5ae09e57f8c481a741a029b40f71ec47344ef883e86e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "4b50e1e8cf830e04c17e7472caf60da8150ffa568e2c64498cc972a379e542e5";
                bn_t sig_s = "2e3adaa5afab89cca91693609555f40543578852cde29c21cb037c0c0b78478e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "5aea930c7d8fffcd5c6df2c9430ef76f8b5ed58a8b9c95847288abf8f09a1ac2";
                sig_s = "7ddfef7688a6053ce4eeeeefd6f1a9d71381b7548925f6682aa0a9d05cf5a3a3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "98b092c2d14b5b14a23e9368e0ce1be744dfae9f9a5cdaba51e7872099df96f2";
                sig_s = "90d3e4f87bd7bc94589f8150b6b01045cd8759a00af78b24d7de771887610df5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "9e95f2856a9fff9a172b07817c8c60fe185cd3ce9582678f8cc4b02bc444621a";
                bn_t sig_s = "c54ca51d8117d904f0d3773911cb2792348fae21c2da7dad25f990d122376e4c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "e77df8f9782696344c33de29ebdc9f8d3fcf463d950cdbe256fd4fc2fd44877e";
                sig_s = "87028850c962cf2fb450ffe6b983981e499dc498fbd654fa454c9e07c8cb5ca8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "bd2dd6f5026d2b5ad7ead74bdf52b8cbcabc08facee0a1c8584658a85ed0c5dc";
                sig_s = "3e8543e819bdae47d872e29a85ba38addf3eaeaad8786d79c3fb027f6f1ff4bf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "bd5c0294acc28c15c5d1ebc7274c9ca21a081c8a67da430a34a7fff1a564fabb";
                bn_t sig_s = "7ec103a2385b4ff38b47d306434e9091de24dc9f1a25967ee06f8a0a53ac0181";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "3c7dbfb43dd80379ee2c23ad5472873a22c8a0179ac8f381ad9e0f193231dc1f";
                sig_s = "7cf8e07530ade503b3d43a84b75a2a76fc40763daed4e9734e745c58c9ae72d3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "b38ca4dac6d949be5e5f969860269f0eedff2eb92f45bfc02470300cc96dd526";
                sig_s = "1c7b22992bb13749cc0c5bc25330a17446e40db734203f9035172725fc70f863";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha512_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha3_256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha3_256_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                bn_t sig_s = "9364745a6a2d69f2283698fdfbee7b13de20bc93deb0230a9af3bd9fddf04401";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of r misses leading 0
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e0000";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e1500000";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e0500";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e1500500";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "028ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6e9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c3ee";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e1d0";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c3";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e1";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff008ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "ff6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "018ab9effc67388040d19b92d2e9fdea124fec6626e540f2b02edc15b83a73e8bf";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effe6738803ed19b92d2e9fdea12d61e70cb9711b5a64768803241ad9e1d";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff7546100298c77fc02e646d2d160215ed6cfa9486c1d6abd4c4ddb50ac1ef3c92";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7546100198c77fc12e646d2d160215ed29e18f3468ee4a59b8977fcdbe5261e3";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe7546100398c77fbf2e646d2d160215edb01399d91abf0d4fd123ea47c58c1741";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "018ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7546100298c77fc02e646d2d160215ed6cfa9486c1d6abd4c4ddb50ac1ef3c92";
                sig_s = "6c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "016c9b8ba395d2960fd7c96702041184eb9bad38c76f7f19ff4c7fd7e61ad606a1";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "ff6c9b8ba595d2960dd7c96702041184ec21df436c214fdcf5650c4260220fbbff";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "9364745b6a2d69f1283698fdfbee7b142139c1e637988485a739f2dce18d1eb0";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "fe9364745c6a2d69f0283698fdfbee7b146452c7389080e600b3802819e529f95f";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "016c9b8ba495d2960ed7c96702041184ebdec63e19c8677b7a58c60d231e72e150";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "8ab9effd6738803fd19b92d2e9fdea1293056b793e29542b3b224af53e10c36e";
                sig_s = "9364745b6a2d69f1283698fdfbee7b142139c1e637988485a739f2dce18d1eb0";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "313733323231"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "404a1a6da158ae1473fce08d338b8d6410a6a5903358b23fdd3a54fee2c2742b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313930393433323838"_hex;
                sig_r = "a9edb87925684bcc5b92d0f7455123656e3498a0d182be63e2e6077c2b43bc6e";
                sig_s = "2c729ea1b01d14ee8fe702096cddd9394e351d801411ec8eac6b758475ea0070";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383433343734313535"_hex;
                sig_r = "3fba20ca893dcaf04e89141337a96abc7e24e026a8ff4c86d950de1c31b64272";
                sig_s = "6be2eced4ce388ff8026dfd3b658144f30931b7083ee2af06e75158c15b12249";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353732363936383239"_hex;
                sig_r = "c5aa31116f6006c479586ff7070014a35f22166701be8a5f1f1e9a43cb27dca0";
                sig_s = "68d1cee35ba3893b9cc3b5df5ac6afef55ebdb7ad9236b1fa8e438a538f8cb55";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353931383333343239"_hex;
                sig_r = "5b5b4d890504f56c16a4ac7947ac0057cdf640d2c39bac09fedc648bb0a16f1d";
                sig_s = "f9c12e73a56d799e2827538187f0ed0ec331f6f0c089a4f6249d04c1b0c5cc8d";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3832353330383232353839"_hex;
                sig_r = "4338e710478e8b922e50dc947f6fa0cd1903106cf02ee0742da69e8b624c5b67";
                sig_s = "90c73bd0fcd07a4dd4a3664d559bd4795ac950d89463680852d33915de1a5745";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133373334383238313432"_hex;
                sig_r = "0fc97d7744e0b2762e6b48730d44c758ab238136a72693ff27339aaebefad581";
                sig_s = "ab68ec80cf4afcca0f7d75f3c4b00e34ed4fe9101c98ed4d8c2f97eb865b1683";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313733383135363430"_hex;
                sig_r = "825f0b4230e30182b24b65151ec83d0aadc63ecfe0a91b5879ccf7fcce9eb40a";
                sig_s = "47f0211ad5471d055fe07c75f37f3fad8aeeff1ee11a54a17bab35212c46d5d6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353533343636353034"_hex;
                sig_r = "3fedd83579431889710b67b6454d43ea7eddaaa9da950424e2c4ac730065a822";
                sig_s = "b50cef5a9da8323fccd5bf13260dea6517c8ae6ccd6495f9ed7494cfd5891573";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313833303339313937"_hex;
                sig_r = "69ba62b020a36333f7a0716577dd57d280132c540f66b9e2fe8d470121e0f135";
                sig_s = "66c7811587cb9247ec6d8c223b4c6d5533948fbabf072973d74cb19d3b2c91a6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353236313736353435"_hex;
                sig_r = "8bb763097d8ca8e9cb84e111f361f47de93499f50bc85401ea96a61d54fad7a8";
                sig_s = "2587b81e277283d5c139b8e9a5f4aa0bb0b1c2b28963efddbf73a0eef341659a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353031353339393836"_hex;
                sig_r = "8260a1eb8ba8b52db95b0722887920a1f9989dfa1efd420d1f8f9ab3df0cffce";
                sig_s = "6752c5687e6889e008eb9ad6e41933796b4adcd6018420fdef250998f6adf603";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134393533313634363139"_hex;
                sig_r = "b809c133b30c3a8ff11ea9024b131664b51c2768afb8536744e041015da93806";
                sig_s = "6cd015a49e19b260da6cd32a94806fb8bdceec5dc5542a7b2b938cce75137f30";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303633383532393036"_hex;
                sig_r = "2069244f8e72562406d631f647a141831aca5907fbff09932797d8305ad3c19d";
                sig_s = "dfb7a3ae1a4bdf76987d7de404c5d8b7c51a6ae8dbece9de345a4b71cb5e1f38";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383339373634393932"_hex;
                sig_r = "4d82e457954761001da6c5dd0fb45d3b8aae12a270cdc5b97d66f810e3065326";
                sig_s = "0cc6217e3aee3839fd809b207d47dea412991932adb2de18ee86431452c22595";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313239323634343639"_hex;
                sig_r = "a81c6258489e10bb1132a6f81f76c31d7465869708d89eb018c51bf774e8a093";
                sig_s = "304d75b7bebe9abda5daafc419a765ffb8e5c02dd91836c40c430f052d5ca59c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34383332303432363833"_hex;
                sig_r = "e8da776984d6af2b8d523d1bd6fab8b25409e669d172ef51e104648c1bf0dad1";
                sig_s = "49b4170fed1cc59ab000087a2c091b3f69a66c8562ed350472e982bd31a0d09e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333635323231383136"_hex;
                sig_r = "c53d293775c5cfdb879b67ff4f4792942132c35c9dc7f8fda8b3a00967c75b47";
                sig_s = "c36045151f70a5d6af2fd27cf1f13cb308b2e847151fa4b47e22f2df6220ae95";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3234393137313236393635"_hex;
                sig_r = "300ee6fa4de853ac6680302a9c439b82dfd046c314d7bbacb2e01274e61e9b54";
                sig_s = "0bb2b62f11b789848648fab7e0c46ca7b09cded01887ef6bda9f871bc5cc609f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363232373930373738"_hex;
                sig_r = "ac58a18fa5973efb06adba842affbd256a1c624606b146dae5a6ef85992cb428";
                sig_s = "48b4ecb8697e4cd20e0f30721ad94f4c18943879ce5d99d8c000d90465138bd0";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313031323537373238393237"_hex;
                sig_r = "6ebc2857fd53656b857005eb8f95c4f6fd3c99f9636a028e5244edc60bc9e18c";
                sig_s = "27719f12eb1de6cade547cb98523bdc7108622240f38d12f415c79cd0b1344d9";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303530383732323032"_hex;
                sig_r = "67e8ca1907624419e3ccd88002dd7757f595abc84bd861cd0198364a4571ff6b";
                sig_s = "0db40b6a7200cdc1a09df432a5a763436ab4130cbdee024dea2a3ddd6c023ed9";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353037373237303332"_hex;
                sig_r = "f4d8208eed5cb4bfe4ef6ddbbc3742e780e4212a39cf79c9f85605ee64a962cb";
                sig_s = "43dee8a3c45a45a91e83a18ff3f881047b4fd6ad3003b3af37fb8211eaf7d584";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373139333435393339"_hex;
                sig_r = "3363ccc93e2413e47528ab086408bc0521be73353f2c2371bbf2d9dc16e63fb3";
                sig_s = "68f3d1074a2e06d33fc19a567a8af0edcae923560cf38da2dab82e2249c8dbbd";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363337333035373633"_hex;
                sig_r = "84960758125ad8de3df0c113ff35f1644e4d43f661c2d81848f3fe4e55846f18";
                sig_s = "5983630fc8975bab570d2c9f3cbbdecb4dd6179ec497aff312d807ec26ca940a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323431323733373133"_hex;
                sig_r = "06ca924b5686a22f2e39c0f980fd58d62bbaf33c3a57f98a315332121e9ba60b";
                sig_s = "6516b98b31048722ca25e0a6c450461823c0a35f37d671439084fbc27c4779a1";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343735363134373337"_hex;
                sig_r = "93c5ef07a7d955056b88cc8240060b4ffb42835a3df353cbe16ccb62eaf3f6";
                sig_s = "364dbea6d5ead4202d6fdc253bb0c2c0522b55823e8bb890235ab09ae9030ea2";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313632333237373334"_hex;
                sig_r = "835274f3157b737975486c73e5bbdd15b61e2ebb9e580911e45fc288214d2e67";
                sig_s = "1d5dcebfc6d3ae3826b9a3211f5e2249acc967eb47dfd41a849241ffe779154f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323232343034313239"_hex;
                sig_r = "3797916fb5c401a691b710050df3eec163383f855f93b61322a56d862ad5572d";
                sig_s = "eb7bff4000738a83dd64082eff710d5eb619427198ac290b291f4599768959ca";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353234353833333638"_hex;
                sig_r = "70992463694c845183db142a77bf5d73c17e9004a8b946b7b8eeb3fdf2b22e00";
                sig_s = "03843ec28e4c4d4f7726a5a5835575bb3e272f612246bc3aff288ac4a4e90c90";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3331363334333936"_hex;
                sig_r = "aeaf228b41a1f311d4df74717f4134ee992e5f2922eec65ec83e2db82a866472";
                sig_s = "f5ef65eb9fc3feaaac04f71a9a5ceb73e8cd6cb75b4595b39b250a50476cb68f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353332353938343339"_hex;
                sig_r = "b84dbbddd3b8a2ddf67d27e4ef886f72d90cbb7ec2d6883728b27842d61505cc";
                sig_s = "32be7f0ff420ae3be212beb4c276d93e2527b0964d643c5807c8ee711e66e8e5";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373338353138353034"_hex;
                sig_r = "f7f6782978f376caf9434941535e1c87ad09b9d39ee936145a0b53b9250fd182";
                sig_s = "fb752930c84c29e49f81a997a4d0f00fcdcb4a2f2bf8049cca5d7cf70b079cea";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343635323636353739"_hex;
                sig_r = "fb4b434112c1302ffd49ebd993cf5ec59729cbe78739db3c470264e378d56e8d";
                sig_s = "3aba99bd10be0fba04ca8d9601ae8f68ca7ffe5814f4cfbde78c1cc07a29fd8f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303334383839343934"_hex;
                sig_r = "eafafe851aad76036013bd571772147b7257fb736ed7b4458e0dcf60a2c7b9c0";
                sig_s = "b59c6409e51043b7e5c86a8d465978a4c8f78e13ef5b184fe5f46f201ff4efa8";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343730383836373835"_hex;
                sig_r = "6c74d1679d871a46a43c3fe375e09d4f1b6413c59b5e070d7984dae0aadbc37e";
                sig_s = "ff1d22228c9e9cf9958d677eed4c3a252b10273ce2d360457faabe7f7439c0e8";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353537363430343436"_hex;
                sig_r = "cae28b592e2d5bf6f9ea541e70bceedd07adde40bc2b5f883d35ae9560fc85c2";
                sig_s = "99eaffc16f570b7837d74177dae6e6cfd873ea89424581bc690d0e49c4218402";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333434393536363038"_hex;
                sig_r = "6ce5133579dd044447206b9f6e1605d27f094b2c4466a5bf8e157873176baf3a";
                sig_s = "bbe35524d9c1936bacecb6c270bf494eac75933caa8dbb2fef30f6572ed8667c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393432383039303331"_hex;
                sig_r = "2855cf6e65812ea246e366ab961970d19387039a93f0bd406365d68b03566613";
                sig_s = "1b3a9593117380899d5c8f8f976ad4dee97db9f1225f735b1d41c2a115be93fb";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323636353831393339"_hex;
                sig_r = "90ed3aa89579b73477e3fcba9f52a5a64b9b6d83b475a3881bc0e63d74f6bf9c";
                sig_s = "04cb5e2ca1d413b37a71607d5b5fa72ccc87a2edcd5c7f30daaa94241b749920";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333332323134313134"_hex;
                sig_r = "055e38188756831ced4b01e0f9d4db6b02293c7ee2c3fd47860d38377ee0f419";
                sig_s = "9c29f1688f16e111914d9c843c0a8f0306c1c4ddd5167cdd54338a4f4ab79a91";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363136353237373135"_hex;
                sig_r = "06b28cd8538d8cc563473cf6c7abb519e4c8bb4c37915ef76512f37de02c2164";
                sig_s = "a62dc2afb01a1a9bc877edd54f25fd1f6d0378b3fbaa219ff9ef28c560cc8065";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333539393535383133"_hex;
                sig_r = "c4b97652702efb1d1b67e966e88789efc0d9eb76d32efbeaf9c1bca36b2ea9a5";
                sig_s = "13e1b2358c7a34fef3ea738ef1a48fab63a2616455c81f8095394a2230c852e3";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323931333631393538"_hex;
                sig_r = "6a86100848566b5f5f89c13643515d81390952b6b5ce56b64fc3349e4edf21df";
                sig_s = "c9ca4ba3a6fd501dae9917283a6851692f57dfbfa49d7a31aa937534df760c87";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363230393033333936"_hex;
                sig_r = "c1ea204ee71a0502fc47de5d89fad98b897b5c308a4030b4a29de9cc39ff1704";
                sig_s = "a5261798ed9665358c31a2368c6705b53b5d7d17023c365ae532573593934481";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333633313032383432"_hex;
                sig_r = "b3c13e4907afa5a629398ff4fb50c48fae69dd3721a6f62ac13b901efcb4717c";
                sig_s = "6cb8a95728751b6274fb57e0e8fc87bd7911b1b94fb92edf09ef30fce410efe7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363237373433343931"_hex;
                sig_r = "9fafebd8841588e56116b2aa354557be814630bae5824e187405f3398f36bc5e";
                sig_s = "f01264feb46aeefe68c967e439986f14aeb85ad99b520db572af8d1349d696a6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383536373938313437"_hex;
                sig_r = "b45703f2c6e95c2f2378913cb78ecf7a01932b66d85e6f687dbb618b056851e8";
                sig_s = "e1333352ea3ad42d7fd9a52a9b6dd1252848a180606d30012e142d135156720b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383831313830363430"_hex;
                sig_r = "4138934da6329335702814333f4df8f907df7aa8e684cc38e2366961828ad937";
                sig_s = "b90b1b0d77fa39c81f3df7a471499ebbe415a372e7c947eae8612646081aeb47";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393537333934363738"_hex;
                sig_r = "a52a6cca52d60aedc270cfd2fb0e0c2dde1ec4bb61434a7f11cd126ad46bec56";
                sig_s = "1dba92bb08e5665da3847abf695dbe18aeae37d9fdcd3617fab0c648f48d8ce6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353432373131393834"_hex;
                sig_r = "b153363d48a58d339a7e53bfedddb63ea63484569bda2630d61c129a45d352e1";
                sig_s = "592dc8769b4834fae70f2cf3eea157ea9684c56d4875d296313cdf12e4939df8";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530303334333235"_hex;
                sig_r = "3516e0c8c97110170a5121b5408043f33c6efbef0e5556165812713be6422ae8";
                sig_s = "5d80c5dffa87d3856083bf67beb27e90ebdc2e54d84760c1588f6432ca733195";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393939383231333931"_hex;
                sig_r = "903d8397244bfc99f2a677507db419597fef6f0cbfd49e0c022709c06c93e358";
                sig_s = "f1705f4a19ab86893e0e022bca9081022764bd986c1c891eb80202ec46f50870";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393731323039323631"_hex;
                sig_r = "3ba4d01ac8cbfc4abf848253d060a4e3faede188fd01c21657c20b61d1943f43";
                sig_s = "ca3b5365ffbb98a5539cbe3e71b3d9fc59b5f1d5bee1122870e153ded9e1ce67";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353731383338383537"_hex;
                sig_r = "741b76d33821c8cac2361048f10d28060f43e2c30b42b3f1b64a432f322e705c";
                sig_s = "37331cdebe152ff84bf909183069f278f8b0779042d5486b2d9826b42546952d";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38363832323639383935"_hex;
                sig_r = "d7988135fd211a2cc09a4588f2d91de3a9a9498d5c5c3ef7e78e9bd80906a63f";
                sig_s = "25de3162aefbd6afedf01116b4e69d498eaefbf29599a7e0ab60614d64fb3db7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353438383536303331"_hex;
                sig_r = "14580cf3aae5ebbb74fed09ff193f347f69ac5b38435eeb7c38a0fd95f5b7ad8";
                sig_s = "fcd923fdbdcecb3ece3bd0069c81396b4acf6328648fbe5324ae0c5a276fd87c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393935373031333139"_hex;
                sig_r = "130821bb00d0f4416ef06761aa283d35383cc2d46ad6be76c96d839adce2dbb6";
                sig_s = "d9deef38e7d0f136cc535f1f8931f271cbf0b0d9e4e20fc8db7a1fb3c616bb68";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343536363831373835"_hex;
                sig_r = "ab4991cad903fc45f6afe22b939640736aec9788b9d8f94109343649d6327695";
                sig_s = "ab126decd1743caf4b461a9c8029cf1230a54a0180e5225a79c075167c2911bc";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313835333731323336"_hex;
                sig_r = "dc3b756b20b906f02dc03b46bbef56708be649bb4b23a41ac4333cd79d72749d";
                sig_s = "309dfe0623034d6441332aebb327bf5b0fb2f3d6df5a6c02d836fc908e37b0e0";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373237383439303034"_hex;
                sig_r = "d733b4391a4876d30acdb95977e4fdfded201e698e42be54c5c690b4c83c9036";
                sig_s = "f55565475dc58e468b4aaee60eda224770c5b30517944c065758cd5155ae1251";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353632383139333138"_hex;
                sig_r = "aa9ea086e301728e0cac7568bf64095b9f51d070edb46679a9983500245e3468";
                sig_s = "3aeb2415f10625c3a4e818da7ddecea27f56f0a393920f6a5d2f4f3054e2131f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3231383739393238333836"_hex;
                sig_r = "d5a6ffddece918c5fe4e7d3a11344612bfb0cd2735ce071dfade01244c3b303c";
                sig_s = "0ff4ee3a70b9984e49277b3b15252c9f255b9ed51c7a4473cf55a7955083a985";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "58e71ffbfd2eabf4e4a465f68100f3d23d4702537dfcca5ee89d18a75ad7f756", "16535d3b19f050e443bf5dc38f7f7cda9df3798d4a2f65a413a9af5df002828c" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "4319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a78dad1701d0551089d3a0ee329a22a9d8bf4263c8a50e0668d24306cf0240b", "03950b34bb638c683c167a00ac06232c2ef1718d3ed7ebcfc145a41031b04ee0" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e5b027e1f5daf6e52eca80e35be28651bf849ff3de70d2a34c0d782b5aaad685", "3c8e2cff9b02c90bf4d7d49c7ff2a261d26aed7d4022b41392c85a857d434579" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "24c5462bb7d1f1763ce28b3a9f851d86d7cb4c5f7c61ed9ed7d397f1a920ffc9", "009460936b6919f88646844b27503555262ef8a81e6704f43e07deda12aa06f4ae" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6226bb83d3cef01ae27b7d04a905397682d5e4a5964b5160dba8a055a2e2aeca", "7a3630d49d999d0e85e59fe762c9c567cb767ca2a0a7a7756ac917e6085b18e1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "65af8c23310fe060a09e7366d82ea35f48f8e2c682eab3783de7d9711f5923be", "00bebabfaf084741fc806b9698ef87c9459246b7846fa17400094ad0bb222c2cb6" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f26ea876edab91b4070c5ec6e36663fff86f1fe5ef73938b227766b1805773cd", "07059506a5296d5766d4c55c06eebccf81c04e52cb14c3b198a18808d570d417" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "05";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7811e16675799076c4f5ea78e5f833be4649925165672057443c436cf4017e0d", "008e377d53fecdf1556b1cdfdd8270d920cf7c6d32c946af2db4c864faec6b1eba" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "06";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "06";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03c840f0fcdfbe9cba931726d54a1f9553732be832d8ab701aebade4524b736d", "00942379f10b74b70ec5a06d31c7b65eca6f77a047e25736aace32cf46edf9e90b" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4b2475ae911ab3e3334bd5acefce2225e35ad7f4523df52c13f581b87898cca1", "0095575d5296d1bd97efaa74a12cc0df3d556a614f176c25b06348af8d304ea6c7" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "211cc26f1f60998bccfc6ae65cfe8f1bf2e70fc28b5aaf8e2a297f3f4460662c", "3ffc8dbd9b58a341d5160ff03b7a503649967a9a937edbbfc4bf154aa6e1a0ae" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a7bb520f0cc16284831167d3622b276487a7bbf41bf911d367b484f1bd81a0c", "0c30d573d27d44e68fb9a109ac7faad2c57ae09de30d8203ab409cd3ca63af3a" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d528a48fb391dd490d3f32810570613d16fe2709b82245027705e359549b0e15", "5f4a5ac279d55c9ea6371f56403f816ee723632911df9804f01c7fa289eb2361" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d1f035f0a28c0c49e6248ff373874da5b26b47e7cd89c1b3bd15402dc9bd7b62", "7a182a1884f30222976579d766da681a7f31fe55b14e770dd0f3f1c09654b29c" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "07df495050dcb1738f4e2aac5ba2c8a1f8e09d262a3b001865af3fba086d7aa1", "00b596cde482a6bfdc5e49e4069fce7c2d1145d1e0f7fed63f9e848446fae479ed" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccd70d8730532b28c78c27dbd3043fdde3e96f10ede406582c9cba2618dc03c1", "0095d592c366bd189683fd581dde22fb91176b55d94e48dd81467234777d8c223a" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fc13b37baba182ba13dfc8ca74f5896483378aa9bd6f0aa931877ddc5e77262f", "1bf8b9cfdcbbe0d62eed81e5874310bd51178d1c6d01b6929a345d94190fdf3b" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "20adbb6cb9e09ce8ee4b6bdbc2e8047a0b9dc811eb415a2a258906efbd8a88ce", "00c16b2111b5991d98dc4c935da619b55f784c79f000830d514ffeb6ad3fcf0640" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f033aa211cf11ee61c247567974fb8667c78f13a35bc2e6bead4436c261f144d", "0099b4d07b6ce8008fecf8a4c4af561b972b00e63443a2f20038ee84ed0c238a3c" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bef2538da3d07158791556b2d0297ca9c1b306459c9323ce7d07a21282de1ace", "4e400c8e4eb57751faa0dde6bbebf96faaac9efc80e3de768fb4f5a37f95ead7" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bf2570b58f38183fabca3ca72255bd4651cbb7e8292287809bd8e5c285d24a53", "2f859b7f75c2f5e8d3791a5ccb60fa3888895c63237c9ea65e43f87523e104e5" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "a8ce483a42fb3462047c96ca00d1ab83ca565b2724cca9ac14411dcb8ee7e803";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009ba8f147332270987e5baab2ab0a4ebc9968eb8682c2872266a22b43c2cf55f7", "728d552fc65b5a3c7cee18876f1d8b46ae60153aec3b8a2b2c2527979f4a7d29" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d9e64db2ea560162dad3ec67d6ebaab9e821a81da8d4584f00fb14813c7e96e1", "53e9e96e17eb05228ff3c9cbc5318bbb87e88bec489dec2be7a20adce06cf8bd" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00857c58d9010d1f8386e279cdcc369b32a8960259a3a646f6d89ad5273252f3fc", "65d2384cabf6a2158b1cd1b2e2477d10b1b719125e9226e99ae90a7afaab499e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "1d109296e9ac43dfa92bcdbcaa64c6d3fb858a822b6e519d9fd2e45279d3bf1a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0089d887b0645d2f96b407b080cf6db3685cc9d4454d35a5ac7983bb5ebbfd2e20", "00de4fcd410c3b6e11f5e4cccb19327c181c43c2d216869309f22495d34ee2796f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "027d377d04715e43754629961c6233961b921b3283c33fcb541cc27285092e8d";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "040924291aa7975fd04f8b2e923a1f9121836fdfbf2fea123cc1870f4f6cc0f2", "00c510ee34a325e772d232b576052f96d3ec4a33b086508682fc53099c0cd48e45" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ce1602ee5a6d686c5b8d8a3f44f419aa6064f0d35323341d77a65a4bc9e1989b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3e7ed2fbb89f7b643d4ab44895ff9fb16e8be7a8649e4ac4ee2f59ec8f68fc63", "4ca91cc26043a8242e2969c871d3ca9833148135b27d377198182ceaa7e70fd4" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "328ab273ff681a79a9662dc174ee014ef73d597d32ef42b17f443a33f5e430fe";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e67f559f552772b174d377b239e60750299d379b6bec6fc93adf040269d58c42", "6c397f7984a149f07bf79fbba3b18c925a797cc6678e2eeabec47fb4ac461041" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab27431e81a7976e62dc174ee014f0479c909f17919ec453013b47f1aa221858";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0088b1d30e29fe0edeb93ab469d2698d0fbc2977f77f48293d0e87acc0856a51fc", "3d1b4f23fa3f6ef26f0e94cb7a63907b1923e30d08197115050b9da98a2b5f56" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "564e863e034f2edbc5b82e9dc029e08f7c3a43817c25ea210ebcc52057e10b5f";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "23a6ed2b1064923104d08ee4392b44bb51555a395477dc52546af6c787cc65aa", "0081105b8c72c357d75215b210286df781d6731c4f0b87e9fe7066489653dc35d3" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "31f2cced76db7b4d74ee014f047c96c9f3ba3e21f11248bcf451526ac376c54c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "592d27cd81fbb61ebbdd782eaa1d86d53b59eaef43496677c345adc9896c562e", "355b8ffda4f8683da98653f0d6067bd8134c5c3e22e3dcdee6a5cdbd826f4915" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "668fcfbedd4eed7eb6840c7f6cf1e3dde504afe5732ee0e1bcbeee15b94a2c64";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008c4aa42ef47c4e2d7b60ca2b5a0b3038a9f8e7ee1de77d299286db3cd635b754", "00f65438558a2271c9444b77405a1f97e84036c3146c425006e65be83f97e41191" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "637e57bd4f085f9d3be20506bbc2b8eab268a33871b19da56b1ba0ac25927bd1";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f5618fb978b70f15b8e07a74edfbcea775dcb92055f9431b816cd4cb5d4fd63c", "00bd1759fd35bae79bf5bb0394646b14fbcb1ed2614fdcc9a9f53663e09f8c6a09" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b0a105281711f1755bbfc1a0b6ea67add1085e84b73016989e20a90be3504d22";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "53c143435247e1e2144c4c32cb1c900b8e9cb160976bdcda1b24877ce7266a74", "41a21780d91554d349a4c7c61f799bda9ddc81a66323078245dcb3960417a660" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "f177b6b38b29de112b6a1921aacd9c95bf24356c916075b623d05899bf7945c4";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0093486f6653c2906152eb9d1c2b28e51c085f20ac54016a808f6e3c6b2cdcc02a", "35439b7b9ab9e86df0ca617737b49f28badf8f5636c9bbaa199bdd20063ec7ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e2ef6d681653bc2156d43243559b392bc161702b7ba94ce753e6e670828f6637";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5f2e06f0ec92b6499eb7d249ff0147639253e7abe0e4497226336a5c94caa777", "4eb3c28acf5012ba023971416c600a10fb6d28a23f3a2c1f77fb0686d06cdf80" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "d467241ca17d9a31823e4b650068d5c1c39eaaea65f2241883fd744745a586aa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2af0b9da06d54b1a5ff93800b579cbce295d0b2719da307b028bee3c657424b", "28c4928f185f68312b47de31ad87fac134de90cf114cc85d45a8fefd9a3a2350" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e70b0176ad36b436adc6c51fa27a0cd50ea5f5c07d1d695135b0128763225ef6";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a3c0253d54dc8a2a72a31f815b0bb6c36d852f8db14edf1e1b71cd3a7389a49", "4891bafa1767b85e36f7507fa5eebd3da0024208fcfef28d56cd49a980ba1465" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3dd345114090328ccc0bdeaf8269396593645720b0b326849d1fe81ec956f996", "00ceee0a81d7f65e1205bb1b6963a8e0facfd2a6124701b1a152094d037a216f4e" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fc8207ca84c4af4229139de953da3bdebf694537c15406e172d631e98591f40c", "34a0d957e39e9686914e98ea467972cedec5a5c6bb55bec7916dc71f7a4c6f77" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60bf7beb808286d8abff60c20faed73997395124542e6b7672089d88c14bbed5", "7f4af9606f9be0199e4145698a62ad2545123a49eb14e0c33317f6909e3915b5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2dcd699362d3665b6c9260608b3faf989d45ac15b9da41fb348d5520ecdf4e04", "03e483670aadef4615c7a13fe1bf3bf927b4e47a667660b505ba47affee92ab6" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e6205f87fa837c474a2badac671578de77d6a077cd286aed45403508767114ff", "00c18daaf2463dea80300c1f4d7e25b9f603eefb2e2cbf012f31a819c91cad7cf2" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "357e7687a79243d5e030eb120a3652c2fb95fcb148813f3da95d044bdc31c8d5", "00e3ed90ea73567cb36c0fccd021da4ccccffe40dfe1b603428969788bed4416db" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3d9723a8ea5ebaffacab8bf87b1d63e42da7bdf94e6c2520a0786b7b534dacf3", "3725db2fb27248274ac2e6212f9071495c90ae684d056b57ad18e72bce8f36b0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4bab5b68667090ed13e5658cfe68f1247031aee80a8ccb52ba0505752f7cd3f0", "0085c70129c1715d9610a41bf7a063b81c1bc7ec34bb6a1c95ccd08e09f1476343" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7801780aaab4aaf31b7c94069609a5ecf623a6dd7e97964061c6b3e4103bb84a", "59c111796624cccbba09394bca04af79a31cbd36176d2ec4ceaa700730d57300" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "55b0451d911e9c64516ac9e9da3da1703eaaa46a8b0a7025c8c5ed38b5474713", "00f1fde0cdee830bf169da9ca3d70d56f4607989873fbdcfcbb740e9a42faf860a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2e19ea3a973a4c155814f8a7b641e12477d288f958b74f6031326356f5061fa4", "1acdd1be10c052eaeb9c22d3f04cfec6e91bd23d6d3996eca9cd485e50e85909" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6eafbcb683e05e0bdb2aa0ac0686f60b34ce66761b7ecffccd3da8fe8799d624", "4547b4aeca8a8e56dba45750cd9fc4f0e3f1333dcb855566c29bd14457cf489b" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "50f51ce959e24ac86b1054ea016c57d1da5f4cee008dd800757a817606234f78", "00aa17f3ef6f7a6c51381c63d66697b1b5c196eb1da73d7b73c33f9115d7432d23" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009c8ef36f19815572db154e8f47a8dc5cc807d551a7141fed8a2c15460fe7ee10", "660b936644e1ccad24578811dd45a325214e28a78e99a0ed2df7354fe9bca0ad" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "56be8aaebb8627ef5e37057feb3448f726fb605312992466ee8d9ed7cd43c1b1";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009c8ef36f19815572db154e8f47a8dc5cc807d551a7141fed8a2c15460fe7ee10", "0099f46c98bb1e3353dba877ee22ba5cdadeb1d75971665f12d208cab016435f52" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "56be8aaebb8627ef5e37057feb3448f726fb605312992466ee8d9ed7cd43c1b1";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f2a3ebc44fe94406cd6dc9bfc79a84600ae568cf533131e01505012649e39b8f", "0f886d549f83aa61ecd1eeb77ba7256e984f088c3b9183e84a16e96f93860e4f" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e30751018c302c6916c21e2239baa41f0e69c5acfc371bb3e376ad364ea63802", "659cceeae0cabfee3ed33abacbc490e8716b5fbf11137647b524e4b855d7d659" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ef28340fb027dabc05a2bd3be99c6cc2730ab0c3d8289e6a242f2b76cfccf9a2", "405cd0530183db6640119a20ad9c1c24ec87d4d9d5de42bffab54fd6cb6f9ed6" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01b4e8eb0cf6f321006fc107246c1996f7034f56d82706cd8f14f05da0a7c514", "00f158ad7ff3c6a08b2f057c6c28255f9513811f20ab18f7104df554d591913f78" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0b1cc580bb6f71e4bffb731a1e74f929c04a10ff94ac2312359d3f13213c3b4c", "00870213c2ad3665a3d243dcb55780e21c8601c5f9803f27e31ff22f8ce77e739e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2699736fdb603e90b1d9a04fcd90ed39756ed567214033ddb5ad579213089d2e", "0096acfb0baeec9cfe2df150aa06b01ba58d03162b497c57a0d305adb4c5f7f375" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a3021069e8841f9d69ad4c2992b02dc7a2f5447afa55a4683c6451cdc4e7286", "00ca4123520611085cb10ea80bdb851a0b09dd79703c420606ff658dba94c345" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "535212040d83b1802cd4a9c0b6ceb0a89de68b794ddf979c2ffb9a72e59eea00", "7650166217eb39f4e03fecd48e9e7448032da261caa68d21df639ba68ee667a6" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00884a86a89981e216732916569f9e3f203806359ef9b9ced61ebb82d5f8030045", "079ceef71b8f9e1deb29aeddaf3bcc780dff88f92b705c68f572ec481139b84a" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cdb031f0e0bc432f0b959bc270456f6a500635732c76764010a5ea20f54a71d8", "5cf6ce18411cdcb5056e4280e449c3ad6df90f9ae2dea4abc08280d99749643d" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6309ffd3c559fe1b0967213461d884b58d1cd549dbc297101d9db5a7e3fcf3d3", "0088f5fa86bd31043ca6077cd1da4b283f4179a23e9d680f66a2081ac502732714" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e564ff8412e92f5ee23fd299c92c57eb6ef0cbd17c28721b92625938d0eab1c", "00ff8941068815c9ad2d3b7f05845c41c4acebb92b3dc155aa7a51046948a4eed0" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0083fe782d906023da7ba700d097f8cc9618cb23f1cd89c213b98b8f9ae8fc023d", "00b15de38b856db24d4d6cc79b6d761fbd9ac94dad5f172883ba09278ba86d9955" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d1dddc947aaf9e6930cc46072f2cf2b68eb5e32dcf4ee84ea0647a201b299fbc", "6b382061309943abefa5938e8465e2f6afd051eab974d261797cd483934097a4" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d17c1c5505bc710145ef74984864fe861e64302c16bb4a4bc69b47507b3f0235", "41480e047b19bfe4bb885ec127cf254db1041ae1d5e8fd77e08294d398b62eb0" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "a8ce483a42fb3462047c96ca00d1ab83ca565b2724cca9ac14411dcb8ee7e803";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "a8ce483a42fb3462047c96ca00d1ab83ca565b2724cca9ac14411dcb8ee7e803";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "63f01899b4b0bfe9dc9929fd4526919b981acda781044ee3d2c337bf5fc74830";
                bn_t sig_s = "591381bdf1b1a9b01020b87314a128d06e4833342bf232779f61480739613927";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "10228beaf773caeff22a94602e9eff1923dcc51b277f64b482ea63218c350b0d";
                sig_s = "2104c8343f8970a28c9eb221a63c857ef385e758eaccc5f7d2ae975553a1534b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "e6e1b8c20e9d00f0b6cf1b2c39cacd9c50ee3f990553250f074a4a3eed3afe43";
                sig_s = "52f3be1ae2d2f9b2bfea8e8c22d95af4574581a9f4b09a89f7b6a4ad1c5b2776";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "20f6203e48fc4c66ae8a74ec61d5124772daad058a74b871914d37dfe9d409c1";
                sig_s = "8b68de7a4786e29b3a726ea7fd8ef2a585b5c8dadf11281f2caa228eb3df3f96";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "207db605e42c96035d54352c5bc55cf27d5ded42cb6b42bdaee499ea64784db6";
                bn_t sig_s = "7f83c09192aa04ce038e861699a0f27ca55bf32741dbc95bbf997dee57f538fc";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "67c259a2580089ed52780755c75ea8a26b9057cc1995e4b044c8176cefe3cc7b";
                sig_s = "d48f63d31333054bbd7fab676d207bbdc4dea1cf1b4f71aceb037b8dc7f79555";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "5dc675a2beae6deeb1ef682e922c5fe47156e069acd08073a0f8d9184d6baa6c";
                sig_s = "e33cad4ce48f22ff6e50b47ba5dd44046a78ed7873cfd3a2c8b2d4b49aad2580";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1a3b5c4b4a2fb0c2f9efb028a9efc78993f3151683cedf76214009ea418d3e5d";
                bn_t sig_s = "e82e87332e7bd004cad9b13857939c01467fc1c3e4207efa45ef827985a82435";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "8c44ef660ab8936fe01571168435c1918d005bd24ec76f72cea8f0faeb9f777a";
                sig_s = "d793dcb3a6d47e2451e7d62e1c284ae25bbfaa0820f58adab79c201ba8d34a3e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4227a3dbff7ac5353cd32c8b3456397a7ee7c0e6809615fcee466b1dcde3eb49";
                sig_s = "22ea6ad811b27f944abe70b47f490d255760f8c3562e6f7e2c1da3dbe45eb540";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "36636162db85e8d300ee45c51b9da00a7c2cffd9a6fb200761a647ccbf5d7e8e";
                bn_t sig_s = "9d18374cf1f87a9051e563838e75728d3f2ff7a86c10292851b6ce885c5b0c76";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "a637fc972f3800705b8d5293096382d1c1ae7f670be45011b8bd29059f3049bd";
                sig_s = "9c4abb6bbe06552d5d598b07728ccaed1738eac9fc985fd786fbc0a7347da828";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "76bfc74f3b488b34835aee96ee96067f53da021cff4020a10996d6933a27c032";
                sig_s = "2fd1658fe4e09b2e711b10117f5c37d9c3ea8b6f55cdf1e5a5ddae2c966d7e4e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "8e0c35240e9e5b7bf2ab351afb13ac2655653baeabc247cab2c71cc40da44c00";
                bn_t sig_s = "079cbf8c9ba9b53608b219d6989875d960bdefcde224cf7ac6f8e791adaa4364";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f6ceb6c8f76c337f51f4ec3859eb16caec969fc02a61dec1a70fa4223bdfb254";
                sig_s = "10c0334298a98a6e5c12e9c0cad587dcab43199b43cdf3785bd9c36b30925ccf";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "083000a8e6121939f4b83612727b2091d8abbbdf9c92bf9bdcace8366150ce6f";
                sig_s = "ba693f4e0b96dcbeeaa78c0d744365761151740323c346a54d74b332568d939f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "8a1bd6ef283948184b5a32d31860e97cc0c450931f024c30bb3b261f2552cdc7";
                bn_t sig_s = "b7e50c0513a8ec730d112109e92761a21151e4bec68268e5c79ef804b757deaa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "0c18337b701b6000d3ce3574664c5dc44ead6a1f2ee0c27a728ea0b0f37990b9";
                sig_s = "c31db9b199b3e1709c44a44118d1d7cb75324ee82ada2318744eb89651e6f6c0";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "2133d6fc78b394d4c34e173120b1e48c7fed7b89a03e55cab90b1367155b438a";
                sig_s = "9293e67ff4b981e50c48b0304f7b1e6b530416ee35188302b1dd2f21e5cb479a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3604a98e926b2f9d7585e341a5ecc73a4e811c5c8da82b65790ff8a117a75bda";
                bn_t sig_s = "a0ff07774c9a0d4bf83db294b970f2696cc29a73637aa454d4d3b45eb964bb88";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "6bf7e8f8bc3a5a2e2249c92725cf0dffa9b72ead3cc56d05107a4d587563beb4";
                sig_s = "a05332b5b424d97bfc080fe0353470610931cd538d2e4bcf78c6fc59b481d271";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "97e099c73088fc37052180d0483987e50c155c993cba2e6c93dd9bea5798e2c3";
                sig_s = "4a9ec5f05739efb4ea93790ea22c3fc423d0aeb109cd13fb1b44d87ea52ca71f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3988bce3195aaf7c9b008a9f1663a5e13a8bee7ddba33a1bc5d55aa49fd3903d";
                bn_t sig_s = "c39f614828e2f71a4c66d86d1c3ec7e283f768033cff5ed09e93e3218d9df1c9";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "c3eb2e8f78a31f221d6003b949f8df6c7ec1e0c53803231e12438cb2b1b1d9ba";
                sig_s = "b97cc1fcce1d8ddbb5e1bfa6d5300d7cac155494603c66f7eee8b8e9c9643431";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "89e0c23ccf61e68dc0cb9777f18b18c84b2b02b4360c79eaa40d46ebe7f3d9b1";
                sig_s = "a5d0164e398764e7d12d696750fcb092211c22dfdd3941e59cd73bc48eb91496";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "bbc1bb4ffceb61a0dbe5a12d9638dc9f004e797cf72cdba8d879fdbcd84dec14";
                bn_t sig_s = "65a7c17d9a6892cf5455a1904fdd9b57ce2b41549b9b2ca5d7d182c305e9a202";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "2f093a33c69eeaf847e332b12bd0758be41dcf75d8131878f16e6f121cb3f4f1";
                sig_s = "93c304df074aef8cc2c8cddeaffda67eb2428ea7d3a113d51363e178d8068f71";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "b686774db39201a9462b96842adbeea16ae6003789bb18214dab9e5a758bf6ef";
                sig_s = "ffc6b396293b94c96fcb325fae127608ebfd118a46f715b49b918caafb602a34";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha3_256_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256r1_sha3_512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256r1_sha3_512_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                bn_t sig_s = "1202069b6b5ffadede2fdc290da1badc989ba98a9a491db339bfe478450ef9cc";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of r misses leading 0
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d0000";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b850000";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d0500";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b850500";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "02dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "02edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57efad";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b05";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff00dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "ff00edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01dcbe02d28091fccca712175e1effda760d08c16699295b22355e5e3ae9bb147e";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d48091fccaa712175e1effda76933acc0b4afa1e184deac8b4f0f4c9dc";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff2341fd2c7f6e033458ede8a1e1002589afde39470dee4362be5b6c8812a810d3";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2341fd2b7f6e033558ede8a1e10025896cc533f4b505e1e7b215374b0f0b3624";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe2341fd2d7f6e033358ede8a1e1002589f2f73e9966d6a4ddcaa1a1c51644eb82";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2341fd2c7f6e033458ede8a1e1002589afde39470dee4362be5b6c8812a810d3";
                sig_s = "edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "01edfdf96294a0052321d023d6f25e4522e1324bd0b3e61f56adb3b10db3b750d6";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "edfdf96494a0052121d023d6f25e45236764567565b6e24cc6401b87baf10634";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "ff1202069c6b5ffaddde2fdc290da1badcdbb4aedcf3317f2e460619b548abd47b";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "fe1202069d6b5ffadcde2fdc290da1badd1ecdb42f4c19e0a9524c4ef24c48af2a";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "01edfdf96394a0052221d023d6f25e4523244b51230cce80d1b9f9e64ab7542b85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "dcbe02d38091fccba712175e1effda765021c6b8f211bc9d41a49377ed57ef2d";
                sig_s = "1202069c6b5ffaddde2fdc290da1badcdbb4aedcf3317f2e460619b548abd47b";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3335343130"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "3d4e6c69176bb9e30eec304a30d982cb3f6073a2273f36b67b1b284899b08163";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373239373236343137"_hex;
                sig_r = "f521807c1e329ac6df4df24208d1e7088b4e4de5a82ed37dbfd8d49c7406f91b";
                sig_s = "c44f723038deea858a25d7264d1680b416ffc0d909b94def9fbda02477d69ef4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343331343737363137"_hex;
                sig_r = "219f842783028cab66f419241dee39da459e2d295d0ab1e56b29b38f50a8bd51";
                sig_s = "f6f357077677e2669c1e289f65c6094c68b8e1efbe4c87468327c81d55979bd9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363033343338303333"_hex;
                sig_r = "15768c2623e7093c7dcb468d430007fc7338f1cfd058fe22ab09a451b61ec34c";
                sig_s = "a609689226f073c968fc46336cfd116edb92045f2383d5376ff88272dc444ca2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383239363231343535"_hex;
                sig_r = "bb449ace6f3b900103a09357cda16e3b14e9e99beb3b8f1928f0a66ce30b0ea5";
                sig_s = "6e6b65f9798cd8c32d7068270800da5d98f06d36836ccb7c30551717fae3052f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34333131383231373336"_hex;
                sig_r = "589e10e34c3fea59478a9301bde976cbd56ac15afa2f13f14f310e5e8d6bf1e1";
                sig_s = "adf5198111939bd395bd3820742a68ae97f8595cfc8b7e1892fc360d13142158";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131373730373734313735"_hex;
                sig_r = "ad5a1daab3023a651b58e3a13ebfaefc14fb9c79ad2610be68e49bd3992e5722";
                sig_s = "cfb91fa16a32c8724cef5714e72f2c91b1d50050b4eb272a82327604486cbbb2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353938353135353635"_hex;
                sig_r = "59d0df1176b277e12c097e9e00860dc4ad3bb7f2e4af2282beb13eff9d7b6afc";
                sig_s = "d3da4f61e8adc8449885a52bf73eda66ac1b77ba05a1ab8397e42ecaeaff68cf";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383831313031363138"_hex;
                sig_r = "d274baceefc72a921fc4962cc9487263ec6984f0f82c0b992ae3c80ba685b423";
                sig_s = "24bd9a9f39ed02773e8ba54e3f0f99f4e806a69839b7890099be2978cd55076f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303034373833333332"_hex;
                sig_r = "3411db9e53af62472c8afa3a4ae7d044fdbb78b1e3a8e8fd329bc72e9e1dfb5d";
                sig_s = "8284d93b62242f6274a26a3419719dc0635e0604fa6da5c2dbfbb85541c88566";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39353030323437373837"_hex;
                sig_r = "33b2abf92021a14fd1e5293008c8aff551fd4a0cacaf8ec6e147f40d0f521cb0";
                sig_s = "4d0d3ed085477a4dc7fd86d242905637a71700ffd4c22cf962a67e9ae32b8877";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323039353030303630"_hex;
                sig_r = "717f5185242ac57215d8713f902cf9012f45dba76b8e7e51c67b71e6de10f0d8";
                sig_s = "28a9ad765a6b1248807be126b9eee01e8e2d65d8528cb28f0d45763f507d97f0";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38313933373839323237"_hex;
                sig_r = "4e57dbece14d3d279f1e831777b28401d2990c4ae477eebb997b583e82f29c54";
                sig_s = "3e41fe090c8f14b8af7fd39c2628869258cf05b0e289b6692602c10cdcc8dd83";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363530363033323938"_hex;
                sig_r = "09eb0b2bf6a2491eb35c3a902da3c6c90933dd374dfb1f60f8ef7bd749725755";
                sig_s = "df8a0ee8f757dc599350bb0e2aec515451152ff05bb2e439ba9145fc9a0849fa";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136333833393533353233"_hex;
                sig_r = "1c66a303f7f548ff4c17ce6c6038879cb9d47abbb71ad69a798d0d8a99518dcd";
                sig_s = "485ee205c6fa3ffe5411948dff2351ab9bbbc20ca419d6182da77f5579058749";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303931373638323035"_hex;
                sig_r = "ae1fd2dbad7ebc2b7f19d1789e1f68ce345f40568a576a29dadcf894c51f7a3f";
                sig_s = "69e80f80c76b57e1767484485915980b5e2493e89d8824b7922ea2cbc687d2b3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333634373032383235"_hex;
                sig_r = "67afdc527b0003c8400ade54df5663635f811950cb34ea77435c0ce400365249";
                sig_s = "7afa3d39b8a7e52ce768e466db6da41a354c12ea2f677bf05a24fc689e347323";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393236383638373931"_hex;
                sig_r = "9b1a90f8116d33d674137579528f395ed13ecbc238940a1a9a8504a72568a9d7";
                sig_s = "07f34d9400af004fd657144ce97a13b76d509f7fd4c9245ce54609f749ead3cd";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313738313334383231"_hex;
                sig_r = "263040f9babb63aec7d73fdbce988fb3ca2115ab24bba0c80832e3de34b698b9";
                sig_s = "f7d99b7738aca745b91b65c697a83ac76ce1e61568d9271631d06af1b77ad5d6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373335303130373531"_hex;
                sig_r = "82f676de71ecae7041b8788e0870a57923c71fd21db1f8864e4519ee2f65d888";
                sig_s = "020f12d98b79d45348513696d5b4926856d953e72f267d30e7bcd57ee8147210";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333533393131363839"_hex;
                sig_r = "4e3c9c22a54f1ceb9336b656bf7019c375cb7f9137d692454c6d882927f16795";
                sig_s = "b3bde8f45d5f885948b45402b9e7a722c292e88bfadb5bb2fdadfe8e1b3f5181";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333834353439323034"_hex;
                sig_r = "b20721bd0e8c9ee6eb790cee9d88481d17d568b4c942ba437e607460031c1df5";
                sig_s = "9f13ff6a54e6a0c5041cc3690c8f3b499f05e34f235c8adf8fd455df4a17ce97";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373632313932373839"_hex;
                sig_r = "6b1d46eeacccf7066a0fef27f498a59a9376b2544258510452787bd4a35783b5";
                sig_s = "88328ac07938b5b9cfe62a3841382cfbe9d623480cec2a3fdb73ee36dd4aef8f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383331363534333331"_hex;
                sig_r = "257e760a54637387b443f829f1a5802c7fc92bdf033039acf68e1acea0cbcdbe";
                sig_s = "25087f120467a80cc07efb7bb27ae68d8569a38fe2908282c3c7a310322761c5";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343336383939303330"_hex;
                sig_r = "1869c821e271838453c88c4a867df2301d27662b72d9385bacb6740ab6d6b5c3";
                sig_s = "22ccc9a0493116556d9ffc7582253c581452d717a7e00618dce21f46f5b64fd0";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323034303431323232"_hex;
                sig_r = "94a521fb3bed347b0dcbe55f2e67c0d7abc4aa32ed2e1a6fd1c209de3a25ca25";
                sig_s = "9b7631a6520ed4b14b5b2a8b57a52de31f583b8d1260eb8dc061ad965d0e9eb6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333337313139393735"_hex;
                sig_r = "ee4913a5f83dd3310e91595ef197075600ae17785e1c0b9139cbaea8def1d6d0";
                sig_s = "2818f7847c48a9a38739c71653919104db8920a816000ed21e5179980efb6b6d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363935363230363738"_hex;
                sig_r = "e912b0e5436db2a50817c6424291ffdd41352916e956ccad9068c95125f3a1e9";
                sig_s = "73309aa384c56486b6a4c699fca446e6f67a1133892971be83b4e2dab49afc2a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303933303137373437"_hex;
                sig_r = "eb0b719879b2fd1676b3f6f913e353c2b4dd8201facb067e15da1dae9addcc8c";
                sig_s = "a73b3a703857aa8d12263290366a19d64e0b3efccd0623f53a7370099e9dcece";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313233343137393136"_hex;
                sig_r = "95617b71dc18a99e96a95ab5384324bff797ad704dfb1e2d6b3cc06e76652ced";
                sig_s = "b11bc49444a2e2635d4d9b1bdedeb61593b5f3e0e16ce78da813ff64b728f8d2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373634333530363837"_hex;
                sig_r = "28fbebb0c142c6d200bfb173173c03bc3aa55da6d48c1b784628f2b9f59038f2";
                sig_s = "c0f1427005a46aac00a0af43b8f54a951e673e0480c6bf7a6b5775d4a3de5e60";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343137323431343431"_hex;
                sig_r = "457ff86369e4efd69592b161aea2b09153f37cf69006907a7558998ab34b38a4";
                sig_s = "12692ffc569849dc8e3b9fd2cd7c6f42207bb4c07832d490c9d35a702665ce58";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323638323436343933"_hex;
                sig_r = "ac70036f6058fd1eb40dc6f58dd68ab56e73dc6841eaa45a83813b6aaf75fae2";
                sig_s = "f70f7f0563c46a07d248e80a65f38532d5759f49fc104184fa6718ca55274372";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373234373936373737"_hex;
                sig_r = "59baaba3992dab0b594a2e9fbc4c344cfdabe7868e4e77f47a310d94916d30ce";
                sig_s = "20b16c383085ee74402157d4f2da5f7e3e995dbbf53ee50985d4f7096882edda";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393733333935313139"_hex;
                sig_r = "aa567a710f7010718b1e02792bc63f9049c02f798bb319214c97bc734e54d115";
                sig_s = "ddb7c78b45c4221db6f26e845f8c30be61c29bcf38e38abaf7cbd03e5af914f7";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353037303032373036"_hex;
                sig_r = "6ac18c06081a51ac5fb6d0a0735af510dd0ad529206e7fc0c1b6d0ea36cec4a8";
                sig_s = "64d49524cc26ef8eda21ad5f2c371203d6eef8ddfa5da7a6c37d86f29efc1fca";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373433353638373832"_hex;
                sig_r = "cf59dfd67512e2d173a398cb648805fb41e3099f27a7867aa2dda50dcf2e1f86";
                sig_s = "bd528be771fa1e52cab6d7485c5887befb378ceaf565aca0f32d2831a466959e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393437363731323438"_hex;
                sig_r = "455f1c4406b598fc828ddb3bc77df7ad04baad399fb4975f542b19aeedfd5a11";
                sig_s = "4e0555d9bf4211d3ab173e2e6c7edb990867f8f982f6afc1b4b6732ee96a0af0";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373235343434333234"_hex;
                sig_r = "e1dc7a439633b9bc91d37a954943bc94e5f56a0442a3528fba5c6070cf25e86f";
                sig_s = "0376b7ff7601978a47bbf7d11c6844520a442ceb167aec3a0ddf36e150a385c9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35353334303231323139"_hex;
                sig_r = "aeeeef010cf97f324e6f89f3163656305728a573b885c52ec5973eba863a08da";
                sig_s = "904c25f931e78e2b59fa9a138cb80a5c22341601a18501d364af361d69cd0bb8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132333031383133373933"_hex;
                sig_r = "0e3798e441e787dae4bf84e2748abce913f362d41d59a39d58d89c889e52229f";
                sig_s = "e3a002023296fe6d9395fc92ba31dd35c5ada42e06db01466a24f087ae70cdb4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39313135333137363130"_hex;
                sig_r = "9bfe9e09c40fad40bb442eb045216c20dc1282d3cc4ba77fe2e3db92d312fd80";
                sig_s = "8a152afa2164548b6edfd6610046ee001fdfb06555677c98bc505b6aef297d15";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383934333937393632"_hex;
                sig_r = "1531f9b622d3172f72096b8afc7278eb7bee49b72e1b948e48cc1add8f01e365";
                sig_s = "edc803cdb54bd4c54b87bc69a42df3dd11ab56bb13d8b5b78642ffa9ef88d31d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323333353833303333"_hex;
                sig_r = "7973333617680ff89798c6b64bb42f436be7771887c2d14a98dd3397e6896e0a";
                sig_s = "11b70b23a62fd9ce1b27c1b669c851187c09e9081f0aa6ae011411425f694929";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323131323639323536"_hex;
                sig_r = "4fc40e0b3dd49c4f259c5ee2ff271b703b9b7380455167e11360bf336f72c0c4";
                sig_s = "d219cdbfefa9ced843f947191ff11bfe4880702a4504f34b28481b424f433a38";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303035343833383634"_hex;
                sig_r = "816c369e7b8672cce325dae1ad2f2a5330d177fe0da399c8e520f361ac770389";
                sig_s = "858c9cdf1a2ca40ef9c1e02f883b34701dc1760a9d13ba714c57dd886282acd8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333536373632373235"_hex;
                sig_r = "51adf43cda1a938e1deb5fe08ab28df1e607f25fb2e98913d2579420b63056e6";
                sig_s = "3b8920181a8ab6f9ea0a1814171db3eb4ff3d5fd9cbd2d9c1ec4018a7625562e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333239353030373630"_hex;
                sig_r = "42ce9e0f877b7586e7c0eb2fde6f7c4b1f4cc888f54402f2b7bb99dedc2b7f07";
                sig_s = "f0413e7636cb6605e0d7284c7804d7c9a3cc0924d37fca7d4943d9e0c9817427";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393237303834313635"_hex;
                sig_r = "4b2e5a797d240cd8c80b424a41dc47eaad249fc642e3c5b4bc68328fc1e26fc5";
                sig_s = "117910985597a6f7482bec7632e94676c432684f16f7f3d09a90ff4ed6ad36db";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37333032333538323838"_hex;
                sig_r = "42bf9a164723ef3f5cb59b528966ae648e80291785a4e0067283a7af59795bb7";
                sig_s = "017e1d24962a34d850d94187d269836ad437396a0ff134067b1baedef69b5951";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133343733373337333833"_hex;
                sig_r = "1ec06a62d69fca8d99473b8d5a8af3bbd701891df976e33e2f86c6084fb705f2";
                sig_s = "b679eff436faa53c0a3c437717f574b59135d5dc49fb8524a365296db2d119e6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353031353533363839"_hex;
                sig_r = "183c81ab34a7d7c6742ede4198f5c75ed7fb79e8315899ef0dd26f95e3c4ba26";
                sig_s = "73f0196e459eb980b6e7ac44d868ab632d6421d1788b9f9651fb827b1a8e5dcc";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353335303430303239"_hex;
                sig_r = "f5bec00e6b90ab2a8f188f8163dcdd9b8185a6bbbc623c12d583c9cf55c8e3ba";
                sig_s = "5dba085bd57b5471f8547cff0aca9e51234d85c0847d01a3aa0b3cf3cace82d9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343230333537323930"_hex;
                sig_r = "7c18891499af92cfa1db5538c7afbd44605b17dd0ede573206db85af23d3fe9d";
                sig_s = "28ceff96833996ebababef332b05372209844ddcc4c2134fd9311397e733b10a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393035313735303638"_hex;
                sig_r = "4ed587536ba15e6707014f5ae773a423475e5e37564ffe91aec17722894cff34";
                sig_s = "9ff59fabe5e8dcf9539ea1bf9f4b880f112a26c915c14827dad9de6b251dd65e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363133373734323935"_hex;
                sig_r = "4fb615772d56b6d1ba60f371eb04c557e0c9414c4eec00819c7647d91e7dee01";
                sig_s = "2623c6c4a3bffc596cb5f2f70a5a381942d350df04c35978f6607ddf7d57e4e3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383733363733343931"_hex;
                sig_r = "c53d6697f536b8fb0e79f3b002dc626a02948e206d96de7c62bd7f9736408ace";
                sig_s = "c9423b8575e4afe16cfebefb03e55d628270264fad0eb67c9acf0268e514584c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34333535313036343035"_hex;
                sig_r = "08012cfd3713068d8ba6f3fa453be9da95afa6572a893882075ed5d64d62a417";
                sig_s = "3c5d1bf341823a4cca251cd67d43a6bcd6b5e47303082b7e54c80df5acbbac82";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34353339353735383736"_hex;
                sig_r = "8ad3da767111f41558fdc51723c649a87f58d42bea3431c8fdfa1f1096e3f2dd";
                sig_s = "7d1ea6859a0c932f2298f9d21c89ebea7354bbe508d2b73469dc3efe8613bc87";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383933363633323031"_hex;
                sig_r = "62becf5afb08835f6768882c58a26c501f277ecd61a48d1fe683b6a78c49ce82";
                sig_s = "89d11230de6953a1eeeb6b30774fc6bfd093c1e7c0422a7253428ba17ef969ce";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383036303638303338"_hex;
                sig_r = "22b54382e2f2e6d7cffe3b34fbd567c8b503bfa6b5c3e5b8131e0ffe20747176";
                sig_s = "a6d25ae5cab39cc83116d073cd1eb59d80ce2ed208c1c970b134be2ad29d6068";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332383137343937"_hex;
                sig_r = "e2d9f5c37ddb25978ed4727b63a5e17546292526877e903f11d3d29874e952c8";
                sig_s = "5c28ebafa2c2d285ed7f143d49b6d47daf12ad21c36f78ed7f18cb53d9c29f76";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303734333232353538"_hex;
                sig_r = "3b4c2fb773223c1dafa6d6de9ed2304dc25eea1fd487442a3a64ae8dc8f14927";
                sig_s = "56c21579e85fc9075c7601bd36ef8a3fa57d5bc7550c9a17bb8383e7fdbb366f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363130363735383237"_hex;
                sig_r = "05276f6159e2853fc6884c2939997b5a3be7ae615dad7517d6006208111dd678";
                sig_s = "059ea3474bc6908c565dfb5bc72fd1a84231363cf78c4c317a061dbf1b03cc07";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137343138373339323133"_hex;
                sig_r = "5f856a30a8803a2276e8e5b8475f085d14f6de0c5f64eaf9e9b81c75fa831672";
                sig_s = "a210a74c1c682de5708b9d19e6fd2f74ea047b1352edac7e4784cc008e8b0b5a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313237383432323837"_hex;
                sig_r = "1c058daeb17f995cbaa4b02fc1ccf0a121fb7673d7b9b7bbaa2c9d850f9ba741";
                sig_s = "3e5400acc992698dbe9c41e25547c6ee08c841d6604de457558ee8af11d54446";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303338363930383739"_hex;
                sig_r = "7a6c6eb198bced25223fed630dbd2956c3799a21389e007efc23a0b3968f8aa5";
                sig_s = "4535354e8fb477d0be4a16f44719d94650ed4607eabe206848ba24322406c1d5";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383737303432333937"_hex;
                sig_r = "9d05a43f8dea2c4a3c0838e5987d899e63317a17fa5f609a4baa3764dac9899a";
                sig_s = "d7c1833485f0a6914e5633115330a59b2ade5153b01b2a1af0a815f44d7f0aaa";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333231373038313738"_hex;
                sig_r = "b262a757ffcb496d880739d1937f139d39cde8e7ed29512a3be51ad470dcf5d9";
                sig_s = "eb8dd006680530f27326f1c9c54e5c4300f1bca21bdb17245c485d7b296a2372";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37363637303434323730"_hex;
                sig_r = "480a6875b7bee4ed80f70206400df10264c38be42b07443c6ff19c0aab580444";
                sig_s = "78e3fa1c2fe11208c189a39e717b19a51f5172054891c083931861c7919d4745";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31313034373435303432"_hex;
                sig_r = "f2be8cc615b14c289e50114ae2473b105447ec8c5311ecc3abcedcbeaeea1983";
                sig_s = "56ae20cd659370712e06bd6d5936bcaa06169737a062438c7e599bfff0099fb1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313533383730313534"_hex;
                sig_r = "bed38f88fd52bf1cc4b4cc58bdd8a81af894c5a45bd822acf468eee08a683584";
                sig_s = "1c9f77ab2c821daa896e73b9f6ed4edf72ce62a6c48b5caae6a5ac9edd8d2953";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323631333835303439"_hex;
                sig_r = "8513ed012ea7a10d2239c209e172edb565b1bfd2cdfd80269f79956a4aab5af2";
                sig_s = "a413070c1e974643e5d5fdc56209e1421a254f47fda3312ceda244064efe69ce";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353538373437363632"_hex;
                sig_r = "25bc1c38b291a5f60b7b01eec8a5025c69723b183f9090150a7f0ac87464f2f5";
                sig_s = "c986a03025cbf9bdfa4e9a0988822dae44c48624bc63a203072c9cb1b813102d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343939333634313832"_hex;
                sig_r = "b721214cff1779b8f407f4b1b2b2c5aa4e49a4a517031ff3d24b5af589b28b96";
                sig_s = "e9c53670e94337535dda10a599de0a6da240ea813e8081f9caa6bae59cbd310a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333639323733393835"_hex;
                sig_r = "8695064bbd15d76b698e4bb8c0183bc2634a5c2455d6bd2c3f8323a4268edfe0";
                sig_s = "c706f66507b52d2c8865e3eb5959267307f51fdb0565c2320132f2ca14123452";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343933383339353635"_hex;
                sig_r = "c91aad6b3c086073dafdb7688c6366be9127d9935cbc6e0c14b9f76c9d272c43";
                sig_s = "73c0f75156531aad36d2d14169c2b66797e8dd31d6f66b8ddb83f7522fba2176";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353334333739393337"_hex;
                sig_r = "8125832edd19949328b170b1067eafcc17b3b79f5c139dfb6c109a1107ac76c8";
                sig_s = "fce7f770e2245eeab16c33a230f6dea2ce1da67d11302a8ce7dc6145c30a2bf9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383334383031353938"_hex;
                sig_r = "5e399962385aec963cb80dab6b5f5c341ce15e437142f4275ef9c210385348c1";
                sig_s = "18a8157a0976bb0e349a02134fad0d0286c40a5e43a47b49b5a03653e3ae9e19";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343131303537343836"_hex;
                sig_r = "ada147d5937331d037083c0bcda59adb6125485a9ea78ef6884c1432e93e4093";
                sig_s = "b5ea223b88f45533826a8b24fc91ed80ae3560543102fed1d82360372988dd74";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373836343638363335"_hex;
                sig_r = "ff56b22aca9206d8dba458507804c9f80b94e75d2b61443a1c8d72480d8680b4";
                sig_s = "a866f620640511357b7dd3bc0eddcddcc5a59e9162204c1d85f223ec485cdee2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303534373733373638"_hex;
                sig_r = "cf3555d277eb8f6fa629e8ed875df1440352e53f32f9509ceecf222c4197c5de";
                sig_s = "84829a1286f98c299ec5c2169a14d0cbf4892a97baca8310279d9b4c98fdef47";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393237303137373338"_hex;
                sig_r = "d8dd5094bc40652ddc19d04beeefee8d90fef82628edbc218a9d2de596bb023d";
                sig_s = "5c0a46804e7de7c741e5be55a7ebba092dc10a4d1691e6a04ac1690b54acf950";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303531333235363334"_hex;
                sig_r = "25236b00a0a67e12ea781ae53a929e13c37994ddce784f3c0c33402a43b4a6f0";
                sig_s = "117331e5b39fe2a11f5c8bbfa5bb4fdc3659ac0a0efcd03a94362081a4c0e579";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303139383636363832"_hex;
                sig_r = "0f3564b771337bc8d494a04e4d0518f26d067d07c31689d5e27b503d3652117a";
                sig_s = "17144740db21874aa58c0de6a4cadb16c5d9230d4f4607980aabd161d21045ae";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343530323537333530"_hex;
                sig_r = "bff706d27dc3c8c59951c342244e3c3552216b9225898de130c6a5a8f58eef42";
                sig_s = "0e20cb9bffd20d88fe70e5d1f909051528c55efbadbfd7cdcce67de853f64632";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333236393538353830"_hex;
                sig_r = "ec5c12881dae52168aa635c80dcb0031a43e7d1b76ea97231b819051a861a7ff";
                sig_s = "09149c000d1af12d800225c1ba3587a53e5aabd8a8fe78230b1b4c12ba7df008";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303734363533323431"_hex;
                sig_r = "caeda2ff27eef0c71a30c277dda128692e4850e589d07f84046342ddaef9842a";
                sig_s = "69d422215439150d1da00a0811d2126de5b5c5a85be18fd3c06eb638703e6031";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373134363833343830"_hex;
                sig_r = "3977465917472d3cb67d6fc8888834f26fa47c8d3a2c8e046f70680e3037a37e";
                sig_s = "785adced4f3d400b286ad7eb7bdf0b7c0f46d9e7268db5a34e740166caafd14a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373933333831333230"_hex;
                sig_r = "051b252934f1c65f39652a893e9517f049af42259936832cc3f8ff56d7f3cc54";
                sig_s = "867bc57a96eb9d8dc3afd6db11b527f19e4ad8c031134ae6ec9b2b6ee092549b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34383830363235353636"_hex;
                sig_r = "0162ba940a75c7a12574736d45d60bbb2c6ce7739b04429cc72352adea4666c3";
                sig_s = "4c686aaafb4f3615247ff06b97bd76d49b93f65b5f66c93fc2a8a22246536c24";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3439343337363438383537"_hex;
                sig_r = "f74e65ddb41c6c01564b3344fcaa8db2b7b73f8fd156e500865a04826c5e4ab0";
                sig_s = "6ec0376675b8c3692f397341269667eadc60696d56d8450ced85a65de9d3cfe1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373038363839373836"_hex;
                sig_r = "91f3ccfb87b3667bea8c6bb07d554467fbb9a77685a6523da5cf97dfa710e6b2";
                sig_s = "5559936f9c94c6e4a97c9febbcb2c1a418fbf9f2933dd64def686b3771dc3fa8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303239383732393531"_hex;
                sig_r = "0afdcdcf68669ecc53b019d7adbe8dc943f453b74451335a631a2a3dd5672f83";
                sig_s = "77ea833468953e14bd428663eebce4b3cdef41e9821704fb91d1515d20078e92";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303137313930333835"_hex;
                sig_r = "a197d8f8fa0cccfa7eccfaea7ca4441bda9789cc3e8d22a1d1b14d6deeb2db21";
                sig_s = "88fb12318d60b66b68fe80834172813989c24901e3adbcd4c73860fa9500bc75";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393536333633393339"_hex;
                sig_r = "4b3eeeaf50e9f9bae0bfe64e2776bf2db181ab44c763393136927827f3adb24e";
                sig_s = "317abec131eddf2117e27ea2bb4008e8fd0f4a32aa41f74eec7b1659c091fd9c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333030373634333530"_hex;
                sig_r = "464bdc2db7c5a2745a5d8c96a323eb99c175e0f99baa75dbb9c6d29b98facf3b";
                sig_s = "d9328ca00ce32934b4ed340a6e15236cb16e5364cc91ef5cd6f675e048985bac";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393334363634383434"_hex;
                sig_r = "270250c591cb20c7978d9f457104afa7c3484879cfdcf9dc6ac8e785e1fd20a0";
                sig_s = "09601dc597c123ed7e76bdbe2d146863bddcf357f9217713dfe1afd8f49891b6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3335353435303535393632"_hex;
                sig_r = "729a17311a2fbf9f2325117b2cdac18fd6bbe3db4c5a1bd4e4f4f3d8f3d68dc7";
                sig_s = "48dd0269cb216e2792f3b410a781c9b10e59abdc553aae2a00d4038f44a2849e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333031373232313038"_hex;
                sig_r = "5228f97e5d0dfb62cec6820029175867d7d63b179db3e8a9e7eecd1ec55e0b90";
                sig_s = "dc547d7b7b680b40bcbe0cbf9a2d749787864158af3c0e0f8ef08dfcbbb36f7e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363137363931363932"_hex;
                sig_r = "21f775d3c7f7fe68e84842b30de9fbe4ffbb4f3324b295591e36e4651c14830d";
                sig_s = "afa24a4cd163042da5f767e7088e6fa03efe039a477fc13f6c23270cda91519f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353831393332353334"_hex;
                sig_r = "dabec42e9c44f0c230d36c45956cd4a8250f3665b6f291f700e73d06fe203744";
                sig_s = "23b687c29e03bc69c5491774588e3c519fa1eafae2ff8ede2ffd4a004e233215";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3135373136363738373434"_hex;
                sig_r = "381458d6c40c888bf90aef1428bc968caace553f94287e7adaa48943dc55315d";
                sig_s = "1e0e1f75489a451fc7cc4bca61a0a7330a5b4dc4283df68e21798996d8c69bd4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313939373833333630"_hex;
                sig_r = "e08881dacd7ad6441f80be1d5510b7e29da4c8504d658634f13e5f3cfcf2a16d";
                sig_s = "3792541548f0d891ddf95ee40b815fc3ac160cbfe8cd948e0786db7cc20b38d2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373430343735303832"_hex;
                sig_r = "a3efb0abc9d76e6601cb23d28b0276293eb8d6f2103d0da7b06a0169db1ea6a4";
                sig_s = "c619ab2ba23b20f90bc815d2fd4c345d0381476b164590cd932b40b2263e4054";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343137343336353339"_hex;
                sig_r = "61746df1d5f3d30403f5281767cb6601172b26564e97c35d4c68fb7426db4ffd";
                sig_s = "7ca2b0a4fb0d58a119a8df391ad3f2de47cb3b1a8fdf04d6ec235f639fe44080";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323335363538383839"_hex;
                sig_r = "ce48fc4bedd4dabacc68f71c4f5b58414e9b054b445c4781cf6d9b40d335b4b6";
                sig_s = "1e73b8299579684b80801d2fd70d5c6f9a904ab0735b26d27ff44021002c6107";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343239323535343034"_hex;
                sig_r = "8c936b044cf6dbdbe30cffdeb9eb40b4aa48e697975805dd40455e44fa4d6dfb";
                sig_s = "f03bd82bc73dc7a9d518012f9cab5360d6daa06dd0145765b512263b13c3d851";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3531383033303235343636"_hex;
                sig_r = "4bfaa8c78636efe63915dabaaee914deaaf4a06ae473679160eaeca88d5cc116";
                sig_s = "8bc24546613e4811facecf605d6b1f79b442c3d8fe458c1c69334cbee31ef532";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343736333938323030"_hex;
                sig_r = "130fc664eccece7b71a0a9cadc5369fb5bd54ccc53fd2c515e5ef232acd1b965";
                sig_s = "4372a69ef34ec2b296dbe94c5e8a8881645b9c0f6b6c4270c19b81493eb59421";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39303630303335323132"_hex;
                sig_r = "7b675a89f3165e2ad1f3ac4950898d17e7cd869df4ef58aa54901d51193f91f3";
                sig_s = "3a7ea099d7c2909ff4a5c3c286d9f7739f38b7e44605ea3f515fde117a4519ec";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373536303533303938"_hex;
                sig_r = "393a056a5ce76dc161daf1a6a77afb72cacb809d4173b9126e636a01cf7ccea1";
                sig_s = "0859e4195124e11e40db391a7bf04f3ecd7dffe2a5629aac9374468fe8f1701b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393830383630303338"_hex;
                sig_r = "2d9738a6e36c24a5dcde61ff7fa5ecb1e96e0077a4a183e8953745cb9461e5fa";
                sig_s = "55abb27fad179d132830f7e5dff0d26a63f0141fe2288b9ff7943c3a482ac124";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363231383735333335"_hex;
                sig_r = "460f528bb6f8adb55626c5166c4572a93c3825dd1a695822a81c9e75e37fe8fd";
                sig_s = "0197c8b83193110f0426a417fae7ec3b99fc669371f1e7debbbd3850f6956c14";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363433333334373231"_hex;
                sig_r = "2d13939455192c22b1f18f7ca82ad4265ec2c4dbd124ae4a2b0017984512c9e9";
                sig_s = "3d9e4fac784be61e2decb75a1f6768af21873eb49881849b936036b19187a734";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343534393432373832"_hex;
                sig_r = "8f2523bbd4a2f4d144c0b7f7b5da84ce20d0d4f551cf5e0ad2b0cb06c6a207f0";
                sig_s = "05e46a85f61e1676def59d819220edcdf421db36efbe00bda7f9e331d56e8ce1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230313834343032"_hex;
                sig_r = "4f60878beb2755b35f7152a33e416e16e10f77bca2ad70b09c86eff148ca6fb3";
                sig_s = "bcbc6fa18d8ca570b4a9a5f2a8f6ff9db3e3370ffd3e5a7e19880990f6f8e614";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3538313332313733"_hex;
                sig_r = "9b148c63588ee8f22436a61d52ae8a60c3f35007dde8bb6e31997d99205973b3";
                sig_s = "2015548563168f496c7b115bff541fd71fc926448a4554a15f97c58fdd039015";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31313833383631383131"_hex;
                sig_r = "2b7d769ea682af0be42866cf3ad8865b12d4b37c3708fb2ad0dc5c87eda10154";
                sig_s = "11d8c48ba6c400f7950f9dfd9ea65617b3765db0e79778bb079fbd7db67b68f8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393232363032393036"_hex;
                sig_r = "bfd3ac436e5c4d42f15fbce06d9859ad82d460d322a8c4c1d06ec318fdff4f51";
                sig_s = "335bd5d0619a5290c7fce42aaa97ccd52d80528a09a62a4ce8d1e7cf00db7a26";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393735313433323037"_hex;
                sig_r = "56a5c2c2e803e66c5751fe8fb348822609b167478cad4030e7bf6120fd535bb0";
                sig_s = "7b3fee66768794c0b362f2d40ad64fdf03e0fb0e8a47f2034167aae2ca383c0e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333135313136333833"_hex;
                sig_r = "71bc399e5643a1d8e2afc317e78a2c43d76b6d87f17a5809a7b6d19f922c2e62";
                sig_s = "057e7615a2c9033ef0d1a3d3020977002395e196d3b8206c9afecfb98abd52d8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333236333136383132"_hex;
                sig_r = "8f94bcda036e64783935456289aedcb67232932db1ac2e8ad1ca970b14d47a1a";
                sig_s = "21a71528f9e8fe6067ca74cc0d8b4b48270aad9ade9db44a98c98182a5e8f208";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303239363837313336"_hex;
                sig_r = "277a0c4f34b2749fd58f55a0f373430f3c868bb1f485d477102b3e797cea5560";
                sig_s = "bccbec7dc1e2740751b7cb8968e7d388e136d7647a29c6845bcf3759f44bf389";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333230383831313931"_hex;
                sig_r = "934762967efc8c97655cb73d7168d1abb5889e55243dc67c1c5517d6298ce2c3";
                sig_s = "44c32fb9d2b5e6f9c38226538776538a55eb1bdfbac44e3e1229337415645db6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35323235333930373830"_hex;
                sig_r = "8f052802126f222ba3ade9cfedf59fc479a120ed8e59366b1be4f3039480004e";
                sig_s = "3e14e9209be9dc6d00ed76cddca1c2e5b85f112bffd2779f45f246cb60c319a8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333439333933363934"_hex;
                sig_r = "4456d6792ff7e4d27517113f309177c26ef3bf6482e131d43f9d8b80e954d61e";
                sig_s = "4ffbcc50a7a69dfce92a47410f8574f7b0abfc8b4c7f74ac0dc1c1183d393482";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333937393630373631"_hex;
                sig_r = "c0e27a8ad306f4ed4dd77edcefb61a6d8f1a9f6546a9969e794432fcb576cd49";
                sig_s = "67fdcab3395eebe53dd03b9cadd3eb62d84327de15498b60a60b023fea990436";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "504d070e4cf2596e560c1aadc63c573cee0bf8c4d128292c23b47a294c607703";
                sig_s = "f181213b28b921af292ea2fbcb8af4a0e14e2c5aa603c45dab7a46f05bbd5d85";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fbf9d131ff8a037747ac23246c5b0e0ce09a905432d3d75477af2d2993b1e0a", "4b14e93d4574fc2a553f85eb3c4c0658a1bd7e1cc7f08d47396e76d6d40ed772" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "4319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00920945522a364975ffc27bdddd7f01ec26ef8ac48d466a81fbb1d02fc89133e9", "00ce7d01190e815daf1d18e5932ec8a3d83af59c7f66738b6521a9850d794a4ba3" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e0ce6d55dae257d10a06be4fb7333e68475407a401de84ff86a931ac022a4513", "00802ca56c9a1d2f67e8a45703b174f0562dfb7e6a532eb1743b3ceb49f9bea420" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0c5baefb69764c3a55e9d3ef10a76f652ffa697794ab91169878116d058420e3", "00ccd7b9153694151ee2d05048e40fe072d8e0f481af5d3d0a9e8cf39e1ef7e0bb" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1a4cb39a674bf0bec4be1a5b035ae18634f4b681a330c1f91b42366a0a7c7532", "0b3f8018da54a8d0db30f7c2b3f04dc011a4a1c383221e52187632a565e5795c" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1cd72095fd856cf29fafb81c25f7ff24dee34eeaeacc0025d512091b1f1e822b", "427eb3bbb915209e064bfbe1a1798ff6dac8d0add6d753bff4f128fee7e00f89" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "697cd5856c8c347fdfbca4c2cb2fc1be12f1611f190333b80a5cf4e0f7d48dab", "5d08740936bbc46c90b1da916d5ef39c3d9fb9092f579a43d911472022a7fa90" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "05";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69d31ff52dbc0935508755cd48cf3f30f0ea78fb670048983be0ebacf4de1076", "773c9dce9aa24b783d8688d63547dc987d4650f20c1179e6ae5d4f14f6d55cc1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "06";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "06";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "22554b95fcd18cb7cdf7db4a57b259f3d40f5c7cd5cc907a1d0861b3b835fb2f", "63b92993893f14bf17fb9bdefbcbb9404c1985e7a19699d048483702f7e25547" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2f5c464f48423a87806e88e2e6b4e6f947eea1a5f2c0717897406d97dd3c2865", "61b62e969abf04b840be9587a2a16c0a83ff3bf6812b7257c106a26be2e71d25" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "27527d9ba351f69285cbd9ba144b9e7c6c957d418c8bf63925fb934ab587d385", "216a626307e247c3d5bcf489b52ad4c1987973d7d4cc90fb5b1f488d80134656" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1bfc106d79112f08439a4ffa4e06261bbab3031ff7ed32568172caaeabae2f90", "00b894ecc8922ace776ed6d1526b7771f2cc43b0e84bac400541619e142319059f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "71e13191229197eefe9224be11217878635056fd8e558b74121036043cb75017", "09a09bc004ffc98a4051a3fb9798cb9fd5c17919ecab9ff8459a7d561f3058b2" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "15b8867217bf4d531a5618509d9cddc6a3ff4fcc55cc94df82d9952b42ae564d", "7234d5c43238e591501c1fada39a60057fefb46b588d47cbedb529def080fb83" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e7c1fcc775b8d46770261c413291bc9d913c7785779870eb475f7437da3ee1a0", "16ad8986f7ef63d4237a9c802e5e49471d248e4df64283e77608ee191ec61f3f" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cfac11bd4b7aa0a29309767eddd337d302f1f42ccab215171f9622992a671e4a", "1451102ad100a24e6fb5cb130c69de2a61fa50f2d07a099d73ae96f971593588" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ca99e8cacb96b9b73a7ecf478617269f08971c307aba958692381696c244443b", "5c5df1f740db3016b0ad298997131cea685b2ba405c3b0f722c6992bdaa6fd3a" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3c31be015178a9c3d3cae9103bf25bc11a709316d06ab46c01f884a8eb33da2e", "0091f32a1352712508642c4774ea67049175161cb2bafd5524b813274b140f8e99" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "355d9c3f97a282ac17f7bc98373f271d6a2bc02eb964f13c1e2d7debff4a02fd", "63282e78fb9b88f81413bcf95f16982d9f50e7f94a5d28685b41da997201db5e" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1c959964cabaa5ce966b95acda1c5264847a780426c878d716d73ae6621d3084", "00d3fedfc4f9c3b8cc8bc6539b821ad208ec08d5737aaaf1801d666ddc37e54faf" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009842a82a83932d5a44daab14afb79968dd24d9ffc58e638586a90b0f25b521dd", "38b2c05c8d548bcf5ab2a906e2f3fbdde7f0b9bbdecb852297d55ae34257f8f3" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "cbd25189e59c5c367e7630cbd4c4cb1512c194cadf353d6331f9f57fa81b338e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00987a839ec570964d3a1bfc6a0334e7328c1624677c66b8fef3a5e64d1178ddae", "5577dfcd0fe00da9e1d8bb8bbd952aaa5bc10ecb14cae4e3f5e28c506bbc3a21" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab6590ad5134f8e1bf4581cf90ca0398ceb92861c2af06928cc0303d9654ca3e", "1d821f6a357dc173f22a3b77145c057a632bb56f31514e31d6d2ed7fddeade55" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cde41230f0cdf732ac76e5f284cb7f46915ed309b48debf245f3ff2f243e9366", "240da36ca5ad289bdfea83213847b14a73079705eab0a2a28aefc999e5ed1504" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bc0f3a265e2136998083451163be66f8b6a673bf5cb08a0e8dbbce4319af6977";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "36c6faa9f6dca42ea8b0e6d02d36c3941582749251bfa88c35fc8a8e9ad51cda", "00c44ce5f20f36b4ae75cc7291678dbff188cf8c838b8963eeb8b78891795a7364" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "2a06d743967a1330ca91cc46c9394512cc85b4f1b9355eb7f4bbe53a32b76cf4";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "709e58a12b12034173395bf91e68255d90d8a3a1d5875c75f87787d9a85a0929", "0080e09b79f43489be726a4253ae6c05adce71bcc65389254923cbfacc0775bff6" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8a457017b290d6edb5455e167b9944f67dc5ba958c7c8108ac56e8596b9bc9a1";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0086664a9e09db80dbe3bd0158cc4a64a2cded9c852b455f4443e97cca5569f7cc", "7454f96b52a27a43a1345b5d340902e147880adaf2fe691c168b4203ba2e1df4" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "cbfaf812124638c0b98c18cac3dd8d0848ff921f26aec42a708df7b6a97571c7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "623c668c5dbae406e7b4e8e97b2bba2028586f2e3c31f694d9fe87a3de29f843", "3ac7eb04891898dd9077432c38cc978049cab7721630ed033095f850ade83e3e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "af812de3638bfed9c18cac3dd8d087e7350cc7062635266a525bff486363cc91";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b034897e2a74a787e008b14c62882eaee0e6e53a1c8a58f709a54432713c20fd", "28e07de2ca64b5e215d25d0530d7807df11b98bb39c26a2405388ac0b163fafc" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5f025bc7c717fdb28319587bb1a10fcead32935ea552ae4fb0fe33cdca6473d1";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "14c4f6210b628edd441651d3cb61a07f7ca87629a9e0add5a4fd92902a20cd25", "5146bebdb22b4d49527ebc90ba6294784ae7ca664724d45a466c9fe8b8699bbf" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "de4130d1ed9120b8c3dd8d087e7630cb9a8402519439af08e96b342788c6e84e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b5408eefbdb7480fad4c1735f378c9a1ded28cf476835f27b6fd3b8af5e4c596", "00a60a806e244c63a798baf2fd5a66c6c0d7f77952ba2d74b0fe3652811caac6f0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ec618e7b1af40be0d052f5a020388fc6cafb822933c1bffab137885f52e89d3e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00de9e22bc58f4b9c913e7f7c26fcbc5d7f6bdc9fced5f520ac88e8a03290be403", "746a125844509d79840e35440b312dbfdf4ab8ab0011e7c36bc9e01201b1b0e0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "d39813c8102fe0f18cbfac4b0fa028e6e48c093c59ea00dc99fad50f2d614a3d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ee3bfd2e1c3d99acd88dbf6fc9a3a8f5686b50a6a3e9215f57e83a81389836a5", "00f8ebff9a3e463d47ec36259fdde694bdbb880b0a09fe9ac649d691646ba624f6" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e9fcbcad906698e02d9aba57b3c4e9eefeaf3cec7a980c422fe7f6303fc4a3ab";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3c0c4d0ad0848d1335b12a8919d32fafc5f2b0d5c2f3cf6494b06ba8eb17cb29", "00dd7054095454fdb519279cde10259ec5d9e5e4b5a8c4daca649a150f2dbf21ac" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "21f862ec50ef64b3bfbe5d774e20cc838320437725338a3b32fefe3ff159dded";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6cf91440818ea262b9376e23f7b530b9e44edf5bc6db1a67dd60cc722975d623", "17c19e7d6ebc0cbdc89388242d604ae94ac4ca179ef2cd8bf33fbf738afcb39b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "43f0c5d8a1dec9677f7cbaee9c419907064086ee4a67147665fdfc7fe2b3bbda";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1b5afcf39888d2da7215f36421a85c4217b0ac883bf5957c2d066efd8bc89f18", "00d8fb3b6aca0b3577a883948e016905065a3fdc13d6f433172ee0f16784e52c78" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "65e928c4f2ce2e1b3f3b1865ea62658a8960ca656f9a9eb198fcfabfd40d99c7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00890d36db646c27c2e6c7bc7fdc3f0cbf66fab36d13279b9ecf6e98457d8cf492", "07a83cfda8e9d0375404c6cbff66792eef97220239254000b4bf983e6bae26d7" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "c522b80b59486b775aa2af0b3dcca27b1d565aa199ca0fc6d008598e33ff7779";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a1571ed0ffe39574d030b406f638bf88eea5b4b50754e93431fe0172fdf2fbc", "00bc77f601dc6dbc88cc2b560e8cca5e738f2c769810b2c8762dab917adfe24535" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "612b4467c8b3b8ecbf5374997ec7db8cab2bda9e431982c49727f3fcefb10b47", "00b9d1ecc026c3665425730128138c4e181c61ec28b38910ca59e5fc496ec31f08" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "34191b6ce8865c2230a514b61e2b2730c94beb072e9de309872aea3743bb3e27", "22d202fc59984e7421a25e6a82664b5080f72ab28df9c0af4e1e300af11ae9b0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d533c620a8fd3d5a8342caba89eadc25907d1e9b6fea48ee8f806aa772f0c80f", "70e09c022fa1139da32a456ec024949824477bf0bdbf603e8faccd6b205d263c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0091014bea8705a022972e12b176c96e84c0b61c05eb1c6f8c5c1db731d54d67e2", "009060ef6c764d8d47ed5ebf8f6c23835cb89f8b056cdf7e457f9273b6477ece33" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "287a7f8edfbb55cbb56d6b7be5b96c410a85a35bc6639661a92bd653e1f59688", "00bbd133a77828493b3e0f867f34acfcac099415399a6b1106a0f9420c06f8bf94" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0082eca524c9ee8475ec8948721a9409b5090c6c28866d0c12669bd5cb7e685a58", "066b1e7135946a425ddd228076ea24d131b9bd2eae6b51c8083857628f260b80" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009cc512b58d5b921f91075441b0df61e0381459de703a84523cda31dc18549ff8", "5647dd4bd39f6761a144d81ef39db7bc0dedbcb15bdaf084e3a10fdd10bd906a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aa9d33c76ccd011ba23047a420840374b4fa3be480c65263d543baf2ccc6141e", "5ed3b42ad9527869fae92914b82b952d2c31c8fcc85b4c100983096694285766" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2812996934db1357048a1aacb07cb2a8730fbe530984a7a5166f84748ff63e4c", "00e6e8a80e235e216e1a9e75ba3b3a321af51d2e4524ad3c8be99288463b91155a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008286d34afa1904ae756d73bf02a6b6a9db1eaa1b8351ad713a786dcfb829135b", "00f97922dfe80cd4f0e438a8d842e7666853436d972860f715e622a1e876db4251" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4b7b9990a6c2c5a810107c09ee09cf3388c1a6e82aaa44c378d9886e2508c2e0", "00867e7632fcc312fcfdc01fb6a579ce6aa6285563b1adbb3272f0e122f9de73e3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "568426540e19be6404e6cb4745fc7a943c0c059d7c7baf3bc4fc782e9aedf2de", "00ba7fb20ad12a886c53945d3cdb019afa8b0d58ed307d55f556acf79ec89012d5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1bebc1a6823107d1263219e36d2ec1957d20b0b450b481c9de46ea9294d48b66", "72b7a811af9528e61199f4a2a7f30d8685f5a04767b59276e65a732e8f3950a1" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "08a2b7fa625f09106a1a8d98f831e53d918fb330d6c388a7b80df98bb9e9c934", "478da818b4d94082517fa9635a8aa5be05323de604fcfa97bc3a1a57a5e80c34" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "ae36701f241f6073608b5f77d9039a9aec44aa5a12a99227fd2911b001915de2";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "08a2b7fa625f09106a1a8d98f831e53d918fb330d6c388a7b80df98bb9e9c934", "00b87257e64b26bf7eae80569ca5755a41facdc21afb03056843c5e5a85a17f3cb" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "ae36701f241f6073608b5f77d9039a9aec44aa5a12a99227fd2911b001915de2";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69aac6897b0457e54cac25f24590be255d352a20055004e7caa7cbb430b3c90f", "009113bffe220db9143e38514da0481df67f1717c58aab1a189fb9d4f6e53c3900" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "449ff6ddbec4bf9bcc3149b8dfe480f9a677c3b8e203d272f3e0a2cf90a2cea7", "0087fcbc0799a9323da3f7fddb4818b89b1d97b32b962e1b3edad2fbed47b58d41" );
            {
                // point with x-coordinate 0
                auto m = "313233343030"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b282b1b5bc00c2bb18f28ce678e1cd48c8ced8335af5d8e4abd3d7a7d3616f56", "3d47a55ddc11e966fde2bd87b028e62fc8133def824e3e00528f2442908fe84c" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00facbd6f5e996284a53cb1ca41ffc4eb0a3fd73b73c730194011169b9ada14519", "00c5491ede60614d823b491198df7bc6c6768e064e0e43b7f053ab8f279cd4f4ec" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a011801d52a75f4841e40240da49dda8f38e868b4e6f941f77ca9b86665ad5a7", "4751eabf00fc2a7a863fec366975edbcd4885693022cd755c0d8936e660d61db" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fdfa5d35e42ef91b1842c9f28aeb6c68bd7732935f748168deb718e66608b980", "00d6f85fa678df3cabb55b5002e63b55d7cae11e89f74940b7990a3b167dfa191b" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0754de71bd21f14f4927bdab77efc57f148b36275c305a86c1d7a0dcfd53bab4", "00989fc99bc725da84197c2f284ecc6030489eda77ef92f8680130622b631af2b3" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aad84fd5d52afd531f1068fb7a10bb365faefa89975597187470d04a8c9c8b3", "27258e32d19cd58ddfd35bd7ea1f063c77c61b7879451bdd3e8f44cbf40241a2" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b4a01ec7b10acff3dace05222fae05c75368a375d8ce1faf4a1b2def1ab715ab", "61a6642e82ff950f373ace5c0cc298639ab9ae739e4614a93fb1122ee16d922f" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4efc2bef42b11e0929edca3b025f01b1fa37aceef4cd3e8c2d4beab500856af8", "7716828fc1788c881ae39f534c3e270ca869a578210b5dad8a8938691d0c4b73" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4606b9fceecc47babcc78de73ca55672f09930aacd560db0a2967a99ef8a595e", "612a050025785c0e7c7763db0bb53c48b6ff0ed1dfb6055df90299e295092990" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b6de6de267720d16bccf71fdbe07ebe5c1149f8cfb2041b1d6cabbc9b6656d68", "2d3e21f4025ddcacab035b5da6310361102079f1b40c1ef7c7b88427694c11c6" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00efd3bd1299d4b2bb0afbce2afd90792d8c72e1d29c6092e4681540420664e275", "390a4dbb20d10f7360c5b794564dcd443bb1df94bf6b1f4be5909a22a6a534ba" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dae9cf165867da6482ede84bfc5b94375529bcb953f26d0cd68fc877088f78d9", "51cadc9f61c55f8e2a04dbaae1251fd15cb12df9bcd072a51971127eaa6ce612" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008418924e94161d350c9fe8dc1cc087de4b4491d0bc694a6862df4e8a555f9afb", "00b0b391af97b0dacbdceb7a982781d0090978efbf76b8e6914250e92ade9a6126" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "cbd25189e59c5c367e7630cbd4c4cb1512c194cadf353d6331f9f57fa81b338e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "cbd25189e59c5c367e7630cbd4c4cb1512c194cadf353d6331f9f57fa81b338e";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "ddb577670d5a9b93666df2af7f9baadd8256fca0c81deb2d5cd7301a4b39105f";
                bn_t sig_s = "a2bcd9f6228a0aa0a4f066aa674b9b08da252b02a77fd1b2f7a2d85929e8b491";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "532d672c307da2891720d11422035ea25771f4fce0dc9948d754ca4f66ef36bb";
                sig_s = "4f296181799d3e6780086d6908ab8642711bd406e481b0ce3af1c44b9f098496";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "1c58cde69ddb363e7a6d2612771b3e713be8bed07f37bcda4875f152db2ac1ad";
                sig_s = "a66755b078262b6b0d90c74aee64522104aa58b5f82fc5ba98bcef5bdb9d43a8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "6637f14369d1dd112c5691969fcc867e64bafb1f5d8f917a9acf8ecf1dc95754";
                sig_s = "457b4a8bdd1c047b12826897991241700dad09666b4f410a56993023b098fd1e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "ef9a4672e0a07a0efd5936a77f4ea0fcd69dae6fd95ccba8dcb685e7490623c3";
                bn_t sig_s = "cf135d42f5e379f6ef94b6a493db01c740f441ff5b2475638b6b081f445b17e2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "b8cb05b278c15df7c6a311b0ce7bb5598fe3a95fdb57683ac0821aa2f5d6fa18";
                sig_s = "a9dfa1cc0c9ae0015ae2485f22ed6b0925e82d96ff695b8c2ed593f02719f30e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "2fe6f2aaed0eb760223e8c580363630d3041614806e7fbc863405aa4d98825ee";
                sig_s = "f5d2c396e45d9af9fe1b06b27f0db4d9ee66e1855f4846dae5db6b3d8afbc4f8";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "fb9e312ced9f95c91248bae25056b7bbd84a05fc92acbd304269a1269bbf4f4c";
                bn_t sig_s = "f31426a809ceebb369278a5182bce94835f066cab8654f8bd2339595844244db";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "284fe5f1c86a55fcb3c27a12d82d794eab9a0d76d1fdc4f25df5a9bf52e8e768";
                sig_s = "7aaa75e5a7948be66f06ce52fc3e4916fc93514b08c51f84b73839d2c05acf58";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "812950449ab90351ab0f124774a2633625d0871d42a69d2e473d8ac118b506a6";
                sig_s = "50c98878c3699c34f3049e6f9496e3199fb5d860232995205f1761c000af4e07";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "eaa4f3a8805c60cff74cec78c6b7cea71ef116c333612a6e0096a4c42450936b";
                bn_t sig_s = "fbb3508d6692b8e0854c1a1749ea065262bae7c8b831ece895a1eeda01cebe7d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "3d0caca44c21d34cfdcfb00098c95203e08847f4aabab5ae6ea7f365aefbbcf8";
                sig_s = "bb99be729e51cfd167dad22182383314c9d85432309cbe36f4b1eb73e776b249";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "e4f8b27c3c2c5cb2a6cb9c2049011dd1060085c6e2a15380bcf5224063d3ae08";
                sig_s = "4b3a19f1be945cd649f34d965e7eecac0a05ac8030b7cd2d6bed84086fda567e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "670ce60d0fc7224c8d06f3b01c4416ee0b3ac12f0cff3e1ad214898389ebc819";
                bn_t sig_s = "45da7b6fc8f4f766f82c5132735f2ed94130780b444e2e10c1484d5e45f64332";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "a22928b3022fd554670a86ed519a48d8448dc90856e9c40589076baff591e076";
                sig_s = "b4005a89aef027e5063a89709fbc66a05eb12d8d34af84f35ea7ac93f7bbd40e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "a277181e641edafbdb359801605791c833ff3b462dac3c4d3608d479c98090ff";
                sig_s = "8b2ad68880cede2290a996fe5b7003610c5c9f53e1dcf2cdb2ad815e2ba5c1cf";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "760c487841a7214e9850b5569d99fe3ff9dddc41dee7313a780921d8d3657b16";
                bn_t sig_s = "b99d63e3cc81458801d5fd5926405d33b894e0f96a85c3c4a929a45c828d76d0";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "9b7e72ac454505017c5377b2c379f31a7a0268b739fca4c97dfe1c9aa4bc548e";
                sig_s = "1e65cbee69a42ab0a7ae50e9acceaa0971574fb604958876ad6316c39eebdd96";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "4a7e44e4a8a9fee22647923eaee0368b3fa408edaa19b406507309b13e073855";
                sig_s = "fd8597585fa0270c8cdf855a7a69a843eb28124ecf90ac53a58a847c7b43c7a6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "4589f0c24d1b2f89c2e806f667297c844c63330d6b9a079b2bdd2d95247e3eae";
                bn_t sig_s = "75daa1da09a3f1ed8de1aacc7039a721c46f9ebcd4672750f2fd9c2f70f1e6ed";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "377578a81da586eae269f05c9bb2280a517ab3184e02179aca5d64dee1a930c7";
                sig_s = "cc1735efd4b43e8bdba8c1b44f9ec3e62577e5f4f6543051467bacd9eaaa4d4a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "7f722716c279f3d14563fbd8cbf3abcd51c3305795609e04c8ed7ede12ae2518";
                sig_s = "8a996a370679c3ce6232244d64481e96e47bf6611aa5490000c0b1dffc231aa1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "2f11d967790dd4387a218929b3fc0f130238ec6fd9321348fe631a1e607bd742";
                bn_t sig_s = "3b52a42606d0daa135092d89ab74b3c4e72b4ed213137406d4b50fa84c4ea049";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "192d299e96272a0c49ed1b15f9047b54b4878eaf350a7b2f5439b1e3c83f9703";
                sig_s = "26513e9cbbaca7946f3d6d90b5cc65a985cdfe089734f944ab74842a4dc4127d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "ebd7a6f1450f8bb9e9abf9f66c4143d28c8c845b2e260ab0fff3f7ba5837f944";
                sig_s = "9928afe57df6b8c90b7af7c3da981b71db6ae3a5a21a4c5a48b71628e5811a9e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "37fd00b14ff469a8bb4d2f9c6ca228c4c24b85719389a46099653c41174e9afd";
                bn_t sig_s = "5f64dc68893cf3186df3e83af70e96e9f2103d25b8ddffecda96e8e9181619cf";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "3ce339a63ea4cc1a6b12d1e66b91205e8af530eebe3208359c5327b242b2b669";
                sig_s = "f2b1d6dae62bfe9c44b1cbd56cf0de865a1201c0486d658da5fc029ad47b917e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "7bf225bec33ce7fb4014097e350c1504d3374028cda8f6fbbac4e0fa5319a048";
                sig_s = "aaa45d54eba6bb3ce00ce8e63de24dc7ee19069062e8d340663adcac07f097cd";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_secp256r1_sha3_512_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   GroupIsomorphism - Some EC groups have isomorphic groups that allow an efficient implementation. This is a test vector that contains values that are edge cases on such an isomorphic group.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   WeakHash - The security strength of the hash function used in this signature is weaker than the strength of the EC parameters. Such choices are disallowed in FIPS PUB 186-4 Section 6.1.1. However, it is unclear whether a library should reject such parameter choices.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                bn_t sig_s = "4cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd76";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e180000";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db0000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e180500";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db0500";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "29a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "02b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e98";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568475b";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "ff00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8bd6b94d5ed80a6d9d1190a436ebccc0833490686deac8635bcb9bf5369";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff2ba3a8bf6b94d5eb80a6d9d1190a436f42fe12d7fad749d4c512a036c0f908c7";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fed45c5742946b2a127f59262ee6f5bc914333f7ccb6f979215379ca434640ac97";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f478a2bbd0a6c384ee1493b1f518276e0e4a5375928d6fcd160c11cb6d2c";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "b329f47aa2bbd0a4c384ee1493b1f518ada018ef05465583885980861905228a";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "ff4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "fe4cd60b875d442f593c7b11eb6c4e0ae7d891f1b5ac8a6d729032e9f3ee3492d4";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3639383139"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "16aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266";
                sig_s = "252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "9cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882";
                sig_s = "093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c32";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "73b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa43";
                sig_s = "2f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c88634";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3dd";
                sig_s = "bdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd";
                sig_s = "51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa03";
                sig_s = "99ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b";
                sig_s = "8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d3610";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "9f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831d";
                sig_s = "b26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e9902";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b7";
                sig_s = "20aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db9";
                sig_s = "3df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d21350";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675";
                sig_s = "d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "3b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a8";
                sig_s = "4c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d99258";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf";
                sig_s = "47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "38686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52";
                sig_s = "067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "44a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf";
                sig_s = "2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e9";
                sig_s = "7d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8f";
                sig_s = "f6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6";
                sig_s = "d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab244726";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d";
                sig_s = "3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "9505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7a";
                sig_s = "c60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c5021";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "bbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d";
                sig_s = "9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f00";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "2ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e";
                sig_s = "7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a19878";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c59";
                sig_s = "2ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "5291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c9466";
                sig_s = "65d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107";
                sig_s = "cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf7592767";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "6554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728";
                sig_s = "aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f929";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfc";
                sig_s = "e99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf";
                sig_s = "7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf919622";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "5694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e";
                sig_s = "0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "a0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba6";
                sig_s = "5e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c65424339";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88";
                sig_s = "737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa";
                sig_s = "6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad2";
                sig_s = "42c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d693";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b2";
                sig_s = "9d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8";
                sig_s = "e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c89";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443";
                sig_s = "e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a1939123";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad";
                sig_s = "1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "4a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb";
                sig_s = "3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc5981725782";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "eacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e96";
                sig_s = "7451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d1";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052";
                sig_s = "ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b3300219";
                sig_s = "79938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "81f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8";
                sig_s = "cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f74300";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808";
                sig_s = "048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a5762";
                sig_s = "93320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c199345";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "ac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883";
                sig_s = "f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a8";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f7";
                sig_s = "6b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0";
                sig_s = "918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b2443";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a3";
                sig_s = "1dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f49584389772";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff11";
                sig_s = "45b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d75";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "5e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06f";
                sig_s = "b1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c20";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32e";
                sig_s = "db1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a";
                sig_s = "3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5";
                sig_s = "249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348";
                sig_s = "fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d705d16f80987e2d9b1a6957d29ce22febf7d10fa515153182415c8361baaca4", "00b1fc105ee5ce80d514ec1238beae2037a6f83625593620d460819e8682160926" );
            {
                // k*G has a large x-coordinate
                auto m = "54657374"_hex;
                bn_t sig_r = "4319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "54657374"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cd8d2f81d6953b0844c09d7b560d527cd2ef67056893eadafa52c8501387d59", "00ee41fdb4d10402ce7a0c5e3b747adfa3a490b62a6b7719068903485c0bb6dc2d" );
            {
                // r,s are large
                auto m = "54657374"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008240cd81edd91cb6936133508c3915100e81f332c4545d41189b481196851378", "00e05b06e72d4a1bff80ea5db514aa2f93ea6dd6d9c0ae27b7837dc432f9ce89d9" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b062947356748b0fc17f1704c65aa1dca6e1bfe6779756fa616d91eaad13df2c", "0b38c17f3d0672e7409cfc5992a99fff12b84a4f8432293b431113f1b2fb579d" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a03ef9f92eb268cafa601072489a56380fa0dc43171d7712813b3a19a1eb5e5", "3e213e28a608ce9a2f4a17fd830c6654018a79b3e0263d91a8ba90622df6f2f0" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "091194c1cba17f34e286b4833701606a41cef26177ada8850b601ea1f859e701", "27242fcec708828758403ce2fe501983a7984e6209f4d6b95db9ad77767f55eb" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "103c6ecceff59e71ea8f56fee3a4b2b148e81c2bdbdd39c195812c96dcfb41a7", "2303a193dc591be150b883d770ec51ebb4ebce8b09042c2ecb16c448d8e57bf5" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "05";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b66b829fe604638bcb2bfe8c22228be67390c20111bd2b451468927e87fb6ea", "00bc8e59c009361758b274ba2cad36b58fde485a3ed09dade76712fa9e9c4ac212" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "06";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "54657374"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "06";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ff2f6c24e4a33cd71c09fdcbc74a6233961b874b8c8e0eb94582092cbc50c30", "0084fa9547afda5c66335f3f937d4c79afa120486b534139d59ae82d61ead26420" );
            {
                // s is larger than n
                auto m = "54657374"_hex;
                bn_t sig_r = "05";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0084b959080bb30859cd53c2fb973cf14d60cdaa8ee00587889b5bc657ac588175", "00a02ce5c1e53cb196113c78b4cb8dc7d360e5ea7850b0f6650b0c45af2c3cd7ca" );
            {
                // small r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00df4083bd6ecbda5a77ae578e5d835fa7f74a07ebb91e0570e1ff32a563354e99", "25af80b09a167d9ef647df28e2d9acd0d4bc4f2deec5723818edaf9071e311f8" );
            {
                // smallish r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "2d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2569a3c9bf8c1838ca821f7ba6f000cc8679d278f3736b414a34a7c956a0377", "0387ea85bc4f28804b4a91c9b7d65bc6434c975806795ab7d441a4e9683aeb09" );
            {
                // 100-bit r and small s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a9f7da2a6c359a16540c271774a6bf1c586357c978256f44a6496d80670968a", "00c496e73a44563f8d56fbd7bb9e4e3ae304c86f2c508eb777b03924755beb40d4" );
            {
                // small r and 100 bit s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "0100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00874146432b3cd2c9e26204c0a34136996067d466dde4917a8ff23a8e95ca106b", "709b3d50976ef8b385a813bc35f3a20710bdc6edd465e6f43ac4866703a6608c" );
            {
                // 100-bit r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a736d8e326a9ca62bbe25a34ea4e3633b499a96afa7aaa3fcf3fd88f8e07ede", "00b3e45879d8622b93e818443a686e869eeda7bf9ae46aa3eafcc48a5934864627" );
            {
                // r and s^-1 are close to n
                auto m = "54657374"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e84d9b232e971a43382630f99725e423ec1ecb41e55172e9c69748a03f0d5988", "618b15b427ad83363bd041ff75fac98ef2ee923714e7d1dfe31753793c7588d4" );
            {
                // s == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "54657374"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0203736fcb198b15d8d7a0c80f66dddd15259240aa78d08aae67c467de045034", "34383438d5041ea9a387ee8e4d4e84b4471b160c6bcf2568b072f8f20e87a996" );
            {
                // point at infinity during verify
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "78d844dc7f16b73b1f2a39730da5d8cd99fe2e70a18482384e37dcd2bfea02e1", "00ed6572e01eb7a8d113d02c666c45ef22d3b9a6a6dea99aa43a8183c26e75d336" );
            {
                // edge case for signature malleability
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dec6c8257dde94110eacc8c09d2e5789cc5beb81a958b02b4d62da9599a74014", "66fae1614174be63970b83f6524421067b06dd6f4e9c56baca4e344fdd690f1d" );
            {
                // edge case for signature malleability
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a17f5b75a35ed64623ca5cbf1f91951292db0c23f0c2ea24c3d0cad0988cabc0", "0083a7a618625c228940730b4fa3ee64faecbb2fc20fdde7c58b3a3f6300424dc6" );
            {
                // u1 == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04ba0cba291a37db13f33bf90dab628c04ec8393a0200419e9eaa1ebcc9fb5c3", "1f3a0a0e6823a49b625ad57b12a32d4047970fc3428f0f0049ecf4265dc12f62" );
            {
                // u1 == n - 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "692b6c828e0feed63d8aeaa2b7322f9ccbe8723a1ed39f229f204a434b8900ef", "00a1f6f6abcb38ea3b8fde38b98c7c271f274af56a8c5628dc3329069ae4dd5716" );
            {
                // u2 == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cefd9162d13e64cb93687a9cd8f9755ebb5a3ef7632f800f84871874ccef09", "543ecbeaf7e8044ef721be2fb5f549e4b8480d2587404ebf7dbbef2c54bc0cb1" );
            {
                // u2 == n - 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b975183b42551cf52f291d5c1921fd5e12f50c8c85a4beb9de03efa3f0f24486", "2243018e6866df922dc313612020311ff21e242ce3fb15bc78c406b25ab43091" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "710f8e3edc7c2d5a3fd23de844002bb949d9f794f6d5405f6d97c1bb03dd2bd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c25f1d166f3e211cdf042a26f8abf6094d48b8d17191d74ed717149274466999", "65d06dd6a88abfa49e8b4c5da6bb922851969adf9604b5accfb52a114e77ccdb" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "edffbc270f722c243069a7e5f40335a61a58525c7b4db2e7a8e269274ffe4e1b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008fe5e88243a76e41a004236218a3c3a2d6eee398a23c3a0b008d7f0164cbc0ca", "0098a20d1bdcf573513c7cfd9b83c63e3a82d40127c897697c86b8cb387af7f240" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "a25adcae105ed7ff4f95d2344e24ee523314c3e178525d007904b68919ba4d53";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "02148256b530fbc470c7b341970b38243ecee6d5a840a37beca2efb37e8dff2c", "00c0adbea0882482a7489ca703a399864ba987eeb6ddb738af53a83573473cb30d" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "2e4348c645707dce6760d773de3f3e87346924b2f64bd3dd0297e766b5805ebb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a34db012ce6eda1e9c7375c5fcf3e54ed698e19615124273b3a621d021c76f8e", "777458d6f55a364c221e39e1205d5510bb4fbb7ddf08d8d8fdde13d1d6df7f14" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "348c673b07dce3920d773de3f3e87408869e916dbcf797d8f9684fb67753d1dc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b97af3fe78be15f2912b6271dd8a43badb6dd2a1b315b2ce7ae37b4e7778041d", "00930d71ee1992d2466495c42102d08e81154c305307d1dcd52d0fa4c479b278e7" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "6918ce760fb9c7241aee7bc7e7d0e8110d3d22db79ef2fb1f2d09f6ceea7a3b8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0081e7198a3c3f23901cedc7a1d6eff6e9bf81108e6c35cd8559139af3135dbcbb", "009ef1568530291a8061b90c9f4285eefcba990d4570a4e3b7b737525b5d580034" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "73b3c694391d8eadde3f3e874089464715ac20e4c126bbf6d864d648969f5b5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab4d792ca121d1dba39cb9de645149c2ab573e8becc6ddff3cc9960f188ddf73", "7f90ba23664153e93262ff73355415195858d7be1315a69456386de68285a3c8" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb07ac7a86948c2c2989a16db1930ef1b89ce112595197656877e53c41457f28";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "518412b69af43aae084476a68d59bbde51fbfa9e5be80563f587c9c2652f88ef", "2d3b90d25baa6bdb7b0c55e5240a3a98fbc24afed8523edec1c70503fc10f233" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27e4d82cb6c061dd9337c69bf9332ed3d198662d6f2299443f62c861187db648";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a08f14a644b9a935dffea4761ebaf592d1f66fe6cd373aa7f5d370af34f8352d", "00a54b5bc4025cf335900a914c2934ec2fec7a396d0a7affcad732a5741c7aaaf5" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e7c5cf3aac2e88923b77850515fff6a12d13b356dfe9ec275c3dd81ae94609a4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccf2296a6a89b62b90739d38af4ae3a20e9f45715b90044639241061e33f8f8c", "00aace0046491eeaa1c6e9a472b96d88f4af83e7ff1bb84438c7e058034412ae08" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "c77838df91c1e953e016e10bddffea2317f9fee32bacfe553cede9e57a748f68";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0094b0fc1525bcabf82b1f34895e5819a06c02b23e04002276e165f962c86e3927", "00be7c2ab4d0b25303204fb32a1f8292902792225e16a6d2dbfb29fbc89a9c3376" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ef071c02383d2a6c02dc217bbffd446730d0318b0425e2586220907f885f97f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5351f37e1de0c88c508527d89882d183ccdcf2efca407edb0627cadfd16de6ec", "44b4b57cdf960d32ebcc4c97847eed218425853b5b675eb781b766a1a1300349" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5668aaa0b545bbf9a044a32399ffbe69ce20074e34d7bdf5cf56282a76976396";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "748bbafc320e6735cb64019710a269c6c2b5d147bdc831325cb2fb276ac971a6", "009d655e9a755bc9d800ad21ee3fd4d980d93a7a49a8c5ccd37005177578f51163" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "d12d6e56882f6c0027cae91a27127728f7fddf478fb4fdc2b65f40a60b0eb952";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "14b3bbd75c5e1c0c36535a934d4ab85112410b3b90fa97a31c33038964fd85cc", "112f7d837f8f9c36b460d636c965a5f818f2b50c5d00fb3f9705561dd6631883" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d823533c04cd8edc6d6f950a8e08ade04a9bafa2f14a590356935671ae9305bf", "43178d1f88b6a57a96924c265f0ddb75b58312907b195acb59d7797303123775" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db2b3408b3167d91030624c6328e8ce3ec108c105575c2f3d209b92e654bab69", "00c34318139c50b0802c6e612f0fd3189d800df7c996d5d7b7c3d6be82836fa258" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "09179ce7c59225392216453b2ac1e9d178c24837dfae26bc1dd7ab6063852742", "5556b42e330289f3b826b2db7a86d19d45c2860a59f2be1ddcc3b691f95a9255" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01959fb8deda56e5467b7e4b214ea4c2d0c2fb29d70ff19b6b1eccebd6568d7e", "00d9dbd77a918297fd970bff01e1343f6925167db5a14d098a211c39cc3a413398" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "567f1fdc387e5350c852b4e8f8ba9d6d947e1c5dd7ccc61a5938245dd6bcab3a", "009960bebaf919514f9535c22eaaf0b5812857970e26662267b1f3eb1011130a11" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3499f974ff4ca6bbb2f51682fd5f51762f9dd6dd2855262660b36d46d3e4bec2", "00f498fae2487807e220119152f0122476c64d4fa46ddce85c4546630f0d5c5e81" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2c5c01662cf00c1929596257db13b26ecf30d0f3ec4b9f0351b0f27094473426", "00e986a086060d086eee822ddd2fc744247a0154b57f7a69c51d9fdafa484e4ac7" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0091d4cba813a04d86dbae94c23be6f52c15774183be7ba5b2d9f3cf010b160501", "00900b8adfea6491019a9ac080d516025a541bf4b952b0ad7be4b1874b02fd544a" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ef7fd0a3a36386638330ecad41e1a3b302af36960831d0210c614b948e8aa124", "00ef0d6d800e4047d6d3c1be0fdeaf11fcd8cab5ab59c730eb34116e35a8c7d098" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a521dab13cc9152d8ca77035a607fea06c55cc3ca5dbeb868cea92eafe93df2a", "7bfb9b28531996635e6a5ccaa2826a406ce1111bdb9c2e0ca36500418a2f43de" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "474d58a4eec16e0d565f2187fe11d4e8e7a2683a12f38b4fc01d1237a81a1097", "6e55f73bb7cdda46bdb67ef77f6fd2969df2b67920fb5945fde3a517a6ded4cd" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "692da5cd4309d9a6e5cb525c37da8fa0879f7b57208cdabbf47d223a5b23a621", "40e0daa78cfdd207a7389aaed61738b17fc5fc3e6a5ed3397d2902e9125e6ab4" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0085689b3e0775c7718a90279f14a8082cfcd4d1f1679274f4e9b8805c570a0670", "167fcc5ca734552e09afa3640f4a034e15b9b7ca661ec7ff70d3f240ebe705b1" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e", "2a964fc00d377a8592b8b61aafa7a4aaa7c7b9fd2b41d6e0e17bd1ba5677edcd" );
            {
                // point duplication during verification
                auto m = "54657374"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed8";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e", "00d569b03ef2c8857b6d4749e550585b5558384603d4be291f1e842e45a9881232" );
            {
                // duplication bug
                auto m = "54657374"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed8";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "38a084ffccc4ae2f8204be2abca9fb8ad4ab283b2aa50f13b6bb2347adabc69c", "00a699799b77b1cc6dad271e88b899c12931986e958e1f5cf5653dddf7389365e2" );
            {
                // point with x-coordinate 0
                auto m = "54657374"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a876fbf821d96c555c35393d3b2d2e809a6d839b0b115d964da3e919ef82504", "733dcf41d833b0530b87a7b1a52f7d91bfa19913f7151886913b160de07cd69b" );
            {
                // point with x-coordinate 0
                auto m = "54657374"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "664ce273320d918d8bdb2e61201b4549b36b7cdc54e33b84adb6f2c10aac831e", "49e68831f18bda2973ac3d76bfbc8c5ee1cceed2dd862e2dc7c915c736cef1f4" );
            {
                // comparison with point at infinity
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00961691a5e960d07a301dbbad4d86247ec27d7089faeb3ddd1add395efff1e0fe", "7254622cc371866cdf990d2c5377790e37d1f1519817f09a231bd260a9e78aeb" );
            {
                // extreme value for k and edgecase s
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5d283e13ce8ca60da868e3b0fb33e6b4f1074793274e2928250e71e2aca63e9c", "214dc74fa25371fb4d9e506d418ed9a1bfd6d0c8bb6591d3e0f44505a84886ce" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fc351da038ae0803bd1d86514ae0462f9f8216551d9315aa9d297f792eef6a3", "41c74eed786f2d33da35360ca7aa925e753f00d6077a1e9e5fc339d634019c73" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a1e34c8f16d138673fee55c080547c2bfd4de7550065f638322bba9430ce4b60", "662be9bb512663aa4d7df8ab3f3b4181c5d44a7bdf42436620b7d8a6b81ac936" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7e1a8a8338d7fd8cf41d322a302d2078a87a23c7186150ed7cda6e52817c1bdf", "00d0a9135a89d21ce821e29014b2898349254d748272b2d4eb8d59ee34c615377f" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5c19fe227a61abc65c61ee7a018cc9571b2c6f663ea33583f76a686f64be078b", "7b4a0d734940f613d52bc48673b457c2cf78492490a5cc5606c0541d17b24ddb" );
            {
                // extreme value for k
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db02d1f3421d600e9d9ef9e47419dba3208eed08c2d4189a5db63abeb2739666", "00e0ed26967b9ada9ed7ffe480827f90a0d210d5fd8ec628e31715e6b24125512a" );
            {
                // extreme value for k and edgecase s
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6222d1962655501893c29e441395b6c05711bd3ed5a0ef72cfab338b88229c4b", "00aaae079cb44a1af070362aaa520ee24cac2626423b0bf81af1c54311d8e2fd23" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ccfa24c67f3def7fa81bc99c70bb0419c0952ba599f4c03361da184b04cdca5", "00db76b797f7f41d9c729a2219478a7e629728df870800be8cf6ca7a0a82153bfa" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ea1c72c91034036bac71402b6e9ecc4af3dbde7a99dc574061e99fefff9d84da", "00b7dd057e75b78ac6f56e34eb048f0a9d29d5d055408c90d02bc2ea918c18cb63" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2879a66d86cb20b820b7795da2da62b38924f7817d1cd350d936988e90e79bc", "5431a7268ff6931c7a759de024eff90bcb0177216db6fd1f3aaaa11fa3b6a083" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab1c0f273f74abc2b848c75006f2ef3c54c26df27711b06558f455079aee0ba3", "00df510f2ecef6d9a05997c776f14ad6456c179f0a13af1771e4d6c37fa48b47f2" );
            {
                // extreme value for k
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "54657374"_hex;
                bn_t sig_r = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "54657374"_hex;
                sig_r = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "54657374"_hex;
                bn_t sig_r = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "54657374"_hex;
                sig_r = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = "313233343030"_hex;
                bn_t sig_r = "a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388";
                bn_t sig_s = "f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b86";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "54657374"_hex;
                sig_r = "30e782f964b2e2ff065a051bc7adc20615d8c43a1365713c88268822c253bcce";
                sig_s = "5b16df652aa1ecb2dc8b46c515f9604e2e84cacfa7c6eec30428d2d3f4e08ed5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = ""_hex;
                sig_r = "b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a";
                sig_s = "0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb71";
                sig_s = "3dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f1";
                bn_t sig_s = "9b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b";
                sig_s = "500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df55737";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3";
                sig_s = "541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb55677";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a";
                bn_t sig_s = "59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b43";
                sig_s = "9638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04";
                sig_s = "a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830";
                bn_t sig_s = "228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f285519";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d";
                sig_s = "3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a1251336";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86";
                sig_s = "ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b4";
                bn_t sig_s = "3dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd139929";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "5eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af78";
                sig_s = "2c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "96843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28";
                sig_s = "f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6";
                bn_t sig_s = "402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9";
                sig_s = "edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84";
                sig_s = "feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7";
                bn_t sig_s = "b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "6b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f7";
                sig_s = "5939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361";
                sig_s = "f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "31230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb07";
                bn_t sig_s = "0f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beff";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743";
                sig_s = "cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "7e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed800185945";
                sig_s = "9450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b356";
                bn_t sig_s = "89c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b34";
                sig_s = "72b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "70bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67";
                sig_s = "aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_webcrypto_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_webcrypto_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        //   WeakHash - The security strength of the hash function used in this signature is weaker than then strength of the EC parameters. Such choices are disallowed in FIPS PUB 186-4 Section 6.1.1. However, it is unclear whether a library should reject such parameter choices.
        {
            auto pubkey = curve.make_point( "2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838", "00c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                bn_t sig_s = "4cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd76";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8bd6b94d5ed80a6d9d1190a436ebccc0833490686deac8635bcb9bf5369";
                sig_s = "00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "012ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "00b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8";
                sig_s = "b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f478a2bbd0a6c384ee1493b1f518276e0e4a5375928d6fcd160c11cb6d2c";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "002ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "01b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "2ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18";
                sig_s = "4cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b825";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ffffffff00000001000000000000000000000001000000000000000000000000";
                sig_s = "ffffffff00000001000000000000000000000001000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3639383139"_hex;
                sig_r = "64a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e";
                sig_s = "6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "16aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266";
                sig_s = "252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "9cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882";
                sig_s = "093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c32";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "73b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa43";
                sig_s = "2f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c88634";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3dd";
                sig_s = "bdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd";
                sig_s = "51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa03";
                sig_s = "99ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b";
                sig_s = "8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d3610";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "9f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831d";
                sig_s = "b26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e9902";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b7";
                sig_s = "20aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db9";
                sig_s = "3df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d21350";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675";
                sig_s = "d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "3b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a8";
                sig_s = "4c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d99258";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf";
                sig_s = "47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "38686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52";
                sig_s = "067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "44a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf";
                sig_s = "2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e86";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e9";
                sig_s = "7d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8f";
                sig_s = "f6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6";
                sig_s = "d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab244726";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d";
                sig_s = "3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "9505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7a";
                sig_s = "c60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c5021";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "bbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d";
                sig_s = "9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f00";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "2ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e";
                sig_s = "7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a19878";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c59";
                sig_s = "2ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "5291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c9466";
                sig_s = "65d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107";
                sig_s = "cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf7592767";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "6554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728";
                sig_s = "aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f929";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfc";
                sig_s = "e99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf";
                sig_s = "7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf919622";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "5694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e";
                sig_s = "0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "a0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba6";
                sig_s = "5e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c65424339";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88";
                sig_s = "737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa";
                sig_s = "6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad2";
                sig_s = "42c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d693";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b2";
                sig_s = "9d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8";
                sig_s = "e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c89";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443";
                sig_s = "e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a1939123";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad";
                sig_s = "1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "4a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb";
                sig_s = "3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc5981725782";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "eacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e96";
                sig_s = "7451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d1";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052";
                sig_s = "ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b3300219";
                sig_s = "79938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "81f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8";
                sig_s = "cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f74300";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808";
                sig_s = "048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a5762";
                sig_s = "93320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c199345";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "ac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883";
                sig_s = "f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a8";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f7";
                sig_s = "6b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0";
                sig_s = "918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b2443";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a3";
                sig_s = "1dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f49584389772";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff11";
                sig_s = "45b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d75";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "5e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06f";
                sig_s = "b1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c20";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32e";
                sig_s = "db1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a";
                sig_s = "3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5";
                sig_s = "249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348";
                sig_s = "fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d705d16f80987e2d9b1a6957d29ce22febf7d10fa515153182415c8361baaca4", "00b1fc105ee5ce80d514ec1238beae2037a6f83625593620d460819e8682160926" );
            {
                // k*G has a large x-coordinate
                auto m = "54657374"_hex;
                bn_t sig_r = "000000000000000000000000000000004319055358e8617b0c46353d039cdaab";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "54657374"_hex;
                sig_r = "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
                sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cd8d2f81d6953b0844c09d7b560d527cd2ef67056893eadafa52c8501387d59", "00ee41fdb4d10402ce7a0c5e3b747adfa3a490b62a6b7719068903485c0bb6dc2d" );
            {
                // r,s are large
                auto m = "54657374"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008240cd81edd91cb6936133508c3915100e81f332c4545d41189b481196851378", "00e05b06e72d4a1bff80ea5db514aa2f93ea6dd6d9c0ae27b7837dc432f9ce89d9" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b062947356748b0fc17f1704c65aa1dca6e1bfe6779756fa616d91eaad13df2c", "0b38c17f3d0672e7409cfc5992a99fff12b84a4f8432293b431113f1b2fb579d" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a03ef9f92eb268cafa601072489a56380fa0dc43171d7712813b3a19a1eb5e5", "3e213e28a608ce9a2f4a17fd830c6654018a79b3e0263d91a8ba90622df6f2f0" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "54657374"_hex;
                sig_r = "05";
                sig_s = "01";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "091194c1cba17f34e286b4833701606a41cef26177ada8850b601ea1f859e701", "27242fcec708828758403ce2fe501983a7984e6209f4d6b95db9ad77767f55eb" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "54657374"_hex;
                sig_r = "05";
                sig_s = "03";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "103c6ecceff59e71ea8f56fee3a4b2b148e81c2bdbdd39c195812c96dcfb41a7", "2303a193dc591be150b883d770ec51ebb4ebce8b09042c2ecb16c448d8e57bf5" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000005";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "54657374"_hex;
                sig_r = "05";
                sig_s = "05";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b66b829fe604638bcb2bfe8c22228be67390c20111bd2b451468927e87fb6ea", "00bc8e59c009361758b274ba2cad36b58fde485a3ed09dade76712fa9e9c4ac212" );
            {
                // small r and s
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "54657374"_hex;
                sig_r = "05";
                sig_s = "06";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "54657374"_hex;
                sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632556";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000006";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ff2f6c24e4a33cd71c09fdcbc74a6233961b874b8c8e0eb94582092cbc50c30", "0084fa9547afda5c66335f3f937d4c79afa120486b534139d59ae82d61ead26420" );
            {
                // s is larger than n
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000005";
                bn_t sig_s = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0084b959080bb30859cd53c2fb973cf14d60cdaa8ee00587889b5bc657ac588175", "00a02ce5c1e53cb196113c78b4cb8dc7d360e5ea7850b0f6650b0c45af2c3cd7ca" );
            {
                // small r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "8f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00df4083bd6ecbda5a77ae578e5d835fa7f74a07ebb91e0570e1ff32a563354e99", "25af80b09a167d9ef647df28e2d9acd0d4bc4f2deec5723818edaf9071e311f8" );
            {
                // smallish r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "000000000000000000000000000000000000000000000000002d9b4d347952d6";
                bn_t sig_s = "ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2569a3c9bf8c1838ca821f7ba6f000cc8679d278f3736b414a34a7c956a0377", "0387ea85bc4f28804b4a91c9b7d65bc6434c975806795ab7d441a4e9683aeb09" );
            {
                // 100-bit r and small s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "000000000000000000000000000000000000001033e67e37b32b445580bf4eff";
                bn_t sig_s = "8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a9f7da2a6c359a16540c271774a6bf1c586357c978256f44a6496d80670968a", "00c496e73a44563f8d56fbd7bb9e4e3ae304c86f2c508eb777b03924755beb40d4" );
            {
                // small r and 100 bit s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000100";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00874146432b3cd2c9e26204c0a34136996067d466dde4917a8ff23a8e95ca106b", "709b3d50976ef8b385a813bc35f3a20710bdc6edd465e6f43ac4866703a6608c" );
            {
                // 100-bit r and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "00000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c25";
                bn_t sig_s = "ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a736d8e326a9ca62bbe25a34ea4e3633b499a96afa7aaa3fcf3fd88f8e07ede", "00b3e45879d8622b93e818443a686e869eeda7bf9ae46aa3eafcc48a5934864627" );
            {
                // r and s^-1 are close to n
                auto m = "54657374"_hex;
                bn_t sig_r = "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e84d9b232e971a43382630f99725e423ec1ecb41e55172e9c69748a03f0d5988", "618b15b427ad83363bd041ff75fac98ef2ee923714e7d1dfe31753793c7588d4" );
            {
                // s == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "54657374"_hex;
                sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0203736fcb198b15d8d7a0c80f66dddd15259240aa78d08aae67c467de045034", "34383438d5041ea9a387ee8e4d4e84b4471b160c6bcf2568b072f8f20e87a996" );
            {
                // point at infinity during verify
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "78d844dc7f16b73b1f2a39730da5d8cd99fe2e70a18482384e37dcd2bfea02e1", "00ed6572e01eb7a8d113d02c666c45ef22d3b9a6a6dea99aa43a8183c26e75d336" );
            {
                // edge case for signature malleability
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dec6c8257dde94110eacc8c09d2e5789cc5beb81a958b02b4d62da9599a74014", "66fae1614174be63970b83f6524421067b06dd6f4e9c56baca4e344fdd690f1d" );
            {
                // edge case for signature malleability
                auto m = "54657374"_hex;
                bn_t sig_r = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                bn_t sig_s = "7fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a17f5b75a35ed64623ca5cbf1f91951292db0c23f0c2ea24c3d0cad0988cabc0", "0083a7a618625c228940730b4fa3ee64faecbb2fc20fdde7c58b3a3f6300424dc6" );
            {
                // u1 == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04ba0cba291a37db13f33bf90dab628c04ec8393a0200419e9eaa1ebcc9fb5c3", "1f3a0a0e6823a49b625ad57b12a32d4047970fc3428f0f0049ecf4265dc12f62" );
            {
                // u1 == n - 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "692b6c828e0feed63d8aeaa2b7322f9ccbe8723a1ed39f229f204a434b8900ef", "00a1f6f6abcb38ea3b8fde38b98c7c271f274af56a8c5628dc3329069ae4dd5716" );
            {
                // u2 == 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cefd9162d13e64cb93687a9cd8f9755ebb5a3ef7632f800f84871874ccef09", "543ecbeaf7e8044ef721be2fb5f549e4b8480d2587404ebf7dbbef2c54bc0cb1" );
            {
                // u2 == n - 1
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b975183b42551cf52f291d5c1921fd5e12f50c8c85a4beb9de03efa3f0f24486", "2243018e6866df922dc313612020311ff21e242ce3fb15bc78c406b25ab43091" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "710f8e3edc7c2d5a3fd23de844002bb949d9f794f6d5405f6d97c1bb03dd2bd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c25f1d166f3e211cdf042a26f8abf6094d48b8d17191d74ed717149274466999", "65d06dd6a88abfa49e8b4c5da6bb922851969adf9604b5accfb52a114e77ccdb" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "edffbc270f722c243069a7e5f40335a61a58525c7b4db2e7a8e269274ffe4e1b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008fe5e88243a76e41a004236218a3c3a2d6eee398a23c3a0b008d7f0164cbc0ca", "0098a20d1bdcf573513c7cfd9b83c63e3a82d40127c897697c86b8cb387af7f240" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "a25adcae105ed7ff4f95d2344e24ee523314c3e178525d007904b68919ba4d53";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "02148256b530fbc470c7b341970b38243ecee6d5a840a37beca2efb37e8dff2c", "00c0adbea0882482a7489ca703a399864ba987eeb6ddb738af53a83573473cb30d" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "2e4348c645707dce6760d773de3f3e87346924b2f64bd3dd0297e766b5805ebb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a34db012ce6eda1e9c7375c5fcf3e54ed698e19615124273b3a621d021c76f8e", "777458d6f55a364c221e39e1205d5510bb4fbb7ddf08d8d8fdde13d1d6df7f14" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "348c673b07dce3920d773de3f3e87408869e916dbcf797d8f9684fb67753d1dc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b97af3fe78be15f2912b6271dd8a43badb6dd2a1b315b2ce7ae37b4e7778041d", "00930d71ee1992d2466495c42102d08e81154c305307d1dcd52d0fa4c479b278e7" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "6918ce760fb9c7241aee7bc7e7d0e8110d3d22db79ef2fb1f2d09f6ceea7a3b8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0081e7198a3c3f23901cedc7a1d6eff6e9bf81108e6c35cd8559139af3135dbcbb", "009ef1568530291a8061b90c9f4285eefcba990d4570a4e3b7b737525b5d580034" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "73b3c694391d8eadde3f3e874089464715ac20e4c126bbf6d864d648969f5b5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab4d792ca121d1dba39cb9de645149c2ab573e8becc6ddff3cc9960f188ddf73", "7f90ba23664153e93262ff73355415195858d7be1315a69456386de68285a3c8" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb07ac7a86948c2c2989a16db1930ef1b89ce112595197656877e53c41457f28";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "518412b69af43aae084476a68d59bbde51fbfa9e5be80563f587c9c2652f88ef", "2d3b90d25baa6bdb7b0c55e5240a3a98fbc24afed8523edec1c70503fc10f233" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "27e4d82cb6c061dd9337c69bf9332ed3d198662d6f2299443f62c861187db648";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a08f14a644b9a935dffea4761ebaf592d1f66fe6cd373aa7f5d370af34f8352d", "00a54b5bc4025cf335900a914c2934ec2fec7a396d0a7affcad732a5741c7aaaf5" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "e7c5cf3aac2e88923b77850515fff6a12d13b356dfe9ec275c3dd81ae94609a4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccf2296a6a89b62b90739d38af4ae3a20e9f45715b90044639241061e33f8f8c", "00aace0046491eeaa1c6e9a472b96d88f4af83e7ff1bb84438c7e058034412ae08" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "c77838df91c1e953e016e10bddffea2317f9fee32bacfe553cede9e57a748f68";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0094b0fc1525bcabf82b1f34895e5819a06c02b23e04002276e165f962c86e3927", "00be7c2ab4d0b25303204fb32a1f8292902792225e16a6d2dbfb29fbc89a9c3376" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "8ef071c02383d2a6c02dc217bbffd446730d0318b0425e2586220907f885f97f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5351f37e1de0c88c508527d89882d183ccdcf2efca407edb0627cadfd16de6ec", "44b4b57cdf960d32ebcc4c97847eed218425853b5b675eb781b766a1a1300349" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5668aaa0b545bbf9a044a32399ffbe69ce20074e34d7bdf5cf56282a76976396";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "748bbafc320e6735cb64019710a269c6c2b5d147bdc831325cb2fb276ac971a6", "009d655e9a755bc9d800ad21ee3fd4d980d93a7a49a8c5ccd37005177578f51163" );
            {
                // edge case for u1
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "d12d6e56882f6c0027cae91a27127728f7fddf478fb4fdc2b65f40a60b0eb952";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "14b3bbd75c5e1c0c36535a934d4ab85112410b3b90fa97a31c33038964fd85cc", "112f7d837f8f9c36b460d636c965a5f818f2b50c5d00fb3f9705561dd6631883" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d823533c04cd8edc6d6f950a8e08ade04a9bafa2f14a590356935671ae9305bf", "43178d1f88b6a57a96924c265f0ddb75b58312907b195acb59d7797303123775" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "b62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db2b3408b3167d91030624c6328e8ce3ec108c105575c2f3d209b92e654bab69", "00c34318139c50b0802c6e612f0fd3189d800df7c996d5d7b7c3d6be82836fa258" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "09179ce7c59225392216453b2ac1e9d178c24837dfae26bc1dd7ab6063852742", "5556b42e330289f3b826b2db7a86d19d45c2860a59f2be1ddcc3b691f95a9255" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01959fb8deda56e5467b7e4b214ea4c2d0c2fb29d70ff19b6b1eccebd6568d7e", "00d9dbd77a918297fd970bff01e1343f6925167db5a14d098a211c39cc3a413398" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "567f1fdc387e5350c852b4e8f8ba9d6d947e1c5dd7ccc61a5938245dd6bcab3a", "009960bebaf919514f9535c22eaaf0b5812857970e26662267b1f3eb1011130a11" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3499f974ff4ca6bbb2f51682fd5f51762f9dd6dd2855262660b36d46d3e4bec2", "00f498fae2487807e220119152f0122476c64d4fa46ddce85c4546630f0d5c5e81" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "ca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc8600";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2c5c01662cf00c1929596257db13b26ecf30d0f3ec4b9f0351b0f27094473426", "00e986a086060d086eee822ddd2fc744247a0154b57f7a69c51d9fdafa484e4ac7" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0091d4cba813a04d86dbae94c23be6f52c15774183be7ba5b2d9f3cf010b160501", "00900b8adfea6491019a9ac080d516025a541bf4b952b0ad7be4b1874b02fd544a" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ef7fd0a3a36386638330ecad41e1a3b302af36960831d0210c614b948e8aa124", "00ef0d6d800e4047d6d3c1be0fdeaf11fcd8cab5ab59c730eb34116e35a8c7d098" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a521dab13cc9152d8ca77035a607fea06c55cc3ca5dbeb868cea92eafe93df2a", "7bfb9b28531996635e6a5ccaa2826a406ce1111bdb9c2e0ca36500418a2f43de" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "bfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "474d58a4eec16e0d565f2187fe11d4e8e7a2683a12f38b4fc01d1237a81a1097", "6e55f73bb7cdda46bdb67ef77f6fd2969df2b67920fb5945fde3a517a6ded4cd" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "692da5cd4309d9a6e5cb525c37da8fa0879f7b57208cdabbf47d223a5b23a621", "40e0daa78cfdd207a7389aaed61738b17fc5fc3e6a5ed3397d2902e9125e6ab4" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0085689b3e0775c7718a90279f14a8082cfcd4d1f1679274f4e9b8805c570a0670", "167fcc5ca734552e09afa3640f4a034e15b9b7ca661ec7ff70d3f240ebe705b1" );
            {
                // edge case for u2
                auto m = "54657374"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd";
                bn_t sig_s = "5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e", "2a964fc00d377a8592b8b61aafa7a4aaa7c7b9fd2b41d6e0e17bd1ba5677edcd" );
            {
                // point duplication during verification
                auto m = "54657374"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed8";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e", "00d569b03ef2c8857b6d4749e550585b5558384603d4be291f1e842e45a9881232" );
            {
                // duplication bug
                auto m = "54657374"_hex;
                bn_t sig_r = "6f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569";
                bn_t sig_s = "f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed8";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "38a084ffccc4ae2f8204be2abca9fb8ad4ab283b2aa50f13b6bb2347adabc69c", "00a699799b77b1cc6dad271e88b899c12931986e958e1f5cf5653dddf7389365e2" );
            {
                // point with x-coordinate 0
                auto m = "54657374"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a876fbf821d96c555c35393d3b2d2e809a6d839b0b115d964da3e919ef82504", "733dcf41d833b0530b87a7b1a52f7d91bfa19913f7151886913b160de07cd69b" );
            {
                // point with x-coordinate 0
                auto m = "54657374"_hex;
                bn_t sig_r = "010000000000000000000000000000000000000000000000000000000000000000";
                bn_t sig_s = "003333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "664ce273320d918d8bdb2e61201b4549b36b7cdc54e33b84adb6f2c10aac831e", "49e68831f18bda2973ac3d76bfbc8c5ee1cceed2dd862e2dc7c915c736cef1f4" );
            {
                // comparison with point at infinity
                auto m = "54657374"_hex;
                bn_t sig_r = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00961691a5e960d07a301dbbad4d86247ec27d7089faeb3ddd1add395efff1e0fe", "7254622cc371866cdf990d2c5377790e37d1f1519817f09a231bd260a9e78aeb" );
            {
                // extreme value for k and edgecase s
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5d283e13ce8ca60da868e3b0fb33e6b4f1074793274e2928250e71e2aca63e9c", "214dc74fa25371fb4d9e506d418ed9a1bfd6d0c8bb6591d3e0f44505a84886ce" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fc351da038ae0803bd1d86514ae0462f9f8216551d9315aa9d297f792eef6a3", "41c74eed786f2d33da35360ca7aa925e753f00d6077a1e9e5fc339d634019c73" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a1e34c8f16d138673fee55c080547c2bfd4de7550065f638322bba9430ce4b60", "662be9bb512663aa4d7df8ab3f3b4181c5d44a7bdf42436620b7d8a6b81ac936" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7e1a8a8338d7fd8cf41d322a302d2078a87a23c7186150ed7cda6e52817c1bdf", "00d0a9135a89d21ce821e29014b2898349254d748272b2d4eb8d59ee34c615377f" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5c19fe227a61abc65c61ee7a018cc9571b2c6f663ea33583f76a686f64be078b", "7b4a0d734940f613d52bc48673b457c2cf78492490a5cc5606c0541d17b24ddb" );
            {
                // extreme value for k
                auto m = "54657374"_hex;
                bn_t sig_r = "7cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db02d1f3421d600e9d9ef9e47419dba3208eed08c2d4189a5db63abeb2739666", "00e0ed26967b9ada9ed7ffe480827f90a0d210d5fd8ec628e31715e6b24125512a" );
            {
                // extreme value for k and edgecase s
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "555555550000000055555555555555553ef7a8e48d07df81a693439654210c70";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6222d1962655501893c29e441395b6c05711bd3ed5a0ef72cfab338b88229c4b", "00aaae079cb44a1af070362aaa520ee24cac2626423b0bf81af1c54311d8e2fd23" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ccfa24c67f3def7fa81bc99c70bb0419c0952ba599f4c03361da184b04cdca5", "00db76b797f7f41d9c729a2219478a7e629728df870800be8cf6ca7a0a82153bfa" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ea1c72c91034036bac71402b6e9ecc4af3dbde7a99dc574061e99fefff9d84da", "00b7dd057e75b78ac6f56e34eb048f0a9d29d5d055408c90d02bc2ea918c18cb63" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "3333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c2879a66d86cb20b820b7795da2da62b38924f7817d1cd350d936988e90e79bc", "5431a7268ff6931c7a759de024eff90bcb0177216db6fd1f3aaaa11fa3b6a083" );
            {
                // extreme value for k and s^-1
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "49249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab1c0f273f74abc2b848c75006f2ef3c54c26df27711b06558f455079aee0ba3", "00df510f2ecef6d9a05997c776f14ad6456c179f0a13af1771e4d6c37fa48b47f2" );
            {
                // extreme value for k
                auto m = "54657374"_hex;
                bn_t sig_r = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
                bn_t sig_s = "16a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" );
            {
                // testing point duplication
                auto m = "54657374"_hex;
                bn_t sig_r = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "54657374"_hex;
                sig_r = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", "00b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a" );
            {
                // testing point duplication
                auto m = "54657374"_hex;
                bn_t sig_r = "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25";
                bn_t sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "54657374"_hex;
                sig_r = "acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c";
                sig_s = "249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c2";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad5", "0087d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d" );
            {
                // pseudorandom signature
                auto m = "313233343030"_hex;
                bn_t sig_r = "a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388";
                bn_t sig_s = "f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b86";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "54657374"_hex;
                sig_r = "30e782f964b2e2ff065a051bc7adc20615d8c43a1365713c88268822c253bcce";
                sig_s = "5b16df652aa1ecb2dc8b46c515f9604e2e84cacfa7c6eec30428d2d3f4e08ed5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = ""_hex;
                sig_r = "b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a";
                sig_s = "0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb71";
                sig_s = "3dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000", "00ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f1";
                bn_t sig_s = "9b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "0fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b";
                sig_s = "500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df55737";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3";
                sig_s = "541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb55677";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "0084fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000" );
            {
                // y-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a";
                bn_t sig_s = "59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b43";
                sig_s = "9638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04";
                sig_s = "a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b55";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f497265004935", "7b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830";
                bn_t sig_s = "228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f285519";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d";
                sig_s = "3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a1251336";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86";
                sig_s = "ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffff", "00a01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b4";
                bn_t sig_s = "3dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd139929";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "5eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af78";
                sig_s = "2c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "96843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28";
                sig_s = "f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f5", "5a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73" );
            {
                // x-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6";
                bn_t sig_s = "402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9";
                sig_s = "edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84";
                sig_s = "feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "03fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e", "1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7";
                bn_t sig_s = "b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "6b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f7";
                sig_s = "5939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361";
                sig_s = "f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "1352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "31230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb07";
                bn_t sig_s = "0f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beff";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743";
                sig_s = "cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "7e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed800185945";
                sig_s = "9450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015", "00fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b356";
                bn_t sig_s = "89c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b34";
                sig_s = "72b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "70bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67";
                sig_s = "aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_webcrypto_test
    EOSIO_TEST_END // ec_secp256r1_test
}
