// Copyright Â© 2023 ZeroPass <zeropass@pm.me>
// Author: Crt Vavros
#pragma once
#include <ack/ec.hpp>
#include <ack/ec_curve.hpp>
#include <ack/ecdsa.hpp>
#include <ack/keccak.hpp>
#include <ack/utils.hpp>
#include <ack/tests/ecdsa_test_utils.hpp>
#include <ack/tests/utils.hpp>

#include <eosio/crypto.hpp>
#include <eosio/fixed_bytes.hpp>
#include <eosio/tester.hpp>

namespace ack::tests {
    EOSIO_TEST_BEGIN( ecdsa_secp256k1_test )
        using namespace ec_curve;
        using bn_t = ec_fixed_bigint<256>;
        constexpr auto& curve = secp256k1;

        // Make sure curve parameters are correct
        REQUIRE_EQUAL( secp256k1.p  , "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F" )
        REQUIRE_EQUAL( secp256k1.a  , "00" )
        REQUIRE_EQUAL( secp256k1.b  , "07" )
        REQUIRE_EQUAL( secp256k1.g.x, "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798" )
        REQUIRE_EQUAL( secp256k1.g.y, "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8" )
        REQUIRE_EQUAL( secp256k1.n  , "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141" )
        REQUIRE_EQUAL( secp256k1.h  , 1 )
        REQUIRE_EQUAL( secp256k1.verify(), true )

        // Custom test vectors
        {
            constexpr auto pubkey_point = curve.make_point(
                "BF355D2F32A5762DB38C7A3A349A78B98202554D3CA34C1F921B3E38805F5B62",
                "21BF42CBB1253D8F7E25C6BFA4104FFBC00732F08A0C6641B7E661391BD401B2"
            );

            constexpr ec_fixed_bigint<256> sig_r = "9996B9881AE5194BD5073F291C8149A2F4FBCD7472E17EE3A0C794A89240E26E";
            constexpr ec_fixed_bigint<256> sig_s = "2C718E083D6AED9ED86C08FC6538CDCA3037B8EF89D235763799456339379C62";

            auto digest = eosio::checksum256( from_hex( "9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08" ) );
            bool result = true; // Signature is valid
            test_ecdsa_verification( result, pubkey_point, digest, sig_r, sig_s, curve );
        }

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha256_p1363_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha256_p1363_test.json'
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                bn_t sig_s = "900e75ad233fcc908509dbff5922647db37c21f4afd3203ae8dc4ae7794b0f87";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478583b90deabca4b05c4574e49b5899b964a6";
                sig_s = "006ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a79bc4fcf10b9e0e4320ac021c106b31ddc";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "006ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a7b01a0f22a0a9843f64aedc334367cdc9b";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "00813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b7fc1e197d8aebe203c96c87232272172fb";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "00813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "900e75ad233fcc908509dbff5922647ef8cd450e008a7fff2909ec5aa914ce46";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3235353835"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "35138c401ef8d3493d65c9002fe62b43aee568731b744548358996d9cc427e06";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "95c29267d972a043d955224546222bba343fc1d4db0fec262a33ac61305696ae";
                sig_s = "6edfe96713aed56f8a28a6653f57e0b829712e5eddc67f34682b24f0676b2640";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "28f94a894e92024699e345fe66971e3edcd050023386135ab3939d550898fb25";
                sig_s = "cd69c1a42be05a6ee1270c821479251e134c21858d800bda6f4e98b37196238e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "be26b18f9549f89f411a9b52536b15aa270b84548d0e859a1952a27af1a77ac6";
                sig_s = "8f3e2b05632fc33715572af9124681113f2b84325b80154c044a544dc1a8fa12";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "b1a4b1478e65cc3eafdf225d1298b43f2da19e4bcff7eacc0a2e98cd4b74b114";
                sig_s = "e8655ce1cfb33ebd30af8ce8e8ae4d6f7b50cd3e22af51bf69e0a2851760d52b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "325332021261f1bd18f2712aa1e2252da23796da8a4b1ff6ea18cafec7e171f2";
                sig_s = "40b4f5e287ee61fc3c804186982360891eaa35c75f05a43ecd48b35d984a6648";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "a23ad18d8fc66d81af0903890cbd453a554cb04cdc1a8ca7f7f78e5367ed88a0";
                sig_s = "dc1c14d31e3fb158b73c764268c8b55579734a7e2a2c9b5ee5d9d0144ef652eb";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "2bdea41cda63a2d14bf47353bd20880a690901de7cd6e3cc6d8ed5ba0cdb1091";
                sig_s = "c31599433036064073835b1e3eba8335a650c8fd786f94fe235ad7d41dc94c7a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "d7cd76ec01c1b1079eba9e2aa2a397243c4758c98a1ba0b7404a340b9b00ced6";
                sig_s = "ca8affe1e626dd192174c2937b15bc48f77b5bdfe01f073a8aeaf7f24dc6c85b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a872c744d936db21a10c361dd5c9063355f84902219652f6fc56dc95a7139d96";
                sig_s = "400df7575d9756210e9ccc77162c6b593c7746cfb48ac263c42750b421ef4bb9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "9fa9afe07752da10b36d3afcd0fe44bfc40244d75203599cf8f5047fa3453854";
                sig_s = "af1f583fec4040ae7e68c968d2bb4b494eec3a33edc7c0ccf95f7f75bc2569c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "885640384d0d910efb177b46be6c3dc5cac81f0b88c3190bb6b5f99c2641f205";
                sig_s = "738ed9bff116306d9caa0f8fc608be243e0b567779d8dab03e8e19d553f1dc8e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "2d051f91c5a9d440c5676985710483bc4f1a6c611b10c95a2ff0363d90c2a458";
                sig_s = "92206b19045a41a797cc2f3ac30de9518165e96d5b86341ecb3bcff231b3fd65";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "f3ac2523967482f53d508522712d583f4379cd824101ff635ea0935117baa54f";
                sig_s = "27f10812227397e02cea96fb0e680761636dab2b080d1fc5d11685cbe8500cfe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "96447cf68c3ab7266ed7447de3ac52fed7cc08cbdfea391c18a9b8ab370bc913";
                sig_s = "f0a1878b2c53f16e70fe377a5e9c6e86f18ae480a22bb499f5b32e7109c07385";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "530a0832b691da0b5619a0b11de6877f3c0971baaa68ed122758c29caaf46b72";
                sig_s = "93761bb0a14ccf9f15b4b9ce73c6ec700bd015b8cb1cfac56837f4463f53074e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "9c54c25500bde0b92d72d6ec483dc2482f3654294ca74de796b681255ed58a77";
                sig_s = "988bac394a90ad89ce360984c0c149dcbd2684bb64498ace90bcf6b6af1c170e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "e7909d41439e2f6af29136c7348ca2641a2b070d5b64f91ea9da7070c7a2618b";
                sig_s = "42d782f132fa1d36c2c88ba27c3d678d80184a5d1eccac7501f0b47e3d205008";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "5924873209593135a4c3da7bb381227f8a4b6aa9f34fe5bb7f8fbc131a039ffe";
                sig_s = "e0e44ee4bbe370155bf0bbdec265bf9fe31c0746faab446de62e3631eacd111f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "eeb692c9b262969b231c38b5a7f60649e0c875cd64df88f33aa571fa3d29ab0e";
                sig_s = "218b3a1eb06379c2c18cf51b06430786d1c64cd2d24c9b232b23e5bac7989acd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "a40034177f36091c2b653684a0e3eb5d4bff18e4d09f664c2800e7cafda1daf8";
                sig_s = "3a3ec29853704e52031c58927a800a968353adc3d973beba9172cbbeab4dd149";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "b5d795cc75cea5c434fa4185180cd6bd21223f3d5a86da6670d71d95680dadbf";
                sig_s = "ab1b277ef5ffe134460835e3d1402461ba104cb50b16f397fdc7a9abfefef280";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "07dc2478d43c1232a4595608c64426c35510051a631ae6a5a6eb1161e57e42e1";
                sig_s = "4a59ea0fdb72d12165cea3bf1ca86ba97517bd188db3dbd21a5a157850021984";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "ddd20c4a05596ca868b558839fce9f6511ddd83d1ccb53f82e5269d559a01552";
                sig_s = "a46e8cb8d626cf6c00ddedc3b5da7e613ac376445ee260743f06f79054c7d42a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "9cde6e0ede0a003f02fda0a01b59facfe5dec063318f279ce2de7a9b1062f7b7";
                sig_s = "2886a5b8c679bdf8224c66f908fd6205492cb70b0068d46ae4f33a4149b12a52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "c5771016d0dd6357143c89f684cd740423502554c0c59aa8c99584f1ff38f609";
                sig_s = "ab4bfa0bb88ab99791b9b3ab9c4b02bd2a57ae8dde50b9064063fcf85315cfe5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "a24ebc0ec224bd67ae397cbe6fa37b3125adbd34891abe2d7c7356921916dfe6";
                sig_s = "34f6eb6374731bbbafc4924fb8b0bdcdda49456d724cdae6178d87014cb53d8c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "2557d64a7aee2e0931c012e4fea1cd3a2c334edae68cdeb7158caf21b68e5a24";
                sig_s = "80f93244956ffdc568c77d12684f7f004fa92da7e60ae94a1b98c422e23eda34";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "c4f2eccbb6a24350c8466450b9d61b207ee359e037b3dcedb42a3f2e6dd6aeb5";
                sig_s = "cd9c394a65d0aa322e391eb76b2a1a687f8620a88adef3a01eb8e4fb05b6477a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "eff04781c9cbcd162d0a25a6e2ebcca43506c523385cb515d49ea38a1b12fcad";
                sig_s = "ea5328ce6b36e56ab87acb0dcfea498bcec1bba86a065268f6eff3c41c4b0c9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "f58b4e3110a64bf1b5db97639ee0e5a9c8dfa49dc59b679891f520fdf0584c87";
                sig_s = "d32701ae777511624c1f8abbf02b248b04e7a9eb27938f524f3e8828ba40164a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "f8abecaa4f0c502de4bf5903d48417f786bf92e8ad72fec0bd7fcb7800c0bbe3";
                sig_s = "4c7f9e231076a30b7ae36b0cebe69ccef1cd194f7cce93a5588fd6814f437c0e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "5d5b38bd37ad498b2227a633268a8cca879a5c7c94a4e416bd0a614d09e606d2";
                sig_s = "12b8d664ea9991062ecbb834e58400e25c46007af84f6007d7f1685443269afe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "0c1cd9fe4034f086a2b52d65b9d3834d72aebe7f33dfe8f976da82648177d8e3";
                sig_s = "13105782e3d0cfe85c2778dec1a848b27ac0ae071aa6da341a9553a946b41e59";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "ae7935fb96ff246b7b5d5662870d1ba587b03d6e1360baf47988b5c02ccc1a5b";
                sig_s = "5f00c323272083782d4a59f2dfd65e49de0693627016900ef7e61428056664b3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "00a134b5c6ccbcefd4c882b945baeb4933444172795fa6796aae149067547098";
                sig_s = "a991b9efa2db276feae1c115c140770901839d87e60e7ec45a2b81cf3b437be6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "2e4721363ad3992c139e5a1c26395d2c2d777824aa24fde075e0d7381171309d";
                sig_s = "8bf083b6bbe71ecff22baed087d5a77eaeaf726bf14ace2c03fd6e37ba6c26f2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "6852e9d3cd9fe373c2d504877967d365ab1456707b6817a042864694e1960ccf";
                sig_s = "f9b4d815ebd4cf77847b37952334d05b2045cb398d4c21ba207922a7a4714d84";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "188a8c5648dc79eace158cf886c62b5468f05fd95f03a7635c5b4c31f09af4c5";
                sig_s = "36361a0b571a00c6cd5e686ccbfcfa703c4f97e48938346d0c103fdc76dc5867";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "a74f1fb9a8263f62fc4416a5b7d584f4206f3996bb91f6fc8e73b9e92bad0e13";
                sig_s = "6815032e8c7d76c3ab06a86f33249ce9940148cb36d1f417c2e992e801afa3fa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "07244865b72ff37e62e3146f0dc14682badd7197799135f0b00ade7671742bfe";
                sig_s = "f27f3ddc7124b1b58579573a835650e7a8bad5eeb96e9da215cd7bf9a2a039ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "da7fdd05b5badabd619d805c4ee7d9a84f84ddd5cf9c5bf4d4338140d689ef08";
                sig_s = "28f1cf4fa1c3c5862cfa149c0013cf5fe6cf5076cae000511063e7de25bb38e5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "d3027c656f6d4fdfd8ede22093e3c303b0133c340d615e7756f6253aea927238";
                sig_s = "f6510f9f371b31068d68bfeeaa720eb9bbdc8040145fcf88d4e0b58de0777d2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "0bf6c0188dc9571cd0e21eecac5fbb19d2434988e9cc10244593ef3a98099f69";
                sig_s = "4864a562661f9221ec88e3dd0bc2f6e27ac128c30cc1a80f79ec670a22b042ee";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ae459640d5d1179be47a47fa538e16d94ddea5585e7a244804a51742c686443a";
                sig_s = "6c8e30e530a634fae80b3ceb062978b39edbe19777e0a24553b68886181fd897";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "1cf3517ba3bf2ab8b9ead4ebb6e866cb88a1deacb6a785d3b63b483ca02ac495";
                sig_s = "249a798b73606f55f5f1c70de67cb1a0cff95d7dc50b3a617df861bad3c6b1c9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "e69b5238265ea35d77e4dd172288d8cea19810a10292617d5976519dc5757cb8";
                sig_s = "4b03c5bc47e826bdb27328abd38d3056d77476b2130f3df6ec4891af08ba1e29";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "5f9d7d7c870d085fc1d49fff69e4a275812800d2cf8973e7325866cb40fa2b6f";
                sig_s = "6d1f5491d9f717a597a15fd540406486d76a44697b3f0d9d6dcef6669f8a0a56";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "0a7d5b1959f71df9f817146ee49bd5c89b431e7993e2fdecab6858957da685ae";
                sig_s = "0f8aad2d254690bdc13f34a4fec44a02fd745a422df05ccbb54635a8b86b9609";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "79e88bf576b74bc07ca142395fda28f03d3d5e640b0b4ff0752c6d94cd553408";
                sig_s = "32cea05bd2d706c8f6036a507e2ab7766004f0904e2e5c5862749c0073245d6a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "9d54e037a00212b377bc8874798b8da080564bbdf7e07591b861285809d01488";
                sig_s = "18b4e557667a82bd95965f0706f81a29243fbdd86968a7ebeb43069db3b18c7f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "2664f1ffa982fedbcc7cab1b8bc6e2cb420218d2a6077ad08e591ba9feab33bd";
                sig_s = "49f5c7cb515e83872a3d41b4cdb85f242ad9d61a5bfc01debfbb52c6c84ba728";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "5827518344844fd6a7de73cbb0a6befdea7b13d2dee4475317f0f18ffc81524b";
                sig_s = "b0a334b1f4b774a5a289f553224d286d239ef8a90929ed2d91423e024eb7fa66";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "97ab19bd139cac319325869218b1bce111875d63fb12098a04b0cd59b6fdd3a3";
                sig_s = "bce26315c5dbc7b8cfc31425a9b89bccea7aa9477d711a4d377f833dcc28f820";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "52c683144e44119ae2013749d4964ef67509278f6d38ba869adcfa69970e123d";
                sig_s = "3479910167408f45bda420a626ec9c4ec711c1274be092198b4187c018b562ca";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "07310f90a9eae149a08402f54194a0f7b4ac427bf8d9bd6c7681071dc47dc362", "26a6d37ac46d61fd600c0bf1bff87689ed117dda6b0e59318ae010a197a26ca0" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22", "705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44ad339afbc21e9abf7b602a5ca535ea378135b6d10d81310bdd8293d1df3252", "00b63ff7d0774770f8fe1d1722fa83acd02f434e4fc110a0cc8f6dddd37d56c463" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1260c2122c9e244e1af5151bede0c3ae23b54d7c596881d3eebad21f37dd878c", "5c9a0c1a9ade76737a8811bd6a7f9287c978ee396aa89c11e47229d2ccb552f0" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1877045be25d34a1d0600f9d5c00d0645a2a54379b6ceefad2e6bf5c2a3352ce", "00821a532cc1751ee1d36d41c3d6ab4e9b143e44ec46d73478ea6a79a5c0e54159" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "455439fcc3d2deeceddeaece60e7bd17304f36ebb602adf5a22e0b8f1db46a50", "00aec38fb2baf221e9a8d1887c7bf6222dd1834634e77263315af6d23609d04f77" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000002";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "02";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2e1f466b024c0c3ace2437de09127fed04b706f94b19a21bb1c2acf35cece718", "0449ae3523d72534e964972cfd3b38af0bddd9619e5af223e4d1a40f34cf9f1d" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "03";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dda95d7b0698de5d2d0b4f0034dbe35b50f978fcc518a84abf9c99efd96a2530", "5adc08d6a63dbe831ab99cd9146e3c4c45492ad19521612542256d6af60e7888" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "02ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee77", "7eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584", "00b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000000000000000002d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "157f8fddf373eb5f49cfcf10d8b853cf91cbcd7d665c3522ba7dd738ddb79a4c", "00deadf1a5c448ea3c9f4191a8999abfcc757ac6d64567ef072c47fec613443b8f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000001033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0934a537466c07430e2c48feb990bb19fb78cecc9cee424ea4d130291aa237f0", "00d4f92d23b462804b5b68c52558c01c9996dbf727fccabbeedb9621a400535afa" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d6ef20be66c893f741a9bf90d9b74675d1c2a31296397acb3ef174fd0b300c65", "4a0c95478ca00399162d7f0f2dc89efdc2b28a30fbabe285857295a4b0c4e265" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "00000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7291d1404e0c0c07dab9372189f4bd58d2ceaa8d15ede544d9514545ba9ee06", "29c9a63d5e308769cc30ec276a410e6464a27eeafd9e599db10f053a4fe4a829" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bb79f61857f743bfa1b6e7111ce4094377256969e4e15159123d9548acc3be6c", "1f9d9f8860dcffd3eb36dd6c31ff2e7226c2009c4c94d8d7d2b5686bf7abd677" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d533b789a4af890fa7a82a1fae58c404f9a62a50b49adafab349c513b4150874", "01b4171b803e76b34a9861e10f7bc289a066fd01bd29f84c987a10a5fb18c2d4" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3a3150798c8af69d1e6e981f3a45402ba1d732f4be8330c5164f49e10ec555b4", "221bd842bc5e4d97eff37165f60e3998a424d72a450cf95ea477c78287d0343a" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b37df5fb347c69a0f17d85c0c7ca83736883a825e13143d0fcfc8101e851e80", "0de3c090b6ca21ba543517330c04b12f948c6badf14a63abffdf4ef8c7537026" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82c", "00e87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "238ced001cf22b8853e02edc89cbeca5050ba7e042a7a77f9382cd4149228976", "40683d3094643840f295890aa4c18aa39b41d77dd0fb3bb2700e4f9ec284ffc2" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00961cf64817c06c0e51b3c2736c922fde18bd8c4906fcd7f5ef66c4678508f35e", "00d2c5d18168cfbe70f2f123bd7419232bb92dd69113e2941061889481c5a027bf" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "13681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b10288", "16528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5aa7abfdb6b4086d543325e5d79c6e95ce42f866d2bb84909633a04bb1aa31c2", "0091c80088794905e1da33336d874e2f91ccf45cc59185bede5dd6f3f7acaae18b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e91e1ba6ba898620a46bcb51dc0b8b4ad1dc35dad892c4552d1847b2ce444637";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "277791b305a45b2b39590b2f05d3392a6c8182cef4eb540120e0f5c206c3e4", "64108233fb0b8c3ac892d79ef8e0fbf92ed133addb4554270132584dc52eef41" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e36bf0cec06d9b841da81332812f74f30bbaec9f202319206c6f0b8a0a400ff7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6efa092b68de9460f0bcc919005a5f6e80e19de98968be3cd2c770a9949bfb1a", "00c75e6e5087d6550d5f9beb1e79e5029307bc255235e2d5dc99241ac3ab886c49" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ea26b57af884b6c06e348efe139c1e4e9ec9518d60c340f6bac7d278ca08d8a6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "72d4a19c4f9d2cf5848ea40445b70d4696b5f02d632c0c654cc7d7eeb0c6d058", "00e8c4cd9943e459174c7ac01fa742198e47e6c19a6bdb0c4f6c237831c1b3f942" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5b1d27a7694c146244a5ad0bd0636d9d9ef3b9fb58385418d9c982105077d1b7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a8ea2f50dcced0c217575bdfa7cd47d1c6f100041ec0e35512794c1be7e7402", "58f8c17122ed303fda7143eb58bede70295b653266013b0b0ebd3f053137f6ec" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d27a7694c146244a5ad0bd0636d9e12abe687897e8e9998ddbd4e59a78520d0f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0088de689ce9af1e94be6a2089c8a8b1253ffdbb6c8e9c86249ba220001a4ad3b8", "0c4998e54842f413b9edb1825acbb6335e81e4d184b2b01c8bebdc85d1f28946" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "a4f4ed29828c4894b5a17a0c6db3c256c2221449228a92dff7d76ca8206dd8dd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fea2d31f70f90d5fb3e00e186ac42ab3c1615cee714e0b4e1131b3d4d8225bf7", "00b037a18df2ac15343f30f74067ddf29e817d5f77f8dce05714da59c094f0cda9" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "694c146244a5ad0bd0636d9e12bc9e09e60e68b90d0b5e6c5dddd0cb694d8799";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7258911e3d423349166479dbe0b8341af7fbd03d0a7e10edccb36b6ceea5a3db", "17ac2b8992791128fa3b96dc2fbd4ca3bfa782ef2832fc6656943db18e7346b0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3d7f487c07bfc5f30846938a3dcef696444707cf9677254a92b06c63ab867d22";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f28461dea64474d6bb34d1499c97d37b9e95633df1ceeeaacd45016c98b3914", "00c8818810b8cc06ddb40e8a1261c528faa589455d5a6df93b77bc5e0e493c7470" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6c7648fc0fbf8a06adb8b839f97b4ff7a800f11b1e37c593b261394599792ba4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "74f2a814fb5d8eca91a69b5e60712732b3937de32829be974ed7b68c5c2f5d66", "00eff0f07c56f987a657f42196205f588c0f1d96fd8a63a5f238b48f478788fe3b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9be363a286f23f6322c205449d320baad417953ecb70f6214e90d49d7d1f26a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "195b51a7cc4a21b8274a70a90de779814c3c8ca358328208c09a29f336b82d6a", "00b2416b7c92fffdc29c3b1282dd2a77a4d04df7f7452047393d849989c5cee9ad" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "29798c5c45bdf58b4a7b2fdc2c46ab4af1218c7eeb9f0f27a88f1267674de3b0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "622fc74732034bec2ddf3bc16d34b3d1f7a327dd2a8c19bab4bb4fe3a24b58aa", "736b2f2fae76f4dfaecc9096333b01328d51eb3fda9c9227e90d0b449983c4f0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "0b70f22ca2bb3cefadca1a5711fa3a59f4695385eb5aedf3495d0b6d00f8fd85";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f7f85caf2d7550e7af9b65023ebb4dce3450311692309db269969b834b611c7", "0827f45b78020ecbbaf484fdd5bfaae6870f1184c21581baf6ef82bd7b530f93" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "16e1e459457679df5b9434ae23f474b3e8d2a70bd6b5dbe692ba16da01f1fb0a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49c197dc80ad1da47a4342b93893e8e1fb0bb94fc33a83e783c00b24c781377a", "00efc20da92bac762951f72474becc734d4cc22ba81b895e282fdac4df7af0f37d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2252d685e831b6cf095e4f0535eeaf0ddd3bfa91c210c9d9dc17224702eaf88f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d8cb68517b616a56400aa3868635e54b6f699598a2f6167757654980baf6acbe", "7ec8cf449c849aa03461a30efada41453c57c6e6fbc93bbc6fa49ada6dc0555c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "75135abd7c425b60371a477f09ce0f274f64a8c6b061a07b5d63e93c65046c53";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "030713fb63f2aa6fe2cadf1b20efc259c77445dafa87dac398b84065ca347df3", "00b227818de1a39b589cb071d83e5317cccdc2338e51e312fe31d8dc34a4801750" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00babb3677b0955802d8e929a41355640eaf1ea1353f8a771331c4946e3480afa7", "252f196c87ed3d2a59d3b1b559137fed0013fecefc19fb5a92682b9bca51b950" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1aab2018793471111a8a0e9b143fde02fc95920796d3a63de329b424396fba60", "00bbe4130705174792441b318d3aa31dfe8577821e9b446ec573d272e036c4ebe9" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cb0b909499c83ea806cd885b1dd467a0119f06a88a0276eb0cfda274535a8ff", "47b5428833bc3f2c8bf9d9041158cf33718a69961cd01729bc0011d1e586ab75" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008f03cf1a42272bb1532723093f72e6feeac85e1700e9fbe9a6a2dd642d74bf5d", "3b89a7189dad8cf75fc22f6f158aa27f9c2ca00daca785be3358f2bda3862ca0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44de3b9c7a57a8c9e820952753421e7d987bb3d79f71f013805c897e018f8ace", "00a2460758c8f98d3fdce121a943659e372c326fff2e5fc2ae7fa3f79daae13c12" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6fb8b2b48e33031268ad6a517484dc8839ea90f6669ea0c7ac3233e2ac31394a", "0ac8bbe7f73c2ff4df9978727ac1dfc2fd58647d20f31f99105316b64671f204" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bea71122a048693e905ff602b3cf9dd18af69b9fc9d8431d2b1dd26b942c95e6", "00f43c7b8b95eb62082c12db9dbda7fe38e45cbe4a4886907fb81bdb0c5ea9246c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00da918c731ba06a20cb94ef33b778e981a404a305f1941fe33666b45b03353156", "00e2bb2694f575b45183be78e5c9b5210bf3bf488fd4c8294516d89572ca4f5391" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3007e92c3937dade7964dfa35b0eff031f7eb02aed0a0314411106cdeb70fe3d", "5a7546fc0552997b20e3d6f413e75e2cb66e116322697114b79bac734bfc4dc5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60e734ef5624d3cbf0ddd375011bd663d6d6aebc644eb599fdf98dbdcd18ce9b", "00d2d90b3ac31f139af832cccf6ccbbb2c6ea11fa97370dc9906da474d7d8a7567" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0085a900e97858f693c0b7dfa261e380dad6ea046d1f65ddeeedd5f7d8af0ba337", "69744d15add4f6c0bc3b0da2aec93b34cb8c65f9340ddf74e7b0009eeeccce3c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "38066f75d88efc4c93de36f49e037b234cc18b1de5608750a62cab0345401046", "00a3e84bed8cfcb819ef4d550444f2ce4b651766b69e2e2901f88836ff90034fed" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0098f68177dc95c1b4cbfa5245488ca523a7d5629470d035d621a443c72f39aabf", "00a33d29546fa1c648f2c7d5ccf70cf1ce4ab79b5db1ac059dbecd068dbdff1b89" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5c2bbfa23c9b9ad07f038aa89b4930bf267d9401e4255de9e8da0a5078ec8277", "00e3e882a31d5e6a379e0793983ccded39b95c4353ab2ff01ea5369ba47b0c3191" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "3547808298448edb5e701ade84cd5fb1ac9567ba5e8fb68a6b933ec4b5cc84cc" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "00cab87f7d67bb7124a18fe5217b32a04e536a9845a1704975946cc13a4a337763" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aa2c64fa9c6437563abfbcbd00b2048d48c18c152a2a6f49036de7647ebe82e", "1ce64387995c68a060fa3bc0399b05cc06eec7d598f75041a4917e692b7f51ff" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "391427ff7ee78013c14aec7d96a8a062209298a783835e94fd6549d502fff71f", "00dd6624ec343ad9fcf4d9872181e59f842f9ba4cccae09a6c0972fb6ac6b4c6bd" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138e", "00c1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952", "00fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008ad445db62816260e4e687fd1884e48b9fc0636d031547d63315e792e19bfaee", "1de64f99d5f1cd8b6ec9cb0f787a654ae86993ba3db1008ef43cff0684cb22bd" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f5799c95be89063b24f26e40cb928c1a868a76fb0094607e8043db409c91c32", "00e75724e813a4191e3a839007f08e2e897388b06d4a00de6de60e536d91fab566" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a3331a4e1b4223ec2c027edd482c928a14ed358d93f1d4217d39abf69fcb5ccc", "28d684d2aaabcd6383775caa6239de26d4c6937bb603ecb4196082f4cffd509d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3f3952199774c7cf39b38b66cb1042a6260d8680803845e4d433adba3bb24818", "5ea495b68cbc7ed4173ee63c9042dc502625c7eb7e21fb02ca9a9114e0a3a18d" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e", "054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "73598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3", "00cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "58debd9a7ee2c9d59132478a5440ae4d5d7ed437308369f92ea86c82183f10a1", "6773e76f5edbf4da0e4f1bdffac0f57257e1dfa465842931309a24245fda6a5d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008b904de47967340c5f8c3572a720924ef7578637feab1949acb241a5a6ac3f5b", "00950904496f9824b1d63f3313bae21b89fae89afdfc811b5ece03fd5aa301864f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f4892b6d525c771e035f2a252708f3784e48238604b4f94dc56eaa1e546d941a", "346b1aa0bce68b1c50e5b52f509fb5522e5c25e028bc8f863402edb7bcad8b1b" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "f80ae4f96cdbc9d853f83d47aae225bf407d51c56b7776cd67d0dc195d99a9dc";
                bn_t sig_s = "b303e26be1f73465315221f0b331528807a1a9b6eb068ede6eebeaaa49af8a36";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "109cd8ae0374358984a8249c0a843628f2835ffad1df1a9a69aa2fe72355545c";
                sig_s = "ac6f00daf53bd8b1e34da329359b6e08019c5b037fed79ee383ae39f85a159c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "d035ee1f17fdb0b2681b163e33c359932659990af77dca632012b30b27a057b3";
                sig_s = "1939d9f3b2858bc13e3474cb50e6a82be44faa71940f876c1cba4c3e989202b6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "4f053f563ad34b74fd8c9934ce59e79c2eb8e6eca0fef5b323ca67d5ac7ed238";
                sig_s = "4d4b05daa0719e773d8617dce5631c5fd6f59c9bdc748e4b55c970040af01be5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6d6a4f556ccce154e7fb9f19e76c3deca13d59cc2aeb4ecad968aab2ded45965";
                bn_t sig_s = "53b9fa74803ede0fc4441bf683d56c564d3e274e09ccf47390badd1471c05fb7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "aad503de9b9fd66b948e9acf596f0a0e65e700b28b26ec56e6e45e846489b3c4";
                sig_s = "fff223c5d0765447e8447a3f9d31fd0696e89d244422022ff61a110b2a8c2f04";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "9182cebd3bb8ab572e167174397209ef4b1d439af3b200cdf003620089e43225";
                sig_s = "abb88367d15fe62d1efffb6803da03109ee22e90bc9c78e8b4ed23630b82ea9d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3854a3998aebdf2dbc28adac4181462ccac7873907ab7f212c42db0e69b56ed8";
                bn_t sig_s = "c12c09475c772fd0c1b2060d5163e42bf71d727e4ae7c03eeba954bf50b43bb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "e94dbdc38795fe5c904d8f16d969d3b587f0a25d2de90b6d8c5c53ff887e3607";
                sig_s = "856b8c963e9b68dade44750bf97ec4d11b1a0a3804f4cb79aa27bdea78ac14e4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "49fc102a08ca47b60e0858cd0284d22cddd7233f94aaffbb2db1dd2cf08425e1";
                sig_s = "5b16fca5a12cdb39701697ad8e39ffd6bdec0024298afaa2326aea09200b14d6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "41efa7d3f05a0010675fcb918a45c693da4b348df21a59d6f9cd73e0d831d67a";
                bn_t sig_s = "bbab52596c1a1d9484296cdc92cbf07e665259a13791a8fe8845e2c07cf3fc67";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "b615698c358b35920dd883eca625a6c5f7563970cdfc378f8fe0cee17092144c";
                sig_s = "da0b84cd94a41e049ef477aeac157b2a9bfa6b7ac8de06ed3858c5eede6ddd6d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "87cf8c0eb82d44f69c60a2ff5457d3aaa322e7ec61ae5aecfd678ae1c1932b0e";
                sig_s = "c522c4eea7eafb82914cbf5c1ff76760109f55ddddcf58274d41c9bc4311e06e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "62f48ef71ace27bf5a01834de1f7e3f948b9dce1ca1e911d5e13d3b104471d82";
                bn_t sig_s = "a1570cc0f388768d3ba7df7f212564caa256ff825df997f21f72f5280d53011f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f6b0e2f6fe020cf7c0c20137434344ed7add6c4be51861e2d14cbda472a6ffb4";
                sig_s = "9be93722c1a3ad7d4cf91723700cb5486de5479d8c1b38ae4e8e5ba1638e9732";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "db09d8460f05eff23bc7e436b67da563fa4b4edb58ac24ce201fa8a358125057";
                sig_s = "46da116754602940c8999c8d665f786c50f5772c0a3cdbda075e77eabc64df16";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "592c41e16517f12fcabd98267674f974b588e9f35d35406c1a7bb2ed1d19b7b8";
                bn_t sig_s = "c19a5f942607c3551484ff0dc97281f0cdc82bc48e2205a0645c0cf3d7f59da0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "be0d70887d5e40821a61b68047de4ea03debfdf51cdf4d4b195558b959a032b2";
                sig_s = "8266b4d270e24414ecacb14c091a233134b918d37320c6557d60ad0a63544ac4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fae92dfcb2ee392d270af3a5739faa26d4f97bfd39ed3cbee4d29e26af3b206a";
                sig_s = "93645c80605595e02c09a0dc4b17ac2a51846a728b3e8d60442ed6449fd3342b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "176a2557566ffa518b11226694eb9802ed2098bfe278e5570fe1d5d7af18a943";
                bn_t sig_s = "ed6e2095f12a03f2eaf6718f430ec5fe2829fd1646ab648701656fd31221b97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "60be20c3dbc162dd34d26780621c104bbe5dace630171b2daef0d826409ee5c2";
                sig_s = "bd8081b27762ab6e8f425956bf604e332fa066a99b59f87e27dc1198b26f5caa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "edf03cf63f658883289a1a593d1007895b9f236d27c9c1f1313089aaed6b16ae";
                sig_s = "e5b22903f7eb23adc2e01057e39b0408d495f694c83f306f1216c9bf87506074";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha256_test.json'
        // Note:
        //   Test vectors with flag 'BER' were not included because are not part of this test scope.
        //   Also all test with BER/DER decoding related errors were not included. Same reason as above.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                bn_t sig_s = "900e75ad233fcc908509dbff5922647db37c21f4afd3203ae8dc4ae7794b0f87";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of r misses leading 0
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323650000";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba0000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323650500";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba0500";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "02813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6df18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323e5";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb313a";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "f18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff00813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "ff6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478583b90deabca4b05c4574e49b5899b964a6";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e47858643b030ef461f1bcdf53fde3ef94ce224";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff7ec10863310565a908457fa0f1b87a7b01a0f22a0a9843f64aedc334367cdc9b";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a79bc4fcf10b9e0e4320ac021c106b31ddc";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe7ec10863310565a908457fa0f1b87a7c46f215435b4fa3ba8b1b64a766469b5a";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a7b01a0f22a0a9843f64aedc334367cdc9b";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b7fc1e197d8aebe203c96c87232272172fb";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "ff6ff18a52dcc0336f7af62400a6dd9b824c83de0b502cdfc51723b51886b4f079";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "900e75ad233fcc908509dbff5922647ef8cd450e008a7fff2909ec5aa914ce46";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "fe900e75ad233fcc908509dbff592264803e1e68275141dfc369378dcdd8de8d05";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "900e75ad233fcc908509dbff5922647ef8cd450e008a7fff2909ec5aa914ce46";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3235353835"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "35138c401ef8d3493d65c9002fe62b43aee568731b744548358996d9cc427e06";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "95c29267d972a043d955224546222bba343fc1d4db0fec262a33ac61305696ae";
                sig_s = "6edfe96713aed56f8a28a6653f57e0b829712e5eddc67f34682b24f0676b2640";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "28f94a894e92024699e345fe66971e3edcd050023386135ab3939d550898fb25";
                sig_s = "cd69c1a42be05a6ee1270c821479251e134c21858d800bda6f4e98b37196238e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "be26b18f9549f89f411a9b52536b15aa270b84548d0e859a1952a27af1a77ac6";
                sig_s = "8f3e2b05632fc33715572af9124681113f2b84325b80154c044a544dc1a8fa12";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "b1a4b1478e65cc3eafdf225d1298b43f2da19e4bcff7eacc0a2e98cd4b74b114";
                sig_s = "e8655ce1cfb33ebd30af8ce8e8ae4d6f7b50cd3e22af51bf69e0a2851760d52b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "325332021261f1bd18f2712aa1e2252da23796da8a4b1ff6ea18cafec7e171f2";
                sig_s = "40b4f5e287ee61fc3c804186982360891eaa35c75f05a43ecd48b35d984a6648";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "a23ad18d8fc66d81af0903890cbd453a554cb04cdc1a8ca7f7f78e5367ed88a0";
                sig_s = "dc1c14d31e3fb158b73c764268c8b55579734a7e2a2c9b5ee5d9d0144ef652eb";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "2bdea41cda63a2d14bf47353bd20880a690901de7cd6e3cc6d8ed5ba0cdb1091";
                sig_s = "c31599433036064073835b1e3eba8335a650c8fd786f94fe235ad7d41dc94c7a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "d7cd76ec01c1b1079eba9e2aa2a397243c4758c98a1ba0b7404a340b9b00ced6";
                sig_s = "ca8affe1e626dd192174c2937b15bc48f77b5bdfe01f073a8aeaf7f24dc6c85b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a872c744d936db21a10c361dd5c9063355f84902219652f6fc56dc95a7139d96";
                sig_s = "400df7575d9756210e9ccc77162c6b593c7746cfb48ac263c42750b421ef4bb9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "9fa9afe07752da10b36d3afcd0fe44bfc40244d75203599cf8f5047fa3453854";
                sig_s = "af1f583fec4040ae7e68c968d2bb4b494eec3a33edc7c0ccf95f7f75bc2569c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "885640384d0d910efb177b46be6c3dc5cac81f0b88c3190bb6b5f99c2641f205";
                sig_s = "738ed9bff116306d9caa0f8fc608be243e0b567779d8dab03e8e19d553f1dc8e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "2d051f91c5a9d440c5676985710483bc4f1a6c611b10c95a2ff0363d90c2a458";
                sig_s = "92206b19045a41a797cc2f3ac30de9518165e96d5b86341ecb3bcff231b3fd65";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "f3ac2523967482f53d508522712d583f4379cd824101ff635ea0935117baa54f";
                sig_s = "27f10812227397e02cea96fb0e680761636dab2b080d1fc5d11685cbe8500cfe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "96447cf68c3ab7266ed7447de3ac52fed7cc08cbdfea391c18a9b8ab370bc913";
                sig_s = "f0a1878b2c53f16e70fe377a5e9c6e86f18ae480a22bb499f5b32e7109c07385";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "530a0832b691da0b5619a0b11de6877f3c0971baaa68ed122758c29caaf46b72";
                sig_s = "93761bb0a14ccf9f15b4b9ce73c6ec700bd015b8cb1cfac56837f4463f53074e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "9c54c25500bde0b92d72d6ec483dc2482f3654294ca74de796b681255ed58a77";
                sig_s = "988bac394a90ad89ce360984c0c149dcbd2684bb64498ace90bcf6b6af1c170e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "e7909d41439e2f6af29136c7348ca2641a2b070d5b64f91ea9da7070c7a2618b";
                sig_s = "42d782f132fa1d36c2c88ba27c3d678d80184a5d1eccac7501f0b47e3d205008";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "5924873209593135a4c3da7bb381227f8a4b6aa9f34fe5bb7f8fbc131a039ffe";
                sig_s = "e0e44ee4bbe370155bf0bbdec265bf9fe31c0746faab446de62e3631eacd111f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "eeb692c9b262969b231c38b5a7f60649e0c875cd64df88f33aa571fa3d29ab0e";
                sig_s = "218b3a1eb06379c2c18cf51b06430786d1c64cd2d24c9b232b23e5bac7989acd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "a40034177f36091c2b653684a0e3eb5d4bff18e4d09f664c2800e7cafda1daf8";
                sig_s = "3a3ec29853704e52031c58927a800a968353adc3d973beba9172cbbeab4dd149";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "b5d795cc75cea5c434fa4185180cd6bd21223f3d5a86da6670d71d95680dadbf";
                sig_s = "ab1b277ef5ffe134460835e3d1402461ba104cb50b16f397fdc7a9abfefef280";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "07dc2478d43c1232a4595608c64426c35510051a631ae6a5a6eb1161e57e42e1";
                sig_s = "4a59ea0fdb72d12165cea3bf1ca86ba97517bd188db3dbd21a5a157850021984";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "ddd20c4a05596ca868b558839fce9f6511ddd83d1ccb53f82e5269d559a01552";
                sig_s = "a46e8cb8d626cf6c00ddedc3b5da7e613ac376445ee260743f06f79054c7d42a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "9cde6e0ede0a003f02fda0a01b59facfe5dec063318f279ce2de7a9b1062f7b7";
                sig_s = "2886a5b8c679bdf8224c66f908fd6205492cb70b0068d46ae4f33a4149b12a52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "c5771016d0dd6357143c89f684cd740423502554c0c59aa8c99584f1ff38f609";
                sig_s = "ab4bfa0bb88ab99791b9b3ab9c4b02bd2a57ae8dde50b9064063fcf85315cfe5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "a24ebc0ec224bd67ae397cbe6fa37b3125adbd34891abe2d7c7356921916dfe6";
                sig_s = "34f6eb6374731bbbafc4924fb8b0bdcdda49456d724cdae6178d87014cb53d8c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "2557d64a7aee2e0931c012e4fea1cd3a2c334edae68cdeb7158caf21b68e5a24";
                sig_s = "80f93244956ffdc568c77d12684f7f004fa92da7e60ae94a1b98c422e23eda34";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "c4f2eccbb6a24350c8466450b9d61b207ee359e037b3dcedb42a3f2e6dd6aeb5";
                sig_s = "cd9c394a65d0aa322e391eb76b2a1a687f8620a88adef3a01eb8e4fb05b6477a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "eff04781c9cbcd162d0a25a6e2ebcca43506c523385cb515d49ea38a1b12fcad";
                sig_s = "ea5328ce6b36e56ab87acb0dcfea498bcec1bba86a065268f6eff3c41c4b0c9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "f58b4e3110a64bf1b5db97639ee0e5a9c8dfa49dc59b679891f520fdf0584c87";
                sig_s = "d32701ae777511624c1f8abbf02b248b04e7a9eb27938f524f3e8828ba40164a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "f8abecaa4f0c502de4bf5903d48417f786bf92e8ad72fec0bd7fcb7800c0bbe3";
                sig_s = "4c7f9e231076a30b7ae36b0cebe69ccef1cd194f7cce93a5588fd6814f437c0e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "5d5b38bd37ad498b2227a633268a8cca879a5c7c94a4e416bd0a614d09e606d2";
                sig_s = "12b8d664ea9991062ecbb834e58400e25c46007af84f6007d7f1685443269afe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "0c1cd9fe4034f086a2b52d65b9d3834d72aebe7f33dfe8f976da82648177d8e3";
                sig_s = "13105782e3d0cfe85c2778dec1a848b27ac0ae071aa6da341a9553a946b41e59";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "ae7935fb96ff246b7b5d5662870d1ba587b03d6e1360baf47988b5c02ccc1a5b";
                sig_s = "5f00c323272083782d4a59f2dfd65e49de0693627016900ef7e61428056664b3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "a134b5c6ccbcefd4c882b945baeb4933444172795fa6796aae149067547098";
                sig_s = "a991b9efa2db276feae1c115c140770901839d87e60e7ec45a2b81cf3b437be6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "2e4721363ad3992c139e5a1c26395d2c2d777824aa24fde075e0d7381171309d";
                sig_s = "8bf083b6bbe71ecff22baed087d5a77eaeaf726bf14ace2c03fd6e37ba6c26f2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "6852e9d3cd9fe373c2d504877967d365ab1456707b6817a042864694e1960ccf";
                sig_s = "f9b4d815ebd4cf77847b37952334d05b2045cb398d4c21ba207922a7a4714d84";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "188a8c5648dc79eace158cf886c62b5468f05fd95f03a7635c5b4c31f09af4c5";
                sig_s = "36361a0b571a00c6cd5e686ccbfcfa703c4f97e48938346d0c103fdc76dc5867";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "a74f1fb9a8263f62fc4416a5b7d584f4206f3996bb91f6fc8e73b9e92bad0e13";
                sig_s = "6815032e8c7d76c3ab06a86f33249ce9940148cb36d1f417c2e992e801afa3fa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "07244865b72ff37e62e3146f0dc14682badd7197799135f0b00ade7671742bfe";
                sig_s = "f27f3ddc7124b1b58579573a835650e7a8bad5eeb96e9da215cd7bf9a2a039ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "da7fdd05b5badabd619d805c4ee7d9a84f84ddd5cf9c5bf4d4338140d689ef08";
                sig_s = "28f1cf4fa1c3c5862cfa149c0013cf5fe6cf5076cae000511063e7de25bb38e5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "d3027c656f6d4fdfd8ede22093e3c303b0133c340d615e7756f6253aea927238";
                sig_s = "f6510f9f371b31068d68bfeeaa720eb9bbdc8040145fcf88d4e0b58de0777d2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "0bf6c0188dc9571cd0e21eecac5fbb19d2434988e9cc10244593ef3a98099f69";
                sig_s = "4864a562661f9221ec88e3dd0bc2f6e27ac128c30cc1a80f79ec670a22b042ee";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ae459640d5d1179be47a47fa538e16d94ddea5585e7a244804a51742c686443a";
                sig_s = "6c8e30e530a634fae80b3ceb062978b39edbe19777e0a24553b68886181fd897";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "1cf3517ba3bf2ab8b9ead4ebb6e866cb88a1deacb6a785d3b63b483ca02ac495";
                sig_s = "249a798b73606f55f5f1c70de67cb1a0cff95d7dc50b3a617df861bad3c6b1c9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "e69b5238265ea35d77e4dd172288d8cea19810a10292617d5976519dc5757cb8";
                sig_s = "4b03c5bc47e826bdb27328abd38d3056d77476b2130f3df6ec4891af08ba1e29";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "5f9d7d7c870d085fc1d49fff69e4a275812800d2cf8973e7325866cb40fa2b6f";
                sig_s = "6d1f5491d9f717a597a15fd540406486d76a44697b3f0d9d6dcef6669f8a0a56";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "0a7d5b1959f71df9f817146ee49bd5c89b431e7993e2fdecab6858957da685ae";
                sig_s = "0f8aad2d254690bdc13f34a4fec44a02fd745a422df05ccbb54635a8b86b9609";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "79e88bf576b74bc07ca142395fda28f03d3d5e640b0b4ff0752c6d94cd553408";
                sig_s = "32cea05bd2d706c8f6036a507e2ab7766004f0904e2e5c5862749c0073245d6a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "9d54e037a00212b377bc8874798b8da080564bbdf7e07591b861285809d01488";
                sig_s = "18b4e557667a82bd95965f0706f81a29243fbdd86968a7ebeb43069db3b18c7f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "2664f1ffa982fedbcc7cab1b8bc6e2cb420218d2a6077ad08e591ba9feab33bd";
                sig_s = "49f5c7cb515e83872a3d41b4cdb85f242ad9d61a5bfc01debfbb52c6c84ba728";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "5827518344844fd6a7de73cbb0a6befdea7b13d2dee4475317f0f18ffc81524b";
                sig_s = "b0a334b1f4b774a5a289f553224d286d239ef8a90929ed2d91423e024eb7fa66";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "97ab19bd139cac319325869218b1bce111875d63fb12098a04b0cd59b6fdd3a3";
                sig_s = "bce26315c5dbc7b8cfc31425a9b89bccea7aa9477d711a4d377f833dcc28f820";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "52c683144e44119ae2013749d4964ef67509278f6d38ba869adcfa69970e123d";
                sig_s = "3479910167408f45bda420a626ec9c4ec711c1274be092198b4187c018b562ca";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "07310f90a9eae149a08402f54194a0f7b4ac427bf8d9bd6c7681071dc47dc362", "26a6d37ac46d61fd600c0bf1bff87689ed117dda6b0e59318ae010a197a26ca0" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22", "705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44ad339afbc21e9abf7b602a5ca535ea378135b6d10d81310bdd8293d1df3252", "00b63ff7d0774770f8fe1d1722fa83acd02f434e4fc110a0cc8f6dddd37d56c463" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1260c2122c9e244e1af5151bede0c3ae23b54d7c596881d3eebad21f37dd878c", "5c9a0c1a9ade76737a8811bd6a7f9287c978ee396aa89c11e47229d2ccb552f0" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1877045be25d34a1d0600f9d5c00d0645a2a54379b6ceefad2e6bf5c2a3352ce", "00821a532cc1751ee1d36d41c3d6ab4e9b143e44ec46d73478ea6a79a5c0e54159" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "455439fcc3d2deeceddeaece60e7bd17304f36ebb602adf5a22e0b8f1db46a50", "00aec38fb2baf221e9a8d1887c7bf6222dd1834634e77263315af6d23609d04f77" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "02";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2e1f466b024c0c3ace2437de09127fed04b706f94b19a21bb1c2acf35cece718", "0449ae3523d72534e964972cfd3b38af0bddd9619e5af223e4d1a40f34cf9f1d" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "03";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dda95d7b0698de5d2d0b4f0034dbe35b50f978fcc518a84abf9c99efd96a2530", "5adc08d6a63dbe831ab99cd9146e3c4c45492ad19521612542256d6af60e7888" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "02ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee77", "7eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584", "00b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "157f8fddf373eb5f49cfcf10d8b853cf91cbcd7d665c3522ba7dd738ddb79a4c", "00deadf1a5c448ea3c9f4191a8999abfcc757ac6d64567ef072c47fec613443b8f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0934a537466c07430e2c48feb990bb19fb78cecc9cee424ea4d130291aa237f0", "00d4f92d23b462804b5b68c52558c01c9996dbf727fccabbeedb9621a400535afa" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d6ef20be66c893f741a9bf90d9b74675d1c2a31296397acb3ef174fd0b300c65", "4a0c95478ca00399162d7f0f2dc89efdc2b28a30fbabe285857295a4b0c4e265" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7291d1404e0c0c07dab9372189f4bd58d2ceaa8d15ede544d9514545ba9ee06", "29c9a63d5e308769cc30ec276a410e6464a27eeafd9e599db10f053a4fe4a829" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bb79f61857f743bfa1b6e7111ce4094377256969e4e15159123d9548acc3be6c", "1f9d9f8860dcffd3eb36dd6c31ff2e7226c2009c4c94d8d7d2b5686bf7abd677" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d533b789a4af890fa7a82a1fae58c404f9a62a50b49adafab349c513b4150874", "01b4171b803e76b34a9861e10f7bc289a066fd01bd29f84c987a10a5fb18c2d4" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3a3150798c8af69d1e6e981f3a45402ba1d732f4be8330c5164f49e10ec555b4", "221bd842bc5e4d97eff37165f60e3998a424d72a450cf95ea477c78287d0343a" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b37df5fb347c69a0f17d85c0c7ca83736883a825e13143d0fcfc8101e851e80", "0de3c090b6ca21ba543517330c04b12f948c6badf14a63abffdf4ef8c7537026" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82c", "00e87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "238ced001cf22b8853e02edc89cbeca5050ba7e042a7a77f9382cd4149228976", "40683d3094643840f295890aa4c18aa39b41d77dd0fb3bb2700e4f9ec284ffc2" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00961cf64817c06c0e51b3c2736c922fde18bd8c4906fcd7f5ef66c4678508f35e", "00d2c5d18168cfbe70f2f123bd7419232bb92dd69113e2941061889481c5a027bf" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "13681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b10288", "16528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5aa7abfdb6b4086d543325e5d79c6e95ce42f866d2bb84909633a04bb1aa31c2", "0091c80088794905e1da33336d874e2f91ccf45cc59185bede5dd6f3f7acaae18b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e91e1ba6ba898620a46bcb51dc0b8b4ad1dc35dad892c4552d1847b2ce444637";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "277791b305a45b2b39590b2f05d3392a6c8182cef4eb540120e0f5c206c3e4", "64108233fb0b8c3ac892d79ef8e0fbf92ed133addb4554270132584dc52eef41" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e36bf0cec06d9b841da81332812f74f30bbaec9f202319206c6f0b8a0a400ff7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6efa092b68de9460f0bcc919005a5f6e80e19de98968be3cd2c770a9949bfb1a", "00c75e6e5087d6550d5f9beb1e79e5029307bc255235e2d5dc99241ac3ab886c49" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ea26b57af884b6c06e348efe139c1e4e9ec9518d60c340f6bac7d278ca08d8a6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "72d4a19c4f9d2cf5848ea40445b70d4696b5f02d632c0c654cc7d7eeb0c6d058", "00e8c4cd9943e459174c7ac01fa742198e47e6c19a6bdb0c4f6c237831c1b3f942" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5b1d27a7694c146244a5ad0bd0636d9d9ef3b9fb58385418d9c982105077d1b7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a8ea2f50dcced0c217575bdfa7cd47d1c6f100041ec0e35512794c1be7e7402", "58f8c17122ed303fda7143eb58bede70295b653266013b0b0ebd3f053137f6ec" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d27a7694c146244a5ad0bd0636d9e12abe687897e8e9998ddbd4e59a78520d0f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0088de689ce9af1e94be6a2089c8a8b1253ffdbb6c8e9c86249ba220001a4ad3b8", "0c4998e54842f413b9edb1825acbb6335e81e4d184b2b01c8bebdc85d1f28946" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "a4f4ed29828c4894b5a17a0c6db3c256c2221449228a92dff7d76ca8206dd8dd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fea2d31f70f90d5fb3e00e186ac42ab3c1615cee714e0b4e1131b3d4d8225bf7", "00b037a18df2ac15343f30f74067ddf29e817d5f77f8dce05714da59c094f0cda9" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "694c146244a5ad0bd0636d9e12bc9e09e60e68b90d0b5e6c5dddd0cb694d8799";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7258911e3d423349166479dbe0b8341af7fbd03d0a7e10edccb36b6ceea5a3db", "17ac2b8992791128fa3b96dc2fbd4ca3bfa782ef2832fc6656943db18e7346b0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3d7f487c07bfc5f30846938a3dcef696444707cf9677254a92b06c63ab867d22";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f28461dea64474d6bb34d1499c97d37b9e95633df1ceeeaacd45016c98b3914", "00c8818810b8cc06ddb40e8a1261c528faa589455d5a6df93b77bc5e0e493c7470" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6c7648fc0fbf8a06adb8b839f97b4ff7a800f11b1e37c593b261394599792ba4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "74f2a814fb5d8eca91a69b5e60712732b3937de32829be974ed7b68c5c2f5d66", "00eff0f07c56f987a657f42196205f588c0f1d96fd8a63a5f238b48f478788fe3b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9be363a286f23f6322c205449d320baad417953ecb70f6214e90d49d7d1f26a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "195b51a7cc4a21b8274a70a90de779814c3c8ca358328208c09a29f336b82d6a", "00b2416b7c92fffdc29c3b1282dd2a77a4d04df7f7452047393d849989c5cee9ad" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "29798c5c45bdf58b4a7b2fdc2c46ab4af1218c7eeb9f0f27a88f1267674de3b0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "622fc74732034bec2ddf3bc16d34b3d1f7a327dd2a8c19bab4bb4fe3a24b58aa", "736b2f2fae76f4dfaecc9096333b01328d51eb3fda9c9227e90d0b449983c4f0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "0b70f22ca2bb3cefadca1a5711fa3a59f4695385eb5aedf3495d0b6d00f8fd85";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f7f85caf2d7550e7af9b65023ebb4dce3450311692309db269969b834b611c7", "0827f45b78020ecbbaf484fdd5bfaae6870f1184c21581baf6ef82bd7b530f93" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "16e1e459457679df5b9434ae23f474b3e8d2a70bd6b5dbe692ba16da01f1fb0a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49c197dc80ad1da47a4342b93893e8e1fb0bb94fc33a83e783c00b24c781377a", "00efc20da92bac762951f72474becc734d4cc22ba81b895e282fdac4df7af0f37d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2252d685e831b6cf095e4f0535eeaf0ddd3bfa91c210c9d9dc17224702eaf88f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d8cb68517b616a56400aa3868635e54b6f699598a2f6167757654980baf6acbe", "7ec8cf449c849aa03461a30efada41453c57c6e6fbc93bbc6fa49ada6dc0555c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "75135abd7c425b60371a477f09ce0f274f64a8c6b061a07b5d63e93c65046c53";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "030713fb63f2aa6fe2cadf1b20efc259c77445dafa87dac398b84065ca347df3", "00b227818de1a39b589cb071d83e5317cccdc2338e51e312fe31d8dc34a4801750" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00babb3677b0955802d8e929a41355640eaf1ea1353f8a771331c4946e3480afa7", "252f196c87ed3d2a59d3b1b559137fed0013fecefc19fb5a92682b9bca51b950" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1aab2018793471111a8a0e9b143fde02fc95920796d3a63de329b424396fba60", "00bbe4130705174792441b318d3aa31dfe8577821e9b446ec573d272e036c4ebe9" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cb0b909499c83ea806cd885b1dd467a0119f06a88a0276eb0cfda274535a8ff", "47b5428833bc3f2c8bf9d9041158cf33718a69961cd01729bc0011d1e586ab75" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008f03cf1a42272bb1532723093f72e6feeac85e1700e9fbe9a6a2dd642d74bf5d", "3b89a7189dad8cf75fc22f6f158aa27f9c2ca00daca785be3358f2bda3862ca0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44de3b9c7a57a8c9e820952753421e7d987bb3d79f71f013805c897e018f8ace", "00a2460758c8f98d3fdce121a943659e372c326fff2e5fc2ae7fa3f79daae13c12" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6fb8b2b48e33031268ad6a517484dc8839ea90f6669ea0c7ac3233e2ac31394a", "0ac8bbe7f73c2ff4df9978727ac1dfc2fd58647d20f31f99105316b64671f204" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bea71122a048693e905ff602b3cf9dd18af69b9fc9d8431d2b1dd26b942c95e6", "00f43c7b8b95eb62082c12db9dbda7fe38e45cbe4a4886907fb81bdb0c5ea9246c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00da918c731ba06a20cb94ef33b778e981a404a305f1941fe33666b45b03353156", "00e2bb2694f575b45183be78e5c9b5210bf3bf488fd4c8294516d89572ca4f5391" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3007e92c3937dade7964dfa35b0eff031f7eb02aed0a0314411106cdeb70fe3d", "5a7546fc0552997b20e3d6f413e75e2cb66e116322697114b79bac734bfc4dc5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60e734ef5624d3cbf0ddd375011bd663d6d6aebc644eb599fdf98dbdcd18ce9b", "00d2d90b3ac31f139af832cccf6ccbbb2c6ea11fa97370dc9906da474d7d8a7567" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0085a900e97858f693c0b7dfa261e380dad6ea046d1f65ddeeedd5f7d8af0ba337", "69744d15add4f6c0bc3b0da2aec93b34cb8c65f9340ddf74e7b0009eeeccce3c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "38066f75d88efc4c93de36f49e037b234cc18b1de5608750a62cab0345401046", "00a3e84bed8cfcb819ef4d550444f2ce4b651766b69e2e2901f88836ff90034fed" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0098f68177dc95c1b4cbfa5245488ca523a7d5629470d035d621a443c72f39aabf", "00a33d29546fa1c648f2c7d5ccf70cf1ce4ab79b5db1ac059dbecd068dbdff1b89" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5c2bbfa23c9b9ad07f038aa89b4930bf267d9401e4255de9e8da0a5078ec8277", "00e3e882a31d5e6a379e0793983ccded39b95c4353ab2ff01ea5369ba47b0c3191" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "3547808298448edb5e701ade84cd5fb1ac9567ba5e8fb68a6b933ec4b5cc84cc" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "00cab87f7d67bb7124a18fe5217b32a04e536a9845a1704975946cc13a4a337763" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aa2c64fa9c6437563abfbcbd00b2048d48c18c152a2a6f49036de7647ebe82e", "1ce64387995c68a060fa3bc0399b05cc06eec7d598f75041a4917e692b7f51ff" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "391427ff7ee78013c14aec7d96a8a062209298a783835e94fd6549d502fff71f", "00dd6624ec343ad9fcf4d9872181e59f842f9ba4cccae09a6c0972fb6ac6b4c6bd" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138e", "00c1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952", "00fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008ad445db62816260e4e687fd1884e48b9fc0636d031547d63315e792e19bfaee", "1de64f99d5f1cd8b6ec9cb0f787a654ae86993ba3db1008ef43cff0684cb22bd" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f5799c95be89063b24f26e40cb928c1a868a76fb0094607e8043db409c91c32", "00e75724e813a4191e3a839007f08e2e897388b06d4a00de6de60e536d91fab566" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a3331a4e1b4223ec2c027edd482c928a14ed358d93f1d4217d39abf69fcb5ccc", "28d684d2aaabcd6383775caa6239de26d4c6937bb603ecb4196082f4cffd509d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3f3952199774c7cf39b38b66cb1042a6260d8680803845e4d433adba3bb24818", "5ea495b68cbc7ed4173ee63c9042dc502625c7eb7e21fb02ca9a9114e0a3a18d" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e", "054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "73598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3", "00cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "58debd9a7ee2c9d59132478a5440ae4d5d7ed437308369f92ea86c82183f10a1", "6773e76f5edbf4da0e4f1bdffac0f57257e1dfa465842931309a24245fda6a5d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008b904de47967340c5f8c3572a720924ef7578637feab1949acb241a5a6ac3f5b", "00950904496f9824b1d63f3313bae21b89fae89afdfc811b5ece03fd5aa301864f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f4892b6d525c771e035f2a252708f3784e48238604b4f94dc56eaa1e546d941a", "346b1aa0bce68b1c50e5b52f509fb5522e5c25e028bc8f863402edb7bcad8b1b" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "f80ae4f96cdbc9d853f83d47aae225bf407d51c56b7776cd67d0dc195d99a9dc";
                bn_t sig_s = "b303e26be1f73465315221f0b331528807a1a9b6eb068ede6eebeaaa49af8a36";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "109cd8ae0374358984a8249c0a843628f2835ffad1df1a9a69aa2fe72355545c";
                sig_s = "ac6f00daf53bd8b1e34da329359b6e08019c5b037fed79ee383ae39f85a159c6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "d035ee1f17fdb0b2681b163e33c359932659990af77dca632012b30b27a057b3";
                sig_s = "1939d9f3b2858bc13e3474cb50e6a82be44faa71940f876c1cba4c3e989202b6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "4f053f563ad34b74fd8c9934ce59e79c2eb8e6eca0fef5b323ca67d5ac7ed238";
                sig_s = "4d4b05daa0719e773d8617dce5631c5fd6f59c9bdc748e4b55c970040af01be5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6d6a4f556ccce154e7fb9f19e76c3deca13d59cc2aeb4ecad968aab2ded45965";
                bn_t sig_s = "53b9fa74803ede0fc4441bf683d56c564d3e274e09ccf47390badd1471c05fb7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "aad503de9b9fd66b948e9acf596f0a0e65e700b28b26ec56e6e45e846489b3c4";
                sig_s = "fff223c5d0765447e8447a3f9d31fd0696e89d244422022ff61a110b2a8c2f04";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "9182cebd3bb8ab572e167174397209ef4b1d439af3b200cdf003620089e43225";
                sig_s = "abb88367d15fe62d1efffb6803da03109ee22e90bc9c78e8b4ed23630b82ea9d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3854a3998aebdf2dbc28adac4181462ccac7873907ab7f212c42db0e69b56ed8";
                bn_t sig_s = "c12c09475c772fd0c1b2060d5163e42bf71d727e4ae7c03eeba954bf50b43bb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "e94dbdc38795fe5c904d8f16d969d3b587f0a25d2de90b6d8c5c53ff887e3607";
                sig_s = "856b8c963e9b68dade44750bf97ec4d11b1a0a3804f4cb79aa27bdea78ac14e4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "49fc102a08ca47b60e0858cd0284d22cddd7233f94aaffbb2db1dd2cf08425e1";
                sig_s = "5b16fca5a12cdb39701697ad8e39ffd6bdec0024298afaa2326aea09200b14d6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "41efa7d3f05a0010675fcb918a45c693da4b348df21a59d6f9cd73e0d831d67a";
                bn_t sig_s = "bbab52596c1a1d9484296cdc92cbf07e665259a13791a8fe8845e2c07cf3fc67";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "b615698c358b35920dd883eca625a6c5f7563970cdfc378f8fe0cee17092144c";
                sig_s = "da0b84cd94a41e049ef477aeac157b2a9bfa6b7ac8de06ed3858c5eede6ddd6d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "87cf8c0eb82d44f69c60a2ff5457d3aaa322e7ec61ae5aecfd678ae1c1932b0e";
                sig_s = "c522c4eea7eafb82914cbf5c1ff76760109f55ddddcf58274d41c9bc4311e06e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "62f48ef71ace27bf5a01834de1f7e3f948b9dce1ca1e911d5e13d3b104471d82";
                bn_t sig_s = "a1570cc0f388768d3ba7df7f212564caa256ff825df997f21f72f5280d53011f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f6b0e2f6fe020cf7c0c20137434344ed7add6c4be51861e2d14cbda472a6ffb4";
                sig_s = "9be93722c1a3ad7d4cf91723700cb5486de5479d8c1b38ae4e8e5ba1638e9732";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "db09d8460f05eff23bc7e436b67da563fa4b4edb58ac24ce201fa8a358125057";
                sig_s = "46da116754602940c8999c8d665f786c50f5772c0a3cdbda075e77eabc64df16";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "592c41e16517f12fcabd98267674f974b588e9f35d35406c1a7bb2ed1d19b7b8";
                bn_t sig_s = "c19a5f942607c3551484ff0dc97281f0cdc82bc48e2205a0645c0cf3d7f59da0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "be0d70887d5e40821a61b68047de4ea03debfdf51cdf4d4b195558b959a032b2";
                sig_s = "8266b4d270e24414ecacb14c091a233134b918d37320c6557d60ad0a63544ac4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fae92dfcb2ee392d270af3a5739faa26d4f97bfd39ed3cbee4d29e26af3b206a";
                sig_s = "93645c80605595e02c09a0dc4b17ac2a51846a728b3e8d60442ed6449fd3342b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "176a2557566ffa518b11226694eb9802ed2098bfe278e5570fe1d5d7af18a943";
                bn_t sig_s = "ed6e2095f12a03f2eaf6718f430ec5fe2829fd1646ab648701656fd31221b97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "60be20c3dbc162dd34d26780621c104bbe5dace630171b2daef0d826409ee5c2";
                sig_s = "bd8081b27762ab6e8f425956bf604e332fa066a99b59f87e27dc1198b26f5caa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "edf03cf63f658883289a1a593d1007895b9f236d27c9c1f1313089aaed6b16ae";
                sig_s = "e5b22903f7eb23adc2e01057e39b0408d495f694c83f306f1216c9bf87506074";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha512_p1363_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha512_p1363_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                bn_t sig_s = "34d2f1a567d7e647b178552dec35875a2cc61df3ce8ae2c1357ea8c5ff505561";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "016cb914246e1c92050a03d9b0b4f05dde199ab6bf23cec3a120f56da5843de32a";
                sig_s = "00cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "9346ebdb91e36dfaf5fc264f4b0fa21f5bc3030e3ac27cd65eaf4f741c2e9f58";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "016cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "00cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "9346ebdb91e36dfaf5fc264f4b0fa220a11426278b79dc9a9edcf0e74bf85e17";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "006cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "01cb2d0e5a982819b84e87aad213ca78a348979bd990065db64a261453a11c2d21";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "006cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "01cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "34d2f1a567d7e647b178552dec35875b7217410d1f42428575ac4a392f1a1420";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000000";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "313236373939"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "2c8a79b49cae4ec15d293575a5a1af5b4d6efb74ef5c2c1be34e33cdeb7113cc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439313934313732"_hex;
                sig_r = "d743c5d76e1193a57438f1b43b1b0e33d0d1ab15bd3d57a5cf6aebb370d46ce0";
                sig_s = "7df27cb730b33dfe01e34a0067e548a98c56846d9a4cd64a930c96bfd917cf08";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333637363431383737"_hex;
                sig_r = "ba30f4ddf3348f26835e9c50f6a2d5023a9a1f5fe2e9cf14b3270015dac283fe";
                sig_s = "1d1616abb204f615fbe99860d89158c3264182d617ac9f1560fa8291b349d579";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363731343831303935"_hex;
                sig_r = "551d72e63f7b27283c4107f7d851f387b60f3f4713a5d35c21fa332fbeed4494";
                sig_s = "80914cc37a3fe13a74db7fcc5226388d95034a50a89a9b2fe9bf42ea29e5714d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323037313732393039"_hex;
                sig_r = "80cead3d165ce05c7cf8469f1c35c5a3a641696c843bef0f022a6c68133dc49e";
                sig_s = "ea8409d743a4ad5e136207736c3ad79c8cfc7b57ebd1bd9b8a596670ad12d41c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323938303334323336"_hex;
                sig_r = "bbc0e8b7721065a51bac9c3aad64168998cc0efa23298340d436867cc86ba847";
                sig_s = "ae3baa131a83153cb31de2f758e45139f62fe6cc9ce3941c6b1789dc1010f3e2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383736303239363833"_hex;
                sig_r = "3a5ba93917b954617b40e1d866860d1522b0d310cac2457636e54e2ffdea888e";
                sig_s = "3eac6fe762aee127837c2c65fd9c1f65b404b2c31bb945e75d6166503fb5c8bd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230323034323936353139"_hex;
                sig_r = "647f2b4bef6d1ea7908ac5f3dfd705494c2587456557805fe64a703b2b17503c";
                sig_s = "20e164bbb505c6df56455908008cf9626df320f48aa3fc9d0cc8ad8bcf078cb2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343531363639313830"_hex;
                sig_r = "8aa653cfa001798c471eea3199dc975a4dea4f7c1ede47453409e606d05ceb51";
                sig_s = "cab20967a056c0ea7fe9cdf8e1980f55b1597a2dad80c9223a0fab15c314fe6d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303933363835393531"_hex;
                sig_r = "842e421f33be241d27f12f875355902a25819f210b3685ad536e23594012d9d0";
                sig_s = "4fb894ae0e9c24b6ed280e224ab0811469296a9837d1e95b5d9d661d21a1c255";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323139353630323031"_hex;
                sig_r = "0b703fd75bdd8dce4820fe130a0b0af17aad4e4681b0254864d5d6f8931ff573";
                sig_s = "404521acf84e72ff22c2ee05d14a4bc7b70e69adc78caf81350e01379694c3e8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363832343734333033"_hex;
                sig_r = "62f0df1650560a5800fa670377a4317a604d6475c490066ce15638f8d1330b63";
                sig_s = "963edf905197096818368a993fbffe32908a57153e6a1612bae6ee9ee8a8a719";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373336353331373836"_hex;
                sig_r = "2901ade694d4b9c376b3244018e57bcde7057e8e11dd0f7d07080cdd1a39194b";
                sig_s = "ee65a4c2baa70f8e236ceba9eed400d899f75276f94e4b7997b2b01ac008bbbc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373935393033373932"_hex;
                sig_r = "aa9c8e5311b232b4ce9db03892f26eb77d655c6ff09a599424abbd4b11e750be";
                sig_s = "c1034c44b02e2fdf05e1ba5eebdf954c5a01794600059e05e5c73d542da3ee38";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333939363131303037"_hex;
                sig_r = "2febea016e55059e91e157b988f86048db57c37fd122f5cc60169ff4fcb4863c";
                sig_s = "eb19cbc35b3061e1ac4b59b92d1f732cea3212dcbe943ccad82d32740bc22c33";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303837343931313835"_hex;
                sig_r = "2be463ff06af2096dd62f0326e1af51c585f18ca8f8aa361dedcf55d543e6b7d";
                sig_s = "f56afd59dad42530d94f11c59a6408c54826b7a9ef83f4d020f209d71f9b74c5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323336363738353030"_hex;
                sig_r = "f61f64defc45abe284b39161b49585f21edef1e88d06389e5b5aacbb394ce4dc";
                sig_s = "a5a27e17df10aedace97eb2c48659f69b58cfe76a1f1ac30fea3043655bde515";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343438393937373033"_hex;
                sig_r = "052134eae13c1dec5ac5aa46186391786f5b60591cb0dd30bfc61e89486abfe2";
                sig_s = "09cdaa279c4f0d3d5ae00e0d74e733a260b8b120a1bda7e5a90194ec442e592d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373134363332383037"_hex;
                sig_r = "24824614686b80f3b738970a27816f58cf103c4a93c2d6b0f5f6de65a65501e3";
                sig_s = "180e5801a593063e75b83cd7ab8e52575a013a1be5cdeeb05b30e3ac9dc4ed82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323236343837343932"_hex;
                sig_r = "2ff7a5ab2f1a3323651a0d17c4263672ee4d2c560cda94e7d52ee755138bb045";
                sig_s = "542ce83d8d9d441357e24b618b5695164d4391791cff62eeb01609d1d7cb1c0a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333533343439343739"_hex;
                sig_r = "ae446d1a81766d21dd7fc515d0a956605d0cde26d6086a76f8ffc81a6dfbea46";
                sig_s = "4fccef9f75e94abc7eb3f2bdcafdc5d97d61b9d950a06010ab4c54e3da7fd4e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373837333033383830"_hex;
                sig_r = "3957cff4a75fc6039c0b0c2e47eb9b07ff6ec5dc8a3c3316590a7ec9a1d7d993";
                sig_s = "4e578ee6594a00cb80c640cb9589d616dbd1cecda2d15dcc0062f30686d6073b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332313935383233"_hex;
                sig_r = "437c36031737a3140dc30eed281adac8e9074187aad41502a3b9a3bfd4ef252c";
                sig_s = "da13f88f633202b9b9517b93a6c08a7b8e6858734e8894b1a64c6ec08f1d0423";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130373339333931393137"_hex;
                sig_r = "828c12fd9fe31f91bd8f58aac72ee6485e34ceddf91927cf3a09b63363b9d8e9";
                sig_s = "0e889664a8c98619cab572687064edb4f0500f8324a5df0bfb5a431a3cb1ca39";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383831303237333135"_hex;
                sig_r = "807cb34aa6ea48b175f41f3afdf70a109d2b746ae48e08677cdafc33d916b2da";
                sig_s = "41980e6f7ad19944d278851f98e0a6220ae888964ae81a667a63fec21449334d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36303631363933393037"_hex;
                sig_r = "a998f9f0daf02f717f5292142dca447c722d2394dae0c84910433754669716ac";
                sig_s = "826fc37269539cf8a98997f8a0268bfffe888d6c23bc68ad7c759db47f65a925";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38383935323237303934"_hex;
                sig_r = "f151b614afe5bc9d511d0c34a7eb44283921272e91b3e5d02821cf7a43a92bc5";
                sig_s = "097aa33dc50ebf8fea036cd7e224a4d38aa20773e5a78ddb83a2f3b579b2ef6c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353830323334303934"_hex;
                sig_r = "5f21585381f5f42e9f76be3f61f4cfd6476ecc6f06cd4fbcf13e08c27f426148";
                sig_s = "95d5b2deabf19891edd41ac52d9072fadebb2f0145bec9b916f68fd1fbcfb3cf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393635393931353132"_hex;
                sig_r = "bdc361e68984482d7b169bc5e6ccf82d2263871be749d67a44f548d32bcaf5f1";
                sig_s = "375614fa4134d5055ac117a6ea948b74269b8063e39259d494a7544afb6291ab";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323838373332313938"_hex;
                sig_r = "5773b016dffac865ab008abe8a06353d197b4dff32403d7ce98ada4d20ea8a00";
                sig_s = "d60de9c98cf50eff0515b962dffd6aac8a1b72bc9cfaf6bda12b99f63eb976d2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323330383837333139"_hex;
                sig_r = "57b747d21fc898472a888b88693a989eabaf143396e4cb2de4af19386fba384f";
                sig_s = "7c99f63904191a4464d0d23ca560d5558895cdcff93af4b00c1c66ca2d974393";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313239303536393337"_hex;
                sig_r = "854be2bf302a2d6db437eb9e78703673c1c7371399e68caa8625bb13c7aa0fec";
                sig_s = "8fd22607e0169eb2e2e00c4af898fd2a609dc57a9fa94a7f93372098fa675649";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373438363536343338"_hex;
                sig_r = "ebb3359de3b13a518545a86b7fdd92f4793225b8ca4555a6bd4182922b0452be";
                sig_s = "83faa7dff1aa0eed89a7ddcdaa5d716ba6253c5c21f7122c2755eb78b28884c4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353833353032363034"_hex;
                sig_r = "8bc91cfcfc85ba8aa171b703a330e398df4460d22602e73e327423ebf98bf632";
                sig_s = "ec7569072aa73ff19f183daf433abff142d7d5edceb25b771d853acf0fbd68b6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333237373534323739"_hex;
                sig_r = "895b07c0450ed6f4941633a053c978128c46e5225c00eb009c3c6cee5eb2b842";
                sig_s = "c982818b260f1650e03eba8f9db1a2ca79c3f804dbe7d172233260e1a9c10640";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373735353038353834"_hex;
                sig_r = "d5e152ec304090d764fd7ae61abeeadff2fee8df3dccd8fb44d2af5a8dbee0bc";
                sig_s = "72518dc1ecc993faadffc3426594fe2024c7c84ba101a9274d88009393103ff6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137393832363438333832"_hex;
                sig_r = "1298b131ce97a528e5dae05d92b286e2447b17ec002267b9e8f03784d4074bd1";
                sig_s = "edf223ad9c308aef22e1e0c24a20268f966cc2b9ca4d941945bbca057db92d4c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333936373737333635"_hex;
                sig_r = "1e79b3921d23d290a57d08958d3ad8305ec444efe1281c98fda44e8af7648f49";
                sig_s = "f4c7610ad1ba9339178c50e7979b5aa9af07d8143e59d13a2e84f98f37101e3b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393938313035383031"_hex;
                sig_r = "e455f464e0edff9c959f84f081828896149a330361ff2d16d5a2448c9d683684";
                sig_s = "351cfa2f29a1318ebb3a46f0a36df8954043949b8d7cea94eacf99108b4d3fa0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136363737383237303537"_hex;
                sig_r = "a885770c9ffef33f0c11245064936e3dd165ea2633575a6a155368670351f726";
                sig_s = "de31e6a58626a41fd029cf766ef44b8273b88558e2452e893978fbdda1e321d1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323036323134333632"_hex;
                sig_r = "4b6b451478ba253ae3c75ca5b18b70ccd3cca408ed245cb2af3369548dd2e507";
                sig_s = "fe479b631a3431b42772925cbfe8e789f9c55fb2fd1d7ab51664cc2fa571ad93";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383432343936303435"_hex;
                sig_r = "7ca70376547ad6d18f8e539f09dc269ebaa06854c1adacd58fdc735ed3cf0c16";
                sig_s = "f47654f4c0ac1b0e65b712300e3bb472983b116db5206520eabd886dc706b266";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323639383937333231"_hex;
                sig_r = "388514d147664fbb37271cb8693e47459c0627d6b1dd52dff1d3947dfc9cabec";
                sig_s = "99d3d40814aa177be99e4819696996bc75073f4518955587cd56b5ad8bbc2c58";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333837333234363932"_hex;
                sig_r = "44d3ac50d9b65601d79b47d6c5d98394cef155211ff37d4bac15e0d4890809b8";
                sig_s = "3ea03829afb0545e088361a8cf952aec17bab7637fddd6db35f039803523c921";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313138383837353336"_hex;
                sig_r = "a33004a2cd50a4f70447fd382e7fdc9257c4d9be7b16e686c5082a231ee7b010";
                sig_s = "d87b96ed3beea54652607017702cfce5d4e7fcec1fdd28f41681ab80a5c5b63c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838363036353435"_hex;
                sig_r = "668ad18cc22c1d1498cc8e5a11e2bfc4c1e1fcf0a7350a5806c5533ae332f0b1";
                sig_s = "f58b49369771bd20bb08b63d4a9212e2dc71da9257ed3710d9eaef9bee469eb2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343739313135383435"_hex;
                sig_r = "f7cdcb0281c70786cc3653820d1756a78395a9eeeab2a4d164e260f64ebfd6a8";
                sig_s = "d966c74499cac97ca8ee67400df01b14793b6d7d07668fc202a9918f3c046e9b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303736383837333637"_hex;
                sig_r = "de0e781d9e3e7f73021458fc1201fc021e5c54f1fe40b1b10db8fcf16ef7e54a";
                sig_s = "7d9db92321b5e5bb105990145390979390d32394116f4e78af34b85105dee8e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838353036393637"_hex;
                sig_r = "011dac8ea37f7bc6a530a42d0e3bec8c845694f73bec6950081a6f999ccdfbc6";
                sig_s = "153e57ee45e0a379839f3b8f6faf86de7a626b210f4c1007e431f842e39bf7d5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373231333036313331"_hex;
                sig_r = "63f9c43a8cab49f518685a120bd73a4e5956f9f167a78d4661fc795d41be2ae1";
                sig_s = "6aaf4f3384f1489ef026cb29e97ea1b5562fe8ceb9978d506fb7064f427b9f31";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323034313031363535"_hex;
                sig_r = "7f0fd3736166195ba810d5a2dfb5e1f03aece2170510c8aa4cc4a0c974a7c5d6";
                sig_s = "370c8772a75d32e8c9cc103004e75e6d30a8ac8611b84b89c41c65542171bc5b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530363830393530"_hex;
                sig_r = "f975196086d10f683f4aa1a3c2d5fe13fd0f52ee72aa3f785006aa024c758735";
                sig_s = "6a66364156ef21b5dfdcee60cce8fb09c12019bc576848ff73db49856af74681";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373237343630313033"_hex;
                sig_r = "35fe6d9bf9f7d47612c3f5be6a4e9a0fb0c14854d1a377adfb5485d6e3835c6f";
                sig_s = "f96587fc460e7d07396f9f2d060693dae632721259e77c90b8314002a5235dd0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134353731343631323235"_hex;
                sig_r = "210c7c9b231293c8ec09b0f610d31724a045f6a33f84423fdd541ac11ff78962";
                sig_s = "e5a40e6b80da99cfc49ce969f1f59146835183e61001b4513f927b71ec3b2a13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313739353136303930"_hex;
                sig_r = "09b7dcfad2c84b89825cf3aaaffed51664faccc0d171a43387a6ff98aa128a04";
                sig_s = "272b00e6e0917afe4fbe782604428e09fd91c38125d51c3ba06ce3198e6bf736";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383932373133303534"_hex;
                sig_r = "09c7c99681c9159b22c0a467999559a31e279075d37ef872a88ae13565f6149b";
                sig_s = "b0ff953be1940d2cf548663c1b4db7b416521db289467733b9a76629f8ab261f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383936313832323937"_hex;
                sig_r = "2bfaae0ea6d8baab3e02ad7fa3dda3ce0725d11533e3666477f54d697e2ca9bc";
                sig_s = "9289d5da443395bca18fe9d1a4afbe04a32b4ecd258eca6c1772acff2d0b9a89";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38323833333436373332"_hex;
                sig_r = "368846edc677ae8fc237069cda719af3d7f17cc136fe443b2af614ccfb4844ab";
                sig_s = "5ebe6c1d3e88bc4e291841ea97c836bdcf67d9eabe926346c5f42105f7b38f67";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333636393734383931"_hex;
                sig_r = "f336da82bea2a111bddef6a25de4ab87d7c95aa80d21838f3a4efa3d9346555d";
                sig_s = "da5ab612b327aa0fe95d1caf85f3b6698c23a47212006c5667cfa92aa3ef4dad";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313939313533323239"_hex;
                sig_r = "97c2fb9865f9e76f8d54ce957120b68ccb04cd3183dae7130f73139cd56655cf";
                sig_s = "fb63e38176ffac37d0ec1e49c2e2efeff04dffdad5a75f3576f8276cccee9851";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363030333136383232"_hex;
                sig_r = "7393e0207e07bd73b674d3667dfbc9c30022574d63079a040a23c0cd7e1b6aa6";
                sig_s = "2994b3468432fecd0a32134171179d2809244d586bd971129cdba73fd3dc8876";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383639363531363935"_hex;
                sig_r = "21e1943d7d396a8c46658bede4ce155c9a06f929cf6ad292d32c91cf8f493887";
                sig_s = "30783c682cebfffec5787d762bd725bafc9c4075ad8eb1582188f4c05dd5169d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353833393236333732"_hex;
                sig_r = "5a269eb44e910bfe8a2656dee47556cb908a417917e2068e20d201721f44f9b1";
                sig_s = "e69d463204dce77c249439f22f77cc4c88134012a286b36a9559f694203766c6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133323035303135373235"_hex;
                sig_r = "cb8c146fb3d58846e5748c48742af2f1b77805f6cd1e4eb98d8c66cbdf5d6455";
                sig_s = "17ac992e10251e334467f8e57e2e1c269db8b19469321c74b443972a80f38b2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303835333330373931"_hex;
                sig_r = "212d84a153db81cea5212fa7dee31d59bdca1307277a01b5936c3aead31bf1e4";
                sig_s = "520305dbef2bda6526fa2cfca789a1c9aca5c2ad4c0027cc8cf3881813da8a72";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383636383133313139"_hex;
                sig_r = "310c82892f571134a36725f4a31c5cba8bc46e65002d73b11364084433d8da4a";
                sig_s = "9ca552aca84b96cc9461e2b65a64975118ea78b8b355a0ebcc1a61de37877d13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303832353339343239"_hex;
                sig_r = "489deda580c62533783df9fe62de34c2e2cab91d676709beeff13afac8e90db9";
                sig_s = "32a85a9c56f308b7a794dcce614a5ed7e0857030b8429fe3b4e07ad533a5a00a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130303635393536363937"_hex;
                sig_r = "e8897c1cad1fc870a7d364676a9d7f7cd3ac951f3bc3a9ef1f7231466c3493d7";
                sig_s = "dd2128e876d62da82cfc5fc508d33bf66b71c0a84d0a9b7e47dfc620f5846bc6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303234313831363034"_hex;
                sig_r = "b4d771d19fffb1fe5ead25ef5dbf6b53d4d3dad284641108ad84b2541ad435a4";
                sig_s = "843ecdc2641b33a3ae9ae15d559f6229d7304ee5ecabe00db73bf2b6b5c6c21f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373637383532383734"_hex;
                sig_r = "5ab5fb3136fabdbd22009642df03685935819895d675fc284e8b8112db522d08";
                sig_s = "d87ec88173e823ed70438fb1088b00689352542fabad5e9fd6d4c3c58f722f86";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353434313939393734"_hex;
                sig_r = "be310120169f8d488c6e5ec5b5e588ab8a65040169d9efd3062e0d05fd7d58df";
                sig_s = "45033f291fa21a85cc08f78fec2dbd94135520de261360728b8743b558ed16f8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383433343830333931"_hex;
                sig_r = "cd7fb3f2c25dfab6f9ee83fcbb08698680e9d1f3d47815bc772d717a764f9997";
                sig_s = "287dd85b976d7f56d23ae7837398c118932aadc982f675f94103036729a47c7c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373138383932363239"_hex;
                sig_r = "69f18c064ad2683cc1b6d8b79020aacd186b6ad1999e6e55bf28bb1dac33f339";
                sig_s = "ef66e66001fcc219c9a927d7f0b84863483bfd1ffa6086c06921905310c793e1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373433323233343433"_hex;
                sig_r = "00547c6bb40f52d207fff796a29f6dbe62058e50fb73bde6b9c6ca11346fd8e8";
                sig_s = "2bc82bd3efc9febe8578acdbc3148bb46c41a39be9ae1994ad52d8bf13195d09";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343036303035393336"_hex;
                sig_r = "a80496adce42e7971ebe91300710cf4f535fad266668d76d72c95fffe4d42570";
                sig_s = "0d4338ca32857e14e0ea8026bc194227b910b98509c8c9307b0d8d93d47b191b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363134303336393838"_hex;
                sig_r = "3de40634d11a7a6b67023b84650420673ce6dbadb1159768cc0fd55f3784ec88";
                sig_s = "a455fb08e51b8493177d88fca43aeff306e1490d7f6d24d6a910970a3d8619de";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303935343235363835"_hex;
                sig_r = "c1f229c0557d4c47962593781bc96cf745f3bd629ad85434dc2eee456ddb3031";
                sig_s = "8638f6c01c15d23db24bb851f6c63c763c1f040976f3f2b32c4bb1b9506c1c12";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303038303938393833"_hex;
                sig_r = "35dd4957b352e8b1bbc80d1deb21f9b0989188ade3fbe46f75106da1684e1d6d";
                sig_s = "8b508e2ed7a51efea0dfaf377f6bd5d4ae133cc4c93650600be545af5d3acd75";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353734313437393237"_hex;
                sig_r = "410aa9c943e663082c6f76b84469c9845e0d439ba7ffc7cac0418eea0e20e638";
                sig_s = "c873ab5c21c9f0ce0bf78484028796b77451e1187250ee33535dacfb3cee5f61";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383636373731353232"_hex;
                sig_r = "8191db069b571cd40f2676348433430d3a65155c233c46a42a4299e6f5be806c";
                sig_s = "f3679ef8af0b1b3a3aeaa7bcee51ce960441622e9ff2dcb22a8ec8de724e0a0c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363934323830373837"_hex;
                sig_r = "889c44edbf3825b18d933aecd5ef70d12ebb00bf79550451205fd6f5ba7f372b";
                sig_s = "ecb67194bed2b8176077622d58c9ab4fe4ca34601decc09f9386b8c4445c7224";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39393231363932353638"_hex;
                sig_r = "aa87113aff2e1ad6461191241f90a23b91242d0066779daaa9506a4188abc427";
                sig_s = "33dbaac5ac443fb4d9529f83247f94c0ad1360d4d0ba8e162a377946c6ab9ae2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131363039343339373938"_hex;
                sig_r = "0e13f66a8ffd0da1c4b67f4d805941e90f98ce386540c48019c1ac1054075683";
                sig_s = "0cb489e8d5acfca5245d9292f59c6ede52425157af77b8beef38d23b6e6ade13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313836313632313030"_hex;
                sig_r = "6c1813f660c78bda956c1685bc924f69d1bbac5fadf3e4b027ab049bc82ad134";
                sig_s = "20de89ee005d7646f070bdac794ccce24d661b390a78851d35fe6fb5b25b3eba";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323934333437313737"_hex;
                sig_r = "48dc830b6326ec218144391b658d52045ef86ef918a8d41c59131912b1a46fb1";
                sig_s = "a431916cb7cf79129b90f09842b3f2164a6cf603db88f2d99944142c00b42559";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3138353134343535313230"_hex;
                sig_r = "4d45782be145a27ae9ecb6cac1b9e30be87c0d13b7d6ada9f795ff051351ac70";
                sig_s = "cf71d1eb15e88446ddb900f20d1e0739da499de9963fe99ded00a62da6462d62";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343736303433393330"_hex;
                sig_r = "11acd8b8d736e7f00476495803fbd20ad351321e800cfbddbd6a7dd610c5ab8c";
                sig_s = "734027aabcca9487773dc3ab069b802c00f5b6e5520e7761496ac1e7c78ced91";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353637333738373431"_hex;
                sig_r = "41be8b3bf41a4c507de12f098f7d409a1f941fef84d93794c497f7242a7c382c";
                sig_s = "81f7e7243116f24b84b0321e93eed35e2bdc32b00aa8eb9583be3e9b7a09a4f3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373339393334393935"_hex;
                sig_r = "ea032ff41b061e93e456a5f0a9cdef36c0732df4d55ab4d3867484b0fc49d9eb";
                sig_s = "ab298dd811826a6a9319c3632a96253c31c14f75baef536a645420442bab4d43";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343738333636313339"_hex;
                sig_r = "8b1ff140c65adca22e5596ffb95a5121c356d2d4055f14606445249a5725686f";
                sig_s = "ef8c16ff228114a7e33b35ad465f957577dea405fbdf3faf077a878754e58bef";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363439303532363032"_hex;
                sig_r = "3a40e8dc3ebe9e19dcd0d4d1b698ab2a4934a146def5427b3a6a8fbfbf347846";
                sig_s = "54f65e36088d2d4543011c94b1e5371697202d488b342dd6f77a69944128223d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373633383837343936"_hex;
                sig_r = "15fecd439137df74820727f71218405cbe525d403c574471d8a36fa4b1f592ab";
                sig_s = "18ec290971ed0a227ec47f1e2142f3b8fe5b17336350c5515d4a87eb3382fcb6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353739303230303830"_hex;
                sig_r = "e676e84a299f481a207cde6a4271c87d73e29d1e49216393292323bcdc238844";
                sig_s = "b8a98c769bf81429644758c8f803ddbedf81634e53099c43ad0ca42f4207ba16";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333434373837383438"_hex;
                sig_r = "5116f8f0af12b47bd025aa6eaec5007d4e3c5a3a72cb4c331f569581adb01bfb";
                sig_s = "6962251da7ba9ac951cfbd2051bcb7d953005cb9599ae0ad9c5f5139baacb976";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3139323636343130393230"_hex;
                sig_r = "b83f3918b6c5506d648ba3dba36762db593ad4b791456babcc3c1a4966317ae6";
                sig_s = "8cd0166047cec89963e9c8ca43b556ac17d0d62177a9bda35e61d0bb16dd471d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373033393135373035"_hex;
                sig_r = "077858a840230ca21385c4ab4c36cbd3ffaf85656202fba58f1ea995f52ebc4c";
                sig_s = "543e5e32a6d2f5c08664ed72175adaa25cdb5d6a754b0cb184e6994ede66c5b9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3831353435373730"_hex;
                sig_r = "538ad8797a397414ac82287c9216e41915c9e3dadbd493a0bbef5cb0dc7935ec";
                sig_s = "2c94cfdae7bf76f90b3cc7d19feea4005b387e312ad4116654d63cfbecf2ae1a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313935353330333737"_hex;
                sig_r = "ff8bbd1b6441388cb8d562c28ce29fbe51de11502fc825773ded3f0df225b236";
                sig_s = "8eccca0148b82fdfb370cdd073aa0634b39cc70d0d5244a7319e4b13791e2c2a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323637383130393033"_hex;
                sig_r = "7c179a010f51d66ec82fe5d5d45bd867b4b236a27be882e627506f7286ed7baa";
                sig_s = "5e38c048fb0fbd81c40df3dc16087d9aabeb51a193107499d29d8cf99c388a21";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131313830373230383135"_hex;
                sig_r = "7e0810885b405d54ceb2eb18cae08de2062f61b7ed94ab67eb15e87b64e730ef";
                sig_s = "f511a7919e6e4d70c8d61b831e383f58dea5878a6c8c5f0436ee058dd80a7668";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333831383639323930"_hex;
                sig_r = "c665d558dd638ef27a28557c3deb8a2f54abf9bd0bfa032c7ec9a514da9a9e9e";
                sig_s = "65c9efc355981f91778227eefacf1bb2fedb98657e6cd8674fdd42ae00d619ed";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313331323837323737"_hex;
                sig_r = "4f06b82aa0d070a004a7fd1135bc3a0bc36fcaeeca35e3edf00f5895394d59ab";
                sig_s = "65f71dd7406a17bf19e434a4635479340204dd862a9f2c4653e2fa39b178286c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333331393236353338"_hex;
                sig_r = "539c8fe5715c3dc893815ec2f00e203b4cd4f8fd36cc5742cc81ced266e02e3b";
                sig_s = "a5964b2d5157624cf42b6726ae23a7d5ef83a5d1f1460bd573d5a15316be5bf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333434393038323336"_hex;
                sig_r = "25f337273591f276849cd855b03d07cbcb205924cda4f62a079591602cc10a8c";
                sig_s = "d7b82c8fb38bbd503d92e5ae9303e8673c6dd0e9389f5af53366bbab851f0470";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383239383335393239"_hex;
                sig_r = "f36018945d24c89678ce2c8cf3cb4f93c38bdad3589891a5baa293744d4daa20";
                sig_s = "19ef05878dfc636a4662fd5dd127c908d7948991a324840323c8aef4fc2ff8ac";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343435313538303233"_hex;
                sig_r = "43203c89ad43a2bb1910e70ea104347e84764599535d46dabbe547395b1463f4";
                sig_s = "ed3d29c7c506ecc988614b368b38dd5b4f1e330c1b861efca8152a704b9146e5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132363937393837363434"_hex;
                sig_r = "c2740bfb3f387df1b564e3ff48835b9e380104716f58c5a43e97bb2c2d84d04a";
                sig_s = "e760ee5d0950b512f6c271cd1a87619b830df83fd40d44b9283539b3aa380019";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333939323432353533"_hex;
                sig_r = "ec07ec5378ed131b2dea7ae9776ba536daef2afc38e2556a70b89b9752eb1f71";
                sig_s = "fea25b9e50b1cfa2cf475dbb2245761d5f4585fbbc438d97226c64ff74bff19e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363031393737393737"_hex;
                sig_r = "e438303ccbbee359c865997e46112b0afd7a647c593429291398f0c432dfb9f0";
                sig_s = "8487e07a53da18793f8b527069e620e44587e420245d6ec827bb35cccfae7a47";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130383738373535313435"_hex;
                sig_r = "fc09fa30e89a2ba3d0c4d9d9350e717168c21253371359c0f3cb8c8807bdab56";
                sig_s = "5d6c4766bca462cf95b4aeb8f5886b52fc3286642ffee8d0bd7ffd4af7badb4a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303034323532393939"_hex;
                sig_r = "4f184fba2be39078385290acb4cc4b3f39b099c3300c762df205c605c6b30e1a";
                sig_s = "506481d2018b3a4c0ad558f029c82e0625c833cbbee978bee7b589742ee1e377";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353635333235323833"_hex;
                sig_r = "e9a27533a50eafb09561dc335d67f8e5e53b4fc16b3013f062e581ad027e110e";
                sig_s = "7e4150def368f969ace0fc28cac7a3312d6b9af538c412048be1763ea81f3f44";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3233383236333432333530"_hex;
                sig_r = "fac24d54387202bff01a91f5504f778c183a0a7930c02af0b618ee64d1b1e438";
                sig_s = "f3a53cb6f96feea45ccadcdf9ac78cd735ec3342163e573d2125caa0d8d507bb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343437383437303635"_hex;
                sig_r = "3544590a0f9fa5d43ad4e0a003a8d7db58b8570951657aab3bab732727d1bbc2";
                sig_s = "f257beac10d53e8012ecd236793d280026c5cf1c04aae522019b87e003500ec5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134323630323035353434"_hex;
                sig_r = "bc0726386497c85da8f4055a727b1938e96786b009e6847a080a8aae571b0753";
                sig_s = "54b1b15fc7886f09b121af6520d0f4336d259d734713fc3e973cf28368830eff";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393933383335323835"_hex;
                sig_r = "216f8051f9ceed5b5cc1085f83efd871128cb44b260ac12c486c0ea06c71aa55";
                sig_s = "df90346cb028245a72ac7d8094497f0efb83a7c44ba3b258873127355e3b2edf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323932313533353233"_hex;
                sig_r = "cb76652e19d6e7a72c9cac35c2ae46178d8c0ff59b06b0cb97c31aad39ec1b09";
                sig_s = "5c47b889a29c781540b8783ca24e2acc340178685d7331017e29b4efe92d9fbd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343539393031343936"_hex;
                sig_r = "edfc03190c839528ba2aa0ba3a23b596fcfec1bf2bbf4467f1fd88398cab8ad2";
                sig_s = "45b41fa49e0fa7f060ac1ba38ab4d2d5ab5b9fa54ca59285aee09ceedd9865a3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333933393731313731"_hex;
                sig_r = "e7631f03d9dfddc64cfd2a971523def68cb9f8a64e07eb2235c7250adc36480b";
                sig_s = "a004cbac3e04056c7e65fdb48be051e9a52ab427c826c84e2cb2229252983663";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333930363936343935"_hex;
                sig_r = "15e36a42515118021f6f5372ecbff90755d8ae77f9dd683972d2f26aa6716451";
                sig_s = "8d1cd988ba0a1bd919d2f9b5c8a3517eb59ef776caecdf2b5ac2f7a721858315";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343436303536323634"_hex;
                sig_r = "6daacbc1125cb3690e43e16b414077c0dd274b96ed61892bad5a519274f01b23";
                sig_s = "d044965811b4050c7a85021e8827635cf9f46260fc33bb7cb56b1b37180c4220";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363835303034373530"_hex;
                sig_r = "37e50775ee06024d596ed49824b1e6a49efae25c7dce8181de33f93ce34ac3ce";
                sig_s = "616a3e9d1fed086138f6feef6532647c02bd324ba4a8bfea20640d22f5494429";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3232323035333630363139"_hex;
                sig_r = "d5b64cdf82e354ba6a01772f7d38e8d46a729b808aaed73616ed41a9afc83db7";
                sig_s = "b5c456c91254e57013228c9724bb7f97aaf18e1bfd4c99d3ca9eaa8214382a10";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323135363635313234"_hex;
                sig_r = "915779b90ae6f6c1fb82c198c9f0719ce2ea37be0f261e36585ec89adaedd2b6";
                sig_s = "7d05e7794ac57578790808c0ac52ca3a51d1399f1a4c7173a7ed19867732b3d9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "097a04ee03a13c511d939e8bbe1471c57a71020e168e2689c69a5625686e24ad";
                sig_s = "40d24d52f3701ac8da959560c36ed0750a1cf031b728a9134e2b71ed3ddef889";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "12c90a5debd88d42686b84227dbc755351b78e7c6cb86c0b22536f394603646e", "00d03d965851bc41bb089499c51987b899a8353d997e040fdd35290a2627f0a3ab" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00913ed043022ee590f59e44f519e5cfd9d6f1b84a50fb417e9ad06683c6afa194", "00b68fb80d6ef261b5a63b57f871d2ea7224319f5fa3ed3dd77f1012dba19d0395" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "644cc54e84467213fafe2a4451dba550f3ea76ea9970bd6251fc7783a420d8b5", "1cd9439155ec45d5634677c281154bbdf99fe44051dcec322053ca69ea88297c" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a11d42154bd2de10ca92321fb6b3e638ee8b5a7fb4fb5f501b44515cf60e8c9", "06ccaab8748cd38ece73ddc975bc307e7de172357e14cd96a94bb3461d32d50e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009fa2c32bb349846acb5af14e1c67acfdd8963ed251c4b5783cad4bcdd0fd505d", "6f724937217d1e5483920405cf1b20200797521c464a2355fdde5306f2a9e448" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60eace95001201cf4c83b580fb698bb6abf446e5c56ff945eb5769b1a477b550", "69f5354a77fe2d601528f126c9a6858deeddb9e5ec408356d05ed5c80d62b8e1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000002";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "02";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f1a57d9346842310975ed356672a48a06a70b5efbc0c23287c9b9952ec955b33", "0091aee1224ecd69791856c521b12df172b45a5ce247e6dcaca7349684278f23" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // incorrect size of signature
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "03";
                r = true; // result = acceptable - flags: ['SigSize']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000003";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00968a493f279c0f8ea9f2446e361ee5b9757039d57a8003e6fd731d4dc6a2d2ca", "6784c5484fe797c830aa49a72cf85375523228393b730b20b04a192032af4d29" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000001";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b3c7fbdf1d7472f7bd578757762c8ebc922ff063b0ae9c3aa9cd81600abea76c", "038eeb3852b836c0649fd82fe5d1d02c3d0dbb30fbcd7fe41866ebc3bd927c69" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "759fdd1a64c000188b87eb0ddd291a50358fca2b0a5b92f027573845dc40b27a", "12ec1b2892ef46700f13cff8eb88f40076cc811478b008f5aabee4a74b4546f1" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000000000000000002d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4882825a892d30267264e300e868ab5d4b0ffc9ef3c2cb6e90d61d238daed856", "00e4c8248a189eb36d83740f5928cb802fb9c50b5a18c9196344a0c2cb74416423" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "000000000000000000000000000000000000001033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c4d1b1fdf274cf83f3395a70a36c94f7c51f1a31e99514b4ef10ba1304756caf", "4eaf435b20dd76d6ef447869503da9b28f0ea08edf287424d44aa04b254c1736" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0000000000000000000000000000000000000000000000000000000000000101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3376df7376d5e651d45b8ec2e5ff9d891c6fdd6dbbb52b046e6b5ac4c9facedf", "76cf27f9fcb65403b1f585a2dafe26b43ebd622baccde699d81c9be98df9f4df" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "00000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5077fdd202fdb4194b05491b6c053fff8760697531fc5227879e9cbec3309585", "00d0b5cffb3e0fdfb1c06e6d11a1182752730cfe439f7a4f8a49b9c2924f49ec14" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1b1f773b472dac5e1adf94e69d865b404d2cc92cff7bb66cf2197978f6c45d08", "00a9725791c5f33787977a9ddfa69296be998a968c51ec7f1c5447793bc56286b3" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "0000000000000000000000000000000000000000000000000000000000000001";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "0000000000000000000000000000000000000000000000000000000000000000";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2f20bc2232b4ba9d75fea6a92bc827d91c5a8f5c887f4e304d76656ba15999ea", "5f83242efbd57dd16dbd3de0915bdb2ddec201d2f749b13fc22c223a2644dcdc" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009e009cd0a1a7d0c51765169c468e62e56fc4f3ff02e8666c55483419a2560032", "00cd36d713acd504598ff3b4f58046a4690f550bd60ef4c823c5c581c6b899315e" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00af58a6ecc8254b9b831ae0441c13990802c3d68c301d43634c71f1974c09e704", "00d920612d82f32fca436c5c5097505271494875402731d03dba942b355306c783" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a7217cabc95b496f3f4e12d54e9def7651b866be69d3695cd77ad2e3a3f13d1", "00d0fa71bf21d2c00b1ff4cc76b53a9c5c2a8a8b6b4c2ec88b99ee537ac6262b3d" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a42e277ce657fb3dd07e135a3cb9b0a75a30bd8b64911606ee68371e561244", "67cf22e26a7009045b73ff19cd79851cceaad9ae72ef2d043d75365245befa06" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008520b9502f9a5ed753f09a5282cad721f5ebfb3db4142d667c6279869e76bcf1", "678e9bbd04a51460afc40a3e0cb7b0f8b8add89b2979758a5a1ffeb4584ee49e" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b5deca0fe0296905aac27e3604a95a0a2ecbee9fc453d2e1164632964454d0c9", "4f9e4e85a143ee677d40919c71014e8cabf4d9db7442fe4b96298f99f90ca67f" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5dcb2767dc851e20911ed7be39dd87ba81c7a6d10255dfb825f241486f98ae10", "00f8a9ef736b3e11d7d54a0e086902fb477246ec8c57de65d336570b65f65e0d83" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6bfd55a94e530bd972e52873ef39ac3e56d420a64d874694c701e714511d1696";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c8e144c853a7e1a6f5bbabe7ef91ef5b152113210d44fd58d3cb6185184e168a", "00ac40fb3618882193fc6d113760e476465df49067480a0a7cffe686515b3391a8" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b494bd67c209a5adb1c9a09337e2629b03f8a924be53c542478e5864ed2622ad";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7ffe185a23eb5b736704387e6357628a65984985773b4473cf9ef560b3fa5051", "4740cb1217f1ad2b5910d7f74906602b1f9550b3d11cff705b358c3bcbf72c3d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "aad4e2b69a9f378dae7873b40f7c15cb4565fcc8cbc0ec55b0bd3fe9d8626b2c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008a858226155e34dbb7e5dac7f13127c81c6ce8c9d891918c67c8738d7e4b46e9", "6c1386e84c612312de53e9e4af34d9bd57f93d9a06b855b6e0b06ad4137ff57c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "73fec4995e9d3140bc07ff041506dc7313e95389fb599d22f24039392a4014d3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aec0be729b02f266c542d139a3e04110c933e8eca1008e8dba38d75e7f8fab53", "2cd688d924b456848bd5c651444c67a9399fdfb5b5b9693162c1728bfadc1046" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ec4995e9d3140bc07ff041506dc73a73dc25f4257a911e310e38744b482a5a01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01ed4b5f941f443b31a7e2583ea165551d1815b54740deb12e9fdeff32e23061", "0084385ca448cc5dd71139bda3ab42d0b6e44d719e52fff64d971876efa9109fb2" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d8932bd3a6281780ffe082a0db8e74e8fd9d0b6445d99c265c9e8a09c01e72c1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "59c427cb6525eab511a06e03e00cf2aab4abc587c2601534338a50bc25701a70", "3e4eb388b453cbaea594d6b5c14a519ac3fda770c53580beefc68f09200d55ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5e9d3140bc07ff041506dc73a75086a3ba176f06c2b6e37363e2ce1c141f3c27";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04acbbcd23cf2ec819fd297ab2cb5407ede6319518651a391e941cc800356833", "1206dd00df23bc8ce0b85a018c4b34e9c3b41b4ef59c71492fa62d134772f97e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "fd6dc71a71f1d50d1bbd976af4357be4dd2fe850707c431fd376e53d176c6b62";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccacbc626fd6ea31175815cff958ca1637323877d3bdf09896b527bf4e255e85", "71f8a27e6309bd9b9b15d78d5270012ad2ed15a7fffe024fc0eca63fb6ac2f8d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7ee75ad2a5801c54722eb7d95ba67febcfc399b956b7b682fe89638de3690bf1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccc30b65cad3dd1d793b6db80f57b2e1237973e4264c3d9bbc2551ec68a0b7be", "75ff6d1f4f535a131aa573f6e2d6912c397154933750417d28e46524392592de" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "f533776f11c47ed0a7b5e25ace7a3b921866733c7454b2c678b8943dfb4cf232";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cc9349aca0cbd0b2df0deecd88ed39e6d8c7c3d7b422fd5d92431baf7225fcc0", "00ed494be698d6f3850be277c268792400f396025cfa95cf56018bcbc243e512eb" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e8dbffee01807d75f9aa52c295e15b15f138439e7a195a40709b1abf511dbc6a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0e7c30d2f259f7c13f194320e43905d0ead7277e283e8918437c10f9d052b0", "2b39b66dbba2b1cf5dac1b41d2dec6f1fb08bdd14d420d703986f63aedeb5c47" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ca01552b58d67a13468d6bc6086329df8f44cc938884fcf15c516b02a7a7b5f6";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008fa298c00ac93f7c36892c5299005a0f6843f9cf0669fdbb7d6d81e0341803ed", "4cab33cc2821b2da849f90ef20dc1eb896fc67161440b3c52c0b1e88627e508c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9402aa56b1acf4268d1ad78c10c653c063dabc4061c159a6f8d077787f192aab";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6fbf608a83e37ec26b37da033e069816680b770ba766fb8c44fce003960562f1", "045f268ccc5e0949213f7f2f1fa57cfead04625ec3ccfc9c333596e487b2056f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5e03ff820a836e39d3a8435219297da13870abed3afdb65c954f83ee568a9f60";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c4dd547ad750174179bac8b8ce27481c58b81347776220a1b52ada13d65c8124", "00f9c2ef3b5b4957cf69d3a139891682363c040610f200f4c318e59aa68f298af0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "556a715b4d4f9bc6d73c39da07be0ae5a2b2fe6465e0762ad85e9ff4ec313596";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "055d79fb26286bb6289a7983a2b23bf5c30cc3d70363b559adf5548af991f8", "00cae8b1b0ace32fd74a86ee1a671cc36c052a4796eae323be32e02ce9a0fb6227" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0db51c74d34e41baba67c13a60af404ee82d8f1b0386b09696ee1e6ea1327b86", "413886c4623fc222a6950c3c3a09f3fd867a566bfd345e06b09ec6c5c2e4a192" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc2f7bc74cb3bc7e797b06cc3e649bf3407d1a55b4eaaddd28d3dcfaff2c3737", "00a23bb364e16ac79398c013ce29a22e762c0d6067aaefda958474aad194a92e8a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d7edc7c645efff6af8821aea5b7f969f56ef6e615862b08fba3eaf0111c06f67", "00e47fd0da61682adcc405f329148bf1c35b89cb5ec5a9ed0d98a410e261a6b41a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6bfd7ad01b5dcfb04de464083d3ca7ef5054506111df92ef02ff7690d9a6ec93", "06c469fe4c5a1e04f114e193b4bb197de2c8e35089037e5a20275bcf67d9bf73" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008a9076c923021d5c5ef85894176ebb5c3a74aba75b3944c96f17debc2173ba99", "00e5601d115bf08d37ae115c4d186bc21127bbfb21d0629bde27a16e9ed721b740" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fec6a85e077ef4240b98c62ab3b93e2cebcad0ae9617f7b0471504db1f45a65", "245a5fd0ad7a6d854125ed76d4787f77cc1983eca8c6ba8c019523a088c4d0f3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d3ab94d8704fb51774dcc3838ad9703071e0851de9b2d6ca74ccd79b85558191", "4e4979b67f377419e5a9d4f03012b7e75656556f23756d4dbee145834c8279ef" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49e13cd44c8b8350a5eaca2181bf96db120b768bde8800f379f43e9198333c75", "030ad9fb4b0b233bdc10ca0dc4c2134b18b691e46c7151e3573aa2b62891e69d" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4574fd94ad03828588cb0bc2d434842ee093efe639015cc107d1ea3710f2112d", "1786d6ef1d411cbd1af5b5ee8845993e738fb64519b4329d04be21f7902a1c1d" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ee824d818768f13fa0eb908e396ea1c56b11774ce69d01e563aa36bb41d6371c", "00990291ce2abc55bb6682d502ae0129e7c57e146e96d44757daaa1f94c93e0b17" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4825ee46b2d21564726a32a922f5e3f2da6098f780e1f15c6bf1640669c41fe7", "292c066a24f0f450c2603f1837210898f8e80fa384aaf077eb5c7e87c6b26976" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "41348e7ac18eb1f4852801467bb0a0e36209321a8af4b410fd06f070a81f5de6", "03b5594f1a5a79d23089e49e3e379f2a6cb14f92301c6999e510b8c8dc37fb4b" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "753c74e5a36e1a4b61be7787202c98e05841fea2b0392b6ab69ee2e8a747e2b6", "18971da1c85825c1d8141886115d27cb2add86545e6971bb835a2f452cde1e52" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49c0254724576b0949827ce46240d90cb4075cd1978a416495a455f06a895504", "00df7d64c35853353bd4d905da6adb88f26e62a5f20b3cd6382adf2c5a42d85053" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b05e98e84e2c19743c1dcf4e0ddf0bb1f32854033de63fcf3e605fbb2ed94cb1", "00871d7415d5f6c57c840678f7e1a1c1e323519a4647fb3f6f52abb4647b9b6d70" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "6fd848306e968e3ac1f6e443577c47a3c20bf0d01a5dc39c78c2c69d681850f4";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b05e98e84e2c19743c1dcf4e0ddf0bb1f32854033de63fcf3e605fbb2ed94cb1", "78e28bea2a093a837bf987081e5e3e1cdcae65b9b804c090ad544b9a84648ebf" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "6fd848306e968e3ac1f6e443577c47a3c20bf0d01a5dc39c78c2c69d681850f4";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a49f9ebc082c064d61c0eab5f8bf23207b06e3a689dfc4fa2896ed114d1a88ab", "55783a6baf9401977d117ccb748c0d5c24a5d3bd2133d62c74de2be7cc7d9d40" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f9567a431b716388428510393b37feefd3afcfc6dc3881f623c0a0995e461ec3", "00fba2f910ced19f8e789b158390a295e636c588c622d54f8feffbd2852e2911a9" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "26095ef93b10bf50fe283f4c99136fb81fa297814f09977e8e38a3bfb837f61b", "00af8d7cfc46c1928624f201ed14a70701bc5531bff4e2e578d5c92dabddbc7580" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a4b58ee76d461a1c3cde68400a0bbeeab346ee69315bed63f1700c66cf5e6cc", "00a642ae4078bb6bbbb76028977882e9c8374f267a2ced131029ae89560ce29825" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f2a111eb24c9d280d9a66e4ff18681d222dd6a1828ebc4528f2bebe3e25228a1", "00a0699bcec507fd0ec83da541a5a6143e2e68e4af72fcdcc8a2aea2b17478cc8a" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e50054b3e4a4d1fef988e5a5e830155abc293fea3598af4c5ddaa10acd111274", "00eb710d1834568cb379a1d1f3d691a8c0dc19f901fe3225c2b6691df5ef5333fe" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00edc17cd4ca6f9988fda5af4042e3f9eb42d0f7b6a1c0156e1a2af566b7810354", "008a5d357777b306e96405f12e2617c1b29e8d574e5f6d66d1bc8ff7ea7c4b683c" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d267c10d2315b42dbaf34c97c3c0d331fabacaf6021df4dc85b3e9e63dc0798", "00ed154b11fa3a5ed952c14d8a2dd242de2b6cce3c22df42cd97de30054a19555e" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c24bf7a984c96ece10077a9def38cbd0d898abd555f1668e06c27cabc00f6f67", "009f69b238e1f95e99e5b558e0036273ebd6c36d12b4515348b85a21f6283f5016" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1cd26d668807c815ed3f532c1db81ac473fb368f0f7ef1aff2592ea6fa6c4624", "00a229b9ab5746cfbc47280c019a4248545354ca20880ff41cac2e252bc9b49704" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fc780777a3289af663fa02b1c262a8373b84614e659c1ab46942f1e058926ff8", "2196c6bcae0b2798298d463be5c87924343d7f103a27131e0c7f4d60d2b5da8c" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e25e2ee8af5ef8a3e0908341f9884501fb58a2fd234b1db6f22d561025524f4", "491d97a7793c9d9a1f35bb35f12121b9dbe075d8501cbd4db6697e3e0ad98bc0" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3ddf2920607df596da90123ea5674958054c8ed7758661b813f1aa30f19778b0", "707243e1a7bcc264b54289832e950c27563856241b79c243d0fc54f7ad24bc25" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "6632473c909425b6fa37095398e2538daab8552440320f9fe190dba8f672796b";
                bn_t sig_s = "a8c3aacce9ffe4bc17c0530738f1386f9d9579f029ff3a7791b16e98422265e3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "465b0fb05c14cd4ddef23e13acbe5f2337c45ea3816536670cfa7f2ab9090619";
                sig_s = "005e525e837c406cf8944383e20bcee32112d8da5b42b40f88415098f722aa89";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "7b1553e4d650c71fd49aa36ceed56f0438b0065e1b234445134bf7c83231ca9d";
                sig_s = "e369a20fa6434bd138b092885a89e53a3f0b6bdcc5d2653e136c54070081dc5a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "c7ba1c73bdc4364f6c7c61ab1fecc0547f8d6fcbeb251f734964407536353f32";
                sig_s = "7b3a6fb2fe60f8861e9e0955663f5703a17f5ecc3a5b5140eb87eaf35a3a5090";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "2b9c9f85596fed708b3af80393b27edfd0b5ae2f0074270a56362f5f9f62b4e1";
                bn_t sig_s = "2fae837503ba2c1d4c945e0913949ef094ce0b8086359bbb5dba4a12707c5600";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "5cd765209021d8c1a8aef4ff61d6fa6e7993bf9fea0b93609eea130de536fccc";
                sig_s = "4f10c7989587fe3019e36d85aa024bf20db6737c4f28900c1c9662f2782143e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "4c1a59b1e578d76f1595e13b557057559f26ab559ec1df3f45ec98b90fa526ce";
                sig_s = "c6872f094bdb3f82e31f93ad65357e2daafe66f304af197089ef0dc94ff90624";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "a35d1400d4cc7a8f617b721faee7118a74103c4630dec5aa47e097951dafc1a7";
                bn_t sig_s = "958221023024e97ef6df35a22e820c7bc5e16299f3f12e9d9b1b727c46d795e6";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "7fb733ed73c72fc4f4cf065e370c730301316ff4e9c6a8a701170f604c2d70b7";
                sig_s = "7ca9ca985d3df48978b3a2f9c0bb8a58b216c795e687f74623a3321448bfa73c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "95ae4df2fba8524e1151cb9a9c5c1ec1357a663722a18329303d86a58e704754";
                sig_s = "591ea644b1dc6f4c7cd5d7d939397f84d9e077100760f0816ae5b22ae6a74203";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "717925f0dd5cf45e746e87f79c9ea97d11eb01444052c270aeccef56c2e95828";
                bn_t sig_s = "785787b664137080383d2fc500459fa713258205fdae97b3240fb64bb638a657";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "8adfdeae3b586315d06183610d271fc423cc789908b8f5dc563253a3c782510a";
                sig_s = "8137bedbb4e60da26041b351f72a6bc3b7741f745743f0733b40b7fc56febd04";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "92ded14e19b94d17c79b063a034b122ce3b93a2502f2f223fad3461abf631632";
                sig_s = "52ff8ad14ba3657242e29440d01cab36ebb6033ee36021dc8d9b38f0808a90bc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d48373483e0fa2f11cfdfaea6f1de59e6861e9e87c4f6446602ba0125ab7de46";
                bn_t sig_s = "9d753bba3a7be08aab456e93a6500d4781795ed59af8bd6d6133129abef1ad98";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f11473117b66e5d84a2ecd0f8b7ec4a2cc2aee89ae022020235777305142f498";
                sig_s = "fe5ce43ced28f3f69f65e810678afefd2bdeefb051280ad2880157fda28b2ab1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "3c9f5bdde7310b5696c93c86203fc97e11a70739e20c71c9e722308d45a59e6c";
                sig_s = "c09efb9a045a47cce799b768890bb17833a0210d869a36be1da33f2585477c32";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6953442c487f240487d2af81f9825c894b1fc2534321fa012db8248be20a4b06";
                bn_t sig_s = "56927395d64ce4d690caa98944c2ddebc312f57f439d37236ea63cc1de098718";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fb39aa5f36ceca6e68d1932e811598c412892734dade389fd9e8ba94c5c7a251";
                sig_s = "fdddf0c3db66c7c46608ac98431f0ee8ebb1e27ba501937789ebcd0f7ac26ecc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "44fef6017638fd5bda17dfce346b0311b5e369bfb68aa85d5e970786b8e6644b";
                sig_s = "720b3a52fe44be6028759f0f1a6fd7020ff6792cd4ece98dffd0d97d3b726091";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "304babc41346e6205cf03e2d0b26e4b222dce8227402d001ba233efa69c91234";
                bn_t sig_s = "0065add3279f51b2417fb0a13b0f06404199caac3430385513ee49f67d8e8cdf";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "23868700b71fbafcaa73960faf922ee0458ef69e01fb060b2f9a80d992fe114c";
                sig_s = "6ec1526bd56f6eebf10463bd9210d62510b95166365e10a7b7abfc4d584ca338";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "dd60d7cf83a08208637212b65d079fb658d8ef1b8438d9c58f4122b0cd14ac49";
                sig_s = "f1d762516f4d6c3e6a98dd31dc3869dc7cf35944f33b35c6a17fe632d2b18cd5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha512_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                bn_t sig_s = "34d2f1a567d7e647b178552dec35875a2cc61df3ce8ae2c1357ea8c5ff505561";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e90000";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe00000";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e90500";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe00500";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "6eb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "02cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a169";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5eb60";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "b914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5eb";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "ff00cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "016cb914246e1c92050a03d9b0b4f05dde199ab6bf23cec3a120f56da5843de32a";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff6cb914246e1c92050a03d9b0b4f05de0a43cfcf1c53d8329a150b08be3d160a8";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "9346ebdb91e36dfaf5fc264f4b0fa220a11426278b79dc9a9edcf0e74bf85e17";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "9346ebdb91e36dfaf5fc264f4b0fa21f5bc3030e3ac27cd65eaf4f741c2e9f58";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe9346ebdb91e36dfaf5fc264f4b0fa221e6654940dc313c5edf0a925a7bc21cd6";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "016cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "9346ebdb91e36dfaf5fc264f4b0fa220a11426278b79dc9a9edcf0e74bf85e17";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "01cb2d0e5a982819b84e87aad213ca78a348979bd990065db64a261453a11c2d21";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "cb2d0e5a982819b84e87aad213ca78a5d339e20c31751d3eca81573a00afaa9f";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "ff34d2f1a567d7e647b178552dec35875b7217410d1f42428575ac4a392f1a1420";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "fe34d2f1a567d7e647b178552dec35875cb76864266ff9a249b5d9ebac5ee3d2df";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "01cb2d0e5a982819b84e87aad213ca78a48de8bef2e0bdbd7a8a53b5c6d0e5ebe0";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "6cb914246e1c92050a03d9b0b4f05ddf5eebd9d87486236561230f18b407a1e9";
                sig_s = "34d2f1a567d7e647b178552dec35875b7217410d1f42428575ac4a392f1a1420";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "313236373939"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "2c8a79b49cae4ec15d293575a5a1af5b4d6efb74ef5c2c1be34e33cdeb7113cc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439313934313732"_hex;
                sig_r = "d743c5d76e1193a57438f1b43b1b0e33d0d1ab15bd3d57a5cf6aebb370d46ce0";
                sig_s = "7df27cb730b33dfe01e34a0067e548a98c56846d9a4cd64a930c96bfd917cf08";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333637363431383737"_hex;
                sig_r = "ba30f4ddf3348f26835e9c50f6a2d5023a9a1f5fe2e9cf14b3270015dac283fe";
                sig_s = "1d1616abb204f615fbe99860d89158c3264182d617ac9f1560fa8291b349d579";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363731343831303935"_hex;
                sig_r = "551d72e63f7b27283c4107f7d851f387b60f3f4713a5d35c21fa332fbeed4494";
                sig_s = "80914cc37a3fe13a74db7fcc5226388d95034a50a89a9b2fe9bf42ea29e5714d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323037313732393039"_hex;
                sig_r = "80cead3d165ce05c7cf8469f1c35c5a3a641696c843bef0f022a6c68133dc49e";
                sig_s = "ea8409d743a4ad5e136207736c3ad79c8cfc7b57ebd1bd9b8a596670ad12d41c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131323938303334323336"_hex;
                sig_r = "bbc0e8b7721065a51bac9c3aad64168998cc0efa23298340d436867cc86ba847";
                sig_s = "ae3baa131a83153cb31de2f758e45139f62fe6cc9ce3941c6b1789dc1010f3e2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383736303239363833"_hex;
                sig_r = "3a5ba93917b954617b40e1d866860d1522b0d310cac2457636e54e2ffdea888e";
                sig_s = "3eac6fe762aee127837c2c65fd9c1f65b404b2c31bb945e75d6166503fb5c8bd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230323034323936353139"_hex;
                sig_r = "647f2b4bef6d1ea7908ac5f3dfd705494c2587456557805fe64a703b2b17503c";
                sig_s = "20e164bbb505c6df56455908008cf9626df320f48aa3fc9d0cc8ad8bcf078cb2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343531363639313830"_hex;
                sig_r = "8aa653cfa001798c471eea3199dc975a4dea4f7c1ede47453409e606d05ceb51";
                sig_s = "cab20967a056c0ea7fe9cdf8e1980f55b1597a2dad80c9223a0fab15c314fe6d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303933363835393531"_hex;
                sig_r = "842e421f33be241d27f12f875355902a25819f210b3685ad536e23594012d9d0";
                sig_s = "4fb894ae0e9c24b6ed280e224ab0811469296a9837d1e95b5d9d661d21a1c255";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323139353630323031"_hex;
                sig_r = "0b703fd75bdd8dce4820fe130a0b0af17aad4e4681b0254864d5d6f8931ff573";
                sig_s = "404521acf84e72ff22c2ee05d14a4bc7b70e69adc78caf81350e01379694c3e8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363832343734333033"_hex;
                sig_r = "62f0df1650560a5800fa670377a4317a604d6475c490066ce15638f8d1330b63";
                sig_s = "963edf905197096818368a993fbffe32908a57153e6a1612bae6ee9ee8a8a719";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373336353331373836"_hex;
                sig_r = "2901ade694d4b9c376b3244018e57bcde7057e8e11dd0f7d07080cdd1a39194b";
                sig_s = "ee65a4c2baa70f8e236ceba9eed400d899f75276f94e4b7997b2b01ac008bbbc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373935393033373932"_hex;
                sig_r = "aa9c8e5311b232b4ce9db03892f26eb77d655c6ff09a599424abbd4b11e750be";
                sig_s = "c1034c44b02e2fdf05e1ba5eebdf954c5a01794600059e05e5c73d542da3ee38";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333939363131303037"_hex;
                sig_r = "2febea016e55059e91e157b988f86048db57c37fd122f5cc60169ff4fcb4863c";
                sig_s = "eb19cbc35b3061e1ac4b59b92d1f732cea3212dcbe943ccad82d32740bc22c33";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303837343931313835"_hex;
                sig_r = "2be463ff06af2096dd62f0326e1af51c585f18ca8f8aa361dedcf55d543e6b7d";
                sig_s = "f56afd59dad42530d94f11c59a6408c54826b7a9ef83f4d020f209d71f9b74c5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323336363738353030"_hex;
                sig_r = "f61f64defc45abe284b39161b49585f21edef1e88d06389e5b5aacbb394ce4dc";
                sig_s = "a5a27e17df10aedace97eb2c48659f69b58cfe76a1f1ac30fea3043655bde515";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343438393937373033"_hex;
                sig_r = "052134eae13c1dec5ac5aa46186391786f5b60591cb0dd30bfc61e89486abfe2";
                sig_s = "09cdaa279c4f0d3d5ae00e0d74e733a260b8b120a1bda7e5a90194ec442e592d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373134363332383037"_hex;
                sig_r = "24824614686b80f3b738970a27816f58cf103c4a93c2d6b0f5f6de65a65501e3";
                sig_s = "180e5801a593063e75b83cd7ab8e52575a013a1be5cdeeb05b30e3ac9dc4ed82";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323236343837343932"_hex;
                sig_r = "2ff7a5ab2f1a3323651a0d17c4263672ee4d2c560cda94e7d52ee755138bb045";
                sig_s = "542ce83d8d9d441357e24b618b5695164d4391791cff62eeb01609d1d7cb1c0a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333533343439343739"_hex;
                sig_r = "ae446d1a81766d21dd7fc515d0a956605d0cde26d6086a76f8ffc81a6dfbea46";
                sig_s = "4fccef9f75e94abc7eb3f2bdcafdc5d97d61b9d950a06010ab4c54e3da7fd4e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373837333033383830"_hex;
                sig_r = "3957cff4a75fc6039c0b0c2e47eb9b07ff6ec5dc8a3c3316590a7ec9a1d7d993";
                sig_s = "4e578ee6594a00cb80c640cb9589d616dbd1cecda2d15dcc0062f30686d6073b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332313935383233"_hex;
                sig_r = "437c36031737a3140dc30eed281adac8e9074187aad41502a3b9a3bfd4ef252c";
                sig_s = "da13f88f633202b9b9517b93a6c08a7b8e6858734e8894b1a64c6ec08f1d0423";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130373339333931393137"_hex;
                sig_r = "828c12fd9fe31f91bd8f58aac72ee6485e34ceddf91927cf3a09b63363b9d8e9";
                sig_s = "0e889664a8c98619cab572687064edb4f0500f8324a5df0bfb5a431a3cb1ca39";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383831303237333135"_hex;
                sig_r = "807cb34aa6ea48b175f41f3afdf70a109d2b746ae48e08677cdafc33d916b2da";
                sig_s = "41980e6f7ad19944d278851f98e0a6220ae888964ae81a667a63fec21449334d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36303631363933393037"_hex;
                sig_r = "a998f9f0daf02f717f5292142dca447c722d2394dae0c84910433754669716ac";
                sig_s = "826fc37269539cf8a98997f8a0268bfffe888d6c23bc68ad7c759db47f65a925";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38383935323237303934"_hex;
                sig_r = "f151b614afe5bc9d511d0c34a7eb44283921272e91b3e5d02821cf7a43a92bc5";
                sig_s = "097aa33dc50ebf8fea036cd7e224a4d38aa20773e5a78ddb83a2f3b579b2ef6c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353830323334303934"_hex;
                sig_r = "5f21585381f5f42e9f76be3f61f4cfd6476ecc6f06cd4fbcf13e08c27f426148";
                sig_s = "95d5b2deabf19891edd41ac52d9072fadebb2f0145bec9b916f68fd1fbcfb3cf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393635393931353132"_hex;
                sig_r = "bdc361e68984482d7b169bc5e6ccf82d2263871be749d67a44f548d32bcaf5f1";
                sig_s = "375614fa4134d5055ac117a6ea948b74269b8063e39259d494a7544afb6291ab";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323838373332313938"_hex;
                sig_r = "5773b016dffac865ab008abe8a06353d197b4dff32403d7ce98ada4d20ea8a00";
                sig_s = "d60de9c98cf50eff0515b962dffd6aac8a1b72bc9cfaf6bda12b99f63eb976d2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323330383837333139"_hex;
                sig_r = "57b747d21fc898472a888b88693a989eabaf143396e4cb2de4af19386fba384f";
                sig_s = "7c99f63904191a4464d0d23ca560d5558895cdcff93af4b00c1c66ca2d974393";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313239303536393337"_hex;
                sig_r = "854be2bf302a2d6db437eb9e78703673c1c7371399e68caa8625bb13c7aa0fec";
                sig_s = "8fd22607e0169eb2e2e00c4af898fd2a609dc57a9fa94a7f93372098fa675649";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373438363536343338"_hex;
                sig_r = "ebb3359de3b13a518545a86b7fdd92f4793225b8ca4555a6bd4182922b0452be";
                sig_s = "83faa7dff1aa0eed89a7ddcdaa5d716ba6253c5c21f7122c2755eb78b28884c4";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353833353032363034"_hex;
                sig_r = "8bc91cfcfc85ba8aa171b703a330e398df4460d22602e73e327423ebf98bf632";
                sig_s = "ec7569072aa73ff19f183daf433abff142d7d5edceb25b771d853acf0fbd68b6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333237373534323739"_hex;
                sig_r = "895b07c0450ed6f4941633a053c978128c46e5225c00eb009c3c6cee5eb2b842";
                sig_s = "c982818b260f1650e03eba8f9db1a2ca79c3f804dbe7d172233260e1a9c10640";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373735353038353834"_hex;
                sig_r = "d5e152ec304090d764fd7ae61abeeadff2fee8df3dccd8fb44d2af5a8dbee0bc";
                sig_s = "72518dc1ecc993faadffc3426594fe2024c7c84ba101a9274d88009393103ff6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137393832363438333832"_hex;
                sig_r = "1298b131ce97a528e5dae05d92b286e2447b17ec002267b9e8f03784d4074bd1";
                sig_s = "edf223ad9c308aef22e1e0c24a20268f966cc2b9ca4d941945bbca057db92d4c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333936373737333635"_hex;
                sig_r = "1e79b3921d23d290a57d08958d3ad8305ec444efe1281c98fda44e8af7648f49";
                sig_s = "f4c7610ad1ba9339178c50e7979b5aa9af07d8143e59d13a2e84f98f37101e3b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393938313035383031"_hex;
                sig_r = "e455f464e0edff9c959f84f081828896149a330361ff2d16d5a2448c9d683684";
                sig_s = "351cfa2f29a1318ebb3a46f0a36df8954043949b8d7cea94eacf99108b4d3fa0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136363737383237303537"_hex;
                sig_r = "a885770c9ffef33f0c11245064936e3dd165ea2633575a6a155368670351f726";
                sig_s = "de31e6a58626a41fd029cf766ef44b8273b88558e2452e893978fbdda1e321d1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323036323134333632"_hex;
                sig_r = "4b6b451478ba253ae3c75ca5b18b70ccd3cca408ed245cb2af3369548dd2e507";
                sig_s = "fe479b631a3431b42772925cbfe8e789f9c55fb2fd1d7ab51664cc2fa571ad93";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383432343936303435"_hex;
                sig_r = "7ca70376547ad6d18f8e539f09dc269ebaa06854c1adacd58fdc735ed3cf0c16";
                sig_s = "f47654f4c0ac1b0e65b712300e3bb472983b116db5206520eabd886dc706b266";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323639383937333231"_hex;
                sig_r = "388514d147664fbb37271cb8693e47459c0627d6b1dd52dff1d3947dfc9cabec";
                sig_s = "99d3d40814aa177be99e4819696996bc75073f4518955587cd56b5ad8bbc2c58";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333837333234363932"_hex;
                sig_r = "44d3ac50d9b65601d79b47d6c5d98394cef155211ff37d4bac15e0d4890809b8";
                sig_s = "3ea03829afb0545e088361a8cf952aec17bab7637fddd6db35f039803523c921";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313138383837353336"_hex;
                sig_r = "a33004a2cd50a4f70447fd382e7fdc9257c4d9be7b16e686c5082a231ee7b010";
                sig_s = "d87b96ed3beea54652607017702cfce5d4e7fcec1fdd28f41681ab80a5c5b63c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838363036353435"_hex;
                sig_r = "668ad18cc22c1d1498cc8e5a11e2bfc4c1e1fcf0a7350a5806c5533ae332f0b1";
                sig_s = "f58b49369771bd20bb08b63d4a9212e2dc71da9257ed3710d9eaef9bee469eb2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343739313135383435"_hex;
                sig_r = "f7cdcb0281c70786cc3653820d1756a78395a9eeeab2a4d164e260f64ebfd6a8";
                sig_s = "d966c74499cac97ca8ee67400df01b14793b6d7d07668fc202a9918f3c046e9b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303736383837333637"_hex;
                sig_r = "de0e781d9e3e7f73021458fc1201fc021e5c54f1fe40b1b10db8fcf16ef7e54a";
                sig_s = "7d9db92321b5e5bb105990145390979390d32394116f4e78af34b85105dee8e9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393838353036393637"_hex;
                sig_r = "011dac8ea37f7bc6a530a42d0e3bec8c845694f73bec6950081a6f999ccdfbc6";
                sig_s = "153e57ee45e0a379839f3b8f6faf86de7a626b210f4c1007e431f842e39bf7d5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373231333036313331"_hex;
                sig_r = "63f9c43a8cab49f518685a120bd73a4e5956f9f167a78d4661fc795d41be2ae1";
                sig_s = "6aaf4f3384f1489ef026cb29e97ea1b5562fe8ceb9978d506fb7064f427b9f31";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323034313031363535"_hex;
                sig_r = "7f0fd3736166195ba810d5a2dfb5e1f03aece2170510c8aa4cc4a0c974a7c5d6";
                sig_s = "370c8772a75d32e8c9cc103004e75e6d30a8ac8611b84b89c41c65542171bc5b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530363830393530"_hex;
                sig_r = "f975196086d10f683f4aa1a3c2d5fe13fd0f52ee72aa3f785006aa024c758735";
                sig_s = "6a66364156ef21b5dfdcee60cce8fb09c12019bc576848ff73db49856af74681";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373237343630313033"_hex;
                sig_r = "35fe6d9bf9f7d47612c3f5be6a4e9a0fb0c14854d1a377adfb5485d6e3835c6f";
                sig_s = "f96587fc460e7d07396f9f2d060693dae632721259e77c90b8314002a5235dd0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134353731343631323235"_hex;
                sig_r = "210c7c9b231293c8ec09b0f610d31724a045f6a33f84423fdd541ac11ff78962";
                sig_s = "e5a40e6b80da99cfc49ce969f1f59146835183e61001b4513f927b71ec3b2a13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313739353136303930"_hex;
                sig_r = "09b7dcfad2c84b89825cf3aaaffed51664faccc0d171a43387a6ff98aa128a04";
                sig_s = "272b00e6e0917afe4fbe782604428e09fd91c38125d51c3ba06ce3198e6bf736";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383932373133303534"_hex;
                sig_r = "09c7c99681c9159b22c0a467999559a31e279075d37ef872a88ae13565f6149b";
                sig_s = "b0ff953be1940d2cf548663c1b4db7b416521db289467733b9a76629f8ab261f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383936313832323937"_hex;
                sig_r = "2bfaae0ea6d8baab3e02ad7fa3dda3ce0725d11533e3666477f54d697e2ca9bc";
                sig_s = "9289d5da443395bca18fe9d1a4afbe04a32b4ecd258eca6c1772acff2d0b9a89";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38323833333436373332"_hex;
                sig_r = "368846edc677ae8fc237069cda719af3d7f17cc136fe443b2af614ccfb4844ab";
                sig_s = "5ebe6c1d3e88bc4e291841ea97c836bdcf67d9eabe926346c5f42105f7b38f67";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333636393734383931"_hex;
                sig_r = "f336da82bea2a111bddef6a25de4ab87d7c95aa80d21838f3a4efa3d9346555d";
                sig_s = "da5ab612b327aa0fe95d1caf85f3b6698c23a47212006c5667cfa92aa3ef4dad";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313939313533323239"_hex;
                sig_r = "97c2fb9865f9e76f8d54ce957120b68ccb04cd3183dae7130f73139cd56655cf";
                sig_s = "fb63e38176ffac37d0ec1e49c2e2efeff04dffdad5a75f3576f8276cccee9851";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363030333136383232"_hex;
                sig_r = "7393e0207e07bd73b674d3667dfbc9c30022574d63079a040a23c0cd7e1b6aa6";
                sig_s = "2994b3468432fecd0a32134171179d2809244d586bd971129cdba73fd3dc8876";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383639363531363935"_hex;
                sig_r = "21e1943d7d396a8c46658bede4ce155c9a06f929cf6ad292d32c91cf8f493887";
                sig_s = "30783c682cebfffec5787d762bd725bafc9c4075ad8eb1582188f4c05dd5169d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353833393236333732"_hex;
                sig_r = "5a269eb44e910bfe8a2656dee47556cb908a417917e2068e20d201721f44f9b1";
                sig_s = "e69d463204dce77c249439f22f77cc4c88134012a286b36a9559f694203766c6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133323035303135373235"_hex;
                sig_r = "cb8c146fb3d58846e5748c48742af2f1b77805f6cd1e4eb98d8c66cbdf5d6455";
                sig_s = "17ac992e10251e334467f8e57e2e1c269db8b19469321c74b443972a80f38b2d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303835333330373931"_hex;
                sig_r = "212d84a153db81cea5212fa7dee31d59bdca1307277a01b5936c3aead31bf1e4";
                sig_s = "520305dbef2bda6526fa2cfca789a1c9aca5c2ad4c0027cc8cf3881813da8a72";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383636383133313139"_hex;
                sig_r = "310c82892f571134a36725f4a31c5cba8bc46e65002d73b11364084433d8da4a";
                sig_s = "9ca552aca84b96cc9461e2b65a64975118ea78b8b355a0ebcc1a61de37877d13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303832353339343239"_hex;
                sig_r = "489deda580c62533783df9fe62de34c2e2cab91d676709beeff13afac8e90db9";
                sig_s = "32a85a9c56f308b7a794dcce614a5ed7e0857030b8429fe3b4e07ad533a5a00a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130303635393536363937"_hex;
                sig_r = "e8897c1cad1fc870a7d364676a9d7f7cd3ac951f3bc3a9ef1f7231466c3493d7";
                sig_s = "dd2128e876d62da82cfc5fc508d33bf66b71c0a84d0a9b7e47dfc620f5846bc6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303234313831363034"_hex;
                sig_r = "b4d771d19fffb1fe5ead25ef5dbf6b53d4d3dad284641108ad84b2541ad435a4";
                sig_s = "843ecdc2641b33a3ae9ae15d559f6229d7304ee5ecabe00db73bf2b6b5c6c21f";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373637383532383734"_hex;
                sig_r = "5ab5fb3136fabdbd22009642df03685935819895d675fc284e8b8112db522d08";
                sig_s = "d87ec88173e823ed70438fb1088b00689352542fabad5e9fd6d4c3c58f722f86";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353434313939393734"_hex;
                sig_r = "be310120169f8d488c6e5ec5b5e588ab8a65040169d9efd3062e0d05fd7d58df";
                sig_s = "45033f291fa21a85cc08f78fec2dbd94135520de261360728b8743b558ed16f8";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35383433343830333931"_hex;
                sig_r = "cd7fb3f2c25dfab6f9ee83fcbb08698680e9d1f3d47815bc772d717a764f9997";
                sig_s = "287dd85b976d7f56d23ae7837398c118932aadc982f675f94103036729a47c7c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373138383932363239"_hex;
                sig_r = "69f18c064ad2683cc1b6d8b79020aacd186b6ad1999e6e55bf28bb1dac33f339";
                sig_s = "ef66e66001fcc219c9a927d7f0b84863483bfd1ffa6086c06921905310c793e1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373433323233343433"_hex;
                sig_r = "547c6bb40f52d207fff796a29f6dbe62058e50fb73bde6b9c6ca11346fd8e8";
                sig_s = "2bc82bd3efc9febe8578acdbc3148bb46c41a39be9ae1994ad52d8bf13195d09";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343036303035393336"_hex;
                sig_r = "a80496adce42e7971ebe91300710cf4f535fad266668d76d72c95fffe4d42570";
                sig_s = "0d4338ca32857e14e0ea8026bc194227b910b98509c8c9307b0d8d93d47b191b";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363134303336393838"_hex;
                sig_r = "3de40634d11a7a6b67023b84650420673ce6dbadb1159768cc0fd55f3784ec88";
                sig_s = "a455fb08e51b8493177d88fca43aeff306e1490d7f6d24d6a910970a3d8619de";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303935343235363835"_hex;
                sig_r = "c1f229c0557d4c47962593781bc96cf745f3bd629ad85434dc2eee456ddb3031";
                sig_s = "8638f6c01c15d23db24bb851f6c63c763c1f040976f3f2b32c4bb1b9506c1c12";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303038303938393833"_hex;
                sig_r = "35dd4957b352e8b1bbc80d1deb21f9b0989188ade3fbe46f75106da1684e1d6d";
                sig_s = "8b508e2ed7a51efea0dfaf377f6bd5d4ae133cc4c93650600be545af5d3acd75";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353734313437393237"_hex;
                sig_r = "410aa9c943e663082c6f76b84469c9845e0d439ba7ffc7cac0418eea0e20e638";
                sig_s = "c873ab5c21c9f0ce0bf78484028796b77451e1187250ee33535dacfb3cee5f61";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383636373731353232"_hex;
                sig_r = "8191db069b571cd40f2676348433430d3a65155c233c46a42a4299e6f5be806c";
                sig_s = "f3679ef8af0b1b3a3aeaa7bcee51ce960441622e9ff2dcb22a8ec8de724e0a0c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363934323830373837"_hex;
                sig_r = "889c44edbf3825b18d933aecd5ef70d12ebb00bf79550451205fd6f5ba7f372b";
                sig_s = "ecb67194bed2b8176077622d58c9ab4fe4ca34601decc09f9386b8c4445c7224";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39393231363932353638"_hex;
                sig_r = "aa87113aff2e1ad6461191241f90a23b91242d0066779daaa9506a4188abc427";
                sig_s = "33dbaac5ac443fb4d9529f83247f94c0ad1360d4d0ba8e162a377946c6ab9ae2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131363039343339373938"_hex;
                sig_r = "0e13f66a8ffd0da1c4b67f4d805941e90f98ce386540c48019c1ac1054075683";
                sig_s = "0cb489e8d5acfca5245d9292f59c6ede52425157af77b8beef38d23b6e6ade13";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313836313632313030"_hex;
                sig_r = "6c1813f660c78bda956c1685bc924f69d1bbac5fadf3e4b027ab049bc82ad134";
                sig_s = "20de89ee005d7646f070bdac794ccce24d661b390a78851d35fe6fb5b25b3eba";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323934333437313737"_hex;
                sig_r = "48dc830b6326ec218144391b658d52045ef86ef918a8d41c59131912b1a46fb1";
                sig_s = "a431916cb7cf79129b90f09842b3f2164a6cf603db88f2d99944142c00b42559";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3138353134343535313230"_hex;
                sig_r = "4d45782be145a27ae9ecb6cac1b9e30be87c0d13b7d6ada9f795ff051351ac70";
                sig_s = "cf71d1eb15e88446ddb900f20d1e0739da499de9963fe99ded00a62da6462d62";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343736303433393330"_hex;
                sig_r = "11acd8b8d736e7f00476495803fbd20ad351321e800cfbddbd6a7dd610c5ab8c";
                sig_s = "734027aabcca9487773dc3ab069b802c00f5b6e5520e7761496ac1e7c78ced91";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353637333738373431"_hex;
                sig_r = "41be8b3bf41a4c507de12f098f7d409a1f941fef84d93794c497f7242a7c382c";
                sig_s = "81f7e7243116f24b84b0321e93eed35e2bdc32b00aa8eb9583be3e9b7a09a4f3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373339393334393935"_hex;
                sig_r = "ea032ff41b061e93e456a5f0a9cdef36c0732df4d55ab4d3867484b0fc49d9eb";
                sig_s = "ab298dd811826a6a9319c3632a96253c31c14f75baef536a645420442bab4d43";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343738333636313339"_hex;
                sig_r = "8b1ff140c65adca22e5596ffb95a5121c356d2d4055f14606445249a5725686f";
                sig_s = "ef8c16ff228114a7e33b35ad465f957577dea405fbdf3faf077a878754e58bef";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363439303532363032"_hex;
                sig_r = "3a40e8dc3ebe9e19dcd0d4d1b698ab2a4934a146def5427b3a6a8fbfbf347846";
                sig_s = "54f65e36088d2d4543011c94b1e5371697202d488b342dd6f77a69944128223d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373633383837343936"_hex;
                sig_r = "15fecd439137df74820727f71218405cbe525d403c574471d8a36fa4b1f592ab";
                sig_s = "18ec290971ed0a227ec47f1e2142f3b8fe5b17336350c5515d4a87eb3382fcb6";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353739303230303830"_hex;
                sig_r = "e676e84a299f481a207cde6a4271c87d73e29d1e49216393292323bcdc238844";
                sig_s = "b8a98c769bf81429644758c8f803ddbedf81634e53099c43ad0ca42f4207ba16";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333434373837383438"_hex;
                sig_r = "5116f8f0af12b47bd025aa6eaec5007d4e3c5a3a72cb4c331f569581adb01bfb";
                sig_s = "6962251da7ba9ac951cfbd2051bcb7d953005cb9599ae0ad9c5f5139baacb976";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3139323636343130393230"_hex;
                sig_r = "b83f3918b6c5506d648ba3dba36762db593ad4b791456babcc3c1a4966317ae6";
                sig_s = "8cd0166047cec89963e9c8ca43b556ac17d0d62177a9bda35e61d0bb16dd471d";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373033393135373035"_hex;
                sig_r = "077858a840230ca21385c4ab4c36cbd3ffaf85656202fba58f1ea995f52ebc4c";
                sig_s = "543e5e32a6d2f5c08664ed72175adaa25cdb5d6a754b0cb184e6994ede66c5b9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3831353435373730"_hex;
                sig_r = "538ad8797a397414ac82287c9216e41915c9e3dadbd493a0bbef5cb0dc7935ec";
                sig_s = "2c94cfdae7bf76f90b3cc7d19feea4005b387e312ad4116654d63cfbecf2ae1a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313935353330333737"_hex;
                sig_r = "ff8bbd1b6441388cb8d562c28ce29fbe51de11502fc825773ded3f0df225b236";
                sig_s = "8eccca0148b82fdfb370cdd073aa0634b39cc70d0d5244a7319e4b13791e2c2a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323637383130393033"_hex;
                sig_r = "7c179a010f51d66ec82fe5d5d45bd867b4b236a27be882e627506f7286ed7baa";
                sig_s = "5e38c048fb0fbd81c40df3dc16087d9aabeb51a193107499d29d8cf99c388a21";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131313830373230383135"_hex;
                sig_r = "7e0810885b405d54ceb2eb18cae08de2062f61b7ed94ab67eb15e87b64e730ef";
                sig_s = "f511a7919e6e4d70c8d61b831e383f58dea5878a6c8c5f0436ee058dd80a7668";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333831383639323930"_hex;
                sig_r = "c665d558dd638ef27a28557c3deb8a2f54abf9bd0bfa032c7ec9a514da9a9e9e";
                sig_s = "65c9efc355981f91778227eefacf1bb2fedb98657e6cd8674fdd42ae00d619ed";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313331323837323737"_hex;
                sig_r = "4f06b82aa0d070a004a7fd1135bc3a0bc36fcaeeca35e3edf00f5895394d59ab";
                sig_s = "65f71dd7406a17bf19e434a4635479340204dd862a9f2c4653e2fa39b178286c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333331393236353338"_hex;
                sig_r = "539c8fe5715c3dc893815ec2f00e203b4cd4f8fd36cc5742cc81ced266e02e3b";
                sig_s = "a5964b2d5157624cf42b6726ae23a7d5ef83a5d1f1460bd573d5a15316be5bf2";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333434393038323336"_hex;
                sig_r = "25f337273591f276849cd855b03d07cbcb205924cda4f62a079591602cc10a8c";
                sig_s = "d7b82c8fb38bbd503d92e5ae9303e8673c6dd0e9389f5af53366bbab851f0470";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383239383335393239"_hex;
                sig_r = "f36018945d24c89678ce2c8cf3cb4f93c38bdad3589891a5baa293744d4daa20";
                sig_s = "19ef05878dfc636a4662fd5dd127c908d7948991a324840323c8aef4fc2ff8ac";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343435313538303233"_hex;
                sig_r = "43203c89ad43a2bb1910e70ea104347e84764599535d46dabbe547395b1463f4";
                sig_s = "ed3d29c7c506ecc988614b368b38dd5b4f1e330c1b861efca8152a704b9146e5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132363937393837363434"_hex;
                sig_r = "c2740bfb3f387df1b564e3ff48835b9e380104716f58c5a43e97bb2c2d84d04a";
                sig_s = "e760ee5d0950b512f6c271cd1a87619b830df83fd40d44b9283539b3aa380019";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333939323432353533"_hex;
                sig_r = "ec07ec5378ed131b2dea7ae9776ba536daef2afc38e2556a70b89b9752eb1f71";
                sig_s = "fea25b9e50b1cfa2cf475dbb2245761d5f4585fbbc438d97226c64ff74bff19e";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363031393737393737"_hex;
                sig_r = "e438303ccbbee359c865997e46112b0afd7a647c593429291398f0c432dfb9f0";
                sig_s = "8487e07a53da18793f8b527069e620e44587e420245d6ec827bb35cccfae7a47";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130383738373535313435"_hex;
                sig_r = "fc09fa30e89a2ba3d0c4d9d9350e717168c21253371359c0f3cb8c8807bdab56";
                sig_s = "5d6c4766bca462cf95b4aeb8f5886b52fc3286642ffee8d0bd7ffd4af7badb4a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303034323532393939"_hex;
                sig_r = "4f184fba2be39078385290acb4cc4b3f39b099c3300c762df205c605c6b30e1a";
                sig_s = "506481d2018b3a4c0ad558f029c82e0625c833cbbee978bee7b589742ee1e377";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353635333235323833"_hex;
                sig_r = "e9a27533a50eafb09561dc335d67f8e5e53b4fc16b3013f062e581ad027e110e";
                sig_s = "7e4150def368f969ace0fc28cac7a3312d6b9af538c412048be1763ea81f3f44";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3233383236333432333530"_hex;
                sig_r = "fac24d54387202bff01a91f5504f778c183a0a7930c02af0b618ee64d1b1e438";
                sig_s = "f3a53cb6f96feea45ccadcdf9ac78cd735ec3342163e573d2125caa0d8d507bb";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343437383437303635"_hex;
                sig_r = "3544590a0f9fa5d43ad4e0a003a8d7db58b8570951657aab3bab732727d1bbc2";
                sig_s = "f257beac10d53e8012ecd236793d280026c5cf1c04aae522019b87e003500ec5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134323630323035353434"_hex;
                sig_r = "bc0726386497c85da8f4055a727b1938e96786b009e6847a080a8aae571b0753";
                sig_s = "54b1b15fc7886f09b121af6520d0f4336d259d734713fc3e973cf28368830eff";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393933383335323835"_hex;
                sig_r = "216f8051f9ceed5b5cc1085f83efd871128cb44b260ac12c486c0ea06c71aa55";
                sig_s = "df90346cb028245a72ac7d8094497f0efb83a7c44ba3b258873127355e3b2edf";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323932313533353233"_hex;
                sig_r = "cb76652e19d6e7a72c9cac35c2ae46178d8c0ff59b06b0cb97c31aad39ec1b09";
                sig_s = "5c47b889a29c781540b8783ca24e2acc340178685d7331017e29b4efe92d9fbd";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343539393031343936"_hex;
                sig_r = "edfc03190c839528ba2aa0ba3a23b596fcfec1bf2bbf4467f1fd88398cab8ad2";
                sig_s = "45b41fa49e0fa7f060ac1ba38ab4d2d5ab5b9fa54ca59285aee09ceedd9865a3";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333933393731313731"_hex;
                sig_r = "e7631f03d9dfddc64cfd2a971523def68cb9f8a64e07eb2235c7250adc36480b";
                sig_s = "a004cbac3e04056c7e65fdb48be051e9a52ab427c826c84e2cb2229252983663";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333930363936343935"_hex;
                sig_r = "15e36a42515118021f6f5372ecbff90755d8ae77f9dd683972d2f26aa6716451";
                sig_s = "8d1cd988ba0a1bd919d2f9b5c8a3517eb59ef776caecdf2b5ac2f7a721858315";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343436303536323634"_hex;
                sig_r = "6daacbc1125cb3690e43e16b414077c0dd274b96ed61892bad5a519274f01b23";
                sig_s = "d044965811b4050c7a85021e8827635cf9f46260fc33bb7cb56b1b37180c4220";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363835303034373530"_hex;
                sig_r = "37e50775ee06024d596ed49824b1e6a49efae25c7dce8181de33f93ce34ac3ce";
                sig_s = "616a3e9d1fed086138f6feef6532647c02bd324ba4a8bfea20640d22f5494429";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3232323035333630363139"_hex;
                sig_r = "d5b64cdf82e354ba6a01772f7d38e8d46a729b808aaed73616ed41a9afc83db7";
                sig_s = "b5c456c91254e57013228c9724bb7f97aaf18e1bfd4c99d3ca9eaa8214382a10";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36323135363635313234"_hex;
                sig_r = "915779b90ae6f6c1fb82c198c9f0719ce2ea37be0f261e36585ec89adaedd2b6";
                sig_s = "7d05e7794ac57578790808c0ac52ca3a51d1399f1a4c7173a7ed19867732b3d9";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "097a04ee03a13c511d939e8bbe1471c57a71020e168e2689c69a5625686e24ad";
                sig_s = "40d24d52f3701ac8da959560c36ed0750a1cf031b728a9134e2b71ed3ddef889";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "12c90a5debd88d42686b84227dbc755351b78e7c6cb86c0b22536f394603646e", "00d03d965851bc41bb089499c51987b899a8353d997e040fdd35290a2627f0a3ab" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00913ed043022ee590f59e44f519e5cfd9d6f1b84a50fb417e9ad06683c6afa194", "00b68fb80d6ef261b5a63b57f871d2ea7224319f5fa3ed3dd77f1012dba19d0395" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "644cc54e84467213fafe2a4451dba550f3ea76ea9970bd6251fc7783a420d8b5", "1cd9439155ec45d5634677c281154bbdf99fe44051dcec322053ca69ea88297c" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a11d42154bd2de10ca92321fb6b3e638ee8b5a7fb4fb5f501b44515cf60e8c9", "06ccaab8748cd38ece73ddc975bc307e7de172357e14cd96a94bb3461d32d50e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009fa2c32bb349846acb5af14e1c67acfdd8963ed251c4b5783cad4bcdd0fd505d", "6f724937217d1e5483920405cf1b20200797521c464a2355fdde5306f2a9e448" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60eace95001201cf4c83b580fb698bb6abf446e5c56ff945eb5769b1a477b550", "69f5354a77fe2d601528f126c9a6858deeddb9e5ec408356d05ed5c80d62b8e1" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "02";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f1a57d9346842310975ed356672a48a06a70b5efbc0c23287c9b9952ec955b33", "0091aee1224ecd69791856c521b12df172b45a5ce247e6dcaca7349684278f23" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "03";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00968a493f279c0f8ea9f2446e361ee5b9757039d57a8003e6fd731d4dc6a2d2ca", "6784c5484fe797c830aa49a72cf85375523228393b730b20b04a192032af4d29" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b3c7fbdf1d7472f7bd578757762c8ebc922ff063b0ae9c3aa9cd81600abea76c", "038eeb3852b836c0649fd82fe5d1d02c3d0dbb30fbcd7fe41866ebc3bd927c69" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "759fdd1a64c000188b87eb0ddd291a50358fca2b0a5b92f027573845dc40b27a", "12ec1b2892ef46700f13cff8eb88f40076cc811478b008f5aabee4a74b4546f1" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4882825a892d30267264e300e868ab5d4b0ffc9ef3c2cb6e90d61d238daed856", "00e4c8248a189eb36d83740f5928cb802fb9c50b5a18c9196344a0c2cb74416423" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c4d1b1fdf274cf83f3395a70a36c94f7c51f1a31e99514b4ef10ba1304756caf", "4eaf435b20dd76d6ef447869503da9b28f0ea08edf287424d44aa04b254c1736" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3376df7376d5e651d45b8ec2e5ff9d891c6fdd6dbbb52b046e6b5ac4c9facedf", "76cf27f9fcb65403b1f585a2dafe26b43ebd622baccde699d81c9be98df9f4df" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5077fdd202fdb4194b05491b6c053fff8760697531fc5227879e9cbec3309585", "00d0b5cffb3e0fdfb1c06e6d11a1182752730cfe439f7a4f8a49b9c2924f49ec14" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1b1f773b472dac5e1adf94e69d865b404d2cc92cff7bb66cf2197978f6c45d08", "00a9725791c5f33787977a9ddfa69296be998a968c51ec7f1c5447793bc56286b3" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2f20bc2232b4ba9d75fea6a92bc827d91c5a8f5c887f4e304d76656ba15999ea", "5f83242efbd57dd16dbd3de0915bdb2ddec201d2f749b13fc22c223a2644dcdc" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009e009cd0a1a7d0c51765169c468e62e56fc4f3ff02e8666c55483419a2560032", "00cd36d713acd504598ff3b4f58046a4690f550bd60ef4c823c5c581c6b899315e" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00af58a6ecc8254b9b831ae0441c13990802c3d68c301d43634c71f1974c09e704", "00d920612d82f32fca436c5c5097505271494875402731d03dba942b355306c783" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4a7217cabc95b496f3f4e12d54e9def7651b866be69d3695cd77ad2e3a3f13d1", "00d0fa71bf21d2c00b1ff4cc76b53a9c5c2a8a8b6b4c2ec88b99ee537ac6262b3d" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a42e277ce657fb3dd07e135a3cb9b0a75a30bd8b64911606ee68371e561244", "67cf22e26a7009045b73ff19cd79851cceaad9ae72ef2d043d75365245befa06" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008520b9502f9a5ed753f09a5282cad721f5ebfb3db4142d667c6279869e76bcf1", "678e9bbd04a51460afc40a3e0cb7b0f8b8add89b2979758a5a1ffeb4584ee49e" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b5deca0fe0296905aac27e3604a95a0a2ecbee9fc453d2e1164632964454d0c9", "4f9e4e85a143ee677d40919c71014e8cabf4d9db7442fe4b96298f99f90ca67f" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5dcb2767dc851e20911ed7be39dd87ba81c7a6d10255dfb825f241486f98ae10", "00f8a9ef736b3e11d7d54a0e086902fb477246ec8c57de65d336570b65f65e0d83" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6bfd55a94e530bd972e52873ef39ac3e56d420a64d874694c701e714511d1696";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c8e144c853a7e1a6f5bbabe7ef91ef5b152113210d44fd58d3cb6185184e168a", "00ac40fb3618882193fc6d113760e476465df49067480a0a7cffe686515b3391a8" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b494bd67c209a5adb1c9a09337e2629b03f8a924be53c542478e5864ed2622ad";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7ffe185a23eb5b736704387e6357628a65984985773b4473cf9ef560b3fa5051", "4740cb1217f1ad2b5910d7f74906602b1f9550b3d11cff705b358c3bcbf72c3d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "aad4e2b69a9f378dae7873b40f7c15cb4565fcc8cbc0ec55b0bd3fe9d8626b2c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008a858226155e34dbb7e5dac7f13127c81c6ce8c9d891918c67c8738d7e4b46e9", "6c1386e84c612312de53e9e4af34d9bd57f93d9a06b855b6e0b06ad4137ff57c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "73fec4995e9d3140bc07ff041506dc7313e95389fb599d22f24039392a4014d3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aec0be729b02f266c542d139a3e04110c933e8eca1008e8dba38d75e7f8fab53", "2cd688d924b456848bd5c651444c67a9399fdfb5b5b9693162c1728bfadc1046" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ec4995e9d3140bc07ff041506dc73a73dc25f4257a911e310e38744b482a5a01";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01ed4b5f941f443b31a7e2583ea165551d1815b54740deb12e9fdeff32e23061", "0084385ca448cc5dd71139bda3ab42d0b6e44d719e52fff64d971876efa9109fb2" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d8932bd3a6281780ffe082a0db8e74e8fd9d0b6445d99c265c9e8a09c01e72c1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "59c427cb6525eab511a06e03e00cf2aab4abc587c2601534338a50bc25701a70", "3e4eb388b453cbaea594d6b5c14a519ac3fda770c53580beefc68f09200d55ff" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5e9d3140bc07ff041506dc73a75086a3ba176f06c2b6e37363e2ce1c141f3c27";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "04acbbcd23cf2ec819fd297ab2cb5407ede6319518651a391e941cc800356833", "1206dd00df23bc8ce0b85a018c4b34e9c3b41b4ef59c71492fa62d134772f97e" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "fd6dc71a71f1d50d1bbd976af4357be4dd2fe850707c431fd376e53d176c6b62";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccacbc626fd6ea31175815cff958ca1637323877d3bdf09896b527bf4e255e85", "71f8a27e6309bd9b9b15d78d5270012ad2ed15a7fffe024fc0eca63fb6ac2f8d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7ee75ad2a5801c54722eb7d95ba67febcfc399b956b7b682fe89638de3690bf1";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ccc30b65cad3dd1d793b6db80f57b2e1237973e4264c3d9bbc2551ec68a0b7be", "75ff6d1f4f535a131aa573f6e2d6912c397154933750417d28e46524392592de" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "f533776f11c47ed0a7b5e25ace7a3b921866733c7454b2c678b8943dfb4cf232";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cc9349aca0cbd0b2df0deecd88ed39e6d8c7c3d7b422fd5d92431baf7225fcc0", "00ed494be698d6f3850be277c268792400f396025cfa95cf56018bcbc243e512eb" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e8dbffee01807d75f9aa52c295e15b15f138439e7a195a40709b1abf511dbc6a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0e7c30d2f259f7c13f194320e43905d0ead7277e283e8918437c10f9d052b0", "2b39b66dbba2b1cf5dac1b41d2dec6f1fb08bdd14d420d703986f63aedeb5c47" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ca01552b58d67a13468d6bc6086329df8f44cc938884fcf15c516b02a7a7b5f6";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008fa298c00ac93f7c36892c5299005a0f6843f9cf0669fdbb7d6d81e0341803ed", "4cab33cc2821b2da849f90ef20dc1eb896fc67161440b3c52c0b1e88627e508c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9402aa56b1acf4268d1ad78c10c653c063dabc4061c159a6f8d077787f192aab";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6fbf608a83e37ec26b37da033e069816680b770ba766fb8c44fce003960562f1", "045f268ccc5e0949213f7f2f1fa57cfead04625ec3ccfc9c333596e487b2056f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5e03ff820a836e39d3a8435219297da13870abed3afdb65c954f83ee568a9f60";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c4dd547ad750174179bac8b8ce27481c58b81347776220a1b52ada13d65c8124", "00f9c2ef3b5b4957cf69d3a139891682363c040610f200f4c318e59aa68f298af0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "556a715b4d4f9bc6d73c39da07be0ae5a2b2fe6465e0762ad85e9ff4ec313596";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "055d79fb26286bb6289a7983a2b23bf5c30cc3d70363b559adf5548af991f8", "00cae8b1b0ace32fd74a86ee1a671cc36c052a4796eae323be32e02ce9a0fb6227" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0db51c74d34e41baba67c13a60af404ee82d8f1b0386b09696ee1e6ea1327b86", "413886c4623fc222a6950c3c3a09f3fd867a566bfd345e06b09ec6c5c2e4a192" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc2f7bc74cb3bc7e797b06cc3e649bf3407d1a55b4eaaddd28d3dcfaff2c3737", "00a23bb364e16ac79398c013ce29a22e762c0d6067aaefda958474aad194a92e8a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d7edc7c645efff6af8821aea5b7f969f56ef6e615862b08fba3eaf0111c06f67", "00e47fd0da61682adcc405f329148bf1c35b89cb5ec5a9ed0d98a410e261a6b41a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6bfd7ad01b5dcfb04de464083d3ca7ef5054506111df92ef02ff7690d9a6ec93", "06c469fe4c5a1e04f114e193b4bb197de2c8e35089037e5a20275bcf67d9bf73" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008a9076c923021d5c5ef85894176ebb5c3a74aba75b3944c96f17debc2173ba99", "00e5601d115bf08d37ae115c4d186bc21127bbfb21d0629bde27a16e9ed721b740" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fec6a85e077ef4240b98c62ab3b93e2cebcad0ae9617f7b0471504db1f45a65", "245a5fd0ad7a6d854125ed76d4787f77cc1983eca8c6ba8c019523a088c4d0f3" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d3ab94d8704fb51774dcc3838ad9703071e0851de9b2d6ca74ccd79b85558191", "4e4979b67f377419e5a9d4f03012b7e75656556f23756d4dbee145834c8279ef" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49e13cd44c8b8350a5eaca2181bf96db120b768bde8800f379f43e9198333c75", "030ad9fb4b0b233bdc10ca0dc4c2134b18b691e46c7151e3573aa2b62891e69d" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4574fd94ad03828588cb0bc2d434842ee093efe639015cc107d1ea3710f2112d", "1786d6ef1d411cbd1af5b5ee8845993e738fb64519b4329d04be21f7902a1c1d" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ee824d818768f13fa0eb908e396ea1c56b11774ce69d01e563aa36bb41d6371c", "00990291ce2abc55bb6682d502ae0129e7c57e146e96d44757daaa1f94c93e0b17" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4825ee46b2d21564726a32a922f5e3f2da6098f780e1f15c6bf1640669c41fe7", "292c066a24f0f450c2603f1837210898f8e80fa384aaf077eb5c7e87c6b26976" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "41348e7ac18eb1f4852801467bb0a0e36209321a8af4b410fd06f070a81f5de6", "03b5594f1a5a79d23089e49e3e379f2a6cb14f92301c6999e510b8c8dc37fb4b" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "753c74e5a36e1a4b61be7787202c98e05841fea2b0392b6ab69ee2e8a747e2b6", "18971da1c85825c1d8141886115d27cb2add86545e6971bb835a2f452cde1e52" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49c0254724576b0949827ce46240d90cb4075cd1978a416495a455f06a895504", "00df7d64c35853353bd4d905da6adb88f26e62a5f20b3cd6382adf2c5a42d85053" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b05e98e84e2c19743c1dcf4e0ddf0bb1f32854033de63fcf3e605fbb2ed94cb1", "00871d7415d5f6c57c840678f7e1a1c1e323519a4647fb3f6f52abb4647b9b6d70" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "6fd848306e968e3ac1f6e443577c47a3c20bf0d01a5dc39c78c2c69d681850f4";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b05e98e84e2c19743c1dcf4e0ddf0bb1f32854033de63fcf3e605fbb2ed94cb1", "78e28bea2a093a837bf987081e5e3e1cdcae65b9b804c090ad544b9a84648ebf" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "6fd848306e968e3ac1f6e443577c47a3c20bf0d01a5dc39c78c2c69d681850f4";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a49f9ebc082c064d61c0eab5f8bf23207b06e3a689dfc4fa2896ed114d1a88ab", "55783a6baf9401977d117ccb748c0d5c24a5d3bd2133d62c74de2be7cc7d9d40" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f9567a431b716388428510393b37feefd3afcfc6dc3881f623c0a0995e461ec3", "00fba2f910ced19f8e789b158390a295e636c588c622d54f8feffbd2852e2911a9" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "26095ef93b10bf50fe283f4c99136fb81fa297814f09977e8e38a3bfb837f61b", "00af8d7cfc46c1928624f201ed14a70701bc5531bff4e2e578d5c92dabddbc7580" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7a4b58ee76d461a1c3cde68400a0bbeeab346ee69315bed63f1700c66cf5e6cc", "00a642ae4078bb6bbbb76028977882e9c8374f267a2ced131029ae89560ce29825" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f2a111eb24c9d280d9a66e4ff18681d222dd6a1828ebc4528f2bebe3e25228a1", "00a0699bcec507fd0ec83da541a5a6143e2e68e4af72fcdcc8a2aea2b17478cc8a" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e50054b3e4a4d1fef988e5a5e830155abc293fea3598af4c5ddaa10acd111274", "00eb710d1834568cb379a1d1f3d691a8c0dc19f901fe3225c2b6691df5ef5333fe" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00edc17cd4ca6f9988fda5af4042e3f9eb42d0f7b6a1c0156e1a2af566b7810354", "008a5d357777b306e96405f12e2617c1b29e8d574e5f6d66d1bc8ff7ea7c4b683c" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d267c10d2315b42dbaf34c97c3c0d331fabacaf6021df4dc85b3e9e63dc0798", "00ed154b11fa3a5ed952c14d8a2dd242de2b6cce3c22df42cd97de30054a19555e" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c24bf7a984c96ece10077a9def38cbd0d898abd555f1668e06c27cabc00f6f67", "009f69b238e1f95e99e5b558e0036273ebd6c36d12b4515348b85a21f6283f5016" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1cd26d668807c815ed3f532c1db81ac473fb368f0f7ef1aff2592ea6fa6c4624", "00a229b9ab5746cfbc47280c019a4248545354ca20880ff41cac2e252bc9b49704" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fc780777a3289af663fa02b1c262a8373b84614e659c1ab46942f1e058926ff8", "2196c6bcae0b2798298d463be5c87924343d7f103a27131e0c7f4d60d2b5da8c" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5e25e2ee8af5ef8a3e0908341f9884501fb58a2fd234b1db6f22d561025524f4", "491d97a7793c9d9a1f35bb35f12121b9dbe075d8501cbd4db6697e3e0ad98bc0" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3ddf2920607df596da90123ea5674958054c8ed7758661b813f1aa30f19778b0", "707243e1a7bcc264b54289832e950c27563856241b79c243d0fc54f7ad24bc25" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "43f800fbeaf9238c58af795bcdad04bc49cd850c394d3382953356b023210281";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "bc07ff041506dc73a75086a43252fb4270e157da75fb6cb92a9f07dcad153ec0";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "6632473c909425b6fa37095398e2538daab8552440320f9fe190dba8f672796b";
                bn_t sig_s = "a8c3aacce9ffe4bc17c0530738f1386f9d9579f029ff3a7791b16e98422265e3";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "465b0fb05c14cd4ddef23e13acbe5f2337c45ea3816536670cfa7f2ab9090619";
                sig_s = "5e525e837c406cf8944383e20bcee32112d8da5b42b40f88415098f722aa89";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "7b1553e4d650c71fd49aa36ceed56f0438b0065e1b234445134bf7c83231ca9d";
                sig_s = "e369a20fa6434bd138b092885a89e53a3f0b6bdcc5d2653e136c54070081dc5a";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "c7ba1c73bdc4364f6c7c61ab1fecc0547f8d6fcbeb251f734964407536353f32";
                sig_s = "7b3a6fb2fe60f8861e9e0955663f5703a17f5ecc3a5b5140eb87eaf35a3a5090";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "2b9c9f85596fed708b3af80393b27edfd0b5ae2f0074270a56362f5f9f62b4e1";
                bn_t sig_s = "2fae837503ba2c1d4c945e0913949ef094ce0b8086359bbb5dba4a12707c5600";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "5cd765209021d8c1a8aef4ff61d6fa6e7993bf9fea0b93609eea130de536fccc";
                sig_s = "4f10c7989587fe3019e36d85aa024bf20db6737c4f28900c1c9662f2782143e0";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "4c1a59b1e578d76f1595e13b557057559f26ab559ec1df3f45ec98b90fa526ce";
                sig_s = "c6872f094bdb3f82e31f93ad65357e2daafe66f304af197089ef0dc94ff90624";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "a35d1400d4cc7a8f617b721faee7118a74103c4630dec5aa47e097951dafc1a7";
                bn_t sig_s = "958221023024e97ef6df35a22e820c7bc5e16299f3f12e9d9b1b727c46d795e6";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "7fb733ed73c72fc4f4cf065e370c730301316ff4e9c6a8a701170f604c2d70b7";
                sig_s = "7ca9ca985d3df48978b3a2f9c0bb8a58b216c795e687f74623a3321448bfa73c";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "95ae4df2fba8524e1151cb9a9c5c1ec1357a663722a18329303d86a58e704754";
                sig_s = "591ea644b1dc6f4c7cd5d7d939397f84d9e077100760f0816ae5b22ae6a74203";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "717925f0dd5cf45e746e87f79c9ea97d11eb01444052c270aeccef56c2e95828";
                bn_t sig_s = "785787b664137080383d2fc500459fa713258205fdae97b3240fb64bb638a657";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "8adfdeae3b586315d06183610d271fc423cc789908b8f5dc563253a3c782510a";
                sig_s = "8137bedbb4e60da26041b351f72a6bc3b7741f745743f0733b40b7fc56febd04";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "92ded14e19b94d17c79b063a034b122ce3b93a2502f2f223fad3461abf631632";
                sig_s = "52ff8ad14ba3657242e29440d01cab36ebb6033ee36021dc8d9b38f0808a90bc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "d48373483e0fa2f11cfdfaea6f1de59e6861e9e87c4f6446602ba0125ab7de46";
                bn_t sig_s = "9d753bba3a7be08aab456e93a6500d4781795ed59af8bd6d6133129abef1ad98";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f11473117b66e5d84a2ecd0f8b7ec4a2cc2aee89ae022020235777305142f498";
                sig_s = "fe5ce43ced28f3f69f65e810678afefd2bdeefb051280ad2880157fda28b2ab1";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "3c9f5bdde7310b5696c93c86203fc97e11a70739e20c71c9e722308d45a59e6c";
                sig_s = "c09efb9a045a47cce799b768890bb17833a0210d869a36be1da33f2585477c32";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6953442c487f240487d2af81f9825c894b1fc2534321fa012db8248be20a4b06";
                bn_t sig_s = "56927395d64ce4d690caa98944c2ddebc312f57f439d37236ea63cc1de098718";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fb39aa5f36ceca6e68d1932e811598c412892734dade389fd9e8ba94c5c7a251";
                sig_s = "fdddf0c3db66c7c46608ac98431f0ee8ebb1e27ba501937789ebcd0f7ac26ecc";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "44fef6017638fd5bda17dfce346b0311b5e369bfb68aa85d5e970786b8e6644b";
                sig_s = "720b3a52fe44be6028759f0f1a6fd7020ff6792cd4ece98dffd0d97d3b726091";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "304babc41346e6205cf03e2d0b26e4b222dce8227402d001ba233efa69c91234";
                bn_t sig_s = "65add3279f51b2417fb0a13b0f06404199caac3430385513ee49f67d8e8cdf";
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "23868700b71fbafcaa73960faf922ee0458ef69e01fb060b2f9a80d992fe114c";
                sig_s = "6ec1526bd56f6eebf10463bd9210d62510b95166365e10a7b7abfc4d584ca338";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "dd60d7cf83a08208637212b65d079fb658d8ef1b8438d9c58f4122b0cd14ac49";
                sig_s = "f1d762516f4d6c3e6a98dd31dc3869dc7cf35944f33b35c6a17fe632d2b18cd5";
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha3_256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha3_256_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                bn_t sig_s = "bbdbc26e1099b2713ada34df9cfa8edaf905a4a6d2a1f449f05de03df8c2a696";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of r misses leading 0
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe2510000";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab0000";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe2510500";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab0500";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "02eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "46243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe2d1";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739a2b";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe2";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739a";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff00eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "ff44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01eb044a2e719d94a33837717ce9bc5ff94062cf047015777244b442e323862392";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffbcb051537118436fac50f85c98319a110";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff14fbb5d18e626b5cc7c88e831643a0057a4c0de23f3328c97b1e1ba9acb01daf";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "14fbb5d18e626b5cc7c88e831643a00434faeac8ee7bc9053af07a367ce65ef0";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe14fbb5d18e626b5cc7c88e831643a006bf9d30fb8fea888dbb4bbd1cdc79dc6e";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "14fbb5d18e626b5cc7c88e831643a0057a4c0de23f3328c97b1e1ba9acb01daf";
                sig_s = "44243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "0144243d91ef664d8ec525cb20630571227c5815268bef4c2d8f46dcdba7a9dbec";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "ff44243d91ef664d8ec525cb206305712506fa5b592d5e0bb60fa21fc2073d596a";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "bbdbc26e1099b2713ada34df9cfa8edc3e56c7c02359540e308b81b1288c6555";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "febbdbc26e1099b2713ada34df9cfa8edd83a7ead97410b3d270b9232458562414";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "0144243d91ef664d8ec525cb2063057123c1a9383fdca6abf1cf747e4ed7739aab";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "eb044a2e719d94a33837717ce9bc5ffa85b3f21dc0ccd73684e1e456534fe251";
                sig_s = "bbdbc26e1099b2713ada34df9cfa8edc3e56c7c02359540e308b81b1288c6555";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3232333836"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "b98c5232f0100d55db14eb0fe9e943fb45d8f192bbdd38147850f4d950f16a91";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313930393433323838"_hex;
                sig_r = "840a6cd819f21a2a3c3be7461bf516f5191c32d059eea09699ac4132f7948819";
                sig_s = "94c53906a1595cf9fe14831b5298b4e297219afb895c18a19f4508fa4f6e0394";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383433343734313535"_hex;
                sig_r = "5928b7eeb84242914d4d5b871feb3b0d789455e44a41e3b60e0e43856a4a7a39";
                sig_s = "d650930d76eb2444713b63b501a8e8b39615784306f1f2fa90915066e4f60192";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353732363936383239"_hex;
                sig_r = "2ff05b06077811e7bf8a1b8804fa6bb7db793b0a8927745f5b543998dab306b3";
                sig_s = "c9e7da07e2b2d28f169924bab22d90a107ca97f5022eac08d0a4577f30d89988";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353931383333343239"_hex;
                sig_r = "19c5e74fd3ab3847d1ba8ec6ff682b184ed2ae466622890deb4206385c31b0a5";
                sig_s = "c959ebce99b3446aacee56eecdbae1898fc71a6bacb4464a6a4b0276821b32e7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3832353330383232353839"_hex;
                sig_r = "54bb584a67c79e19d3f9627cc1eadacce8075e3f5c03e45c807b46d505ca73ab";
                sig_s = "ab37fbc790a0400debbbde06b9771b63732d79de6a56e87275a968e0d4aaefbf";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133373334383238313432"_hex;
                sig_r = "699d4d68c233f44bf1d3f70001a9acac7be906e09ac440c8d16044364696b94d";
                sig_s = "9990c2cd8d7c6a227dce6a94900bc7b69a8ee6cf0ba062767c09d9e5b12e413c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313733383135363430"_hex;
                sig_r = "e779c882a97701293daa1413f9fe49ab97bd8f742331461d0e3b93333c1db5bb";
                sig_s = "ad3fd904ab463ec8bc7ff988c142acdbc5dd73d8dce919b458987c1f32ba3e9b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353533343636353034"_hex;
                sig_r = "d121d4639e90e4741919d9cb3888d69c46d6fdc84980b5ecc249fa01cae19be5";
                sig_s = "ac0559aa580e535e401ea9e2710f067a375ec69dc49fba668d7a14d8bde42d0d";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313833303339313937"_hex;
                sig_r = "de04d387ddd0189ef2ec494594ed056675788d6cac25f9826e50fec66f47be6f";
                sig_s = "a55cbc3e87809b4dcc634cea32fc23cf7ac70f71ef1731de41414c0a71891cb5";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353236313736353435"_hex;
                sig_r = "5a8d2d504831a047c7277d9c13f7f456fd9569a311c5be93cbfa9a3122534ff3";
                sig_s = "d0f9586630564236e9b133a7b53202b29d3a3caeb28f5d2360adfea238f41529";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353031353339393836"_hex;
                sig_r = "0e2dc3e0b7c51be950c814b4cd74b8707753bc5a7543d6589ae1464c93227bf7";
                sig_s = "9cea04df1218bb7a0c851da9fef4069cfca9fc00ef08c37976adfc4ec7b5e2b2";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134393533313634363139"_hex;
                sig_r = "0c93646c509040bac868258bf3f2d13d26e98993e8680f0da846c1712be95109";
                sig_s = "c65386f8b0a12fef25791cd93a045140af9c24fe3d3d700e02d23b1ce2da05f3";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303633383532393036"_hex;
                sig_r = "9906860d728638f6a260e13495f2c6099838e5c2f94828f10caf2c58970d3bf8";
                sig_s = "4853235fd511b8db3956bd25b772fab54bad3867d1c637a9984016f785fdc6cf";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37383339373634393932"_hex;
                sig_r = "c6d609fc861a35134b4dc180a3b2a7b13ad8477358e80286f90499c58bd37dd3";
                sig_s = "0978e0b21055dcc81844d297d6bbecbd074f09717b46c695ae60799d564a1f9f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32313239323634343639"_hex;
                sig_r = "1496fd7a5023faf78b0e1008b054f25c509d34713d4594cfabf24c1b2229643d";
                sig_s = "f660ac1daa7700a55189d6710a373b350ea2446ae76fc8a3522df3e01a2bc2f1";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34383332303432363833"_hex;
                sig_r = "31007f0306f171eb56c9bc7f7c0cd7d776acd86be680f600d3729aedc03aa9ef";
                sig_s = "59f529aecb6c8e7469830daea5065e6da8c349688ab4fa0ebec364035a68e58a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333635323231383136"_hex;
                sig_r = "fbe1a139e3c74cef01d21d9c5a47a783080dbd9b86a202e933872a71a4b53838";
                sig_s = "fe3164ad51c080ddd4126f42979e6b519075b2ec96060e02f9dd6fb6f9f3bfdf";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3234393137313236393635"_hex;
                sig_r = "04518c6be6586ceb5559014ff40311fe7e6d0ffcdfc655b6a06bbe203a185ed6";
                sig_s = "1e0b927e43125aa196329bb0f09bf75d0481dba924f91e3e39e3e0878a972a83";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363232373930373738"_hex;
                sig_r = "ad67c0270ea088a9daa805788b6aa5161c6e7e12d237515518914ab66d1dcb66";
                sig_s = "c5fa3b243e9148e1dcfc27abd9991a2c0c2d25bde9822ce26f344bc9e03f9ee7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313031323537373238393237"_hex;
                sig_r = "edd7e3fb8581ded7c0961f7365a1a39c6fa301d9728000aeb84c41d918c17dbb";
                sig_s = "25cfb4fdade11816359ccfd2001cc2b0e509de9cca0c1aa7eaae719637e11156";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303530383732323032"_hex;
                sig_r = "4ca5021a99c50916f997009a2f6addc6cb2a57cada7b1eb72821f66ec353516d";
                sig_s = "43d471d4043f8fbb0765c059d1b5386b49a530a626d26d2bed4323c0aea5d24a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353037373237303332"_hex;
                sig_r = "eb3a1a9165de050206fa045882f7f3bd06bd02c2e825740d72d8cb2a07f45cfb";
                sig_s = "394fa8625004c62cb1c8eea02c3411e6a036b4afe14727d497b31d7251d4a20c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373139333435393339"_hex;
                sig_r = "7921badf49f2beba3bc6d696494e7f6c74edc3b722247adbc9cf54d02527ef30";
                sig_s = "a45ef9b623bad9a24433afc7e4e2b25270cf07ab20e29ee822255b6ee8da233d";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363337333035373633"_hex;
                sig_r = "3e2c342f84cb36f986b72bd19867c359ad195046ef30ca7549df842d33a51ccb";
                sig_s = "5b8bfcfc785ff44ccc2651b893b5dfbc12739cc3973988dbb209cd60f4c1b4e2";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34323431323733373133"_hex;
                sig_r = "919eb36b4949e319427b2113927fd40f767c11d2c6a991c558438790959c0071";
                sig_s = "9e4bfd8bcca87632071bdc109cd47e45c90f7cbbff3ff05a1591585b2f0f6537";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343735363134373337"_hex;
                sig_r = "e36e3c1918e378f12ccaefe24954c4fb77d8a227f7a234a045c2fa69ec0184c4";
                sig_s = "65f7b5def112fd96d3c3ddf3aa5bce418ae5cb7322387b18b5b15e2caa78f209";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313632333237373334"_hex;
                sig_r = "89674f75b7440869f9de0cdde21ef47003309be9f0ff7f858c6f43a3b9067096";
                sig_s = "d37781ff993210da5470ba8ce3c16a088e58e79d7fd0f5e2d2336443d9b1aeb8";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323232343034313239"_hex;
                sig_r = "584c05af98b487e9a0b5dd5e0154d124aeefa55eb48a274721365e597549ec98";
                sig_s = "47b4127c6c09077615a921be38942baa053a88b73884dfadd6a745cc9c6fa096";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353234353833333638"_hex;
                sig_r = "5f21b554fd91ca9cdd5109a00ab3ecb2d8b5137b4fd05c254c3faaa377b3da06";
                sig_s = "5d036a7dbebf9351c88d3bbe03991690cb7b67d3b5ca4266eb25029e3a1f75e6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3331363334333936"_hex;
                sig_r = "6a309780826539059b3b2c9d4315bbb83b4c3afc218d440acf2d01ec0a5cdf83";
                sig_s = "5d3ea569a5ad21db62e4bc0b60251e5f65b01158f2c8821973ee6c47cd15fc34";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353332353938343339"_hex;
                sig_r = "41d51f04d6fdcc5f5cacf88e50e418ef0067f8d854dc991615003f1e49927a53";
                sig_s = "c6f7c10cad03b89460a9794a171f2e10d84982c462cbf075b06738b3f904cc5c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373338353138353034"_hex;
                sig_r = "da8e729ac23689e868129854fbbde5c9130ebad0e555047f6c4ffccdb0d75fde";
                sig_s = "b693c1a3ccd93e2989f84e77e0ea5983b758f4c1a2a8c4b6219b6b006e9ba1e5";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343635323636353739"_hex;
                sig_r = "0793b70b17c7db1ee4f84a0fcc27115355bca4036e33830bddb58aaaf21db1e9";
                sig_s = "b884dc3329f826a3cc1766ab7f67cd31ad17b4d48e81b8641d6cf70400c80649";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303334383839343934"_hex;
                sig_r = "3ee201732af7f4fb862991d162a11f79fae57233ff964782db1b35b2dee67f60";
                sig_s = "78e00f30babf2d483c9e9729c50ac07df9abe878ff8edd3cd7ea3cecc30b724e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343730383836373835"_hex;
                sig_r = "8f2c4f9daeae645deb8237f2598485a7c3ac3b0e0b945641e4f24f59ffe7845a";
                sig_s = "a7f781e40a73cc4f49159ed982ffb264097c5f34382314ba0128a52c9144fd33";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353537363430343436"_hex;
                sig_r = "750dad3a83d3c3621a78dcd92f7da948c6fc68d7f0d9603835b2488515c539ae";
                sig_s = "a0736c57503c76c2342e3f13e55f6dfb6637b1fb6ba5caf00b9e540daa7f70c6";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333434393536363038"_hex;
                sig_r = "b3d14a7f7dd693c7fd62d073cb6bc77504431d8a992cc64af774703a981db0a1";
                sig_s = "ab8a35acce773242850c086013869631e99cf9c5378d39d0fe10ca7b504c0cf9";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393432383039303331"_hex;
                sig_r = "ff35621d420e7a8343d222f18acb46ae5a5a29320f88e2f0977acfd96d701441";
                sig_s = "9fc29bfd8a80a24959bd4494de1b3c0a3366131aefef4fe9d33f1f91d118bb27";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323636353831393339"_hex;
                sig_r = "051291f27408436b4c56cc8993b3891c5c3a4bf3747041b4d915fdccc1c67a59";
                sig_s = "f8d6971a948332617564b4c9581850f8992752f1afe30370a4d36af72376672f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333332323134313134"_hex;
                sig_r = "b820f2163d1a902e847c69392da7124bc31f56ecad5f73c3db142c9c8220cc65";
                sig_s = "89c527e55e559aa5efb263860fbac04f1ce556f82bcccb49991bc2c575808aa7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363136353237373135"_hex;
                sig_r = "0180c08e97d4fe407c0eab2eb7d17bae60e8ca9ad459e57cdf48389ed9ed9536";
                sig_s = "7d5eaeffffba65afbf1ba9ca9bc0fe1181da76e5e41ade8687799b09e9104597";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333539393535383133"_hex;
                sig_r = "985f15f0eecc62112817bc234784d60404804ea7dba48f8c09cc02401c4e13ae";
                sig_s = "c73d1bed7077734492c700ede8e6800e048523ef9bcffb53cc79945805ff711e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323931333631393538"_hex;
                sig_r = "d9a5ae9012bcacfc12fa3db623d2099657d4f321460d0135bc731a70478b79bc";
                sig_s = "a5d882aa5cf390737839443ab059d68282064d3d827bfef52fc176d0de60ed46";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363230393033333936"_hex;
                sig_r = "f070e1285c47106a1ad23a774756a3d3453a48d245401604ef59a96b9a1910c2";
                sig_s = "b43cf52041613dbf8d3a136a0d0f6bce87cd74262224e620f355ddeced20e5bd";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333633313032383432"_hex;
                sig_r = "963a3ae4b0a7ae86047e47f375c7e42de035f28fb430c408d0d815caebefa344";
                sig_s = "a1edd8c2d39f04f99e05a793b7970dfa76f4b1fc0663d308edee9d3ecd077d66";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363237373433343931"_hex;
                sig_r = "e6adb9139cf47dae0890006732629c8e095c13df370717a42a8bc6e8936678ef";
                sig_s = "a8df8acc7ee7551cf0409e8c1c2fd0df6e7e9b3827e95727fa492c274e4668fc";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383536373938313437"_hex;
                sig_r = "07662a36a2bb779a276145e78543c360c7d0a22a1749f69ead2788c75750d248";
                sig_s = "7c0a4dba499b27cc249a705ba7bbf512a7484b93f9a83ca9305dd49cde6a302b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383831313830363430"_hex;
                sig_r = "36df003efdbec3bf53a2a45248c1e96e60c9bcf10b4f5dfb220744d2da51fc8e";
                sig_s = "e5f103b3a74fa1d0a78e74d604f31889e6637cff2acbb31a70726e72f392d4ba";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393537333934363738"_hex;
                sig_r = "712dc3233f462b0a37f020ec559bb1a19d879ae36210c75efcb9c071915116e1";
                sig_s = "06a981761249cc1929f5c18d6f2a76eef487bbda0c4470bb098b87b91328083f";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "353432373131393834"_hex;
                sig_r = "10e373d1cb4c05295b63ce7103817b7c0fd096d7c63f65f56d950a61e455c1cb";
                sig_s = "44cb5c8270c069ac408a6c9f31ace9229ab6078a36adc465107f0a3d6ddfea66";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313530303334333235"_hex;
                sig_r = "cd1274f4c89ab194203ccb5c39e7d0bc364537b84b9dd48d922e43e79e4258c2";
                sig_s = "42e1fcf72eb65d76b13128d3065daa31312bf9c110f18b4799dce8eccae52d67";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393939383231333931"_hex;
                sig_r = "516c983fe6567ac700f93028da6affc598dfa95391896c544c8f73c96314a0a0";
                sig_s = "bfa56a1833668acfd14899e8cc160b79c5e92a30055dd7c700484f6bfce42cfd";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393731323039323631"_hex;
                sig_r = "52279b3df58e2aa7ddaee1e5de155cb75d4f00ec7db74ae913a6ed33dea896d4";
                sig_s = "ef5823ff9977fa492483bcbfc1d0bd765fd6dfa78cc11e658b4984b543e0e79e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353731383338383537"_hex;
                sig_r = "01c2a04eef5827e7e04eb51802cc3859af6d84fe35aee4da4bc1b0ee154b7ef3";
                sig_s = "dc57a107da6bb12624313660233cbdcc55ff7147ecb3a328af3e86225c89be53";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38363832323639383935"_hex;
                sig_r = "1ce1bb1fc78a38d4af211b5fceebd01126c10ceab1de6401e1df1dc495dbf5b5";
                sig_s = "c9b564a0a5b9675eece3cbe33498634e7943893fe16c61ef894bd4be349a6874";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353438383536303331"_hex;
                sig_r = "b7ae42b36f060c15c6745ea4d8bd91ae2eafe0e196c52cfac4e16ab74d3048b6";
                sig_s = "421bc2dcd0854dd4e69a3e930b2cb646557bd68c800c5a2ca7bbb3ddd32370aa";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393935373031333139"_hex;
                sig_r = "d51dc206df9cfb7198e22b957c644357542264badf5aede3f7474534da0d5b22";
                sig_s = "266d172a6d6775963f9ed4fb59065c8f1948c48a51463fe79bbf1b45df7e57b9";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343536363831373835"_hex;
                sig_r = "f881b3e21684fbf899f762c8fc7c7423a2ad2c276257c99eae86b66ee39e4ae1";
                sig_s = "27207d5ccff773b26bf0d282d884b3c3a6724ba06a1671c9f9be8cbe6e3589e4";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34313835333731323336"_hex;
                sig_r = "2455ebf62b50f958781792fdc705755923a30c0eb7d515a0988c1a14de62caad";
                sig_s = "10bd68c881416205bd95a5f2765d69726e0bce5b2a0ec525aeb1bba7d35d8e4a";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373237383439303034"_hex;
                sig_r = "9119d7949d9e4c55e4c712d257c4ba3ab9d657c7e0aa7840091cb2acfb4fc25a";
                sig_s = "42524fd0c4ae8b50644cba34f86c21a42ee045ce7c15b4eb817affc78d20fdb3";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353632383139333138"_hex;
                sig_r = "191e716669d84631a04cc085f03b2f1a4f55810f70bebbaf5ee13d68f2598ffb";
                sig_s = "90f208a9f1c27911b5fb8d867bdf123dd601639c2dfa1f6a61fd2f82cadb1361";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3231383739393238333836"_hex;
                sig_r = "8cc2cab9f257928181c4d3685d544bec0b88b95cbbdb8ad1b0543b46b2414473";
                sig_s = "9d1d158dab8e91c68b372ade107aac5c22f8be64463b0c23340dfc828d7b7df3";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "27504e893fd62d0bfdeaa073106b16e8f8d2726a9762529764cfe8fe8a38460e", "21bb0ddff040b7aff8f08a60d5ae1a59472f394846ae4f58c4be0cc8a2a36501" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f131f6dddde59bae7b0090a47bafbb33c157ac6da439324a6681bf67f575f90b", "00eccc2fb2c0be318fda9335bb83488bcafd33be82c38318bcf845fd0e5017c248" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1101c496d5f8910a7749efff9dc46f68a7fd02d6975fdf15bf90efb70463cb4e", "00de199e46e67d463aa8c752cac8a342b8fe0e9a5ba9a67416c8865c45e478007e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e43a5c63ad0bc8d178a745192671c06500f0dbd757c3f2eae65089aaf0d6489", "0082954ff60c3460a27748445525c6cd30701725e1697891cb7f32feed128a3ae7" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ef4e8b5732f51a4b2547c6581381ccf750bb6d30a07cb758865414d9a45017fb", "00f10247bcaa4ca73d5c9ad4c8a03a60a7f5cfa07fb57437b5a6f0a9bd381d78a5" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a973c15a44d2dcd50558e033d242155a29808b87491576566a83821b650e6f2d", "00fc5ecd5482fa591f578308b09f2e704116a375ba1e2837912bae2972d340414d" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "02";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cd31f1656b21ec27276a533c35bf51d95490bfec57868a9b94433eda4579d61", "00bb2c8e80c45d949bcaf6f0bbc76bc27c95939945052ad1a11014756556c6f978" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "03";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7f77dbb4e500dc9e405ebd9082afa9d0afb5c519fdce252910fcc9202895661c", "00efce51d16a51700a672db8de2af070391a02da1c6a398b7dda94403a06db03d1" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4f41c9c4c15f02a199264a51266ed793952a7cea79125dcded805ed7a54c13", "50314fa927966b90b6c4e57cb521666fce4cb81b7e4d3550d729fe6dd6bbe5ab" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3bd4a602119bc50cfd05aa395c3c9f753b383bdd9539d27a1a143033fcfcaaa8", "0092d75438eba5af693196d4b7953184e2d649a0845d11af3c7d39e3b1f5449c19" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7c981d6870575725427fc84ce6b5f706af6e8c62b4b5f7f72c3ee2860836996d", "29f07476cbf3f93a34e73f737658070642c66d0e34f5d56c715a26b099078413" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d75a78cf296b58aeb52faee6a9348385bcdc61f980da8ad6f28654d86fe516e2", "0ce9952182f5f06cba50db8c65aa6f8cf1a32f2a46599c0a2abb4c1402cef467" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a35a42fb4057e11e332442d73729cdc684e7e0a7875ec933337e74ab1e17de6", "2152e3a6558865d7f30a950c64e9f2e9d2f06c2703d2a1984a79445d3870a1cf" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "705e0c3ea1ca443a0105896e7af2b891a08243cca510cb5fffaebdd86ec6fc8c", "25d116fcf912e8246a64d5878436dfc958b59d4662a4b227a006876b5042fa58" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e322c7aad4a70024c4f80ea373e7e85f23dcbd11f186d55d5a744cd0f459f6db", "71d54db09ec66eeadbedbacfe2255bb87d0c1a737b3d3b1c7b76ce78d6342d7c" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4b242ee4a0a37835c590f6abe1af6668476c9c12c15b8aff776c7e7a8a452319", "00b720cffae6423cf47aa375fe3b84346a83b09e0efa245eb89d99b2585451603d" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f9532aa189138b5e203f8f3a9acf03affa80794f37b647ac289267e8293ededc", "61ac8ac734bc4c7676bbbf57ead50b4981d9bceee0172e947c22c05f4424c9b2" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0f2256392bbc44714d5fd698b611b7140c3031845f14f8660baea5ec830088f5", "00d5650dc0f784bd907f41b13936a2d13d0e05deb103efb069f8a771b527322155" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "260b66d47b3a3be44364f1fbdd576b824893ce43c78e474db3c1b25106fb4865", "03620b6068877f8b9018efe98191b24cf667053c09ca94da7bcf854bf6924332" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "30549bef5174962c5650944bbd7833220338e2e31f27775666f7d124d8ed7783", "00f43ee6599a8458c9d786dd50cc676babf489757ade3e267d87bf2654a34adb20" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "a8ce483b42fb3461047c96ca00d1ab82c81e3d602cfdab62e059b19562bb03f3";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "22283ca6f055439e8540454f63ff02e2e1141d10e34a54737599fae66266636d", "00c8fef97c98fa1160f829b7c1326a069e0bb442428f1503e8cfbb616cd8118832" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "068f523d44cbb14a249394861c4f417c19dba72f74e1b123b4cbb89c74541b41", "44cd654d2b5871942e8d181f9e38f3946b3a73755a20e68ba555d56de6e290f4" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "123670ccceb86a9d5fce24f070de8dfab093ee66047b17c1d7cca4734820daed", "76495f92804999f894c0184f72235b2db0a7d8ad077427b346d41f24eb2210a1" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "1d109296e9ac43dfa92bcdbcaa64c6d3fb858a822b6e519d9fd2e45279d3bf1a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f5ab53b565f170a3a83e61dc8cb5bb3a217398f0880db80c41da746d53399397", "3d113d69a23e02aeb2e335b28b85490ace7df18279e2f4a7bd6f69c656fe6763" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3a8a53a9b98a2111e0c5e758a61f57822ead6ac1b9489d7b1bae29dc1dda7a87";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d0abcee886b680233390f1e6d5ce27056cbfec35ba9231725849a3714b06e828", "5bb11395652a85301cf5110d75d404a1f449ab2ac4767013fd586a9b58114006" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ac2416840b83e89e188d94463bd19cdc296fb2f891782dbd736b7241d371e890";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0f82392f4912bad8f4fcb151b290003174526a8cb27091d38c2aed163040698c", "00dc34e9542d264ecffcd6339963804d68fc8a7376312b8a590d836e1ce1a9e637" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2ec9288261d8fbcda8ce483b42fb3460c908624c8869161e6b15d76e66ec5dff";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b8497a00342aa0ca81408f40de05e938a151e6207a912bc35a13ab8ce8682d4", "75d9d40f07fa88a7418e10d0f92bd10f646016be181c04af65e9ac1858f8e145" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9288261d8fbcda8ce483b42fb34610470f37567e692db81ce2caa2fe67594614";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e95914e5d692f4c30724c50a232d432a09664e1d485ecfc3a8299b7007b990b5", "01a21060c529f3776a1df1b3828157dbcd432e84d3ac229585bc9234341788a8" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "25104c3b1f79b519c907685f668c208f63bfd0162312cffe05c2e76ffe7c4ae7";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00af3e088449e97df3df478c59536965a18598122efc5bb20d23b9f5e41bc84e8a", "403177e836fa23bb3ba2b8fe6005c8d79e1392dc3b726dca4eca14e88c00fdfd" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "61d8fbcda8ce483b42fb3461047c96c9847a30c583c9b9f495591fa1e037b4fe";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00acaf208d26995e464ebcc54a683b04985c7be74448927e5c15332852886e6d74", "008b182e2468f86cae75d045dc426383d2da3c7e3ab515580f3ff6523f03ce40dc" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "856739764fc50a930e4201325d77815bcf9b7681ed11213a053e816c5df8e6c6";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7821e20d3938bbb48240ff48096e928e404ed91eefa37ea7cb2c8f339347b6ee", "6f7ada5c814f0f06eae9516a7848361cc3ac2eb4450a4455743d363f84f0dd1d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "512c9e1178d280d8464412f2bdf2dd9a7e8065b7ba9216f700779794c9a849bd";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009b0ef17c0bd3dea11be2c3358058a1e10b0283108bf79aaae34355c2329e84a0", "00955f5cf7cb593ee756cf4c9f2f0a488a2993aeba923320bfab98c6f72e079d73" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c9e4be241bd52c69a2486b6d22291f502f64efab87e244d33cacce68672fd44b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4ba97363a7e14ce09480bd3b88491a7a501b5d4871b470498abc9a698c069955", "008ce9e198c1d48ec6650d59c15f9e1fb40dc0adccdea6329613e3a9a4decc80f8" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b0a10528cded5f2b80520ac549338c3f61bbb6f69877aa1b2fe9129c0ce717f2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0bad8d9f015770ed8ac654528717734214fff813809b5eb886f87c46d1bac68f", "00c9134ebed0d79a82321cec4c77d5b91c1c7e3c34f6a69cc10140127421b87b92" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "f177b6b48b29de102b6a1921aacd9c94bcec17a59991776cefe8ec63934c61b4";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ab53f0d664c621138893fc5ee2b26ad2d686bbbb67eda1ee0dfb9609a3f5777a", "00fcf2d72bbd357bea8a1545fd4f162f3faf43bf74666cf23914c7e3d8dde79e97" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e2ef6d691653bc2056d43243559b392abf29526483da4e9e1fff7a3a56628227";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "418698cfe9d564e0e5d04a901c062042d864091573f2820f4592d40027dcfe26", "34909e2b92b3cbc595203553121ca46efdda2c23ca990e1e56137365c5a5b795" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d467241da17d9a30823e4b650068d5c0c1668d236e2325cf501608111978a29a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dc0515e400e3527d2785e4a21d105af4cae862b31e07de117f11c9cd8dc9bc9b", "034eef9d96a56c0e74efa10a9f75e2a44d1337e8008175fbb40fe1c700144601" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "56120b4205c1f44f0c46ca231de8ce6e14b7d97c48bc16deb9b5b920e9b8f448";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "53ff623b312669b48cc8a120b76a811e48a930548de8476d2c4607a5524ce592", "477ae28b239f626067a1d3dee97d769d37b41b184bae95009e401e443e930ef7" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d2d5348db9d837537c90e930ce35d4cd90e7d7a3460b1384790b632281b98ce8", "43cc7b9a20c8734ac2c62a7d207105f5b2d85c2418939d35e3886f3893cb21b4" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c5fe4159e0b606879fc2a11088d658030ed7fef2e6711aab04869612fd09c3da", "00ac9dc7e198495afc0f43f4de434b8da233d8492cda28db460e8480aecb0a88f5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009a72b785c90a695b8e355f5d8fc151046c360d739136241c7fd1e77a0e8b8545", "00a470b4b9a54d1d42956ac43b9c9f2f0f5489da16130b7ba1da38516c912009bc" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0081e427bc8f0509b19a14c16e8883b12641d1d68e070c36ab49d1690e5decd061", "00a993d77e9bc0f2b66edc6cd7ca8e32becf32596405622ea2756006deb3e8ac5f" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "756279b4827c83372130d4feab66a4397ed4463ac9ee1dc8adcaddcfcec59269", "00b6323337d89af4208ad8818b67e26f9b8080316bc43fab53d1b3b7cea5db9947" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cf9345e850417aa81b01a941a02c5546950c27830841a435f4f3654927c6926d", "1ec53d04954a47f37915dddb48272fe733322d8250783991709b37d87fa296ef" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f95f625795e6cc17b4c28b1ec643c36a34989084aa6a513812c3aa9bec073031", "2b22ce0eeeee9d45cee863c1b1d05381ac8b2c896a2cb17d3e9070d41d68bbea" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c3f0aadef8675dc8832a29b397488d6a4fb54780e5967e8b43449498c16ad4bd", "00cb391b545464668d4d0a80b8e283132448a3c0be0abed304cf0839b5920f3867" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "76b920709a9e5dc54a91bd4772ab2593a76f38841dae2880f547c3bb753ae7c1", "5f01e6779d5e3aba75997bcf7e3f320868ba8f0bc1210ab80b42760a6a701206" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e3895147f4e36a13c3483ac00c88a78a8ffa42478afc2e9d8386205b0b1df8b2", "00b4156b56ba217b1ca08bd77f819abb52d742f6b2f7d61353e4cc5663da487317" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e733999ce348cf7b363dcf931953cf1c247c3a887408c064b9791c178ad35029", "0b0849329da7008e6a2d00142883f8041b9917528fcc4c5bd3f795accff28eb6" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "069b66f716902cbd51dadff61644ac74c6a35e8c776ea22c9c3492d1d3faa2ec", "00e4905cc480bc967ce389b82c8e6692b159d3fe9a268bfc12010993934d7e24dd" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009543bfd3a0b678654fc65458e3e62269b30bbd2a40282d92058c3311a61bd885", "333d78221d9aa0a9663a5df5123d95c3ff4a02606278666179e33c94fe1e0cd1" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a6884e6218642518a211f67b03aef6a84d3b32d18eea445b31913e8a1a00f4c5", "31a318166cfcbce34307572eb823edc5d0334c5e5373af4e832e730047996aca" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bd4c6f9ab363a204fd1abe0f7158b84417cca2e0d355277ddc17cac22abdbc2d", "00c66469bb8e8e04186e81a2b693cc2121ef22cb61803a2b4ebe1a3e0d367b295d" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "eaafe4ce77ccd9137f39edc5370d26b73f4dc6ceadfb40a488b2dc6c93f1993c";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bd4c6f9ab363a204fd1abe0f7158b84417cca2e0d355277ddc17cac22abdbc2d", "399b96447171fbe7917e5d496c33dede10dd349e7fc5d4b141e5c1f1c984d2d2" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "eaafe4ce77ccd9137f39edc5370d26b73f4dc6ceadfb40a488b2dc6c93f1993c";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e1815bb1653b8146a2e9160fb0e946112b8994b9d90ef8a36a8ef2ba187b705d", "11b344caed87db94b9c9eab8a5e3277a9aa46b31768cee5406c3cbcffce0a945" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2be9265c148fc61379ca147e651e7f0a1c602cdd66f70b4b6ada2e83f56c1a71", "00f5e1ede0139baa93af588cc7ec1b479b91d230c811575cb143af12c631d16a61" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00af3b3f73a409ffa51b10f3cdfa272d9b42358ca9aed2840bfaf5bd67e61fd1c4", "009d07371ca919a069e46c473e6e45b2f2cd019fa21f84d0abfa285be5513781fb" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e155240c3be314924ed787354325fdc3dcfe46d603798f2491152448e0e413b6", "00ce1124313eb0048292f6edf9f248ff9624936e41be6c93dce2df9ab7997289fc" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0087d4de4ed890da42d7e11a95e56070c95901500c53dd55b62952679884d2598d", "00df8a37ce6d8f86f4e8b3580d6e6a448520cb740888a3b0eac92bc9a2f1589b4e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008c03d72664214f3bdaa6a2e1003b14864000e5993b41b71b68cdebc4a08f628a", "4a490efc9172983bec203e6096dd9778bec26f6e443e1dde67060dac18ca2440" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1ae8bf7b21b3ae00fd01d19b4f72ae6b47bf752edf476cc5cdfa1c2345588e71", "54dc306165f4f907802478ed2aed41ec54ddf870bc62c2c373971194308411f0" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c5dad21249273cd72ad06943b4e3be0822595bf9fa0459223d27354dea24179b", "0097340abb326afd1eb6de5e525a23aad4929f8a09244c972841a0cb76680ff060" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f2c6643bf373a0812f993cd616993551d7bc7826d3d6bed0918ed4998b74e837", "00d7160a452dd2c8d3e5f4f80a1efbc33793c35d6e243e9dfe9a39e26dfb7a1b9f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3a1bd608d3187c684d8d461a5406e2b86b09eedc5d2dd28fcc341bd2d483a6d8", "5e3ab9d9e79ecb7e43135782ae60b12ff69b3349c1819b4ab27b738c7f803595" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00aee2e5aa96d31bde8b0ec1e71d79e721c5fb094eba49d61dfba6e636a77b215a", "00af3534fa210143ce3cecc5bfe1e0b136ab6811d662376637efe1eddd212b6ff0" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00db0dc63f6dfff9b2564498a2423449cc5d894222ddda86eabd6d2bb2549d28d7", "5b5bc20153ef6a2649dc6f116e6ca5c916740a9a645618003a5a448eee928fcc" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0082a004a2ff4aa7c2fd4c71bc88a4ee16d75c11f5ad8599a6eb41ea73e49f80bc", "00f360abc795b4b21b46584a1bebc41720df51a25044880f287c5e5d83f83c1d20" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "a8ce483b42fb3461047c96ca00d1ab82c81e3d602cfdab62e059b19562bb03f3";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "5731b7c4bd04cb9efb836935ff2e547bf2909f86824af4d8df78acf76d7b3d4e";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "a8ce483b42fb3461047c96ca00d1ab82c81e3d602cfdab62e059b19562bb03f3";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "fc0f737a79d525eefe3c940c162173cc6fd9a6d5cc5017754026c4113d0f15cc";
                bn_t sig_s = "894d6fb59cc79199b89cf12b556ba49f8623b66da8c11a55e267e3318497688c";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "76bae33ffa376b496bde93c7748d50a3a8b73bac045e54c40c7fcd344a10fa83";
                sig_s = "3e25a20716a902d524d656ead090b7bbe1ac25ff71269d7038d4b08db5b1d7";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "016e2dfac600c8c994c0bb815b1072bb5bb680774121d342f93fe0a994f72c09";
                sig_s = "c378944de05aaca70c71ed9a7fe4eed2b36ab3ddb4b32d09d53eebd91f2f9217";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "a33c4acb033f3d0d50d244249a1277448b6a52f524e30f4b73d595fb955e9247";
                sig_s = "7f31b50c698a971c8fab98521ef3a1d6fa483a676230467c8af3018452bf1de1";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "091bc829be861c20c4bb877f0da205b3911584708ddeef580ae46691b245b99d";
                bn_t sig_s = "c03bb5e77a8fad94736775f31ae381015a93973954b2f3e541457fcb05bccb5f";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "fd6a7eec40d1062b9a4a7af4817b3ea8cd21596d6dc228b287a21b647caab29f";
                sig_s = "ab861672dfe3b428c26e08f2f7ca464ad3e966bbf62931408ed1ce2735bab62b";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "53ebb6debd028f195c039ef4e04276adfa2d9551a6e02d2c4143907ec889e6d0";
                sig_s = "fa01a27240dd63aff235cd9778c90a7c25c993791cda584fdcca1a979f5faf54";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "60ec4f23f1b2c0b5acae075bbf09be76ffc978aa4d354d309746047a69c43ddd";
                bn_t sig_s = "798c3df3ada3c91845272b9573e70e683d4e49d90a51f6ad047e24da19355d3b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "4457c32fe6bf74ee82ff8a38b8076b48323769f3b7970f419352283984dde081";
                sig_s = "c6380b3ed90ddba62394c19e02a3b8690d1615dd1120c0fe67b86e7961b8e7d5";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "24820a985bc72c8817ffdec275db7406ed5b897fff0b713d98a721a42bb4c6d4";
                sig_s = "94f1397d1e577fd47cfed7ac01f2aead6888863a3f8ff21f00c34c41e840af99";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "1ed4e5132e4b11268ad55b9a4b7a54ad3e028976bbe85fef2e8cd0a3e4362c70";
                bn_t sig_s = "1d1ce94fd8ffda6df3c307150a98719f276381b0c9d261fba7feba37b402394b";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "4f030196e9a558b5af5557c7347d132b1308b3a1ce88a6bc6bf566ed22b5da78";
                sig_s = "392ddc6e83f995a0030856ecd0822449d8dac2bead6d269ef4b307d535dce238";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "9eaa256762ee3d5d3ed269a2907c4a836c92073918be335469e25743ea9ba0e1";
                sig_s = "2c70e1dbee671e9bbd6b68695ae40d58d11ce82592cf9824914a1d8d9e429fcc";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "db965e2d0d25c84c30ae8a3e31f12b55b8784b90f91d443a70f2c7cb4828f5bf";
                bn_t sig_s = "aabb284a7715095cb11714ec76779c08ad5496d8870e2109467a21093f0b8bca";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "58675835add3dd65f25c76b02545176c37a840748fb64a16b8bb113e361cf55d";
                sig_s = "3b1e25552a5c35732f33735f4dc6f50f947bbecb734599a987f1ffbf86b2842d";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "786a687776da9c185afa16f90a596f5ddce3c2d3caece0344101be24581b86e1";
                sig_s = "75b13da23be046d551c68b54e72a990288dd73099800705e1a854366662b950e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "cfce7188667568bd7d5269a75bef42aa360705db5232d189adcf2323036852bb";
                bn_t sig_s = "5d06871c28d89198870f94264ae11744d254682e06f154332f976b803da8a1a2";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "b21cc81843c74779fc5ba9fe1b0d5e7173f696c6e91398cf83a31bc735b6050b";
                sig_s = "8945e8711789093c80fe6cec3947cc9c36ffe2505f1ef721bb507e05c9c07bd2";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fbc5087d1e6bbc32dae22a837d03151028ac69ad71e66e5fc841de0548c06dce";
                sig_s = "e2dfa5e56de28d72d0e770e7666033c42431bcae1fc6cffd9593d54cbcfcfa7c";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "5ea780b73ce027c03ff81e1b26e61076c8944a835d349cd757ece0c4ddf1da24";
                bn_t sig_s = "bd9b87db26158d5b9132bb0f3df54a2ab6c9ae9a4e0b8496a539ab4ab588ccba";
                auto r = true; // result = valid
                auto d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "4618f1a11cf8cbc1966416785c3149f75a71ae256d445deb31008d51ba6088c2";
                sig_s = "408087725dd6ce18bfb7493a5460b54022245e5dbd731ed6d35db88a51d2ba6e";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "9d9cdb94e5e9a66bf8eedfdf9f1af43713bb05d880dec89aec21631958970de6";
                sig_s = "732932649bea35f11dfe0926618e4f091c1b264ca128a9eef14e6d94d7c9f207";
                r = true; // result = valid
                d = sha3_256( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_secp256k1_sha3_512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_secp256k1_sha3_512_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                bn_t sig_s = "59f100a7e4a774cf8f04577ebd9ab9ab2f09cfc5a6be10ffd0338524e6c26caa";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of s misses leading 0
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe60000";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d4970000";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe60500";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d4970500";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "7f68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "02a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32ab66";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d417";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32ab";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d4";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "ff00a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "017d68757ac197624ae5c77dfa1b3bdda5c3a93710ad3a9c1137198b5a1f68ed27";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff7d68757ac197624ae5c77dfa1b3bdda84e4b7d434ea95b99b774ce407efc6aa5";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "82978a853e689db51a388205e4c42258f705a5d6020e042a88b8d332b0cd541a";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "82978a853e689db51a388205e4c42257b1b482bcb156a466488b31bf8103955b";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe82978a853e689db51a388205e4c4225a3c56c8ef52c563eec8e674a5e09712d9";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "017d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "82978a853e689db51a388205e4c42258f705a5d6020e042a88b8d332b0cd541a";
                sig_s = "a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "01a60eff581b588b3070fba881426546524653ea07b7d32f77af7137f4b9aa15d8";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "a60eff581b588b3070fba88142654654d0f6303a5941ef002fcc7adb193d9356";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "ff59f100a7e4a774cf8f04577ebd9ab9ac745af2def77570c410612698168c2b69";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "fe59f100a7e4a774cf8f04577ebd9ab9adb9ac15f8482cd088508ec80b4655ea28";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "01a60eff581b588b3070fba881426546538ba50d21088a8f3bef9ed967e973d497";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7d68757ac197624ae5c77dfa1b3bdda708fa5a29fdf1fbd577472ccd4f32abe6";
                sig_s = "59f100a7e4a774cf8f04577ebd9ab9ac745af2def77570c410612698168c2b69";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "37363338"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "f5133b41774a185247720d2aa5d8826b6ec5af4c076936c8eaa52ed6cdf59408";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373239373236343137"_hex;
                sig_r = "904b2bb6e9de8f73243fa7ecc19a5a9fe034acad2b75b97c8cc84a79c5f35774";
                sig_s = "81452342987040d43f50c72f2a5246430aa7559bee6c56663fd12029507a915f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343331343737363137"_hex;
                sig_r = "b08122f027076f924cd1dc877c93659ecf942410772fba58881c9109311bca53";
                sig_s = "0287a0033df7c069fbfab7faefffddd7121908fdef76c04a1a402d599f04942e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363033343338303333"_hex;
                sig_r = "48c044b94de8809898184e376a8a0903707679350e37ce290f858c8beef78c6d";
                sig_s = "6ccd83394e8abf4df2a40afb001ca4284d913d6b9caf6ef225d66bdddf9eb45d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383239363231343535"_hex;
                sig_r = "05535fc39278260eb2b8cfba00226cb3155d75c0cf6b418ac56df63b7c0b1e9b";
                sig_s = "31aebd43e848874347b38ad64ef172fa315fda09645c8752c0e010152e43418b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34333131383231373336"_hex;
                sig_r = "78957c4f5a000af05fc477cc813cc6dcd9445438215b1c493780b6ccbd39a965";
                sig_s = "67023127ccde416b92cb3a7560436950ab643bbf08383ec9f4f6862cdb302095";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131373730373734313735"_hex;
                sig_r = "ea1b7fd5ba10eeb70a456c149d494fa3757a209093c4dfcf03730d1cd54829e5";
                sig_s = "3cd204bb84656435e3656fa5e76edc4df3ee79615f7f1adfaf388a7eec4f8172";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353938353135353635"_hex;
                sig_r = "c9611952ab603753d0601e0c97de91a6d2927d38afeb1b2b622ea384968cbbe8";
                sig_s = "dc32c42ce627f286f7d14aa4b037588abfc202b916a7bf9051c3d0527c66dca4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383831313031363138"_hex;
                sig_r = "12c960e3fcfee173335123fe15cd7f8c8bc55f6f84a071e440b0e418cc9c0c2c";
                sig_s = "3f494246c0889b4213150ce77b6f5f2957476d3faf898135d56c145fd3af35ef";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303034373833333332"_hex;
                sig_r = "dc921912a76a225819d4956a7ff0660bcdf695bdf286288858ccd5a260012771";
                sig_s = "6bc5879138b207c3e4e692d4412c9a3fdff91ac58a669ec830b68b1cd562e556";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39353030323437373837"_hex;
                sig_r = "e31a34cb647ddc65b03f9bd05aa3e5e62a800c6fb56794843b606f1f08890524";
                sig_s = "e7f2e4ff291bd309b0617478da0fdba92535376a69dc43061783b3ef928113ad";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323039353030303630"_hex;
                sig_r = "47b825bdd67cb5d91f017d52ea77f59b1de1e05be48a469978fc88ca577dba2c";
                sig_s = "53ee369d5b89bf58b3c76218b7cecf12de68127152917c58ee155ee85dc664f2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38313933373839323237"_hex;
                sig_r = "85b2d5faa65cd162e666df35beb535c797e7a2a20836d351ebcff798c343309b";
                sig_s = "196a837aabc19fa4522c5fac4c8e63e7cf3a5819c97fcec10e80f33e41f266a2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363530363033323938"_hex;
                sig_r = "de538dcaf220334aca9fbc11d1576643662c66585e268bc0eb331608ad9523ed";
                sig_s = "1b1d32790d46c6925ab909408170839f83e6a03a7632ec8877a0c191fffbee79";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3136333833393533353233"_hex;
                sig_r = "b5d45e7fe1196bf5e076fd76742c1e12eefa7934de826d7395646c94a8013fbc";
                sig_s = "f5475abab65d9ef64616fde95b3ca6b75fa864758950015441a4414acdd0c894";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303931373638323035"_hex;
                sig_r = "d973f8f20c33772413f214d1b8709cceaad159c9211ccf337e7477da197d4953";
                sig_s = "8d4c39ee66532e2ceea2f0861ee02781ba0339eefb30bc06218f4a63fd86c11a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39333634373032383235"_hex;
                sig_r = "c487ab066b8bdac12b5c728586a61e42d0a1bea16fb544d3bd56fede77bb3db9";
                sig_s = "d27022a17957dc23bd760d0f00e93f10189c67d32a9ec5489514f140e49272d3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393236383638373931"_hex;
                sig_r = "f7777648b15af89af40cf9ea0a3c875aa0d9d736eca529af4eb6238f78a562d2";
                sig_s = "3b70d46e1439bc5d941bdae8507625971c1c64dcf4c51bcdb43b1ca3ae0373d4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313738313334383231"_hex;
                sig_r = "7bb4646c887062a6c3e680b1491854c4b26a4728e5f2b2c1cc3087c780dab7b3";
                sig_s = "62900f55b885617f9b3c7ef34c67ecc37bf78e11a04cd6b9052eb80f9756559c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373335303130373531"_hex;
                sig_r = "4a96ed67d0950d97a8675c302f6102215ce0ec837ff53fbf06b57b010526b574";
                sig_s = "8deb5f7a7c8cbeff01c3443700b8da129088771c8c2bf4ceca2a5fa81138a534";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3134333533393131363839"_hex;
                sig_r = "d9c3938a4b91d0660f6ddae8540a7bbeae2b0d717bde1f33e690428019747193";
                sig_s = "9b022d6547abf9bef980bf8fd67c366e234eff3aebee58a7ee56d335df807a29";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333834353439323034"_hex;
                sig_r = "f855a2d237016b1e0ec307672a793668b611d2b6d4e5acfe2b2088aadd6296a7";
                sig_s = "13c60acb5e6fa51f03ee8cbe3a220f3ac1ce527daee05e9d7430343030dea7e7";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373632313932373839"_hex;
                sig_r = "b8ddb1ed6e80056fb9cea2590b1b63cfd1e8098c27547ec8c6cacd78e6ebfddb";
                sig_s = "7514ac6644955744946fcb5617f8b067850a3ecf829d821f18435a5e11a4a58b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383331363534333331"_hex;
                sig_r = "e903b7ead454ff8de871fdf67b6bae4ddc88254c35b333a98ba3a2f6562678a5";
                sig_s = "f713e10293aec60e63c2a79b189129e54919a74cda6a204a2727c13bb63a25ba";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343336383939303330"_hex;
                sig_r = "615208d06b392c418fba55c752fef7b9ab8ed47d98f40776d86ff4bfa3e95464";
                sig_s = "f403d5984d446acb203eba58a5468372267f9004f263aaa1eaa208652297db5b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323034303431323232"_hex;
                sig_r = "0eb65a5bc338cd920a174648dd84ed5443f37417d8d730ceab0dd3fb9a2046f3";
                sig_s = "c7a86d7e09f5e142fc6d45a136b4581e081f66a26fe0255f012b812d7cf90189";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33333337313139393735"_hex;
                sig_r = "226464501f1ccc32f1e1482fff4624f4949343c79a820d4b9df637b493ab5b23";
                sig_s = "4eb47d0fd14db448cedd611e1dae972bdf27ce0fcfc19d9ec5bda9683081598d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363935363230363738"_hex;
                sig_r = "bc0d706b5fdf102805cf83f66ce17a97aebd5e3b6e7d5c008cd51164750af108";
                sig_s = "651388d190da29748df343dc61e23c248c753013a5688652ca43d222edd1bfb4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32303933303137373437"_hex;
                sig_r = "39a1d9927356d6849b7e96cd34a5828bad112687198637e7b84900ed92fad0b7";
                sig_s = "9b5c753e2e10619e1993b8d8171a7aa4c4813a8721aca1f79bef06c0fa858462";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313233343137393136"_hex;
                sig_r = "d57adda8926a6b75a5c994a0b8abc75534e68bd79b02b8eaeb1a7add4c5c4232";
                sig_s = "3b349431e37740c60f92c55dcc8a9f55e70e27b9f73d82e37d728ba7266cddf6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373634333530363837"_hex;
                sig_r = "7d5b4c29599e97085686534f843d71d25f22b96d89c70b4030abcbe6abd73559";
                sig_s = "28797ed87120c4bf50e37b0704d2d3b4e0b1b98c27e618eb99568b08123a1be9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131343137323431343431"_hex;
                sig_r = "0db6c547a1e7bbb715b48b7974104b6d7618f1dfed77019daa29bd59b273c087";
                sig_s = "57f054587cdd5628772c14dde0a77dc5c1bad06828410c5c63b9c1b35fe04410";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323638323436343933"_hex;
                sig_r = "094a1e172012d9367852f228f49c382bbdf19a6b354b8511807e585cd46e907f";
                sig_s = "0e50740da30419a987ccd56746b8737aa74a1292892eef99a34025aebb6dd209";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373234373936373737"_hex;
                sig_r = "73a5445895e0796686dc28c3e4cd5bc1f85368b3264b455d470a7cbeb7592d91";
                sig_s = "8a9ffabf9f65921734934d65053a00bfa3c353ac81cc9b6f60271635026cd0e1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393733333935313139"_hex;
                sig_r = "0630f2c6277e9e0414b7e8da64311850b6f3912193970fd6e2f4df79df720c7c";
                sig_s = "6ccdaf47a44ee1043b76ef62b3de3aee876c26f4efe492cb3649423e599753d0";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353037303032373036"_hex;
                sig_r = "1e1b75a3495bb5ceb2adb84b80f117672b79c5bc71e953d1a274b11dc4238729";
                sig_s = "dcf48d930d89c0d301e97f9083487e63cb39127310b0f5e3c8769e98e5b2605d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373433353638373832"_hex;
                sig_r = "eb92e1a80ad7f440d8a2e9d88ac765c5cbf724bd367f414c9d91cc1904afe497";
                sig_s = "74fe0ec7cc0122eea4e63c4d16c89edf6a57823178c3747b01e7aff3df710007";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393437363731323438"_hex;
                sig_r = "7c99e1ae6941f4bcf54ea65491cafca180eee1605a2ed908c476ee67cbdd7373";
                sig_s = "1f94f03ed47cc9674abb294cfe7e7b10ad67101b8cb245a8b5fb883a21a06dd9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373235343434333234"_hex;
                sig_r = "29bd14a9dafbe562e0c4c0d4aecb6491bbd37f707133f78fc5cb3313365377b7";
                sig_s = "2ea1d86246d8edad31132f3dbe642cac488690849bdd7438d5c626cf8c973970";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35353334303231323139"_hex;
                sig_r = "cf7219dcc18e22bd487b6f59c6494f637c5f0ccb18192e9e60178621220b49fc";
                sig_s = "a05d5abbe25a610c8e3615cf7d01c69563ddbfe76d7235fda45f046af03e50ff";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3132333031383133373933"_hex;
                sig_r = "1589de61cd315ba0bf7f0e577f00589d28f72131f4c7af41c6bb31ae8ba271da";
                sig_s = "2ff82a9a1f52901c4c6f8b8a41c0f6e760f160da266d788da5bdc945084dff8d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39313135333137363130"_hex;
                sig_r = "a8c59942907039886bc374c17ff452b604385c3537b9b6c6113c1b19d72e68a9";
                sig_s = "d376bc866cc82d78ca17b461edf16faea44e577659b1fef02cec0f41bd2e747c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32383934333937393632"_hex;
                sig_r = "99cc652412dcdfc574b6fc2525615e6711caaf7d558cc781a3a11cf371f40f71";
                sig_s = "866dd4ab6b58b5d6379f0b431f9a251399defd5516bf6bb5495511e05b24f801";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323333353833303333"_hex;
                sig_r = "b47cad5c88161e29620957061e24cdf46f3fff97c266b1635fcf2e9cb4d92879";
                sig_s = "13549f3b1b639eeb33f40cb338ecd089b9094d9625b76734f3803e9d40a1eb26";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "323131323639323536"_hex;
                sig_r = "f4f3a043b5bdc56bd471876e2df15ea80ccb189b25486e6ab9007cffe121acfc";
                sig_s = "78e8e3b3589580dac1ce299a18f5704901104cd21205317608c330adc8d35272";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303035343833383634"_hex;
                sig_r = "5df45e90f9413908b47f7cbb05d6c43a81eb62375ab961d2b065c6118023c018";
                sig_s = "d720a2a23c34ece3acc1a516070bde6bfcad28fd89c482d72b69d8113b1903f6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333536373632373235"_hex;
                sig_r = "780bb93f52d53752a9a877dab0578c7702d1ea889960e1682e84f82740b1be5d";
                sig_s = "08e366ffe8f72d041426aee57aeffce7822b209c34b28255a5de67190870ce42";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333239353030373630"_hex;
                sig_r = "f743a77c86dce094cc265a87b2e053c8cc773370851dbc7ba1a52c58df24d554";
                sig_s = "2516e4614dd7ccd36a23cbbb1b58c29f900d4da2113e7b9ac956bf8879907680";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393237303834313635"_hex;
                sig_r = "0b77b2ab21a5c92cb0e3f2f5b8594edcc0dd6c70dbeea9d9d363a3718c64dfb4";
                sig_s = "91c2d6515ff6f2977fd0a150cb04c600102f0ae07a9061993244783e62f2337a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37333032333538323838"_hex;
                sig_r = "41f0a220d11a014dfe43f89ab647abea430cf5a9703088f28c1222abb77e8857";
                sig_s = "f811c584c10a25fba6216113698e5a2dc52d8ea340d92ce7a11d356f6d5a1382";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3133343733373337333833"_hex;
                sig_r = "ed707e3cac8bd56a4f0a3118558e8402dd477be7dcaa1a7ff448b0bcbfc0fac1";
                sig_s = "3d9933e01d7e9439059973fa499c37b896213b04346bb292f867ff3a58c3d07a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353031353533363839"_hex;
                sig_r = "8035d10dfd533e01718fa9d0a1773e55b424770415e570aef766ea2cbe577c27";
                sig_s = "815b0f14d6f7f4ca45191428d98c9b414871ffecdac3d0717d285a473e5ddb06";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353335303430303239"_hex;
                sig_r = "fbc3576a648ebd633152fc896ae6b4827c55824fb0c96fdd217fb2cfe3bbe636";
                sig_s = "0b37a95b15589663db322e1f089aa8132965ed6490362d243ef749c6094527f2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343230333537323930"_hex;
                sig_r = "de08cc84004d3fb30521b8e0ade66b6d52734ccd182cace8a34ba0e390fea893";
                sig_s = "2c1e3deb79d16117ed84c8982276d43709c5963d57bd2b10a530ebf161da1a3d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393035313735303638"_hex;
                sig_r = "4eef795dc7b17efde95dc52062e3b60ab360d37704800fc915785e7739b834d9";
                sig_s = "c68356eacc3509bf4d2b62412b2472f22383d18fa8851527294b1fad194c7bcf";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363133373734323935"_hex;
                sig_r = "cb845b9fcfa07e88e9011f0311cae9f3f740516e7d16d9819b7d0f6fc764dac7";
                sig_s = "3d7f3ba5173e130937b02bb7b8da25c506ace6182b8f9ae4ed891f7d216c0378";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383733363733343931"_hex;
                sig_r = "7d19ff3efc71258f747e74d76f091107b1fa47c87c638720b55178c0655dcbcc";
                sig_s = "b8a653e31931dbd2ffc4e957675c68c28719b8118ec3ed3778c57ce3eff1613f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34333535313036343035"_hex;
                sig_r = "10d465e03829dad77e8246ad11caf8c6aa8aa918c2bef5a9a9e601c5a919f68f";
                sig_s = "f365a7a7540dcb642de90e6d6ccf0c74094a8005deaed4062e394e1cf2bcd8fb";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34353339353735383736"_hex;
                sig_r = "674330ea5a5d45d71fca1f3ba031494dee9a8623e0d9e9adbb2822794acb4f12";
                sig_s = "ae4d3830157c820bc23fa792188b94bb559c3a6212768d7ac59dcf36f74402f6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383933363633323031"_hex;
                sig_r = "a632c676f667669bda1b0ecf5f33fa67aaaf8aee46bc9e9f2bd5bd10c36cbb95";
                sig_s = "a99352cacd6bd42b78a93908008c23eec2d36e5e4fd0aa349d5634fc543199c5";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383036303638303338"_hex;
                sig_r = "0c9d2e8935f855e69dccd877d95248303e1b6daf8f61da500150185f5565fa97";
                sig_s = "e4ce328f00e218aa13d496d85b73b5b891cf0b7c66ebefe5e6b92b1da7f837a9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323332383137343937"_hex;
                sig_r = "4748c00f44a6b3a8726f604d7b933303d98cd458b850ff2d7cb90c11d5950ac7";
                sig_s = "766df7aa4c8b3f8b03b0eb8aec653fb70eab7433a84e7ef2d57f368a051b704d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303734333232353538"_hex;
                sig_r = "4e4fee37b0b93d7d6dbee89b47dab0c065186ee81caf2227bb26e85149bbf9ef";
                sig_s = "3eb83850edda9a1b1011118feccd03e47b3e1ec815837bb7f8867288ad8df831";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "363130363735383237"_hex;
                sig_r = "9e8520c5e8296935fe93da2dad55963b9f1f88187f76810fff53c0a6e95b0c07";
                sig_s = "d185de4f682a97d28fc3067d56a3d24f743f32d47a6f390068b2ceb71678fadf";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3137343138373339323133"_hex;
                sig_r = "3cacb67364a3fc1a379557f7e6f5d0f501977fd4822666956c9356146b7d922f";
                sig_s = "686e27be6217045a5010c88003dd3956a864798c8ae687714fc8b7277f7b520f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313237383432323837"_hex;
                sig_r = "5df702c77d4638a4302d21a9fdd70bbe31a4a4a79c7d531d4f4c8283970f664a";
                sig_s = "f72d799abce3cd22985c5cfc68f7afc8f96f4e7dce8485ed5c595edc1e1f1d4b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35303338363930383739"_hex;
                sig_r = "243a857dfd167b938492c421bd657659d101944736fa79b903cf91ec1c49e8e3";
                sig_s = "bab3f04f130d737993ec8f45503376abe816c2b8e5ab3decb0dbca4f5e181d08";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33383737303432333937"_hex;
                sig_r = "67a7996b7680e958480ac2f97084f2055194b38e0ecf82246dc87918ee1954a8";
                sig_s = "de187dfbeefce383dcea1a7fd71362385d09c6d25aacdfa34ea270a91ec97cf5";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333231373038313738"_hex;
                sig_r = "ab6cf003aa7865cf8010ea01944fa0d2f825ac6a997a427f8a4e791e797ac6f6";
                sig_s = "28a7a6c80582ba8f888d2008fbd696799561e92d9a51922cc602aec2135f08aa";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37363637303434323730"_hex;
                sig_r = "9f9f0be992fdd3e069167599dc55e331c9f189d2c230ae15d1b5b441d3843c74";
                sig_s = "f8e5b4ed8ead0352e032f79b5f0475f0975e3738d784d895e9e4002b26762b79";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31313034373435303432"_hex;
                sig_r = "373b8587777d2b4ff461fddf521abd8fc5d3a1caca847f4a5461dab6ba242d83";
                sig_s = "51a98da2628724018dff804c26a9671f7df3e24490392a2d1a91fdc7f50deab2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313533383730313534"_hex;
                sig_r = "90a6286a271d8ffa72ddb55e8c924793e03b2af73ce10f2deae857961cb07070";
                sig_s = "28df2b6379501110c12ac167189f9ea8873e1d62ffc76e6ada83f2cf412ea5d3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32323631333835303439"_hex;
                sig_r = "107434a824ec05568d52219ab3e847046f01493f1db57a82fabe754555838292";
                sig_s = "d1c2f7c1ecb5afbc9b0e63e20fcf34cfc16bb260b0748343eb86c44012449b8f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37353538373437363632"_hex;
                sig_r = "4b737fb724c97348fb67a994e88816b1091951b77234f1904717ec7ef1aa951d";
                sig_s = "ff722b669bd4342e6b856232b5a5c03d2cf16f09b3d3842d0a87fc19d910acd4";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343939333634313832"_hex;
                sig_r = "abe804f6c76fa3f1470c0f244a7ed96807ddffff4031926cfad9a2c9f73ed773";
                sig_s = "e48352653ccc46f5f5a76d7eb3997dfd412001fb1692312788f7c297ef792fa7";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32333639323733393835"_hex;
                sig_r = "7d55a5da3201de5343703ff8ee363b7ddbcb3d786afca8f157b25e7c90d09de8";
                sig_s = "3dfcb55acd7def4218abd3f989e901f824cc2d4ed3a37b8794117975103ff004";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343933383339353635"_hex;
                sig_r = "25d2c88f0b79f2289f92d3ecb6de119fab764fb43ab5286391f9a282c82ac198";
                sig_s = "105f44fa27afe4dc9800e6a16528314de01b17737e9741862f93ed0cc33b30f3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32353334333739393337"_hex;
                sig_r = "d725c2731a6db8d623027a926a665e9dba0f95e90a5fe6807a84b200111f04ec";
                sig_s = "346140bffb84731f0f1cf857193dea25a2f721463dc3b85a8e72c73ff72bda94";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383334383031353938"_hex;
                sig_r = "4fa9704d3eaa5760da0b97abc0de1f872840e58bfdb1a8f9d8be3f96f950ca7d";
                sig_s = "6ae15b572c7d1a49c99e1aa54de5fb2bbe055d45686770f579c08ee79924ede9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343131303537343836"_hex;
                sig_r = "343353c8be35ca222a38771b19ff3550abe41b91f2ffdea9c9f4887d70b02782";
                sig_s = "c285e3761c6645b3db4ff99a7ac40803286f28475ba28b9cd55cacdefb330984";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373836343638363335"_hex;
                sig_r = "529b121d5b3cccb426189d7343d571adf05cfaee843669da6722f728c192bb82";
                sig_s = "86490a7686215fb29b18a166bc22c1b8a982fd7d57ab593318adf8355684b45f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303534373733373638"_hex;
                sig_r = "ff65707177bb9aa135c5fd774bf72eb3058e80afc7d8bdea8f7fd18040ea9959";
                sig_s = "0d4ed13f9e01bab8aaaa40d7f5c923a78470888375b4690e1164a83fdf136201";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393237303137373338"_hex;
                sig_r = "471ebfcc45de07bd4118f94b0284f0c5848dd93149a217b56b49e20baf583ced";
                sig_s = "ad498b79d6151bf64e003f502fca8fb7b05b2106a96ca1b977ee002c73bc721b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303531333235363334"_hex;
                sig_r = "1e279add50ce6148dd4a3d311bad896745a169364ef68b94e6360fc48e949b9f";
                sig_s = "7230fbe4007fb7d6a4274c396081f37a1c9b2559b526db1efe435ead15e4b74e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303139383636363832"_hex;
                sig_r = "52dfbabbcb99651021c025a308530b9cd04732f43463bbc51160cd542d9028df";
                sig_s = "0ebef4f6870bce1ca302e7120560e5170067c0fb3dc8668448b89dd4821b53fb";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343530323537333530"_hex;
                sig_r = "dabd19aeb87fd56119a3354c468f4429fc14421c54e8be9e9b927941579ae55e";
                sig_s = "b10a7396c973e052af2944d37247e9016682d4da7cab2d5428618ce120a21056";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333236393538353830"_hex;
                sig_r = "2b9950c4005dea8e603ffe0fd9b3f66b7c0f07509e50913bb825ef7ddf2e6e77";
                sig_s = "62c9fcdf79026f60f830e7cae4af814db2cb58b5a948562772da130613bbef94";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303734363533323431"_hex;
                sig_r = "09d881e300448b9eac33c67f10c061c2c985c415a414d09c891847e3eec88598";
                sig_s = "e75455a508493506f8746074f8bb3698d4362f98a9daa20fa916f6c4023764ae";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37373134363833343830"_hex;
                sig_r = "2db5a6d9b16c61c888a5de064f621e45227ab63efba61ef210fe4ef81c93e00f";
                sig_s = "04b8e57a7373b3642e58db0cc652d6da541d6d25c7b32c1ed2b408c9e3c39719";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373933333831333230"_hex;
                sig_r = "7bd46dbe132d95aff854bebf1c0dd1e90303328fd84d381e93217723d1a4bc18";
                sig_s = "f795a0c68d6c318c038dc37bd22d36bce8083096637e8912c3d01cbabd3feec7";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34383830363235353636"_hex;
                sig_r = "0ca03beb6d348d3d36d2e9f6773e5882ded66fe6026c9c27b847e34523c77c2c";
                sig_s = "8770b6f0b6aa7c982e84235f1840a6172386a41ae75fd9affac7916cbd19f8c3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3439343337363438383537"_hex;
                sig_r = "3f1a74c1dab6bfc319da38cde7a812695b530c60b36d2ae3fa11a7206b2031d5";
                sig_s = "f07f8eb5825b2d5642443185d6afd2264e98996dc392519f812883dbe0e247fc";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34373038363839373836"_hex;
                sig_r = "1ae1c3ec96f8591a3a235de7c6f739201104381eebeab5fb5ee523f577b6c7fa";
                sig_s = "07ac1a9348fc8946964fbef0af11dc8b2da6feb3eee8cf475c4926ca9cd571a3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303239383732393531"_hex;
                sig_r = "c6ef5423c69541caa3bb8f361f4fa9caeca30fb329a0da806ea956270e0a9928";
                sig_s = "c045de5205eb8bc861bc159522b41c0d66e62fac0f58730861000cdf9e27bd96";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303137313930333835"_hex;
                sig_r = "3097d229239b4085e3fb3188106d5da53456752976d2c4ba82dcff6ab96d1909";
                sig_s = "56f60ab76d33bc94ebae3042a1d56a731429f1bed162bf3ef7269d912aaeea71";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393536333633393339"_hex;
                sig_r = "6c9ecb8dd5b8badd49ea1b26ae3ae2af7236cbe1c626aa6b27029ef1d6d05901";
                sig_s = "06c9bf356441f84215b006c721a00697cede6941a18fbc0f9c5b3c267eeaa371";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35333030373634333530"_hex;
                sig_r = "43ae5619f91b711a61be076581f91d382c39fe53d500b136f81be639bea76add";
                sig_s = "824594f08185479731ed095367c04def2ff196229c5b136b3835eb8bb819c56d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393334363634383434"_hex;
                sig_r = "13e8dc460a0d2af2305a6abfeac834737d4441576b194fe83147b7d7d1247479";
                sig_s = "c590a7b7fd6de8c2d658aa2bde97de84505985e2979ab2a527658122cafaf61e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3335353435303535393632"_hex;
                sig_r = "27feb06a4c5bb046162467e523b4b62c2c8dabf26ded997eb0737d3eafd16c8a";
                sig_s = "9ce87c4cd6b93d1ec3b3c5d29fa415cf918edd24e0febd7b200d6c82c91e5f78";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333031373232313038"_hex;
                sig_r = "9d76a05d5803a2da17dc2782ec469c8024b1d293a38c23ac4eeb3058595a24a7";
                sig_s = "226595b192ea8336faa44670fef5e808ff9911ccda85a1765c19ec44671b0505";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35363137363931363932"_hex;
                sig_r = "791088736561f41932cd86f066cca6d63d4473aebb869bcc70c923ef80a7fd95";
                sig_s = "33402973e7a824602712a5abf7030bad2f183e6b4fa40c66399a14ae48e288e3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33353831393332353334"_hex;
                sig_r = "52685eef5f2168598c294870188c043dff0496638037170763ef5778b7b6fc1f";
                sig_s = "79a88d3e7b2c3a44be4b3b3305e4bad5fcfe07d179136f5ac926315ff9d4787a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3135373136363738373434"_hex;
                sig_r = "5db883b5a3766a2a14ab26a25ec598f7bd1f97585fe0b55341e7da251a62ec1e";
                sig_s = "bf63c66e992c91fde513abdbd59b4f9f542881cfdc2be3fbf3e772b97e505b3d";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313939373833333630"_hex;
                sig_r = "7e2f80300a4c81543e324e9c8973bbb6f16599c3d337ee82aed816624843f370";
                sig_s = "80a807e920deaebaf3c3247010cb3c91cfce21b0d5ad695177d934ee5a7f7cbe";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "373430343735303832"_hex;
                sig_r = "de12eb33b717fd887fd684a64af9439a27ee83b28ac5751772249e600856b59e";
                sig_s = "8dca367bd7bc83709f25b0fc4e1f4a0e7e747be0b8a2977aabd25750a0ba60c2";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343137343336353339"_hex;
                sig_r = "dee112ed7000c0776ba4fab09f439a844addb86c5046223397498ad72d059de4";
                sig_s = "7039b715851e4b386ea15e9bb0899ca21a4e6f4ecbbce4f706d29274806400b6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31323335363538383839"_hex;
                sig_r = "9d01032d95cac596e7df6c75965c3669f29cb8e58cc9a933bc5d60c1a97e946e";
                sig_s = "1cf2ce39df73cc734bb4180ef09de883bad7c8d82ab1a5861d265b48aa195bb6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32343239323535343034"_hex;
                sig_r = "6f1513d12e2112ec4f396ef4ea38324102ec3c7fb63ee49f485cb421a07dce57";
                sig_s = "a78fbd65b2582a4031c34c7a8c28f03f16ef2ba18e2da41ef173ee5a85af1fe3";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3531383033303235343636"_hex;
                sig_r = "c3fb59671cb8c6db48bd51a667060428f75124b5e990af1e997fd636335072d5";
                sig_s = "c797e7245cfc8d98bca3ae1f4239b88684cadeda2c628f09ae61053eeb683771";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343736333938323030"_hex;
                sig_r = "e8b5b3f3443d59d7521d093884486e7a6732e275ec13313bd4d178f28128e075";
                sig_s = "d299b062928e5f058c705acc3c62f24128ec703c28288b0d294216370cad69b0";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39303630303335323132"_hex;
                sig_r = "ce43218d44e113ec38d5cbcf402f3dbfa87d58826a760f0bf2c88f11981f7719";
                sig_s = "648f3ed0d1b76dec5437cb685dda7a1512ef07f4eb078dc50e418efeb1af8849";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31373536303533303938"_hex;
                sig_r = "fdc99047865eeffcb69f8b8728a008e31f9f6ba78f698fae62b71cce79501888";
                sig_s = "f06612f593873a13459695a5c4cb504acc2a8c56179b68553e60f2319c905b4e";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393830383630303338"_hex;
                sig_r = "256e5c4f4cd121e2dee1987be7b241b6e91f90d483210aab9a4b367db5613174";
                sig_s = "f75060db4bd6cd52bb8e6aa94f7ab68488a638873515787ec0d7e61bad58ab7f";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363231383735333335"_hex;
                sig_r = "c7a269986b6ad540dd30e620d1606e3267935c7fd5551b3311fd4e840510c248";
                sig_s = "8db7c8c464109cf0edb89357e663de6e882b6f5906adde6d58575ce0a2cce257";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363433333334373231"_hex;
                sig_r = "0bea324758ea80ed4a0a56f7d836fc73bf196e43fbc59d953f0ce34abba57b22";
                sig_s = "f04027248e83bd48fb1571291ca1a5f088eb3e89f00904d71b9ea8d6677f7893";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343534393432373832"_hex;
                sig_r = "5b53c96d7a195f02cfac2d155aa7e132fbc35d59afb080f649dc13056248addf";
                sig_s = "2b157db2154bd5dc0ef2fc6eecd867fabdc633d2ca683a48f3f9095745351aa6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3230313834343032"_hex;
                sig_r = "24174a81d221a4bfd8978f312acec4dacc4f08f8f8cdf29b2024bad2177758df";
                sig_s = "73fc1bf3388009e3219cf4c7e62e4aeaffc1b9614b2831405a01403c86936452";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3538313332313733"_hex;
                sig_r = "5de7e80ce3137f5705d23397197c86e7749e5e682104f13beb5a6365a63780ea";
                sig_s = "f3da2bfd6442638da60201be68fe2ad206365af9e40c4c1531cd3a05db1ad3c6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31313833383631383131"_hex;
                sig_r = "dcdc28f81ff5ed91fa15f15fc4f1d38f9cddfc3df65bb2d3a55582faf7c0910d";
                sig_s = "515b7759a130d667eff7ff3167c305cca101be3a07945fd7cb6a1359c16db678";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393232363032393036"_hex;
                sig_r = "7407261c978018cc6e92a340de80edd3044a6e7116eb9fa9b022a2aeb318c65e";
                sig_s = "bb5826953e0b85ad69745249f69507765a93f82198bca1e4475fd5de7dfb15ca";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393735313433323037"_hex;
                sig_r = "3962520ea2ef01cba7d5135117a7fcb5ab120b28baf6e31de2e6ec9993d8d5bc";
                sig_s = "2583659fbdf83399309bddc89ea5f39fe22187671f3149d94f96fa234a6013db";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "38333135313136333833"_hex;
                sig_r = "bec3ea35844452bb739d92b20882e5b672dc6eff323cd31d1a2db37db93791e8";
                sig_s = "8ef77b3c709d60b9d5d998f81d3f72c466fd7bb99c681ae8bc9c580db1f7c213";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333236333136383132"_hex;
                sig_r = "b8fbdfedee5376cfc9177d96c45e003f90b7367aa40cf37d63e483bfaa4be951";
                sig_s = "4dcacdfbe41df7899382607489bb75422f3eb67822890ea3bbfd80cd456fc127";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303239363837313336"_hex;
                sig_r = "df228c1a8bb3684b7ffa2e3f777643c369e1bc2299d66a66c8ed27a4ed59b783";
                sig_s = "47314aaf3629a0de02313df06c0cb363e4e019aafd20ec06be63b7b4c21538ed";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333230383831313931"_hex;
                sig_r = "528746b280d8a0e54851cb99894afc01ce24cff7edd60116e3d8dae42adb4961";
                sig_s = "4eb264629e5cf4aba77e05c54774bd0cf20b057142a1ac2103099d664c2c5dee";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35323235333930373830"_hex;
                sig_r = "44c391f82cf5eeb80f87c347a5bfe461c49fd8779311e237abc05b19f6aed093";
                sig_s = "866853619339b716092df4466aa0cc9e6256fb7e18a79854b60ccc534bb6df10";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333439333933363934"_hex;
                sig_r = "03d127a6f72465bd1c02109f9605202b246763097c756235d8f8a26848eb609c";
                sig_s = "83d551427f31b9572b61180cf18bc85c20306c0de2c39d00430b3fc91dc50c6b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333937393630373631"_hex;
                sig_r = "5044ef2362c8e6c32fc14584b0751eda8e8e8901d9382354040d2615d9cc07c1";
                sig_s = "dd16765911dce7a7ae5f3b64b3ce3a5e12e548784597dc0a379f7bb8f4fca879";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature generated without truncating the hash
                m = "313233343030"_hex;
                sig_r = "ce645f0f1ccb63844e54bd7603a4280ea065e3c147d26e73cfbe58c6116b0cf1";
                sig_s = "40ccc23188aa20453d7f95d33868f247b3d77c516b70e4c351b48ca2ebef0027";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0fa36769835d1d215f156d5e82bed2fa76aab134bdb1d3bd40975faf5ac19cc6", "00e67d675a8f0dc4760b3f8fbe0f0853a80b58af8dd2c4a41afbf9cb0c72d016ca" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2f1db0895a8d615779a38ddcbeacad9458f35688b587abeeda1cb5a891e954a5", "00b591478e3b81f5881dd71f93b811130a67ea697f452faccd5c5117fac15f5f93" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "462155174b64dd050601b6d7c2297251815d413e26c9b91d123536e76fd3fb13", "5f0a20f86528dff246ecc71d5d005b2935e4d8e0b076fd6792d4a2b3fd2b7bb9" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008e89e0fff2d768c7c139b22b90aa66b24b3b1ced4345c469e439b2c80d6fed08", "4eb9ca1486ff3411db46590f78008d6d6a0a9cf9cf36b2bef833407af5bc883e" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f4c2d7df7ca616bce49212e47ed112106445f47cf114782626740d37e1c596df", "1088b19bcaf0d10609a46bbdfd626a83d13e62d405775ae3941755b278a443c0" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "43053fa57436a0b26f0f887b2403ccd9d18f14b7866e1da593835e93cd103a15", "6039d7ccf6c355ac94ed59225aab8a5aa190c89c422f80e71246b998818ecd54" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "02";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009b27e4409c49abe9d8d1b90edc64367daedb43d68a41c501032dba5d73ef1021", "0cd42cc8488eb0588680b94e934ff744f4e6cb079737beb5eeabbe56fd11a7bb" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "03";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e3f0e1b05e5bed7e8a1c8de7b8a1273673731151e3a04ddc83e18c98d842943", "00cf1d41058a6b7272a014c6caff94db3f0233e0f21cc101ea159ab14bc8483745" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "06b2c1b72f12846bbcceda68183372d3f05ec591c43569361646f5916a00a720", "2282d15b70f19db914c6fdd8faf15ab90ced3bd4c3f59a247be41610497594c6" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4e61226e0b1c1e5a40767956c7b530eace83d550038e32bd14c5258c48c939fd", "57d069215ea210b386820a2d426fc711862bcfb34c7deaaed404d17692892cc4" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cf259a52f769eecab5071c0b4676bc4cc474474b74675fe8bd1660df5b70ce1b", "722f774a601a61f2e8e364477b0ccea457b76977ab300139c4ee0e1fbb7fe8f9" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "67ba78328cffa6eb3f7119096adf17e3fca6b2da966c03bc66174c2984a1d553", "009abdde7989d6f5083187261393a6e162eb508ae62749e41caf55b2be14d9a960" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008f8c5fdf711aff7ddc807c4308a132b1099e3e95dabf803ca29283dd41b09055", "008f60c71b4a813e7b4364b0a7260765042d3696a9580548f585be12633ac3b824" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fb78c45f16de9b4e098ddc9ef6eb340b055a6a49c438b87bf7969dc24f7967dd", "2af9ebaba55b6713e06e9df9e42b79ea9364405ebab1199ea230ae38ec83b91a" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7b91538786272e70a603cfc80c52f87f057a369149848dbc865a8d2f445ec26", "00bd90ba8844f58db6744b5f31a470e59ebfee1891be36ee65b18ba172e5eaf943" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "00";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009c0c462658f6493295775ed99348db5895ae8471c819a1ed9ae1b5180397f08f", "00f386d14d6e56758d1dafa50755af4fe079233c139436abf61a9208f8b7f893af" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0089e63127c97dd4cb19fb802f22229decd0d852639b3d982b2589817a7e520049", "00e1fd70b15e5e5d3ea4ab748903ca891ab3964ff4d7bf48b17c6007957a5e2021" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00eb89c838542537c3f530b6e8bc62d1e6284ed4e9b8c6aea96e82970d8abdefff", "58cae0df61874d30c2afa05c8a703800ac80564397688b19a5149f65054b138f" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "72bdb42d379cd807e8dcdd597e5c68c464ecb4211ee885f7210e55ff52e93688", "34231f3921839c8a3a2cc7ff5964f1f79c77f2c8813e2659684ee1d8bf7125c0" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "57cf2c69876d8a9822a6b796492aa889c39fa1371fc730c5a15532ac4aa197b3", "008c936d0041821e1ca81df3f1fd0a495c0c8974a81fb41cec4622cc1bfcccf3d2" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "cbd2518ae59c5c357e7630cbd4c4cb1410897703e7663f19fe1289497bee4f7e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0a7413800a6571b03100d9f327c68a89aaaef2e7ff922b0a0aa95e39a082c4fb", "37466eb04ed38187bedfd767de7c45416577bca4bd961de3d8890bea3409f697" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7e27893adb379d40a61668ad660edc256004bbfc12d55889fbd5121eac56a06e", "009a36f42598db7d643842a72562fe6d86ddc38623830e42a17d444d44a2472b5f" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b65f40a248d91a7e6377bfb5989f47d562bdaaf364ea982830f61b71957bda5", "00e42108c5d388f2e173210f867633167eb0f5cbc693aa7bb9223ae8f1aaa26983" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bc0f3a2708cbe1438083451163be66f80a810a900cd135ddc076db7451917c17";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0585249ff4a3acbb996eed6f17a70a7b83a6dfe96e80edc0cd4cc7594e806d59", "00b7576508dbb4eab123e0ed688a9e6625d056c7ad8134776252728dcae375cd84" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "62bf43ba34e73cc3c8922f26d64e3bf882f12dcc06e0b30c8363efa6badcff55";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dd6ba66855e37b7fc91ad160bc4a7c5089f8633ac0e12298a6aba34db680e16b", "798f5573bd93756e39dd635d9c5f8e876364445a1c9a43f2918beb9137ba3b92" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "39422623a4386033ccfa96ad4f8228fb88ac9364ae8b3cd0715ee188c467572c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ce2d8a8432670515b2133689d96e7369decfe994c87e39a28e5636897a360f2a", "00ba43f7fa77feba76de9634b6adfde47fb16f70b790bc9a1a5065ef16f6fd2467" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6233bcf8558bae02cbd2518ae59c5c3501ab620efcbd7b40d8dd1f7288ff5dac";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6cefd89c949069c4ef5fefd20512a6fde92e08a2dfc408694a05d2a974bd0284", "00ae4769496c219a59383a7fd6dc1e0690c25506264b0088e0362897e0da59103a" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3bcf8558bae02cbd2518ae59c5c357e7170b54262d04bee3a9fcee6e38e84e1d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "33a6ee1a121ccab25b00fbecc860be15641a5baa4b4beb35d9a6dad35a1691fa", "36ba2323e463d684219a1bd15c5eb304878d82d1da113c52c7663cfae3f5751a" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "779f0ab175c0597a4a315cb38b86afce2e16a84c5a097dc753f9dcdc71d09c3a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a2d2e9810bf8f988af6cdf111f2f15062900d2ce06bb72c9c1dd1ca90d69c58c", "36c24fbc1323359ffc3d7cfdd66451dd3e950ad97cc7f1ddedf30e3aa4425c0f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "558bae02cbd2518ae59c5c357e7630cb680f5a3ee98045977a021c9091920d08";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e93d658ec3a9418daed0ee219d18180d0684fd676ed24f693bcdeb7e358ec44d", "6914850bd227eeb22bf22a02c3bfd628c769b0f0e50040b50fd3aaa324a1d4ce" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "19ffa32fd51fb796c6154167347b7773d9058ddb148fdaef8c287fef848f2f7b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00ebe7e1278636290cb09c7d4554c71c117337d2ed40c77789433c27eaf4d4bc32", "73025752ca492238b622884c9fe287ce3723ae04ebfaa53505e14b8e86c5dbac" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3d180992c1a38ddfd49ecf3d1813b0b195c69b06bbd41cf101fe40dac9c9e6ba";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d1150530bac21e35524ff9e1b7d00731401072d591e696a17bb388b4d7e5ca19", "00bcc66bce3fc176d2da4a2cb954c836bf9b81f1913230ba99ea6e5054073ddf6f" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d39813c8e58536460cbfac4b0fa028e60d5d45c13612d79f9964a58cb33be185";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5233a1deddbbdc29c0994fd43ceda3b020b35c465e02d1c12fd29017306be87b", "00c31db5c0e32fbd3f045664acf088014a1116eb3379f24886b3a13f009628df42" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e9fcbcae7e1d744cf6bf4ca0d8573312a131fcb3b90eb26bed6c7f6ba908ab53";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a160ab41fd3fe7d088ee874c8b82d8ae97c8ed99467579d01b97bade23ec46a6", "00ae709a088bcbc72342996efeed0e913f8a5dd8c8878b1caec5c9e057e35d5cfe" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "21f862ec7b9a0f5e3fbe5d774e20cc835816e92b513bb52effadc18c3f526295";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d915ecbbf4c25bbc0d2216db6d1a3da8f80058653a24885494aff88fe1599fc", "008816898d958fa5431bb557d17b6b1b520c3fbdab6bc5984109d1468b6cc141f0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "43f0c5d8f7341ebc7f7cbaee9c419906b02dd256a2776a5dff5b83187ea4c52a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009598101f8704e2dd0e889ecab9ffe7a5e7536f3ee60d5f05111ce6f5a4ca0405", "00c4c39bbca34c6a687c46a6ddff65e81d0a9a78a8c104f91ea6636a7c8ea6819a" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "65e928c572ce2e1abf3b1865ea62658a0844bb81f3b31f8cff0944a4bdf727bf";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "59ee9e0a000baefbe3fb59ea61d7370df77c58dee9d829b6c5e89faae019951b", "00bf61a756c7a30d049bd37010b7b1c25670d4ddb6ceb8f1d7c7d449e393465959" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "1ca11311d21c3019e67d4b56a7c1147dc45649b257459e6838af70c46233ab96";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d1f1ddd12c710d7c35617a0ed2fc35f4d09888f17034a47fe0a78415858e66a2", "5fcda6abedc3a58ffc55bc5d9f320c60eb6b4c9a22833e13511b2e140ef14057" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3c9a5007f19ec624a73ce75fb61ab3e16736d519ee36381497f24bfd3bb691b5", "34b42b0134e17222eff05f3b5477323a3224310b108c4a8fc9b17833128cb822" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f7a2f1027241c8514b2be7097a3eb5b208e8ffd09a700e5d72fc3af6964b3bbf", "08318a9043d959a8fc8bafa5d403d3490e4e45d9b1e156ff3e2aee38ece66e88" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e58d8aba787d54ffcbe530c5ba5955f54e286d31f1a7558dce8924000d7a1b96", "00f5acbdf479b313380325edbbadbc6287e08e98cc86e2ba8339873724437ce813" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "167df009cec2efd44991a523dc2fd4a13e4de3e76390382d4c1088593f33da65", "00838f62138f2ed73fbc7be316ba5b6a79a4768fd1f4ea07df9eb0eeeef988ab73" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "01a3a8df8aee278aa306844d60d9c5113e596d66cc92a3566ab0797cd0163825", "62494573ddc9a21706030fd795708b3fe0d0f224ac01e5957ad0d11d6ee265" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d6d0f45dbfa12ab4ea5b29a848c71923d1ecb57b148ec1c969b43662a18d00f9", "0088c2728d21508a421af6b612a4433c4b7c97f55dc12b24db2cf6cb7fada43f15" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "69214198388da2a0d1a0c9464c6eb3731ad44e27287c17cd24bf73c3ada67c2a", "48dfabbfa5d9127fec9fb7986fb386cb5c7ebe3f609d95e71a70ad7f83334584" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0084672e2de042df2668775733c9b0cc716edd7d7534eb859279316ec5186d7733", "00badc81e933abf3d4ce75fae00d1a47b30d69de8754666a294b4c925807dc3ecc" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00c9be9c1906a73789a9af1a677f60dd4163c5fa06c7f45c0993a63051aa0c0f30", "3205debee5dc413e4abb3e1f6af550ac64c41b97e425cc2efa2a833c2ee72221" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "026794f7b5a84849f41141c68d3248f9c90c4de7edad4fb8f446e3076ffb7962", "00c98e7b67192296efe04379c6a40280b4f113876981b44b73bb676a881f398790" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "18bd65dd46f8c0e326553be55e5e234bb43188ac1fddb37003d12f091aa7a1b9", "00e9c00a03e4d5452ba9a607951d4e4d8a7391a952109d96599266d1e2d9ab2199" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b86ae764f2f95eb9331af538fa516fd78435794ebb244c090c6d6b286750f94c", "00f3712f767495a10f2e81350662af3ba09defa2e0e6f27eceea35513032dafb61" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e045cc5a9414e45e63f1b08648e20e229a9950ab56ec304e1b907989e81af2bf", "21e52db489853dc470713aaecd6aadc7bfd8504a9c82d0243f6e774600b5ea0a" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "37e377faea8a867f494bb402032c70c12af6fd57feb3866bfc5a5fc1d0a909f0", "08dcbc53fd41b67073a4e71a81f3fe578da4d5add0d698041a9b7f38a9a19bff" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "09a33110676e4a4f8a977150a7be291e0a269cae9678710b1d87f8068b0fe961", "043a6f64e86278a656a39e4468b3472597afb2dcd930ccba1b1ea2c988c13450" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "c55205f423611c7e96615bcc20141945fde24bbce956d49cd43e14ab4cef3659";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "09a33110676e4a4f8a977150a7be291e0a269cae9678710b1d87f8068b0fe961", "00fbc5909b179d8759a95c61bb974cb8da68504d2326cf3345e4e15d35773ec7df" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "c55205f423611c7e96615bcc20141945fde24bbce956d49cd43e14ab4cef3659";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7021faebf4081a63094d8ea78ca2004d02a303bbf363470ea4a649b08c1995b", "00de5efba25c9d2f490f181e16795d5c75f83b5c11c81d67ede2ea8df81d970cef" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4de024ff2abe7af94fb5e9f53c87d4b4bf1c5447c7c39a9280839f12e52e38d8", "3ce6941fc329978e794abf91a25e83463f8eabcf106d76d4dcd92c0ae05493f3" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "425e137c5fe08e842c3bcc4efbb6c4bca89edda8d6beb130e14899de2f20b74b", "00b1af66ef5baead32e7892160deddcb57f43503104dbc331fa20a8de376e5bd17" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6c63d82f22bbeb1bd1c8eba4c680ae17dc2b4d196a0da0e191dc79fefd85e367", "00a883018fb8d160ca01d17234fa0b060a619215ccb9dfea629d6bf92cfd8ed34b" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dbf77c566f7483d7407f0095b8b468efdf85b7476e614b8658bcf5e71e6fd588", "413b50407df0def01b8fcba5621028a6cb0972831c893e3d3c20065b75a8e8e6" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a7967bfb54cfbd8d13492b9ac421d967d7c4b0a3b18efb6408a424914789c8ef", "0090969628e6553898c978ba48eb852714f9e220e5e93cada91478ce1af8948fd8" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "325fd7ab7bc8cd7d859687937a90083f1b46776c2b8fdf4ce2bd9e2e808c68b1", "00bb0d689ca6f542c094c99c71918f5455c7608514149148470494e05aa4ff6110" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d637dc3c63060a0b21b80d6dc8a97ab6a543c21c18cb5e5c63ad80c3b86050fb", "1d68bb9b9c36ade49ddd84c7fa3ae5c70f45549592ee03a23a490a891cc70ebb" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6bc87ce6047a3164be15ad781ef32d12bad8caaef7707ac3e15a53ed75efc90c", "008eee286e2ac0c8f9f6f0350b8bba94b6c5bfade87ba211adc0cad5f3818091e0" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dac247040488bec28dc3ec9a81a990701f45c0ba4bb6e22573da400efaa65e2e", "7de375486e1757b6c7b4269bee423edb84c7f4b333c1557b5ddfba0dd983ccf3" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1d4d073190b327ab4e4f5ace8d8c8b68e100fd2565a1a4c4610bca309fe6a9c3", "00e274a19b41e496b0832e9e42f5229fc000706c966d2557f3441d323d8faca129" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "274ba8da21e4ed44e218320daa103f0d4227bb351b67d84ad2628629b82fa827", "4c90d1dcfe55fe7ee66571ff4526c755cac8c8ed16b01c4db830b7dd9deae749" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b45406f951d31975e953ac11c25c238046a7975dd2fbb38d890913c1c8b451cb", "00cae0be688e6e400a9265bd9a59ba1047e164306ef6cd358bc0ff00e9e027e957" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "cbd2518ae59c5c357e7630cbd4c4cb1410897703e7663f19fe1289497bee4f7e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "342dae751a63a3ca8189cf342b3b34eaaa2565e2c7e26121c1bfd5435447f1c3";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "cbd2518ae59c5c357e7630cbd4c4cb1410897703e7663f19fe1289497bee4f7e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = ""_hex;
                bn_t sig_r = "22bb0000e9648a0ee659f9b6a9ab6513dc90ab968ec49d3953f64c82bddc8520";
                bn_t sig_s = "4aa0dfd047b0786e118231eff7e86311487ec9d1bc84aaef1f736f4178c288f9";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "4d7367"_hex;
                sig_r = "855b60549e0d84ed3959ab2800eee0cbc9a2cecae2e510ed51e9f27975cdcc4e";
                sig_s = "c60dcc80a3dcce9911cb9cfba123b6a6f85d20ab695a9ee7d46e0bd9eeb337f9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "313233343030"_hex;
                sig_r = "5cd73aa58188658ea513f8ecf0d9e2da9eb5d6bcc7cbadcd6a4a8e0cba5176de";
                sig_s = "a9f090bb5d3fcf5b7fa7e16d287718773f5f4ba0973b329a3788cd45b4bd3765";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "7f9eebad2a323f8346445d1e2fcde47aba4c96ad4686172bebcffaa604e8dbe3";
                sig_s = "ec09d731e58e3a337ea03ab72612b1f801b88eac571bd3a031250ac6f2e34fda";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "c28ad156fe809ed36dc80812ae2f32d84dbbfbb9400123305c332551c4f10d39";
                bn_t sig_s = "fc5b95b0c7fbc2e7cc4ec1bf01020f8050260ce2ca45c3bf5b64a7b2aeeface9";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "a36bfde0f5e23f6e3b3d6cc80ede3d9e4ea1c2cb9337221388f70aa52dec5e53";
                sig_s = "c27e1db10d29720a120c2625c7e0756790200b2d9bcceb170a1356e1d5477e3c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "818dee9730f01b3f525daa9cc0d5423b0c4af0414c647b6e0bc88546db9c0d75";
                sig_s = "61c16a90de1dbb1ab1e3c7917e891632f557f493b4106f225517ef186abc0ff9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "53cc0edfc688e3d264ed4755f9cf006418e16e24dc978453a6ef14fbecff617f";
                bn_t sig_s = "24694c00d38c13259973aa6db88adf7cc49b5673e628b3c65e7fe06f2665db86";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "cacd14406211ed85d8de1b50e167f59dec688574524c6fc1762c9268214e3bba";
                sig_s = "289cf8949f717626c25833a0a159d63d77d022b48e161007464f59f5072df8a7";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "c1a4c9d1feef48045813d911f6abb188502e06d26b34194f2deaa356e578a769";
                sig_s = "4063d3367b2bab52bf9fbc4cd3f670667569ccb1cfb05a7c7c156622ba593d45";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "5af5683467b4cb3d68bd168c5fe229a07b7eb1de2f92b8a9743fb46c3691872a";
                bn_t sig_s = "4cbe35cbe66805729e907462169c13b5c4feb497aab658774bec1ecd7bd8863c";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "051e5f825a5c29f92a108a3ddcdcbf7ffce37ab32915985978512e89a2a83b0c";
                sig_s = "6340ac187077a7fb4373537b4595a39299ad0ba351db23bcae9176125c61eded";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "34e28decbf74abd30f55155ee2ff96f621066001a853acef916cdb39a7d07b40";
                sig_s = "87561a96167016fb7dd6f3c7259f8c563f2144332ebb9a48e93b9512d3bf5392";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "cafded1bc98a4bdfe76e1df9ab75342a7fed16b0c1688a2e744d871b9404be14";
                bn_t sig_s = "a11fcb57d1212068afed86a37e7291aa02061e75b883e9b9a7af3a52e81f5033";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "254f9541aebd4fca9ce7136fa8e6ed6367778afedf36201779b0ea6a61a82f3b";
                sig_s = "38668103eebca5e786e05dfffd8b9f1d87d4a1558b1cdfc0eeb98a606ab654c6";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f998e8322b2a1101bbdf9b8b80bc147e5225632cdb6b1a8c4c4c25c29cd3319d";
                sig_s = "ee6b3e7b59621fd62b3253ef646ad7cd4a4d53dd11372038b0b314ced0e2e5a9";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "0c426a3f25f5d0250928ac4e5ea03cf949d34444283ac18a49ec638a2a6ea4c5";
                bn_t sig_s = "09f0df2fe78f8ce301057c734cf3c2505d7219775fb778758461360b168e2c8e";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "1309ba742999ad66aef104cc140246bc576bd14acc6bb0be728577e49f4f8ed5";
                sig_s = "31e29fedcab5999d66b27a4f4ffc950dcc8066fb7cdbad9a6362270c066a500a";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "cb565ebfd48044d17d2e241b7cd5fec6089e3d0bee83516b710f68d583ccd1c6";
                sig_s = "26d6d5a1f12ae063528e7e4b1a6a9c5c760af38f2828db9407c439484f2ae9c1";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "a6c419f478007ce4eb07cd8deb248b8d9d11e16c02364e18391ab934c6f3e91d";
                bn_t sig_s = "363ab461b8d40c864998a6dfa9c9c77419930b9336f0cd471b74786b09aba27b";
                auto r = true; // result = valid
                auto d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "e22ab46f883c6ea58de97f982ffd3ef581749fe5568f8121761566509145b0c8";
                sig_s = "fc4a53daf4122aa10b98a4d18c2e4920b37744447f0d843ff9ed1d79d482d73c";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "921a16ea241e69c9d4f3bde6ba2cc7e10a27c9dfd8b92076d0a4a6d9f8ae0ab3";
                sig_s = "39b66ee2afd7db1099fee2cd8c69c9f1ea29047efacc1c6e8ee92e5a2244a40b";
                r = true; // result = valid
                d = sha3_512( m );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of ASN encoded ECDSA signatures.
        // Notes:   BER - This is a signature with correct values for (r, s) but using some alternative BER encoding instead of DER encoding. Implementations should not accept such signatures to limit signature malleability.
        //   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   GroupIsomorphism - Some EC groups have isomorphic groups that allow an efficient implementation. This is a test vector that contains values that are edge cases on such an isomorphic group.
        //   MissingZero - Some implementations of ECDSA and DSA incorrectly encode r and s by not including leading zeros in the ASN encoding of integers when necessary. Hence, some implementations (e.g. jdk) allow signatures with incorrect ASN encodings assuming that the signature is otherwise valid.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   WeakHash - The security strength of the hash function used in this signature is weaker than the strength of the EC parameters. Such choices are disallowed in FIPS PUB 186-4 Section 6.1.1. However, it is unclear whether a library should reject such parameter choices.
        {
            auto pubkey = curve.make_point( "00b838ff44e5bc177bf21189d0766082fc9d843226887fc9760371100b7ee20a6f", "00f0c9d75bfba7b31a6bca1974496eeb56de357071955d83c4b1badaa0b21832e9" );
            {
                // signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                bn_t sig_s = "900e75ad233fcc908509dbff5922647db37c21f4afd3203ae8dc4ae7794b0f87";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Legacy:ASN encoding of r misses leading 0
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = true; // result = acceptable - flags: ['MissingZero']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // valid
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323650000";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending 0's to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba0000";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323650500";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // appending null value to integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba0500";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // dropping value of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "02813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify first byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6df18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323e5";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // modify last byte of integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb313a";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc98323";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // truncated integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "f18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "ff00813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // leading ff in integer
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "ff6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // replacing integer with zero
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478583b90deabca4b05c4574e49b5899b964a6";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e47858643b030ef461f1bcdf53fde3ef94ce224";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "ff7ec10863310565a908457fa0f1b87a7b01a0f22a0a9843f64aedc334367cdc9b";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a79bc4fcf10b9e0e4320ac021c106b31ddc";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "fe7ec10863310565a908457fa0f1b87a7c46f215435b4fa3ba8b1b64a766469b5a";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "01813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "7ec10863310565a908457fa0f1b87a7b01a0f22a0a9843f64aedc334367cdc9b";
                sig_s = "6ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b7fc1e197d8aebe203c96c87232272172fb";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "ff6ff18a52dcc0336f7af62400a6dd9b824c83de0b502cdfc51723b51886b4f079";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "900e75ad233fcc908509dbff5922647ef8cd450e008a7fff2909ec5aa914ce46";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "fe900e75ad233fcc908509dbff592264803e1e68275141dfc369378dcdd8de8d05";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "016ff18a52dcc0336f7af62400a6dd9b810732baf1ff758000d6f613a556eb31ba";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Modified r or s, e.g. by adding or subtracting the order of the group
                m = "313233343030"_hex;
                sig_r = "813ef79ccefa9a56f7ba805f0e478584fe5f0dd5f567bc09b5123ccbc9832365";
                sig_s = "900e75ad233fcc908509dbff5922647ef8cd450e008a7fff2909ec5aa914ce46";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "00";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "01";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "ff";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "00";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "01";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "ff";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Signature with special case values for r and s
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                sig_s = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc30";
                r = false; // result = invalid - flags: ['EdgeCase']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // Edge case for Shamir multiplication
                m = "3235353835"_hex;
                sig_r = "dd1b7d09a7bd8218961034a39a87fecf5314f00c4d25eb58a07ac85e85eab516";
                sig_s = "35138c401ef8d3493d65c9002fe62b43aee568731b744548358996d9cc427e06";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343236343739373234"_hex;
                sig_r = "95c29267d972a043d955224546222bba343fc1d4db0fec262a33ac61305696ae";
                sig_s = "6edfe96713aed56f8a28a6653f57e0b829712e5eddc67f34682b24f0676b2640";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37313338363834383931"_hex;
                sig_r = "28f94a894e92024699e345fe66971e3edcd050023386135ab3939d550898fb25";
                sig_s = "cd69c1a42be05a6ee1270c821479251e134c21858d800bda6f4e98b37196238e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130333539333331363638"_hex;
                sig_r = "be26b18f9549f89f411a9b52536b15aa270b84548d0e859a1952a27af1a77ac6";
                sig_s = "8f3e2b05632fc33715572af9124681113f2b84325b80154c044a544dc1a8fa12";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33393439343031323135"_hex;
                sig_r = "b1a4b1478e65cc3eafdf225d1298b43f2da19e4bcff7eacc0a2e98cd4b74b114";
                sig_s = "e8655ce1cfb33ebd30af8ce8e8ae4d6f7b50cd3e22af51bf69e0a2851760d52b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333434323933303739"_hex;
                sig_r = "325332021261f1bd18f2712aa1e2252da23796da8a4b1ff6ea18cafec7e171f2";
                sig_s = "40b4f5e287ee61fc3c804186982360891eaa35c75f05a43ecd48b35d984a6648";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33373036323131373132"_hex;
                sig_r = "a23ad18d8fc66d81af0903890cbd453a554cb04cdc1a8ca7f7f78e5367ed88a0";
                sig_s = "dc1c14d31e3fb158b73c764268c8b55579734a7e2a2c9b5ee5d9d0144ef652eb";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333433363838373132"_hex;
                sig_r = "2bdea41cda63a2d14bf47353bd20880a690901de7cd6e3cc6d8ed5ba0cdb1091";
                sig_s = "c31599433036064073835b1e3eba8335a650c8fd786f94fe235ad7d41dc94c7a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31333531353330333730"_hex;
                sig_r = "d7cd76ec01c1b1079eba9e2aa2a397243c4758c98a1ba0b7404a340b9b00ced6";
                sig_s = "ca8affe1e626dd192174c2937b15bc48f77b5bdfe01f073a8aeaf7f24dc6c85b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36353533323033313236"_hex;
                sig_r = "a872c744d936db21a10c361dd5c9063355f84902219652f6fc56dc95a7139d96";
                sig_s = "400df7575d9756210e9ccc77162c6b593c7746cfb48ac263c42750b421ef4bb9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353634333436363033"_hex;
                sig_r = "9fa9afe07752da10b36d3afcd0fe44bfc40244d75203599cf8f5047fa3453854";
                sig_s = "af1f583fec4040ae7e68c968d2bb4b494eec3a33edc7c0ccf95f7f75bc2569c7";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34343239353339313137"_hex;
                sig_r = "885640384d0d910efb177b46be6c3dc5cac81f0b88c3190bb6b5f99c2641f205";
                sig_s = "738ed9bff116306d9caa0f8fc608be243e0b567779d8dab03e8e19d553f1dc8e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130393533323631333531"_hex;
                sig_r = "2d051f91c5a9d440c5676985710483bc4f1a6c611b10c95a2ff0363d90c2a458";
                sig_s = "92206b19045a41a797cc2f3ac30de9518165e96d5b86341ecb3bcff231b3fd65";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393837333530303431"_hex;
                sig_r = "f3ac2523967482f53d508522712d583f4379cd824101ff635ea0935117baa54f";
                sig_s = "27f10812227397e02cea96fb0e680761636dab2b080d1fc5d11685cbe8500cfe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343633303036383738"_hex;
                sig_r = "96447cf68c3ab7266ed7447de3ac52fed7cc08cbdfea391c18a9b8ab370bc913";
                sig_s = "f0a1878b2c53f16e70fe377a5e9c6e86f18ae480a22bb499f5b32e7109c07385";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39383137333230323837"_hex;
                sig_r = "530a0832b691da0b5619a0b11de6877f3c0971baaa68ed122758c29caaf46b72";
                sig_s = "93761bb0a14ccf9f15b4b9ce73c6ec700bd015b8cb1cfac56837f4463f53074e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323232303431303436"_hex;
                sig_r = "9c54c25500bde0b92d72d6ec483dc2482f3654294ca74de796b681255ed58a77";
                sig_s = "988bac394a90ad89ce360984c0c149dcbd2684bb64498ace90bcf6b6af1c170e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36363636333037313034"_hex;
                sig_r = "e7909d41439e2f6af29136c7348ca2641a2b070d5b64f91ea9da7070c7a2618b";
                sig_s = "42d782f132fa1d36c2c88ba27c3d678d80184a5d1eccac7501f0b47e3d205008";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303335393531383938"_hex;
                sig_r = "5924873209593135a4c3da7bb381227f8a4b6aa9f34fe5bb7f8fbc131a039ffe";
                sig_s = "e0e44ee4bbe370155bf0bbdec265bf9fe31c0746faab446de62e3631eacd111f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31383436353937313935"_hex;
                sig_r = "eeb692c9b262969b231c38b5a7f60649e0c875cd64df88f33aa571fa3d29ab0e";
                sig_s = "218b3a1eb06379c2c18cf51b06430786d1c64cd2d24c9b232b23e5bac7989acd";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33313336303436313839"_hex;
                sig_r = "a40034177f36091c2b653684a0e3eb5d4bff18e4d09f664c2800e7cafda1daf8";
                sig_s = "3a3ec29853704e52031c58927a800a968353adc3d973beba9172cbbeab4dd149";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363633373834323534"_hex;
                sig_r = "b5d795cc75cea5c434fa4185180cd6bd21223f3d5a86da6670d71d95680dadbf";
                sig_s = "ab1b277ef5ffe134460835e3d1402461ba104cb50b16f397fdc7a9abfefef280";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363532313030353234"_hex;
                sig_r = "07dc2478d43c1232a4595608c64426c35510051a631ae6a5a6eb1161e57e42e1";
                sig_s = "4a59ea0fdb72d12165cea3bf1ca86ba97517bd188db3dbd21a5a157850021984";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35373438303831363936"_hex;
                sig_r = "ddd20c4a05596ca868b558839fce9f6511ddd83d1ccb53f82e5269d559a01552";
                sig_s = "a46e8cb8d626cf6c00ddedc3b5da7e613ac376445ee260743f06f79054c7d42a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36333433393133343638"_hex;
                sig_r = "9cde6e0ede0a003f02fda0a01b59facfe5dec063318f279ce2de7a9b1062f7b7";
                sig_s = "2886a5b8c679bdf8224c66f908fd6205492cb70b0068d46ae4f33a4149b12a52";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31353431313033353938"_hex;
                sig_r = "c5771016d0dd6357143c89f684cd740423502554c0c59aa8c99584f1ff38f609";
                sig_s = "ab4bfa0bb88ab99791b9b3ab9c4b02bd2a57ae8dde50b9064063fcf85315cfe5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130343738353830313238"_hex;
                sig_r = "a24ebc0ec224bd67ae397cbe6fa37b3125adbd34891abe2d7c7356921916dfe6";
                sig_s = "34f6eb6374731bbbafc4924fb8b0bdcdda49456d724cdae6178d87014cb53d8c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130353336323835353638"_hex;
                sig_r = "2557d64a7aee2e0931c012e4fea1cd3a2c334edae68cdeb7158caf21b68e5a24";
                sig_s = "80f93244956ffdc568c77d12684f7f004fa92da7e60ae94a1b98c422e23eda34";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393533393034313035"_hex;
                sig_r = "c4f2eccbb6a24350c8466450b9d61b207ee359e037b3dcedb42a3f2e6dd6aeb5";
                sig_s = "cd9c394a65d0aa322e391eb76b2a1a687f8620a88adef3a01eb8e4fb05b6477a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "393738383438303339"_hex;
                sig_r = "eff04781c9cbcd162d0a25a6e2ebcca43506c523385cb515d49ea38a1b12fcad";
                sig_s = "ea5328ce6b36e56ab87acb0dcfea498bcec1bba86a065268f6eff3c41c4b0c9c";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33363130363732343432"_hex;
                sig_r = "f58b4e3110a64bf1b5db97639ee0e5a9c8dfa49dc59b679891f520fdf0584c87";
                sig_s = "d32701ae777511624c1f8abbf02b248b04e7a9eb27938f524f3e8828ba40164a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31303534323430373035"_hex;
                sig_r = "f8abecaa4f0c502de4bf5903d48417f786bf92e8ad72fec0bd7fcb7800c0bbe3";
                sig_s = "4c7f9e231076a30b7ae36b0cebe69ccef1cd194f7cce93a5588fd6814f437c0e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35313734343438313937"_hex;
                sig_r = "5d5b38bd37ad498b2227a633268a8cca879a5c7c94a4e416bd0a614d09e606d2";
                sig_s = "12b8d664ea9991062ecbb834e58400e25c46007af84f6007d7f1685443269afe";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31393637353631323531"_hex;
                sig_r = "0c1cd9fe4034f086a2b52d65b9d3834d72aebe7f33dfe8f976da82648177d8e3";
                sig_s = "13105782e3d0cfe85c2778dec1a848b27ac0ae071aa6da341a9553a946b41e59";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33343437323533333433"_hex;
                sig_r = "ae7935fb96ff246b7b5d5662870d1ba587b03d6e1360baf47988b5c02ccc1a5b";
                sig_s = "5f00c323272083782d4a59f2dfd65e49de0693627016900ef7e61428056664b3";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333638323634333138"_hex;
                sig_r = "a134b5c6ccbcefd4c882b945baeb4933444172795fa6796aae149067547098";
                sig_s = "a991b9efa2db276feae1c115c140770901839d87e60e7ec45a2b81cf3b437be6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33323631313938363038"_hex;
                sig_r = "2e4721363ad3992c139e5a1c26395d2c2d777824aa24fde075e0d7381171309d";
                sig_s = "8bf083b6bbe71ecff22baed087d5a77eaeaf726bf14ace2c03fd6e37ba6c26f2";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "39363738373831303934"_hex;
                sig_r = "6852e9d3cd9fe373c2d504877967d365ab1456707b6817a042864694e1960ccf";
                sig_s = "f9b4d815ebd4cf77847b37952334d05b2045cb398d4c21ba207922a7a4714d84";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34393538383233383233"_hex;
                sig_r = "188a8c5648dc79eace158cf886c62b5468f05fd95f03a7635c5b4c31f09af4c5";
                sig_s = "36361a0b571a00c6cd5e686ccbfcfa703c4f97e48938346d0c103fdc76dc5867";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "383234363337383337"_hex;
                sig_r = "a74f1fb9a8263f62fc4416a5b7d584f4206f3996bb91f6fc8e73b9e92bad0e13";
                sig_s = "6815032e8c7d76c3ab06a86f33249ce9940148cb36d1f417c2e992e801afa3fa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3131303230383333373736"_hex;
                sig_r = "07244865b72ff37e62e3146f0dc14682badd7197799135f0b00ade7671742bfe";
                sig_s = "f27f3ddc7124b1b58579573a835650e7a8bad5eeb96e9da215cd7bf9a2a039ed";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "313333383731363438"_hex;
                sig_r = "da7fdd05b5badabd619d805c4ee7d9a84f84ddd5cf9c5bf4d4338140d689ef08";
                sig_s = "28f1cf4fa1c3c5862cfa149c0013cf5fe6cf5076cae000511063e7de25bb38e5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "333232313434313632"_hex;
                sig_r = "d3027c656f6d4fdfd8ede22093e3c303b0133c340d615e7756f6253aea927238";
                sig_s = "f6510f9f371b31068d68bfeeaa720eb9bbdc8040145fcf88d4e0b58de0777d2a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3130363836363535353436"_hex;
                sig_r = "0bf6c0188dc9571cd0e21eecac5fbb19d2434988e9cc10244593ef3a98099f69";
                sig_s = "4864a562661f9221ec88e3dd0bc2f6e27ac128c30cc1a80f79ec670a22b042ee";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "3632313535323436"_hex;
                sig_r = "ae459640d5d1179be47a47fa538e16d94ddea5585e7a244804a51742c686443a";
                sig_s = "6c8e30e530a634fae80b3ceb062978b39edbe19777e0a24553b68886181fd897";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "37303330383138373734"_hex;
                sig_r = "1cf3517ba3bf2ab8b9ead4ebb6e866cb88a1deacb6a785d3b63b483ca02ac495";
                sig_s = "249a798b73606f55f5f1c70de67cb1a0cff95d7dc50b3a617df861bad3c6b1c9";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "35393234353233373434"_hex;
                sig_r = "e69b5238265ea35d77e4dd172288d8cea19810a10292617d5976519dc5757cb8";
                sig_s = "4b03c5bc47e826bdb27328abd38d3056d77476b2130f3df6ec4891af08ba1e29";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31343935353836363231"_hex;
                sig_r = "5f9d7d7c870d085fc1d49fff69e4a275812800d2cf8973e7325866cb40fa2b6f";
                sig_s = "6d1f5491d9f717a597a15fd540406486d76a44697b3f0d9d6dcef6669f8a0a56";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "34303035333134343036"_hex;
                sig_r = "0a7d5b1959f71df9f817146ee49bd5c89b431e7993e2fdecab6858957da685ae";
                sig_s = "0f8aad2d254690bdc13f34a4fec44a02fd745a422df05ccbb54635a8b86b9609";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "33303936343537353132"_hex;
                sig_r = "79e88bf576b74bc07ca142395fda28f03d3d5e640b0b4ff0752c6d94cd553408";
                sig_s = "32cea05bd2d706c8f6036a507e2ab7766004f0904e2e5c5862749c0073245d6a";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32373834303235363230"_hex;
                sig_r = "9d54e037a00212b377bc8874798b8da080564bbdf7e07591b861285809d01488";
                sig_s = "18b4e557667a82bd95965f0706f81a29243fbdd86968a7ebeb43069db3b18c7f";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "32363138373837343138"_hex;
                sig_r = "2664f1ffa982fedbcc7cab1b8bc6e2cb420218d2a6077ad08e591ba9feab33bd";
                sig_s = "49f5c7cb515e83872a3d41b4cdb85f242ad9d61a5bfc01debfbb52c6c84ba728";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "31363432363235323632"_hex;
                sig_r = "5827518344844fd6a7de73cbb0a6befdea7b13d2dee4475317f0f18ffc81524b";
                sig_s = "b0a334b1f4b774a5a289f553224d286d239ef8a90929ed2d91423e024eb7fa66";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "36383234313839343336"_hex;
                sig_r = "97ab19bd139cac319325869218b1bce111875d63fb12098a04b0cd59b6fdd3a3";
                sig_s = "bce26315c5dbc7b8cfc31425a9b89bccea7aa9477d711a4d377f833dcc28f820";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // special case hash
                m = "343834323435343235"_hex;
                sig_r = "52c683144e44119ae2013749d4964ef67509278f6d38ba869adcfa69970e123d";
                sig_s = "3479910167408f45bda420a626ec9c4ec711c1274be092198b4187c018b562ca";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "07310f90a9eae149a08402f54194a0f7b4ac427bf8d9bd6c7681071dc47dc362", "26a6d37ac46d61fd600c0bf1bff87689ed117dda6b0e59318ae010a197a26ca0" );
            {
                // k*G has a large x-coordinate
                auto m = "313233343030"_hex;
                bn_t sig_r = "014551231950b75fc4402da1722fc9baeb";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r too large
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2c";
                sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bc97e7585eecad48e16683bc4091708e1a930c683fc47001d4b383594f2c4e22", "705989cf69daeadd4e4e4b8151ed888dfec20fb01728d89d56b3f38f2ae9c8c5" );
            {
                // r,s are large
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413f";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44ad339afbc21e9abf7b602a5ca535ea378135b6d10d81310bdd8293d1df3252", "00b63ff7d0774770f8fe1d1722fa83acd02f434e4fc110a0cc8f6dddd37d56c463" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3e9a7582886089c62fb840cf3b83061cd1cff3ae4341808bb5bdee6191174177";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1260c2122c9e244e1af5151bede0c3ae23b54d7c596881d3eebad21f37dd878c", "5c9a0c1a9ade76737a8811bd6a7f9287c978ee396aa89c11e47229d2ccb552f0" );
            {
                // r and s^-1 have a large Hamming weight
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "24238e70b431b1a64efdf9032669939d4b77f249503fc6905feb7540dea3e6d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1877045be25d34a1d0600f9d5c00d0645a2a54379b6ceefad2e6bf5c2a3352ce", "00821a532cc1751ee1d36d41c3d6ab4e9b143e44ec46d73478ea6a79a5c0e54159" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "455439fcc3d2deeceddeaece60e7bd17304f36ebb602adf5a22e0b8f1db46a50", "00aec38fb2baf221e9a8d1887c7bf6222dd1834634e77263315af6d23609d04f77" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "02";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2e1f466b024c0c3ace2437de09127fed04b706f94b19a21bb1c2acf35cece718", "0449ae3523d72534e964972cfd3b38af0bddd9619e5af223e4d1a40f34cf9f1d" );
            {
                // small r and s
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "03";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // r is larger than n
                m = "313233343030"_hex;
                sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142";
                sig_s = "03";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00dda95d7b0698de5d2d0b4f0034dbe35b50f978fcc518a84abf9c99efd96a2530", "5adc08d6a63dbe831ab99cd9146e3c4c45492ad19521612542256d6af60e7888" );
            {
                // s is larger than n
                auto m = "313233343030"_hex;
                bn_t sig_r = "01";
                bn_t sig_s = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd04917c8";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "02ef4d6d6cfd5a94f1d7784226e3e2a6c0a436c55839619f38fb4472b5f9ee77", "7eb4acd4eebda5cd72875ffd2a2f26229c2dc6b46500919a432c86739f3ae866" );
            {
                // small r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "c58b162c58b162c58b162c58b162c58a1b242973853e16db75c8a1a71da4d39d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "464f4ff715729cae5072ca3bd801d3195b67aec65e9b01aad20a2943dcbcb584", "00b1afd29d31a39a11d570aa1597439b3b2d1971bf2f1abf15432d0207b10d1d08" );
            {
                // smallish r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "2d9b4d347952cc";
                bn_t sig_s = "fcbc5103d0da267477d1791461cf2aa44bf9d43198f79507bd8779d69a13108e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "157f8fddf373eb5f49cfcf10d8b853cf91cbcd7d665c3522ba7dd738ddb79a4c", "00deadf1a5c448ea3c9f4191a8999abfcc757ac6d64567ef072c47fec613443b8f" );
            {
                // 100-bit r and small s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "1033e67e37b32b445580bf4efc";
                bn_t sig_s = "906f906f906f906f906f906f906f906ed8e426f7b1968c35a204236a579723d2";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0934a537466c07430e2c48feb990bb19fb78cecc9cee424ea4d130291aa237f0", "00d4f92d23b462804b5b68c52558c01c9996dbf727fccabbeedb9621a400535afa" );
            {
                // small r and 100 bit s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "0101";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d6ef20be66c893f741a9bf90d9b74675d1c2a31296397acb3ef174fd0b300c65", "4a0c95478ca00399162d7f0f2dc89efdc2b28a30fbabe285857295a4b0c4e265" );
            {
                // 100-bit r and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "062522bbd3ecbe7c39e93e7c26";
                bn_t sig_s = "783266e90f43dafe5cd9b3b0be86de22f9de83677d0f50713a468ec72fcf5d57";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00b7291d1404e0c0c07dab9372189f4bd58d2ceaa8d15ede544d9514545ba9ee06", "29c9a63d5e308769cc30ec276a410e6464a27eeafd9e599db10f053a4fe4a829" );
            {
                // r and s^-1 are close to n
                auto m = "313233343030"_hex;
                bn_t sig_r = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03640c1";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bb79f61857f743bfa1b6e7111ce4094377256969e4e15159123d9548acc3be6c", "1f9d9f8860dcffd3eb36dd6c31ff2e7226c2009c4c94d8d7d2b5686bf7abd677" );
            {
                // s == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                bn_t sig_s = "01";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // s == 0
                m = "313233343030"_hex;
                sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c1";
                sig_s = "00";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d533b789a4af890fa7a82a1fae58c404f9a62a50b49adafab349c513b4150874", "01b4171b803e76b34a9861e10f7bc289a066fd01bd29f84c987a10a5fb18c2d4" );
            {
                // point at infinity during verify
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3a3150798c8af69d1e6e981f3a45402ba1d732f4be8330c5164f49e10ec555b4", "221bd842bc5e4d97eff37165f60e3998a424d72a450cf95ea477c78287d0343a" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3b37df5fb347c69a0f17d85c0c7ca83736883a825e13143d0fcfc8101e851e80", "0de3c090b6ca21ba543517330c04b12f948c6badf14a63abffdf4ef8c7537026" );
            {
                // edge case for signature malleability
                auto m = "313233343030"_hex;
                bn_t sig_r = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0";
                bn_t sig_s = "7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a1";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00feb5163b0ece30ff3e03c7d55c4380fa2fa81ee2c0354942ff6f08c99d0cd82c", "00e87de05ee1bda089d3e4e248fa0f721102acfffdf50e654be281433999df897e" );
            {
                // u1 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "238ced001cf22b8853e02edc89cbeca5050ba7e042a7a77f9382cd4149228976", "40683d3094643840f295890aa4c18aa39b41d77dd0fb3bb2700e4f9ec284ffc2" );
            {
                // u1 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00961cf64817c06c0e51b3c2736c922fde18bd8c4906fcd7f5ef66c4678508f35e", "00d2c5d18168cfbe70f2f123bd7419232bb92dd69113e2941061889481c5a027bf" );
            {
                // u2 == 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "13681eae168cd4ea7cf2e2a45d052742d10a9f64e796867dbdcb829fe0b10288", "16528760d177376c09df79de39557c329cc1753517acffe8fa2ec298026b8384" );
            {
                // u2 == n - 1
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215b8";
                bn_t sig_s = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa9d1c9e899ca306ad27fe1945de0242b89";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5aa7abfdb6b4086d543325e5d79c6e95ce42f866d2bb84909633a04bb1aa31c2", "0091c80088794905e1da33336d874e2f91ccf45cc59185bede5dd6f3f7acaae18b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e91e1ba6ba898620a46bcb51dc0b8b4ad1dc35dad892c4552d1847b2ce444637";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "277791b305a45b2b39590b2f05d3392a6c8182cef4eb540120e0f5c206c3e4", "64108233fb0b8c3ac892d79ef8e0fbf92ed133addb4554270132584dc52eef41" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "e36bf0cec06d9b841da81332812f74f30bbaec9f202319206c6f0b8a0a400ff7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6efa092b68de9460f0bcc919005a5f6e80e19de98968be3cd2c770a9949bfb1a", "00c75e6e5087d6550d5f9beb1e79e5029307bc255235e2d5dc99241ac3ab886c49" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ea26b57af884b6c06e348efe139c1e4e9ec9518d60c340f6bac7d278ca08d8a6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "72d4a19c4f9d2cf5848ea40445b70d4696b5f02d632c0c654cc7d7eeb0c6d058", "00e8c4cd9943e459174c7ac01fa742198e47e6c19a6bdb0c4f6c237831c1b3f942" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5b1d27a7694c146244a5ad0bd0636d9d9ef3b9fb58385418d9c982105077d1b7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2a8ea2f50dcced0c217575bdfa7cd47d1c6f100041ec0e35512794c1be7e7402", "58f8c17122ed303fda7143eb58bede70295b653266013b0b0ebd3f053137f6ec" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d27a7694c146244a5ad0bd0636d9e12abe687897e8e9998ddbd4e59a78520d0f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0088de689ce9af1e94be6a2089c8a8b1253ffdbb6c8e9c86249ba220001a4ad3b8", "0c4998e54842f413b9edb1825acbb6335e81e4d184b2b01c8bebdc85d1f28946" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "a4f4ed29828c4894b5a17a0c6db3c256c2221449228a92dff7d76ca8206dd8dd";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00fea2d31f70f90d5fb3e00e186ac42ab3c1615cee714e0b4e1131b3d4d8225bf7", "00b037a18df2ac15343f30f74067ddf29e817d5f77f8dce05714da59c094f0cda9" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "694c146244a5ad0bd0636d9e12bc9e09e60e68b90d0b5e6c5dddd0cb694d8799";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "7258911e3d423349166479dbe0b8341af7fbd03d0a7e10edccb36b6ceea5a3db", "17ac2b8992791128fa3b96dc2fbd4ca3bfa782ef2832fc6656943db18e7346b0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "3d7f487c07bfc5f30846938a3dcef696444707cf9677254a92b06c63ab867d22";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "4f28461dea64474d6bb34d1499c97d37b9e95633df1ceeeaacd45016c98b3914", "00c8818810b8cc06ddb40e8a1261c528faa589455d5a6df93b77bc5e0e493c7470" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6c7648fc0fbf8a06adb8b839f97b4ff7a800f11b1e37c593b261394599792ba4";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "74f2a814fb5d8eca91a69b5e60712732b3937de32829be974ed7b68c5c2f5d66", "00eff0f07c56f987a657f42196205f588c0f1d96fd8a63a5f238b48f478788fe3b" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "9be363a286f23f6322c205449d320baad417953ecb70f6214e90d49d7d1f26a8";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "195b51a7cc4a21b8274a70a90de779814c3c8ca358328208c09a29f336b82d6a", "00b2416b7c92fffdc29c3b1282dd2a77a4d04df7f7452047393d849989c5cee9ad" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "29798c5c45bdf58b4a7b2fdc2c46ab4af1218c7eeb9f0f27a88f1267674de3b0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "622fc74732034bec2ddf3bc16d34b3d1f7a327dd2a8c19bab4bb4fe3a24b58aa", "736b2f2fae76f4dfaecc9096333b01328d51eb3fda9c9227e90d0b449983c4f0" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "0b70f22ca2bb3cefadca1a5711fa3a59f4695385eb5aedf3495d0b6d00f8fd85";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f7f85caf2d7550e7af9b65023ebb4dce3450311692309db269969b834b611c7", "0827f45b78020ecbbaf484fdd5bfaae6870f1184c21581baf6ef82bd7b530f93" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "16e1e459457679df5b9434ae23f474b3e8d2a70bd6b5dbe692ba16da01f1fb0a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "49c197dc80ad1da47a4342b93893e8e1fb0bb94fc33a83e783c00b24c781377a", "00efc20da92bac762951f72474becc734d4cc22ba81b895e282fdac4df7af0f37d" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2252d685e831b6cf095e4f0535eeaf0ddd3bfa91c210c9d9dc17224702eaf88f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d8cb68517b616a56400aa3868635e54b6f699598a2f6167757654980baf6acbe", "7ec8cf449c849aa03461a30efada41453c57c6e6fbc93bbc6fa49ada6dc0555c" );
            {
                // edge case for u1
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "75135abd7c425b60371a477f09ce0f274f64a8c6b061a07b5d63e93c65046c53";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "030713fb63f2aa6fe2cadf1b20efc259c77445dafa87dac398b84065ca347df3", "00b227818de1a39b589cb071d83e5317cccdc2338e51e312fe31d8dc34a4801750" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "d55555555555555555555555555555547c74934474db157d2a8c3f088aced62a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00babb3677b0955802d8e929a41355640eaf1ea1353f8a771331c4946e3480afa7", "252f196c87ed3d2a59d3b1b559137fed0013fecefc19fb5a92682b9bca51b950" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "c1777c8853938e536213c02464a936000ba1e21c0fc62075d46c624e23b52f31";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1aab2018793471111a8a0e9b143fde02fc95920796d3a63de329b424396fba60", "00bbe4130705174792441b318d3aa31dfe8577821e9b446ec573d272e036c4ebe9" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "30bbb794db588363b40679f6c182a50d3ce9679acdd3ffbe36d7813dacbdc818";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008cb0b909499c83ea806cd885b1dd467a0119f06a88a0276eb0cfda274535a8ff", "47b5428833bc3f2c8bf9d9041158cf33718a69961cd01729bc0011d1e586ab75" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2c37fd995622c4fb7fffffffffffffffc7cee745110cb45ab558ed7c90c15a2f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008f03cf1a42272bb1532723093f72e6feeac85e1700e9fbe9a6a2dd642d74bf5d", "3b89a7189dad8cf75fc22f6f158aa27f9c2ca00daca785be3358f2bda3862ca0" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "7fd995622c4fb7ffffffffffffffffff5d883ffab5b32652ccdcaa290fccb97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "44de3b9c7a57a8c9e820952753421e7d987bb3d79f71f013805c897e018f8ace", "00a2460758c8f98d3fdce121a943659e372c326fff2e5fc2ae7fa3f79daae13c12" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "ffb32ac4589f6ffffffffffffffffffebb107ff56b664ca599b954521f9972fa";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6fb8b2b48e33031268ad6a517484dc8839ea90f6669ea0c7ac3233e2ac31394a", "0ac8bbe7f73c2ff4df9978727ac1dfc2fd58647d20f31f99105316b64671f204" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "5622c4fb7fffffffffffffffffffffff928a8f1c7ac7bec1808b9f61c01ec327";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00bea71122a048693e905ff602b3cf9dd18af69b9fc9d8431d2b1dd26b942c95e6", "00f43c7b8b95eb62082c12db9dbda7fe38e45cbe4a4886907fb81bdb0c5ea9246c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "44104104104104104104104104104103b87853fd3b7d3f8e175125b4382f25ed";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00da918c731ba06a20cb94ef33b778e981a404a305f1941fe33666b45b03353156", "00e2bb2694f575b45183be78e5c9b5210bf3bf488fd4c8294516d89572ca4f5391" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2739ce739ce739ce739ce739ce739ce705560298d1f2f08dc419ac273a5b54d9";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3007e92c3937dade7964dfa35b0eff031f7eb02aed0a0314411106cdeb70fe3d", "5a7546fc0552997b20e3d6f413e75e2cb66e116322697114b79bac734bfc4dc5" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "b777777777777777777777777777777688e6a1fe808a97a348671222ff16b863";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "60e734ef5624d3cbf0ddd375011bd663d6d6aebc644eb599fdf98dbdcd18ce9b", "00d2d90b3ac31f139af832cccf6ccbbb2c6ea11fa97370dc9906da474d7d8a7567" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "6492492492492492492492492492492406dd3a19b8d5fb875235963c593bd2d3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0085a900e97858f693c0b7dfa261e380dad6ea046d1f65ddeeedd5f7d8af0ba337", "69744d15add4f6c0bc3b0da2aec93b34cb8c65f9340ddf74e7b0009eeeccce3c" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "955555555555555555555555555555547c74934474db157d2a8c3f088aced62c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "38066f75d88efc4c93de36f49e037b234cc18b1de5608750a62cab0345401046", "00a3e84bed8cfcb819ef4d550444f2ce4b651766b69e2e2901f88836ff90034fed" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "2aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa3e3a49a23a6d8abe95461f8445676b17";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "0098f68177dc95c1b4cbfa5245488ca523a7d5629470d035d621a443c72f39aabf", "00a33d29546fa1c648f2c7d5ccf70cf1ce4ab79b5db1ac059dbecd068dbdff1b89" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "bffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364143";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "5c2bbfa23c9b9ad07f038aa89b4930bf267d9401e4255de9e8da0a5078ec8277", "00e3e882a31d5e6a379e0793983ccded39b95c4353ab2ff01ea5369ba47b0c3191" );
            {
                // edge case for u2
                auto m = "313233343030"_hex;
                bn_t sig_r = "7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc";
                bn_t sig_s = "185ddbca6dac41b1da033cfb60c152869e74b3cd66e9ffdf1b6bc09ed65ee40c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "3547808298448edb5e701ade84cd5fb1ac9567ba5e8fb68a6b933ec4b5cc84cc" );
            {
                // point duplication during verification
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = true; // result = valid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "2ea7133432339c69d27f9b267281bd2ddd5f19d6338d400a05cd3647b157a385", "00cab87f7d67bb7124a18fe5217b32a04e536a9845a1704975946cc13a4a337763" );
            {
                // duplication bug
                auto m = "313233343030"_hex;
                bn_t sig_r = "32b0d10d8d0e04bc8d4d064d270699e87cffc9b49c5c20730e1c26f6105ddcda";
                bn_t sig_s = "d612c2984c2afa416aa7f2882a486d4a8426cb6cfc91ed5b737278f9fca8be68";
                auto r = false; // result = invalid - flags: ['PointDuplication']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008aa2c64fa9c6437563abfbcbd00b2048d48c18c152a2a6f49036de7647ebe82e", "1ce64387995c68a060fa3bc0399b05cc06eec7d598f75041a4917e692b7f51ff" );
            {
                // comparison with point at infinity
                auto m = "313233343030"_hex;
                bn_t sig_r = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                bn_t sig_s = "33333333333333333333333333333332f222f8faefdb533f265d461c29a47373";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "391427ff7ee78013c14aec7d96a8a062209298a783835e94fd6549d502fff71f", "00dd6624ec343ad9fcf4d9872181e59f842f9ba4cccae09a6c0972fb6ac6b4c6bd" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00e762b8a219b4f180219cc7a9059245e4961bd191c03899789c7a34b89e8c138e", "00c1533ef0419bb7376e0bfde9319d10a06968791d9ea0eed9c1ce6345aed9759e" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "009aedb0d281db164e130000c5697fae0f305ef848be6fffb43ac593fbb950e952", "00fa6f633359bdcd82b56b0b9f965b037789d46b9a8141b791b2aefa713f96c175" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008ad445db62816260e4e687fd1884e48b9fc0636d031547d63315e792e19bfaee", "1de64f99d5f1cd8b6ec9cb0f787a654ae86993ba3db1008ef43cff0684cb22bd" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "1f5799c95be89063b24f26e40cb928c1a868a76fb0094607e8043db409c91c32", "00e75724e813a4191e3a839007f08e2e897388b06d4a00de6de60e536d91fab566" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00a3331a4e1b4223ec2c027edd482c928a14ed358d93f1d4217d39abf69fcb5ccc", "28d684d2aaabcd6383775caa6239de26d4c6937bb603ecb4196082f4cffd509d" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "3f3952199774c7cf39b38b66cb1042a6260d8680803845e4d433adba3bb24818", "5ea495b68cbc7ed4173ee63c9042dc502625c7eb7e21fb02ca9a9114e0a3a18d" );
            {
                // extreme value for k and edgecase s
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "55555555555555555555555555555554e8e4f44ce51835693ff0ca2ef01215c0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00cdfb8c0f422e144e137c2412c86c171f5fe3fa3f5bbb544e9076288f3ced786e", "054fd0721b77c11c79beacb3c94211b0a19bda08652efeaf92513a3b0a163698" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "b6db6db6db6db6db6db6db6db6db6db5f30f30127d33e02aad96438927022e9c";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "73598a6a1c68278fa6bfd0ce4064e68235bc1c0f6b20a928108be336730f87e3", "00cbae612519b5032ecc85aed811271a95fe7939d5d3460140ba318f4d14aba31d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "99999999999999999999999999999998d668eaf0cf91f9bd7317d2547ced5a5a";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "58debd9a7ee2c9d59132478a5440ae4d5d7ed437308369f92ea86c82183f10a1", "6773e76f5edbf4da0e4f1bdffac0f57257e1dfa465842931309a24245fda6a5d" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "66666666666666666666666666666665e445f1f5dfb6a67e4cba8c385348e6e7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "008b904de47967340c5f8c3572a720924ef7578637feab1949acb241a5a6ac3f5b", "00950904496f9824b1d63f3313bae21b89fae89afdfc811b5ece03fd5aa301864f" );
            {
                // extreme value for k and s^-1
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "49249249249249249249249249249248c79facd43214c011123c1b03a93412a5";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00f4892b6d525c771e035f2a252708f3784e48238604b4f94dc56eaa1e546d941a", "346b1aa0bce68b1c50e5b52f509fb5522e5c25e028bc8f863402edb7bcad8b1b" );
            {
                // extreme value for k
                auto m = "313233343030"_hex;
                bn_t sig_r = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798";
                bn_t sig_s = "0eb10e5ab95f2f275348d82ad2e4d7949c8193800d8c9c75df58e343f0ebba7b";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "00b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777" );
            {
                // testing point duplication
                auto m = "313233343030"_hex;
                bn_t sig_r = "bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023";
                bn_t sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                auto r = false; // result = invalid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // testing point duplication
                m = "313233343030"_hex;
                sig_r = "44a5ad0bd0636d9e12bc9e0a6bdd5e1bba77f523842193b3b82e448e05d5f11e";
                sig_s = "2492492492492492492492492492492463cfd66a190a6008891e0d81d49a0952";
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = "313233343030"_hex;
                bn_t sig_r = "d035ee1f17fdb0b2681b163e33c359932659990af77dca632012b30b27a057b3";
                bn_t sig_s = "1939d9f3b2858bc13e3474cb50e6a82be44faa71940f876c1cba4c3e989202b6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "54657374"_hex;
                sig_r = "24813a5aeff4584826a72e3ce030ff39124b456c8db11574ab44e9634f2be545";
                sig_s = "0c50c914e04bfe3c87ef8dfda335686faa799591141c9b8def398c5eeae107c5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = ""_hex;
                sig_r = "f80ae4f96cdbc9d853f83d47aae225bf407d51c56b7776cd67d0dc195d99a9dc";
                sig_s = "b303e26be1f73465315221f0b331528807a1a9b6eb068ede6eebeaaa49af8a36";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "4f053f563ad34b74fd8c9934ce59e79c2eb8e6eca0fef5b323ca67d5ac7ed238";
                sig_s = "4d4b05daa0719e773d8617dce5631c5fd6f59c9bdc748e4b55c970040af01be5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6d6a4f556ccce154e7fb9f19e76c3deca13d59cc2aeb4ecad968aab2ded45965";
                bn_t sig_s = "53b9fa74803ede0fc4441bf683d56c564d3e274e09ccf47390badd1471c05fb7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "aad503de9b9fd66b948e9acf596f0a0e65e700b28b26ec56e6e45e846489b3c4";
                sig_s = "fff223c5d0765447e8447a3f9d31fd0696e89d244422022ff61a110b2a8c2f04";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "9182cebd3bb8ab572e167174397209ef4b1d439af3b200cdf003620089e43225";
                sig_s = "abb88367d15fe62d1efffb6803da03109ee22e90bc9c78e8b4ed23630b82ea9d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3854a3998aebdf2dbc28adac4181462ccac7873907ab7f212c42db0e69b56ed8";
                bn_t sig_s = "c12c09475c772fd0c1b2060d5163e42bf71d727e4ae7c03eeba954bf50b43bb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "e94dbdc38795fe5c904d8f16d969d3b587f0a25d2de90b6d8c5c53ff887e3607";
                sig_s = "856b8c963e9b68dade44750bf97ec4d11b1a0a3804f4cb79aa27bdea78ac14e4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "49fc102a08ca47b60e0858cd0284d22cddd7233f94aaffbb2db1dd2cf08425e1";
                sig_s = "5b16fca5a12cdb39701697ad8e39ffd6bdec0024298afaa2326aea09200b14d6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "41efa7d3f05a0010675fcb918a45c693da4b348df21a59d6f9cd73e0d831d67a";
                bn_t sig_s = "bbab52596c1a1d9484296cdc92cbf07e665259a13791a8fe8845e2c07cf3fc67";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "b615698c358b35920dd883eca625a6c5f7563970cdfc378f8fe0cee17092144c";
                sig_s = "da0b84cd94a41e049ef477aeac157b2a9bfa6b7ac8de06ed3858c5eede6ddd6d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "87cf8c0eb82d44f69c60a2ff5457d3aaa322e7ec61ae5aecfd678ae1c1932b0e";
                sig_s = "c522c4eea7eafb82914cbf5c1ff76760109f55ddddcf58274d41c9bc4311e06e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "62f48ef71ace27bf5a01834de1f7e3f948b9dce1ca1e911d5e13d3b104471d82";
                bn_t sig_s = "a1570cc0f388768d3ba7df7f212564caa256ff825df997f21f72f5280d53011f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f6b0e2f6fe020cf7c0c20137434344ed7add6c4be51861e2d14cbda472a6ffb4";
                sig_s = "9be93722c1a3ad7d4cf91723700cb5486de5479d8c1b38ae4e8e5ba1638e9732";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "db09d8460f05eff23bc7e436b67da563fa4b4edb58ac24ce201fa8a358125057";
                sig_s = "46da116754602940c8999c8d665f786c50f5772c0a3cdbda075e77eabc64df16";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "592c41e16517f12fcabd98267674f974b588e9f35d35406c1a7bb2ed1d19b7b8";
                bn_t sig_s = "c19a5f942607c3551484ff0dc97281f0cdc82bc48e2205a0645c0cf3d7f59da0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "be0d70887d5e40821a61b68047de4ea03debfdf51cdf4d4b195558b959a032b2";
                sig_s = "8266b4d270e24414ecacb14c091a233134b918d37320c6557d60ad0a63544ac4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fae92dfcb2ee392d270af3a5739faa26d4f97bfd39ed3cbee4d29e26af3b206a";
                sig_s = "93645c80605595e02c09a0dc4b17ac2a51846a728b3e8d60442ed6449fd3342b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "176a2557566ffa518b11226694eb9802ed2098bfe278e5570fe1d5d7af18a943";
                bn_t sig_s = "ed6e2095f12a03f2eaf6718f430ec5fe2829fd1646ab648701656fd31221b97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "60be20c3dbc162dd34d26780621c104bbe5dace630171b2daef0d826409ee5c2";
                sig_s = "bd8081b27762ab6e8f425956bf604e332fa066a99b59f87e27dc1198b26f5caa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "edf03cf63f658883289a1a593d1007895b9f236d27c9c1f1313089aaed6b16ae";
                sig_s = "e5b22903f7eb23adc2e01057e39b0408d495f694c83f306f1216c9bf87506074";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'ecdsa_webcrypto_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/master/testvectors/ecdsa_webcrypto_test.json'
        // Note:
        //     Test vectors with flag(s) 'BER' were not included.
        //     All test(s) with BER/DER decoding related errors were not included because they're not part of this test scope.
        //
        // Algorithm: ECDSA
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of type EcdsaVerify are meant for the verification of IEEE P1363 encoded ECDSA signatures.
        // Notes:   EdgeCase - Edge case values such as r=1 and s=0 can lead to forgeries if the ECDSA implementation does not check boundaries and computes s^(-1)==0.
        //   PointDuplication - Some implementations of ECDSA do not handle duplication and points at infinity correctly. This is a test vector that has been specially crafted to check for such an omission.
        //   SigSize - The size of the signature should always be twice the number of bytes of the size of the order. But some libraries accept signatures with less bytes.
        //   WeakHash - The security strength of the hash function used in this signature is weaker than then strength of the EC parameters. Such choices are disallowed in FIPS PUB 186-4 Section 6.1.1. However, it is unclear whether a library should reject such parameter choices.
        {
            auto pubkey = curve.make_point( "782c8ed17e3b2a783b5464f33b09652a71c678e05ec51e84e2bcfc663a3de963", "00af9acb4280b8c7f7c42f4ef9aba6245ec1ec1712fd38a0fa96418d8cd6aa6152" );
            {
                // pseudorandom signature
                auto m = "313233343030"_hex;
                bn_t sig_r = "d035ee1f17fdb0b2681b163e33c359932659990af77dca632012b30b27a057b3";
                bn_t sig_s = "1939d9f3b2858bc13e3474cb50e6a82be44faa71940f876c1cba4c3e989202b6";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "54657374"_hex;
                sig_r = "24813a5aeff4584826a72e3ce030ff39124b456c8db11574ab44e9634f2be545";
                sig_s = "0c50c914e04bfe3c87ef8dfda335686faa799591141c9b8def398c5eeae107c5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = ""_hex;
                sig_r = "f80ae4f96cdbc9d853f83d47aae225bf407d51c56b7776cd67d0dc195d99a9dc";
                sig_s = "b303e26be1f73465315221f0b331528807a1a9b6eb068ede6eebeaaa49af8a36";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // pseudorandom signature
                m = "0000000000000000000000000000000000000000"_hex;
                sig_r = "4f053f563ad34b74fd8c9934ce59e79c2eb8e6eca0fef5b323ca67d5ac7ed238";
                sig_s = "4d4b05daa0719e773d8617dce5631c5fd6f59c9bdc748e4b55c970040af01be5";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "01060492d5a5673e0f25d8d50fb7e58c49d86d46d4216955e0aa3d40e1" );
            {
                // y-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "6d6a4f556ccce154e7fb9f19e76c3deca13d59cc2aeb4ecad968aab2ded45965";
                bn_t sig_s = "53b9fa74803ede0fc4441bf683d56c564d3e274e09ccf47390badd1471c05fb7";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "aad503de9b9fd66b948e9acf596f0a0e65e700b28b26ec56e6e45e846489b3c4";
                sig_s = "fff223c5d0765447e8447a3f9d31fd0696e89d244422022ff61a110b2a8c2f04";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "9182cebd3bb8ab572e167174397209ef4b1d439af3b200cdf003620089e43225";
                sig_s = "abb88367d15fe62d1efffb6803da03109ee22e90bc9c78e8b4ed23630b82ea9d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6e823555452914099182c6b2c1d6f0b5d28d50ccd005af2ce1bba541aa40caff", "00fffffffef9fb6d2a5a98c1f0da272af0481a73b62792b92bde96aa1e55c2bb4e" );
            {
                // y-coordinate of the public key is large
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "3854a3998aebdf2dbc28adac4181462ccac7873907ab7f212c42db0e69b56ed8";
                bn_t sig_s = "c12c09475c772fd0c1b2060d5163e42bf71d727e4ae7c03eeba954bf50b43bb3";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "e94dbdc38795fe5c904d8f16d969d3b587f0a25d2de90b6d8c5c53ff887e3607";
                sig_s = "856b8c963e9b68dade44750bf97ec4d11b1a0a3804f4cb79aa27bdea78ac14e4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key is large
                m = "4d657373616765"_hex;
                sig_r = "49fc102a08ca47b60e0858cd0284d22cddd7233f94aaffbb2db1dd2cf08425e1";
                sig_s = "5b16fca5a12cdb39701697ad8e39ffd6bdec0024298afaa2326aea09200b14d6";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "013fd22248d64d95f73c29b48ab48631850be503fd00f8468b5f0f70e0", "00f6ee7aa43bc2c6fd25b1d8269241cbdd9dbb0dac96dc96231f430705f838717d" );
            {
                // x-coordinate of the public key is small
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "41efa7d3f05a0010675fcb918a45c693da4b348df21a59d6f9cd73e0d831d67a";
                bn_t sig_s = "bbab52596c1a1d9484296cdc92cbf07e665259a13791a8fe8845e2c07cf3fc67";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "b615698c358b35920dd883eca625a6c5f7563970cdfc378f8fe0cee17092144c";
                sig_s = "da0b84cd94a41e049ef477aeac157b2a9bfa6b7ac8de06ed3858c5eede6ddd6d";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key is small
                m = "4d657373616765"_hex;
                sig_r = "87cf8c0eb82d44f69c60a2ff5457d3aaa322e7ec61ae5aecfd678ae1c1932b0e";
                sig_s = "c522c4eea7eafb82914cbf5c1ff76760109f55ddddcf58274d41c9bc4311e06e";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "25afd689acabaed67c1f296de59406f8c550f57146a0b4ec2c97876dffffffff", "00fa46a76e520322dfbc491ec4f0cc197420fc4ea5883d8f6dd53c354bc4f67c35" );
            {
                // x-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "62f48ef71ace27bf5a01834de1f7e3f948b9dce1ca1e911d5e13d3b104471d82";
                bn_t sig_s = "a1570cc0f388768d3ba7df7f212564caa256ff825df997f21f72f5280d53011f";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "f6b0e2f6fe020cf7c0c20137434344ed7add6c4be51861e2d14cbda472a6ffb4";
                sig_s = "9be93722c1a3ad7d4cf91723700cb5486de5479d8c1b38ae4e8e5ba1638e9732";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "db09d8460f05eff23bc7e436b67da563fa4b4edb58ac24ce201fa8a358125057";
                sig_s = "46da116754602940c8999c8d665f786c50f5772c0a3cdbda075e77eabc64df16";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "00d12e6c66b67734c3c84d2601cf5d35dc097e27637f0aca4a4fdb74b6aadd3bb9", "3f5bdff88bd5736df898e699006ed750f11cf07c5866cd7ad70c7121ffffffff" );
            {
                // y-coordinate of the public key has many trailing 1's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "592c41e16517f12fcabd98267674f974b588e9f35d35406c1a7bb2ed1d19b7b8";
                bn_t sig_s = "c19a5f942607c3551484ff0dc97281f0cdc82bc48e2205a0645c0cf3d7f59da0";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "be0d70887d5e40821a61b68047de4ea03debfdf51cdf4d4b195558b959a032b2";
                sig_s = "8266b4d270e24414ecacb14c091a233134b918d37320c6557d60ad0a63544ac4";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // y-coordinate of the public key has many trailing 1's
                m = "4d657373616765"_hex;
                sig_r = "fae92dfcb2ee392d270af3a5739faa26d4f97bfd39ed3cbee4d29e26af3b206a";
                sig_s = "93645c80605595e02c09a0dc4b17ac2a51846a728b3e8d60442ed6449fd3342b";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }

            pubkey = curve.make_point( "6d4a7f60d4774a4f0aa8bbdedb953c7eea7909407e3164755664bc2800000000", "00e659d34e4df38d9e8c9eaadfba36612c769195be86c77aac3f36e78b538680fb" );
            {
                // x-coordinate of the public key has many trailing 0's
                auto m = "4d657373616765"_hex;
                bn_t sig_r = "176a2557566ffa518b11226694eb9802ed2098bfe278e5570fe1d5d7af18a943";
                bn_t sig_s = "ed6e2095f12a03f2eaf6718f430ec5fe2829fd1646ab648701656fd31221b97d";
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "60be20c3dbc162dd34d26780621c104bbe5dace630171b2daef0d826409ee5c2";
                sig_s = "bd8081b27762ab6e8f425956bf604e332fa066a99b59f87e27dc1198b26f5caa";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );

                // x-coordinate of the public key has many trailing 0's
                m = "4d657373616765"_hex;
                sig_r = "edf03cf63f658883289a1a593d1007895b9f236d27c9c1f1313089aaed6b16ae";
                sig_s = "e5b22903f7eb23adc2e01057e39b0408d495f694c83f306f1216c9bf87506074";
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                test_ecdsa_verification( r, pubkey, d, sig_r, sig_s, curve );
            }
        } // End of Google's Wycheproof tests ecdsa_webcrypto_test
    EOSIO_TEST_END // ecdsa_secp256k1_test
}
