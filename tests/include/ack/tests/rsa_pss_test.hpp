// Copyright Â© 2023 ZeroPass <zeropass@pm.me>
// Author: Crt Vavros
#pragma once
#include <eosio/crypto.hpp>
#include <eosio/tester.hpp>

#include <ack/rsa.hpp>
#include <ack/sha.hpp>
#include <ack/utils.hpp>
#include <ack/tests/utils.hpp>

namespace ack::tests {
    EOSIO_TEST_BEGIN(rsa_pss_mgf1_sha1_test)
        // NIST FIPS 186-4 test vectors
        // Generated from: 'SigVerPSS_186-3.rsp'
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.0
        // "SigVer PKCS#1 Ver 1.5" information
        // Combinations selected: Mod Size 1024 with SHA-1; Mod Size 2048 with SHA-1 ; Mod Size 3072 with SHA-1
        {
            // [mod = 1024]
            auto n = "ec996bc93e81094436fd5fc2eef511782eb40fe60cc6f27f24bc8728d686537f1caa82cfcfa5c323604b6918d7cd0318d98395c855c7c7ada6fc447f192283cdc81e7291e232336019d4dac12356b93a349883cd2c0a7d2eae9715f1cc6dd657cea5cb2c46ce6468794b326b33f1bff61a00fa72931345ca6768365e1eb906dd"_hex;
            auto e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3"_hex;
            auto m = "f0b83b8facf6698d564bad334fe494aba3eea42f3cfc378455a989c4317e0f610c160a67527f5d010fe49b3fa6696516c757f3a99b79f0c641c68bb47e3fcb2cb01b22a5042246d5e9573c74c5d9b543e60b9e4dbbf3f36c44e0d410c750da3cc510abd12ca5cc0fceebb75912fc2e38e953cea30432e77e45408b607377e599"_hex;
            auto s = "7973359908f1cb2f7eb31e19f7655e8117261e17c43c8ce5b12bb861b541fea168e077b41cf11a95ef7a80edf5f5903987e59d4b9f115cdb3b6394eb0dcb6f5869be0f896087bec612093965ba020449eca36ea74acffe1eb9f42e4ef03247cccbf99557073ad99a144172669e49296980c9aeb5fc7fa64660a680c320edb20d"_hex;
            auto r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            auto d = eosio::sha1( (const char*)m.data(), m.size() );
            auto l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3"_hex;
            m = "a4ceb81c341237facdf5c8dab1f5fdd725985939df0b623cbb08f714affce42d016ab4b7b78ac7625037a466b1088fc762bc5fd7fadb8afcd89a82b314ff44d5b5472d1a258510dbe28b871c750d86c9a8043640f451001039a3e700b29a1c54272dcc4b64493decebba1902e64f0a665f39867cb3b5ed0044ebd1036f159430"_hex;
            s = "c12ad0a80b116cd65a8c81aadd81f05bde5d6adc60e4deffa3d7c68ed8df5314c98b70979c4ce5f9e1c3f0e52fab15725c4f22dc0c4b182a1d7cd81dc24f54e768dd2518a6cee3952922e653b8feaa32745f92ea01907aa4ff2c5f64ed9bad461e2825eafdc31158fafd38afb39fa10f5f833faca076c8771cabe406be6df648"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3"_hex;
            m = "ada7d6e417da2c55aba768f60df46b73496cc07866c7d2193f4c5c728e94228a4a90df7e33ce7edbabf78c4bc79dee74a633cf1d015ddd92046bb54a5c1f9bc892b76fbf9727dc79a0a7d379336d386082bcdb0df91da90813ed2421711710542d236ff06c70b0f932bd24ca7beeb1fe870dca9175909e4313da903df504e8f7"_hex;
            s = "dd45ac85aa560159b2b9890cd61b8c082bb02b55529afec05e7f3fc1d73e30a09e0a7a422c20c074bd25c1271924a94d7576d99125d9200e0190979dd4238db8bdd286eba5d3e46a48fa2b18e43d7926aca3312eaa93970797c20c7e12a64c47858d1deabe5260620f01ee528d63e073f90f5044ea92804f3c1500cc2b958289"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c35377"_hex;
            m = "68a53131f6499d299801d88d6dc311a138934f1f58a5057efac2e6738decfab97645f20e052db97ea8ab4be35f0ecaad70d4cfdf5ccafe5a1175dd5e61b1e64eb398dab3f9a55984e219b0a5509ef2ad0c2b4aecb9278fad06d119b828dfd31b8865922ab8f9a5c5ac15aed927bdb0297361684f5504e1fd409e4389c9bfeba9"_hex;
            s = "e955264d644003b69f39f955150a7f42b629081b5c13787c7a9e2c988089b5e550ad4bc14e7e71c441ddb69afad39c56f811327e25270443cc0976adc9ff392a9e1dbff48fd9adbf6263be6e78d7b95feffbaa2879ba8b75e67a97aaad39d9211e5610ee369777d3f8ffe373f9d7d2984d209a9399cc1e105ffff0baaadbdd25"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3"_hex;
            m = "a4daf4621676917e28493a585d9baffca3755e77e1f18e3ccfb3dec60ab8ee7e684f5cde8864f2d7ae041d70ce1ea1b1e7878cbf93416848dbfdb5214fde972e5780cb83c439dfc8aa9fa3e2724adbd02bdb36d2213c84d1b12a23fb5bf1baae19772a97ef7cc21bc420b3f570a6c321167745f9b46a489ff8420f9a5679c1c4"_hex;
            s = "319c62984acd52423e59a17d27d4eca7722703b054a71a1ee5f7a218b6f4a274632eaf8ef2a577a7e8a7f654b8deb1ec9b1e529cf93459cc8af4c6df6fffabc3edded0c421604ea2aae35836b05fd9de7abd78540d45fd6d0ea714733a3427b00d9d6404db8ede4a27932b47d88243eefcbffe1e55841823def30c57de7562cf"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3"_hex;
            m = "340eff60922f2d65152cde96f5729fddc554434d9aa32b596f7fc543c86c53d796a9ee585bbdcabb8e52bb134146f84d0100201dfe007a386cba81c428a5a00c9f8f3a79ec33edbe400d1852876d9a2348cbdd89cd5a147885dfc0fba6c479dd1668eba98cba1fd6f306fc3b0f0f0dc9625d847851d87f8283968bd08af266b1"_hex;
            s = "4d744a1aad0c4d76512902eef63753ec58ec3f5e23f91889fd6705bb111db9c688587c320b52e65939c69f2296d9a4c01bc450513486f86a861e706abe25b40a8e3f517ab58e99ffaf6b8c4efbf44ddfa9150349baf5daf0af17cecbbd99d0f5af871ed8b10095b4a0d14d3c8c4ecdf9e52d361d21694dbd9bae7fa395714d9a"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "cef7d8f114854a2a681fe6ef600351b20a9d992010319590ea20f4152565098aed46b75330cac1da85652398402dd9bfa04f4e6c63f3cb6a30ee169b243a5ea0757646a47dc51db6af86adaf9b700044978da876d49863601d0c4ce7629decdb7485df787c68e250fdfae9d77251a315f127a93dfb024c040e274ec658e2c19d"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822d"_hex;
            m = "a4dd2d68a6ccaa4d2218c34c89fa1b8b37ea9a61fa121269d10222d5f3a55b051374a259e3e9d543d737b2a02b38f44827a7bee3a28f3dffc5038a601110cd97a3f0a8d7b780d3036cf5030bc7ca1179f9fc5847e57a5ff4ddd7b8d7ac4327b2dab9078a2b7aeab669b980376398ba4736532e34cbbbbe6fa1e774e0cd26b17d"_hex;
            s = "97a9b907731d605e40d7df6a8c813e3ff319a02074a966782fc2ef7937d0e9710e4473cf0703c23de5a1d238aaf38f6c5882725fa386a92f50c213b25385bd1d6b481708959677f7263bb8766049c3a24022180ac7db049edc37f19c1cf1e613a6d295190fa86b8f52b52e989507ea1368637cf6147de89eb9d840d5a2fc23e4"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822d"_hex;
            m = "6509048df94c808fcd84fcf16aa7e6735f95f111884c72d8905c0af9b59c861ccb1a03f68458561eeeb5ab1c3d296bc3cb3564c25d1a2475a84aa501141c309fbfc37b38c5811533bf18038b8982ac2449e1f25facb9a2ec735d0edf2fa7f80648ecb27a442f847546954e63d5196e3cdf81e410fe91b4e4f97e8cbc8ea6a7f9"_hex;
            s = "7632ab719f25cf1d3baaaaacaa3fd102e519e0e2b6b153aad715a71582a5d36990dbbf807f9a71fe0390ddbff757de055399673a1fc0ca3e1e577ab380061875d5a3a60da90ca74eb437aa73910f128fb014a2b2cd0194e6a40f6a2f2697e2688f899e685f28b43f523d59f55b9050f8b7f11ea5960d9aa03fc5c94321c5a732"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822d"_hex;
            m = "8e1451587d1239440da2089811dad129d567da3b60c8fa51f5bb4544e0f5ec936f165efa3edcb346b7974b67daddb2c73a7ec7da48ba1ef7d4b2a266d11d7fba593c3f60f11032790dca14e5d783eaa02c2d2d52e7ca2a2163dca9ca3b1ccdf0546e3bb41e157e851623ab399034405db35c52cac55ee879a91fa299a55a9ede"_hex;
            s = "9003fc803fabb16ea2318a36e3e00b8a0d91c882b3cf11ac778e445cb5189b920e7689b865f1a323fb28bdeca4effd085de9611021ae95558db37bde3ce4326a1c931a60afdf03c3cb5a43465242f82a6b27352e1fa75af4e7bc1a93e81b2f3fc07a4312174b8888e4fbaafbb204880f3188e3e739223a57bc9583e6f125f597"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822d"_hex;
            m = "6bc3cf22b29b88757a39072df815b59e7a4f01079344a7c8786032cfaa33bf54d5c605c6f82f9205c76357d14e4c6783d61bfcfa0ce0bbd9605739f0ac05bdf716844882371cd2317d93d727cd4512be6d77897922e8c93b95a973b6fb2ff725f5a7a03eb589d16263708e18bf293db90709ae6d1b845a55dffce80ae1d7f647"_hex;
            s = "1a73d7d3cd4dff2de010d2ab176ee64db3adf4b1fd07cf37caf19bd223d6c343e7ef75b14603ad9e0a52b853516cb43f262552d2e25f72c2c3119f0ff5b516dc8dab8417f4aa2a85b812e8600b7cfbdd217db95e9f889cb648e865215289d88813af6c562b48ab0a2a12c18c7ff927d020329cd53635ac5e7c1c7fb6a9139566"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822d"_hex;
            m = "63215755a54b4a68ef26d1cc120c6b5a963cebe706dd6e6c8f409065ca66e076d5c29154a83f72e3a685209c7378793206025575ff1371763ae6aceca48576d64d8f8562bf39c90e8f93a30d310d52ec1039ae75ded218d429feb1f830d0ca3cf4119c4792403930cfd7c3e6f5d0dcd0de685db04e234bcd86100751154ec4f0"_hex;
            s = "3cdefbd51d9d74dcb34cdd5dcb6aa2329c38b72bef3fc30c5559e564fea7df8edde691f7793fb37e4ee8e363884493e21010e67c2b1310297a967dc852f94f1121456c6d83afc935586927cf1b5a1a927a221a05b133dbf775797c112dcece11232566b64e27bbaaddef31ad704f8b12d0e41571671de1e0fdea873a02cae156"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cb82f3"_hex;
            m = "361f28f34dbee24034e03367b6b8d34df3738ca3a86b9ebcb09e639bcb5e2f519f4a7a86fc7c41556404a95dcb95e6149b7f5b5ffbdd026051100f8f056cd00d8930d83596bc5c73b8fedd590c2e07ef48bbda4bfd850762194c9d1eb068e4b1fcbb8928a2e5fc4336b6178402e90086030f509035c9756a113a556f53bc33e4"_hex;
            s = "5b594ac8b973c6fb485d17268619b26c9948ff142284487a2ba1ab3e65d12af9e589f8fc0f583bc1136a2744be1f325f43e0b604a20c229996471ac2ab69860439a57adf60257945f4197e57b7c6711057a695f13d4b44f04d7c2bb87bd492fb0c03006c184628bade5c168fcaaba94fcfbe0911cf7e0b514aa975922e4a93a0"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "ab2781536ef9ff9714f72313939513eb7c4570b7cbb1f8928576f7c9f7fdde20f5ba770c0c5a7e7857c54335e167a78bf06cea5cd2a1bfafdcfd673a7cee4a2fca01b60c3dfd78527bd1b147dd01426b7f1fb6ab34876f922dce3bbfc60d4522b6ccbf080aa72c688c0a4214d44b371008ed235902d3af3373d20ec2f631720b"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215"_hex;
            m = "541b21710c8956949458f4daac99d96f59886119deb5ee78e861c88c092b287767ec8f84b6df5c6963059ec912c727fd4bdee21470706618f37bca93c577bb521237cd692b110f78c43ee22c5f830b080811066543ab9db74306ba135c757aeebbc68228556696491dcc680a7a15ad17f8ec76133eadbedc40ca3f11b56d8bd2"_hex;
            s = "80e1846ad50ec6ac9937be11c1d589041fc970344d5997ac3d9f6ed5735392bd5dc3dc626f5b6e49842d79c9cce21527808d8c3bd30048e1f07567c84eed704a8f201ce840efb08e3c860d15db421ab4998f4acb43280e8445ed25b32b6e62ef7b47270e94cfeff31603e609a99814369d2eefeeb88c5bc5a4a8121ecbf37900"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215"_hex;
            m = "de1bc34f15b473167a95e1d754f43d94e8109d9c9fc341ba64561bac4e9a8ed67f3477384c396a9e9efb3e169722cba779fef240c41bdeef9f168a5379b08354f021f011f2afcf1a227e81e07daa896a3d939149fd78adcd1f48e4796bb4edb5f88936c3503d2bf4cfc7b41c4cb4ff43fc78819d920237bdab9332056acf5261"_hex;
            s = "06e5620bd595f0e1a70aa5d73bafea42eac2a131120919903ad4259d9b2a744d71d22fc2ab36dc1c6cb0d7e9e77335a433b5c4ea285180cd551214022be3d4a145b371f3760c0d0135972b95eb593e283e04c7578d1dd9f38f3f0aed08bcb60f80593aef3b14155ac0eb98d54705f24ba75958215e308949b62f4545e48ed938"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215"_hex;
            m = "810fcfc108d1c958f62f7a243aaa72420befba69dbfb68278682716dd092bf4e0e74830423d3cd34ae1f5a738234ac08573760f3bfc1bd2f5b4089354e9a20c1f213c7d8ca703d0ab85c93f5700c3e0a2d1f6b94a3c892f5342e4e3366136cb495b44146e5f141637baeceb2ed794ed0f66d80516f5610027a1669710147cab0"_hex;
            s = "0c18050560c400fe3bc390fff314aecfc926d45d5dc310d1a80ecdcd237d2e97a2a3283c99bc49baaa147bbb82f0e4834f2da7d9ca29bc36fe43033adc0e56bdd1756664241b16664a52d6383cf545f3ecd25be6d450bf82330c1fc020d4f89945186e5347f657aa8cb364bddad0c33f7d94b652197432108dedaa186338d290"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215"_hex;
            m = "60e8b840316f75535b1171f6ea36c7ea71ba2e1607e7201f90a03b3a3edee73e576139fe389f17d59a019d82144ec036e16731ece43684f9e9e192e42e431c77229cb1166c87d1502f2d52b48cb903e6690c90f271b1a5df5c13568871edbfa74903e733d510ebeca3ff58345c5dd820920f11cfb840cafa729e4fcd10c617f5"_hex;
            s = "500d43a05b3083bf9720d59e24856d8429d95fddf3caea9968d30962e14473b60017ad57f07086bb0f3ded5aaeb2b5034ecd541f64e7bd40bdd25dbfb0b1d46fc69c79a8f833ee3c758033f3a48a5d79ab0fdbedd726491880d5a13e6a545021125a0fd695b0d266f9e527237e119083c4b175abd8391ca0bd26cb84249bf1f0"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215"_hex;
            m = "de225e04afc5701bc2c40ac3a9b972fcf04db86353a08db32dec588c346587736463231b39c2a8e22189139f31cb3c9b17cb66dd506315ab9ba7204dadc506142630859bc4fd694dd68da327f46c9abfee79c68602477a4a52c401ff9518edbe0cd0ac0eb73c5c63ca15e0e45b6334715d9efde5d11465983b8a25295326e37a"_hex;
            s = "0a2d99a4416e30969e2e6c5cf94603dc1f94936974753ef5513df8e5dc6ae6768ff5b2ba3231e51b45da4dd90233fd136d59e56a2a96c886b1edafbae485c9b6084c88fd09d691c2ebb157f4f71b2f3cbf9290123acf50e4d697bba9b0022f618627a2646ead3b93067ccba82a4b43f8755a5393e5433a00398df0837d5457ae"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbb2f9"_hex;
            m = "d4fac2af4fa7a3934afc123e9f3dd0be328c0cd6ca67d6a31f72d67f34773e26e6abfd18c533363e24e6f0cf6c550f75b60883ac980bbf6b3eaa6c07bd785f54a596c90dd531ae76944d993fddc18dacf9833ef3542681e689a102d1bf5235a638438f5727abf584c2b87556998b34ab2685a773a5c1065926e1fea7e00ea763"_hex;
            s = "5782dbf7e801d74532c088c294b69811a6e37e1d2969fadb7b7b18073bcd59172a1a2b4d19eea6c2abbeaddaa80d88a4b21be6abebd040151bd0f258c11ee06bd81db342170f7b68f0716cd1eeedcaee764fff9023d1fa6a8371946b789673c7debbfe9ce63fde4f233f476e80ecbf95920ef19bb22bdb006e4fc9bdb556aede"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })


            // [mod = 2048]
            n = "c4b9ea11f21cd93c01f56c4219db7d2e52581a6c968705c06588c036b6f51a27de43ba0006d6e54d9ee20dd8bc1c4787b4c45e9545cf98c7872100f6c3492f5c3f1ce2d28caf10fa611cc4a4ec94543fbb872ef0fc8bb9558360960e4e386874d3beef4e9662e8779304e8d09bfc290a6fc19e9908e8eb49336ef02224107bd74de231f2610d76fa834baad342e87f5ffbd56ee8b459702425109af864401b713cd9e96a01137a860c3079e13704d3328003136631062b198be8d644ed99a0c62f94cf7971a0f2875592f35e362abcf2845a11ee98e5f01a515abd0d03646da28123b45cea4cbfd7de9bc399fd9f05349a2d0386516f70f5c9a9970d3231ff73"_hex;
            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000645c29"_hex;
            m = "6c0e15a99f9948d41980d7a37a327eb280c70a6b7b9f6bce01460b6ee29b5ebc5e32bb8896f66ac54113fe8da013e465b4463dc1ae68e9cba77ee4609101d65b6e3ee517c0fdce2f40613488d20f3892b99249ca07ff3d8458d4a1e7c0264e3902fc3d5d03f69d997e32229df86f9fc1f773d78f6fab91817d12ea0b5753efdc"_hex;
            s = "573cbed450f945f56497273fc3c1731d6198067ffa30047e38d1e6afe0aa643ae051b6a19ed64ec81a7621045492cfe8ad18c98e58b6238bc77c24186290dd990926a9fa6ce06eb0891db942c07b44fd00457cf277b12dafd0d636766456254b02087d0e05253f1fec4cdcfd65885340b6c6ee46bea267aab3895cca4ac8dddf15ce1157603f272551c47d792709e94a894b236bebda73af22d840c34d59e5ebfac5ab3f52cfa43398dc14113f45f5ea5c1f1539dbb7cf70bd632931fac73c26bd28b9301338a22aec43b8f7564736543af56198f962fc30369b50caef1eda10806fa70dae5c072f7f4ed1fc21e89d7986aeda084b5c4b8e51a2d9275ecb38b1"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ed67"_hex;
            m = "064206831cd415425cdaeb49ee727dc90e74917f55a723883a340877d85ad1a5f264f2c834d824c7bbf207cdd8500c9d11ef922569564f55e211f2313f6106250e321a99e64d1fc6eecf11c89edadaf4ca8a736bdc2b4cef61a9eef6c747dffd6494c51fbb9ccfe6fb5b5161c977ae773f2e7b7a358ce100bfe243eef67521d5"_hex;
            s = "385b551fca5e32d9e3ddb5dca31464b14cc4303688c173a43e13a8f036a9c9184d5573122398ccfc5f5eef01c3a0b29d25aca8e388f6cb84720bd6bdf32da681d431b6de9feadb4631ae7fb1e2aec9a30b99f82e620246357c4588b0b975c0a3f6797b71dfa741dd0150f9b614685accbb7609a5c511be4d522631c3f9c84e308c6e7034fdfd78da43eac1d45983c653eb57677d71309588cd18b6223024c2289c8ff5bc62cc7143de19c446e56c0e95245e84899972832beeaea36e5010e9bd7df8ca0bf464bdfea13ac4ea1e57ffe8f7f65a5e66bdccba127f08fbb808d4b9a7288b7f3f2a42233de496833cec587f360e135a7051a0a9fd24d9bbdf0fa10c"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000593d67"_hex;
            m = "624ef431a1c81e279c7f3e37609ee57c27c44333ceaa3e7a8905c658d6ae62feaf000f4c04814b9768c56daa0b90370ae83bae7f3f5929cf469aa9cd1cef6892feeeb50bbd79feb46f9a2fa265b23bc75ed3f772fa6a2f157221f44b85033319b6e18c74b4f560041ac62c28584b163af153c614e82577d374634edbfb34ea1b"_hex;
            s = "3162cc1bb742edb6bb18211dc80a5fb1ab196487117080580c2f28059c64fb5aeddf40d98b2cf95024f8dd9c1698f06572f7f1682b67868749d33bcb678a3dffb9e4bde290d256c7090212844ff279906291002bff161b30e256b7e57a65f5c89273956a0a92e1482a90dc8fb2707cb3b64497c6ed40bf89c5b73de759a8a40e2f95943aaf6ba80946704f9171eec6d68c11f4158bc29141bc1b31d8ccfc62e9f4221dcc4451fb4c1619765aa230cb3c487bc9a055f61360e9c42e938f16e38fa4257443b0939c7d5506c4652c750f22788f6db34b0df54c8bb1ed75650f7434779041abe1b70c403933beefb3d22892849e00206d01ed74fe1376128a41e19e"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ed67"_hex;
            m = "7a884d5e7edc74c10c44418e47ec7d7dd66db0012dfc8a200ee181824f2cbcc8dda3301f01fe0914e2574baa4cdcb9a9afc7f63a6b90eab14a6067aa4eca0c57aeb66a181b9d664c47fcde68a80290467a8c37bf0354f67b1a65fa08ead35c2af4a8447253215412441b44f0e5c8c9f93da6bcb87db2782785d984c5aaaf72e8"_hex;
            s = "8103b5648993736624556e994e052f6fb9b7dad36bbb845bf788a31c325f02c6f13971900c08948f448438472230ea69a6002f52417b53e1d32954d96dd35443ccd459b98d4c211c2277b54b36310cbff6da97298cd6ef261a7b4f7027ee11b97081cc710a7a3bc65714e1c69cb37bc844023691ec9f704d57357eebec21a27f6e624f46d35d88a64cfded5c5fbce3e97e71bad21f8d09f07de8afcb73e5d165999ce7fabc8fba8100fc7efa85acd447afb593b97b8e86ad24c1b93e2266d9cd433331c6c9395e1a7a4431ec46d57d53a37afbc985db7e4ee32d34da6da2727b930fe6ce8d7429bc04ba4877760d73fd1ee9c8e22478737c73405136a4e3d5d2"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            ed67"_hex;
            m = "6305a7c4512d7d903eae65dc8e629c81060da681eaef9240659a7ff12a025f4e5cd3fb8cac07388ec1b79859dc3103c8bc4cc880bff8df274b1971d16c9699bbbeac6d3c8e8938f83c160a57e31473363c6a8bdcc0bd352f0d42a5278bd020844f3a03bc40db07387872c3bfed3173335010f77b35671fc075bc25dcd0d97b0f"_hex;
            s = "40e1afa3895d938a9738791578a343c96095db0e72025dc2f80fc94a64143425abd96b9a3b5d039a5645c2fc6e70bef64a3deafd9eb6dec041c49e04f86d038a61719364d4f3599f13a8ba047c2f88a9638c75176ec15b26b3b37530441a120e8431ceca4c63c592789a1db9bab49959d593b273823bbab46b5178a8d1a79e7f93c03bb0468d5f64e5a0f5c607f38d4106022e4eeddb34ed457dca40a4f25fd9cb68d497b42d961091e4a06e6ad70a2b76caa8e267d54f8ea9aee85d4f8fa510b5ea8ac9b458eb0556566e8a71145a733897e0098dcb540dc4247a0f5f8b1e9735a636a4561e96141e33d3beb629eb90613c0d23f8330d3ceefb11e19518d219"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ed67"_hex;
            m = "1c9c81544661aab0ec7f6296572cd608cca51f55b4c47c48fad5df9fb5a6acbe07ddbda5448ea920570d463d62016c03a5bafc61a1c521657dbdd6afa863a924c0f1bee7b3ac168524b9116f103132aeb17823d2a2caf92b4516b83c62101a6d10828c00d9e27a46192acc13a7e4b16fb7849b8efffb8b0319898e3029d38701"_hex;
            s = "7a5da603b9e8af2fe8787abf9496c27324fe31e2967cc6451898587da67c337cf03cea8a528465649f76da77ed4b23b956be317ae3929aeb0664ad06a6bd83a9228c7a31f14fe54b879b8019e4622af59d31c7e4924ebe0d6260ff83013f2f684dd34671cdbbb9b9937f5d8cbc13d222e3809a757d4168d7210039fc4edde9fb23e27363848664ba10a750a7c3f3e06559303762acff5c1524b369f5fc8b0768c4c465a88720cdbba36ab49cbd6a95d4cf15c45084a84d7f88ab61d1546cbe1d56ffb29e9ef80115f67c8a962a31c6d4ca742ace4b53667ff9bf44f7a1da87648153e26080560bfe82204bdee00a7db0b14be0c00eb29a4e9311f620cb81e314"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "cd2cbe024059e2c019529e157684eb1e2cf415a71b002cc643668da85f752ef64cd8cacff6bb79e246f7b8f731c9f5cedc2a879302b51273c83f81f9a377d3e450bb4f4662ce01a010a6e68b66fee35b62d9861cabe56f6d262cadbeb44a58145a0f977966ab74f662674fd92f165eab397e1a2829aa2a7b9cf7c4af5db31119741d416308f3cb5aaebbcb5309e50820e7e1482b9b3a918653d9cfda6ed1122488f435dd54a418e922147be2f6586bb9b759c66b01d0045757302ca3835a68a67f36b33738ba9f8c87b909fe1ca5e5bad207cd0273ccc3b44a6185d32b065b64e2bd42b6c61f08b268b2b7e91ced5962e3a7d553fde91b77eecbeb9ba63e0db5"_hex;
            ef8d03"_hex;
            m = "db14289f5550b770ac30ad0aa53124753741e4a49c7f1f54a8435f375a5ebc52b1a352a3c0a6f20805c3185cf7621de3de7aaee8e7547da478923662c16fb5e1944876fa765c4d82f6d057723df63045e7ce66a211cd2e3bb3de56f531a77b492c0d7cea9efa2ea8265d5294a073c465f946f51a41739ae1022fa638d18c7652"_hex;
            s = "aa194ead943a93e90f29a3e853f0a4d44b4dce8b55d7fdb1de01d2d47bcb18b6e6e81996c5bbb94c66cb276cf3f3b35494cdc229278ce444a001f61669b57a59755b88142e50337a8653e2a413a7aa1602d6dbd56d989c2195ffe82e91fe0b081ac9157a0cec6bfaf770c10c971a76d11940c889eb9e959f14f41d0b765babc655480b3f32d4ce3d660a134a2b34bfae2f40968ce313db34e0138bee57c01652a90f91fbf6f0052db494c514df087d76acc769a3e220c394763468194bdcc7262103a8a73ab621b0562d2d164c8ee1a00f0cc4f784042c144e3d36b8c300c74a1b368f569057da0f77b33daed667c1154119f68672000d25517046947a8fe644"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ef8d03"_hex;
            m = "4f9a34e96e649f8928a7c58a0c84d1bbbee1a4c84a69c95db7d4ab8ee06905777fc19b1f8bcd28a3c41b97908c547590f80aa74927b05882d2ea36872508decfcdcc94dd53743864a8f475ae01843c3ee45a71b583b9e4f24a2a827db40acd26624489e96e60b815fdbdc9ae131a0d0fac5b6ad3088a53f6461df7383477b9c2"_hex;
            s = "890bce2539c7bc657983af81cff87ec799771438f6dcf417e01ee056270a0ddf6095fcb94bac89626101a34209c1bbe3d3bd301b3e8a7303cb7d5fe193b0d6422e1feb6eb1ea8f1f37b29089b54633fcabf23a28c9ca422de4f7851f292ddfda0d550673961b72cf2dad77b3b66c9f3bbab643e80c569a6f651be3c6496caf72478cd437fc85a57a1cdc78d8029b76a804d04013f16cd6b469c69e29d07409aca30c719c8659454fbd9da60a9f62165247db74d18799eba33508667d1b645268ba39d74d7d954bb41d607fb7820960687b022320e6c9a3853c2fae535bddd915347405f525c8ab40edbc9b7fc6c62d2373c0cc7edfcc4c956615cc08d49a4273"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            efba25"_hex;
            m = "0709dcc9ffda89add8fc52fa355e059f570a0ca433f02c10c8e5730bafeb6b40f4b39485246011bea78ea2fe5093d2f033047276b77c458fec98fd7e1e466629aa40e2bf10d3159d4ae5e1735c3695a22de661e995380e41b795eb0591d40b56d1b8adbeeabafc136809f99f80d0b57decb7c346f6acedeed2e326e8301bc091"_hex;
            s = "15b86cc61cca52c9dddf9d8ec4efb7dbb8a7f02a4012d896fc127cb1fc383c304c8859cdb07478719d3554e65b306166924d11c1a14d85699ae60a33f601f7a24b4e518c406de3cbf92bde58926d9d93b21c76e1dbff98d5677562769e6514efa4bbc40e12d191f54a33dc1c9361eb1ff03613555e873fcf40fe6349e10d188d0d1d043078e02ff8f1c736cd7090961fde243c15694c0d76b0cd1e6633538c265f21b41cd11708613b62b11808d1f74d927c351a63c8c4f18f5930f39fca55850a787301b2e4eab0f94f5734cba5e0eb76bce60d673fad4c513012b4e57a8b2c2837e0b6355a9a5c15774b0db8636a7b8ab28c36c05832a42ce697ec58447ab7"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ef8d03"_hex;
            m = "95529308ed9bec98a8719b3fdd942ae81c6646210efc7dcc59754617c48a42af9c67c13156b988e27509d29faf4894174bab0537cdb95ee6d5a2def345d2124ba2c65370bd1e902692f44e70706decba5a8d2c58ae50ef2f04f640b2599e94116d1650ac69f28ccec5db1798692abb3b12b6c26bf8e9b810ae1a733e49165167"_hex;
            s = "93c5b49a3055f234442d6e4562c99d2233a8198291adc95e65bb76d320203a1a4d7921393cfa03aeaa9c31e6272b5192e3058e54dc5cdc7f467af1b073e6d492f614448368a0cb0338f8e37088e080eb2f6684a1f5cdc24ed7b4e8c62ce9e62e06361c21ad07fb78d853d16b6ecb84c6a158bf6c24bc484d6aa5abd48fb7eb2264faa361caeaeec78a2cdfcdc6011487dcf3682c5e07f0640d1d88e09baf838a5671719032aa1772fd0ec75d61047477015548aa7896e60a297a27a627976050fa6c7978e582b3be3afd708bfcde276b2b3f9c188f4b36d3eca90707fef76c367483aea08b6dda88d1b85bef098d191b1a687d322edcb1fb5cd860749f69d8eb"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ef8d03"_hex;
            m = "d42084ee99cec1a57097b804c48e454b6390dbf2796f18eabf509d26f0521c5a7d71b20381a978a7f75e555e2bfb16916edac0020e64240c8579b52df11297c1c424f810bdc8a38b179ad253005e44fb4cea908f6b40b9d598fa02d254eb04901303fd1f35736bda3712daeb2bfffa126588f4a2784bfecc619b2e1f01268b50"_hex;
            s = "493d0c02c087149d5f597e97709c55f6aa70defbbb862055b31dfef2cd3fb1debe9fa9dea81d7986ec7e5073092c93afd19ea34a268f9e3c4fc8114c4215c8092d60eedf26620e2a79c70de5caf85a7a256d4903e4f224b602758cddb457357b14136b5b3d7583d0d6c9e426161852df57ef547b286797e1f2f7f6666f6d333d46ec59a7bd17adc444b66369f4be27400c4142cd53eef28b6d9fecacea6b2f2d5741a68d89d8de8e56cbfce25d228b6861c641250a264c182b61025b5840aebb92e694d4e5c14f009ebe856d274872390212a1f672f74d2462678f5a416de1cafc3df240d667397870f2da461bdc4c7f2aa10cec20e207de1fbbb9b52429518c"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ef8d03"_hex;
            m = "978a26632c48c15a2cd0c7aa5b3122630eb304c228037a6b489144f34137e4a1cb1bf57678d6be6ae9d607f941002bdeda9a6f1f376992493a16a6fd97d71eab894b279ec4a53c39aa0cf480c1421fda65841214bab23faae5b009427c0cd67a3ae165e3f8fb624dd83b3746c43d26dd173994ac9927a815b12715cbd61f3494"_hex;
            s = "3075ce37cae7c511a64b3bc91e2146dd2fef25f4955f36848a18a93a0fe5a16a2d1d6d793c832198ca457dc53ea65757775437efa9b7a05cb1f5cab3c800474639a333d22930aad70a3435d2446a4e3cc38d61167004b8b1426a2810e698153dbc4847e45aa98425746ab43a24f919ee841842893dceacd96f705aeda8f8591f27f0108ab4e36a570054a0498ce2c2ade3d457733890e280c236a4931fa8fb708cf2c8ab202b0ef09e35ad425073d2c0ba6970c5c45912d0c2b12011a9d9fb131a4d7c35d17bf7fbb232f4fe69cef8779a2031aa428ce4e2a93479e318573fba4326719dc8ac3a86412d4cd8ee4fa58282d4f6acc3581198eb7284da3f5bfb92"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "e3db9f81f57c99898c867221eb20449ed8b05c1c7d6d0388cd5bc691b84cbf9301b52b60f34be1ea5be12b87cc185d92451037ac2b2f79d1bc43d0736108b1eac5f5a52b4037825385df38966d15562cebd09d27c8fdd3c9bb09c0b3d77b0c05a1fc40b1d9d26bcc8ad35b321ad5866f500bb9196237a4f4f2f282f9091fe99e39c37b862dfc8a22ec487d6e36be1ef8276629b60d845d92524e97d6d52689924ff354a594ccafe9087f5ec6a988c2dae41d2a400d2c8c039e3d77ce5450ccd826468fcfe65718d292e7765f0185df94d5fa79c1e99a8b4f823b19475c6004c62c0f7db056fbe167df368ab8019d58b89d7d3790d427844684b147f962ae37ff"_hex;
            ee29d"_hex;
            m = "70b6c465d2899b32b736c17af293c562a096d03c5dbe7e08b8aeec3be41c13c0b0e9543db8915397ddc609b8f4581590bb585359117db02066c63d81706182b21fcc14c3d43a6a23ce38ec67e4904d477a6e1be9aec19463d2e4bc7b1f7eacb0a7a72d7f8c4c85df70d4910e2c03148fc51f4f749c52d2d9e45091b159393ac5"_hex;
            s = "a231e220538d59cdaf54f6eae7c96f83a3d95b55be54989c1a20ce18f7ffa760ba26879120a2e617b560bd083662d9e95636f1a639f7db31f4dd74ddd891ee6365d5ead006a746a90457cbd4a1b7e9c5df710c81454f68bfe8421cf4468facd85413fc3db970a7a0682ff1377e942c5e5ed4b6b31de3f63a05a8a26f365a355f021380684179aa99996de99e7cc22a5a370c3fff56647f33d1bd1b2948cac297bd622289c1797f2de3be4598593ca4748eb8f74d0b7199a763eb1801d60d09f28bad1ca1b6a3244a7bbf9a1270eceaed2324f604134f404b6caf3c969daabef4e294fcf1603e0813fe20b88aa36b534ad6e79d1967ab2ff4e70b672c642fce46"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002db7c7"_hex;
            m = "47091ec16155b1e4aaac582b5f255e06483ed8844621dcb92c26ee62cf98bbcc61bc0af1fa0fefe478d0417089be4ffc0623cfb2831117e124ec909fb22867b2ed5485b12458c26604fb5577aea88f450c71ca1564549c6e2dbd50c1224d965096da794807b79230f5357b87f46987a90130b0f31271d127f1a21612498eb06c"_hex;
            s = "b31a3134c6ff700b8c9390f1ede010a1404d0f297ff5d322dbc3e3e9be541f1aa4667aab8eb59138bdcd1d4e064e9a284c503db86bde9d270d417d3c98d1bfe67cbbbbf7af4021879e02609573070f6c5d5930e65d871d72197e57acc9fb69d09b9d41324959c291cf49c581f49681c3ce6e3d22f0c27aa5b1ca3979c930587280415ac38ca66ba295ab5b8b78b4cdf719c81c8b762935be3845124a5506815adf7d289ad030962a4b16cd53376888a266e35deb0012612731b8c284cff2e71c8d09b2c7b2294881d4b7df459608778dd31af8eb74dd587c687c1a3548c0aaa003867db053add678f6c1500f9f9a5132c410f77219b1cfb7302365eb6fc194e3"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            edb7c7"_hex;
            m = "36af136c05bbc41ee57e94a1be10cc6e33555225797e1c2d6ad3ea9bd5b0355619ce6278f2c43cf792cea184f4cc7bb36d8ef35d844ee143037e86f34ec57df0f444ef0d841d071aa236a5c2593a57b4b3e185018772ebc593864c0aca0e65e9ef9721f263cd0bcf3c3e0823966146b82ed770da2df024fe4171a6a8f295d68b"_hex;
            s = "7f3715dba789c233996dabefac36c3d860c9dbe64e58f940d5d3eaafc668cf9761e2341d9bf28a3c3ad67071fa2d875a440df5faa250a89cd9c9eaa5cbde311589d4a443c4148909d6cf69ca0b150d7ce46e7e50128b942d896f9fd536e311e569415b40e405c3d36c89464006305842f9e9ac24bc9a543ebc693cdc99dc1ea4d88b3387ac8ec899a8b7471259bf1d62fb1f15e6fb29a08b30696c4d07e27517bca5bfd22c3b1c7c37d0b5b24b4a796ef4d6589f9b8a0a481db4fc66b44adba4d83bf1cff377ead44109476d71f34a8ac63303b3bfeea171aadac84c0ccd59addb5aa923213422d58d914b65a1705fb884e56ef51472aed15050bee268720c55"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            edb7c7"_hex;
            m = "f5353bc971efc542fe9df930db581a158f541d68c465153b58c2ef1bb20a5f3852841ac6acab46a237ea2e39c1a43ba60577201a7fc254817f64c5627dc7cb07ac1e5adfd1ea7d2056c3ffb09a556b468ca938cd78a63d0921d76b7c0f6eba8b2a8964dd88b5520484b0d35f1074943e4c70cd485719b81a64a147311106160a"_hex;
            s = "5f9603f7e564519597548787a74e66635267d3cbf5c26dd9df7ac1069a712bae0c1ddc1523d1751610ae85b1f59192674a46bd727bbf0af902f204c7eba4c6fdae5f84c0d16ed0b8c000517b446473fbdc07c74af0ac6a66ac648c1397c42bb9a74db27dc5605c62e40e5eee1c9021eaa30a76523a35e6ecf513379c0e6e2dd2fa38611e91007f82a3b37d84a6fbaf936286f195e8064e172e8bbbc22d4c15548d0e39b1eff14d1b0ba75c4e1d0acd16fb8566742091ddeb637aa2767e5bd859f145c135cd60257a8c84ef587dafca0d97425a1016d6dc8c3f7eaaaf8d74fe42fbb64958bd00adf03db43920d9831ac49dec2cf534d3cce2dcae9a102a608c5f"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            edb7c7"_hex;
            m = "36724717ec13584b5ae5c9816118a0f5596e1d37a88af088936baa875434720d6c2ef9553a0fb060cd7d3897f7ce19b3a212b8da6753830a5d1b6fbb2f37a4c072bb766f35469801d9878c3c23005e4f8f0a92fde71a5bfd15420ea136fbd5b7ef21a8ad043f79f8260dafb50d37d691c76095e75067e02962e96e818e076eb8"_hex;
            s = "748b86aa568fd9db1c804ff3921350353a4e68f32a06066bbbb3933e630fb57db6ae097d26e167e9e7a7e594d30e5cf183347b691bb991e6249ea9f3b6b3ee9830b57e208b4f69b861febe5bf2a56c0f886ca715fc790e0112348436af22f56aaed69b9854ac1b4cdfb84fbe29a3faa7df9570e71950fff8d9c6d5138cb4ae7c6aa58e616a858ebc367a3b2fa813a95956bdf75d4db0d1ca3704fcd49a234fb6f0e9c5d17e220905c860da62eeecdfdd9beeccb3a43e86f5afd98e3003d523cd491897d3629c39ccd15f154554c369e6f03bd0afb92e5612d87418ef1844e812b12f718cedace11d61871f6337f6063aa41f542cd3b9fff2ddd8c42a9c9be792"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            edb7c7"_hex;
            m = "1bb027c0e5d654997de7dc160b71e063582c0819ec8ec76d779ae1a86ff92bd7fb4b92c310bf5f23d9e1ba115db46cbb5c01e95b79ee8d699fd2260e9d48b3dd13836bbe92e1012affc2279e389a5149fa45bb08039bad957345fefc78cfd74e2afdb998b463c116b5302ba5e64b1677fca1860ad0bdaf5bbd99715749b31f92"_hex;
            s = "9d406f9da2fd0e203c0943427dfe1074258b288266dd3d85b1ac5f104d50f303f3442cad82b9de40188e972a0895d91db3d5a8b9588da7f63bfa99d79f98a03a3bab502a7c269a9b85d9d57cff86908e7d04f5ac2757e6492cdb3f76ea9e5fd8c9b38bf0828ace69ec8ebc796f0cb9df24714a1603fccc04195512194705ce2144f636ef56600df40d6f472570ccdd57bbe0b550c1378202185c871d03fe22dc0b265910f63cb89bc34b4d71eb4379ff32c6e8aec0079315b896cf015eff9799fcd285cafc50d15b8b35b0216c535df9b5b39067273037444fb4ce65967ade4df30d3aedcdee30a7497013055bf63b6271d30b10566d2a767f3574f9c2446ecf"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })


            // [mod = 3072]
            n = "fa15594057e21dfd0b41c921627809dd454b519cc1c4ea39883814f9cdeff4a184d10f641a5ced9a80de1623ee7f86567d953256f48dd68ccb2e8362173aeaab3f11182425924334f9b92092c0fdf1e3b4c17b5efbc0269a7d839683470112c425c4d77b8835e6a307d0189223894d74d809ddba7260fa22cf3eae11e58cb94bf61cff8faae7cf17643cacd709725814ec9c365366b3a721161d8c2092681520a23e888dc0fecdcbe61f0cf27f3ae99ebab6a459331cfb3626fcd34eb124adf5ad5cf6ab5af05e0956391cc6debbbd0d6270b8412f330d469c41b26bc0f261b9aaaf4178b55b21af6ba12dcec1b9c58e9eaf9747e37cf50878110aec5630fe3dd77217c35e55c48896207a8586354d058dd7028a386e474b7c736283c45662c4810f56c6d0ec8586397d499d59c0e0a8d640c25bb91f3fd2cc74801f2526f78ae49f42b279a1687b9a8e965b49fe10a2360852000f440117b84dd8cbb793c27f124ff88535a25ecf925d464efae566f81c8f43d23b646296c087fb56589ecebd"_hex;
            ea673f"_hex;
            m = "348d8253c3fd1e0175f263081c025ed1d2f48d7498d39f733d417ca7820e857a7b091d573816685fa581525eaf92d4fda8627339edec0913c667c7898dd47bc613d30f963fba521cf8e8fcc74557ec82b371b32bf8255647d53950f441e2d71ec39260f6201165a036cf662c28792ec8bbca573400a41076345f1ecee46121ec"_hex;
            s = "7247182f6a34684402028eb1f0ff8ad0f16343265ee6c6f7cc8b18f2ef9d30e778c9ae49bdaaee7fa1d4dc17ea4a1a11a63d29ef17035fa41215fda41d36edc7a0a672649c3b05ca07d09644503abf99df6c7c31f516369044322029c7ba5d7220be8fe46a0a03068b7a8f1a145d0aa0aaccc4405fabadef36354ee749f59c26a0f7e0bcafeca1ecc272c2c83738b63f8ba2c6d1553b1b326de49dfeaab0f50c344ba311c5842f093ef8b906fd5e163180484e9517c363217e9057a933f5c21029c00bb1a93698e417d33b19583d3dc4774f381e434e4a2c35dbd3f3829f4da9c0d18a702f54d73f201dfae3c298007ee87bd2d017b8aa9411c2081ec04ba3bde24cde89cf743fa7f627c7420e4a212662bb160fa5cbc93b7b7585c53a4d93dd18124851b95bf00db240a0850a89bb1d291944947c0d8206d6c509b7b27d8f38a339eccd3641b291dd569bbd3bed6cc18f57890113ca5f3aea7af7b35880fdc0e157f941946e742ab61b5a9de3e18a5575680a869fdee02bec97a726d99d0703"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea673f"_hex;
            m = "07dd79fa6d610e1c9f3c64a2b92d1254b066531136df0ac3ddf003927e1f7c58dc37e455859ae225f9d799ee0e7f2bde93357bd53405385e9df717e4e3e35f231f86abdc5cd6ebcdb393ade0b41f9ba3088f44f855021f0e6231cc8f7c489e1b18f557f6b9be32fd149727df72b46a89579c35e2617fc7b972c9adfb12f7402a"_hex;
            s = "bafbff970e29b56aded354a1403ca86d9dca586afe5f7e268dd12a1915803714b37b5b329fb262df320b7e4ff2a078947eb7e114408bc432b41c899f9f7aa45927763c969b819321cb6a048520a3ce64d66e63c81ef4a48ed269f4108d392a1429877252a589ca0fb22f70088a23d01ef81a65e0dad9e7ae9dfa09c42e2843e7551aaac914e1fd436b811a28b78803f1ba34c7ea254d1d37a33217413a0890856297f81a6172bd6f147f3c6ad818324e5d6e36370c2a52301180b8a3a8b7141119ca6e8b5bd71a77d11c513de82ae3e4186757cfed3ddf17b345e6af808e3b0a6338782c253185c51ed855fb9a03c1c1895ba444fcb691e6578a54fb927b20564e328f175bf593663e38ea5b92ec8f856dca9c42c3ed11e93fae960dc2b0384007292ac2385d12ea05dea3c2a60d5fe3e6de6e8886b1b1258c35be13ff1ddd7e3734923d05eb93bd9035c8b936df2b8c3688a045829d4203bcd178fe1cc9a5724368b9148841f173805b88e505cb5d516946bbb17385607e14347dc5fd98d172"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a673f"_hex;
            m = "b61eabe9eb62740c500b32e9b049a0652b4a87317e68289f85a1dab5fe47f4818ff8edab0bd1c251f1df980e35d6a35c4306461d428a7c7495c376d9a805866de98f3b8a14c1ce9fb489bc3be71fb56761f2b539b3e271a6cdaff498c2b18a40cccaddae909a5e9fa3f1e6964c8a9d2e8cf61cae5bd6cede354d9c19d5b5c9a4"_hex;
            s = "09b573ed2be213b3e1ad49ab1fcebc2be8cbd30556a3c9ac4eafdffacee20b7c5b19fe84c66cdf57c0ff081643484d5e5ec904de4ed87d7cbdd8e9897ffcade1b0a260f7cec47212e1dd29cbda97c195d0f47ad0e7f8e836c9f870f2e77d8648f517bfe15f1885084a28ae1bb2ac7377274d2be8748b28fff31140887a317ba4983e0b3c94d4c0360e658161c011f18751ca061be384bf09d3f6b8da459d432081fdb22db78483e69df8f37813faaf31a9c766e16fcb8f4a77d18f8a1ee8de88180b9f15d0894ff2a8b2a5f6f9438c605e181fb5807f9dc635dbb34aa5380feb004e16f49b3b9abf5e9e241d66c5e4dd2dcd4c67ff3340e4b1dcf20e070c18bc9f4972b7cc7f8543564fde3b3598ae177e7a97e3371aeff0df98b1852330befe8ef5473f8e5210360922a5431a2914448e2c7db973d6289515eb3c6053a77aa3276c71f8e2692bb2ff86f48fee9db1960203fbbd7259eec3230ba46d4e3caf2c1178fb4f62e516d86af4e92036f7d08a8e512d933221d0fbf520bb904c7c5b64"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a673f"_hex;
            m = "e594d640dc2fb4d4d9523ea171c95dfc7aa2348ccce403a1487e4bc7197e339c3a832ade3875cec83a730c9f3e0d8988a5b4419cf26e6f3ecfcfacac51245ad57cf1436b0a9e7e38686d93b502afded9c038392fd010d52ba76b69be42db8f28b2c56a0ed7128dcc6c26180c43162498d215626cef30fe10d83cca24760c983c"_hex;
            s = "8565680f9957f0dcb540c1cb61bb07f58bcdef54265047d60e438e01f4bd2b589cc067a40515949808b31e9c22042bbfd369610a45850d15d52670666377dcac674a959f1ab50c5f980d8886c062f553450768041af741e3ff8a151dcc37ede167d69fbda25cd17ee649b72e5a0812dc696cb1ec996b0ea9d1cd59680fa9560c3e80851544d8b970e0f638e162e2385f7f4acd701d528e62842611c1ba68d0b5c4ff273976d36787c837d65f355c186417b6c15934ab6e8f9e7d030add664c191ef81852d85bdf1552c267e40cdc2dd6136851024babdb701428a8ce79aeab9d4332a1e1699731f9d43799b5365536bad860eb5b756f2aed6fe6aad16cf4270f76eb631e1b1dd6bc100111a909da6700ce7f917385bba5d9974987728d6bdede768876e241d2bf23de0f3028d52848f15abe06a93dd616ba95724347043a300c09902bca9fdede9a7d29f25afbc9b0e9077b508164792713278eee448000629b1158d2cc65c6ff06ea9a2e95c2874e2c7e2bf872f319c2627e538f9f7434f6ce"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea673f"_hex;
            m = "744a128d95416147b635c3ad244f885c5440759bc98dc446382a6d0ceb4ba4db6377a39741dea91267ec43395a1eca8bea152dd016e9f0072abf75a02a9e7beb737ee4d1a0a2bbc2ab2875ee54df77b8c758d96779406a1f53ecf4111236c1eeee885da179369e3dcb11e234dc3998cb313202cabb3a3878fcda71c66bbc7ecb"_hex;
            s = "2874dcd9997e8f60ed51f9c47246cf5d919cc2368ab2b5d6078ff80c78e36dbc9722c94c0788858cd5e46150c9734df75fc9da2ab6bfdb1c6cd7ea6a181489e5a7c4b499733e9663784e1c87cb79f90d830eccec4824f4f2565d885d31fe0897173ee3ae61d19488375ac3917652ae66fe56e683be86d7a8445e62ab134f3cb1cffc931fc04689fa317fab58c150a94a555e023088d410b316c4e79c1c57f90ab86199c26555b34d44397e11e9f9161984317ef5d5c489b501a1885ecd25a994583c263b2f2c415b7ba7faf237bf58471dbfadbdf09bcb0de1d095b5aeb3f20af46113bbf9638c138a2ba78683b69c8652ab401c3beb2bb06ddedbe61dcf398578fe4c958465aa1bc430140b68f0ce34e4c964b541e6d66825011a4bc367d95338fe6256c29fba249d98a1ae0e4db55fce67775f2cde1d8661b7753f5c5b3a476e7a2c94941e74fffeb41a8a3d38e2a8c3d9bf373c7a511411e211bd4381ff30d36ae66fd29c55345ac6b8fd07d0b91135fc6c190861aad1b2d5448bff181e7e"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            ec9c31"_hex;
            m = "eaf989927d18e789a4c2c889fcf5c21df332e46e2182a365dcb7171006f468472a6f838fc776113eecb0a9e005a644daf581f24d6515cc3d5b1f2af30ecb169ff97a00422ec1b3cbedb587807566d8a01aa9b847981be191a762ed02cfb6ca267ea168745802b478ce58ca32f23d66b989319c236299caa9e707ca07f2bc6c22"_hex;
            s = "a5db83aa5318aaa5ed79b8e2f70652e8a7f03edb1280efd24abcdbda7f794f592ba71db3494c2013463a235358c468d0b722b797b51b05ef6d1463203c882be3f2f25bf4918a04049e2a52d6930208839cf3de4b2072671da8ce0d288c9b19ac91b436da8c7d4ce87ca560f16cb759fadfafcf4bface1fcf2d0930ec120b3fef647b1772d3af810a67e3c359f977d9b16ebdd2786d411910c8eb72458eb94017904cc8da37d0dc56b8c7468e7dc88721e66c3a5cbfd729c4506dfcf2bff3206907562b9f8e7536b3ce6d9d607062fdcb06dae044691d40f51758fc0db46fcc07f1a4ced544396698256da55d6aece5b64b72a77d41fa0ee34f998ea3bfc5f79348f46b1b3ced4d35daa3a4ef656d3f039da9d312f36ec8976e5ec1ea2945938232fcf6c47ce1d8683cd49f2b736f6976158c65061326f868fdf87afde1ec7e0fbdaa7c2788acefcbc85d3644e2f9636e470f00afbd86054807d956df0890ca3ac1897cff7f68decc11b975ec4fbf470d30d14f0a88bd1b4f1638596fc54ec9ef"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "96410d900ffe9a71d348c210c0dda7ee43f92e8a31ad876255dc540ff239c236b998ef9375e695992aba77861bf8f1cd966e3af1f9ca874618d35ecb494982f7c05df134f5ce5853d410e670e0972efcce2fb14b2ea6974d4802ddfb5915d23752480f5def2e4a858543918d5fb47e837e5f6564abba60745d0ed710b713dea6b4302a6b56376679435ecd62b9a03c5c7ccea920fa64715c0b554b5108abc20583c1c87c81e20b0ccded165e581791bad0760140540a8c18b0a1adef5e9cda29fb959652cf68b5da128484e0c837c6cc017a7741edb301891e01fc28b8bebb1167d07c2993877a62a8bf82471e7130416fd825e5deeee26bf9e3e5b9d4c8869240fc2ea09ab7547668deff741b9dadc6304c467ca896794af09a1f22eadccd526c2eecb7a3138d78d8a12b0afc2132fdf5ac6299433dcb72ad40a183d21bbf5e3fab66b1b961016d9bb5af818ee381653c3c7216e308bfd19ad0224051e4b569bb27471b9303eb9c0d4a0f684dd86b1cc91d13c025aee06c97ba89e02b0bc6ed"_hex;
            efd157d"_hex;
            m = "c6542c0b67da9dee6338cdc0ff704346fa13de2c65be53a4b5e5dd5017cf2f6203e2ae021421ddf017f3186a622686506733498688c4f79a2d734ea614d52378e9b79cf117a79fabddb78adea47d2585905ed5bc550d126d4c4e1a2bc600e75ea05a5fa11775cc68de0a8be66e7e082e9e1bea9873a18a6639fdaaa7d258645c"_hex;
            s = "4bbed79b3dfd054836d6b9af30b0cb202eea9d5a038c5a2ce9dd68bd22ad74050bf6f95634c28955b539a3dfbe80a4444ae2aba1cfc4f337abfabf55b65a89ba6a5fcbef5b62a4bae5b4c51a22953e89b71f4eb8469966e51f1b2d232e4de3d0ede3d929ce1e90abf16a4f89cd4b102c48afae0e039ef8f36c0c20513f0a79c209f29747757aae8380993cc1d427c8902507e038cc5c2496102b2d1ff0b7f717dd8f083cf313b82f9a4415dd03603b73d926c677f1cab07dfac0f8305d53eea8a8cb789da3dd34230f592334619f487d7ee85b099f98d4f557dbcf1f23944e73e9a3b762c82e1f45477c91507cfa8ee11a944c7de8dd0c0e786daeff11275085c8e2d2f4fcb9973a62c5b9de61368b517b029164d0f6c2e07a3fdefbc082275f5e726ccb1bf084650e46157caf8130fcc902f49926c36c8cce92db6a3072ec7a4fc7acb16bd7703b936f9ba1db295ea70efe3c5b9aa0515e7dcc2f4a02a96d69591f3cc3c64267e4926e094b84f800155d1fff6b686a71ed9abf5295bccc8783"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            efd157d"_hex;
            m = "c6cec990476cd20d445e83a5ba7ce48e1b4215baa2d13efbe436c86ba9efce0bf9abceaa7a52a509f945ba3c46e77953455c033a429123de857c859126a522b023e5ff83b06d1764ce0b95241fa947aaf91750ddb90a1dc55a649aec46b5a50b6b02c3e292c61168ec377e24eeca38db5ff9646bb04412f78b767044ae293d63"_hex;
            s = "363c8a8e3f251f7c86cf53a34e9da296b478bdd9ff3bcf36921ae36bdaafbd73cc22013fae7d3b0ab840db28cddcf0c122eca5610b1640a5d4658672c2323ceea32609196be2ffcf40488576065cd022c0e2cc22e6103cf93610df661657c3ccbc0357d0ceebb85d8a2b28c6a45b5eed1703a14e1dd28e244882a8101da1e5b9ebd9d10df36ec4576a1cdefa89bd5390957a0d9d72873a9fdf46b67b4f2773f5971052170c71b9aa409e75ca5cc2f0cbc97a8918817be164a820f90a618acf0c5aea19e23c6e5d78465f60ee706c8bf78d38ce3ce4b204db5e3ee35c4dc3cf5d6cfc1d0b17b65b97bf227937540aca0c0b5d2ee7f5fa2ae4fc0a592d9b97f524a7468910e7c1d843b8fecfc48f7e2b5355cdfc7d5359ddf065031730915e41126b7dca03161b45493d641d50276cc1ab05c2f2abef4761e0a99b7f34f35d5621f2cbf8490c61d035af3c40d473192977dd7bce01bda6fab5d363afc5d2e2cdccd6721a6469d68e5523b7d6c30a9b91363dd2e90ef7c51c001f956d7dab72ac5a"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ef19b7"_hex;
            m = "d5054ab2c2e4fbef568b1f7d08a38770ea0b6bb589276900157bcb06c27809ed6d958e0083a2bfa81f593a9772375b47688a05a388ca9f041d2c5c5e9375c0bc230c60e9b354e970f73863c7dd08b7c828836f605a35be8bd803c080490402283f9245d519a17f312850237510bea2db711f3255c70fce7f8f257ed2acccd81b"_hex;
            s = "093d399dd290391ef02593ae52e54d5533006b650730fba61170c31fc6d0e2c53751faa31d904f4a96348ad8f36ffe8892b846eecdcc85ac1a739978707fb2b4ffa98106fa2e55953911140fcdf41ddb1450ced819ecc4d723b842a88b4fd9b5a506d8a0f5bd6b629d1a2871766556889326d1c9222c98062ef6903427f13d5c55066b5693e85d749961c53304895e2343fe953fd30d4e8e93c952438c2a83b8590f3242fe561ccc2d4dc393d2442bb57c54276813cbc3317a6e93141c32a240572e52c6eb400e8869005148f66c7b04391e285605133cf8ea5e809777ba22323506ae5ece5f9a55d812766ff3c9d784a979eea3391d47fa97304b719ab7210f1b1be7ca9846cba4b3fdfbbef0127efc2b1f6acb0827b0bf48058cd26d21344ef9a3d34f62484db350e9268048fa096415f833e97114590c7f1f073b562be552cfc2168a186e941b70e8f3fce84dd437fca3cfb191ffc174194d1f448c9270b846f253923c00f73932a038bf97fb47c3ea8bfa39bb2070fdd50a13649f06ad0a"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            efd157d"_hex;
            m = "02abc5271d55129fdbf1fddf59f4b99d904915bae196adb2f0c06237b6b10919d259606920f246de8d892b772abac5627fbb041d219c49db87ccd32919e079d18a909fff680263a2f14c17152934f4ff29390c78bad8816d2208f5453e0741c4d1586a301c0dd1b3af42a9017eeaae3a37ce1412d3d2be2f6c7ab1d34eaec8ba"_hex;
            s = "70a50b8a4349e57d7c23f990d33d0b1cc5074aaf462529102a1010575dc25fe90a34414ad4f3bf8e203af8fbfb68a8d10db1bd240052c23a4015fb2ed9760f8aa1bf13a0765f907c51037095b2537fa0e72901b76a945fb6094aeb316554218505c53b4aafec448eefb53d0dc4b8175a07f241d64e31d848cc3526e7ff6421971995d143fd3b201f2933e323ba7a1ce81a49c94e45c6ddf3f5cccc2473edd7511d5cec51aad62c4ca0366b487c8691bf2aed919611e7792fbb8013f4a11d15508890a7f1bec10a182d23f187e3f5642868f7a4d237d944eeb0ec3e8a045812fd31625978eb7052df5f1a26d885049b2fc74064ac9486e2f40179d6ea6c0a68a49ad384fde8a37f98a37f96b494651f136d2addc2a3d73ea694436762c02189953f9365a19a488b79458884079e8a94d09250fe8fea7ecba1777cf44289b38fd2e556958ff7170d36b04f7cb76053a73c78cfefaec345728ab66aaf62e7467101ff66b643db74a10d9844dbb3475f280d0a85302c459c67d9879ad44649101304"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            efd157d"_hex;
            m = "ab73de454dec96f7e9435a968b1ec3a7b5ca806cb1384c0726461de1ea409e4d17a7e06961314c45a610dd48c7778ccfb75b0b16d177b55c6f92c642b804c775b9774d8cb8ebe334c4fd458a9168cfc883cc342409ae73f52cc0071868635e92ba6b8d76fa22420a6b8ffa2591f874db42a5655c00e76d1a86594a2aa1664ced"_hex;
            s = "518da26aaed8f7d3ae91b2556e71586e97adedde3f4ff3e641892c19d5a5419c96214ed32f9095960ccadf7464af214c964fca23df2adc194049ff1f7685136a2a7e033f297b224086547e8169b115ea7796b6b0aaf4d949de198f9404acdb2a1d229db9e05080af35910e805efd6151e632e28a057de7ba7b01fb1f4ae8e3091a720eb7dc2ca1e2d7705195feb9d74a58afdfb3530d988df70adef2d474ae1e33c9c2b762a7222748e6b9aef284c543dfd8fec4474af4298f1372d9ed79e9f920210d7b8c43abc0a22acb6bcbc75607c53af746517ebc5fd1f8a560d64595ac7d07066222c355b211fd4891b8ca3b92b00019d32c4a9b80f2cc52bd70219cc473baec785349dfdb0214b01ee7e1c618d8c851de0c3c8a9d3c20557492355eb9068163e241ab9f335a2036f0471424d8ea5e80d0bc951fc75087d5128c13ba022d8b9cc02a54992bbef119a34b652c707c2f6d362b30b2e0065ef5177f6b3d3b15d0117f82c54b2ad62b26ba8d9958c2227afcadff47e5e77ae7755db69f6689"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

            efd157d"_hex;
            m = "6c0b6d2266a246feda6fa5cee22c2f33ed9d643c1f6824d9f327719225bc7678cfe4c85cd210ed4077701b0b5650418177a74c71b8eda3306e2ef3474f5d326990eadea84a9686e822878c932997298e01f2b16c42e019e21bdfb67b3df5478df444366c97df1bdd23dc82ce23abee44d3a61e9484e88ed642634197b52dbece"_hex;
            s = "06eb0d95a988e9433b48167603df82c4f951740ce47671cc3374f97a1f168fe834c3bb88874f06800e9094578f472b99fad53282ea8964d2a890e50d1ab4c61d91be1a2c734845cc47e637c89d8e9de430bf3872561a91183edf79740ce9abbdd3c91d418f86dd560fed0cee7b6042faa0d8bbca105cbde474f091ff3688be6cc76ce7b4add80fd7aca06b77de4d0412f78245c422906fb36e2afd7f1cc66729483262e4f459dcdafe2e217bf07ac96c0b33dc98c6f2e20231454bd261692a06ca2204a1bf67b39fb6c8a7f86dfdfbbb1448af119419d12a9e95d237a8abe0513aeb7e157a4d884ce29a37c97f07fc38b14b12101dde27d416df512cd6ff2c7c10a4e724c523c78be5c2d4e6a55060828e2c62ed4766c4354c27c2f776bcd97049c63cf017ff787fbf4724150a86501e32a3a187cdcb79dd81a4bd7a516279bb2abe28f42ee1fdc8ec69341cbf1ddf67592197b2c2ca9a3f031ea1150da24ece48f6a13e6452c2721adcedfeffe5aa7804b682a34c7f0f19a14860ffecbecf12"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            n = "9004e5334381fb90f60926f3281e51d363671c87bc10554aff5f3b4391d894a94866de27900bf627d468dcf19a826dc399c0580883c945688f3795522193b0887f5eb29bb7be2b6ab48abb2e86b8a3cc6dbd2aa3522c0fa6f6493679a25b1933de78282b00fb5e6dbc58246a26805eb61cbacf492ffee3a21b829e3b776dc814b0e1527565f713d8f761fd58b9ca1f20b79d798f627b77a1ed7d53dd17f429a738e3e4e86cc4da308c60e55b77f2d180e96f2da0ae282831d5ab523cbf2aac900f6c304366738710152efa1094232dba6d405381223f3c687dedd2d856caab657ad0a1d7a67f01fffe6903f173faf1476b8ca656d4d9af713b4f80860be5e79ac3bf1b507f46a19bb67a90b273a0f0d416c479c8d75c6c99943ce774928fddedc00c06d7acc68ea15828de379ef436ecceec8bb22ea984eb1af01dc3efbaefd031030abff09bc464235f407c8a9033796d87bb6373ba6eb6ee143a79703a8130b8e29bcad3970c69001d80b4dac9e30fc616ad9bcc215fc20109aa7788234099"_hex;
            ea996b"_hex;
            m = "cde63c4c124da95b23a8323a5db03714557615226da75815a50f2cb4b45d15c65826e032ea2cda6535df3ff48824f5820a567ae54e8a1c8427186803be57e423e1a701e39eb54bec11fae32b7a852fc092fbd01720dcd454c7072df5228162b2137285a8577065b75e0004295a5a4c94976dfd010a23ea4d2ce665d00963f83d"_hex;
            s = "6ea308d95a963e1fd18edbd6829400071e0f144571219f6909024064b28f72a8c0d6969bdfb705ce06b36c0a9d65a5c9331cc146d5f2c2eb96226c5a09957a945461a74aa20e966334741f4244311e2ac70f0329cc622864cdf614631c1e2e545564a682ff11dae5f8dfc3fc1428a2f028ab3f957cf970cd22e1f16e8e42f5ba879bc5c26c37aab6fe2b3f5b9f842c158515611c41e25bdb2e20962d794ebe1d626a4d36c07b63354ff9c333bba44129fa3210d0a0e10453efa17e053ca12513e0803c206a90edabe604f633a1d722363a2dbfa9b6b8862f5e2f40cf57f5c668af65fb7292c58c6750a6630159259c26a8ead1e4ac6dfffd96234978f15b9c9d80fe21b6ce9aa1a85a7f84f1954044bc13b42e181a323f2f9a4e1d7272c8731d14651d5302ecad25d7f1231b3f686690e69c3883614d8b85b6568b788d874ed737aaee11a11d7f9a8c67479662c77308318fe8bd5ceaf447f9592396ec3261f2b91ee25b54dffc269a9e7f965dc00d586da77d1a40469e68b0ef5d4f660c935f"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea996b"_hex;
            m = "f676f3723e70cdcbc7609cc1f2f3e4216feaf83d52d6b2d7691f6741cd4b1ac3b87df03d963ce40d5f76bc3323c53cb3e7f0993bafb53106dcc67800b811362b5044f0418291a39b56afb951922135a388ba319833618ae48212da0ff425a6d465d3d9c828f6713c55107963648f37b8fb4fa69a05612739040b73b6a80fd486"_hex;
            s = "6a2a7ff14c4028a67401ae18a6e3450913afd048f363607be81edf187790a4aaa57eeff802050bcdd6c4bfb921df1a24d62763e1aee6f8878bfbc70c26eb9f270bc898753f5583d5c5b40ac32e7c4de0ffb073c076d5e750b2c0b0754a7491bea420a329ae68f5c5190c74a75b7db61c84f2e017deb4ea5d9452679a54b5b7db1ff66c7d7a929cc3d78357ca68e39d75f1e92d32cad5bc11080b054044ed5fc351afa53b294165510cca83dbd91843297d9249ccfa692b82d75345823086d9234f5e2e0dfcc6fa194868c04050e6e80425a71529ad672c6e3b32f6fd606cd84ead5de2512cd09891cac69def77d09cddd0e2a6383d1b60ae831c05be4ee5836e1810f60ad16bdc253fe39e1fe10205ab6dbccd2971d7c2807411742358d7162d95dcbca5a8924213113197424260ac81cd999ef505de9ac531ce803026c9e9805ac84e0d6c94f51f79ea750ab29b384059843b22aab802443df06bfa1adcb6aafa5fa267a7bc230bb26de37973d6d5cbae0b7a258ac96cbaab35de8d418dd7f5"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ee22ca1"_hex;
            m = "51ec15201bc61b8d9553c9cd3e64b3ee762865243508afc9fccf40a20c0e7664d7bf7576b42877f9d60263067fdba03671b92b68a600e7be409535e9c344c5a7825fac8957a8b6fa9771fd7d4502ba36863b5cac557bd7cd78c03f33b30f95a53b16e1e16d108098c0e9c0bbf9a2aaf59ef81f79ac4027fd8c96850644368f67"_hex;
            s = "71721988738850d97a12fa89245a87cf3b032da83b7561c60e55473c5dd8a8d3085de931afcee9a401f46d227370b31dceca0231d4b13aaf293f0f2bfd742a996b655b7e363110c57bebe9b86ee9f460afc2988940cfd56c3e4b30c6dc990089e525b77fbb633bb89d38aae143eb6dc6e3388b01f7ccf51637f0955cc3808fa8a9a61290a82c5f163c4b10fbd1abef65f85e8fe8184ca9b0bee0ce173a6af19865ca32a2a9a0d7cedcd4989b32c5472e57d025ec5106bda37fbd2d7b69c0528ebd8120bc9d3dfc08018cb0107cab8bb70a277e58c9ccc7a5f6c92fe791d68384f3fc5ea315e37c02fa83c019b59060bf0fb2d033b8f5d3a7e2549f5aea22d8cb323bcd4f0c3d9a9d5c1ea256241a22c3311358fdf04f23c1313335159ed156bbcce4671bde5e78e1e6ff11339bc64d699ef36826940064db7580df64448764e84dea828d0757d533d62617f5db658810a092fc2ed35b9e08d45f85e6720f58f290442ecd44ebd0aef1db6bd1c76fd81e674b1f9226ab143b765618fb243bdfd4"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea996b"_hex;
            m = "2f7ab138cf776750162edc63c3b5dbe311ab9fee2ed4e51aee034572c13dc1bce31b9ffed2707440052c8292db804351d24346a7f9953a51a8c249a56e69a7d34bdd6a6b1fcb9c1f631d8ecb171f70b2fbe01f0a02dc3ebc04d78865b30c64a0d087ba879fd0067798c9ab145fd9898df64ad12232f018e36b0cabba786f23ab"_hex;
            s = "765c62cd7e50bbbc4d7731e53fb468df256b53bf41a49c8950339f25a4a8ce8a6b31672e1ee72da84195fc3c679ce107dfc76dbe858ec2671d7a54f23d2e57aeca984c4973f79358dd445ac0575624b6252bf48ed74f7081cb29e2da05aca46749d4977173be27331cef847dc7ec7748eaa0a903643f45f69a61602112c412a46c2541dbce865cb30e87a4002de44aa9cef0b06b9a1220ddcf3cbec46fabb0216920d787c0ebaeb6823f11180de58e6cbb4b432391af394b5936e6132530dda9f13a5d8914b2f4c097b01046a60311371c678e6a04b0fc2eb03227686f67503dcded15873d57e9e8008d07fbf4bab4273f61bdfd93181e3b0c37ebe146226ba1730a731a01eda193eca6ae77c9085d74195a3e8b8036dcce07250d99d60a1c6a6f3c02abcc902e26f37bdc979f82312131d0d00264f798ad09e7dceb29e0994d527e15442b877656621427757f507799453559037804ad147ccea6fceb522c6ddbe8d90b0d45c80cb5e155068daf7043c6b37e7e17c49a22f7ea0421c8062a81"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea996b"_hex;
            m = "eff93ee57b47accf61e80d26313a106abbdbb1397577bcc221de8c7da95a191a4e3f32b701c306551110e98d0798557fcfa92f0c18414c45fc233422e42a2678a6de5c25f1458f8debfcbe4b18852c207ee3a82f0764106d26bf1853bd5e48d63ffd44981274506037d113c82caa9b3511b2a20c0b891023e6d9c176fe9e871c"_hex;
            s = "78f7ca725ce380711afccd67be0156c7e5aa8b8f981c802ef0456000b749c0e10e8a87a99b0abad80425b5a142bfed87bd8672701808435e8f06e28b3547a943fafe99d13fd543d56876ed0857f85ba1c939fd98e90f4b8ad864d4aa47fa4c509f73ccec5f7461e049ac06ee8d52cb64b2b1fa941801648f2ddd5a371202ee74b5b0f95313eef842701dddcf83c2a6114675ca1eecdf564a6e5a3c44c34cfbb34d1683859259d42e94c133543fc84aa4a8a3b0b98ae355314bb774d7ba6cc5bd24faaea141276e8331a68f0b4a6a5e5ccb50d78028bd9dcfeee34dc7134f7ee2f94f3be443c0dc6156bdf5225cb489e7e70acc37f35e09668649b5942a683dab9e6215ff075ccd6c3f0be3a43aca525843477a20289b03e5f4f17e12af80158191eff3e1b7f4bfabcd8d681db7050153a9beb739ffb48cd977fac9d4ed74b0c85bc5b446b3b7c5824f84e58a8e41cde59e0ed3642607a897e600742f3727deab18f6d051c0e4c092b6667b247dcc78e1a00bd12f8d9e47fbbaa9edf6911e7d94"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA1 signature verification failed"
                );
            })

            ea996b"_hex;
            m = "6f8c5ab0de743f69bfebc93d28425330dfb2845b644e738731350ffa400cbf91ceac450f5f17e8b502b1d213d6adb71dcdc5b781b02e863863cbca5b6ba1c439ad8b33a6782e7596c630f0eabfa5b0897fca51b319f62092dccd7d12d5b784f39491ec1d33a22e3395d0ea6aec13879c7e2b1b98a88e8abd23a5f1c7863745e8"_hex;
            s = "75ca1d0f756cb322ef458d0421af9aa6d0425c52864322129c63ae30e442e03342369283ca78ef95a29a2f58615847bc9a0f73d6ec8213d6863c30b84d56ea31684e6ad27b09a96bd8bb39b5aef2b25d40d3a7e1d47b3bfd6edd5170a84e669b7d5f7e81810280e41089ff7e4bce718b79d116c9ced7dc1e7ed6256a4ae480e9ef3e3af95de3ab5dbeccb5a36e60840b646ad418ed71c548fd68439e8098e63e55b3593a453cf87e9b8d7ceaea8cd8145173a6b36bf4c6d8b7e7231d3391440227ca8388d573b34e4838cd7e0a4402c45bf58c16120b6093686309c0cfabcf7e2f15de230289f59f5f9cf12841c75815b2da9c7d4f76998134d8df282e2a42cceb28d4f29740434422b1a8e7ffc1ef42383c4a31073421b034f709f6192308367d4f7283d068d4f128fa6574a2a305ec7033368923918ace1776cba31bde0bcaa833b5a9bcada359b26157487fbe01bd94169de91a1c45d928ef69de1f91b231b0b43e8d827d4f08ba15cca460525a03c4e381a44c1fac3515bb3d61a8d520c1"_hex;
            r = true;// Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_2048_sha1_mgf1_20_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_2048_sha1_mgf1_20_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9rc5
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "bd31c7a02691d2d9587ef6a946ff788544ccadd4b2988ad62086792a6bf96c8616b4ad13317d2270b901d0fcd1d880cb8f52fb87304a5258c11b38dfeae8df670aeee7ea1d0d9df8e00e80847e41e5989ed402d44e78b30fef17b5671d3adbf8685e4dc204499ecd1863e1d5aff28a7cf66eadf31fec9236c120add13451522c647c9832a672cd64d328c1c322183f4661d09bda60b8dd5f0328da5420821424afdabb1a80c5d12763a1b0238cd89d0742bfc50b6a2fcb701d824218f9826f4f78a23a2b5aa42ace7f175376fb6cbdb2bad293ba583d4d31c6b8f9029e46b13689249855f505756e00e225a6a45a18769bd8d2b3a4acb9f1c23d3e51882561e5"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(20U);
            {
                auto m = ""_hex;
                auto s = "1d5a9bb49cb1f5c2862f36e451dce7fc607f3d302eb9a9fbea5b673a29fa9023308381262c538cb53910b5773a7a44ff465828bdfccf8a7a4ef902e945dd5f6226ffb7d5b05f2335e5762c5aceff71c8408150959c1780cc9c22fccebd3405e81f1bc16d276c07e4a545ddb1aadeb751b571d22f3e4bc4e02020eec5901a1ebc04415e9ddfe967fbe4ec7166923aa095b9fc7a81fc21ba37b5220a973fc5f32fdb8e0841ed321450248402a159d2c08e4a72b780310d420a6e499c2b34b0bd6fe0d1d0e1a7810563324ad8e778720755eb00ac6e28b204ff5fbb01fcfc91e8f1d2f113a5f32843119f5e06beec0fe94e5bfd0ccdd7f322bdab7b05c4f83c0504"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "01e9b1d4f36d040a553ee12afb76a36d04c6c5a0f3df84ae22422e8157e57b1c43a7bdaade30ae73073632a4679973ec10bcbb3016f6e20c9cad29a14f96052507819e90cf56ba50c97df5e5001c7f94817ed29f7500f839eb415ef3182aedb2484bace43cd2fcaaa6f5dbc4b6491791592f084b2a14ab303e89deb28a68c72b0b630ae85becb67f2b722f23a0f321f3a7496b251895111640452932579aa53ffb8f8fb4ffd331fa48c6f1e8e152ce7e04cfec941cd96dcf7a885a3022e426d87e8111336f1166878dcf8d190ffb16a574fea9eb6d7e270e025c6d98817e75c968f78c4750be018f74968d7f3e5cb9d6f47d5aafc99c85c83af7175c73091ae8"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "54657374"_hex;
                s = "ac3c332b52f06ba2190c6ee312c32321ac377019c35453537a393bcf0c1e6f3697f770ccec092740100a7009cba20f86304108165d5de572df89c42423eabaf910619d555f7b27f7aca31861db0bca8357956466d3792fb6669c77b98bed3c721f71321548f8b4313e535eab5638b9e341f4bac6c9ca02bd07111da4e39f2cb8ed8ea5daced3ada8376ec8db27f6d619ad92e01fb49bb3e53ec3b84ca67b18c268db08ec28752b0c13f269a39fa700dac163b5b9439cd7a9883673335f2b7ecc0728ab38df178ce14479bf6a8aa1e24a433e41f9f217be5c0181245135d1e265e1ca1aa06dd6e853f5d1f144878e2f64461599cf88490285b52a79b744f25ec5"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "313233343030"_hex;
                s = "0bb9473d3a8cc4abd63c6f2ac13e278a9cd1dda844fdbd13e9b77cdd52c1b05ac59126e45d276777e8b1bc423cb261d29675988954c9ddc38bb9a67bec5e03e1e780915333dfe494dd8a4f0bfa0d748805885c389d6f7fb6f786c58d21a468b3589346d70e1153e29dcdb91dec8ac185501efea247bac7c63e3c546ed635e647097bae3b8ccb992701a75d209c439c5dbe8122da616a4e230bce08f541abff854fb93c87fdde0fb457c44b2783568bcbbfbba611d8e984410d360c4ec3732cb69426a94191d5a0cb33149b518ded86864706c723b27228d74836513191cebc790793e5809287b0279e7bc82f266d437d192e98975960d0014dd02e172b7fe251"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "4d657373616765"_hex;
                s = "1b92015bd34fcce819bcf75a6c38a05ae2b425f4b21802306c1af645d1197d2c84b84b24d453eccc44f578465b8100ad9d60ac4912c7aa4d5745a1acead176d8758f6abb532d874ba5407d9e3e399f2cd6166b9d3ad1745cd20ddbb584891879ebe71bfd4275d4c176c9da1e13903e42be68ff2a78d2da9324a8cfc7a8e2fd08307c0ee14288087196c840a0e2b3811d9e9bda6ec24bc86e7ca5e34b57969e3aac31388fd2e696528f7d5136bd44c122156a5147f05bc9b118d3a33ee6d7faecbb048290bb0d4719c25ba71741d7434d66fc4baba9b995dfbc56e3507cfc97aa2d67acfa1083e0ef58e6db6975b3bd6b10ddf1c13087d2bf546a931f0baa0cc6"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "61"_hex;
                s = "ab8c1e95acc36ad6218e48f033835d15ec6bc7181552feb6dd6e128546917bac892f5b349a234d051a83ea6469e27189f2995302388337c2ffb3a746db17b157923bcf6e985ebd203a4e9a23697cf2925912ecadc3d3f68252e5e01e112db1829658b16ffe7188228921829ee59d575c6ad8299d76c7f5d6cb204b769854de0204087560465904c73ec3bbc1b47bbc98586f0ba17b99c43234d262b7f1e19fb2cdd20b92c322d6e498835b3ce8480eda172921b5a4707d5ccb662e1ee4b3b4c36b5b485a10aecf1b12449732018e594a734b68c8fad4a730b469d097c89c4121d4f6dce34be78f65591b673b1d0ee170cb3c1852ca22bd53b9b26b2fa19ff275"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "264dc979cdb293d180f15ef3183334d4940410c9639712910006c68e3766c3aba1dd95510d71e7d91d93e61128da456cb0d84c44552f33504bd2dae30699d372e394912a66c334e888873a949d58a3b7d7d43e76391ab0cc490e7c3afee6a5f3262b7d298919d64c5e7bb81cd7bf8e612b9f6e266eb28316a7fd01e44b62100f4b462ba5b238115081536ad1f6a068d656d00000431afd1b6a5b57f43f27ca778c08a4f86f62ef84c73aa72b0c361c68345c10599ed731d6423c750462acfb469910a50aa2fcad3ef8c908633bd3fb0b2e7e8988f9be2ebd715333381c6506e0cdaba7691109cceb8ad5364fbc035c309a50912dbb670a8c255c287a9ba992f0"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "383633323732373830"_hex;
                s = "91d5f67dd4f93a6093adb8a7686be7e458f66c23e32464942f46193055c61c29db94eb12f96c918e1cbfcbcd2ed6f4ef6d271cb6def90375b1c07bb2d5e7c1c92425b16b2d8acfb87b8aececb874b7bc2ec9b2865f8882e0807db9ed481ed5fed0f3dca5b643686e70b4940af6d086ed7fb91fc30b322ce9fda13ab70a7206feab152991415d50ae586e8a9229a5d2ebdd1cfe56c131fb832f1dc39bd9fce7b73b190832b4052f5dd34cffcb39f5b0d527db2322d292427bba611ccaf8afd7cef8878337f1a8b2bc0f5ac08497eecc95b23ba171707795fdf5397f94ead6b8569b4871aeef1052fb4e895bad9f17462c1dfd712950631f625503d1336e850e6f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "36313639333935313337"_hex;
                s = "500ba4952945df532e565c9803ee08eae2b7b69e02199cdc510184fab3f22613f4a005fb425bcff96e25ba4f66a849abbd299f2ea7d530b263bab4899ee3b6121b88b1f2ba0186867fcacf686a71fdba46c2e5379167603bd88a9e1a20f5211420a1737a77c40fce3a7722115682882ba04fb521088750178f3b665921011209f4046b9981b79696cb4193fe56783ea96ffea62fd3f5945e4790ed1a1059b5f81124e52dfdae58e6814a1ea91851c045d71960600a2a94db05f40fdcc61b90e846e563122e6fff4ad1ba74394af7fc13ec46fd7befe8825abb40b365e8ecec7131769ae3871e806eff4f6092802a8edaa8cc47ac8053c8fefca21648abcab60f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "333036353331303631"_hex;
                s = "3296d2cbabc9257d91b75b51b994dfb8f777fd2630801414c33d405860e3f75b8b08540952e4defba250d3946537774f93a8c88607c8d673a0a1c7161ea14c56b8d3e2d17862e932146f29937b0084295f16bda9f6c555af0e26f7ddd223af6118c795463ac9b5be70bd413bbeda91539f05da157275c24269f039be88b3c3589e4cbc99746f3acf186b79bf27882ef2ef3edc0dc717ed2b94ed55177f99537a3261cf509852115652376261b090ef766cc68a99ec4ec7aa8ec6cab724b4eccae9805f300c48a076f0dd345b6018941bbe4fdbf94e548bdd6bdb6c62a358407ed3c84ff587ebb36ca82818fd82618c94bd355944547b09af94a03e68a3f07f94"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "38353939363734353639"_hex;
                s = "97e5859c080f776faa13039db19d49eaf2a16b048246c939ef875fdb4e28eb2bf4ee3c114b2d99b20753d1082061fc4935429a92aad3d486718657a8ca2141873e69668edd749f99f1cd757dfe7cc2db297cf1bcaa1f82c3cd92482f4dca6ca66b0c28276c32c4c2864c8e87e8c42b4008a87a4100523130c8e4bb35b7fa7d1af7ea6097da7f7ae8372d5aeda20b4a4ba3a6c93e1b77b17a08328a27d975ccfa6d1b9010b34ccc12ebc0c3d4e6bb14c1b655a15b7f68604068c9c493f561017a1aaec7c84d1a24d9ef97aa683a240abd141a55daa3c210174e731daff63eb39ac3aab1a79b9a0f9178a7c374f0bd0148e4ffd8c9e17f2dc7ef8fb20e3f5f1043"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "3135393637383036353431"_hex;
                s = "8357bf730c668cf632cf2b1b5f9f9f3837061a1de0b86906debecd43077bd132b6c6a078b35b6878a07a8d0a84ceb45c93cf8e56e21e7cfc095107412672b58faeea7cdba71765101890b12a92af31d12f6370529215c299469ebfdcaa2055d2c2261bfce7329977f13fceb51d445b56a57a4e34e7c6abcbd7ecd13af0d92a6300ccaf70e3ae8a827380c58bfe4f381ab085784545d6b23ebf896ea8c453af1b498784025c9e9eb01e10e9d1e22eaf2c77902b64435be4c54b9f3d74b63482e69cf751f522f5a3ff59a35ccec8e612321495a727fdabe0891265cb45a18c99846aec27bcebdd79195f65e05a4d5799a333219589c61e1aaa93547974138746fa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "333237303833383939"_hex;
                s = "46f2507d0817c14753ed5d4a9fa6c98cbcf7483f237ecf5d26d76e6522e940215841da07f3f20d4af6d8a35e182617150115063c1e1dc897b67ade6b6263700f5420a7f6595ce620f90ce6b8393ff006fe4f0825dee82ddca8457ef74d78e3352f05ecce196a1bf4d45f018317a6a42c59a2f2876f95e405d65c4bc5f0380d0e0956766f89b15850fbf736cb042921e4589721b5ad9abb6213bfecf8eab2ed077c6cf33be26e8b9fc5f95adc045efff8658231e28fd595701531e8bc3c74b42f12271f077e08cf9386d5b611bd88218e42ae757eab5c0c9b974c2bc17da12c8babad3eefda8a16a56ce3431da35460b1ad1df2b2e172cdfc006512e1a4ac866f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "34363035383435363034"_hex;
                s = "0c3b3f5120fb9c7dc3a715498786aae8e2dfe5d63f54cf805d02bafd36c806c83d0a93af5d1eda293f4ffe6d0ab218648a82ad12dd328a60f6c632dbf9f6e5e504fd08b8b84d8d58000a2d2a9f9a966ee898d9cb75a69c930b260f6dba3a0301ae876e212d4fb971d819c20cb07aaf0fcdbc152765398173dc0d7229ebcd8a9aaddff45d118bf63ab397adb39af91203e8fa5a7d28f2937ff7cf31ae90dd9efc9f2549bf6cbcc3c65aaf78a93c76007bee2720930e2a5331335983943a6d93570b11615165196f9d7ddadf805d443021580514d921f439891446c1fb1dd740794bbd6decb017acc238a81ceab36071be58551557b09643cd2bd7be6e69b77aa8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "3131313738363634323032"_hex;
                s = "94b777215d1ae19f959d046fc02fde3e113e15bdadb1d792c744f217200e275d3954b798b43e5ee382877420144087be340e11d2879c10af6376437b5a8f62634fa19b9338360a318c95c9421d90f60337634f3a03a2260796d8928e056aa7759cb13f3bbc72954f9c9da7eab1d3564050e4267ced557e3684e5090cef96f585153db8c732b78b4f7df59db219d7aeac42d4f20b1dc9825171bbebc2712e722ed6fed12dfc72dccb1e9a2c6d93e4c86641e1dfe16d6d43629dee7d80eba8e9639ea594ffa206cf3f0e561b2953a290d8cd70bd0ccbef64b32bd66b294f1fb1ec97bad0e096e5e200e5812fe025333cedd7d1ec8c111b28beb4a402f5cabf2f99"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "383035343535343634"_hex;
                s = "819f624b0dfe6822d3923ac1e5c75f79e1da3dfbc13b332874d4052eebb30f9b2a09ecf75f1122990c37367d75e4ec510f4645b9f41fe4f2f9805a981ea81ce932127613126caf8e04b9d194a927b720b24cd9f1721e33d121c59930ec48a5f5574f9aa8c6bafb5c8ccf9dddb2dbb418d9884ecb4a931a9265360dac7475de7e4cc795ce7a586c7d476ba470dda7c03b3f1ab69d9372d7cff3422306edd8fe8f6dd745596f1fcacfb99914470c13e752bfaadce632fe4124d6ccd80eebf87a6982a998aa4a0892c270ae6de0b9bcbfbc9cbd96dff2e2f93f80d9370fa2a015e13d0376b4d9dcbdedea29ba9b616a83261ccf6ec56079ff2ec93d72989cf93454"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "32373335323330353531"_hex;
                s = "118d4dcfebd82ea74b28041bd8bf5f969d04e160e2b8ab2fbbe1c2a1673cdd4fa7d801aa4bc23f9898bc0dcb240e8a3ede076f911ffeb2749c03d21923055f8878aeed88563dbbc45422b658f8647dc868885c92015df4d5925f3e6d75e85754b7f002374d4583ed310bc991cad2812fd29d0906c4dea5c52921fe2184880c5e8ca51b06bc5654edd5e0e72e20922a9c9b2fcd068c700ec82878b6ac04a56becd76fbbe9fd4abfa9348756f983bfa92539424d972d764e7813bbbd34bb369ec147fcb1a94e8602e359f1ef312725f2bb81c04932c1c4ebebfa09e3165d0287a85a22f0898d6385538066246ade07cb51580db1fcca86afad06fe2f9695c2f8fd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "31323238343430383037"_hex;
                s = "53711344088547e405b1e3f7605e44f9b7b6735d5d3c32ee0e408fe7ec9ccf58998487443f66d4edc0020dba88efdef9ead403a2874b2892054e391f61c1b36e490a8623868ea3e3eeb07eb6a2de96503b93f4fb534225072c6bf90837c029a1f5c2a5d8194df2e203fb0c2aaeea506767952897d900d9fb20c8cf4f7b68a97a5278d7aaa6e383f0cc8d2b53bb748ab6b0dc5fb1ce82b08aa986449b3c3137a5965985d0cd62b7a1a11b31a498669a0b3072692eed9a1393e42d7e61b90226acc62b284ec550c0813c4afa25a1b6fc103cb80cf429944b557e1334e81c1173df4a86ab107cd8ec6c75392cc7cb11c9212f15ee7e18aa0d27006af5c5ede7b0e6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "353131363538393837"_hex;
                s = "972ab5dfd3aa92ef9ff40026764716784c87154f12967ed3f02adee5f73fe9a0594b22599e829bcdaeb00217a12218dadf06c9940aaf9c02c75cb149a89e258a548894bf4762100ba17bc8bc60a7a0d05307b7133678dba4babf660d12418659cea25c9f982bdb9b1d2300fdd9d144a25d4f150e54ca7ca344dde9e9e1ba5783c2cb606bbc86341ab9344a0840dc515dd1d589bede2e3f483b20180f08695cca0e9e1cefc68b6bfc3527e48ff0260a3f696c0680364bd4b6830d675ec4986638e976b83cb1f56ad5fe705d5dee0c0c5eb29bd15a24f265965000ebcee5a8551ad8ef74b40592477255169bda56dc8f35fafaf796fbfa44d366033e15acfe048b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "36383435383536373234"_hex;
                s = "7a7cdead06ba212e8dd6b446f911cf37b40c5ac7f9c817125c0d5ee3cde49ef336b87eb94f7d8a93e1d9fd0efeb77e724769b27d6f63ba91f7219f23e085a3433e4d69ca8f8e420534f554c69a7221d70e57f8a8246b24b5986716c50da4942a1720e51b3ab87efdad42e02cac254be2673d5bfa4669e764defb401121a25055993dc5ebba22176834b4a2f9a8a3a34d35ae2c344e9a84675d94ef8f56b16d848d15851c058ae64df8a404eee09b63bb64fe017c206a94dbd7b274440f04fe07d22d079c2d2a8686f247eb983a0ee625b2d4b9fdd4d9ade53712f0d13cf1ff1aac03d09f80335bf9364327a89171a8a51f4219f86646be96f0d96c6cb27f43d3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "32373736323939313435"_hex;
                s = "bb15915502ad77b3a080eed70b444b753496450a4114d435d2aee9fbf1b345074fe85c23ad4ef52603b3a8a077d5024e3d56dd620169b6dc0ff7437fe1a520c293d78faa77258e8c8632100e0644f469f0a3250a53483e9a2f8dab0bdaead5df41dd1bba91dd01d79eda1df838dd4567d04526b0e1fcb5d07cc628f4ff62fecb65d2386af638ba6d0e594518699c5685033635af6cb302d07bf39a1dc5b50ede06baacafad9a2ee9ac48bf88c11329d2be62d565b0312813fc81c9e3cd243aacaa6c11dccbb6941e2aba6f93524b0140f30987168036b13810c10f65f0acc443f7df7009c238a8d5bfab00116f1adcb4cbf55c484239689404788bd29eb787f8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "32383739323832383334"_hex;
                s = "4fe965e8b685d1eff38f26261f5c168b77560de5f2d7243a33c3c1c7f267d7b60e9a61444b6cf0a71caa18ca81f38960f45ef29586910c240c93820551f3da5e15180684807faa5d9fd361325b9d39c7b8e805abd75b69af4d020345bcda266a15540b32ccd28e57f7063edc228fbc815f1ab965fa542ed679c43f7b4949f7448e6882bc36a8f10412dc0e828b33ad4e09a5c72d3730143520e4eb625356615bf49e51ccebe904af7c6397785de0f20371689f2975666524103bdbb4bf27f1e202018aca8003de615f073773cca7e647e71ee51d97cc30356a17b50aa3c47a74e133aabba4ae41750786a9b1e584e319836c3c7e7c8c2eb2ce6604323856b399"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "363635373637393733"_hex;
                s = "9e12dc1ec88182f9462a795d710dd07447e79a4e035b97c16e351c4b5d4e98459b8e5a52e2f51dcc1edc4c8943863fa9abc8fbd75ee2f47691a58428034021c6d3323191a5a5fdb2da2ac1b2a149b8d1025576309e21410c9400cbd3b67d2ac4d4af6f57c6380fda2817c263984795934b48844f5ea4761402354112a2a8e2c06dccea0e535a06b6b1274a42f218b1d442c2c8347e7fd168100ef658c63c790e6bdfad3f4e57a536e2ce181a976dee1d605cee947bf5b228f7c540c2c9c9f2caa0461bf737e32f5454f52cf5300b23e8a9921d5e4a380eb836b645515c0c71ea803b730d0667dba49be3825c7a5f49afb7e989c85246ceec236c3a0eb43ed8be"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "373436353535373037"_hex;
                s = "3f55470e612c832eea00cd738b6152bd03d88c3abda95ccc2ed6eb6aa5c0e4d858982a548d25914eac7649c53d2169da5ad4f09bb64d6290c913d346424d189bc2414ed50dd2bdcfe3e9e80a992c6611ec86b537a8b5cd92985cb6226a0367c2ff20d2859c21882fafb2b9c47f48fd19cfa14f793e0fff45d06a2e886253a209ed95030da05a1c6ea35d2993c600491b493ded76e952acb0442c52760fbb1f735957a1ab30fefea6e7b596a7aa4ea479ba6a6aeb866ce6caf38cb7c6338b2993213c39c98b0cdd6e46c9702069b85a8c7e050c1079b11fd209fde0cc58d37beec46db4c8c95b402c45b2f5b7906f1ef19f2a84dbb8e54bd5d5dd39a532ed6e37"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "39383734313231353838"_hex;
                s = "08823a3eefc4d13f801419b374a5d8cd51f9281e124deb0415250e9e353e3a2f974a83347ca09d3b5ec24ec94048b096a4b11dfac52f2480b522f70eb4eeeed6f84941bc37d1dd1d82d7b9883beef1a6cdcdc5b3f6024d9299b10d7697c0325e2c75764f225cdf5fed483ac300a489b69536acc9fc90d581dfa10d67056b3ef9b05e09aa8dfd3d688ec4d63f483c301a44934bba1841860948c130d6353e7d74c9ca9e764c44e3b6fb1665afd38b6a7df8892d90a0d5483dfaec6270084ad76aa50f38e34389f891fa6455ed9f3cbacc422266f6ca2b10aea5c3caf83035c06833cd7bbbba83dadfb28807f7b3d7f4ac6e9025a47217c3dd1dfe9426aae6175f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "32363032333032333730"_hex;
                s = "bb6c055b3f55671f0ce85c5641b970b5ca0dd1f1b8978b915c8e36390700f6bfc765dc6b1694625672f70c0bdc97517d81cca9190ac4bc9eb5105df3457f48144ab9dcc049ae54f28123af0204176685ef6c2d71b0e618389400e18e90fd1dfe65cde88b628fdc410631ecae8d64b86da329228ce4c99fcf572e77e3ea366ce6d33d1401e250c75a329c71c7f5363a95cfde27bc8cf010bef57aacbd44c60a4d5b7aea41df9b9d59efa0cb6cd343b3c95c7acbd84d77873a5775c8757c585d665cfae9bf10095fe4f979b5866b6fb393b09890e118a35ae8a17f7eb8f60dd6e4954010ba903e69f4cdc63880bb24c3019acc596e6028b5f1aa86cc16d6f9720b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "33373236363131363038"_hex;
                s = "80ac097d00555c8f6ac34f3ea96570432283b373bfbfc327e5e1f88b9b25d8dccd61d1064a944a10418ffb863ca2eee28182d046ea819b776e00a6fd62836aa3f334aaf7d14897971782a8e557c53314a3da16f3bf09959c139abf42c95a943e8f736fe6ac47aac2c4453d2a7091214e9d6c81098f39907d001b4cdaef6a66b426b571105a94331349d0c4d456263e090c0ed01ad2195ca0e7affd36d0f559cdf12c8c8128c7cf1a8aebaef6154b4bf8e3bd8db789eab080b14b45b10527e800452fbe2f20345cb41afae4f35530936c1b99137a3370f4f1c9eccfa81bfa3749fec4b1b0672b50e970c621ba0a66d1e775bb4df0674f587c938a29176c603318"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "37333434363334343235"_hex;
                s = "669f3256203b4ffe73ec01c2d7d120ab9c02bab82ac75495dcfa24db2f8e79970673d4790da772f4b16b14f81047086034b3ad927196a48390774aefe0d277ff466798d3497c0e108d51476945e4c324d32145af5d8cafe88bfd6a4b52c8e033ab4b95bc5b5c3451808f019b39285efd4feb6c21708b00aa5bc781afa87fd7475cad673833617159e75051646064d81ed42044791c27e37eec421893fd371d7cd96b462c158560545df3f5862fe97958c9974c9332b46d894486e97c84528a1f55a3d9add429cd7c1a05fb582affc12fa3aeee980a93b8168f284d7f95faa2ddf137e445d2c5658b89a2a230a9a640bbee40665c2bede3f16b986c72ad15b4f2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "39313032343039313337"_hex;
                s = "50191cd6481555054231eb25b7d44f374052a228036f1e796c2d923c9df9bfd2f881620870ee4d7dffa4637e570d6055345c87b61a2c8f4f3b536d89cb0379883c99fa246e3ae9c6a157770767bb018d702382840e5125ea59bb6367f98c070327d30bc4e17c40b465fb5314e59692527d792c9155f5f1c2d9f4061a3b784741788d92d761e1a3c553320b4165c864e874f24664de3dc6b572dbbd4fdc495431de288389c2690bcf56482632ee34b638aa902f5ea808933aeace4eefbd2b6ef54b47cf2afe586c20bf015e782d5ab952bf7696268467a6beb2f2506cbcbec919674fc785474ee0608c43980f64987ec0b75e8041871ed9a2f99bf4623504a9d5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "33383239383138363835"_hex;
                s = "55a3be3e5c6c1bb472feb54e2154aef10c8880195183860a3c19dc2f0d9f2e7473b90bb2a9ecdb1a8b144ee27c60ed7ea25838bf6ecd60c2c5dae9213439a9ee8a7a49e970eef3cdbd86f0b259d7ad598230f43e2a5ac0a0f68f947cbded0d20e7a768fca530f3dac41515ec9ca79167de3d800c8bf547163b035a0f3f45c371d53969ebb6d14e5850bab303dbfcf86092b47d41582ede460bf9920c8eee792187d1da134945046d28af67c433fb802f09a6bfa946a8aadba2ae9f89afb530540cbd22960126e6e858be58e6372903698c644253cb5ff72c493b35caa4407d381f96b304b0993ce08b7b0c692c0bb7936f743666db5aebe2afc2c67e3b256fec"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "31333332313433383039"_hex;
                s = "b6fd6d2d4ebe5860470aec5e25bbbb02d67d46d960008311d1dbfff3b85048cef40642362104e8e544b914b9974eb53ff1cc12cb8b0fd5b8a924e96ad982ccafc1a80092586adbd2905250452e38b342f7921cfc82623ed499742b2fb0b90d1b5285bad2fa03ab82468488356605b5b7693335e8dcf983f639d82c3168020e27a7e0d06b2af184eb96618ce942c99b49bfcc27a4b6b47c5c07865c5b2eafe30c6bba2d9a97818aa0eb5d2288018103668f892e8bf5ef1837521cd2bd41b5b8f6a954f5c4a50de874b8e00784a5546cc9b7ce8de2ff776749b0027b37158cd5b11b440a52a1820b7950fa685bb43505e1d35312a6fdcbecdbe947672dc2be74a1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "34343435383035313539"_hex;
                s = "7fc54d8108368eef19f5877275d07e871a3251cca71c63cafb46808748cce240b8eb95a1f218b77954edd2ab8768e3fcaa8c8d3e9b7d678c0d44f9731d5a58f6ac5f3643187bf88ba6023301200936d9414517f1b13ac2afc01d8cb8e011631109f2e8eb66b61b7110c273e26c2066e9384732b5d978c0b2d6a9f0227533e092373fe9d8c2dc33f8253c13aa5730b3f792dd66c6b6b2be2dc5723a470d8da15c79286d1842c5cea67eaa47b906c4f034d1587610d9fa02cb7241364f8862458feb6d8fff98255b4c81b69c248d5f5dd721ee477b1f7341c73808b880a88f8425dff9c27c2bd0140a61b8c64d8dae15c4359a918de42c8a778b8b8e352b624291"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "39373637303232323239"_hex;
                s = "039ca79f8bcf17374bde9dca5b7615b809ac8d49241a48b118c18cbdd4e3fc43c2e3792b73d403062ce800f26955125b7b15beb60a6447710082c6c6bf80d24dbb417a58ab934160b18883ba64f29b461f6f76f833ebd16c38f7664976aaec1521ab6a567b34283a98b8556b4fd346b050ed4b1756c1228f891172a634444779e26798476d481e416e1180aa1709f885fe5c6f091466aba6287f727f26d086618ebbcc2c020a001ad8b24d2ad0dac784456e162d06030567187c25f2e2a023e30decc076eaca92d2c82042dd077abfb788fa03a0daab9714db415822501d99f89600f8d677faa726aa43d2314645b2320588b4cad7208b2fd12d7f99fc37d809"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "3130373838393031373235"_hex;
                s = "907f826f39412c22974469bbb28f049d8404b9397bbb86322c742872d8dc008bd199ec7e891c1a799da60ef20c9dd7573ba969761f5d812f72e889af855b833b5aa1cac338cf2a42d4e0a9d14cbc6fb004866aba01341e9dee8e2896df163996d78c4d30d8c68770e7c72eaf689cc49713c3eb479be8452c935aa44c48aecbb0d3f0646614d36750ef126036828be76be580879961932a74f34bac9983fba0b970ac740f584152c5cbb4d6e3815e87701ada8d30a501abdb62ab173aa1a7a3199ca27cfb179895132089c038e40a273be45b471a1a1f70e7d176b7424e852b3f8c608193a7126588c5065cfc5a7117beb72f73ea8a836c8a15f12eca67f84051"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "38323137333338363331"_hex;
                s = "7b786c0a1baaf52fb84459e92afaf038bfe997c9a4d910303633fe2750b97448a15bb057b505683bc53ca4b18fff1dd90d1416bb8c0fb2c29550d7dda9c9a7f087386776fe65b1288c1f5508ba9468ed9328c9d6620e6882fc818c4ebe832df36dcb5d92837a711ea6f0d20b784235933d0c571e2d6061445ef5d1bc22d43378d2593b2a762114f687bcf59cadb4ecabf258d3e14a4bdea0b215828b2e7462439fcd4cb99518bb5d5dd9266d6dcd459bf36cf32cb8683067918a225c1685db5e52f9a5305cbe60a38df2babe901367eca57f9cfeee2955549ad9b99318b015ae19402a4dad7752e15b94b25b3414cc9be0c13421f31a41d0b1a3e43ce2c1d309"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "31313438363037323135"_hex;
                s = "642e3b94f8c5a0897b5787805c99b04af6c7a2ef47eae10ddcbf58e0f9411373920d1e4d769619f97182db36a9c38b6cd695a1d96daaa9c9288ddd4774f9e085dcb4829f1cd852239016dd23ceb1a493a1294e3d35104f48384acebfa0cbecdc114f445c63d8a1524e608d3f75172782b1c3169d5317902a6796688dd6b0112d0822a5c65a9ab31be84c939cecc4190dfc766cfd29b965ca02baccf2e3a68f13fa304b469c60d7eb49049d78dc1e0ed94daa273dfbde714024e62ba97cfc7b3d32fff034986518e0486124a6d6d33f40474182b2c235306c7d0d5088e7e733b0a895745a4bf4c187d2cdc9d6a8df7153b41f16305a15da7807c6bc69c313b4ca"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "38303433333530303635"_hex;
                s = "5ace1b9ce1f57901e8b8a90f033750f807e52361779bfd97c60f029cff8a70774c06781a2ec5d16116e0ea5170b99d0486eefafcff11f2780d7d04139e28e408a358b48ad55c0d62a357323d3ec759205df77c73f89e991f849114d8bfcfe4b6a4eafd86a9cf43500775b1cf4b4980c4f6eee17aef782eb7f94144ab1e7a0ab9c83ef2860c1429d4ac9174295f5aeeb6a3d5fd430807b9c2ec20e0e2cd1242e496e5470b733db52c857be5a65c604779d9e1bfa5a7bacbf2979f1e533278076f102b14efc321e905ae5285e50e3c9998036718b34cff35ea0c082735ea576acc2f18065c7e05df03d3fee209f1a8df7da5a07af3a4ab86e54edf85fe61343fef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "36363939343437303335"_hex;
                s = "30a1a557fc9651e08c004b23a5fc256b13f9f9221082f867643dd707fd5513de72b52d13bd1b1b6fd090fd816beb486813419bd9f426f9d4e8ec7e5c86d4228e3bfb899287b2354d5b720db60b68982e76ba2b14ed22b8bf849244c9ae6b55071bcefd4f7063d15ba43e0a5f747bef7373cb2dcbff6d511b030d3e13f628896406955a77573570305073d92c5cfb2a9c4d92f867c1801e63c8addba43ce3d7faf91af464f941faa48f28f549d897f93c074394137203a19176cbdb41bcff260b7b0053508956970e31f65807b40c3b7905da151b5520931ec5c470f020acb306fc6e969a89966fef4ab1c2a17fd5a112e0a841b853dd1449be32a3b52d2f6e89"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "393933353239323431"_hex;
                s = "1960aa85afb75f52a0bee917bd0afd51de8abbe1be7abfa7c8321f74e18921db7d53de052535c2b10c71c32ad84016a998980a89cacfbbda3543c399319538f3a216981ba938a53f52b0d5b078a6cef7047bebce6c5023db080172d90b868698a2909b2fde7013283707f9b74f3d800c39b0f5dcfed845791678c7696324abc97331702f2236620182fb528e2be595ad10161bd889ff688bde34950f2b2fbbb3983f76ca9224df04e2def7ada7dac4ba70d763e2bd7bf0b5a9d05e808f9e4426f04cc94e28510fd8b91a838f86c808851ed88fb0e4755afc73e5716e9e42d794e351a4f31000427336e7052849cc673b7e54547127e7e6f662caf6bc512d525e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "34323631373430353530"_hex;
                s = "596a2b36370dd115ba496109e5a9851b2ff58c2f9a5bfd1b26cdf3eabb840c49b46b6a6887e4c13c4b930b737649bdc56fb89168e46d91a1f1186adecd0fe867cec067c9a90e8e1a663880ec44006722d4a6888b83b764a864925de700b30a6b075204a8978800296d5eb0ef1f0dc9ac87c5fb7a4b2a7cd148566ed6eacdaffe22d914da5f2d6cedf7ada28593b548775d748a61b6ed22ab5934bda0c57782caf1f48a309c80bed4fcaacfae1dc0432847583aee8332eec9435e409fce2e0d3e14f6c4ccf121b8eea6f5b415894eba24ef066a08d5faa9231fe3e7767cd1fbdea7850db1aeaeda755dcbd8aec33a7dabf430bb7002754e38a70117b47d3f677e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "313233343030"_hex;
                s = "b8edfcc9ff6451ff5838c470232c4d0f358a88ff6344e62cf4cf9170576e6595fb22f6b2f3b2190a6f286745e39a300cfd368f82f86f12f81ad4f8546cafedb00a38bc85f8e240127fc232ef8287c7bbd35fdaf55ca849c9745ef2ed1371a84e77cdb07513a5e8dc4898e7a9c8c52a3e35b3682abba3b583123026b9840ae286148426c59b4c00566a147c6d89e039b28052a8974f966c2d77cbd26ad94f54ce987748374e88b7bcc4afd24582d408db9cf94906ae9d0039e1bd22ad8a23a8c379777ecac954540f1b13186369fe3480955cbef6090754b286c8e9adaa288b1024d94be0291d20e20a9eeb525d5e9a2e0e0b5cb4419802b308e27554ca3410a0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "48c590347b593cab642b07d49bc2229503ad8079dfa82e3ce1f014d1f0046c5862ea5d3d3c3f44705370b15079e1dda2627e3ae861fdff25eefbbb436400702816ff8c60aec8e2cae0e0fd2ea87a3c9ea03731fa2c5fc78299aea7629951cb71adf1608e5843b3f9c99f0c3ad37b6c85e0a271a1f5a07322433c5945f9a471e695c0ee81564a9bc613b73e0700a804d7c8196f160729b8f90167a6704761930bcc5aab75f2d5e71067e799833a8f4d8ed49ea17ec71a29bb9d20c96501241d97931e90b0f50db39a57829c615ca262d756744ba3422c3505484c79e964d840927331a1490889ee67ed1af681d350e0a1fc95b446c95e38a3c14af3236cfdff4d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "53dbcdc61acab0d966644f60bba8b9c78261f01afcbee95e206fae665c07fc69c13015941af7b684745191fb78387680a274838d1d9a3bd4b5f556406ed11e1879def7c2f018f57b317320013e9d4995f1610cb3cabb8f8cdbf718d5c3044317b000574244d5fb9fe664bbd40aeb0bd066d4ccfa224a49c3e9e3a3ae323690e5fe77a3c72d5dc752be7d68ecc38958a2bfa8e0c9365b5e546ca15fb95e205a30818b01b61fbf7a6709281b9cccc9a0c1119cb8c11c4fa2e5fea4affc477b1935b8ba738c39089f15c6fe0fec0c78b974646ea0ebb80ca5e8386d9803764704e7f16188a811de89379fab804717364cf9ec39371eaa416c628a55d2dc1a5b5ed9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "17b550ac168e25ebf6d1bd66ac30815cfdb680278793fec78b36e2f28d10c32892dd0af9950f8402ad8b54597472249aeb9563215e17a17ad8ffad7c4a1c14c4b92cd8dfc035cfaac6d662e27c0df6b1d787b7136a4abd5ef2abf805cfa68ac8eee0a6b5001b9fe8855a08526da1971d32d0a392424bbd37bd43f68b8119aa5c6ea33da817660ebc35d80c4d477af3363bdca4c976ec84f2aae2cffdf9ce517b50994e6a062f199d71323c532d57e76f8d89674c361e2275326589b142b4db8268a1b36425a7d70c57115df2bc9695d6dc2ad6f3850d0cfda545a8e87a75a49ad2838cd240f3461a285201a83dbb670851a9abcdb11f2b26d8c89f1ee4d44ee9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "11cb2f044d4bae43fa2c7bb967f8f3aef33716e0e519ad0c49570bd7288832239f71be6ab82b9bb96520972df4b45c8b85f0dcbd8aa6839506c8b44a990b20e0c2b58c313559f86aed3bd648d8a7ba5ef2af00b958eb89fd69a3107bdc519c60dffb21a20d4a37df7572b3e496db68ca86f9e85ff132016399bb0cde7a719bc1729df1b1b3e6e4dc1ac02246bda3de9ecd89ac14f4948da298da77e142586ac0d48854b4d1eca36a18af5221ce51789acbf772c06e436009a3b88540e593d4271babce1ecfd149fa5367338e82ff3b8983c8af02df99e37039a7d03f113dff043f598e3d68f3083ec3cd545a52a076487f7ff93c016538dd6fb9f947e87da716"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0dd16c3ccc10b280bc36c0104e7c5fe47107c1ba511d197357aa7a537e90f079a00385744a85a070804e9134a75fa73bf1c053162ed2e622ef1d3a1b9f117c47a7b68f9e1000bf851570987fbb9f8b5fd2bfc058f95f2bd12ca977e44f596df0a1c48de9d0c840732d94ac2f11156c9e739de8df8931efae8aa42cd6254b3fbe1405313e8b19ca86045edf87631bd219f6923b8dfd783ac9e7c913cf7348c7b5028b478898a366b893938a94d2fea92e78001ae2baaf5dc0c31e9b0d4619e0fde45414b0c5863c8826406d87b48fbe0c52164d0a8d1fd00b883ddae8e1235c846d51e5cb20d724576dfdfa01d15f47cbac56b17543fcdfe81dd70dca545ffdd0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b4be4a38ee2a87cf6893e02a75a448acd2346c5219c2aa0c63bb27faeb53853a932ec996cd8dc67ed310274887354a58ca507734c60a682ff7570ef31d50b8e112dc5b8a640287f291047f60c1fa4db04eeea9fd1772bb01930a500f89ae3ee300c93648d572e7fc25ce296ab44daed904e884d66f4f6f4765eb5190b1e6eaeab0b1083fb226e663c8f760fb4176c3ffddf6c86f5cebbf89f2a4c9617a73e79e5343fb210aef7bd7ddc00896c4e1788918b172dcfce416082fe63f0178dfaffacf7a84c0b9e089107f5698beeda6d54459ee3ce398bbd5f5005a5b13ba266bc7585105882c740df9441fdb0d0c2ffe752e2981309fe77c5770f58ede11f7266"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b4bd08dbfa97b4e0ad0f9ddcf392dbd608902c7cff7eba4fe7268a68e66518e1e2eb04b0985d2dd013ea7f86ba77dbe4bb30b58ca9149cc8f71e4d659e964d18359e94ca21855b6e1e282af43f02e74092972e0daa1a2d20134453774bf8597d6adaab757b2d8c3d863095c72d5ab1968d1552920c8ee8b559541b193cb832dab3f032f1972f66739fccb740c84d731a37c774b6fb33789b27f079814f50b23a4facbafb36dd721e24d410eb9ea1fb54c4c78656bed448a8e1b48112730b9b22a638dd97f22e03fa6e2ab3aca62877547ece4e348641c1c81e57162b96c549bea00be1aad93223a9ce371e63dbefba3fbd788dbea141290031f6798917a99d6b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90a7e1c953c7444771d279b730edbda10a1d180b626f767d1341997db61137e5c77b607675947b99ce16f80e072671e9f743102cf62c8183a13512219e13b2385242e35161e6e782e7230ae060443b49073855f8d976c98656004c76f63d970cbf070f52b800f3e07b9bc825a7c74925a348fda9aaf87458b4fa7c5395107e50ea84a3859b0f9a7721b63334217fad9bf814a8d846c806a939ba280f0bf8a64e324feac64bce471f0d11812f4bc8b93661455463245a02ec3ab0a1cff713daa6daaf1193eb08a6825392995f7a650acaaaa3e949ccb591e8efffb4eab216628e4874bb44bfe15ebfea71111e7216aadfab7a68c69fe99794f4f8b6016ae9ab17"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "18bd764174873263341771a783534921ccc5f3395ca96a3a57706bab1f78905c002f3cd6e1791e238a8ba6b9fddd74d4e758527bc3ce76a2d9b37e130bccb8e235f8388e54152f447346a580f4808bcc17dfa51c69c2625efee575314b609b8e30f1caf822411ba1cecbb2c295c76620ea1b64fadbd4a8b52ea398f60538f3a19fc9c7c5f7b7de802e16c290d635278590bc367b935eb7209547aa1cb378e54e2e383d8a2c67a69e790fcab540a51cf756c86a5fd0f337b14246eda65e9b8b85e6ebe62e89156a387e9d1b7206da72c0822d20a20637391956d473fea426505e6a541260b92cb4b66980592dcf92bfa71d264c575496dcc098bac82edd5c6dc1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8cbf2f83c768a45bc8995c69677ae76db889c0b8b88a12053ff5641544691bfab2d87b61e5e2ff9504755650ef62203a6c6017ff267b547ceb169db6b6273027c358687eab95e642d4a90a25900af1a0e157b18e0c303d0fd637ec0ae923762eba64a0e4488322f753f701bfb4b77ad4d38bcdebac763fe7836a43249704df10974a289dc5be46872aa7bd46d24fbcd6337bbb2fcfdd35c875a14e3ec03933a14ed65e60e6eccb6e79e19ab5eeddd73b4d57f28e9412acf3f3e29f8193be057f6b418aa6e80b43bfffc88cc4de78036512436dd01fddfa153459d4297c3d53cc9fc992efd71f2dcfc5c63fafdff5c1d818103645fb5762bbb6006a031224db30"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6083e24acbd4973b8e28bd22e996924252e306029c3db5c5353f3e4c505d36f1fb7e580823e21964f9206fbb158465f64b26089e1fd4b8bcb2abcc0384781bb005db9ca71467661cc7e8e6a1c6b5dc8ae646f0e6805920016228f400784906a2339f5e2385cf295506c2233b662a0e01609183261122b309a1874b34cc74242f3620e3dbc639a25a9e28c54e4d3db08d6a793ec468902cf0dffdc3ebcb0982ae7a96951ebf5e7640452ba0f5332273fd9bbe4dba26e7eb106c7ed16c8baa1f1d7e5d160482741e9512b78aa62a942cabbb38789e7bb380157bb42e6a71c580dba254cb8f59620f30ac809d3ed814c5ee0f3106b03806993d79ded94ab4c3b4d0"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "313233343030"_hex;
                s = "46df0cd49ca21a0ee84d8d8a2a632c3c3d4188008773c05b6e148f629c62b9dbf3d8b1df5bfebc16efb14e5ed10bb9cd53f815ec3906a2b6e9cccde64f52c23cdfd5605f8c8c2f62eadb0b2445fa79a4e667cb63b10bb9181e8ec11946054dbd13e9ca545cd9da945bd03ae1c4f8ed48555d2e71e1ba8d410a725fafbeee8ef6798fef9d3a9c6d48825c996da1f2215048916bdf96d294c987ca678d6b1606aefab2995b11ee071633eb1c4873c1252a38f3453482cc72ddc92f9f4764adf4327274118d9adbef6e8ddbde84ad7c6991f7155a1f77aab1d01f95931cf73d61925c19d66040e0f7d8bfc68977db948125dd81a0282b30b1942e0597b489c6c2e4"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );

                m = "313233343030"_hex;
                s = "21cd7d32c91362b709bc629d9e04b242604c325c9586dff3dc152efe3a05b1e2f1ce85265c94ace1f0ad3c50d327ca582e4b99363c5fc2ca40603676c774b3d706f7e0dfc31e0306f8835273facb8aa9c6503bcff6af471875f8a4bcb5b5b6405ec22e7bcac9fb7fa2ca84cfac60f1190f3dab9ba34ab1304e07e2fa9a25cea4c459e78e05299db7497d4301e05eba538f7845bef4720fede2b541501a6ebcab62a04a1ffdddddff8146513802fa495277ce5f0244213786dea4d5a6d02fcd93cd414907c557107cc53fa5c5409f2fa0d592cba79273c9b9d4deb8d23198909b712198be83c955a915e5529c634d8375dc0559d72e30ea9f47547f6d2d52529b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2746d7d48ff2f17364c40a0df277242656af6ccfa89802d6c31ec32388561fbd261c85cc03e2599b845e23ec90493f637a3c1d090b2604cf5c3ecba9b09078560e75523595923910f688e91337185c4d0978623bae7c33d1c3b50d83794c0a5a44a5309ba1d39f3c5dc3b31661c895aba0489cd392290135108cce56794ccea491ab424bac4405cb90a72ab53042b3fa863222c41d156ca0e752f733eb588bd9532ac422beeffac4c01c37262f49fe7e3f9dff3f993eac7b1adaf153805e1b44f7539e04a38c19579764a6d8c0634fcab0cc22ce41051968eeeb44f17fed7ae959d5199ee5e0896a964eefce583b8e0984f41a26d0bdc306b46d97b29d587f88"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39610ebb7505fe8853dd2d4bb0c3a3490b669465c4c83080d643337209802c9b6a11e6c79481cb540616c7f877ac58bba08cf3f93ccd6deac0e8227581aa73461fdcc8908242468a4c57111c637712a1ce5eae6bdbbbdeb085aeccb2cc2479d502260c1d1ff63759d27f58ecdf87fecf5d23072f709b5aa811dbdb067aa394c272c270bd8ed1c9d0491fccad73b74a4b46e2f8fec3e2427661360c41be306015e43364bb459a8c3cd1797fc4a89be3a520396320427f12de28d3001ae257fd98a4f0f906781a2ff696bf51346c92545bd18c37168d943480ad1ea9dcb47a2cc6854bbf7456f205121f1f4f5beb6519521a91711aa157d2441b9bea9a29ccba7c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "681d7afacadf19dab9252fbc35ba86a8d34f4786759251a91dba18872a070af39e5b3e9a12886b6388cc59d2f83bf19a09d1cf6cdf32f0f57cb70ae8df8d623bc7c2a45a344b02482cdd026b4207735bae6089831c8ef3d97428288e363bdfcf6d313fede6728240af8f069f9b6d7b57e029aab5b92e3dd3627f1d1a9a242de3e14a4cf5025f9a3ba2ddda23080f3d250db320c354158c2a7e530ea77ef38583ba1d3bb2141b053c9466c043e4cc261256baddf57bed45c9a491b49f56d3584a3d6b0df5843408b0287b850e88c43140fa32cfe5da29d06ee051bb0b0013fa6c5b6ef6ea025d106f8be8166a9214e1f77cb19e985298e6d71d8c00b920ae298c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "02eae2703879522f6660221dc98a84a1a5bf69d2198864da83a633d0eef56d83950645ff9878bf12618ec8cff826c6e3d955d82bc7f6d10ac207467c373d7c7ce8d6db7eb9e966ded3c78a89abae180eb1262b80a976b32d77642f39ebc4388d2844ad2414ba6a0af1b263bfb44f16f6d3bdf44417ac31182a840c83848f1e60b36525b0135bca9718b9c6e8c06ad3c62eb07eb0f7c52793a388edab9b3e37ead929babb8a866645751ded5d331efde2d8363179188bd14ad323dc0f9d343c4c3d07c20a5ed6ad02102d3c804fcefbd43e848d2acaa632eca2e72dcbd2200b5b595868ef1a115336f754a164292c7b465e9d07ed64f0397cf3664fd6f87e0c1e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6b8dc366eae1348b770019d1a2d2a3a075eda36f99c1202902bf44c50b3ec8e75c0415eebdc61d70f37c8280b5ae6b2e03ddd0b1f15c6944cde9433b0837265b8cd658f21029b091832ee28c5047db21de4029b0ee17369f99dbfcc2a4ad42dcc58e210673154b4fa1474dbd684f9c7639c0856d936c8b7fdc437bec8d6f8754cd9577639b14413ab7b30ed236440516837f820a0b0e146c48706d534bf03841f3c0172bd698eb8356332d2565dbeb5143a822a0a4b978182618913e64faa71a15d454bc05accb74d1338a4e66ea77e690a6238c90b84a5261b17c6d2fe947c37bbbae99aea0742f6559d6177a272db4d51047a206b804a590edad0f7af7c078"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "96a051980a5db77b94a7adc32f73973dcfcd62e95b0e0d2e084410c37f65b50d018e9946334fa5d268a6848dc164db1d012c5d42da613d9d167dc13723b334acfbb472d32027ee6b52903fb8fc07c1a8ca31156fd73568d3a1d933d144d0f263a2adae751e8d4fb5b949adb34075a6fa59ddfcc49399f9d01dc8d8733be47f2ecfb396a3cfe40d619be4436767f76d0089b845f4a265a5ffbacb69dfcaa68de6b34b6c5b1433e149b3bdca5bc72b98617757a1242b46f1fd0d7d0a7af75adb950433e1b7584fa2de51b93231dd73512cee728a3e6f7cb95177072dcfd25362da537fd4134887ab1b536979f3969a02cdc2f3699e394b001ab227df7daa175b75"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5bac3103062a5726a57876fabce9d113f9816f30f0330ac8bf0797ebd41c5326ea693ed7a3db0af251ef268fa95ee1165ee3d5fba2630fa75c346ae422c3d14d25e16eb1c3b762d9ace379ad5006e8568b2b494c7cbb90fb7589b607da24cb8cd6a4d851ca4bc6741819ddf9acb7b3cb50cd4356b634ad2778446146b4912b9da430921bff3a8cc7e330e82a38bd9f69eaf47859b5199cceea0b9d111dbde5e20a8451fd989685986172e4f69ba2983c301c51e57ddc457af8feac9709d84d9b3c70fbba423abba4cca6eab1fff42acdeec5ec89936c4ea8f837b01eff954d13fbcfe8731a6c7cc9271a805a98b8877f364335ea239003cc6259aebb922d2f97"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1e108ddf1d6d931dd568fcde1e11971dcd86b409699909d4c2689ac17fcf0cde9bc27d10f9f2870113cc61f9983d1ec5e4b1b5f8ad0e488a991f1455c5ad4f721056e54d11b77dc7ba73bd3caaeb89c21141f0010501c9f72a3fcd4d7e7e59f701df032fa392bf82a1de9ff9f6c15ef2b0a54201f787bd87ba4fc9696065e5db96cae4b61f66294396eeea94c1c0ac10dd8f1cae928c7b7ffa84a866d69d450f072f746a4af20d4b39d26cbee43b227e96c4ef5ede5aa043d51c6a5e94c8a59758f9b42133cff0b01c365fed57d189106c4e38cc73efe7165aaa76b2a2fb0a2c41536673234c4116a7445dd9fc93e0f27eab8e5d4c19a712e09840151e44053f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4877085bc45b4e538a2f25755ca410032a01af460523bea0ee1da767d73688adf09d8b300c5000d74456a55806dcfa1e1b1c787a69fff295215772173649fbf96c17c858d4be9a7ab9b7b3189243edb997af6a0100f554e368169b115cf44dd1b48665407dfccb41edefa356c297315fe5d32ae91e21705d6002c4c624c4b896dd6024839b0113fc71129052330a309892c13cf5c68ef722d637e97661366d40f8079c5c789857471d73fba4f468a6c26c21e65659b5fe28fea0e34fd47765119e41d3a12a148181a78f85c80446e2de5b42c42b354d710a4f6237a830a59e7952560a8ffce402845c38e9d4a0202e3d4d8a035298e4b48025e03e62bc6c1ff0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "49626bd98377f1d2e571a9d9193bcde1c29affe17806554991680beabef4012c73fdccd5854b7dd65a3aff868688b6d4553f79ea5fe9f04d3f6afaef95665502254b1528dd35e14a0d33e7104210ca91397ac766bc7fde1a030b6e2d38ad4d69d05557464602c040888fb6f15f465a61276e6730bb3106908f60e431afa8c1127c82b0f23ddee410e3c5e73691fb6d76f2b6405348728d78a520561fbb3199296dc8b7d43e0190161a289923a1178409b43810e5b710dd74ba5dfad6a9a35675fed1584728f9d222e9b115f83900b6ea833eb28bc856d5b706bca47ff2ca2113e1a7ba969a0de3319d9f815670575b85e216dff8884cec20b56a3bf51836f206"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7df9adda89f83abbdf0e3493578461fb8e01f59dc1046fd01acb4f9c79a9a5f95f7d73dc0a9dff9ac4b03b6853a5e788da820a54e0dc71cd5f4c6e7e191ef985ac99fe3b79e578df13dba521da8082f7addf6af7ef4df649fbae8c9d58b7419f551ad67f061e1653d26ecc41f9dff8dea236462f0da7bb34bea890e21882437d9fa8f675954e1c72a8ae235bbcfea0b72a963435e7c69d7c5be86fcd79a50ecbd53e33f7d3eff268ee87b0cf634a7a9ab2fa3503e8df254bb2f223c1d2a9da9cabbab948ab3b29f53e70cc7ed859e5c3c1c66ee02b2475c86c30b148c640d67d7df0879fd14b4af9fa19a68d6bd3cb866c94db166ef12827b67448d7c316b388"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "87ec6a8c3c3f5db0d85630bd76ff0a99007eeb8675ae68f1394c25e1af4f340051626d2da40df653dcb71894b4f292a6c0dc329c9aa8f599418839890089081ca3910f860e1cdfeb9ab1256a0f45ffeeeac861dc6471a902375de4287b05cc59d8cd5b84ff90e951d0b0c574f3f3d63a617ba1e3eae41c931a276af8772fd0d2097d4acd1cce8fd62ea2958d248efa8b96f3aa5afba396b17e290e6a992ee4cd0124810255d4441eb679a47c726eb784201395402b4f144f48c6fb63accd25efab39b6f57373289b33774cc8af37cb2a4b43ceb72a04fc80f2757081ea8f27caea1861296881bd948bd24458892f5cdd1bafb70ae486984af83cbef4fdfc0cc4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a895755f2494f5c35e7203da9ddc02180c77cb1b994f59020ec72f5174ffa59a717a7e7d0ed38f8636907c9eb34807da4c43362f342d5ab0179fdd26885456cc69a4a5cf9e95a0b23c800829eda15fceeeb3b454d5ab920d0044a3cfdecf4c434f28484d3afa70a488839fbc63df9a191c3ee3b5df0598eba155bc962312633bab04b48d47110f19c97facb6ea3d3838e1f441851bcb06ed395a1fc6f6370e065094939dbdec28fb6396cb062eee524853f151a1d2201e51d2daa6680465ed2cef8d6cd36aa43f7734754b9f499620d956c2cd6fd0c2ca3173fdad368436d8313e148085d22c7931fee7ff58d4d09334816c211c1532f1086dd197bfa4b2f628"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0ae88987b001f5a5d5d7b257a57fc2c37f642f136717171fce28430495deefb9407997b9e648b0aaeff568acb3e5b53e657b417e9cd8da5279a52c038d965743096c2d533c25ea98cd747ca5d719f43cc2daca426cf7bee205bf89c225a0817d59079b8162c6022ad029d0946eb99e8e44ec0898c9892614c0c48906df99219275a04fc1efe92d5d6bf98c90a5ac469a36f47a0f23889fd18da1b38ef112dafb696f536bbd04e6c966a9ba326bbd638d82b6d7661916b7bd7d3d4ac426e9f0fd527918505a6027b8dd716a3966fb439cc4a130a13014238c5f104d754fbfec2f1c780b49aaf803618c2a8b69ec7d0f09855cb1019878f52df13c4492a480dce7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ab3c8cf8b99a2bf882153ef1ad6db449e1edf673a01e014b40d1a23fcb38fba21bd63ccd9df9a0849d59c41520946d46fd26fed9ed4bd65ba0e00705c119ebfcdf31ced34433ecdf9b4170f9990c2a26c4afddd284b7e134b9ba8b6d0d41624a169b8f4ebec7a87d0de0ee7870c99d4d05146a7b71c94606fd178aa655c3edba0f764f3292d76217d4349f90d0919c42c35be21613fcaf824e16ab3f45ef17c14255975cb85f7e1f5ddbc0151ac4961f68a331b97737b171e93c01a0f4605c7256de93ce1e1cc8f5175838999c734809bdaf8b95edfac0d5f98c3de33ad6399e8207a8015373e1f5ed76e304b5e2ac260bbed23c662c38b6f29dcb01faa4894"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5a7e549f99c138d3fa7ede3ad655473f78c3a8de650bf8db6a5116f0807e5df84445ed72ea6a82a8150db352b85210e120818da13d9800d15823f5780b6051e51bf4488654e6a93c95d19b45378744483b43b37200d933775d2f84a7719cdff6dae2e15716c86a9c5a0042a5268cdc7b5e1860c150d85253573787b2839fedf64df3d54c977f63e7bfaf3168f0153e2ef019244e5cdd9be69b421607fef727bd5442ada4bab802ac9fc0c0044eb5b435a9caf217732b6740571bf9f7b1b3fd83da8d4c806a7e2241e37cd0d06abae28ac5a83ae3b2f81f3374dbea97e46c66e821226fc7cf0b0af2dcbdb7c5cff641775c81fea4c8cb9309e989bca04a4a5d3d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4975c3fd6358989938633d07cf7bf0121c8a8c987fde1cac405924ab88c5a3175d27207ebbfe42b24404227e388b11d92bbbacbbcf152d3fac0166acb868f908515903e37da98e96aea367c179530a43f78d877cf0838333fcea303cf6710f046513f01d586bc54b42bfcf5dd47b1a01ea8b95aafb4b9406888b3266445f749b1c56459ce4e10a57edc59f610b8b74edf9987c9888460108a11525d0e7228ba5eb9472a0fada1d056c8b0d08efee2761107595c6b221716b6782c27bd7755f1a23aef6cb966a31471921594a1de17ebc7e5b52b933ae52a0794bf4bcd1a792e78a47f019698a37d0d389ca2040c0d3758eedf0fa810041574b32938d290cfb45"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "881dc4bf8b2c6c17e10bef3dab327b4cbb76413a7e5afbd24f198fa461bce9392d31f0a11d69bd67b75fa30ff2100dcd52b8e0c24c91b0196d172ae3fc1d40fb167b2abdce4b83fed365b9d5946a333d0f669d99edf7b8a3a1c8ddf2397cb77bcb62aecf818807d696af4f186bf2e0628ddb1b9d45dcd6eb965dd1b5eb2bade60fbf5b2ae816f45f9e0ad024039bf64c081e37630d6db51a368e92256268178aebd32963a07693f828d01eebaad0fa04e0ff29d8c7ae681be4ec16d2a6bafc1573e38f58c6c2c36a5d5a2ae7718adb1390770d9a3882f895b3f0fee16a2bdc743b0906567b6938d73a666cc33d85142359d40eabbc1da65ae616c7818f86fe1a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15872263f8270e7ae9d3127a9b677828cae2077e534ea349070289394d13599392b5f803f8dbfe40a5487223dda2a3c6f30ddc92c4e6d9d22e7d0d2b60197e032f188da35457273ce5518b426196c952d0219ff6190fce905d856d491b00999821ce8d1ea4b18f3423ebad242bc846e0af408f21cddbf44e9e5f5d300d71a3b104eaa2230ee633d2ea44016af735cd5ed9c7b421f322781547bcbb0cd95e4780412f734bf681bb47abd46b158d251ec92056553ac06a59c4ba7fd20bfe50cc58386832b52e548df345b086b5757c4c9f2e133131becc90a72ec6c313e7664dbc922c87a90364bfc746a425df77c9b97dc2afecb2cc36fec415a4e1c6a957b4b3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6de50a9911893547ab56065d2953038768cd0689a63b0703c0dc99e7cda412ff49eca503671f068635f69b38c0627427f02785b3870c6791add37d436a81538e6fe3dd0eafdb50a18d2f2d97e3cba062fc8343a6dfd448c11997d1c5bf6e1895e09ab435ebb16052c20347f4d077c6c7779297a29e76e49cdf0d10713fce20ab51d273febaffd0679a1ed56da5c0430a90a5fca1ec2010293b2eb8fe34a732ef4679318fc5682cd8796d57be09904043961d5171fa3230674501544e3d5482f510afeb0ee4ba9fd1cfe5ba5527c9c32ff09df579884d4a5b0351cefa07baf40961412348b6846fce5bd6d65a5438821218d677e774828108ad805f574ce7b597"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1f47ac7fd4585ea42ab08e1002f547dc78dbacda00eb2b3e74d0e46d45ffa8fa7b35d7afdf605b2da772bf54843f15297bcc6f52eeecaefe1c26108c35f9059c8223767c19597f4470de5028b6c522aefc5b61d545ebd6d3312cc092d1fc2a70c524fe0256029d3d357975215b2bb62336c4f4923eaa0cc422a3a088b86f4e0d81b6b4e04c21808a19ac229f2657edd42a6c41e883e69a916717b59fc6980d79884eae5ea918022da28ce2f8e52a2e5dd50d2d2969748c2d97525e672c12113f605b8c4bfcbfdca05bd85285d8fe6d22b73d3b04fafd453cfa7267cefdb5281900389ff53bb4dc3bf0dc366d86912d822410e8f77f33392c0c27fed3659da463"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7922bfdd4da222918c573184b1d81a14fe87eca0a30c55f9167ad8144ea06a9d22b108a41437b42aa08afac44e7661f7b4c6293897426cb2e960aff163613349b3581cbd3a884ff9898c45c5c213d996cdc1cc119dbcd7e0e99ed08f99f8b69f8aa079cc6d15006697d4a7fc5bcfd349fcf26f43b6f5074db8e448bc92ab8442b27e82643a11842a0dc70b822cf7ae26e90791f67d25a321aec24ccd7553e631bce74888c43d9ecd18e77fc24615ec445b7d7ee83aaf63c0733da25ecd512f7dc7eec6e3fb499d7eee6165c78a4275a9e6fdcb1b962f38c8139da5089565b39c6d73739f84c70ed60e2c83bb4f351d4c87cba2cf6c68b9879e283b9c5e3de1c8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8a7e600a6675a06e677ff1344fd53a8dd2b99fcca40c2ab799636663594ac3fe2a510bf1e3ec4ca9dd28cced48b4e8457ed74f4ec2adf31b77ff1bfabd0f80c9ab4688f15630406d8ca31edaa3a3cc7980ba1b760cfbd3ff9016e1f3fa0c34cb59378b0f3745b451fd3e053c8711ecc41feaaf350980532a7db67afc35f00da1f191ff4f66b8e7e27368bc26160f540af784e8ecb38e2dadf4be82e4b761626c5c06efe0dada642eb26f12d1ee96684a5ef8e5feeeb0da9ef432647336e4ec715cfa260a8727aec4a080738086ad26b51355b8bfaf1b135e97d108b36c73b436cc5cb59593a7ce0f0e7483152319fceb37479451eeea098a8eeb0dee19756e03"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bd31c7a02691d2d9587ef6a946ff788544ccadd4b2988ad62086792a6bf96c8616b4ad13317d2270b901d0fcd1d880cb8f52fb87304a5258c11b38dfeae8df670aeee7ea1d0d9df8e00e80847e41e5989ed402d44e78b30fef17b5671d3adbf8685e4dc204499ecd1863e1d5aff28a7cf66eadf31fec9236c120add13451522c647c9832a672cd64d328c1c322183f4661d09bda60b8dd5f0328da5420821424afdabb1a80c5d12763a1b0238cd89d0742bfc50b6a2fcb701d824218f9826f4f78a23a2b5aa42ace7f175376fb6cbdb2bad293ba583d4d31c6b8f9029e46b13689249855f505756e00e225a6a45a18769bd8d2b3a4acb9f1c23d3e51882561e4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bd31c7a02691d2d9587ef6a946ff788544ccadd4b2988ad62086792a6bf96c8616b4ad13317d2270b901d0fcd1d880cb8f52fb87304a5258c11b38dfeae8df670aeee7ea1d0d9df8e00e80847e41e5989ed402d44e78b30fef17b5671d3adbf8685e4dc204499ecd1863e1d5aff28a7cf66eadf31fec9236c120add13451522c647c9832a672cd64d328c1c322183f4661d09bda60b8dd5f0328da5420821424afdabb1a80c5d12763a1b0238cd89d0742bfc50b6a2fcb701d824218f9826f4f78a23a2b5aa42ace7f175376fb6cbdb2bad293ba583d4d31c6b8f9029e46b13689249855f505756e00e225a6a45a18769bd8d2b3a4acb9f1c23d3e51882561e5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "02434e9e1dae423d37dfb95326963c911a6b37e7265cc75d964b4ae85c96adf5ed09af2e1df19ececa13b72f38b23be435446e8b1ee5a8d4cdcf0b511bad18a217084d49118b08be7f7db5d09974d32551e20464b588d998e6c4cde5c27954fc9c91ae301d1aee3049e6f95e9efc6260fc336b087ba7807e6a819e5de27329dccc36f176d3802401557b21a26a028c5a30e3f2f6698394e640154897f1a3323bf35f496dd7802f832a82a95b9229e062e187faf5341778e69165bcd299affa7aa4fe0d57c3a1c22136b05a95b68033bf9e777e8252bb2a106c9c613c396ca2d01ca301ae8271981071a1223923137b8ce0ecb910b24766fdd69487e90bc3f00800"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000bb9473d3a8cc4abd63c6f2ac13e278a9cd1dda844fdbd13e9b77cdd52c1b05ac59126e45d276777e8b1bc423cb261d29675988954c9ddc38bb9a67bec5e03e1e780915333dfe494dd8a4f0bfa0d748805885c389d6f7fb6f786c58d21a468b3589346d70e1153e29dcdb91dec8ac185501efea247bac7c63e3c546ed635e647097bae3b8ccb992701a75d209c439c5dbe8122da616a4e230bce08f541abff854fb93c87fdde0fb457c44b2783568bcbbfbba611d8e984410d360c4ec3732cb69426a94191d5a0cb33149b518ded86864706c723b27228d74836513191cebc790793e5809287b0279e7bc82f266d437d192e98975960d0014dd02e172b7fe251"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0bb9473d3a8cc4abd63c6f2ac13e278a9cd1dda844fdbd13e9b77cdd52c1b05ac59126e45d276777e8b1bc423cb261d29675988954c9ddc38bb9a67bec5e03e1e780915333dfe494dd8a4f0bfa0d748805885c389d6f7fb6f786c58d21a468b3589346d70e1153e29dcdb91dec8ac185501efea247bac7c63e3c546ed635e647097bae3b8ccb992701a75d209c439c5dbe8122da616a4e230bce08f541abff854fb93c87fdde0fb457c44b2783568bcbbfbba611d8e984410d360c4ec3732cb69426a94191d5a0cb33149b518ded86864706c723b27228d74836513191cebc790793e5809287b0279e7bc82f266d437d192e98975960d0014dd02e172b7fe2510000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000bb9473d3a8cc4abd63c6f2ac13e278a9cd1dda844fdbd13e9b77cdd52c1b05ac59126e45d276777e8b1bc423cb261d29675988954c9ddc38bb9a67bec5e03e1e780915333dfe494dd8a4f0bfa0d748805885c389d6f7fb6f786c58d21a468b3589346d70e1153e29dcdb91dec8ac185501efea247bac7c63e3c546ed635e647097bae3b8ccb992701a75d209c439c5dbe8122da616a4e230bce08f541abff854fb93c87fdde0fb457c44b2783568bcbbfbba611d8e984410d360c4ec3732cb69426a94191d5a0cb33149b518ded86864706c723b27228d74836513191cebc790793e5809287b0279e7bc82f266d437d192e98975960d0014dd02e172b7f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3598f87916b45e657df63a839c7e544953c0039477b396a276d8df752b0a98192a10fdf431033353f8565c6de1b268f4ccb44c00ce760c67e97409271c55055b3ea885d742def2c6cd32f5fed077193d12bd48d78130353ad4aca34d9148bfe80d8ea455c3ce4b24f70131908e1947feae311e29e0ae9d1074ba73124568468e34c8b073283d16359c530ea613adb4de2ba94ebc470a57055571ef9f575c068e00de09b6d1af2051b93079ddc683090d4427847b4b9ed63a34a01d9aeeef00524278ff54b7d2955ccae5ca1001ee7588f5a21166dde7b2941a6136b38d374aac73752bcfd3e700066b2972c66cef76a48d81811e26fc7646974a149708ae2d21"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "201aa402275f3c75bfd46a1f099c0b5613e862461adf57d3d94a95951d44a81c0cddd86ecdfcbeee7c890ab999d05ea0795f4bcf7a62e2a1807599b33d9548a8bdcc6f1d0e8c06243995e64dfd9b2ecb7175d0062660f14d5da369fc56dae52aa9c07e18cf8314989973d3433e15691c469eeebeb05dd3ad30e8c496819af126572b14f73c173620049a512a789f0caa515b04100d49b43b1044d70d7eda9f68d7fd227586897bddbeab4499faec6417d67108c88f27898633028341426774c3b3c3bca8c4d3e18df8c0b07da56e6c00dbd770f3e848777b273e0d7afa5394ef29a54c3a6451e571ed9933b54c2456212c991fe8c5cab8bfcd77a7c7521419fb"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA1 signature verification failed", [&]() {
                    assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA1 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_2048_sha1_mgf1_20_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_misc_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_pss_misc_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   WeakHash - The key for this test vector uses a weak hash function.
        {
            auto n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(0U);
            {
                auto m = "313233343030"_hex;
                auto s = "88f4676b502e365dfd82805ac1db27d1107d1516431ab4f71107b62625b6275af4a5dbfd8314fae255820c0cb577ee2457f510851d2678e4ed3e6839848aca8b67c9ce52c5bf57a01b6683828d03470034b136e6ab1914adbb1d918fdc31f7cef6f44b0b0ba0dbd6c1d3c8d7699ce374dc86c28beb3bee8f81f41162344e688af0d91297da0dd5e8104a5440add89bdc6c05d20a164c0f079b78654f038d443743f94bc45762501034a32b5d05bb86e75dd9a171c81dbe43edf50b2e1fc24297375331d78a8f0399d4aebbeeed911f6d964049e67d89eec0e95443af2ceb37125ea8431cbad2d8416fc15fb9cbed9142fb8cb06dc7ceafac056cc1f6696e3d93"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(20U);
            {
                auto m = "313233343030"_hex;
                auto s = "a85f06875b529ca61b60df404652e79a499f81a0591bafa3377b80d8e300cbae679a941832eb5569fb88c9f8629e3c2ebf5f32ffe43767d1eaf59016f5904de3f7d39cb470dfc5fb5678fcd7b55d1a30f716b7f04c2568f3c1a2bc780e974a363adc622e679902e966af183d874b35396423d1a263bb1c6e7330179671644c6953cd795a19e2fe4208e7da5244e4760dde142313a781a55b0baf866dc158812a723d74911c8717a512d722669193f8883b1cffac98de8473b7a77198e20560c0c21207e00fc7dd14385fabdd530d568d143ddbee8d1b502f7b194b9827eee9472f2be8b2a541124405582bff393412f6aba9c42e5824d7c24bdd4d82d925d066"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(28U);
            {
                auto m = "313233343030"_hex;
                auto s = "8189776015db3a51805f6bf71aa1214ee07f7e385510ea95a0d4c3d53bc0d59f07ca39af40fe8c3138cf6f4ba0f72a3397df6ffda9cf49e467a34d92ec772f6b6d51d52cef86d16f74bea798a85aac873cd4d5d3a0fbbb618998f4b2b691bc14fe1f235601c51a76c4eacd1a33975d9c3cdf1daf579fb943556f0febd948d1b1e15cc85edf486b00499fa9032b6b801b5ae4454c94d7f89dc1fa6dd6a927969b14a4bdf51caf7cc8a87ae05d41e1933849acc5fcb0f478f1e23a0f476372837ade82f8ed1809e2245062009b8e683f563029ddb9892a398dbc2df594c12fb4a0f0c551abdf2fee4cb325fe9800ea741f7b2f2b4db370939bc7e3ea95ab539b10"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(32U);
            {
                auto m = "313233343030"_hex;
                auto s = "49e060ccb577eb614274db1ad34249490d1cab2b8d3ae2b708b93c8a8ead302e6efb8d26644d5caa5f62b89f3949942d07470c37d8878eb5cc9c154701feea36ac66d0a9723fb316f7ad6226f634346c17ef47b3e19c7b9979d60118959a5b35cc188200c8f9b2723046f480d95a9a0af07e648225dc35114d8199a431ccf4f44fe8e8c9c0130aa819aeecb09f95eea8f6d89981c05cc82716fe7ea499c55460c95e99871aba1ad3ac3bdbc96850863b23e3e6659ca346ee0e186ad717a8ec9c7a548d8fed0e7b79f896722659ec7e1335de12f361d5e6c65c791441c3c0020de48e60f200c3ab79fe0179513b2c1592e2f0064ba4799f6a0eea199da77d174a"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(48U);
            {
                auto m = "313233343030"_hex;
                auto s = "2d4216f277e50736d41cda2191faa97fa99d9e325b34926a363f8dd73c901153f087ac206cf3cb25001dffbb6200b7b35565b466f46f23aafb872e5c39d26156d36d1bab19382e5f15873022e64b58c129d38eee8126130f6210fa5ffb697bb3dcddbd99a9b60b53b25d094f9ec9b7a1cdcd0cc74a3ac478c7a34cc22c7e30e952bfac85638678b8aa2341fb1f108114d43dc849d91a3b174b0dd62f6dfb96459d4c76ab5fb6479d68d690d4a5c120c42a4bf82a8a7e9e7aba127fd5fda3f4c6ffbf2e4eeb72ee695cfeb286ec99e7cee8cf300e4e149cf17e70cf9f2bdb6421087916e945bca42a70a88b1a87e7ca3ac0a1bf2ab1a65ebab7726994a6c9597e"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(64U);
            {
                auto m = "313233343030"_hex;
                auto s = "b66294f7b1e1a673e566c59f9abf264860200763860cbd666e476dbbd61fc39136353ab74299cbfb64bff88ed51cf9a20694e832fd97235d31ec6aef386ad44487d3753cc1224dbd59a34babc3eb8b538c10705775a27fa88ae35c0f618e0b3c6b91d999fdec5b86f15d1e462feea3af6fa12a5234d526e82039e1df013ef1cc6056221b81d755a13b70c618cefc6dedcc3361b5a910fcd4a812ae48382fddd75d5b51ca3d243dac021aeeaf6e2bd4aed75d7ff6d81c9aaee2356e3d12192b5e75d006b124275b0daec06b5af29b0d3e85f057db59db4b887fdd2bd0a33865eb87e8f3e37b4d8621e2e41c760a973f1ba03722d42bf5b921380b71fea949cf0b"_hex;
                auto r = true; // result = acceptable - flags: ['WeakHash']
                auto d = eosio::sha1( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha1( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA1 signature" );
            }
        } // End of Google's Wycheproof tests
    EOSIO_TEST_END // rsa_pss_mgf1_sha1_test

    EOSIO_TEST_BEGIN(rsa_pss_mgf1_sha256_test)
        // NIST FIPS 186-4 test vectors
        // Generated from: 'SigVerPSS_186-3.rsp'
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.1
        // "FIPS186-3 - SigVer RSA PKCS#1 RSASSA-PSS" information for "rsa2_check"
        // Combinations selected: Mod Size 1024 with SHA-256(Salt len: 20); Mod Size 2048 with SHA-256(Salt len: 32) ; Mod Size 3072 with SHA-256(Salt len: 0)
        // Generated on Wed May 18 13:42:19 2011
        {
            // [mod = 1024]
            auto n = "bf15c7a344db52c3da4c73bbe1aa9e43a24cc3ccdfa6dcb994e29846401f3d5ec9138756487def58d4bc5082baa8e93c840405d36ef37f59594d01f0665edb27cee3b6b647437405652cf809200597b0de806ea9ae20799400fe24bb3496d92e65ab5718c61ea24e302b2414f4a6ac1c99a4177de0f83882d638c46c95e2412b"_hex;
            auto e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77"_hex;
            auto m = "14ccaca3e4e313a960023ce1ea1335a9b29b47bdd7463466cfc7bdef08de6759cfba7f5072825c5da12fe45c1a9c523186e036b79ddbbcf9910f32a5aab1c5bd2d008b9083d6c7e9977d688680c3d2cb6051e1b88c382b19edcd86fca6b7cb68f646d94c6007dcb60a95cf4564b13fe1099552a9ea86092da9a9c2de431701c3"_hex;
            auto s = "93e0eab6ad774d35fbf94f2226072c7b6dd9edb54377ab7d8c8f8c1f125b62536334d953d3c610ff9aaf04b1962cf30ec213a6022ddbdbdad67084db957853a4d35eb644e1dcf8ff82b26a74738271b2394b5a063de453ae5c0968034dc7ca12f9d1c11ac213e801794a00eec5d3ca9469a47ba7b932259be0aaf13d41302c05"_hex;
            auto r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            auto d = eosio::sha256( (const char*)m.data(), m.size() );
            auto l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77"_hex;
            m = "0b95962764ca7454c8212a4407782e6174248c5898db391d28d2a42f35228f1da3701d49dccd2cecc5dbe45af23190881601adcbbdf841e23d666f37e99f476289a1e3ef07f7af616bdd087609a409adf958a106c8a1e9096de7b5097fb96aaaa5700fa14d0fa6bba16ebc21b6983fda07719091239cd999a29ba12e5d389dfe"_hex;
            s = "7287a0b4db04c8c795018cf818a170b152309ee195cb239d22c70eb248e1db54dcf0c0f6c8a311bd07c7051218e53c41e94d0c67707d0a69f5bd9cd1abc5e01cdbe70d4abc75a8536bad424d94ce160d71104b89d920fbdddf8da741178bbbf315c3e9fa9cfdaacd41a55a86eb143c1fce55f0bac0b5e08c9dffdad05485031d"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067109f"_hex;
            m = "e5494be79aa11936c226d26f260c2a8baa36c7a4d2a9eb068640528812a15e1d716f71a6cbc29a0a3cd47589d7fd4c4debe1824284e8322835ee13e7153c9f2208b7740e4058fa8503dc4656aebd3ee0fa60fedf7e907b85752b66cdc21b540c31881bc8004c7fce9ea80e7fb235486b5f1d0321c68a0e44cd5f15e21f27c402"_hex;
            s = "983e58dd64d1dc369a71485a497f9242a527bb285e5039e88f997a30fbdd32f3022c453218e22f0180c3f753bc0d6e3d695ebde88e8963571adb68510c1e40d84ac83785cea9ef84bdd3957e98d718c7a97b22f692dfa9d1273a97ce9446794fd193ec3d9354caad1b7bfcddf82505f8a963f7759d108b7a67a57aa7cce3c84b"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77"_hex;
            m = "3620220deb2101077555298267995366d834f856ac0cb687151af5d3581bca09d5881c8842c9050c37a67ac7effe2fb44dbbb5281d05e5aa9db682043b0e1a9aa1a92dfbefad92b64748156f8f5a6531726e2e06a8ef82c578997d2c7b2d292ea2699f8e7a376fadaf2542a1d015be865135aa19d6325383afa92e729edfbe6e"_hex;
            s = "3e9d528a7bdbb9d1083384e67441712645c2aade8ca32c8c5632ec2708b6b9877dc4cf4803b6cbe533fc58db7ab01019ae879cf746dbca08ef39affbd600562ae99613d76183554e712e90fdd4b37a0092a3ddb3bf2835e6fc6ee12e7b355ac006e8e5725d8773d856360bbef7a896fc66594b1a4f7ecbd13ed2c02b76511feb"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77"_hex;
            m = "75d462568edb867e996ef0197de4685fe3528225985d2053364c38970162d85b0f6a67f5ac932d1efc7e16a6e296b26621a08175c1926e9fb5a99912bab6595b82b9829112b0e3d069b113e962376e58dbba5a771782cff161bc1678f2ced0bb15e83b9289dbb17c272f714cc46fa21f59c8959162d34b3183ae373271514463"_hex;
            s = "97828f3a8b864a95c19b617aaa5744cb09c3c37758349e398169e2e8344eba663f9dc871f744b52b3f15d07875ae8706e7bb849e0828e6c9228cf43e742fd2c233f2b31a67365a12f0ebc2d9d3369232c6939cb9e6e80b18443820773ff796d2d77d633f1e240a2e62625ca6e85e85105a9b9beff0c6d86a112f1e9aaa551c88"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77"_hex;
            m = "372c9d4b73d3d7527d991817dac22792b1a2926824a8a30fe09b9033f324f259df8d78c3ecc8dd93c2b31733369ad2f365fd1cf4ff946246e6919b4df825c36928458bd5d4ae4fd0532748fbcd0603034ff5117f1ef6011c4ca58bf78abd0e4a3dde3d4bd48e1451587d1239440da2089811dad129d567da3b60c8fa51f5bb45"_hex;
            s = "7ea27bfe422507d9f40f5200ba8b68d92147611c63825aa1aecb3268893388be452de5c3f9c6d224d5633913d5f27a33b669550c5653315fdefb6032ca50f781e789f148f2642aa479aac4f85454425e570cb0cba2a1a8586178a48127897003be424eb86d87a2c5c95627dc4407f4800536567337d88d1df3b369b176a21c6e"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            n = "d40e4a247dddd8dc32a70a38d287f3fa23aa016b77c8e8e1a98c2f60967a2b7a38f8614066031fb6eba697c367e3430cd8d924bc9eec28529266f690d538ebb4b0381b8966e7224e3c526122afd181d6e3bb6145a5a28d46dd36c1f1da823e0ff38b439c7638b44a127b072543f18192efde9cb381b2e98f4f5fe854e3391275"_hex;
            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004065a7"_hex;
            m = "9299311456fe2ddffb3d231e14afdb0e3c906ff1fc554f04ef3f87b023314504c3bf9563f387707afcc4f575a920f673f1cab637d5c9f1208c901d5bded2f057ce9722797b90741248a7f18e3bdb74eea34b6a78fe90d9ac1950a27b791003b4fa4a5fbfb6c0428d280fa0cf92875d669b3a121b3d530f91deaa9c77bd958502"_hex;
            s = "70d2c3138dd7a07fe22e8e3d2335e0a2c0cef949373f53d4d242e4027c154574f6d18014252cc10ab02ec1ccdcd3dc6f7c3d131346e76edf38ad66f36fec73e93df7f548ed7ba1759fced7b15c8cef2875822a6ea5b215a5cca0009fdb64f622eb1d9e27df411c3a1b916511dfd51da873d14a15b6d87553a2546ee15327ffe1"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bd"_hex;
            m = "ca2932d61c66292bb02e7e64a1c6b40438e4fb91af640ceb3a3c55dc48b256ef05cd4b8624090b27dd4e30173123782a75206bd90ea13e957ac2f85b9087d389085ae5f03dbbff2a3233d62dd38960217e39816fc222e71b677f3353ae185948d9ba493ceee4cfdcb9c3b7d1106036925b19857c534ecf24095c4dec2acfb0d4"_hex;
            s = "ac59e4b969236d714c59cc4218a7cc02cb31d86aa24741ebab2b02deeafc350c9d533c8eb3d9a5f53317a634eeeb05e0d6d292fc52aa3b5469168b8cc79b2ddcfe9be2c42adf62dcbc568387422851f334a20b2994b47fa43615cf5eec6eed3a9954d7716526bd96d26118aa85e23c6c82278539874324822b5975c1370a70d5"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bd"_hex;
            m = "1d4b556abc81b293c22fadd2b48f26da8699c9f56c8184a6ed813e8d39d8c68cbc130928f38b89327f2f0aa678838ed303e984bc27203dbfdc0a9f7465b21dd8e08de7ab1c005d16aa23ca9137c54f0419b01d2c272de741cecb98d6615d4100b14255badee918886c93555b995b4fb5ee74fb0d15b36c75ea4d8f7ad4e1184c"_hex;
            s = "425e7ab27d14c8e05f82c9dbc8e660e0f0622db0426a741ef7876b749ff467f0e58043f1664de21881f63c0809527abf401038ca92000ca0c0f6d22d630c995fab4d2661258fd506cd77189d88c4541278cb5a3e0ac54e7dfa431c4700f99157da16e4f87b925368f537362dbffa9dbaec7524de3a1b1d9824ce339788779a15"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bd"_hex;
            m = "99331af1b3c7f0f9426b4e3d9b30d371f7762e171c02e13b39514561112bcfbc5b7b91a0695d043a0979047fa9901c62be54044a667d68c34b19eb73cb236c5157588811194660e2daa69c5c22ebb0b4a11b5d33cdde7be6cdd5f796962c18fa5473062c0ba98c5a7e9a1dbe506c15d0697442ba9b4ea30c852c6fb1b86e5922"_hex;
            s = "04dc5d566e302f6f1fbc45e4fd136449c399519bc02a212e1df8778d8fbf166a72314260ced82b30950a342b1cfb81574ce652bb781f6c0119a1ae2021cad521887916378c848dbc573c3c7b8cb4f9421d4d79cbf3fe69cf78a0da68c7e704c19b8b9716e415e2c3f8c8533abe3590c3d25f2ee7a5cc46e0bab7492d52db0d4e"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bd"_hex;
            m = "6be1036d728dea34e224ad9218dbbd012cb9175b25f819576cae945081ad2249eda7ba2f7896815d9b5ae36638a4e30e8914af99579e78496c3280224a9c75f01da9fd8bef8b925a1b7e901604ac8cd0064ee836ad15a41225c87713f22e1fd0e12ef50a3f35c43148d8db2ae2bb61508cb1e9b9912446ba81b8a1ade12bc9f1"_hex;
            s = "c93724236f58ae9eb0f9c6b4d9326bb17cb53b2433c2b13d8402ec0b4455d7e1ca8d5ffde7d57bf5d7152de6abe3336ddf781b849fa821ec8079d9ef7c9272c91ff24908f79a9a62e88d8fdafe3aa67dcb1759ef54cab03f5644fda4debf537ce6c14cb2d35cc276c9dee09adb0ef29c3ed15189295de153bb20b08c80e7d348"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bd"_hex;
            m = "9872df5b9025393394ae1b59030765ba60af6cea40fcfa1867b397422ed607a528bd147804688ed9b5148f08d10c03d337c26851f51ed3d369163418a67fdac018233a036c13eca3aa3ff61fa4434d2a9484995b017c3926e252870b06ae5d0db3cbd8668ece5b79ba56d70844544aa7bf1d86712bbd34f91c8e1884180a9775"_hex;
            s = "cc7a427ab109f85f16832c04bba7a0eebfcf4e236c7507b337fa9e1d437d89c908685a5bafda8e26e4c1027a841c809ea0693749c2461c834aa0a2344a2a332dc3a3440d895087278562a7e91114a052599de0aef06787aac8963b8ed2a97db088b808f0b91c17c91e24448b38fcee4cf0c76f4aafa0c61f380c97afc4dd49e1"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            n = "8b72cf259d853597bc0c4b79f21061a3ae12f6e8eb5bde829633ef207aa282fb47bd574a4c6983ffe5687d1e4ede14db5ceb326717af8985c7778888521b4a431b1643b80df1f039601b4d5d8773f91c19239be3709d625174e05e946dd29d4cd58e9aef28946c8811dd1fdd84f9eb2176902ef2a710bb76494c65c37559dfdf"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ff"_hex;
            m = "91b07ffc7a0f56dfd81fe53414f6fc57ae6538492f218cf75f2021bfb746603019414d11bfb216a5728deb2efcc211b0df1d32f7476af8db3ededac31fb235684d119edc243477ca30ccc0ff9da03029ef7784dff43818e2f650b4a33454a80594e71b6392dfa0d57ca30aafe1d7824b473cd6091cd11493ef3f5866e073e28e"_hex;
            s = "59811c0f93c7407546a19bf0dccf244b1529c1db5b8a6feb9e4182f4c2974810a97dc85f621a4ae43e45dab7af4fba76412dddfe380785edb2e24493670aaaa9a782f5effb7124bc60f254fd25b11b125584952d32e1db39567e82bd34eeb1eafd3ceac1554b368f61d77762ae3e672c053d20a3af591b9bd27441e7977c0fef"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ff"_hex;
            m = "343d565d85c1a326570cc4062d617711e00c7178ef5b52aa16ead8bf222353170306593e2326ba13f6f4b62ad3406e6e02fd990b1645788b7c9d0c3e557986e08103ff76fc1869796e93c636fdcf9875666798594c40aa87d0ca118a6182df77d5bcb0ccb99f989ee6715af45515db6e35d1d62a3a55d0e737f94f6bef474723"_hex;
            s = "1ee5c565d81347bfe222945008daa3923e88e273d537b4f993197f8e2cceb60f477cd53a63950b9c0aa03d559fbe940a506be4e9d8a8f5335ddd514483a79e81e24388e31c90ca6906be6c314df7904d6a7961832c2175edfe0f41412bc042d646edf6897979ce0cf0f30cb36ae22fab36ca815ac5288ba7b3b49fc109aac798"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e7fdf"_hex;
            m = "b1913763b5afa5045396ec7a4dd1fc472e92ced0dbf79abc6b8d499d38132dd23680f0ac8447cacf41d9f7dba16b694c40faba9fb68d64b76bbb347ead6cfccfffe48994b4fdd42bbdb37c0fc0e674b46a5cf9b20506c8264d848d557fea9e93b4c5e9646d592ce06f2d645cd1ca874653bf7551f1e82cd2b8f03c6ad9157ce6"_hex;
            s = "411df9bc426d5bf6ca6e12c564ffaa52b1770cc96bc670e9726759b1bef233a7b6ad24d79545eb78f3a1318881bf65e886563918521350e125b957eabea89d0e487f7b963767bf1725c6a4c6544c734600669699ec2b7fae5a01433dae3c148d5824031209c754fcfb0a2d9702bbcf17bf35cf9f07b73ea6a732c3531a229471"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ff"_hex;
            m = "58b262cd0a0859381541e24340169e9bd8b3dddd52c5644e31d56ecb2bd4f00387f721e3c9c53a52916e7a1fc15e6e37de126f1cb92a6c924ec0ea9cecf948a696d94804aa5ccb9bc0c2dcded52af0fda9626c5865fe683a81a7b3c4e5b617274e02de17f4f5947c6ae60f6ac5a2ad53004cdd7b9f68e1ad9332d22d5e34e4ed"_hex;
            s = "56ea3c128c5d3c6342c45a8eb5275a518ba00aa2a6e177fd855abbf35386835773299af0809c049c48ab18b50ede9cf2d84650dc33b75d11e6e607c5e05d3052c0cb513ab62114cf9d850a1117ae655a3e5b54149b7089aea33d38bf673d04868ee314e858d981a31967178471ed93d350590fafa337deff21c0468aefa4bca2"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ff"_hex;
            m = "45b73d8ab4f335e03c0154e92e467bd390f817285b83f64de72b594fa3f34ade09be2f9ad1b5a08e65e876fa963824568d744b9304c288a4b641913d13ec80db39c26e04202444d0147ecea86929114e6a90df1d9292a893ff28930c2348cdd0bd0921500707caad3109857a0fe1eac30f94fb4e6dbbfe20aa2988433acedbc7"_hex;
            s = "66090f92daa94f0d03bc2cee8b21140d5eec31bf90d096ff8e3f23bb29662cc36925e1db46e9c91de5bccb209f9dd9d7ec8e3f0496dcc72191238327eeedd19c40325f74e04636457485c6bab62d1a75c78dc8e841d1f2dc33afffa9acb7a44ad4bd5a0038ee2fec8c5d2e060fff412e88f4dd25bb90e2a3f46a6e378be209d4"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ff"_hex;
            m = "61bd546bc549b962a8868d7ec803b95674a812b4593cd33e98294a561b84d13e2848008036e2218d00f3e4a4d95155f53f4f0a07b23ea157c7336a42780b6024bead5ec2628f8fe50f7c2748ad9450b4ea94676a195769c1409da8106c0cc3ce4874d4f8ee57ebb3fda9bc33ecd494db9eff92a6369013c52cef6e8aa18de284"_hex;
            s = "1ca0b712162c8f1ef2c443d7caab390e844e0859d337dfa4c42f17afff26fea832ab4d7bf1154ccbb88f7220bc0fb6980506d39b8f8126acb1cb56369f799164ac9ab702074677abf3d6eea003072b49f70f3a9d11bf3cdbf5f4b6adae5c5b6cb4b75af5e1a8865fc1bd9b09ea35a5274c4e3d62afa575bf85bdb4d87725ee84"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })


            // [mod = 2048]
            n = "a47d04e7cacdba4ea26eca8a4c6e14563c2ce03b623b768c0d49868a57121301dbf783d82f4c055e73960e70550187d0af62ac3496f0a3d9103c2eb7919a72752fa7ce8c688d81e3aee99468887a15288afbb7acb845b7c522b5c64e678fcd3d22feb84b44272700be527d2b2025a3f83c2383bf6a39cf5b4e48b3cf2f56eef0dfff18555e31037b915248694876f3047814415164f2c660881e694b58c28038a032ad25634aad7b39171dee368e3d59bfb7299e4601d4587e68caaf8db457b75af42fc0cf1ae7caced286d77fac6cedb03ad94f1433d2c94d08e60bc1fdef0543cd2951e765b38230fdd18de5d2ca627ddc032fe05bbd2ff21e2db1c2f94d8b"_hex;
            ee43f"_hex;
            m = "7518c85b67e7aef7f26bf006899faef76e076f0c6c946e5dc9c83521771a6d298a9cf5adefdb314b5a07a54d8054c22b879fff50ba552c218291033c918401fd611a7447dddad4815e0f56ded825bfe256557622a385de4b4a69e265c1efd259e2da6db19aac3fa0e5ca2d42fadb4e24c271fc078feb2be10b9afa256f228844"_hex;
            s = "992d48b21bb3d2219b44e8fcc8633cf3aeb591de90f4386496ac7ecd284cb63d7dff81a50b8c4fed9f2ef737692ea6be05248ca138947b49b4e7f3cce6640e049ac2154c40f57e22fa14f97e7a9507e1dc98b206ce6ea0e180039199d1be0a15d1f5093a459e5101aaca2a23cb1f59cad2f1fb99dc956b9d4344bad2c1121d63b915004acbfc7ac60ac9a7b0b1c6812b30bfe087f7f0c7d1625f9c4f458515e11478e3604aa39d14d08bea30b01fcd6189e6f9b701d360e4714d45556b29815c8d8fa8e46e10749ba5e8d445a4c0f487e70ab5890b7ccc1651282a54e87e7db4bb2f7d4a671e71c43c55cf6486416f171d1955037474d06a71dd078767848e5d"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee43f"_hex;
            m = "e002377affb04f0fe4598de9d92d31d6c786040d5776976556a2cfc55e54a1dcb3cb1b126bd6a4bed2a184990ccea773fcc79d246553e6c64f686d21ad4152673cafec22aeb40f6a084e8a5b4991f4c64cf8a927effd0fd775e71e8329e41fdd4457b3911173187b4f09a817d79ea2397fc12dfe3d9c9a0290c8ead31b6690a6"_hex;
            s = "4f9b425c2058460e4ab2f5c96384da2327fd29150f01955a76b4efe956af06dc08779a374ee4607eab61a93adc5608f4ec36e47f2a0f754e8ff839a8a19b1db1e884ea4cf348cd455069eb87afd53645b44e28a0a56808f5031da5ba9112768dfbfca44ebe63a0c0572b731d66122fb71609be1480faa4e4f75e43955159d70f081e2a32fbb19a48b9f162cf6b2fb445d2d6994bc58910a26b5943477803cdaaa1bd74b0da0a5d053d8b1dc593091db5388383c26079f344e2aea600d0e324164b450f7b9b465111b7265f3b1b063089ae7e2623fc0fda8052cf4bf3379102fbf71d7c98e8258664ceed637d20f95ff0111881e650ce61f251d9c3a629ef222d"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            ee43f"_hex;
            m = "a3bf44cae8aa8347fd07d84a33eec5dbbdd7b6431368887c988c4be779c5473dd8c33ec82a35f1d3dddfe55f3eed67179b87ce86a4a50088172538fe9d1b06c6ef6897eb3c8e3618cfc21353ed4343e7fceb09a2eb035441cd5c8829c79b81582dd5d69ae85c5a001bd8e98e069961342a2bee00ad2b8b91015ac5cfc1f0c2d9"_hex;
            s = "877f20eed60f8ce286108a5dde9b6828b37e3fbdb08fe153e591513897440f21f81214598fba08ea077394ba8c2a44aa4f0d8f3a5fbaec3dc69b3bddfbe28397c90adf35d08ea771c7aaa31eb06413c1c62b77618af940f4c71859fa4384d29b48e5cfc941d69bf0a3804d2008e758742b8ed68754bc71d231623d181347c36833a7d7160f742a37ce7d432d748e514aa7d8156b50c532151390d086cdcf9d59f122c6d97f4ccb737289f7b00a237cb6b4aae6ba79d41ff73d019a26b59ade04c967356e2aad52f115357ffb7676f190db38dcfc98666e5b258559c8c85fa32942cbcb99d757e8847e56a1687b3302415698708191b136d923349b02fe38b6be"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee43f"_hex;
            m = "e1c46c309b6366fb4d56ac08c9393cee9a7c95bbe7b7c0e79a3d9187c0f42bc33364c28a770da585e3fe7b4901a3ccd037dfc42aa65a3470521ddafa835ce2d16c92ac670bd4d086505e608781736dc4dd64cc5080ee19e586c8fd1d737dade5d378b32f1d5df1e8dda0e32a125024b2d53334943c18782d7e69825a580093e7"_hex;
            s = "8ed1f28fd16d45d416a21554e104c006fd7868e5895e8b99831ae0938135b543610df64a8c3574d08118bfe396f9a5609a8dbda21b9a8530ff0ba90e629d6abe30d2c1b590600db971fcda80e6eaa84017e209b9bd3b641f3c81d5d27f842bec8019790ed99a0e5db4aedc1c070b047c19410cbc56e9a0ff12d8f6e5d7371b1011ecfecf7be7a74f94403590a52f95238dd69e0b5f4c1fcde97ecfdb1acc3803e59ad8b3088b2bc509e3dd12d40d875625dc8362c579176799c75e4fadcdb392c68f401f68d854e46377f084c081f9d83743039f6934722e30ef3f0226bc841d79a4eb68c5cccbb6ae0e9200444e50ff0d0953047ef955d2d39a70c3b837c5f4"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee43f"_hex;
            m = "925d59f953cb3ffb6d5a3a55c079cb1083997536e33d7c8aed50ed76aebcde459938f79229613200c70dde2ceddceae08c10608aab9e30ec51842f14a65e5f8f553471da3497881927ec400b4207ef3e2dfc2b7fcd318c9520b8b22f69dc8a1a8efaceb7be93cbad569e67db062362913005dcff902018ed22937fad405fe84e"_hex;
            s = "62b07f6d1b8f13651d7f22ce2ce01061090029db5af7dcecfeafef20621dd9e254a0fb914f76a3d79662257489cb8122708583d30778791a77da83c7bea81140c61e4d0484806e20fb85f24d1bbf774ef2ed38809c9b14f2a58c6e8649b760baa901544522ed94bd405c77201d07c8d12864a8d1e97a4d322c29994b214fc83c2ecd5c955b9bdec424e7ca5a1325ec0aae4ab0c202b980a2187f096aaaaa5e85550ebd325799f4f30ef2ead07e79c7a475667f5965e6b50269513659ab5962a391c43cbc3a3da34c0fdd1546c40ea7e2eb5352ce6a06ce6a6385ca0ddd5d162c137836df9ea1f89cfa00c3eb1671a43bd625526f3b6ba8e48a7a2d56fb4f01c6"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ec6cd1"_hex;
            m = "08d3ac24a595da811cc9bba78828f1452ff390ae653f22d1ad91ef6b22aa7b7b15a44ff7f83efcbd7a755eccf4541eb4040c7a4b774749a26dba3937b7f95c6c8490e3383d4f291dade5f35a65b1f6615fd4998be18bfd0ba4bc3a2136ceec909dbeef513d6f6689fc4202b9a3e78134877374d76ab246f49cbe7a8f65d034cd"_hex;
            s = "72ea7d669ac699a149c13aa168eb3e148f590bbc0424951f1c3144c541915573ecf05cabb5275488c98d0ebe55b1f1af49ef8cc72cf00e849897c6afa53833caf9ffc00eb84cfe55b8277e93a6ac3e04b111c9d07ad62082ca32854c40de1e0956a18f8460438484403abb91e6fad12b28f114157f1b6ef563d2fa438ccb8a16aa3afe6ec5e98365c30d9a355e7e14b039bbdecf59f91248d0f1e317d2e3c819096ed68cf98361d7f9310b354f4f45e2f7c4dfb82c218cd438f3174a6f017f0f148a71c40ad5b7e2c8081ddbaeaa764d601bb2e075eb3618aabaa4b5060022c6d23ef072643686a759227daef0331b28ee76da4ab3b5ad5dda8991b9937d1a59"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            n = "9c003978e1f71731e2d1128e1be81bd6c99cd3251672b9c4186497243b17ce523ab113bd4fe397178e6fb5f3090b0680e42cfe78b3928c22da53ef43595b1c5792a2794f86622bc4a997932dc20df9cc429b5010e18d73c71796df877fb66e72d372081260fe7760d46ff916ac74292ee6e1659c2480a22c9522bdfa1beaa71ae2a5581eb0045bbfb7b1d687553cf3cfb061bd2e811e6085d9e4849f30735bb95b34ae40aef5a5eb399331704907b67094b8f418deb76b6ff419031a5b2cbc7b64487b49d418d67747f1609040f08adc42b1b0724869d838bb932511a580ac9d872d5a053f3b61b3f51c43fb2b3d510a696a9068e093eea0670e55e58571904f"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033e58f"_hex;
            m = "c3232d8060a3e3f8687dc05d8879004bf5c3a7030336bacaf4d9ae8c0daa21c5f09bc8a225dba963fa568a038d7fa91b274dad04cb83dd3b0f35900a2b88e46550b9b3133b61c30e09f73d2b4d9661fd600077f7f8e409d2fc5c4f2e97baeb7c8c84d71bc9bd9bc13e66c31def4590bb48e5ee27b1dea6556356d5407ac89dd2"_hex;
            s = "21bfdd610a56fb8b3fba9f3841e7ab9cb2b91d16c7bc3ebacc266271e05eadb6d209a043a29d542b57ad832a3ed03933088abd7b56b86fcc295a95fa66e27f5b9b2c919b82d4165e2bc42b9e46eebdc7cddb29888281250e6954190f8e13b6d9ed6906e8d603520deeeb5cfe4f7e932c88ec1ee2dc9b971a0288bd71a45ce6037d8d7ef2325ecaa573c57ec753916fbb6335e9ab5cb695ec0579b511074a6cac3b21584e5e4532621451641a4a09491c77555972a5d42a627f50ffd490c79e32c855aef0e2859c933321341731e796b2ed4c6c50a98a3f3c6995bb6bd53e52c531b15d042061186677f9158eeaabcf302626c8ee639685c832cf3bc4357cbca7"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee58f"_hex;
            m = "0d8235883f37654b35d3566174cf731b5b22a54ac15718f9d8e2415c57b42003d80dc2537e920b37dc9fb21312de8dfa39190f20024c0f9299ffca24d0d22cab795a4b6d132b35d6aa36eb6df856ad06d0257838bd14ce11e6bbb509346d0235b710d7bd462b6b90664109566e5e5ca7e8efe97a39d6dde085be09f2cdac2b07"_hex;
            s = "6530d456e14269bf37a95ab7b2ca4f534a47135052665a2b64e9eff970a9566ff0304029d2844d5649e643212aaa7f1f9103bd5288b1bebb7797cd8df3393373852cfc7001a4257499fbc92444609e0afea095927ebb773b7b666962faf0686a8b173f446fa562e82be1467111ecc38697103cdc1e700890b60104eb35575d25b9565098544a2e26003b3150c9a579c534a44bd0c1569b58d871d6a5af51b5ecf3cb2b0650793ac95a44596f86723c31ce4b3b1365dd61d2bbadf394b16f734608dddf991595acfd0aba42a12095966bc005c67b60776ba104c9681efd38d2e91fd3995588d9ce244c6bdfffb8e0086837946c35627a09a2f83b325af71f474b"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000baa86b"_hex;
            m = "84b1e3cd7c5d6011c581302e03489fd37aefc841bad659fc81d796c6ddd6a1cd9199f824bada3f70b29b40e435ba306fc2c53333440f233af2048d6474b9fda447c87c6c625a56661a85216543d9fa9b9835120c5ddf6a4242d4da438b5d58c06ee3778fbc042e5cc4e7db9b75cc87c0c2e76cb34b6eb47e39f1844969ea3989"_hex;
            s = "1864eb619e358d7e0340b582288e3290d5f8caf1b6831bfe5978f4ea56d15762247bfcec56e2a44fe11507e5eb6fda0706b7287b09ea770d577cdf660c523a76e2e70952177f0260cdba51efca71148e069ae6540f5c4722a4b4db6336168eea86612b6b4ecf8b5b2e1adf3d4f79c3894c617ae0ba56a930c658f0f55c0e5f2719b4b52b7785c30489ca13c9799ded9144404409f284c41530fe35967c2d844dcb1d2d80c10a985164466ced3a4d74573b175ce7288418b39962d4a34cfbdd43ba5a6b73af0f9ef55946b61bc7d5c0af9ab0e99bc0842edfedfc91e213f021842ccc785cd73a5f85d8aa8371c80151b836651020e71c524f92d3c654fef0b37a"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee58f"_hex;
            m = "fcef065e293ecd29ab52046c68c6e940aa0e2d5fce5d4a2b40c516f2a7a198705c301b95218282891098dbeed1c73765105db8532e87ebe53772585115b1585f03df272944853a1e143dd34ddf18d2e1b13ecee7eed464584323cf53dcf6b9aad74351a0f90e9ef1a08b1313f98363bc73f897a4740c5d8c4a1fa37f64386458"_hex;
            s = "00acfc93e41faf5004cbcc252da290b9cf66b56a6a4849c572461d3212cc4cf1021eb96e8651475fac7dc87faf3a5b52923123378c18cb83906d1ee6e53502bf0e89ce66f3cf5a4b7cafa13f2d97f99498c0052fcd640570e5e1dacdc66e24c2a54f02bed338a26748fd17c07bfee5492c4dbe4dfe111932e3153394721b0556a440788a2bcefaa2765ade916653f4aac20d5ea587fde0fdc255dc32c5aa52b05e3ac2db4d7c3a8b02ee1733fd300801d1bb8e8613386f3deef8dd497bfe803523491ab88553db60b03d29c55ff52e71c546873cb1b52bea1853c8f0070d1776545557becb6a11310acfe1be060deb53d16f0dcbc396c1d30e03c4c069c3ad48"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ee58f"_hex;
            m = "a6a2c5c8718c64105fab8d44fc69d334273aa71e7475d924ce625cfc61944aeab77927eb202f6a33589939da64b375d3bd22f61db010183d053676ebdf3af50ce33c05e09cac237d1e5ea27ceae0acf2120b84a29ed80d702d759019e098ba227314e40eadaa98d4fb215090589880796f1cd7130476c2a6904633ee2b56a014"_hex;
            s = "8ec5b4e7671975686b72eb3930f77ef3622119d0b2ae0618fa52c7410519c4f846c986001d3d82844ae4c13e99dee463448a498a652e9b725ddeb6323b83d5521637be0dee7b224c50dcaf6c7b9a2d26f9b0aad81ac6e4651f241d7a860b51c96ebfc3df978c5373b7846d3139f509dc16726f712c0e61af620b2c6db0955d0ae9cd4760bb9de6151e04bfa19df4d5aca2576f91ee7aba9eb446fee77c604faa5af87536f22fa6e239e898de906642fc6594be9328571b35a3a8420ac697ef993016f78def8a17d13698cc4c1876ee1006d814dc60161214a8f8b6f2a345c8b0c0fc645873b6bf9d2fbace2246f643a6d3a2e0b88929623a2e2a73823f6e325a"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            ee58f"_hex;
            m = "79220b8d86942a13861560882a66fb4c5c926a661b74ad2586790a0636a802d9d1df8320dc5f5fb8d18afdbb72ec4fa45c7903b4df15fe950d5a063e1195be16c311d85c799986c61f3831688a436ed809992e903d2a34932bb6cd5490d7bbd374427209024a878697a66559197342308a7d51c0ddba39670817c7105a77df58"_hex;
            s = "54835466397784e6229228ea1e462b37d77757ba17a6624fbd3279408e89fddab2234f5ee20b56cc7095dcee3cf033e4b04cebb9771997e3b9f50ddea290080888fb406cf1af4b2d14c12be788cbbc6454c52276bf64ac3b3158049cc78986e38413bb09d408f04e8234228a9403eb901d6f2fb21887996fb228c292a2aa99fe8456172145939606eba9cfaae694e5fe824ffc3a5547195e24af5039aa1f1dcac9a9cf54c51099f82cb1a5aacd8c9419d1c7ce880366f1276fae7b9e1848e9ceaa7ef7244e5cb788f524bb50231ef4d81e14d59d3f884dbff575e953a145fc45f7661025e1f6fd95874eba803de03b5fb0a8f5eabdc739fbb91c45ad1c29128f"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            n = "a6754738bdf94dbc846ceb937a3896e747d5c6222453a83f6c86310e5819129613f9857d5e4a06bc5d927bdb011d23d8219549ced82c20592bdc419deb67fe43da87fcdfd01ac1acb07e513170c45d1e058fb56d8cb090a7f2565381785c4478362b253d47e056053516be15f448878d01c9dac06be45957882ccffc5ddaf06bc131c866349668de950e9121b134e5ae1c29815473a20028b9b7ea64d9dd8253a518b766dea714f7b37185a1d707a21cfa526a7d76f55119af728626b77e5b66328c2b37ec78be56380a4cd3900fe6a757f21b5728d31e5f1344aca933042b99240f89dc09e76a03678b402780bf64813c339e79893a3355674ff4807b200775"_hex;
            ea54611"_hex;
            m = "dc4c136c805849fe77b4b381e4c6b22a3ff69947a9b5aa6b7cbe42cb279c50e8396d0b6ebbe5e55cc396ba66466e4e982e81f63bac0895fcd0aaca4b57fb6802c4432747b28099b368ae5fb4ae459c2fdf04aa6a40ed0c2a9091a418e08d2669a555cdbe0c304d498d840832c35484397b071d9c0b6bf73be5f937fa6b5b7367"_hex;
            s = "723f89429e5f8443defd528d57798d67548279cd169d185a0052e09472e1b37c313250136b2a5f8910e31229363515ad674ca9489d6c7ca7974277ba323110c152f664a79cfdb3453d4cfa6edd124f81384daae9b06f24f3599884e13db024393b5e211ca352149521eb37d29902de0c4392b44bcdf79d2f3792cc0a7edc3995aff9629719507a2bb35eaf2be9a88b74551a068e6e556d78f1662f0a78cc29be00acf9af7ba491940b8a731a3af7003654f15205c6171d009a015b68d423166e971cfce113bf2c7edae6af28a500d43e2f3bcb3b8dbe940eb0f8bb1a077bbfeac4cd20dbfe058605c31b3d1be79aaf1d051e27daab45597ac2838763e49caebe"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            ea54611"_hex;
            m = "ba85e1f4f9203ba8d3eef645d7923e10c614080149cc5ec6e282f70b23d30bf91ed665fc1c00baca924539a1508063cffc151d78bfd504943e220037cc531c15dd5a9545bea330458440d13f43444a8a806c7174e805753f42097269a28c4231df56975648d246229327e6a716a49a493a612b7c2c235acfd581742a0d452653"_hex;
            s = "90bb73e761dafdac0b38e4ada5deb5f713ffcbe119ee7af2152ffb3664ed8b7dc11815fdd39f398050ef8d901f836945a89dd0c71ace4b60979ca7e426f676ef3653d7f5045afbf7f38af3eefea2bb2a34ebad8ba029874995d24e98926faffcc79f110ba8f9de35b48829197634f0d842a8ef0dedda72807df0676e08c6b8f76124ae2994151c0379c21dcf3ee33297d8b13eaa74511ec7edf8058dea5d5ee4a6d6701d0700aed62ebe6d69dea7d0b79d01fb5fedb4e291542592e977fd13ad1d49d3c9cea4abaaf003764ad0d3cfd75cae41fdd740e6c17b36831a8f88fd8f9432f45d2bd529291c58215c221d546d71e78a4a4787630af5692a43e1c83af7"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ea54611"_hex;
            m = "284748185ce9e8eb0f872623d43950277e53f59b362f9b40ca2db01548f7c3c3cc0af4379672a9915fd4833dedb2915fe6ebc375e281a138c39f3cc249db65f6e1b81e1dbe6f4ecd2befb90f20222ec013720238108cbe2a0c6315cb77781937105aae10fd683e681bdeaee193109112aef09c2dead65adf4d812178f959454c"_hex;
            s = "49193eb45d4d355537d9bdf3bd2bf0fad9d7e33241172d231dea6ca7c9d7bd2bc3ed85285bf01bf379da0db4fc04cb7e53cbbb38695fd689bb73f818bd4e3fbc042013f8e002beb92847dd0d5fee9867cfa3fcf76f3f648cc36f4a67e295aff914f796cc0cabfd4396fc6cf171f468361ad6ecef2023b0a23884880a17ada5372c7cda32cc1e3b986451219d7a171e6c6d5608c3dbe55403b4b42f6eb3f87948d0d72f51de963ed80033b42b5e7ba76c6fc5f74b9a5249b60bb507dc86ad53f5b9b710652a2486a3cded83e447a4c114c4dccabddc51787c19687548c4ff157d887c7886b19ff85543c7f8340a6fee320ba49e02c463c8bbe10d45805c67cb6b"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ebb217"_hex;
            m = "a3c2ec4c47f444bec34c15ff25f2f811fa94f9a5bf05a5de982a6458451609695174a8a68c25a7a9bc2b181290c646ccd5dc8e92ec9e71b17c69e70f64eaf56cf48681e85cf966c5643dc46f5ead99b9596a966a98fe2bf8433fe5935b76f965f3c121199eb6a69a2449be1d79f01961ef05b735aa6bfc3c547406ed13023edd"_hex;
            s = "039c1de64720207c408ea9889471fda297c7b3828e46831ca5ee60a938ba13a7ac524cc394d5ea12d89c2cecfb06ddcc6d86994ebfaf84eb91f39ec470898d89cbc55a12dc47e7be7e0f389dd12c5e59a32d5ca6a37a3e6456fbb8c8c8101725cc3d529f5d1be12de765750e5ee632e43031656442ab0e49f9471cae87dec5751130a2622ecaeba85ef337fa31c472d6a9696231123db350f5a390c8d7ce1f1a839a4c674aee4e7af60ef62e689117fe645e4c322f20373b9fd75dc8606e70d659094f2d2c98108c6c32576adda57ac0b30c47dff442b0901448c68aa1afee4879eddd84d9f2f954971249d87811219e433f3d0d5adff57133d0e9c12f82deec"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ea54611"_hex;
            m = "a14e35290344465d6d2f43688a663ee418f80f13e1dbee22ed4641aff65bb28a1c0985b8da3128be39070c1c43bcb417bb5a0cbb0beffb217eed3beeafd1691c420358fdd1fdab7c29b0a3a7b723356a3d5e609dc986bd42e8495807177dbe137a0357fed1f2f621a7f1af11cce5e96606cdb3c104e95c0d93223d0415a6daf5"_hex;
            s = "93775fe8676f4e6ed580f3db99e0697e15f8e0ad168a9321cfd004e6d0bd555bda6483f51b1df63ad78f28a3638e70d230c5e654eb4c86c2c1889a06e28e2a640210523b90fe14019d03d0a3b14c7608614fd88a84ba2c68f7c0e01f9502269382367a07f2d90ee53e15abcd584c56de4602f7573f493e41670026fefaa6e12c615d19d1b2ba25cd0f48b6ab20a8bf809dd15ad9172bc8823302993b51f0ae5f89e5c05ee0dfd91f8926abe7fc64c7694613a996be5728ba3c6a4d2387331c5d3b21377f9734b587fba180577aa6cbba1f4a2483e4e46a5d7c355b4088063d32a10c99bc654677eb08a9b57ad40d88d378a8111678e8dc60be3c789a0639c056"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ea54611"_hex;
            m = "555400784d0566105b91dca7f4f0849d832d51f0a3c7d3b9925651fae271199672d014a19dae9ddab1719376a38dad2001a60e3d27f51a74b6ec876e421db7da4b5845b56f13dec8dd0f52720d39eaa7afcffd39e1c3be56a4645853913b3da7c833ba3b2afed0e1c8b33f219abce33c75ef436b37fb68684506eb2f37945206"_hex;
            s = "6dbc3049603abc4677bfce12929bcca60bff5350809ce3f98259ddb72967faa076bf02206c9bfcecdae3421c66f2eaf846b4effbb5e6d774e000c1f1f7c1cf409b98f5e0ca13cb2dbc5b1692c6bf7e54a743e4b24c53451387f277aa66e16da87246d3ab7ba1fc5ab1a9029546098d12d1a45293860e2c8f4838148c89921467285b0f6c916f3b0bcab98dd01120055ad1acf9ce18a2f276eb15aa6f9a0fe05652aec728f831063fe6c7985ce3be11377703f76b4904d292598abac7be35bd1409dd7096fdc851abd2b20a1883f4f915309ecf507ce76dc9a75b36394c6f1fa6685857538ff3b847affb483a670969ff59c8de0391ce73bf1e85601d6bce92c1"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 32;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })


            // [mod = 3072]
            n = "ce4924ff470fb99d17f66595561a74ded22092d1dc27122ae15ca8cac4bfae11daa9e37a941430dd1b81aaf472f320835ee2fe744c83f1320882a8a02316ceb375f5c4909232bb2c6520b249c88be4f47b8b86fdd93678c69e64f50089e907a5504fdd43f0cad24aaa9e317ef2ecade3b5c1fd31f3c327d70a0e2d4867e6fe3f26272e8b6a3cce17843e359b82eb7a4cad8c42460179cb6c07fa252efaec428fd5cae5208b298b255109026e21272424ec0c52e1e5f72c5ab06f5d2a05e77c193b647ec948bb844e0c2ef1307f53cb800d4f55523d86038bb9e21099a861b6b9bcc969e5dddbdf7171b37d616381b78c3b22ef66510b2765d9617556b175599879d8558100ad90b830e87ad460a22108baa5ed0f2ba9dfc05167f8ab61fc9f8ae01603f9dd5e66ce1e642b604bca9294b57fb7c0d83f054bacf4454c298a272c44bc718f54605b91e0bfafd772aebaf3828846c93018f98e315708d50be8401eb9a8778dcbd0d6db9370860411b004cd37fbb8b5df87edee7aae949fff34607b"_hex;
            efe3079"_hex;
            m = "e49f585eeccf2bf7265641fb8c0f94c717e2ff1d9045aecaa302d285353b991bf7ac5dc93b311ce9078828d268571ff909711e5c04553220f8f80f785cc405ca13e02f0d40b2ee765ba295538521663718eabe5783888c345519077a9751a1285fc236f2a25a8ae44a2df247887451c86cd646d7b3e7a44ee0ef23538eec557f"_hex;
            s = "4e85f68a5b06b06a17d0f3f27b3a5a119e7db02abc2d9b4afc698220da11524a885f33cd7a10ae89c98b027b69224acef4713a1463f168c8bef551ef8fedb219b6ad0b3e99d6216643e58a51bb2ae93bbef769614914eab137c1993b149171b8633f4a318f69772996ef7dc3f7748f3756d58ecdc3937632717fb40cb7ed6e5c72e172ac58ec01f4e32fffc445b60f98a628fc1b0fa4cfb6686deb125950b862f347e9eb8120fb2b5aa23d6d86eaf1edebeb133793541c4dbea0f14a9f74733da4ed11d1274d464e09a5780843d6750bace0e97029308287dd396efa0f32628171fc5ec20d3c82619b784e4cdb66cbdb28cdd263a46a3ec63e1cad7659dc3b33801432d2b5b5e10a770083b933a805a9c76cc26c912f952cec5fd8413a8c1adaee80149fa19855315075825292db24de325fa6bf3b4c06652fc8320def4236c088dd5ae43315e03672fb999c354ef61ac380b1b1c96d711fc777e345ccb94536355a321466eedcf2355dd51f688023d6b599390f3aff6201369d8103af926c83"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eb193"_hex;
            m = "4621b17cd9f5b623fe73b5fe280ce9ac840805608acd6e41d55ea71132220c0df7e7c4159626f10d71882983f0aa2a92d11dc906c0b22cc028f4395d48f54e12894e33da0f614dd48ee114e65f95c7a7d3585e7cc765c00178d136aa99591faaa35ee6136d2e323ffc855c709c5426b32fc0aa0ac66e90c96efe84414dd5e79c"_hex;
            s = "b60a4dd629d6030fe6522f6b754f0e751de4b2552c607efccb2f90da91787583b6fc51bcb60ab21938a48ca6ab3ef8ab75b56abb9df1faa4dbd84b412066f3f92bff778a89f7df4f55317cbc40a780fb87f0c844c2d64e232474a3e931c168b330866579685c51a5937a2e80ea2c6ed00fe123f14bbef55c9774bd620e1e821e0128cf49dab6f8853c08801c8a00919a6c013c3a83f999c66a5cb49c91865df60db8be813bc3d8b35d85d79cf01abed2f60f60edc97153780c0c12fe45e5e487fd959393079dbee5af46c0a7c4214fab75c5b5ddd6f0288669e0a9be33f4b5782524e838315cc031d97beb1596026f129a21e961dde6bc34c492f3026af7f503b8ff87b7775619f8d1e17f972c85940affbb64d3310fb9f74d9d16aeb077b8b997b18020eb992ab61322847fe6cb62f73d0abd81633ac5c5be6519ddbc9334bb56449bdf96930d65d8061db8911d4ed6a59ae8d2276d04596a388e752cf99cbd395b837e7c5aee278a7c4b43c78d3d74c88f49cbc8d816f53cca156927fb92d4"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eb193"_hex;
            m = "0897d40e7c0f2dfc07b0c7fddaf5fd8fcc6af9c1fdc17bebb923d59c9fc43bd402ba39738f0f85f23015f75131f9d650a29b55e2fc9d5ddf07bb8df9fa5a80f1e4634e0b4c5155bf148939b1a4ea29e344a66429c850fcde7336dad616f0039378391abcfafe25ca7bb594057af07faf7a322f7fab01e051c63cc51b39af4d23"_hex;
            s = "8ebed002d4f54de5898a5f2e69d770ed5a5ce1d45ad6dd9ce5f1179d1c46daa4d0394e21a99d803358d9abfd23bb53166394f997b909e675662066324ca1f2b731deba170525c4ee8fa752d2d7f201b10219489f5784e399d916302fd4b7adf88490df876501c46742a93cfb3aaab9602e65d7e60d7c4ceadb7eb67e421d180323a6d38f38b9f999213ebfccc7e04f060fbdb7c210206522b494e199e98c6c24e457f8696644fdcaebc1b9031c818322c29d135e1172fa0fdf7be1007dabcaab4966332e7ea1456b6ce879cd910c9110104fc7d3dcab076f2bd182bb8327a863254570cdf2ab38e0cda31779deaad616e3437ed659d74e5a4e045a70133890b81bc4f24ab6da67a2ee0ce15baba337d091cb5a1c44da690f81145b0252a6549bbb20cd5cc47afec755eb37fed55a9a33d36557424503d805a0a120b76941f4150d89342d7a7fa3a2b08c515e6f68429cf7afd1a3fce0f428351a6f9eda3ab24a7ef591994c21fbf1001f99239e88340f9b359ec72e8a212a1920e6cf993ff848"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            eb193"_hex;
            m = "7867b65ed982ed6cdd2d061157be90f85bcd580350f1253145cba5c58946a8a5751c8c008d9df833c8acceee2b0a5a929cd7d0def655f5cb59f01cb4c47b54bae5bde0672f2ce7922ef86d82174b8256a4d0b9a31e72dc60bb66deff2b6b11dd6e5099dce8b7214eb71acd16440b6f0918c0fd9bf2ce43b71635d5eee79d48d4"_hex;
            s = "0a617081dd9794c937e4c7163e2865439558d41e688b230c20a1ea71846643b8321d77cad582ec9a70f40d7a8ed9f722c5b9012f436c7a617ded2ad18643457b6fd33035fc2a2cbd52f3da4158015e01fab55b4e26e2de9602101ddb86e8d2aeb89bf4006933a11b5fbce2bd09e31fda18a82ec405910dd3d1cf1e465c176872da3db1c2b3089b48e768ef155ad5f56417497a648ed0427d45ecdd038d3cc8c87ce99a92f08c7641f7fa39ceb4ec83ece0994ac6848bb6efb4e79327145e5396b10faa1ac3a63ecd4a4a2c9cba946b0e5f185b2cd1a04293ee46393d374db8be0a849377eb11067ead3b76e514551d484d5c51544a1d0da96c17b5b2ef953dcdc1c6d592030e468eb8186a5bf660b71da5d982bc5424cf1a4f8ce952bc763b4eaadb2a3f787c8af01df2f43db5e0ad711824acece2d99d5bf9fdee0fdf1fdd370ec791a946a4b6af20b277479a838776e9c09230c36325b8c8ef84db282fe89ced24b0d7869b5d246fb3c60fcb261309897714e870195b9beed0b265800fc6e6"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eb193"_hex;
            m = "4d36eb2c3ad233436923e580faddb45ad35967108be8d99a876745df6213c028929f07d549847b4f9a996a3ddde390fb54aede470fdc7a3e0c7e0688a3a125cf216a3b75b4667586871b0aeb2de3c0e143fab1aa51d54f82f2b5a6d5357de1af42c01074411f28d177d24bf2b2844af6e86469a01b79624f7f35ac30df4efcb2"_hex;
            s = "8138922fd1a87333f1316e207e5851af65f27d9f5cda0f7b7cab0054a2deab0a5c246f1834b8fa0a9ae755b6add3b6dd93c694fa49bea28a5635e56d9841d283320e7a6f9812c102a60fc2505a081ee3849f815191b9d7a6c41db67aa1a053f22d1514226aad3922cb0b5be7dc86d6cd5daf28bada179fbeda50372bcee5fd8b567ca1826b081cc0e6cf58cd7ed935c6922b924bedd7e4f3d48f1995a56bb1d8aff5505ea97c56cdcbaa8e93254e8c6a39db1276c6f53a6551f162f403182b4bca892a6cf527c4f96296b2ce17ffdfa0347d5290940d81ed99a3e8b00e859dc0bcb83e90e9cd9a5b64cb9db1f3f01d26d08835ffdfe4053d9c7920963b07fb199e5c01d44d4182586104850213f8ca60c0081e62b5fecbad7eced93c35a1374d27b67150ddfb44ac68f6aa00b55e38e681b456e60655261d8dae047d67a4ee2c55ecf213571da1df549a4889ea3a285b5b2fe0707d74d470c7ece3a21526f5d4af7085dd11e6af405152a05110fcd6aa06ce93f1d2baba3ed5db73293f977ef1"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eb193"_hex;
            m = "e2a92b143c8a006cee8afebb663119745d26f4ffacaa535c6165d30a1265d9277164c8d8214977ebc8f2e2bb66311f54e51494d8f16a6822098237a8d6360aa6bc288679b04c634849a720ea1956f5043dd10a723371e6e9ec302ada22b17f99ec80cdbe909aaecc9830221028a884cc8ee5bc951bc8b7fa31f614669edc2048"_hex;
            s = "c81ac394f82cb27d75950759224b1787f87225ae5549be13dc1f74326eb668e5e09d03e03ecf039fd08dc301e70bd07992b20a2757b5766bf622052d69fbfbfaca964da33af71c8787eba9ed5caf1bf86e48587d26b21f9f1be601246e1d9cdcea9af7796ae30dd6bcbf1b25734f89e86ae9051c7a2cf3730914406f1541beed812ac6c9e18cfd5bf265523360018860141bcfc51c89ef879636ae2d7f7e41e31337f7afc3e201c6805a76af89dc9ea77413be1f1338e845e9d16cf86e5e04a52d8b579421296fa702ad07ecbfa0237ac996ee2e91eeac8ef48902a76c947b501e265c4b3fbd0c516a0416ea13c79b7e5d5b9435aef3f371d38ff9df8fdded2f265b27da5a84fe5443635e260807db9a1551387e6c9c596498d280d9170daa62954ed32b14d044980eca76a8db63483d8c4cbfa669ec140e7c4a304cc15e468d96fff34d77692581b10e7d25ef075d652758f50e9ac4cf9848466388051518cf93e183f910a4f503fbeb654f4b9424dbadf61d2d50f60f8f02b4ea0e7bc3b398"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            n = "9c213ea373631f572e5e46225b95a0f5ea8ab0a5ec7090a3b0181c5906dc22fd1bd73d11471242a2ed1824e601017f5b5354b92fdb43d4da00a82427d05366a4d552c40d69d200485d5d5db83cf523e61a834b40ccd401087fbb93d81dbed7b2ee2381a1241ac68f2afc02157ee0c73cc66c02a6c6eb2dc35145ae55d7708412a3410f204c492376d6315cedf253af91f31dcab34f72c206ad81e800509864fe9255d046ac25dbdf4954d2350324722e73c1f25d089f87542ad907fb37eceaefb330f4325e97f5eabc04096a8fabba978589e355445d9543274c1c38ff849ba8c2911f07030634c132ccaf4e4f57a5ad9244f5df0ee25af8ef2fc7b29fdf7cc18404e20efaaffa451ec41ab838d594906ff2cad52dcbd0e9a68ef7b06c253710e1318d09ad07012767a89124177df50d1684679e14306889d9a7ac5143d4861b7d6ae77992efa73e0aba9da0ad9a6888bc804dbd07bc26a8a5dfbd292a0efa96867fdb92e845c36e3433cf292e0e31662480257fcf466f7f65d814bb3e33992f"_hex;
            eefabb9"_hex;
            m = "c66e28557124273e4a1fdf519ad9fb646e761b648fec6c9ab4667b2df7eb4be8863aa53e9bf9af8bae0fc09de94f7373dc56fa4472b6b5c4235403a26c0e59557ca1911831ca843342acda7dbe72211fb5351d9a34205f0c77d219af5b0331a2126b94ec1adfcdbe70bed6f8018b2eef61db2b6dbf7292fa19a9655aac13fc57"_hex;
            s = "89fb67fcf9eb4bc9c6ee9713ce1aab7dbe72b9c2f92bee7295521e2c9b1380b04df669f2a8cc06fe94d3843c64d4b4ecef511524951544b2d6a0770543bf45166fdef8cfff91d9b95217f1453ff353d9241d3d755b805a1e2ef9980782afdf3a9f3074f460dafebcf939b90e11e870f39b3d8221dda98c3b0d26ff5b953a4445bd4e63d915bde34f0ac8ba13b604e3bd5370142610064a12217a82e9f33f7e5e92d9a46d6bfdff3868923fc86d30d722e4f6d2e03cc08631f7f13a319278ee76ec014214983b011b5fd862fe189e84ea67499717a406df4d0bcb56b312f035be828f0380331503dee9b303a4f96bd687dd36fbc43c53a65496766ac2e0d6eda7e415be87abee1283998d56b1c54cc5f9bcb08c0a59c070c072ba260950c7500868808da6a7c0ef773e3d2e6d06a686cec36bc34a8ef7f24d26756e485dfa4b71db26174db3ef1ea61e15255579e63cb164eb6eed538c87ac43f7df50bf1ab83f2a85e753ad6e3611d36f2137801e03fdbf58d8e1416c008cbd7c49e0a44859d1"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eefabb9"_hex;
            m = "d69fc30f760dd6025878a1ba227e9be2a73cc19466bf386f53bb34eadb8018e72229df8c8f17ba4e8a9efa4e84fd31e93894948a3151a4c38d6c0e9d0054cf2c1ce99b66cfeb80352db2c7ca6f201b353cd5ed3228a116467b3fbe0b33407dc84c45c1453e7170dec81eced5eccfa0ed3b6692345298d620a59d0edd7b2c6ce6"_hex;
            s = "3000b858d0217705959e33771853c39faca2f07db5600ab6b937c014433c030197a7e7834374c5c0ea66bee8e5e90e7454601e9fc994076758c8a06157c0f23332a9f36eeddf0779664a20c6db9ee884fbe8f845bb608d06cc027d572a0625d0fd548bed10ca9ffed8bacb67e6ded629cbdfc37b4f03e9a56407441d485eb26473ebdf120c4dad7a727c8fb254fd927b1fdfd1f76860f2e0106405f248d950950f87420900277ecbe5a2c7b77f7789da11ddc5b77ba7b6d8ce600e967d9abfd5648fd4040172416508e871785529fc3acd8d55ab05c5a761e2bf77c4f63438edb7dff5770e13efe4dd1e5ee625a751ed75b4e37850655a3d6096fb71ad2dae705a64dd41c84d1ed2b2980f5d80d35f6b7a4bc537b24a0a45200be4bdb71f1936c4665fefefda47752a383ba6ebb3b767c5c76b8adc0cc31f5dc9c17dc67467ae649442bbb9aa2af633f9a7559dc531658429f630a3b4cfeef84f8768554422905fbe86a6a4fb41a477907c4a51a8f0dd5d9b459ec4aa698f2e4d34c9358b85e1"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e24d7d"_hex;
            m = "fa0c34ce3cf0cf6e48488b2b8671a94ded157501c6e728adb3930d81eff4e34fd788839caa22c2f78ddf9989d25b83ee79252743f7703780370b9808df93c37fd4e76bdc00dc60bf5332b30407c71b98290b978b55b45567c1b3d3c17c66440df80f35b7c785706fa22920c4af1c37f404af0d02671b490a577305d251d62da1"_hex;
            s = "60b39a9806dc82244820a8221985f08a775fadc715fac22e856abeae07223b0f7093d3d835e41a4cc1fcd239d129879f70e94014b5c46aa2919f3e13706979aa32172cada7f326423035adccb6096ca44e2f09146b38642605ebee531ca81badb5f5977c01ec2015ee7cb9f7ce12e0a3f586baba7c37e5bbc21e02bf887f672bd1eb17a7c785ad9020a22410068b879a0143b735b5ec44d224f0a095e239dd18d84d99eec82a2d5c3bcef4648772e337dc7b99bcc98bc33ad13ba1ddf36a43dc83aa29f4118db6b0899cd3a8f016fd0c456e80a654a86e0239c8a1e76d0293bf7f880e6ba3b2de37f6f2a6faf551f91ca685d3b26398b734de2599466a896c829a4949483c04cb168d0ae8721cd91b48780f495cf8093b52dfcec7b81370904195617df9b13ae1f06672690124a45c2c34cae84dea3d4db663303af2abb591db41c14ff93a491c008c0fcc1b8c3a00dbf3b0a7796579dc1c2279985b1231c9d2a10c46eb513c8b29797d7aea50b72224bed04e707ad81dc033c54849f0b7cc48"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eefabb9"_hex;
            m = "9b7687dcef6ff9aa5af4570ef50b98f09d6baf4bec99187a6751b0b3f927c9d1a16e7e56675944b09460c2bb22e5e3887218295d3d1844fccd5be3286d4fca661e4124018b7f1b503fb9a73b16ada3fcf1042623ae7610dd5835e3759a89d51b7ab723e54428a713c3c7ad97b7ab03d584f64fa728fda5a46fa959a26a1d1279"_hex;
            s = "6b784ee0a868b7dba298549130204a5245f830a89388dc8d320203fca4f8a1acf33777a43e1b0bc00a6d7ffa6fc1fdd78f4b2edd65c28a2b3932388900a0b5b76b44cb78458b2adf23a19c978620050dd0b8fbeca50e8cb1559a85ef0cd11ca38264d381414b6b1c63e16ea415173895430f1b1f42ab1b0280a31d981c402aeef3e890a936d6b182e83383ba75b27a1799353dfa37faa7986f4dbdb14da99ef18787bac6832464235660b6669eb74a41a9260023115d97bcd14f8707b619b0ae1401a8502a818cc1625646ec58f76e529ceada77b25a5a9e328991b0aae5e8d0ea06c357c28b63f101cb90d0b5d0d9d8cdd606d91cb0b7cfdfd33cc5e4268b78b84827e87debfc38a70c9b86e7be02462a62bef66664162216b2ca06ac1b8f52785d3115e08008d8c44a77a4221af3df45ceab9c6744427a9a8d019a4ddda659c0a5d3bd7401e09d143bbd6e3867a22a26bb09551b91488be53f561b1e80fc2ad649d043b6aae138737d0c6d7e7e38be7c263a536278c6910fd9414f43e858b1"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            eefabb9"_hex;
            m = "3abd43f1d741ddf0b752dd94197ab656288ff465e5dbccec6179f8932f02c248196a5e3f12247c376c8d1e004b87a73a5a64355fbc0731044645255beb91cdfd77d970e681ab70c19a9c2167cbead7a23f6043363c7aff2258ca6723e99aab7abdd322ef0b1ee116aa488dd181eb6d163f4bc3f24c7e5dceffd067f211658347"_hex;
            s = "4740115f251b35cfe19d3816cc1fbf02b9a4d9470dc62b41cdb72284c30fffd34e7057559a73b44ac49fa7285f3e9a680bf1949562a47f01bfc55eb7bda9e291c9a5ce1a5d7b619590c0e1bd36943fa41b9cc9b2a3a742c2942c53ec3e45c77176e4bf32b7101ab4b05a996a21fe12921841f8f0fad1e71bdeff5a7f53e8766367311a98b9d8618a6198aa1662e587332c24283f9ecf2bb2d825f597d18256ce9c5864f1ffca37c4ec8df4f945cf22c974f5ef3dbb9f170b3978bddcc91b13b9e8550bfcdb74ac7349d531e1e3280fc005ac34c03608993b7876caf27c8bd5a97306292082f77d9144005bcd1046f27303185b6a7cac539f1e05805ee8d0772f37acc3e7fa0920171c19ec9266c4dd6d9e51766c4433a2831c3e5fb7d84341624ea9a25e1a2eb27ef2c7e8de491d94d8a8a31919bdd7cdf6073a1d88f452ff8d15e57cf6504a81843c24351c61a373b73acd84c76de916f290e0e9bdf51d8ffa63f867af587b5c759111671079ea28846466cc33df7683639d018337ebe13cb8"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

            eefabb9"_hex;
            m = "7ad9bf1f36f9897d2844872e582ab3513cdbcdb437ba01eb610ec49f8bfbff297eb26f5f84e44bae2a7c286a438d1b6130891db65fb5b3ed12d9ce42623cef3f83cf908d49a9c00bebb30d1d08a5a647e731c1fa037d3badc7d77e3096a5a83d0e9aea518e302db9f552fcf0ad589e28e93982272afce15408709e122f1d714c"_hex;
            s = "177e1c38251b8e9b406597ed90d09f666cbcd89f6863811fe7ef2df91a5333930052bf51c35aab93c77b4b6f8dd31b01e055303bfacdceae9c3a1b9af278100c11ed167acfe272c030dc358cae5780fcec0f6bc581e0c3b0b45a7272aa92707659c2b818709e2ef9ae2efd6b841cc82267f384cc8c87f66909dda9ce58e2e7c35e68c0c43973e9fe024642f04ba2b25d6dc956bee6dac19391f5a2bd5ecc64afd1c25af65ad8b4189aeded9e496a73e62e648cb1ff789d01c1610db96564b2b8fb42846ddbb1073f1edf6b807dc9635bc247628726e7d428562a48e4399846660eeccf851a47b7bd1dacc9bef14e3d0bdf7b22c7047955380dc3a1ef6ddfd9533a0bb0f511811ca3488076a4896a95127028dcd23829987680829d80d68c98be2a7dcd7c891fba6e46e4f99d4966c9d7db1975b60b4fbc1252c93a96f0919d5a4177bd578bcad8656ad596b173414eaa135c462cd5e1f783fc96da55bd41123e58b892618dc5919e4bca146fed14bbd54601635e69000b506044da3aab706848"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            n = "cd6141e4c8dc6997fc65300a6e2c746f391022f15661231a832be966aa498e678777766944db54a599cd6ddbdaf7533f429e6e1197b7eb061913f50b09be04ab70b1b702fce9ada279ea8089677a37701e64190f243dfabe7cc254f08a6143c9c589ac4a90881c0d2b62e98013e92d049ee9ca11a425ad450ec5a699ae17672d86efde3fbc81203f2b500ef41746b9e9af2642b30cbf75e7889e500836d6dd32bcc5d8b69021b764a591d6850776cddf0b7240c75dda9e2d197f2cd9c6787b16445b55eaeccdfdd17fb72d7fe5189aa1a2a6ad06b4f2bfc8f6c91c3a2a80a83a3113e0b420b70654d6a5075d38d9a12d1e0fddd2cb23b7f3ef949991bf49048dc40020dcf042caf00883363591dd6a90789ac212a0ced95fb40bcadaac2c97ee7ff302c37cf2aa7298311db85a2d4d1b9f037023c21bf2e9b9abecc780a70cf2a54002634272d7dcf25ee4c7dbb04437f30f50bdcf4962d432484a5dab7b60b31d8025b984c821fadbf2b623f2f92a6531dce11a1f252e603016078f3986e081"_hex;
            ecc92f"_hex;
            m = "9fe9f933b93d5c2ab2f681086efb04090c809727697da534e65f35266cfd10b2adcd261cac582e4d7feb8d2653907914b23c5ee4014a80d94d28e3fc475168b48c7b38962a11657e60e3cfdfa61d4557ed75ed8728a9e6210b292b421310bb03c659f74b3c504be7de4610dc6e89b1fb48940db7e7821d34aac9d7a0d82452c6"_hex;
            s = "4311cc3ccb4a2215d64184a22d0910e2f32931be4e1751b85746c5eb69c2a388d6cfe8f0f7d492085e2debbcdcad65ed588103df67099d5c9aa6c7940e777f9141f6d00f2c30c749228656cc473dc26c3bcbae8b46b9752a29cd0de51023e442752dc6493981089ec6a000bb53ccfc7f48eb320302aeb13ec9ca31446a3991cf78406a6d7d3591d8bcbb643480084e663edda49cb7549d42108383a813ef4709135dc9be769d8573ba947382d63e817c4ca51d6672b1a061ccfb1362723b35d18eaf713c86c9b8fc38485864bedf5d4376575025b046a803280c20fcb2e243b39c5ddd52c2961dd7dccbad7d0daec3575ec564ef268b9d0b5f4fd1decef2ad8f22af11169b471b602ecfa961d5f59df6103bb73c75557b93019dd0ad4ab1ce9c1ba466e01aeaa5beca934a4ba25f5dd3290b211855ae55e730245534889bff626bf53cddc2e8163f117c4d2309db4771f06fd326af015cd46036b457ef1da7b6064497e322644897966bbb99f98e04a91a7240f12559ac4446a1445f1e378b21"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e6f03f"_hex;
            m = "e62f04e5d82cd16ea4cf1b3e74e5882a52a0929a9b3d9547b1e32642f1cfa739e5ae18f6ba4a3028f469ad6660f2e8714a52acb9f11e482338fae30a9eb9108470c6a3e63ec2c28a8b6e3fcfc8cc2562848190bcdd7ec2ec3adf74973c136a3df13e4abd4bdbae1cd1a6788295b9668566f5e6aa46a32b291f5b80f1b125dcec"_hex;
            s = "8f20b434b6952a0647610122d5f836965ef69c2717f288c226b1c1d87d5313daed259fce61850a70781244954402a0c210d1cac134cad6cdeaa670cc7e4f682cc26b2108eee4aea7abd8477e5f52f6ee539d9e1799580db1c3fa5b7ba018c16bc3dfcc67b8ca016d5c26554422a74593e0e056a239fa731ab3e780aafa711a762e174b487f95194f902bc7186fc77839e2885ac0db328c71f4060eb8ef7cafe109cdc8e4acb5c21bc964feec80474daf737ea08562888b4296f041581ccde0a2fd61455f6bf56986dc0506f4e6f6b55b4b0e7ece521ee8265a0e63fa87419032c28cf0536cae35d0ed9941027ea680c0785a96d075de14f2a09f36ffa406a954f7d3654a78a968002bad6cc6639fe8fc0ea7da6aa900aebe136368ea8c3417f20af01a0ea5ea485416d577931f9f942d1c6a440c1d6f2edd5631fead4c21f71297e0d8ed753be4100e5f8d6d7acf7030eb264b4edf13c1a5b9c12280cfb5fffc7d691bbb781f5acc4b55f64cf28fb8ea764d79ddad4a0a59e562e45093ac7ad8"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ecc92f"_hex;
            m = "5df6c2f15c25e0d72a7ecd6aa3b480949f979945db38f4b8364e7ef720d847a14f04d9ebb350c9e5adef8bff7c6e8acbf89778048296e3d03b5a0a42743eee2366e9acf223720929cdc84fc2065258faa7d2e855b58f40e291b3efc06ef2ece1086ce20e94d5cb2bf2d3c0bd2aa70fa916108f3e5c6c3076a021d679f73b6863"_hex;
            s = "44444dee1f63274ae503afa3c982b96eb60fa8beb0d4146b48473f816946274004d0cea30c1b70d1291caa38012f848815d33e105bdbf2840a1f847cbc353fb8a7688db9e27f9ed3ec0c649aa7650f102374936dcffccc5848953f7dcac50974bd760c4931308c7583b76510eaa1311d14ee4d8cd7403df1b0b7e97aa7acf6279e4849e404217b8fe072207b1af48a154ca91316a1957f25e82bf30468a75c51fc7031253f492e75bbb656bd291110fda322052324bff373b493c713bce00276854802a46fe05f4952d6e80efb1e12a9d6122a554a6a73225586fa690ae4e809b74999317e6fbe1229177bbbf8760f7cadd715fd1296664005150bb38663a890a765bb4646f4b383aeb1c7702fa2092299471df682732df8835737d3ab842ec83c3f2021aa6a618325fa36b4ce34dc2a8a40d5bdc95ba621af1ae7e3f65a61d61c7e0c8e42fe0ed054f3e68f8f8f64a21f7931abe603e13094b9730c1dc8be5918c7386dbfb436570cdc2a3e5e4ae1c937a654eef7354273c4002ca6c79ec273"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ecc92f"_hex;
            m = "da1721b3190694d873daae06b0108945c693ed88ef850c8cff3d7003f58c31f2d0456b58a4fcef10ec0d39f822e1a3538d6cd86c5bfa8a7def2c68ce7c3d4a21d38aaf4e79526a2bfdba98ae8814d556b660b0c6a4135cb44b18a8010c1530298befd5dec1906cf04de8b3700b318915e8785edef559e8f9ba0a17e4cc9b4cd2"_hex;
            s = "509d9b9af57ce731263300032280ae4bc353189a6d25b50b66834b2a9e7626937578c82f33c0369803a2b97d71093e79e656d56bea286a6c31276ea3796d0684a30eec606665b829c82621bc6274e93b4f1add1be8d7ceb66da8f1f6eb7b9493669925a8b3dc0c21a4d6cc19840b71a0b312f911a328c7e58735cec47303065e6fb01457b3d97b93814cb6ae6f42b3733d2101159b08bd33403e22b9f0a288ec02d386a59c4ddddf9c83c3154ebfbb81914373b91fc187dff00d93b8ba344aed763362c67a623c1b90e7d6b781f3688254c8a013976cfef38f8cb947e7704ed5d6cf4b2480a956c0be551e986b5a054ab59b2e9b979062fa6ae9f8204e09a5962a8af893215646b91aaa2743df1745449a30fd13785b2c4b839617d380b1aeeb4296908fe494a810a6cb80d723ce74716f89f7b50770b577dd5dd900529d6d67323094e8d46c60539c9c9dbf44801cec4082f6a73910ec452a2fada90f2832a3dff07fa1f0ffa1476994e20a335d69e671366c95a2cf4c16dd4043e57501184d"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ecc92f"_hex;
            m = "697e6ffd617d01d666fb1c069477d3a5b36b45a00ad2175e73e622a3b52e68b50db84dbe0ea40472ace247f1933b4befbd96f3124374449b73be194924c0177a4675e494bd0594a3708c64449c1dabc16f070d7dd256f293869d36ba72f3236c3b3c9c4716aa9ab3da83ddc55a24db63f146fda95e800a8cd20de3bd48d072d0"_hex;
            s = "359ac6731fdb0c3360c8c24311e48e84b2ad4d1b19041009e5fa2d6b94ddd87dc9be9206633fa87059d184dc583b9f24e6909fd5a533da78e1687b1c01e4c5a5d58de0aedba5d7b19b268957c9e79bb631bdbd423e3a267f9ba4a1266e2c3aa80929e5f7260ad9681af2eb2b8936596e3b1622e076b8a33dd86ded2b06060c8e74b1fd0f2ca88a8efa3c462b1227f8cecee0f77ef17606c218abfddc8cfdf990102524ecff3118f81b48adf286d6b21cb8dd815cc1235289ac15f6dbf420db9a608ff26667d7c80fd56124741bfcd47b42bdb0c17d66bf45b2f88d633e1954172ff808e7904db96d3396fb9f7d0da5742a937691fceb97894ac6774aa9daa7d18d889543cf3a7ad96d6a6e6feb4ee16900ad070ecbcd165bf82fd075046478c42fe8584023910c320901b22f3a4690597fc78b49cc2aca4e9b97bde0e69d62c9fe1ad07b5f0917e175d01f1fe5dbaf8abc3c71efbe0b55ea48f23601eaa5c70fdc841be8d1b89d01cb922e9ce4406747114fa05f55c73922fb28a42c2138a5c6"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA256 signature verification failed"
                );
            })

            ecc92f"_hex;
            m = "d1acd4a6035f23bfe67006132a1cd474ef58c0113670f53c95eee57030bddd92e48edd77c57ba8a7cbea1760c8b5b2de9d8881daae8a2051933f128611ad574a48bd417b2de583cb3b048bc2668d120751e8f1dbc01536e650937736668066856501a6ba24e4ddb39f840b42eced1a757141b61b555b5e8334b1bb87177f31c9"_hex;
            s = "55613f64331abd971e822cc3d972f67e782b6af81aac0b80e2f6324da6d9f33c46f8b7e24c94deee7e98525aaf4ca6843753df3d444e1e0540f9c196ffbbcb4fca7aad4ba94288f911650e3caf6dd22f87923fa4b12e2d6b115f2fe773af2563cc760de88cfa6e16878dd9c07f0d45b10a224d1a7ee1d26ffadfd38b78004a2045b35d9cb9fccdc715668a7401db7adef109ebcaafc5269d377c1e8f7d4292459c801a93c4d07ef477f87175aa35e002a03c2051985fcb6963e9bf96e28e55eb52a3554475f9095f24a9e422fa84b60590e8b8d6ec91dcf6a584cc8a934e551befeedc0f0f48dadf293f0f9260ee22d72ea46e271045b66516b2bebeed52722aec5f084085f8faa689308bc13fa5b9e5b0aadf2766258e01d4b8ddbe0d328aa112237ec10b115be83fae8a0113f8890edab79d0463c9ec6e2db4504693535dcf7695f84425e9f7b73e4f18bc072f5131989b0cdb07f496f15e562d07f0711cf979f1aa4d140d9783efd6f96c41fe5fb79e5d5d689dd5a705f1ff837754031a39"_hex;
            r = true;// Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_2048_sha256_mgf1_0_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_2048_sha256_mgf1_0_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9rc5
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(0U);
            {
                auto m = ""_hex;
                auto s = "20081f8894a1330c4d503f642880e3c30e398fc6235c24f1be752e2d49cd9493ac0cf999e275c4f89ff08f0d9ba4e264a332525a616d336bd9e822f41ab3f4fae2f48ec66c2e52642ed93b7cb944396fbaa727cbfdfc1f20aace99a6f2a74475c338f8d9f22a38cb5bc51752076503b3aef1e65e5a8f8583d9ae7378ded038cf516898ad06beb90a42b85764526fcea44f74258fa4efb1da253d337f65619181ceb832dfe285ce78ae6b15f204e23bab274e87445d9f5df97f41dc8e3a97736b62591d075744b2552f90bcf1b1393e1e7627ef1f985f2bbabd52e43a35d0ddf4c67126e391f922ef7b1bb1911cd6e1b303cb2910dd70672bbfb62ea4eaad725c"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "4bf16f098701d340c438368e658ed8904d3a21f7714c02440d7476ead132766b3d578b325ae752f906873af1b795585a2a0d0e6788fe903321b2080bd0dfb9de42c3be41aeff37e32defdc0a75f12adb5b9de4d067a920a720cb16cfaf56d7c09d8ef384a8aa106545229b540c52b49ecc9d6d14ea70480642b9cd0330efc005502e4c38b96a36456447ce2133df78854307010ec221305dc90570252321e06c1bb01d75100e85e68326fe92488c0c5e58524b10f8ec7458d887cec254d39b0bef921ba31fd5a117977f1945fc04837727456949ffdc9886f21071186bf32dfbd9c3cd6a2a00a1cdd5fc3c22f4bbaab92aa85116711f1c53754bdd2bc384f2a8"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "54657374"_hex;
                s = "2b3155b14971f79c9e3294723c7e41ded41af709f6edb2c19f3526584aaa1ef2de2e7a8dcaf5d7c3239f604c421656dc58e8b0852f7a65cd557724a9b2a17cac38d8020e939bfefec5dce0d8993e75615b974944e4c4a811e40db63f13d2b626bf26257a706a7bedc863d0100b676ab70d4a4f6eaf4692e0b69ee4426cfe7cfc3e92d93bb804569883cf31fb282efa5a81ce9f6d9f0ed79251ef2a0b596f80e0eb96ede67e30457a07655d777928b898ed1679046673e489d9c6305dee05abfdeba7357099f9cffd00735165ddc39aa7355b10a8b8612dfa2f836fb9f5f89f1407365d6b39a39e89c6647ff9da5fc6f960306686a8ed8e2ce12cc7fd9870d576"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "5e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848cb1f"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "501c8119a0f8aa2139ef5e05adc65384fa389b9023532171d514651ff48677aad546326a2e3c02b39ed84e5b7e4630604f2979c1fd7bf37da8e0cedcaecfbea6f9c715141a1d052529d0d0fcd71eb70867e2704377801a0ec721fc59fca9d8b1b08cd9ae3ab094f5bbe2faaf3171dcf1712c534bbc7ea802a2a72d8cebefeeff1530e4081b85a42ae38f630f38c1121199f2156e267ce2467f9b4853dbd29dd999aebfc402f2a0c33b8c1b8022941e754b7a187df4c59633dc6e76cb3200e34acfde53a386647833dc2accf244726fdbf440cd32503188a291e5b0678aa729b539c1f5f97e7b788c0c20b88d90c90a3bf33300d181b9ae797cbc76049b43be3d"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "61"_hex;
                s = "a17d67937354c7fcba18dd5383edbf2f0868ccbe0a316876fb1c4fb14e7f4c048ef5ded5d01d02556cff0c8bf081bd09c46ce4da156e9810df195c5b65ddbc3025b84f91047049f205341ca8dc55e440bf8d9a3e98c231bb74e71be019cdf451e962d8b7e8e6d766d3be430c7596ffcafbb785e5fe8987ce721ae228832c8b4fe0b0071b0e5c652856f785695f70cbb3c62394a8291ba5f587d4fd7bb448649a72261447aae6a2b750824d400ca402543c8bdbbb8e7c3b44cb7085a83392346abe999ea2a5ea15e9eef6bf08a88096ee4e532369f0059285298b387a428e5e34ed7296e0b53d34c5e23f0d3c12e8a2d3132672a655c7048bdc0c69b36cae602f"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "64c26d43b028f284e9667d5951e70c75e611ae2ab876f66ccfaf09bd54a26dd17983d993bd4f5270537f4c4b2e48695eda28c8c365486b5fc3bde4049dcf6fd722e634fdf5571d29b1e156a48b0c706d96155d86c20dbbb1a47c7e54efa15b25d76f502b3069e2514f89d9bdfda9bcda02301c58e2173cf4f3dd49d8415802c11aed78f031e8e2e50197443e5fe9ab55afd8deeb7b5db8ba7a7b9fce6b7d9eeab9ef25035742d076935c059d076b4714127d408c9428a90cb9891a151eee8de7d0cea32b0ad2d8ca4abeb0521b296b5ac08f7c53d5c85e47ed828e0c11468d6cb50bea89e4b455936376bde9f22eb98b3e2395eedd05d1def38fd5e082ade3b0"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343236343739373234"_hex;
                s = "08a900c5c0cf38963b8d47682cc7dae9d3f0a78e571ee5bce658154248b0084ab96a7ab0ca8c6ad8d6fc105040c9de8f8df61c1b6be59a5b899df586026e4b3ac1531ab09b5fb5026cbd252c6a548fae9ee881fa382d98499fb88c2b061f560e1daf98145705054fd0ce66d8fb2f64ab160f4bf1ed1a54cf69382afb75c71cf4c38bfc1603653af35a7ab1ab7268cfbed88bd4e779a8811acc947a21b059ea43c19786f370076360f4620a486d6e0572e5c6c796604736acc5b41c6da7ab2a40630bb8bf572ae96c9bf293580021d5a0b42a196c74b80b55225839756380305203b2bfd7525618b402d5288da288bb3d78deaeb26fdd432b2aac746c4fea8b0f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37313338363834383931"_hex;
                s = "29b1c67e4be642cd69e7f38115db51d963a54260a877781ddeba5fa6ff2fc0da182f8923bb9257e92989438392f047943f5769ee057c7162c71cf2c0147ead670ab9ae2c1fdab604601a2dba88483b2d3b1dd530aaa17f7a056f1dee49e0b967984506bd39f2df29a06d58f159465973a0fcf1eb5890464863aee92a4f3938742c876164ef95cf34753e9926ef87004d207b9e496922bd00dfbaffd9ddfa216a4b7bffad0d9608e0a2e8d22e41a514494683831e25c24f032d1bfac19d193c4b343815747a254f026313a6b554085921c6a8d0b362a7e75f6419215a5b9d4b7b872cd952f830426462a547a475ed3696bb977223c1fb5aefccaceef99689788f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130333539333331363638"_hex;
                s = "12a1cb80d9ca2b229f85c7aa1705abaa6152b3fe1c6ddeadde2de56f49cb5d5176c91bf9a12a12372753d0b657fced52a8c6ae88cf6e84a358b996fd06ed0846dd685b800232177f17d72da5e817caba8ec9a1f08ec7e015aa2821a1f9777ba6a7d0950449254e5bc5a0bc63f7a6c797fa5b2d30e81704735f8dbbe1a6c7c8db18c142b0861f8525b66e4c55090377b08350001b18cd27f6e1be8d43b936883f7e057016b78f6f810cfbc19d394909040844c9cdc9ff5c8b37327feced820f3dabbc1f597b2ed353e7bbd3d315e9e02124f98b014be827c635e13f284c1dd5f5457129d2ef249ad12659cfca95646314abbbe090e12ff4480a50e393a47a19be"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33393439343031323135"_hex;
                s = "7bed5bb43826841053d23cb2f574c687be827e9968b37af248db451efcb818d0bb8975ddf7407496603281c5719aab83afb418f496d8cf26e91c56974e65b382f96a206995dff1b57839f7208e338e86358cccaa30cff9677ac0a7afa48e8ae3e3942e36fa3fdfb47db4295027e0cc4e2b98ef1db49519b316ff4bfaac246391691c7705acb89923d39981388286c5969bc42851788872659019a3bb05a72fe815ee17dd0bace92a934683e019049669ef285625b0bdf9935befca3a0bf6b4154d65b62a83597abfdb0ec335c2cebfa627918ee28d64ef0debeab27e9efedfcc557789f44d1e57127b066a221e11f4c0b146293d78d72a5f899f954b5dd37c1e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333434323933303739"_hex;
                s = "38b09eb6acd2d2f0e083f0bf84523a475fb5519ebcb8a5fc2007cec2ca6f01b14e4332acd935b070140cb241b4255fa097db2781b572866b55aab5684d73181b4c911ec6e72b3c267c09469737ea36eb2aeba743c29fc4ff0c82b3002ed8daeac313d2ec4f7d9e707ec334f0228852eae8d58c27e1fdd1dbf8d15b8a7b0f824eb4f2c0191924749e2af4adc0a0ed41978bbf390e31860068aa8db5d5c7c7e86b0cbc9239fea65bf0d9b0a4d7a7058ce6e423858d3a0956c3ac3af7f408c7926ebf86d47cd49de364f90671afb52bd7d17aad00833ec79e43401ea2437d0ef7a89ad35dcf884121bf91ac17df17163ae19f084398ca3abee47db7c111c81bdad9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33373036323131373132"_hex;
                s = "495254a0e2eb9ca9f0fa281cc7ee5031ccadd0ff52a1c77dc7fd027f54319258dc0a4e4bf98d13711a4d9ab0c1ac8d67f98c04747ae6b9ef95e67c8671d7d9a2a2bc5e58b1b863525bc10c6fe65388590b96f246c58d118f03bc673b87715db69385907b5ed7ad576b452361ac8164f9eadd250eb445d697ce7c0bb4360c65868a8fe06101b56f4f7cf82a9bc78254eff974366f2ca2f7a17096b05b9bae47ee572eb60cceeaf1e7b484e90b5b0a8ee6f1517d1e694d23a2f9d33ff47a3acb7c9e93a6fb9ed2e994773caf5a8ed3453554807124fc4a4a19fad88c70d5d5d90969e19acd4c1f10b87629dcf5de6a7441f47ea4cc4b84ca6ff43e0905a73083fa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333433363838373132"_hex;
                s = "7d0aee24ec62cd2c6238e49dd589ddcc804b5122f57ca8c2d3f7ddcdf1503c3eae8ae192a0057fca6ebfb3231cb9aaa380bf4509df5c83204cc61b4870e4233616ee7097507222c22010c3f34b6c75e4a341920dce40e4cfb72206f00dad39cd0786427575cab19832b64ce9dd45bf8c0023b5b007544c4048eb06b0a73e1583db64b9ae70ca88a7a169953cb207acca099876841c6f0ae9a4cecdee900d2ef1e5559f8b496467733e44bdc6ce8f222fce5e99ae3bf2ee9f6821dee0f1a1fdb072e92404e325e06f813d70df6525e76f0ea5934e53ca6aa12160f6a92dd9d1f5a4a61e47f3f01f297f0470c343df4167588b81c5223908b68c4e2380d95fadb6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333531353330333730"_hex;
                s = "5d822177791faa3beb1493af760b50f62e78f14b3eb278679d59dbb8ff0eca8b4f4f90124b830c8d635e90b86de97d92212b1e42aae57cead0650e7e9204d3d204b43d2e6376092d2b280acd18398295650dc94f74b7fa7198c0868890078422e2ce12d375986ef387a82b188a231784c86e85ab0c630f7876c652e4f4ba9a4d4dc3ca70316bbae3399f82c3e4e24983143baaf4e176c7c0ec1cf908eff9c15b3468fc7a44f6bc077cc3467e4ec3a50ba51858ac9cf3cff0c99ce5c963ebe5341752db2cb6ed5980544056d308c7c74fd14985a414ee61669bf4abf48767071cfd0c1a1df84b8dd4dfca74b342ec820aeb73a5eba0df78b85a568dc36ceea5b8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36353533323033313236"_hex;
                s = "978c8852ab3a09c6e28f627cd917927353874cb7b2d6647f3f5889ff81b048f4a4c6073ae6d99bc7354d9e45c805febe5be5dd3f95ad14513119169a6ac7a6a5b88ead2171d999f199b324251566066f8d9a3bb51a5b59c799858d459136341ab774480f059fee153bc03e37cf676b1db4abb2f7979554fb635200ce1c53448e5dc397be13c4d8f8bc2cf2117a0c4ddcb08926fd5a1addd193d0c1f2167731c73affba2c7437443d8bce828540a3d42f03b590dded0958aa4fe48d66d3dedb0697f366b3c7ef9bea8c2b5670a31c41df21828a3a481d9e42c93ef0b5cf43330e6356021893078179fd857a14c437d8b8c66d4e4efce1369f6945c6bf878508a0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353634333436363033"_hex;
                s = "132228bc781249b547b2543f004b5807c05f6530eb685a0a3c6b7ebe5c38ef39eddedc5cf3f98f452ffb202e30dccb8f14c252e673473ec7bfeb0d9cb16c2d88ea166fbb69eca16f7e0305e054f158ed24c74d02328730488179254ebd63972f2a51c45f274939d89bcbad5df3d3961115392aa483beba4f00e55531550f6e167da38519273b3d16555dbc286979b40cee6e5e5559cdfbe6bc208b53e6337400821c43646f940fe624466834b335b3bad27b8f298dfb4a1d3e6308a5fea77fd5347abbd2ee8e708ca2f8719cee6ffe9aa91443fc8ea50417d5f546c223fd07a587ac547a2e4b3f686b7034c06453db15fde31bd1b1c76448a3bab5d14c7ff94d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34343239353339313137"_hex;
                s = "a04a78f92d6693c9470e7e88690e40a4ae8aefd0af1845450690337321ce5b5e125f981b768e9e0a8a4a37e687a038da1d2c21462b962b3cbbdeb170227fd92f8e22e99e6a183ac68c0c42708e369559cfe7a1bc5fd64ac71e8ed34ce70e86336503028e6174b3ff2b9076f4b6b84f050fe36ac45a0f1de677b78f42908de140d1f2a6ec887a4fbc795f761f2f9b71d45de9e6ce7820bd6fd1a53f0c1516e3df5b31486518b767ab554814ede6270b417d53480d82c415d86d40355b405341034da2949cdd7598195975236e264b098822aa8844488f16fcbce076baff03a9aef6a2aba155ca14fa30e0efff4c968eac265760dfff2056f6b1079dc29316b629"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130393533323631333531"_hex;
                s = "221efc61ab6dd3044cf77780d379c01af65312951e5ea5bd5ecfafa5ef55c5a54e8bcdba38a7b12753bf049e5aef8f2b71796429ca9350ce820a10c7042dea4beef196ed5ec3a34cfa534e711ae8009631a6a3c6d87b25af090cabb2c80e14321763fe1545bfca78267415fc89878e968283b216af23a9a5e675028e62e1e2df117737c773d832c705d3ed36e680f1e3b2ecf06aeff69e0072f951a34449b4134e9e139ffddce8c38b2ff0d20a314b45a9345e3ae6e312a94673605e5ed8693002d60629c60fa54469148d5c50d80ed8a1a0d22e4672f9f3a2eb85d298928e4fc333fd1e0ad5909e65b8fb82917415473f28a17a618c07903e8acbf8015e1c81"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393837333530303431"_hex;
                s = "55b67374c9ef2ae609f70bd1c805f5c092278e8a2e45f049b949bd57d4bed44dd9880cd59896de266e3a5294f29023a7fe376bfdc35bb92d542f28f7efaa37d4f32c297cef38c723b27cd1fc0e45f6babb61a27547b37a186866a9c725a0d4253e35befebf4f47aef7cb1c4b35419b6e024e0151d47c0c49fc3bbeabeb75f2dd596fef0f8c9c275f6058b9130c58e0266ef12e0233c6d16f78ec5ccc1e8c7e03e3bcf12be33317dfb660cf6d3851bb2aeff5693fe1a6e4b644e0fc860a3d6c2100009f29c632fd9a579a6bece04ed27baad3c5d62b12ba30372e5d7bed23702c146f4a644a6ca1bc9b23f29cfec3b47f7c92e9fef471b9e2555700ac3c2960b1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343633303036383738"_hex;
                s = "74af7b301b5b480ab70b7af2decd155d7c6a280ca77663c276cdbb702f7843fc3b0e3d54669fa9b99093f323533f3ee584483c83fd2f20d2d291ab8482435fb53dfa19a898fce36f470951b4808ee4cdeed273546db4e6db79cb2a429c04c6e0e7661f6ee84eea57981797a298ee37ad2661b002345afc0fe97c6b2b955efe1d753f3e26533b43c0ee4881e6e7bb36bd56f061bce340a9af0a679bb29f10c3c140ab6a5d3fee7f5ee90201d335a09cd99d71c3fc4a890723f1992f18ea3fe672ab6556140fe4ca5b16b168736d58ca8b0e2be364931a1c2d63ebad5fa3a075a889ee1c56d5c128b151ba55a0db4139973143182b6521962ec36a81975b0e4a7b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39383137333230323837"_hex;
                s = "3ed6a556e0d26350f61ecc896550888481a0e4fddc0a8db85ce3547bef67d5a4dc8ec653123b8fef836e6d16187c746042d8eb68310545578e7aa69d676e2fecbec00567e67d9f90bad6ffad56f2ceb90d06cacf8e7360439542a6773e0b25b15f385f356f6303348177e662b6ed30854dfd40b649e98eb9289e964e15bdfad7a5596435a2c2e5f849431cf14d2b3549691e642d5dbadb128f663fb06f84ae233d8bd81fc7571970de9c5a14854ec03b3b424aa5091c0da9a25020d83ee439e84898411e977db53a9bcae55985c218c1b3d08a964593774f9120aea723683f8ebc9f095598a1312259bf1e20ab6a79928fb22858572bb11a77354383713232db"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323232303431303436"_hex;
                s = "05d975ccb92859e4322c7712119877401618268ba486a05a525ce5fa879c5b8cb2e38171f1b8c5badfd2d32b276767389b011148e994c400b8dcd2e44919b20fdac75ea3c5bd2e1b488d285e974569932c418741da41ab229dd65ca09cf281f42e231c8657623dbaaf7b5d875aeb7dd4aea1fd15fe6a0b7effff66e9bf979e70b0ec28dab260ec68d679b13e76dc1f0a82a0c598b3412cf6a2f306e8e5107698d3c54a7ede188ff396ecf7e153cbbe322e48de7fb4c8eee3cde0cd35615779ce24f85f550a35d3d31a6ada6175dce6346f2b4c7ab0d60d4a95500bc54eb5a1da6028192d5a5372f48dbf704784db5616fc1e690f7ab3be167b5328d487893c3a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36363636333037313034"_hex;
                s = "40f9b74051d6a95fdaa25b05598b422eef97852dda217d51b591a36937af45ddf5e06f3eabfaf17610e55490ed3e00d11c8561f7cffa25600fb9ef7a5114399415a933eb6811ae2142351cc0621a5d39ff452875b1a669c666c606e4b817975b966635811694c8a920a5cbe8300df00c0ae0faa1a7812912daa081c7204af6eb7f7152ec82b45b504dc3214eb9ec5b322c58771410dad121f5cd887bff9976c38c3cc9b1a44d3683e95c76e6a83af6c650cf6091b68e6ea2e6f28b11e0c664ad132ff098d0cee65c8f0b436328332ca0bd1048af8de618fdb494148af8d2d98ef4819fede564476a52fa2b7d176e57f0fd9e499a215de6b7737278d7e6d95a2b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303335393531383938"_hex;
                s = "94cd1d5b54a88649f920e1decf750e04c8630e32d71810016b98818bfd0d978bab2725466c1a826bdf4ef42b115b904e328ff1c012c704865640af61aff3f7bb6a3fd667ed2c91ebb93a0232655360807002c2f05fb64c90f842b7bec11dd1960bf85f2167b397e0852b790c7f193d6e7f264b2a5024807dd5d76d9487ab0e422c9216c693aa1709e56b3b61719c9d6b35f510a721d9471f83ca1a6e46f7c14ad0e4ab4f2513a389e70977b3d7d9917a13c25c1a439a75185e9aab64ee7576db623e514283b2d94e105f8c39acdfd853817275e90541c67812e40a79fcda5a2d32d2c400d1193f1b756c98e8d3212575dece26c44792fe3fbce5dc56d0248c5e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31383436353937313935"_hex;
                s = "17da6446874a87e7a7ae4fb637c191db1d13c20befdc726c8af26a63b78bf0c998b82c25a125674a50717a849ddf004ba0f1400921c08a37a0c56a728322a2069dca4121c0c47c437e7a16cc3592ad5441a157028d8cb6cf7ce5b8582fd525a1c5face82204e01fabca60243022ea4d58126fa33170a6053ce2fd53b46b165d105151d5a3ea7b0f2f019784ae87fed529d771ba5a6a6ab60934a8aef5d4a4f25e5ac91b64e47aee095352ac6a9f68f5eead836730c08a35395e0a2cc1aab29b7e1d5ef238e939e9847b90d7228b1239749e79c07394acf13aa32e349c23731838b241c20f7ebfa627f96dcdf395b4f773c74347ccb966ff8a3122f6d6f1192eb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33313336303436313839"_hex;
                s = "0169a22f82d7c1fc21caf6131d6a4002578212f3beeb185a832408833bbc246f05222959e90849bd41207d6d74a48e084b6eaafaec78c9c0aad7a9b24624e8c4c66bec56fc86d2ec31762a7498dd48207a16b315c68aac94662013940307e6f6dc1d2d512885198f288adbd73b3109300b1f03e137b904f743ccc7b90db246c7ee7b18c1b6b2ad5f061496f8cac534b58f161e2778e8f73db6f455aad62f599cffc8ef16a462bf380e0d09ad8295e7e9a7bafa1b7fd84166dad936373b323b525a111d3b34e5f918358cec48144a99f2c614ffb23f9a3c8f9a491f8a7fb0825dcde62b40b9b56fbc816e21425fa4b0621d215fa019d293107a547d55a1f552b9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363633373834323534"_hex;
                s = "78b2098126eb13ca306f31cb64ba1afc17e053580b68184a029d5ad47ec8029474a64dccea67ef1d01b4f95f1c2b416d312437139ed1977ec80a9339bf925cd2f2c157dd3accb47d1b85eaa43a7f2f6083e85084b05d80336b2d0435315d0124ed155be0100a98f75b9d7596f3799cfb3a1b7e2a8ac3c805da8da5844a27b04486f80f1ddfd463ba9d01a850096a600346772d8bbfc73c9932522687b296ddcf2892f37b2a9b90be7dcd9081df2a48014f5bdd08c114989a4920ead57563c4615874f3b7707607d6257614847bd99429642a58a305383c835a1bbc2ea8b443a2aaefa5c8cde459904016ddf381c591dc238e10a8249c7e1caad96b42ea415f7d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363532313030353234"_hex;
                s = "37ac7d0088f21118f5f9f834063d56966456a9ba840089a1b1805fcfc808ff22cc9d7b3b3a361cbf1c2f96c62f694b47a6e9a19f2adace721200a52110f34b9c95f45fb4af9c250d0472018069d493847fafd468e8f50b4d2f1ad97e10015862ec02822b1e17dce3da1715f6f09fb89b4f7d0c35b8509445f770ea6ec325e933c651dd4d75f5702080ec3b03c48b380b1f202112eac8686d3e6e37f2685a6be8b078584533ae66855cfd6f6b758e4487bab19a65a12245a6f177fbfd861c94c5d30b6fbf750d66b682f98e34facf4aadd67b4db4463cb08328d8d59357895da55f1736c91c62b2634a66ace8b2ea44a86e5dbc09aad6998524077a68b9c1f33c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35373438303831363936"_hex;
                s = "6d250a920de5965ec36ab916ad585ef21252355f0629b084a119f7e9b73d3de14256f612fa92e3d658efb3e53343c0edb8b7e55a704dce2af2f7d861a404d1554fe19aa9a6b9aa8a13897247a37a2d973cee58c3608c94789fb8ac1ce05d6f0c2c1c7b8baa7baa1cc8d77d4b7e911db371038117af95b1e240ab317031bba83686b8ab99d75baabed4873fc72884794b3a3da905da016ac292622b8f73e446f46a992cad8d2b9c9b4d50381f58de58da58a25ae341b11d302e11db18d2bafe673dea1093d67f7d1e4919abbd43c0c0008b8eab089ec6bbcf126fb9998fa8697ab48cfa5d90ae76eafdecf18037fc3c8c5fba02e37ae79b29665c051e271f269a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36333433393133343638"_hex;
                s = "97a3e342aa73973a4b993873d1741dc9ad916f5de63d78f8c6a7f7b2247e2ed62a76510d0e25e6a27ea0e2ea8a5d8e38381528f913458bf6caeccb73fe2e2ae3830d0c3f463859bfd55fc26e5bb16f95a1517f445979265fd09b17033297aa6d5336206182d5030396176ed04b0f6b86a9ad9d180c17f7afc6aacba9416f0a67d5f7b8d93c994b719fac075389f83eefd9c9f3ade146632917c26f622a1313ef470f257f67f9fbfe67245ec253959751a84ae84c7a0c06129337645dfa36c65ceee8fd1ccbd021a51781f4ab8398af3344b0a3b9036ed4b9d17f7c572903391a64a8c45c1fe5ef9da607a0a7ced1f97a8651b44ba4f037484626bf770d1765e1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353431313033353938"_hex;
                s = "6fe1f5e3f11dbac400043505b0b331c32c28c37b4d3cfd9bbf959b301b3bbc752248e052b5fc3fd6c80b2a8175440105bf84904d2fa9ea763a31ba532f7c528e15967f4858c0a67fb9b91b0ed43926f3bbb90d970e8d81a3d2380556e63efe0b49ff702db5c1835adbad43830a983fa891529732104e60941c03fc8e267c0a889ca7d29d615811d05e964faa99f81c2bac929b26b0825c35abd7d3a36c09568141a53853760d632446d4088d032b348ef0942b91ebf1c68bafc91bc54863452245af96c00250302a05b24723f7327ef420fcb4427f40d5e33ef4c4820e0a7df57c24814b6ed8bd61de28c65976356a3279d52134753e008f02cd9d27bcb6330f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130343738353830313238"_hex;
                s = "9ae78de184d5b7207e99087c84dacd1d5d510119a25b43155050154c1539a7b44146de65c835426365c6d8778c29e6e7639765da4184dbe09e8f5946eb2d632caba6e31eb2edfc30016ffc4e3b7eed4d2d95cc563c2794d70f8ef60ff3f77f876d82cd075bb2fb6ab0d027ce9dc5f3b26a3e93c8a2c2e8bceb14f9eb45ba4e1095a19f441fee145c60df21adf2068fe566dd7926dade24b31b71f5db3d4ddaf6c4e44bee59e0d3302dca6d75fcc87952cb58555c7dfbec53975c7e1cda803c2007ec1e53fffa363e69613d17f870c2674442840d1005039ecd2106921ab6ebd9d96e21307a80e994ff85eae5349f4b426d458aeb22cae533e46724cfa5f2b442"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130353336323835353638"_hex;
                s = "a288dab1bdd7f4676d1bcc84291a7784be62f001c5c1a83ad575b15cf56a868600badc95f22954f9f474340d874d3d56fd23a8a85ee3f052c7be5ca653cc2fd2c1ea62f02c0c5b653fc201272d432671059ee279398e5ad0c45e735eb5c03a2ff9c82ab53d1ac9225589ecee80fde90a036e079e45b33b0b4f0e6afc317ad3744dd65d22607cf31dbabeb38b0eb935ede4420a1d8246b80da217dbed5d1cf6a4cf88ac03a3eca307bc7af4cdea63894f676ef253f7c8e1e7ac1f67fb45abd2aeac3ac8899a73867af86688b67b3ecdf9e6380a84b99b98d2dc4e65682558d28711dbb1288a0351cef187f1edda14ab57a8fbc71fb60375e682a53566eba5ff0b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393533393034313035"_hex;
                s = "0a5339301400f505424bbd72a88355759ce2b8e43c97c7dc6fc90dc4bd339dd397bcdcd706ae49df8d5f535f37c4275e894419345bc01a15a11251ac2b01bea9edcf093239b6bd15196974ed38ebddaedd60e6ba3ee67ae005c73850ca8a13a1ec693433bba8eb40dcb23f33a1a6fac64d634c9363f276c119d8e7e7649e15fee7c0a039dd41ffd5871592b7bcd7c3052b3daff5c998442f788f4af43ad032f257dd4fa0c7c67f078d6b0608df1a1d3b4948327eded47f9f4ed16601a6e7fe86ecaf9721a4391b01051c00576627d44f66ca5657236e1f5260a31f017c6dae68d17e984997e1892626dd97f41429a914a7669e650182845b2614c77f39267187"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393738383438303339"_hex;
                s = "8383a989de89656ec90337181cc615385f691622af128860328520625bfaa1ffd2792fcd8395cb8f4ab3986c00e9d43a0db678cf1cd3f130e95669ee3160da36b99eae9388a24079326e0c3e87eeb7fed2ad444e1b66d3072f057167ee967e9dd08dec183c4bd55b07280f74be43445a19aa0659f78fabcf56e4bbcf3927e308ef773ea6324e5b23fdb46b08057a1a63272b9c29a0d0ed59d4778ad7cf2ba576ec19d3d81c869cf762d04260ef805a35055d9013b327013da7a898b6684275dbe5057b833d738cda3f018c100d63848959e15492fade26378f4b39bed4bd56259ea8df023f2c63014fad634806f6a650b5e68fb35f6caf198ed09dedcfba9da4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33363130363732343432"_hex;
                s = "23b5e6dc26e10e99bf0405b84347e1cbbb6af4a8d0025d0313561c726de0268ffe4ff7b2e20a96e4bd699583281aaeb10b592e207e1cc5d8fb7d5c2c1d8f034467ca090ec4885e0a1b09dea61a129c967450cdb5984ac5dbc852893afdf333b5227df2f023f37f310f13dd73ecb9c864ccba1c93f6b7c4934fd817e26fc2cd607dfcc6618b41cc571603aa26dd4fc180d5b3ae915418d35d6476dd34d4612f50cca249ff661fc5a2bcd09a806da0ff0463489fc0fac10cdd41d4243766584ae38e99c68e9abffe362894cf5ab10100dd3171c6cf63d93da5f8f6f7d3877cebe64f3afa8bfe78f4436b83f8b845ffd94f9980d58a743856b6efddbbebabd31d9e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303534323430373035"_hex;
                s = "9f8a9abd119e44261097a7fb120fa7edfb77418aa3a5498abeaf17e2453e8be26a814e7cc1a276a351ae002ac8746f630f7da9459d3fa4178f8ec9756fa6debdf4d55814bce8f84eab38dfa0c98f81448800755d08c3b9691e837a2aa052b5ca412e2bb8156e4a3aca3d35c9bd447d6b5b532905c60e70dd65f6c79a28f236e3a0cbe4f734b2a3b22fb733e45038820e087bdd429b5b54b84a6d1210788bb558f0325ecf8ab7f4641bff09564f06af6d792df988699550d35f2197b4bd7cb7eaea64341ce82391ab8798c1ef6be8a7ed8f2e1dcaa331da2844c06e3e056ad0ba22c4724ea7929f57274fe5a2c462780b190d5404c68c823ba233ae35026a6e72"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35313734343438313937"_hex;
                s = "227fb42cb5c3d88b8b71d1a6522bc5f824b2507d2998a94b9b972cabe4ab46eb47cd106f79c17d4a0c59c7b74b5b3d03180ce155a8bb0920e987fd2bbdd64d91ff3f57b5dfbe57f3989ce4aa9d9e3efafc501c4437a0b14e2983262a61b15a1000888ee1482bee4a1e6afc92bed17f35a32df67fad28979775cf0c1edde006919566cfdc3657c9ad2a82d2e68a11e23f01f4d8faff873f5bd1609e3b901ae13f8a599d42d2fb5ac9f9707d730921c5981cafaaed86d370bdc7585bae3ea4002c50c96b195283592c5d577c53627d946afa48d10e8c89432f50210f8e0c99a23eb089559390dfeb472db740e27ca255f0764c7a575d3909c24308f187bde90fea"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31393637353631323531"_hex;
                s = "49b8d35ac6093bd9d53d5acf6af1a2f294c13b0072564931b8e69e11d7fbcc7ccea44f5e52f28b63b09dedddd5766515eed3ed3d595424e70846ba96b9bd12781715ac7c405acf97a8a735c8a9d274b66a54f2a24138fd9006b2b523d15f7d4bb45852ee0628584817c3211de2e62811e03f15060c1cdc5f6f7e0edae78570a53d04e3799633f8e7bc99a24d32f307963cce9e9f5e6d2234a9dd9a8baa39d9058d4f9b7509ae7eaa776d734da7cb7ad5148b2a069950405f0f2254d47e9e703a40cd517914bffb38fd00f4873056df33ed5022ea0115bfabc766c5ec8d5bbcac2a4c7081e5960bf1eb364d8cbcebac11866e5e7d1dab2d0fb18e46526a4452f8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343437323533333433"_hex;
                s = "2fe90988f9e88d1cacc4c6cd2594c0d9b02513aefa1c82155bd7ec58e086b3d808b8854119623f17905445dce9a000f01b1ef7973db1f91814a29119eb744d51ff943f5541b0fd0a28e2f71d4dbd759cd28f3321325ea0327c19356bb576f3b211f79969fa1bb1faf333da12f2f8297030d6f268eeb0320299419d02afe8b455edf7b11691ed99b9800014aad94ae87478077c35e823f41a22f285d6cf575d1bd409a8af556c1adddc581cf3b93c7c161762e86b006a3d08315ccc52b205b6dfddc4b2c0631529bdae65c63fad31a00ae9923e48e9e96213c73afbeb53b9005d42f9feb73f288e2ab91884020ba8d198a9310b8880c912dce29083efe6d6e361"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333638323634333138"_hex;
                s = "4348ae89c8e5d03fb94d2a8a63a6577f7ca10e7d53e4898e1cabc0ee96a1c7eb841b984617321fb05b812a17124f311c91ccb948765713fc5fef61f60f6dfe3bc15d1d937763c1f87b3899752f4733b6b740af3340ea0415d41dba82191f9af1cba3189e72c0ba44dda47edb6dff3ac6de21586b15353b54f1b2b2281c98b2334e39ef48691ddd4f1b67c06f24f22dfd08865ef3fca33ec4e113a204e349822f2b4ff512e4f11cf011ff8b6dbf3ab5cce1d90dcbdb91d13f77edb9bffc650f5f42ca1eae855a2f2fa9a4168997522bea7671a55d56750b78f9f66a2d72607722753fb9987acf43b0e66021580c79c5a621d96d9ebe8d24ed9058a67e27519ab8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323631313938363038"_hex;
                s = "074d9bb6858ddec8816beacbf758b00226863d1c5200188debefd6da12b6e7be8e30085d913d8742f1215075639d930cf1671cce3c344cf915da8dc8b8aa46bb753827be2d4e2e7662d266c91bdcd4667d28ccbcd7bde90a4bada2a2296f0d5882ef9c8e492eb94707d0fb394f08dbd0b7177b756bd67d191ca24dd02c10156b5a456f370e745d840ba412136503aa9b4ffd387aa791f0b566d6cad88e7e803d9b0beb83708cbe5607c1650072b4bb4d5aced007efb0fa892c79534f7a38000dfaaedeb055e39be7e17e593b773dcc4b44b37612f9a639a6b94ced87f8c7a52314fae97c7e8213fc56177f9b8b3111fd4e7457482fb5b8a9ecda0e00f7b94614"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39363738373831303934"_hex;
                s = "9e04804cb316a41d330e381aae555d866cb1be3556004db72eb4a11d11da11060f7ee7ddb0c45b1206d50ad2233141d2fa6fc190c09c92a5be6e977942e2a4f9740ed67dc9ea9e767f73690c908017736d4fea0ad123fa4f9fe84d5672dbaa5fdf758105308709f4c3a395433e994af2890415e60773e166b4c1529781548f1baa7b82340879480a066c3fceaabec9ccf66879ce3365f9b9c04ee2f85ba08d6e39ffaeeee2c45834b6d7e16d942dbae45bc22ff7eadb3d917c4db5f8462e8e6e618f1e84d16eb436d4ac4d07f1026ed75d70d2ba0332b9c21382f86a7a9ca702e855e48a44fa65bbdc7ef5c8760230a2102c6f951c639ec82492129d810f6261"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34393538383233383233"_hex;
                s = "98f353e2fb80ca884138d7cbfd8243238272d41cd3d209104f5c5c40b498204fd731eebc0f4706e3e22f165a5c989bf0d0d2daee6fdfca4e599f355509982d988dd3061b1c13d612c003db6f562a68dd7cb7fe7dea74a19434db03da48ca84a8af51ef34044c86ac0445871caaf645470460a15620067a0a8e821ea7b50e6631784edb2fe884f16b3ee50eba2d815644744c9b292c5107ca2769004dbf4b42eb7d738b9bf2241c0739f15979a71ad6935ee7ddd3d775b7661513c7761ae448ffc3fc287077d0117815b3d57890ac37b87c972e32bc0f759214d2739c4be9307f251a4f3027a8dbb7e3f9354b26eb98145de81ea8e23aed401f315cc50227b5fb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "383234363337383337"_hex;
                s = "4782858a9e77c710929f71af2b0199002fee9795161ec8cec449d3b1599a5b0235e079fc4c73ab09fe65875250638f0d075acabd1042ee9f51e66bdb15662a8328583ffb73f3b7f15efde539bef811ecea95d16cac91f30f80506d68c94cbab5b1070050168a96721c9709dc8cabf85ca3d72a9d3c5ed87b4617eb245bc34899e86b60d294fc428eeaf1f86c5474a9e27d7a9ad4588865574f1b71b1d8ae6655baba63a4e579deec9ea1eef1787b427d5f5b77b669733bd6f7f07ea41d6f2c2c040589fbbd59bb0f39ef6daaa28430c18e64d0acfdc072bbda932dffaf38ac4b495da1cecc36ca25dbaf06cbabded815ba6aa55f04db12683bcc4c5fcc5ce875"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3131303230383333373736"_hex;
                s = "256f842e0ea1dd3dd5cb05cb184cde79ba34c87f083e215570b402ee929a47049427ad568b30c005ef4f88fd511096e23411e927fd2aa85a3eb6e01dee3e9fb5865abb460ef76fe8d932dc08945824011fd226915ee3977475660d7f40b3cfab3c9e7e90e37ff87d2daa834bb3645cd1832f2833febb80a650cde007fa6c5232ab5c9f0bc85d8c2fe326ef25ca040bf95a3e3734f1764981faa5bac87ec64d9b3e4a9867e4d55b313171740e8413a5e4297b206624289f1532c9addfe9f885a6a6caabd253fdd331e762a82c977bb21c8e1e5702f77ef0c2f69259e0027c3a7d8c7c8034fc24fbff14b5502816f4d7fcf1ed750d8be2405186afe54ad9cd5030"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313333383731363438"_hex;
                s = "62bab402f229e26a535705676faa60d4cbd3841d4f5fd3058e1d5c44a500e872f0035747cb5bc12b972f6401cdd1e212fd540d45aa5fa535140c6ba7f165154ba4b771c1edd27eba097abedd294728447c22ed52518b1dd87212eaae44724e25052ad4bfd0185de9edde0084b0fd35cbb226f53661fc12a14f1b8e31fbf3ddccc7242fb5695d9ae84ac104c29e39391103d15c4cd8ba2498e9ca24a618df21e7cdb904d6de4954637b28ead74a315702e8a14c478d004905d87b6341f84d519aae6608a76618f8ffcad71a70d180d4fe0597ce6044634c5e1bde39c156b6ad3775b00331f76db1d89844c130e9ef5f826b9f5732c9d1eac817d3efb46956bb47"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333232313434313632"_hex;
                s = "42280e80ad244618478975f9387cbd447d85dbab3e70bb1db66579a2496b0351fcb056a90c5b78edc2ce6775b342c55154687d3cfff1bea1ca31f308b73c2a29191a8a3e1c21c33daa4d3750da253249d87bbee6110c9ea25459b975d4a72f0b064fe15332012133a67c0c8c8e4b90fec93919d4d1ee717994889d62d394fb8090f58c4a07926c67d355d9654bfa521d29fd166fe5f3637226166f0e458bf3196227e262eebc55fc39f041795fc6d1c237f98694e41f128de0c9cf6cef7c1fcdcc61c0c732ab9603598b0b5655a7e39e44274a7049ab42e509c50132542c888f3e6b956c4527c515fa8b01add994bd50a6adf0858505496ee2a7b9a043a8b8f5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130363836363535353436"_hex;
                s = "2d8a127edbcaf50a1b35ae0c7bf20776986448ec5765b15ed7d886117af264043a1c3fde6af1848428a525ddc9f334d10ce6aab04457ef2863807ca674dc0ee84b0a1ab49a1b999c4b2126ded516ed1157db047ba052dc7d9853de481a6bfcdfe2d31439980e62ce20c77dde58776b2127a557ffd8c51599699f0cf267a108378a8026e0a53003309cc645b5176dd611563c6736b83e8e0e6fe0b062f2cc137a415b097bdce66d952fe2bd9e407a4624d1157106a5d7ddfa76b09738c09a5817b545dcb27f8ad9ff0986f80c99ed49bd874c89e8c8d0c59ee3ec04214cbac612e4ac3b25d62fd286a431a57a758bf31eb52d38d13bca1d17074f4c9c28bd9316"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3632313535323436"_hex;
                s = "15e8fe3e7dcb5ca5c16e1f12fec4698ae28c511b02c40f83555b2bb15b20b7462abe1d0d42b53a58b7f1287af15224a0e505e7191d01f7f3b9a456a5523c56be92c414a8e2239220e6c17056310221e4ec25f86a7a0caf4239fcbc5f704ee92b8be99c86da42ab09c042308e92de00c747f23eb277a9f641e090e46628f744a098f92d031ee3159d0687df6b585198a7985e2917d8723f7eb1175f38f28bfe7454d41e086326a4c2fc16027492d4cda2371d65bb241a87fb264fa2d2516c5ff817c405c0fa48625f540e6502267ecb3e0fb77573361fef5d7460ae4d4a0fd22dc5103d2b749fd7bf2830e22d9fcd8b0827284758be30db77308553855d366991"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37303330383138373734"_hex;
                s = "0a8e7c3d26834d46dbb4f9d6b9b6aebb2ea3b1b180ae01dced1df03353a2ae598320e1718c9e43f4726cab81b5aadaf77690957ea0477fdb8a304dbdf3fcc53ae4e95b41c27a392f0dfc839fe8698de58890ba064609cd72c8e267b90bdda0ebfab8474d0cef4859aa8568164e72136a214ff9279ffda0e8bf9dece0309f06e2244595d17af3be94c7ef9a1542297e7e6d40f9c4b2ee6b652299ccb20da274711861e39317347fd56f5f13007f31e290430019d826b2bea3354e926a235a9a3e9b68e179de25f3feae8d3ace9b999afb1b501908482075236268596a4f892542c1f05dbf66300c9f249c31c34fcad58fad5d7efdf3e16ad311eac4981f164d8a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393234353233373434"_hex;
                s = "915ee86225d15a308b4f4e7ce13f396fbe813b811d4fe2183415bcdc196fcf2204a34dcf0781526853c41f91de1a32528ee7a6d307a7ec4e23099d5269db7daa3b511d00f74b0dd211d2c76c30919ec3c6062505530ff24fed581f286fd1499d789d2e7a4e25ba3984f2e6e07e26bbc45fb02624ffc1b9eedb8e77e076b0c9a836046237db992c0f4c531336ee1bb9ef75bd6cd647460f8a8cafb313908dfdeb529824eee01d76ced616133c93297ad5066f08f467f2387edf247c68070804a800ace363480161191b0f50ae260e312ef85c2d429bee517fb22183bf2fc91b0f305412da4f3ee20087e0a158d036f311f1cceb9d0bc91a75c0233fdb6b18c91f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31343935353836363231"_hex;
                s = "2b850dd6a65d225a55d526e834c55a6a2a71ae2a7d1db1439ec12ae1147b26a8d5325c764d4c5d1e3cc1d49c61a0e36488797f592a1a19c3e200cdf83c1880bb272a4adbcd1dae961a19857915233f2095944b9b96a09aa0cf9971183ef360103698ac049f429600c339eeccde2bf49353c72ea4a243db91bcff7ec01e51423103a1b388e1f750b11ba8be6558a2b0b2216db2229fc655ecfa9000fa664dbcd8299e1e258d13ae59696edae7974eb1c63a73aa6ea12d200352e1c7c2731d3605ff9f1e18b25af13d24598177166dae95033b424f78883ed14c6849d5b8feb526e3ac14f50988e4956f99b34d4990035085218e6c16ced8149417b7b4d9d25a57"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34303035333134343036"_hex;
                s = "86b22f948dd5af9df65c1d062608393d90d3982d9b3f279865b8d675cf2f46baf3901410a388bb87a7f5dad268d0899feede8222c0e552c91a76aa5f5b4b30b573bacc1787a2e487b990c558b1972069a8f29cad25abb5094e94266218f7816ed9b314eec8289dae61de5ae516d63c58f99b01dd5cd9495ee47a981265d836d69fc55121a2c785685f447ca63c3bd19dc33ab63a1ccdfdd94d5cda20be639d484da02273640a19afe03d362f58da9d75bd71de52e0fe849f114ba367f12282989debb33a1d278e934245f981ac0e222867fc1c16e4bb08dd8ff20c41f35feeaee14e19bc72c54f692cdf2c09c51f5378c3f84e6df6f990941405f8608242edbf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33303936343537353132"_hex;
                s = "8b7c4bb2f5c2e92181f81bf18f55361c8e3728e8a4c80ee960f5e3d28ce784d598bb3eba641f8b6ee18e4555244ce65d7e563b5cfce760e64c0347e209b6ed2b4aa45ed4ce14807fc214775900c5cab7ef9342e526b2e346cedf9c33dec7df3c5890be5fee985c1fb4f146de70d1b5ccda6fa469a207d4a074310b2d4b05b6b39bf7a9390684b6240788a176dd891bbe4a00f2b906cb85297c36e2df8b5192c9b33cbf2f94a723996f51dfac1f97497194304f3383c0df16087ff3a4f0b3378b91c8233366ede6ac90ab0ccc72dd206ce3bbb1b7831c7c2a3db6405583c6db9d35f2fb72ebe12cd035a1c97c457031e481e4881427bdb56badcb2738f341c509"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32373834303235363230"_hex;
                s = "5a978ae0c63fa06ae14b799f22578b4adede79cf134a4242290a581607d491f5de671f6295bfa2c5a57a3ae0cd8790e9f7c9c5933cfb5224d4c883812d8d308edb8e597a2e7b207e0f5a2315eb8b76b725e431979deefa6cd4ff8ee6384cf17d2f5060ab57a783d4ae9f31ffdec05f1a158142218efb754d01ef33f3062e4ab3c7c77baf34ef2ff9aec95e87776e5054f4326afdd7f33445188b6f00ea8071423740b5a245dde561f814f33b7b4c8fc758e8f9d0b35c5ffa199241f1e80c92f0594459b9b7adb3ea657fd8d3e8ec31505a450e4ba6166c028ff7a7adc67239ae35cedc7557fce81ba4ca4846f23bc3a9e2e0e460b64db460ce41e609112a70b6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363138373837343138"_hex;
                s = "3d2a22dbb1b75eeef658a716dffded2deba0589ab002f63949ac228a32029ac3d372297364efef9b37faeecadbd841ae4c651282096708769dcb21ca1da8cf196d158629e8600eb757c5f6722ee2df00ed0e0c503f1edf89f3b09309d7f446d684ba70392d65f2d7d08941398efec0a8cd1ff1aa508e8a7e304db3fa9c14729c61024e4864ce63605bae9138dc2fccd107cb443a247eec7805142287bdc88b6fbd24e1f4d0f9b1ee480aae1f062d533ce7ee7d9f2a0b340f11584b64324fb8fa1a5af4d2003478e10e312996a6e49174a26b3565c147a55285adb7b92bc584af119beec1cf235af2b32a810ac803acac2a8b8c2613331a62604688c2c611bd48"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363432363235323632"_hex;
                s = "78e5d781d774b8d77a9c290b8a1babbb1893abd80d0494063e55f701823f16bf715def5085787b73f4f3420c15d18b8f5feee194b26762efe7b5e0ed3a3c9b9818322887d2adc5f7dc42db0b31fa3bfb36ea1b10ba28acba19bd2494616f40ce717d2434bf6543c5514322e670b869c4166626c15229899b63acb90364adf842cea5cc95a023feac64354ee187fb2bf803f50cf2bbc1fe3aa5b8ddc7b7c3d470b33bee5acff291af4b48aab50268f596260695db711f53fb8f08f22113f29cca6da476f716beb43fc2df988df820a0e58db817d8ec90511e8ef5b90e1fc03fd8369febfa1524cfbd66af9f395194da94c643b86722b62ef08364ffba80d3cf5b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36383234313839343336"_hex;
                s = "05a089489be86b2225bc65916a5afea34d6a372f7f2b2bf493e11f949236dcfc3f2f1bdff334a737c23e4f18aa89d61265c5935aae9819a05ada91d943a6f42ac2d48f760119fbdebff6b154fa6bf831a9f4d3b71e41c2881f5eb7636629704f936131d906da62af4bf6371ba7135921baf81008df1016e3fcc8ae0f1fa8cf895bec5ca689cd43fc175e8bb2f9d46985a83e2da185356b814c806d5381fd4b2d7074b9fc6c7408239cc76f54638d7e27ab4d6f1b5862ee15f2c4d0eff6fba90caef526aa7a6042b1c08c021c6d298afd91fd466f6685c4f0add101d7f8231ce704013671a1468110cdf9b8829699b03eae2238bba670e959fb150e94fea889ba"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343834323435343235"_hex;
                s = "306742ecb80993c0d6f3d987d462ba4ecb877649d0f6036c6294a2b865221dd95e4fa3fe7694a6bb6c6f93a591cc92fe631d31bd9059b8a57b7f8302b2d414adb813e21f02a8b1e0628b1a52359a4ab947e235f97758d4b50e679e6225152a9950ba54e1e1906f15bb91f8cfc8d14a2cb41ee8654320dcedbf3b21d00705ce6cc93da7426f4d41bfb21fb4cfe187f8a24cecbd1ec6a568efc64b13a0eaa5d45aeecd81af184954a56c42b10a40b0c1ff6ee49c1493cd93fb83e9eac5aac526a0e6d96552c17805247070a30ea5b9fa4f67852e11ed258cfb1ee4e64808dcfdd11096dfed7c376cd1373f0c6ac1fad8878b95c783df87a3f054fecec0d1f5116d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "6b77fb8cd287c666cbc30f00bcfccd31f6dc01655c3c976d1b2a980d53be40d6a4a7676024abeb1825ec47589365c07e5d4c3d34e249814126e32ba40aa81ddea0f61fe4e3725aeb9751103fd034cf3fa516fdc1569aeb7b028d192c8ef4ef60a5befb8a4de595bd4717462879f424e87286aec0bce6f9e763ee341765c24cef24f916a52a777595879471e2f3188c1be77fdced941fe0cf739bd8d5a4ceed9fa1e47f6f12dba68cbe7bb2eb81e46c2788b847d0ab6f55951f787db4ec736772851c43534b7ebcf226c2540806d925bebec9d109915e466d08e2470b7e85b4fac66e089b1a535ba703dbc10f800f6bdd557370e9ce761e86466833903efe315c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4af6c02b1f3c2719fd1c84965658e36651ff891484f4c4177fce2185b7098c861939fcba677e8ad461577a666ac77653ac37fe61b5fc235ba76917e03c3419fa3b055171f959edc7f9fd349209a23a4aba57ca80744f69be6ffd1a2252a182a3a2c1a2c069dd4953dab9a6acb4c7047d7402584275cb726875c0858066f50caebdf7e9afb6d4f3270662afbc66ed14ce69a846fc0c54f9e57bd4f827c0b780c30dcf8661cf4bb678ee0396bf8e0a08d259593170dff3f93dfde9f4d9ced510e07a2736c8727d2f9e973e32524e072a92dba8edb2d1628da03741d227255914717445407111eefaaa889febfc6f4b0d42dd958937710ba5e94414a26e09cb3f5c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "601f6431b0607c80d5c92c86a63d06fcd862bb35eda31a7f331a59abbb8ec18fbc86ec95ad63723216e151b7bf73135c028a5ac3b45f30a7ff8ea43d5dfa6a52f5fe1405e6f5d64abc4999f8c580701bd9e451bcf6d54bf0bd1c83c7e0399e7805757cf436164f365ee76f29433861856b67b6cbd8b235365786c2de9b305e3293792202e1848f9595265ed6fd4b1740bcbcc697d719ff70b9200e65d7711494e18855fac36bf9487b54798f39d5a32b5d62dde3de2c3b5f8f7f4bbaf3ea04e11cc8a4f6247e25c8a3a4e05d831199d14cf44ecc8e66c8ca3883b5aaac3eb5889b23dea6ba6649c8a69cfed547ca936a57b220c44b8eb8604c8dbd81a3500116"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2a31524193054309ce7b6ae9c4bb053f5a5aed273d7a4a609496c7205f5077ddc746e8a4ea376bb879556d4999e788fc8f82378f6281140663af2fe0995a1b73eeef60341d0720ce47282eb87bb79908be8c3ffe86182d174afd0522a87fa56e0d149ab4c32292ca1d1a8478ad4090006b32a147ffe4303487196d308dd59f81eff956bd6ca87ee0246927e279bf80807ef45829824c80b82f7442021bccd8ce4513cbd4d4150fff20ddc2ea942ef318455265b5667a74ebbeb83a05d15f3215c04b113c8b55ec8be512e797a3ace15d2514c2bb74f50e0969eb1a2291fdb6fdea1af0cbea6f05937be614003c1569b648c2012ec5dcde806f68e247597bcce6"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8291cbd81529c8f1e27a907dfef2de16dc6d382b112cc3d2d69f4c6915e7c6992eeac6e4b82f5396a46eab562858835ab0c0aee63d2585dc7537dc0008a4b40803467abd5fdca4114282265c2bd929a03c7892774a21ed6454e73684673d6448b19555d0cba9e4c00c99af77b30f1daa4b15eef8489e15a276fed1553e617a64dc58d5dff3c05853a7039047d243c52e53f7dcfc40641bb9acc33ed96c74c79c93b79f32566cf553428cf85d2d36a070c89f1eceb4606fd285f7ba3ddef70ff151ed0fd3a5b6c5338eb2f812cb4cf4827caef0b896a1d49f49e2c3049462d07d0e64d33f1e2c615c62a958abb6942d9ac8fdc39acc595cd381aead075ab7b51c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92ffe544edeba2213ed7d54488432dcd7cc1c71fd958acdc56c41fbbc8f1c16b565b1595fd3b88c48ecce181f9cf6bcfef4636c2398ac06ef8088e14cbc97426a501c05aa71a54a3329aa53a4f259c3299756a429a7baa7a50f78da8012e4fc232eec623145388d37c41e6cfbdb1afaabe38e31db381022a428b353d2c7f374c58f10c551419b1c3bc455b6f66b75c26b5068861f8f96f3700ea37cbc0b4d3ff6603a1c6308409d040aebeac2a661f94940122acef1771d44c5cab2455535421451bb81d0656605f8df2d0ff29a07766092dff2fa20cf68ffee574bb4b2b0a3f828670fe93d2de100ff0c9443319ec7283c242a617eab3d445b655ba674687e0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57e8cc1dc00c07383d89a79b5c8e4f5bde2a2ba55a3c7201b3291c4d805b1b2eb36f8f326b542342da180abe508669bb6cc2dd54e327bc70c1e317ba93a0fd21e7fce22a0c597c7420d1d5602ac43d9348ba3eba561f250e301ab955b0dc33e4abde32946b9b3e86c8bf07a44646ca595960bb988fef04b2824967e9da8b0264f1da0659373935313a574b5380f0b54ce1bc0dde423bd3a54f6ae5fafa772a55c1c44eb6edffecf13e6e5e1edaf87a79e338577304141fbc44f0e9eeb286f553f879addd6e12e436fa3af51ad53a72f2679f0ed102d504ee08706fe111eaee49d880d1a0b91924b3b79968ed0f9bff446dac199ee89b158c074927d27b864498"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "68caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c6d36"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "09a166092799e0dcc9b4e758223012162cc0d8560b77833412c1bd37c8b0ee5260fd79e25a5dd1fa6a78134b26c85b4643f8992a933990f1505d0309bdea2bc41418e32f9966163730d805fa688e93f3aa5a8f01dc1095556b612218932ee15f72cb6033d3cdfb44d67fe53abf255180a521f7d5392c3b0ea864c4daed26ce9003f1b62cfa8333ca201a5ab3b78958a4b706a45763152e2b7b7006991ea80a7f06aa1b7ed23e72a9ea0f4d987588189124647318bee2a7f0a420a21d5c7763b50d2f1ffc6a3d692c840fe6004707a9990c29bb0e069b03702a8d25f4d4f54b9568a7ff96d078d9c2ad9b51b625b968893c66b92d96031d4a10a95b98bbcdeaeb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1abb40f03dbe5b4f1365862d9f095a8d57e8922565372f0b34ef5e232441d577b3c1f19a240ebda880a09cb41a7267732623b0faa414843f9ef063f93a92bfe5f98f7c28da184f011aa787ebd0b5fda4aec1beab6757add32f7a35cb407779aacef43c0429280e5a040cf5943dfb579f86e0c63cc828fbcafc9c8a15ec98fb64ecb5e295dc360f50230f415337aaac6fcac02fe625ef61744488eb7cd81a4e788a443f56b32bb3a7a344900806952f6f3f55f8d9e9217ddaf06a0ffe8b0bf5551d87cc9251d839441cdb3c72ae9c6a5a3de7ab85f908ae7d04232c52143d272e87a54c5b39d399b49ca7e96edd3b6e22c296de69e9e1848038025780e4f1ac29"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a11bd4fdd30fb353314530d60b1cd921d6091658e0c775432b6b702b1563a9e5b547f968ac13ac5b7027aeb53ea8987c9441fbcaf414bd04434445b2ce6a1d9dea2f2f179a6d40342a25b10300d45358f703f814917870f0a47f4b4ac47228574096ff240ab0966bb77ea9b5155c6a4fa0a185ce5d389c6ce28821262698beadd0fbec4ba2b66389d610f290656b7a4f7ea1f4a3c44b3528bf62f72abf7935e0d8b6cfc2db947e440752410a43a0ef77c0dc31b58be021b94118e5e0cab1d8994e76ddffcc2e5d55fa59d1ba792fda9db2b5ba9ec6f6bac395c250e2b8ff245a448b611797322bce637c0b1537c9765a8498e0e0371af2f8ec15f32e765ee234"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "83673bf6d178e873e986c9a9750befdf2d6a3f0128ec90b5a8059d32f9f9592349095e24f88e9fc48ae549009f52b4d821fd40848a9aceaec252374b17d4950296e30b3ff489d420b8daaef47488696762ae4cc55ade170c5e0d72e696af793d5cfa04477c147732328e275999746c3680c3dca701592b17bb37dd8c5eeb3a929f932a3521a8004c10c9e3eed8d956835a700cabca21038a9d6dde44f888336c167c04ac26e800a99130a6e1d3b3bd8061dafd2b462102249fd07dc50a2e57a8c6cd52381fd4e1bfdbab18fd602c8890d51e8053c3c2ab5c96bae2847b5539aed3ad83953f47841f8f50fa28446d30c20b2b7dd8abf4e49c0636437c22833ba9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90c3cb3331e8b352c37db46283a1a66b647ecca43e3461ce1afc49d6230457341a52b558496ff83053175a7bfb4755a1bef0e65f470d6139eaaa28cc1c083905859c1475868ceb1e3829437f64a7ad757c9da3b6e8443e8f981f5c0724c5909bd4ebcfa65eea4e4f7af5222dba64a51228759c69e26c44d9a528d75a5b96855253da88f9b54744b1a8b02328394c452e62ef75cd69f7def67b80e4859ba3e73b08a2a3ff931f44d1d524320a33416bf4fc744847d12e3e973cb870fdc3ac1bdbacb677bcc63f927366f4d0d61ee3bc0d1a1b3d149672c6398f3409fe9e7c7c0a150571573b87889b4f23ef49b6f5984412642e5b0abe7f5ec4b4cf12c46a38f4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7a7318799477eb6da55c7b5f6a0338071d981011e1a9bc6fa3a2258ca5caa039fc7f768234cc08e425323f57691cbcf5f83d6a3439a639818c6b2bd3a860c9a6b9a8e0728aa7ddffe18f82c02854ca07b17db0f166d2e521ada5c1f85d0c2f259301d3f4b4f1380f94bb819dcfac9adb764a198091e110f0d3c5fbe20a29366fa52d246cc922bfd2b44a619b59b497a5379282ee30608f4243f7328ca8aec20f61aa8b4083abd1c206fbc9ea598d163e52da1026ae349d26469e2244b86139895f80ec4e8b6f5965a28ac4e9636ec3b1e5d685483a0475fa645421ed6ee9633f276aa4000eefb173b5ffe824d38a4d7e24146e4a6adedc3ffde4521dab879120"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "331756b92b346379e1c50dea5e05d92912eabc568905d7f290ed353e705671f0f5a43921d71cef11fa2cc23c954ef27eebfbaec77a33147b5c6408b7fb8ba9d8e3ccd5af541942a946bf057d39ac34e954ca3eb308449a9a8fed15f760d9392c32618c289993b38875df412d460500ed0ac7d9b79b0c34e8a64310ad4cb0e7d6dd1dd8ad6aa81683a3420618783a315b2643f7e8c8a95734aa1ea526752bca4d443a18224ced3d2a07bbb734d01629483f5c8b91d94926916e86ee430f4f6f07c40d5808f0f59b9f438723bcfb0a8f595e3da00d5f2c3bc9eba4e64cfc5edd9c244eaa4aa8f7181fc0895c911305fb8dd3d404865f6ee2a4de8f5de7962cfa9e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "28481a5bc8762ab8cfad8d7888e5db6b678b12554a244aebedbb4d83fe0fb676d77411285484ec8b76843d4ebed1dc9dbc2039c3d0e7e5288de9602f7ee82793e75d2320d8a7c254116ccb086573142cfd33e36cce3f830901dc734ef18364e1c0125cd8fcc3c7f4f333d4b05386c3cbdf616d386a086862b591d80c34832767feb83aebdace7d19269b0b5bf340499a9d530c15b19c68ce227364080b27e6f4e017d6dfdf6ef05f4b73b92602a6249391812a286d8fc87204a477d14307aa2e23f12f7452e15d4bfaa3deee56903ed66031304dac16f6393008a53496845079af72e6c5d4781664ec757c741ea0dc9ba628df2dbfa591f16c352d5171b3a0c5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "267cdb3f7ec390ac0910a3acd42893b3c445226413ce38d7fecd825e29d3a7c8a2c361607b70b88f1ccedee4c9d3c8d109bc3e77ad749236f546352713b71581ef0ed3b9a9d1a11035629c8f6cf912cca10eeb2b02d3bcbcb167f02ce43d00513999e4710cf5d4f4d730dffe9e52ac5a11d6453821298e66dd882fa7eeaa99d06d324a1436e2e2f3a8e78744cdb21d0070987a4895697f26d37f79e93f6702619ddc4b6986450f84630717643224d134a922b5aebaa430444bb587079f925ba93a42bf847579b8bd7e72baa5eef82af83afde809ead8f810bf4441107a3095a4f4f137a3a24bd5f21a18cfec809a164f4471c49091390d2fc1c6578dfbc2060a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b9fb586f1455c9fd95db25ec66cc1b8e0237355177cf1c40df59ec1eb84a95149fc4c06117e8301836a32aae7e9ed18b9eae67e5f76ced60e89b8e11d3467afd71194b494f7062c15731a475586fc90ebbd1b382d5c55c0b319869b3d409b82cec0afb19f6352efcd6f1ed949f27a0306a3fd1ec4722cd335c1169871c63796bf3a933dee3f81f01fa8b6e710072fea562cd938fb2bb1053845555b07cda74f144ac84d9557326cca799af501f9474cd8b18a2af4d1a12f93a5b6dfd1880e58ea82e98fabe96fa76981a6243e8e4ca386f5ea4463f615ba1812e38842fd51c71e0b6a9da68a2b1432a7ce2686638e55129d4224c94513207ebf90e8c5f435ab"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6bd414e877abc92b608b08a273946f90ba6c6c27de2448175638f67a6b14492fc1415ece540be3e3df8c8ea7154211637d9b5144312e113bda2526b6fb2caf7b07673332dfa605468e37f4026eadb4c0f84b7b482ba6752839fba46b765709c3c6e54de13953245a3364bbf21222374eb63e61e68d73a126f40f115405fe9092b00b60a7f0b995092061427454f6876ae2ab3b2757337349ff3ca3e2332888b9616fcffb3b924977ef856553f55b2f1b115ef0ad7856f666a9863109c6498c52271ea2e6854fe73e9e4d4ec666fe668f0ea1d1af19853e9a07066418697429cc31fff107b6ba212b4a3cc19b59ada459efbc4ccb90da8a0bbb48280456de69d2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39220dabef40da1a502bf231bdd23d8d2cef5b85950b7ababa4ce63eb57283facf1c50b567a0d272b6e59210bba6163735e0be82dbe4a4ed2dce3f3fd18eecee047517a85a1e634337884f9ed6aed6c250d8f0453f3a103c8b684b8f452d05917b568cb2f82f6ec29c07e0d451307a3b54dcb03165da59611838f8b55d2e8cbc020fc5b482e1f8f1ad4d778b93e648c1160b3cb43dd071b67339edbdacd7b668ec92a3e2808185243f2921d502e0579432017b7afd9e983515b3d9b2ddef7afe4ee5b3405e2c6617ce2acdb6243213d2dbf8c72cac4d4ac0e69265f20499a29cf50a67ecf2cfa2df61c585f32b9f067f84baab8b88152b65b220898f91b9f506"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "487bc9021d8e95d05c1d3237c3e9f10df764e8f70a068fe6d93b865233f6ce8088bfc117c9086a3bea29d86e6d75fd9c8700e871f6027bdd0b37c1b581dda807a1401721f8a582a06309bfdfea5ef177cb7bff47179d9fee32bf545e3e4513212b68fc3eaa43f9bf86ab066fea31018299f4401e3e0985c0d450f102162896e619a2083d5fd2f2a03fac6ad99d38eaade1c56a7996a35e5e657078547c43d13fbf62a64a007c8f03b79b9c59d19697069344b7ab309b532a7449878d3c33472098026917f99d07d4b24c39c67dac099d77c2c0313a557d8a5aeb896214211fdccb531f390d91848be459df01c014454c8c9fb390d6f759713e30128a9184e881"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5bc1e96ad536dee1b3d23e31f053b9b0e1439ce7c48ebb54f01a81de10133612dd0c1b4dc0b60d6afcbd18e40123b40236bcd773b5ff473b5f35c6ed4294541e7f028acbc29f5583e93331d4c03631afaf79bc683c187c7929d2f7db52d1a34d88210ab50231219837e1b60d49ce8048e9ee4ef55c2218674f297158c711e4fba62351879e7d058e0cef25575cb0ab9f6d6961a4cb6d9ab0a68a301fa3bbb8d0899f43bae40ec19758591e5e0cfa84dd08f7859ebf54c76e04e74748833313bf15793b5bbc47494f3bf439d7fb5225640f3f3756d9d4452f7fbdd828fe844f757a0cc585ae0a6a5410065c8ce4e0319c356565ebdb1ba0fefe780c70a5135365"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b3be6997057ae17c749c435dbc68110204e95b3e127a230121e27c95aace90e9f221e2763833024b3bb873368e3e992897d8767eba2479637ee9383796cbc10455da3b52c7fac1d91131e3f78f5f616b3fd413b310fe8f50ef4f721fc026a6222f0d9113624cf7d481e79e788587ee659e81296eaa438ff13454e36ea50e9f038ed2a7548a8d169635c3e15bc20cd83c8279d16e6b0edcac2e9c72b9048dd7fd1d298e414c3832236d612af3841e426c74f20484ef408b19f22449e701460633fbc5155851e812e886cbfd6218bb27388e20547fb4a48d2e0f9a284f9bc1e9391b28ab7f3f45ff5aeb6af12faae437361877d04e2df1a1057ac3a680e5123ef"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4bb8fd79da58fd3217661938c90772eebde7bfe5d49fa597cf448019a56d710ea126e8b94aacb45bed81df07ed4c89a9889bac0ad2abd506374d5ebed14777673fb1c51a3f844e9619bf707c9866b21721a75458c100d57b9ebf6ca58aaff1d47cb2d0f26074dc15d0900a11d681bcd76b111140500a51cf8c1b5ff4771176f1dc0884d42b36a15690b991c77f9605ee9c4329fead40364f2b6372812319c0ed4a6a15c0716da9426ddbbee79938bbf8dc3b459bad11ce79c0bae6080a06b6c8c1c051fc37e0bf0546c7b55b2cb6d90bbf4961ccd1adc623c9b9b51912d6b78843932ce04323f8a9159d10ac94c2d980e9b48fc143299d4c830050ace61f7238"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9aca5b5fe1369dc46eff908e690ba88744db0c86f7da7e644eac314493ba6a7d003dc5400e1c521c373ede410afcaae8a4ea8e14d1e6c2ac3f39c0bf8bfeb688962260f91058ef9c1a0ba39689736d039ff86524a97d8eaaf248601793023ce6569c3cf15dff30f41e384690ab40812cb1e4414a0370fc39f526abab87bb9a405fd44869069f343f28bab50a1e582d4bced25d41f9fdd2e958177a3625bb59c4677f7f749321023fc9b9b724e8172a4a512743a1c78c3c8b1f0556fede02e9f6f2f851fd31e21f0886a35d12a0e04f041251524bd7838d91657026540e133a2ac1ade52f03efb509c30578bfde272f0d9fc2e515e541259dfc249bf1762b17b5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9211ea6374362d77f491d9dca7e8e8d2b672bd565dda1566814670d22e3f211b38246529a5f01333ced70323e6cc4de58e9dee11a90f345fc53c1cb0f0c2287230d1cfc83d33c6158a8730853b5163c825ec05084cf0816325e21ba87f1685197c9891ca3b89d8d8bbad395f7f71b91ef937a1d81bf7497356928b77b10fe270500a731d498beb85490c1d3c4145336d2a8ce8430354b3afcbf0c923b0b0e824adb36d7be69a8e951f64a5b1d648dfd9fea49b59c99efcf015c6b3937d8986100f48022346136eb56f9538b115284ead85196385d91dd414ee22a3c7f40f632cbe565c8d0a325404d0d4905282cf7acc6210a6eaa26f3c3961660a944771b342"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39112e1c8251d5ffe1373e70fac946358b00bae6a461a1af561a82d81ec4acdc63eecb3b98f5f070929dec66a758d4a12cec2600208d7597320ba5db412006ebe76ed593d8b1090e93be21b1c00700e393ddb4b7d7a8bbdaab603087abd2b90a0408a775a4469d4f2f6b34d228da55bb4872ef6dde5282f5bbcdd6a8cefc71c4caf00453e6d6c59321b738d3b21a3d8f0da4afde30c16bc5722ac30ad6bb1f9fe0451ad150fb3d67a805993e506a80b2dea3801bbedb8ff7b676f50ca3fa5b9bd744c00822c975e2ab8cc6a917436279a9e85aea62477ef84270f6efe495ed503623108ca39d5c47bafa3505f04995ec9c2a0e411fed9179c9a9e94fcecda5ad"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1baab34d753d4c169107ff7dba46ec1a4203cb1654489d6fc20d206bb21fab483872c44ae8017b7c07aadb8e8489a2b41b89f9331fef63317408105eae19900377ce150ec89a37b26bfb169a89aa1c71a83cba6858d5b47353e82017f19a6688927768bfd0e75bfcd71a5e1948543907d65bc8fc813436a15949fbaf0a7f95ddf010f298df9314203838a60b39c5bcbc7a438500649950bf28e78f94155cc664ad5ff996e51789fb13038e1757dc19b6572f028fdd8be318ab933adced2e87b569544503916030b4060e231b0265372805cb53214c6f21e13c632ce08031ee368bcdf3eacb3b87269e8a8684703a348524020e820de93f1f334b59cddff51a12"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f04560acea95c8b3df67a74fb2b32d904e5c59b43b10b11519e796efa77c0c9b14beaf1ba1308a65fee50e7862289d46a3cfe79f423e7d9201dfc7428bec7f304228508b7e8e5af4dbabbb3958d1f48dae4016cf699421b7a9a0b1dc1c806a7b19cf65fb7d4465a031bd8c24071b397dc1f6987cddc8b69f5f3dde25fa36c2ad6e030c64413bf3eb39176bc003c909e37d28d5a040c15bb4a73c74c39c4d132d09fd565abd7b63d81115ecc8a151786f6ea50882e50db362cced39702ae1ecc176cece9509ff071b87f142547ca3aab04bec1a7d0c6ff35060420b99e285515eec016ec419caf75cf11af56a395187fe6575786998b6b4348561a0dd68878cf"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c029185061385643943dca8adefc5666ca039765d29f8baa20dc3cc43981ebe1e6d1f09a617559955437323e50f6464a69950baf23c7463b1b1c6761b50bba89c81299d4543f76e3e4ca4e30ce710a20707b18dee5d2ac9e0d9330148526f193439cb33238ef9d82424fc1287097e7626bae0130b735a22cb6ef08ba4d840b370c9e8658f83267e52b8d56ae0ada9dc5114920f97884d6bf529bbd7c81b2f9a700e4df4c71a8ce3141f9f4be31c9d639619b20f725f55475b38ce36faee929864a5c7793ec26dd6d1c4b75f111feba3765d0d35a272fc52fdb85f2c0bd1bd22cfb47bd0ba58d00af119759e1f4d5763f15cba4e788fc6f8a221dbdeb32c484a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0594a2a0f3d10857e8e2a89d72df80c8b37977bf2c390087d1df7672fca50d21b7a3b24453b55afee4c6fb2adf83e6b3e6a63db31b685ca956bda1f3074eb53364d9bbb9ad16883b56ceb66cae51712d592e10f851c4431a4f7b3625c774808bf7c694c582f1f20c2f51ca9f781c6172d05201e1e0ad96f7231c2786e039cdafcc4045bb078c2f432d3409dcaf25d8c0549de03d7964606aa0fbda333a0eac26e5f3ba13b1d6dc710c01a17e1a24241bd741d51db4cafbaca518fe32feb0ed5cb916c8c094c41f092cecb7a9cc0818351b5c8b6563bba32fb8e86b4c81f4f57c24a880e91daf31cd1911aa6690c8e45f00dd62986369bfa5824b785c1c56fdbb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "10bc1d1d1fdd4a8f74b17f2c8258078ef5c4f5fb973a2505060b126504c9366a4578e2a333b1a9c580239ee959d17017664631982cb8554fae8cedae07eb7e2fb69cb702db93d948d0d0e4654d9eb49192ef87e92f4d229ba56f165a8ad4769d0c707111b9be90c6cc29cb3389a9ae4d5045d8a69234cd5e57fabb76e5d1869d83cd2f3ea8f0419194cc54c398a288aaa35f765ca8e0e264865b709d5a21c9d807c4c0751f9e4e68c9cdc61d93113e5bb811c2e217f31eb14f010aad77abed3e4305e7bdb1066879237849883c3ef099b85c78352b32374dd244e173edc3824924098cfce9d729166ccfccadae8871266927763ae6a5e750f49b837b60682aa9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8cd43c2d68b1341f45c7fd73ed9ee2e54343f48c841312b4d20c59e3d9285bc7476b0b54ffb09ea84de4dfa210dba660e5c94e83e690195f08a136cdb02be41097786c8309b3dd13d83c3c9f3308adde3321554fbd223da10182dfa24677bdaaa5fc566eb9db8e2d85bec4c42bbf88a532964f2593b84af939f22641210e3d8d518b831f5b7bb75ac3ab1ba4f454bbdf784e741f1ca70e27fbd7f31709b1a1a8aa59071f1112d515f294dddba2ce4ba19d98d6a3aacb9c37c1340eef0b95bda5c8be1fb00d2c00a6159eb66271237a275191e0206aad3a8a4043c91c589ae23f19de69a44229c7d0cca5aae0cf9ff5192d8d621764813813a9ff172a643ce33800"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00005e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848cb1f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848cb1f0000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00005e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1758eb94588e6fc4f50c1be1afcaa41027869f304cad513b1fb12c2f446d63cdc05c4830a7e3e630da7b2da4f7867cc173bf6420f9732277282596de41ded32e21d0cc31441174da8765f57419c7764ea758f55bc17646eb100c435d1ac0eed6fc7ba6de5f832094ee2f479979765e05ac9976788db3c241a9e32a0da864f0019a87646ba623d63f4411af5dee1be9ec488c7e3e1b231479de70b9ac5f78a17b1f4120aece45f26c07e7bb345fdfeb05e14bcaacc614672a465fc523624cb19f66f9c6c3f642b832ca44cb25176d679f0e05606c3fed022cac24c2bf960a406d48818e3eb7ed53b0446032469047dfed95fc18088c92d91d93722c47f88163a8"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_2048_sha256_mgf1_0_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_2048_sha256_mgf1_32_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_2048_sha256_mgf1_32_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(32U);
            {
                auto m = ""_hex;
                auto s = "4f01e0c12b08625ecac89a69231906edf826380f37c959a96690d046316d68ffce9d5c471694fcebfc6b45534864689256e4fc81c78e583f675d0c94b449647451e81beff01a11a516d5e5ce3f1a910437cb8a3a5096b19fb15f4524a35b23d89cdba12cf5b71aac1047b28c562df7c5542c34ce23a182cf7e0e231934b17294799d44877a1d68ef1b8f073619b7618e6b7c22db20030d98cf591ffc3d4da5f58613ecd5ecfc3b40a1d02f40891ca43695cd4c088b05a8054c89c595a47e274816f35384226f74459ee63e25a1bfc03c360490552ec38343f8ace502f065303b00bc0ec320711b211fde92e57feb9013c3609342495ec0d7cabdec21e54acc38"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "0658c68fe0895646056d9bca422a64fe48813b4e14f0c8c4122e56d345b6813dc6286ffde014617e351c7af0a0d2c0f285def79cb734e1e055a25fa6fddc1c07da17b4b235c637413b1849c24311fa72331f4c0458c364a4916de8619b884d7e37288fad12926fc091f4851686a04fd0a504dbce3db370663a6ea6128fea86c2ca94c63e0d34d7f2c845b5d71d9a5e544451f524a451acb85c49bba7864e0a34a48613a819caf3dfd0d510c940f1df21c3373915be1f3509a557fa4d5a4e9f273e85467961133e2482c0907386454228fb0246638616fc31bbb6fa7c2361b8035994eec69a923f4c0bb0ba8696dfe8b1400c2398d7b343fdf498b1116c8de602"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "54657374"_hex;
                s = "401eb03cdb47ca88033e3030f6bdecbac8f5c8fc1dd6a13d23d379ed9a2b309891d13d74fea9d21d159b9e6d8f37efa2489962e24555f56dd434ff1d31ce4f9f5abd3f22cbea8b691d6a11e44efb83e2bca155e6a164325e0fde2a8865afd5c9f51161a9d615f62af7ec2e31b3e5ab649c164490d31d88cfae35b84aea7925690f929a144b6d2f48e8fb894a52deecd1b9a6496990c4ecf1588699a42cacd10c53af350514e4291ea9a058e77f101e32c1c0cefa61d945f7bc931f8bd19e7ba3169358a60e5a8b0123bc3199b9fdcafe8e519c41ba675491a27b85e44ef2d77277c10fe107293c8290186913bc9a99b640d8da041b64f31eab1d35920985f4a5"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "68caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c6d36"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "599724adc1bae31e84eb6e1399cd90cd67f48b432c63719b600402384aaea9b21ee864cdcf259029180877c847a223912b0647f066a59a65df6c2d3a6675b1450f0b05185cee486bfac56cfded182babcefe60568a6954f026cb2f59002a2f755e9bce49793f280d89822c9bd3a06a7ad2209c3d6cab7c1f74c8bbf4bf374e7ae8a539fccb83a78cff96a4f538adeba0869659d0e9647d98f96cb55d9cb7e58440c4c9d85b8e9dc602e909e29e45f2b82ded44f40e9ceb1292da20063967e3a116f4aeb202863cea523f215b8ec7fc4f6a22cd8652ed661e33803f3fa1be966fa8754cc7b0fa894cee0f045efba14c4f4a1d7cb837cea69e30522526b8a5878f"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "61"_hex;
                s = "4e68a8375e086990bde05fc4bbde2d368f8d96a5bbcf16d9239fcdd45942d764fc2317d90f4f62ec80059490240be8f32dfc32414a427c7e34be25ed0dcaee6927881e797db97a0341fdde459b9cc915d0a348e15dcbfe1b0780472f52a887faffc988a9ceb677e1cf5638e44a9d6f2532417ed0bde5d67f5dc9229ef1f3cfd9cb46c695738fd006cc62d02f5df76996270223060f72505ccfbdf4e88d961e2e7763705480335148ecdd23d1202c26a963860dc769a43e44c72285092ba7f24d81844e612bf03f9c2ddd4e5960622f71672f4e42b8a8f36c6847a05f70400207471c575d6a960fac1de809118efb52903ca37f12d40f6de74decb9a5b8a415d4"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "8bdd6db90323f3bf26a36a4ab5b92180c96881bd32b66317c4b48c2ba1421f8434000c06adde4264c6ea2d5346468c6d5e97cb13d3cb932e523ac57b59c814fa0397ca6dcc9bec4be1147d77abcd318a6aba1af46ede2f5640da06511a006fd1bd5fb8e04be22789956adc47bbec7988be477150f9b24a07dff51530e8f0c14cfef7d25ca141f512939987b7eb0825633d41a48742bd7f56d4db9733d92ac0f36b4041f51332695f551ec91076da2301120c438eb9ec197cbe318d4571b6b79098d17eded0ca47747a143e34f882ad6e3f490f3a710ff7ec1bffce022027165d96281e593180c67f44aeda9ce6605e6b8e5eac1347695dab211a965bb3d3f928"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343236343739373234"_hex;
                s = "3a52bec84b5b41e09358a7fe24bb7ae0cb39364374c911e0d3f011f2c4c79667f43eb700fcb33e44533654b3efdb37e627eaf1352d21a187a70a86b79b2c34ae3eef944e3e61d361c3baa446dd465f2ddc0b2ae7bc8beec1761922fb5d7aa6cc4fab9d1a0835f15cd71ccb3fcb57c578a46a7197dab478b7d1ed7c6235dea3b117472c334c3a18fb8a574922f511d7ebf030201dd7457a3860a6af6252ddaf90d07d90aca03f7037223400c066db1d7feb91d84815af2430190a2170ac7eeff898ebd5c4c7e9bed19aa86293aa257a9ad0a5146be80e7ce6081c8906d269d06bf037e34ee18aba113dcfc98eca70abed7249dc9a49f971648e58d7db2282ed6a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37313338363834383931"_hex;
                s = "0b47d3bfedac89323cef0d273035674b937f4106355c0baabf6664a57b3064a789592ec5ec4a63997b6f3dd81b0514a78b8824edb2b0ffaf45f8ae6432ce3521bf77e01912df0da5d6fad9f554a3d69b402866526e6914b5c78af847233d3482598143dd6fc65a81df92cfe119f38b0d4f9d1a51a99aa569e42cdec9b42a0598f5f0bbaa1bcd44c19c7614202e0aebaaefff7f3d197635e490bba81927ce491a5810952593f8fd57a80f60bc3c0b2a7b10a0f9dd4930db8172bcb1642f6d03332a7d90ce1edc1f8054b5bd4f4760996bcd565bddd2c6dc8f54fc6da5e6fe80a2248f920216b1bb836d7885a023d92edad5d20b0e47cf5beb2cbb1393c624eb3a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130333539333331363638"_hex;
                s = "20c9d447ee65a4cf7883ab724df0c454814029c8178ddd25eaafab34344d6e06877d5a7121af22c7e5333e2d4f2bdf42450b7b735c335ebdfb461f7b20dbb77c68c449b7826ad14668e2103b636b300a675a9b3b1aca936420cf3fd8deb2ac8aec6528409f6419d8d5ac9ec2757ad4781e9cbda98912f4304710d3a89053ebfa7a84353c86b0c48eea5a541af4644ffa21b766e738f0d94cc796004b625f244f63c41666b2213317f778f0d9d7d09a1003cbe1b2bfef585f1580f941398059a09ec07ae35bb690728ce85c2e192d423a71b513008c29582b37df1f83e40a699c88048aadd81211322b3c9bb449addb037c553551d7835e90d53f1a1883766d5b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33393439343031323135"_hex;
                s = "7c5e135d7670a57d8fd7a1c9c7b33a6e07a57d957f7a5d9594200eaa9647a1d460bbebc40e0036a7d7665ebaca9ffe3a166fa1411c704049975a5e46b4d4fa03adbf69d1a18adf59505e6d2cfbb82d5d32b7e3dceb8542e9ed8c7ac248f9f7a84abf3f16e862726a4dd189c61d6979d85ba982db3a5b2903f38d2558cc115d6481952506182a09e04ec257b19235f6c6e2c6587bedb90709298c142fa31742f401f22e2b4b446f9642b598cf43d4d29bd0934f4853ef70ec72b97f6bfb084f45ea439c4dd8242d059bc3c1a851c67d94357f93587014b2860d7f195f7b6bfb39afa712338c684f68501c5fb9a67dbb36544e6bae5f72dcc85815c2d4d70b5baa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333434323933303739"_hex;
                s = "80ff5c8258bc0c74993dbdc0ba644e050cf47213a6a19bc83d5e4b2080adcca763a55918a7e19d85a0da38c5cc4c0b958884fc79578d4c91bc403756c6dc353740df2d0330f32e1ca91136933f2491c6e7e9a01ea7bcc87088d7863e048fe9796d955ec7cf1d166ac36a431e4f858d93d8caebc6ff60a678d38ffc0c88e8ee0ea655d4c1a46345556e4633ffdce68914c75a55f071d4e59a2eb0d6fb6fe4f28b63adfc590a4f5fc72812dacc547fa0c4985620d4019083eef115dbddd673847b79540a4bee6dc4ee8de267057e321c44aae047d7bef2302369cff291f6efa90dde97672ec3cdf4953f27f26ce62e77251fbf5077fa986dab5213f1f94b19e127"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33373036323131373132"_hex;
                s = "70eddb0b9cdacf82add0c58a154ff2c0ca5cbe2877dbac3e5596de69c686ac2710a78caaf6492af18b42956c450dc4eb1a3e6fd669100d55e06b3428c6285254291fab9c80634c6f9c874db77c2107db37720b43982d9763cf34f79283265dd70f03e444158e82709555db72fd7d13a004290140c80511985fc5ad275a72abfa7ab878cf043e6694340ec6b3cbef5728f2c3c63747ff75906673be53800a7eac17a47debac1c5a9dd36eebba9c23575ffe1ed4ccd2fd3a4b9902f563b17f2bd9638d2348af175e1cb918a0681691a84444751750463325ebef2c40493f049c655077a70bf420b50917906315657178e7cfe607e9c22a23e67fb88590b753411c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333433363838373132"_hex;
                s = "0ff6e37a9aa03391e6ec8270b926c123c7e6853e01e4530382ae1e9067c2c447f2d21ea4f6b8cffea5cdead0e7bbf4c26c07418397f7dd85f4bbac0376aa099574dbd3142081428762e0092388142b351483b67fd8abfb5b73f10383d33fc21aeedc6a0e6f8a3d47f11c8b319425f9768cbbf498adee29e7d52611feff8596b1ef21ebd203397d5842cacf570d79cf0b4308a32d0951a7fbf794b84e540cb52bb076972f003ad59a35deb7af887bedfd26cc7b2bf334e242518978ff2e48224f89c7894737bb835bc353f4c0139553d3aa4722d0cb15c5e0aca5f5eb91dc9f4639aa81314038367c2779ba5521b250b5ada48ea3d2bc41a1680900bcf3cf66bb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333531353330333730"_hex;
                s = "22bee45100f26f64d7d994187841d9eed5ae1af0601604b72ea005fae6e28cf0ac2ddd9761046eda1ee55949820c5545a0af3fced402bdd463f43070da8a4dff41531a0ce09b2eaa14bbd3713b79bdf00a144167cd2142df7aa8c5a24be69c4c1a728cd04421183658726c5765b36701f0d61d26d062baec16eb59b1594a185363d8eff993ab9c6d5a5899199169ada44b77eba624c53bd7b745b053c55355da88e6b83e74069d7d7e51964a0ad666ff027ec4792c6f139f1baaee769debc55abdcbfd22fe84d6d6c70a1cd14597e7e3c218b36f35f57d4b4dae3f1c1dee433259e961cf69c3e019438ab60dbdbae050519fc3620ff677d5ce9ed6fc43868e1b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36353533323033313236"_hex;
                s = "1b41b1021b3bd5fc186eed5c1d2a69f7e648d75a03b0fbd62104442c55a707812ef635c7269cfcb124f464d6532f28880b26f91b4f3f826207c0b25401ba1eed2b4895737080085ade80f13620c20bce004a157e708f450bc615fd35c1d248ed0f9cbfdc77222d847fa8143e85f3eddcddbb137bc7bdb2ceabadbff8aadee86aaaa217a3533939fef1d6f5f3b5277d7f8ef1ca07194730edee92cc3fc9ade2faa603117e5ab812ad5a375429ebb913fb370eeeff362727c9bf2901cdf34c6d3f03ca5adc849759ec2c8dd64fa24716af610749ce462f189a5c3c947e4cc65d66983ea9efa2927dd4d9054c2e0b969428b18aab616d3f95d24d8a725d2686d10c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353634333436363033"_hex;
                s = "52449f163676b9a8249b63d0340d82305cf36a920f173389f304044503b3f5dbb503b8c09cae20a24cb6253a16d2e63559e0746f05c6ddd8fd657c34c2de6fee62cfd2d4c6c4258b138b7e827326110812b1a04573989b969c769d29c888e1e64546419d17a16ce9abebc2bc00f8822401ee1ecfb9aae39f35792338f607791acd3d7dfd3e6b584dc9382f558990607d26f1f461c5b57879d2b0d1b6f50d8ba23b37015da559c41fad4ba3607b5cb40d18c2131091102a4295555ea37e9ce92cc7dd2f41bb5eb30d02c305116c0f65464e8e9584d1757f4be2aa2814ce6b387cdd7ae78aa0032ad5935d74d4d56659e804342aea3a785d6bfb70c0cb44897903"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34343239353339313137"_hex;
                s = "33c76df07a9ae7335f5e31b3d14d7412cc79c8761ffc7fb5528ade2e5088d3be3e269962088f356830f6dbb460c73a526057d57648cbc709c14c23d85f85c11ad5c6cc7e3ceb5238be9e8380bd789106cd10e034036873ba7b8ac9470a01cf4048b488782587e2e5d7b4d2116e34b94f9c3d22983115c0fe96b42063b4f6fef5943fbc891a320f09e62f36cb1a6d83752a1c4fa6b62899afff5118af7102e123fe9c7b2a51cf3056670848240be93aaa0385ed093da763c91726debaf1bb9a48df4be342a3cb9c335d2b3ef999da4eab94d15ba37b07d049f885572f47e7dc33b5d481b5ce1a3f8b3a4237befbf04f015a97217dae6b16e7d855b9413d7c2271"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130393533323631333531"_hex;
                s = "2daebad5dc34fd919164e3ef95bbad50efca0ef2364b6db55dddc8fd703cd046e12d2d2181002d3e6c79a3671e2c7ce180176c3482baacc90076da7727c9b0c958ac40f547376b44e4f266df35419779a4fd30603c0042fc473d4a37ca3f069a915d2d0ab95b81bee5366c053b99d156cc31b2f3d68b0ea5f98da4848eb8a4dfce8ba1e167cba0ae2584757e5c1e46398d4695dd7a96412e2e1c7e62b3475a6689c5a80cc6b7c4be01a3cce6045a43aab732530898e60f55aff427afb201e85694b61e81ee86e58959a174ea87dd7f244d29c616b85cb426e7473bf568a2649f1efc40592b700499314bc809d4d9668946d60e27af852c02f6c7210dbf96ac82"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393837333530303431"_hex;
                s = "5c4799e86c698d3e09d8c806104ca3e7cb604d922d4373d7119324e95befda0669732294666e9009f9c7711b130ce531b1cd16ca5a147490a39f8726b3482cb3f2683a8a14d04ed59012005df79d2500730360dfd40f6d7f90ec71c101a686f02cf38c598efc33a60bd5d9c6d4b2c084258f865b8e77e802dc85fa8c2f59d4530fbd1e2aee005c3d446ff8f59c807f0664e5e62f38eee7be9b2eea3f8f98eb2b44a0848a7076271ca986de8599830a59a1289734774118a967e70f63df1bb82374a1a08fd91222ec77117f2af9706abb91230b06d5022e2a8784919344647a3b2660cb5a689f062ac84c3613278043be9204a4239169fd14fa05c34d8a6a6e64"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343633303036383738"_hex;
                s = "32753c1f0fff11b1aae620f21f4b25ee32eb5319413c201a71da0503d32077c911e40fae8a14d944bc57b36b05d85a9b4e2d92f260f6cde67739b6d252e4800c8e5c9499f603eced7f97651e1ee878654c0bb205ba39b59285a695619963f7f36dfdb7a2040552bba7ff13d047d273f0fc1ca3892e7692609d43adc0de6e3191f2ee58f3069531509a94de113fc10c3e5d4c886108394a55dbc2fa4baab0623db347cd0f6e6306af8973f0f166558c31901c9458ef274332c15ed9c4a6ff8df090becb7841ce5cdc40705b799277825f029582eb21890e23712837088826c108341028c96b4c6a0dd7b37defcd82622bde64a2d54e4749b065db7da5a515eff6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39383137333230323837"_hex;
                s = "a2226016f848d96442f82bbc33bfbf098c4cad85b07915dcbc323baad479bd971f81faa49b063776147c448210d4adef7f06fef44baddc672501e0444fe8a28f871f49f6ec634bf4f49d13e4f73c832c978bd227bc1e85804122157885c8744d31f777168a8cdbe7a4742366cdcf0bce50a0f550cc1729f2089c927990d94f73cc962af25d70a1fc4da6df8457ddb5a4969bfca4d2b1964bae88226ab11047da7b6e7adf8f96dbd772747f29bd9b9361244a04b7558df62d84828f7aad2e562f2306a96973a068b176008b0c7534eebf0ae9f7979a0902212d4e20dcf162ab51cd55944d9bc07692348f8306ca90a80306d404d21724a28efbdd228e2080dc89"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323232303431303436"_hex;
                s = "6b9a45ec517bf838a535ed93fb36bb027471b11d20d0bf6b1edaaeefa25bccdf5881f34409a042dadbe4a7b3c41bf24abe66c1f7f37b92b9658f59c55fa88aa1632465ba8245c5f0c98d082fcabb5e9fb834d727a354f8f8a7fcdb8d3230725472a6a4ecb6f3d97540773e53eb45383acbe4bc81168e244fe769b1a7d5220dbcaf831e46c93f6ea7ca2ee30ce9281dd9674fccdc796fd6147be4bd99c53a12eacfd4b9b00972b0539e3d94b85911694ea98f27496b567a29fd3087842ba01402901d1bb1ba6b3c7931f1329ff5644989bdc1f7025059d0d069517fbb682c0be049ec7e38b614af1cf9cc37eab74e20e6bca468f93d3f13749557b70129ef95e5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36363636333037313034"_hex;
                s = "01926cbf92190fe7ccd7f858c260036a7a9d554bf636a82d43edd3d2cf0f5f7006c2e0d6dc43c7c427e49940cdc5c397df66841897d3e118cfa86f5188c54409ffc169e8f192c3a84896931d98ae8a9e83075e6dabe4d28a56f0a9282432511ab09a1a0ed420be665521936a1c9834a456997c0e5e2c1fc56ab45927b6042d3571163ba59d994b902aa5ed416ceff4313fb1c67334ed7be715d2e96c045d6c0bfd20f2f5040e09fbb077a01f982384ccd883cfa2fa25d35320746728ae530bb796f5ae6ec2c36aad3344ce69045b793052cf3a569293a2d232eab378853dc4030b91e1f08c31348224b774e8b71a7e23e77403cb26d1f2b1bb800c772860451d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303335393531383938"_hex;
                s = "363ca23ec7d980a83a5f367cba3e9a2225b3a3ecaf6434b5a347e3baa5ce5ea27824fec727ec7b3ba2d41cdc9723f5cff3e75dc7f7b9200baaa2c02b4d8399b1760a1011231e2b26bad9326204c5079ac1c1303ac08fbae42f6a4032407e87915fa3759c43b29ca07a1a3259fbee4274b63a52860c6351246f8c1c84538e5e6f6add7ff6152acca4dedddab146a25bbdf0076e2879ecf93baf9d647b32cf32a9e62718eec599cd7b51510a70fd989a77426049092621c2386a82771b06a4c5b86bc28fdd630e76fe43f21c5d22fa63001da300ef9777c9dc4121158840bd084394d600a6db284b1e771112b56b63364f007cd71666902cac56323c6e5494d50c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31383436353937313935"_hex;
                s = "4a2dc205db899d51447b689d3ad601003eafb70a51051ae4e570c5125afae66427056fc2c9f71bc42610ef85ba0f49a2721247d4a77c6dc9f01429c2d9b909fc84dfb049bd351872301a7736195596a1c49ccb1b367544a190d188e4e66749731a760d76aa116fa4a189665a98975b7ec803e2695fef42eae7c7f8e274e4fb1c99ab0eebc76ad6bc8d768d2dfd5969181e78b3ee72fa900c31510f071a1da8b7589e49e254de8850db02b1be841af478045a847f2db9126a4281887e02beb58f1f0bbe67c9c7acfb49b5e4ec4fc76ef30654b5d3ffcfcdf7cc912c5e1f2b20d91bdd6114d25405ab65215c05c4ad2b6fae6662ae5130d17652ce42c0ce86c153"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33313336303436313839"_hex;
                s = "45a2550893820ad511eabae35039a13457350df7ec21cedc1484530dc37ad332a170af8bb305e4bd6da78cfa4382045ddfbe2499a19d51838b3a553d7a849c49e284093e1f2fe4b269295a75f12dcd0e727a79c1f0e9cd2a89e295a355a52da7ee1dc2547fa43d96abef1a3b5121bca67cf450cd087c9d904cf797834057334f788c96763a4ff0a899068363621d90136eb530c32041ef3ede97a44be137d08c2a7019f31f8e27e156e509227860c723e3aef19685a5e3a10b78df66b38f299d60b2338bc6a943bc1b2f9261977ef4e08d1b6b42de17c4c652099d377a7ab983ff983c3bbbca99f79c8148f2afa9b0f1bee51e322ffc05b051e17d132a6e90c4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363633373834323534"_hex;
                s = "258d169322a9546caa2b68089b481bd38348159fa9ed192d2eb60839029552a420d5b24644c3381a5ffbf2ed46072974918d777f1c53ad51f9ce8a91aff95dbcd817f50ef13ebfc9efb6c36987dfaaa96e37aa89dd7a32348906bcc22f4d0b5104c42181f76974651e3ced20d5412f70467d834cb49b1b7e1532ff417f91dcf653f18c43a6ad9ff4469600890f836c553963bc2379d5bd79ad338035f7f4aa6a27fbd924b5bc8d8b5373de7f4cdac75cbe0b8abd3961db17b819d46ccb4cceddcdb3636309d6754c6d82a61f5d9b9bfabd0c948777264c1138c6fb6064fdd5a797e551c1d0e545d1d32d63e1ebdfcb78275692cb50717910312da9917052cf53"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363532313030353234"_hex;
                s = "824d0372c40297e3a0059236a93f60db3d2514defe409bfaa2890f4d04cb21043ba1871b8374fa51f1c4d7392d0e244222b1eccd118009e46bbfd2a84bac9e84ddc5102eb4508f5b9d77450f7aed31cbf5b6a4032bb44fd808bad403e8b78af3756f472563e050526527debc1ec49ecf5d5c10f279d06a5dbb7cca188ba212be9fd36c7eef8b187405da50dfea140c4b604dc313f28941f2c4447143a1420b31cd23663252ec0426c8465ade55cecbb9b9cf4f88e2b4b7c86cc5e2c6a4fb25c55835a2eca1780fbdbb8b354ba512d412e84e73764e055514e10d7ea32ad7e1a3c20dfc53732d85fae40ca951b5fc18f9ab21c9001dae67c6200b9cfc6d142565"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35373438303831363936"_hex;
                s = "8367893d5ad77be24a739cffdaa7bd414d66442357db9bb339a7ce862b400363d9e7014aa1ced3a8c31d65f247e96ba5649df636fb759df04b7a62da27a64025bbb9719c7ab1d74d63d2ad5a324db8718742e5438b780ae630499bea065e2215df9313fd45a57941e9632ce66fe13a5359900a0ad5de9261aef6a11c3b98be765c94a6d24fb7c88fdec9d6fa52ffe975917d3b3d68794c6fc899b0f6901173fa91345df15f1d08dbaa0ed77e692f9de80d6670a95bce1b014beeba77543baf4092f4b2158a1f27b62cedb0bd3f2cdd381d9a46bae1aa34c2b8c36a65d4e44fa5aab1cd188d4202227d6fd537776980ebe636dd81d3bc0775bab23ccd9623d423"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36333433393133343638"_hex;
                s = "99f149e9940d2a6eb2e824b48838d56f383e4503cea71e9ececaf2a6e9d616c1e941fc0f8994a0373ca6325f6de2b76be043e4812d361d89cce166e7c0f4ae8e0c2c8aa053ebe4568e0c5434acb6535902dd13901446a38d7905eefa51a22bb5b2a05b242b061643a8b1538c342255438d46824c43c5df1fb84631147b9cc689d7b828f2bd5abfb48bd40a1b0ff6866eadfd9588a0361d9bc6a076b978b9f855a36732207816c8b3c426914c73c9613ca53ef8261fc30dc7a15cf7c858609265946626000a1465d41b076ac9ded93b86e95de58c1a4d2b5cfed5d311b6f24cbf257fb03c47e443cabaf1e766167f524e6fb665e42ee046144f25544d46d34efa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353431313033353938"_hex;
                s = "20d044f045bdddb0bfe994a34b5437e61446f9568f3c7d09137430cfa17e3929ab8b849ec7cd632079a88f994c0f4a0ce23f2976595df198b4f1431205c29b3fa1d37980855446d25327ee669324c3666022c0100cf1bf855c8774f3aa4898dace7a16693c614eac00cb337f05ec2588f670370c3ee40f29e8e900da16d1dd28aaeb098f8f3b918c562f8c2512af238ed4ecb3be4ae39374eb638b021419a3e00890a4eff70876fabd74eea1bd56de05dca208928d434e7342e9179471e958e235a298f35edcf9ad77411f824d5c53b4308cd08b0443b58fc5a868399538e5294dcbd2e94d02c719aa91ac12c3839bea47cec649620b73235f368fd5d977e033"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130343738353830313238"_hex;
                s = "4c8d64aeabd2e12c8f2e3d31ac3f4b861723ab8f9a52cb8910b298fa3a735bf91284e9ad92bef3995a1058fdb0f696143d92a99c69c233f60f64873882c1c9ca8e54cd03350804aac319747c5cb8ec6e42f6100474158111b30548519e02ae9ab39507efe50b8b212caa82305d9f2d2c43b2f75c5538b0ffe9423e1044b5fa05bd675e1afbe6d22e73ced8dddb3a00ef37211136838bfcd37655203bf2c830a62f2c707030e2b964443df1ea24ab1271fd06b3d6c1ab78b13374c086edab36267ac065bf5ad799d2f27a6f4bae708be1103841aaf21ff547474634e94c7ffec8b4bdf81cd00cf0f0e6f234cf2d208e2af2e2fec001944e9444b005c8ed919903"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130353336323835353638"_hex;
                s = "0e97e294583f528af631e44c02563344657ed47783c119a9d28d6c0f39b6ebea40e1847b9f2fe2708bedf44d2037ef4ba7464c630b8ea5bfe1c66d4b8729b20ffd22fb5721199e884b3b314ed1a6b8abf11c72314dce375aca1d02aab773d88830d1b56e86f45b1862482242d9ff57a1473876c476c33fb8228420f3a6a31f85b77aec3a8d60b383eed4f07dbade1020f5afcc08132d0423319e85f51235b4aa5e16c0b183e0fd653e594c6b17f25d055b410b78c890f29c7966a8096cc248906084176e090af500c9c5d9235a2d35f231bae74deb9b860a541d2bb933ff0a200ccff8ea3642e3350562cf29dc2c1100401a9ae0c0f5e1e6420b219e34416254"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393533393034313035"_hex;
                s = "80aa94e49ee824191050c8bbaa73b352fea2311893d8b8e00e61a2d14701783d364e15fc09035482747711fa1fa72629460fafdb23474564527447e0c05be2ba895e2dd1853b9e6079afc1464f7c8689b2ad74f8cd2bbbc7690c91bfe2671bf3fdb1a43927c5e73123f4dcddb8dff9f06bf254ca2cda0a039939ceaf2e196f2cb268eea37c515d0082e5e9b4a82719c6f5ddd6e6a779054325c1ac45d6c2599f2c83def50881cd9d3a8508749646c9296ae2429a96f580d7cfc54b2f08726ed3caf7c3e5ab37d32aff309b1f34c1b8d77e2da69b619e3804ae6ce439e796f86340dd0bbbe7ea823857d9e4eb1aeb7604fa16f4b0683f78a8253d00fedb5b6024"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393738383438303339"_hex;
                s = "1e10e4135796443ff3a815be4c873f9f61675c85137ff4397f600f4f5ff79634aa4ffde2195419fc78ac82eb7be206f91443b12d743457cf7fdbfac6d7f66fabe26fba464d7f984c6a502b19c8d4b634cded91d4289bd84ea7b2fdf2e6229bf47b40feb368692f60277eef9c0228bd315a3237458107c8fbfde830f8c32acc4d172e8eeccfac19e99021cf8122487f93175981bf9b797ff869153b8addaaed1f184a677fd694d88ee0eda3959bb3a0d8f66c361658359eb117eaa91f02c6c0889f69f9a14fad91d2fa443d2bb17f3aaa41928546e163ec2d09ec5cc9758c7cda12fb29692f09abb987a135892f17afac78014624298b1af79a523fc0cbdeb120"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33363130363732343432"_hex;
                s = "73e39468a5640718bb56f26939ca18406995013cd10a7a72e65d2e6b1df2e841c1a7394135ce0e5da4a830bdfaac5bc5b2d8ddbe6b5098a3d9de96cc639823f7a1b23f769ba18d0d4772c1e989891a4d60a95bcd42160a78931361522da1ce1f10204f57c519a10c2cc9ee3145a0a2ac31c37b3b5e5572aaffda559f05a684402bb5c3b28c6a2ae263214073999508d96a96c30bf02fde3de162d937c4f2b31ffdebc42f9267e621855fd18eb97c0cfa4977c1a3765b4ebce955a9c87130baef1853497407b1922be2f43b6deaf7910d6f8fbfa97d870f16e17a3b9c133be1391e847e103096fee4905f246facbbe8c95f62d15f302cb27e8d4b69ec249af4bd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303534323430373035"_hex;
                s = "40e3504284c59620caf145dd9f2425c39c66bb4e0d7abddd694b810be4a9e2f728d706531019e7e07293066de0dd6c7c68ccf32ff2d91dea74c592c504916148551c99ddd5e4ea0a906500341b1f7f6a03c4901827fabddffaf1f028139db5292554186b867a012520d554bbc42b1d73d52b397a7c310e7d195037f15fb1fe729f577d1847894436b9828eca4fe881945c1a38a40805365dddf6cf7708cba2948a15b756757d6246dad90985222e4baecc7823e4e7e99d568a9da144a5b556220aae30b8a8d916a050a869c70368607dd0092ca9b5a00865d3bc1ee0ec06df53f9828327127f33a97796f6b0b255f1cee34328cfd2ca1ea3e692d0a94e457ecd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35313734343438313937"_hex;
                s = "72f7f4bf01a6784face7d31b19c19ba1c75b16eff419f81b39c1c17cd489ecafffdb2dfeb33045cf679a455336bd6869ae61109043687293bf98ef7ad03afe6e71ce4d43319743c07c313b12a728c8a98256bd1fd735152d1d2c83de2b8b57cf9bed4691ade15eabd261377c8e26bab03d0da055086dc4ca5870bdcd9ef3e7e0973be871738a3e389d774d5d04d71ae0a3be03746aa4b7f20afbb3a44d9163cbf4e675e36d01f016087d4e7c68b2e3020f6fad363948804b0494d7b38d2ad4ee1288bfc5166b59ae3db2c2c03971fd42d04e6fecbd36cba6390fdd878b67a2c6565a7826671144712108e37adbe8198a2bb3a371c90d8c6880dbcc948cb4f775"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31393637353631323531"_hex;
                s = "084cf6628f8f96ad842105198bc30a72bc3ea4aa4bb01176780f384f9f4ef2dc9b591d042c56c898e48d468226a9a361a9c8e0b27986fe6499112d9f425e08c778d01d3b221dc110411006373ff903d78678b5b04319b5f96ad14d1395defa4a517d5ca7307983a7819192ae7d87828eda55391444cfb737889f479437112b1a45c687a563a07660223d7fa199e0924d6b80ea18de201a6d8e08a80ddd0954032cd3f9ce0d85d0180a08a88d813c6ed289decf3f1c1514adef9a9662334d6e5177d3dcd24a2a170a6555d218aa30638a206b1783edef43aeb6f64192f2fec52e2f82f4dfe23726719e16a3ef873ae37488449634833ef2b74b4766f4ccffeb2a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343437323533333433"_hex;
                s = "4a510dd6edc7eaea7ee9302b007844433b010dca7be4ad12a8165da93fb8ff74ee5b836769608a1e207e208a7d7fb2606c9f0bdcf71391ed5171100ab738e54d0180a629706db39efb88b690783ca9ad25234bcd6ce0920a01f74c9afaf36500434519afb3e8ed2b65a947298101a751ba46cb7ee51c37903d60f6ac8a7f3bc726f394dfd5b53c12d5703fd719aac9589046f9f4064853fde4c92374c1da4fad27a4f603cf23a9ec4ee478677f000ce18feb791b130c037d4347abe36901586728fb3b09262ccd0feb79aa61eb3503283ebdb495316814a74c74f5819b165e2d0efd65d53e4f1e73d76da1847f8f8b955678437b4584bf6d8a8a291684a1a99b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333638323634333138"_hex;
                s = "12b06df28dbdb8c6c34610ebca8c6a730558f6669bf160b8083b4a18a4d641c333d770d03c5a6a165db07305c0d0deb6721355d4c5963a0b614bf0ad522ce2f339fec301c61bd3540d0a7bf295cd67a7ab81401e3af1c66e5ac4d77e95c8b5d00bf128dd1f47a847ab78ade22f6ddb158e6da46950c13eeb10921bdf3b5818506d635020810535db03e291c503902f25cd67e2d2f731122d9f18c7118ece369adaace1c74222b47046476d6f48910a7d6b6dc4fa528199d54a47282e59948ea66bdc52b9dfad6d2ad34f19017b2f929ce5684ab59d30e0252b96c762987c35c77eb9af34e568fb7a2c2c7f698cd487af1852e17af1bc2b25feffd31315a6cead"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323631313938363038"_hex;
                s = "29c01987266ac014487e26052c19cdd9658966444197025bda28c8d47a67f7017dce389dec619d61c01f7f1758f8d550f9d4aa98d6abfea6aed8143fa4143c853d4af2ba3c5c5df1f1811d3151d35c6bab09ec94aba0198383e326955a1ce54d064c6d734f35bab7b18d3d36d1ff0ace46701c7db004b75cb44ba1bcd2dcd2cc76d1b46cfd91d2b2f5b03296224a8e4e450031a32abef86c1f06a008b56b1c3c499b8eb951ccbcc9404d3cbc68e0b0292c4d141030d6f3db18800c987c34730e689a43f0436ff002233da7e8be5b242abb13238db247b0b39af3064066d3d6b44da065ac9005ea21a1ace2b8ca2729f5de2f579f66f201e91bcc31d5b430e322"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39363738373831303934"_hex;
                s = "400026440dc38f61c873f0e4eca152d72e4237a685ca69091b71938cad2259fa045af81d9a8e568f71b2f42b9b5fdba86bc3d5d5dd85dfaf2c128200bf786ba209c783d9a9ccdc0cddfcfef579f6c9abc4aa4b4ef41f39136fe1d960047778fe29712bf6b27817069554ac10f2853cbc825882bfad9845ef304c17e2587e124c6979427a3be80965b25b6ed25878758cf3376c7ec7c2bb8ecf2529475ed24ab2e37beac3307fbc2bc0d51b39005da9fe87d848cbc1f8625d47d7dd855acd1b1fc74edf0778fe649892f1e9750110adde7e3606f32551533845a5c45453e9c17d4b812ded1c9ccba702a1d2148c64547f6b53b8cdf854b9fc9ec493c52830d769"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34393538383233383233"_hex;
                s = "5ea77a298d24682962746d11dc54c138a79ada1c4e1431bd06bad97ac4d0424a500b7532a3540b657f934a7232f988ee659c0243337d7aaad534bf15eaac5735144cffda19e96599f1d1e1e187da6da5fbe2f9ce7c1240a3d2aaa3c639c5eb8edbbe4eaf69ae8df45286f85dac27eed162a87f71dcd4e70a9960e706e6a4e3b5c5afe00d741a97418e89f0f3bc44137f06935c767bb04338a3dec5917351c65251d74af5e5698248eb498dcfdf498aae03ea8cc88593b98b34988417ba697bdfd419001216e57b182781d07d3afd0371e1de64004fafa538c01e6040926bb193c34f3ba820331f8fceefd87e78fa09b07afd0d116993ec549cb3b7f1043ca605"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "383234363337383337"_hex;
                s = "6567fa3a976c472555e45472bb8a6ecfec7e0e80e802d58ba53a255669101d3d362e64cc3460942d61fbe617772d381dd345b73f4bd37673375823801bfc6d1bea2e0e9cce5e607afc3e66c3da25cb29e23359cd93626efcff1e9e79b0a7cedb75badb69e10a0cc09e26b3684ea11e3c43d3af040da87cce5b1e30bdbdcdc7bdfebbe5be5542e18b62935b0c2bf8b3cf2507aaf2bed209bf4e7fab1fcdeed47c9f7e2b0dd2e4b0b8d3b2bad9368f58c6de0ce61eeefb9b3b98dcfe7881e81e67e8e8908a6c71011ff69ce21fcc31398a99804c9ab48f50bcbca80104a8b67a8003880cdcb114c13255d7b1d1dcd7f08aeeaad06637aaa051cb0eaffad2420df4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3131303230383333373736"_hex;
                s = "742e9bee462eecfef3e7a05d24c498259e56c5bdb9d0a52aaa24e07d68c9efdcd64dfa5d3d44ce73c197188a9168ec7aada05a3aafb8d3e8c45b2d2094f2b2f9df6125e9f0a5c129f33db1387dfaf7724cfd548f08a94593893558c34d9e66d331bb0719fc73152241f3e305d1a7604328c12e65be342c0f49d0650e4b32bd8db65b8674c3284549d4b6853db320cab0d019287a8afaf2486d749b8bbdd80378455112d5d54265c5e94cc3debaac80a6e3f0ba47e58311bd0f0407ac90b35d66a8aa432f7bc59cf0f6ff134852a33f997a24c737817c90c89b22cf313d30d9b9dade41371f8d6abec63a8e01532b4d4c504fc4e78ababdf325970f4dc617e4d1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313333383731363438"_hex;
                s = "2507373f2b7f35f58d9ea31cade482f13a066f4dc89f38a9359f5c6adb8b4119f0a62fad114417431a6408869a2331386dcede6967fce30a06216f1464b2a86f130b4eb64ee63ede489687c82d578c33046f6530b1f27d65d026f9498409fc8458f7aa6032d64f692c163daeae124b2ef879c5360d78985327fb6f20db8cccc32ede8823ed05313e4a3cc7784ea029a42b110d07186338e9adcfee27826d04150e5d81bb02cb1a5d7a0950688f213a955ef2703a3dd4702abcdb6a9ea85a6c764ba627afa354ddd98d2108a05bdc3f6d4740ab24f2dc306c1ed9a55fe724507ad51855fc82b86ee6000eef49918000381f717e12b6a6942feb1313cac525712e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333232313434313632"_hex;
                s = "82d4d4acff7bdb073c4f9230b81f910fd919dd1f8795e7a6e8bb3b968bf92fb2d62b592080c3bc6e3bcbc1433a2f3bb4f1548e78ad86ba9e7cd1f11b0317eff4c3e7eac79bfbf15bfd3896b537afdd3f41011ceb716edb7cf63f5db774c3f50655b13e5c587606ebd6004edc169b6802425e20a382e24e54f77cf4b6adf0e8568cf2c8b588bee5ffcfc9017e67aabe73165304e883635182d19f489596f7e9079c26fa97ad9e02ee41717179bc0ca3b380f9e639052ac3608514a235387b593fd6470a3aee56f9b8d73b5707ceb6f6c926ecc4b8ed9cd75b8d9a8931f72251e366415372fa8fbcce42d77c353ca926fb3f12f60543111cbdbdb1842382fad25a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130363836363535353436"_hex;
                s = "7be5861600d3196bd6124161c3272ab36167b4137b0705b648e93cb9cad8a4be37107b2ab449f421fd57a55bc3fe9c6fb6b829dd6d6fcbe88eeca9bb93433764fd0a88113155a67a5fb514fb2101372e6dcfe9341c9538d8673472a0e75c028ccda4aa2e10f793cd0e10162167a98c9bf6880a78651f77774eb20339f3968e9cfab74dac2261ded111c047ccb187e11ddf255d3695e25192863d632257444d5e469fcf0ed88fdc954ee94164d70218ef033cc598ba974d8a53bcbd01de333d4e185faf85b86acff65b29f15d97321ddc21f9afacca674eccce7fce1287ba508cc2a55c534a2c5d678b92b86dd02de641684c7c8b0f14863cfaec3d7eb8430486"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3632313535323436"_hex;
                s = "602440aba9a9add4716555fda1dbc6a934224c6b762433485e160620fee1607e9079eb265ddbbfaf75fa266b19d752b7721d4ea5203ee2dca840f078dad7517ea2392142e4a9086401bc3ff19ed5b7628390b0175bc982668fc86e2fab33acf17f3ac229d12ab7cdc29ffb98649669ae3e6443d0916b611489c9642d356ca1bfd3aee35d96bf9bc7a9b6734be5f77f96ddf2b9cb366650619c53dc5b5beadc7d5815e7b36b58f3cede2d47ff228cacce2789b8d875edaef9b0919bdccb9cf90a7b5eb4e7b996215c943c017e24d1f2ad8c3bd844668d0deb566d587e378c38d547f8aa473465fadec8624fdff1f980c9506ca12eb999f2b8f18f0f5c9b2bf460"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37303330383138373734"_hex;
                s = "1bf65b125ccf21ec8894576bb4662a39ea4e34e3bda2ca48718c56719d1ec0d9a0645d06440c2dbe96b1f85fd20206b001279ad273e1a656b554fecab03d588aafa8cbe957a5d58c976f85fffbe155bacf78f7a39788027a1cbde3c01c7957f6bd2b9708ac5d6611a82e43f1363f72ecf4583a32c9c887ff5af1a70b0f0815db3d89f6dba2f06cbcb19cfc49851b0220832809a158ae9a8aa4508880f1169a301e7096ab74dd4477b3f1b6242f8bc6591e61bb46d871efa0b74836fcdecf371c04cf786c9899d8c0cb47acb6790327f6b4edcce4b1ff651fba61c4442ae3e4d9a23601ca8f8aea8c6055c3b1cae8fe4b506771a4b15ec8d2c1d141dced2d908a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393234353233373434"_hex;
                s = "9fb119ffbaeab1f338eb3c8db5aff1e13310172cfb7b9773620a9fb6e8454f029840c88ae4f33f85558a82a9b9bc2b9aa4ce6d49f5343f79011f67f2c2f46ec7b787299b8fb9d0c46a18acce3530c9b88153022964d87dfdbfa74794f5067a39bf3e445cced358bf57bbc45b7a29e550b5fbdc0aa91d1b4db74b11d99e995ba2e1ac76c0fba496fa95016b8c9544105328b14b3a3f1cd45314ab67dd8758df4d4e66a01dc89dc541e9d46feec6d1469846c778d8893d39a337d317f66ed7725196af6e878d53663e05b8c6ea215264d2c897424af9c30aee5021086b6cb6db4bbe27bda99e929469df9192bbdfdba572864b15f468916f25f7bb87d3d02f39c2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31343935353836363231"_hex;
                s = "77590c1437b5657d4df385c0c639e0e4eecf14df26e89d673033944c5938bb6b1772b5a9aefdf91c19641c1fdca98836bea1dc8219c01edc9eac96afa2f04587b76e85287f78518cf3fbe1e84ab574a9358c1b0ae3f5a843382faad16d0a7f58a7fd73868e4ac2dfa57f8ba692734a689fc0b4eb270a425a69fd3dfca7fa30e09996684dbe7f959df6025649c1b45b0697315b98fd66e587ed09abd43f0ccf4dff7ad83a8a29a701be77ff87982c3b828b48410b7bc27aa01d659e88aae6f09ddc3b221fad1523f72e0804f34518d213c65b47f235fd626419edd0c93734eaf11a91c0bf8c4c3e7a9c95c8f66f0a690e6d7ef75b6bb3080db75a8ecc3be86853"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34303035333134343036"_hex;
                s = "8cf02d19d7dc5f00ec2938220bf400befa2044fd4033e874ddee5b9b1f71961bb151e670743e36f167e02a8c49b227930e236e09cec23db417eca18740f78c752e85879c32c1b3e21139ef929e99149fcb0ecf0e334f24242780273e9ef0893df58996bc156779afaae7dea56328875cd85b030c8b4cb4f466a87c449926d9133f452ff7510fdcdfd66f0fca6e9d1a84b2fb9a7d001885f52ed63aee3a22059963df11eb6a67f11030d2841cdb90d3a096739f36ffed1eb538c1b095f8172dfcb1b5a325468f78a9ba11e028e1fca67758ee0f66a7c7002f9d4b31784b93e99e838c44efed881756c5934798b9b934b751d4343626ffc6875676f4373051351d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33303936343537353132"_hex;
                s = "0e44384d7e96521340c9f02ae7e320636e685e965780e191f9b6b89df8c1c8f68008c1691b3e706e015911b519f08813bf8fa5377e2ec2ab858237b9dbd458a277e5e42bae0e0ded39f7c8c4f95fef46044217d2e4a64632741c7b84e0063a13be92380a46fd43f6764ceffb5d8a32eb0bf3af7af9a3b4e07ce56262a4ea3ea2f3abd4a5eb71849820031f61335e4fb8269b9c201c8f6ca662d22ae1bc9b5834a291cab864c9aca7e1120ddcc6597efee5fe3ff2bc8f707b6567603b536b8d17d3f0f0bd9ce74a535c2012faf0b6bbba544a376af338f825165ba31bbc5f88fa86ba8bac02f4035eaed4708ce7972563272296097a132968aa37030af8e3c5e7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32373834303235363230"_hex;
                s = "905801fa11f3066c89d0976a303f21f97f042dab0102a066763dda907ac822a23f9bb99a93daa2d414df4e7122f74cdeae5970dc132cd0ff141c5698eecf43dc6ed1c93ed6f6abf8b5f056f674e96dc9a69e293510019515decf3c1396cd84f5a8ea6eb6a82a9197dc8af18fd4715ae24f0638edfcd1c12c5fbaf6c7c9b270e918457b3afb0b9a4be1f238410e85bdd7072ed684b1db2d96e0af02b7388624107132c7e120041fdf0ba46a7f0c12e18b8e72dcfa1a293cd399893e053080773a5b9e703e6d6bebbfb81fa23da8145329fdeeeb72d60130bf057839ce758ce6136bc467daa8ee8dc9d7cfdb966a96bbae15a33167c101f3fbddc164cdc0e94e04"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363138373837343138"_hex;
                s = "366ab7ae0fc28753f7cc8e7111398b78c8323de7177e51f9b6679a87888873f9e550aaba9fd7dd25f2db2b5224664d5e738afb98cbf7b2e86d2ec9a10e68cfc8228adf866f7cace0c6dbcd381ea62dcf4e239a2b7bbff1b83db5790df09f2b8bdaabf48c38bc5d00914961aeea73c6e703bde78b806dd41047d1799ba8add7160d6abe468aed61f78cab2dc739b95f5ff2b9da3a2cabb0129e1e064af17d37a194133e0498d7f2c8319c01ef20ac6f4b81eaa037c86104bcd03dc3d8e5cdd65af7ce55d6c483520521399aadf7f2c434838067a255e1ee7e35641b1997836f010902ccf3b2b16748ec87bc52db2e658350c110aa50bdc742422270d3a2bd315b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363432363235323632"_hex;
                s = "92832328c12807514ddcd919636b9bd125192ca98883069b2ca8edfbfb0d4225db3a621bd03a7116f9b919b16b2568a897a793d20e9c4328add71ab2a2045c78ab1c3cb769ab957af2a3b572b3bf2c0453bee10bbb9fa7efc60605215989979d7ee5724f73ce85c710aa00f24961e5444f09a83a82eafe3839f8dc3fa5e27a6cb122ad34f80b181142f762a87fdf8e8e77b42b3416502158cc66dc2dce34e29f1c9ebde9d60c7969b72d9e841110e035807e2a6f85cdcdb875b3bf8e3ab1f6d05f4adb3d738e9965c52d81387cd0a702ab85576a50072a994f13c7e691c3eb1fc4c46652a5a3f482ff8fc25888154cc8a1348913d1cd0c19d77c55b6e46e50f9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36383234313839343336"_hex;
                s = "3fc17de411c99243a0e5d4afd5131f177bcb4edce034c91ad9dfa87e3c31dedea675574e917954832608dabc72544729fbcf91fdd1f114ca43df0af73e2226b73a1797fde7daa3cea6b086217d656798f9abde4a563e5a8de203480b42af12e636ffaf7c72d2dd791165ce3ce4b1e21e8b749cf8e91b78f561867c892361c1529c2c9ee780b6a79b72b447639ced5b4a04fd3d2d716923bcafd793cd1454710da5c785ecd2c44cac2f79520bcded6d3d27f9d2a7137a68e69c34d15592e963f915e88b8030cb7f275a3be498b25310ab4cfba7bdc0756aadcfd3944a609c40b9531cfed55e7f9f6914d53cc17dbf1d9707fc57ded6bc04f690519cdb2bdcea29"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343834323435343235"_hex;
                s = "467d466cb8e157b9cf3f51920b18f1db2401f4d2c397ec58bd3c6ddb1d5e9d9414583534060773a13382f93f0d8852fed208e4ff560ecc2030772955022aa594767262dd02f1a89ac48bf4f7a2c34e8c764e32b39b9f9d1d857164fdacea8a93e3456f4dfd9658080e3e45c0f17bb599c456e2cf5946140d467755eeabeafeef440c72272af08a4a4a1391d96d750211361e5fb78e9439c3e3b39e01ac66e40d84727908db4dd7ca742c1454762b2022dca5e1bb1ca5d051589988336bd5334f72d12fe9ee85a9c77ad4e09e4183928661e72cff1c0b480215b9afaef2601399a47fe6286acc710850b7c22d276e901219028a296edf83bfd5ef21598e5fb55a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "67d1d1c0a398148625317c3f5e44b738bdf461c27a59594b39ebb2aebef233c7809379e54411411b82d2e7ac88f989b58373d532c758baea121878ce9759441738d121881c1fa2d04421f02dd565b12770d844611ed1873a0b64d822709a6b78d6d3892b294404bce6711001d6c3a54546c76a1d17819674b0be904497a233b466fe4becc832dee740f9ab79e5b9f5db0b0f9aac0084ba05cebf42303b5ca2ad95e3d61b29ed6475545c02e93e7b0e118af92f5cddb1faeb2cbc23c9e69c120e29df7fe31991e887b3b29e77688c60e80be65cccf3d7861a7a14c39e6a6e5645568e2cc5e4a17b75db1dd415aadb45e112a9b582b2ff6e82a43d7a7347b7b56d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "842348f2b2cdd4c72cda7dbec0fb8b114e419cbfc1ee1b7ce5d70ec56a833c4ebc8c114dc3c92164b13f4692f236d6b88e5618b23af9fa979fe9b5d8eb228b1efd0da8e47b4c4042965c8b9f08eb9f6fdf7e472c88f532d4d851623b4bf99e021e82ef313c7d93179af810b70aaf929a395ece713d5fec3339e394210b56f1edf26dedfb04083bd24eb0d3ca117761f38319c3b97a9453993dafd3d2dd8c01cd63117f8fda46f52565e4d7de9f718f1f23254c4f9ee77ad1414af4d4dcf959a89bef438329516cc9b79149db058d206e6d7c0133e7c870335f0490b8c569d787443c4a84ff665dbc6f4353dec66f9c488a3f91071ce19553a7c156025f1f81b2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "77c9dd7786f0b5cbe76f20abf24361f8979d3a6c6c122e798eda906b0b9700cd2dd26e5286ddd39d07b7c24379cb40f8350354a36b0759bfade61d3d770702b58218c5dc64ddd0d5fce405a16fbc4de3a5fbe7737032605c06ac82e174619c3004d24bbf22bd1ab3e4d432b4ae36c23573cbad845c16a1842e5de1a3bfa2f12d3496a3114fda830dd6061cf538a4571fe088cc03dd7e8762fb08b84501843f5f0362a4fb097d6fe9b96970c0c505d2f6a59754c42684908627fa8c734ecd587c161de7b7bdd69924c0b4d06cb7db2a70dd9257876d1da1ed8cc00fa68279525c346b7256c916ccf1df9386ff9d1eb27f0a5d83a00a2738fa2dbfaa500baea789"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "455221c385f769fedd123afa37a42b7477d6c3ed968ce44d4982c41ad29a3f59baeb2b566dbacc91b423fbaec371f3809c20cad6afcc2b8df782e472c954cdeffca49553f6eca58781894c67fed1d9326a53422f9642031b69ff45e6a826d18e4241b5214231f7d252d4c640386a17c2a1839ba9c5a34e94b2b8f30fb259fa752339f134e54375a9a4f3a5dbd5f3fb93c38b59fc33a77dbdea9b8fab7c209e6f403d188958b5fa5481bd225b266bee6761132104890c8c25f04583084eb01c266ccbca401617120c61a388cc683fdd5d195c8dcd48f4d1a9be80c07727f78a10cd26359c8dd1d87614f8acac1506c5bba79b30c0af745c872433f17e8a52a94e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d1f5b3ada8d4507a7447829f26764b9f794ccb4c287870b5c5aac649f9272fbbe22f064cb75e5b3813bf874c6977dc286ef1deddeee1a84a9302fbbc9c8f86ec45eed5469bb85eed8618efdaf29ea4bc0a9cd0c0be71e82bdab6f15a9f7a637f297e0b5ad4c7885bd27b89f4a52452f0176df3d266f9c13fc44d3fcc3e71e3cc5ede3fe2555ff2bf2b72a2198af709e29c2f6f5ce44997c02ea7aebc9a33d0c609ff0f586e753e585ee5052a0bf2f71247cf43ac244818c84347662338384d6c1a4c9b9ebc14f912db688e658d453bb2082c8def4c440a6b25e03ea4459c1c9bd5495e2ce9343439cbbf03affca63856cc50936d49cf2dcfc73679c9aa32e56"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848cb1f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92ffe544edeba2213ed7d54488432dcd7cc1c71fd958acdc56c41fbbc8f1c16b565b1595fd3b88c48ecce181f9cf6bcfef4636c2398ac06ef8088e14cbc97426a501c05aa71a54a3329aa53a4f259c3299756a429a7baa7a50f78da8012e4fc232eec623145388d37c41e6cfbdb1afaabe38e31db381022a428b353d2c7f374c58f10c551419b1c3bc455b6f66b75c26b5068861f8f96f3700ea37cbc0b4d3ff6603a1c6308409d040aebeac2a661f94940122acef1771d44c5cab2455535421451bb81d0656605f8df2d0ff29a07766092dff2fa20cf68ffee574bb4b2b0a3f828670fe93d2de100ff0c9443319ec7283c242a617eab3d445b655ba674687e0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57e8cc1dc00c07383d89a79b5c8e4f5bde2a2ba55a3c7201b3291c4d805b1b2eb36f8f326b542342da180abe508669bb6cc2dd54e327bc70c1e317ba93a0fd21e7fce22a0c597c7420d1d5602ac43d9348ba3eba561f250e301ab955b0dc33e4abde32946b9b3e86c8bf07a44646ca595960bb988fef04b2824967e9da8b0264f1da0659373935313a574b5380f0b54ce1bc0dde423bd3a54f6ae5fafa772a55c1c44eb6edffecf13e6e5e1edaf87a79e338577304141fbc44f0e9eeb286f553f879addd6e12e436fa3af51ad53a72f2679f0ed102d504ee08706fe111eaee49d880d1a0b91924b3b79968ed0f9bff446dac199ee89b158c074927d27b864498"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d8c3644e0e18da9d81ba3fd33436e4379d3c3fa8127b41f2eb901836b31a78f0954d3287d452887ee3a285701a920b0f6fb8da0e017c7bcbe59cb9bf5d5aacb1032cdc4ddd85492c0638519a4694f686e77305d138b9d3491460f408abb8abfd7e3622aff5a4a96b383ff87560e9be962aa4696be3668645e6a43b460b18c93af0578a8de3b4d2fc657376c7ec9a23c473a81ac57da1262b47204c13f5befc0ce2b4339b83999cbedafa334ddc73624eae8b7002c082d8ca7064b6963b443ae32b2a16fcdb4ad5e8c9b8073305ac4c14fe0c29514320d09b6e48ddea9f3e02cf3273f5cb5871a0bb81a935606b7fe56bebe410c5afea5a8af3c426b72cd291a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "563e94111eade9526d1f2e93da16ee171273291abfb90aeb94ae7b95f16395949ef3d3f0994852de035cebf8cd002b76579d0758325c6750ffc917be419174d255a2b798ce287f6240a97d4fcae47e88308658898ce37407e9684caca197c46ec9f66a0ba4e8aecf6a7ae749304fddf1ec4155a17de5d01117a3cbf2a34fa77d0556a39451b697c869e6fab3283541816bd6c7520b5eb0ee6b592a19331ffcccdcaa403f4f25e732a847ff260ec40ecfb52abc6f65f95d21715acd2c0dadb23d7e1c0fa8cac3e60c6f19b430f9c252ce1f392cd2f7bc87a4be0a4dc0b7f909afa7c25ed1b5be611bf86a648592786385f02c345eaedd03c4b0bb5bb758254d9d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "09a166092799e0dcc9b4e758223012162cc0d8560b77833412c1bd37c8b0ee5260fd79e25a5dd1fa6a78134b26c85b4643f8992a933990f1505d0309bdea2bc41418e32f9966163730d805fa688e93f3aa5a8f01dc1095556b612218932ee15f72cb6033d3cdfb44d67fe53abf255180a521f7d5392c3b0ea864c4daed26ce9003f1b62cfa8333ca201a5ab3b78958a4b706a45763152e2b7b7006991ea80a7f06aa1b7ed23e72a9ea0f4d987588189124647318bee2a7f0a420a21d5c7763b50d2f1ffc6a3d692c840fe6004707a9990c29bb0e069b03702a8d25f4d4f54b9568a7ff96d078d9c2ad9b51b625b968893c66b92d96031d4a10a95b98bbcdeaeb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1591ae743c58ceb723a76f502e21ff6a65c24cabf5f527bab5a6f2a69f20c776fd2251e43ad22e09b1486ceb1935b2dc2ade95e233f296cc0e5a8af8109659be76b6bfdf37e14837fd6c34bfed1f19ec9d21f974b984fe4d4773896ebcc7fb862fd641cd0d77178485c70c2d68b4d9be1d863f6f254b77991fc9053f5d5415d1aa74ba9067e2e6607fb651638c9cc0430a40c9b691977b557a31d95a290a95b56ef2ec8e4313686a9c5ef48235912b210fdd2c50aafac28131104c795c42ae75810b0284b2d257e81ecac4240622ebc261ab8bceeeebe80f1cfa70f18d782aebb97d803ea3a895be541be6941df103eaaabd870848bfaf58cdaf6cecdd5a10bf"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "6f2f650ac10d5aa2c16703f657233da8c035da67a6e9e950dfd0391399da3a86ca7837dd7cf23e864d9cfca1fe77dae45a01ba21d23dd918ca7bba094aae376100198f59834396ec942fcffdd7d6a44953f69bc60291b1eed5921a0434d8b8953beb9d1e1b15fdca7090fa5c646847c0b759e94f056911ad188d4b0cc399c8c345757d5022f1a38926de0cbda8648a7affd9f031262b1079a3681d58249186fec4f6e98bf151c9b680a46b88dada9b42cca365cf908ed0501cd21e02a5bc4c0675f23ece50987b703499eeb94b6c40b5cdf22299776fe30800f887a1dfff18cd8a7da8c2388060dcb78c925c54b4e620cd3fe7546accfb3bbae9de08ba886009"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "37487b948dac95a1e57bf1ac40888b8e074cf9db9c9825e7b7267d3b105a8c67cb9b33c0e5fd641836798f41b8b1f024b13243da4fa5e527098337e5cac41e0523a28fb135ae060e7c1e4eb9556222bc43bf1659f65a2a2db108ac9b7c9942a5658fcbca5622c115e34ead883ea4ef03f7f62990f282fa791b04489053771329a482467cba8a13ad98f27ff7b61c24a452e085d432130b7259e59b2866e55320119b21e3c706f3596ec174517c43cdbe957e012b573961b1fa925373945ab3209a1007d197e1e9301dd0afa485acf6643ba0587a69f7c44bdf1e53c32f05a3b96db0c462509c292d7de09a6c78ebf1131453d37ab037176011296730f57cda97"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "241a3a7569210a47b83125fb67039a68d9859b971a49af62bfd4bde01e3b955ab166bba5165657fbfa519573027ef1a0f40cf7533f941d64e09fcfcc35cdd564c1ee0823166dfc054ed93e01c5831c036920335d8b8daa32220dd5c0b6a071f08d19411c6418aaa9883375587b19f0720e79f184535d7ed8c5360e667ade541c1ddbf9c0629255d8d286eae8defd34f000a3be1fa7fea65a4cd4f64b11c641806fa57d67b4c6b7b49892f38dc5d13abdabfaa6cb91ed6022d4fb467cdb6046b13fcc8142a97bc34eddd045796f4e19b1885d04c51f53e5bc0c272678990aea50a124274cdf048ecdb7074ca86f36841a7ade80a8aec6a653a0292c82a1b5c678"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "484d71be451d1f3667e01f3e7f1a80db9764f751ca87ffc6352953a773f6519e8a0f210d6d43b417670d9c0ce3c11a668cc83394a5e2d7bcd4ae98e50ed26c0ab66b41ad2e28fa703f2da04db0963875842d90a77899642dc297cf37a76fdb007a990c5b7af83e264be9323149fb680acb69a19e0c5aa949c2094e0a18abfa1b199b73363654638d86f9abe73a678ff0a41f6b702b70ea1aedb287add79b9a7f4a97535d0db46c05983072481dbe43fe6dfe33229ca1aec42e19afeb5bd35f1e44264c1fc6c18fddc95fadf1b1676f185e5b55f9a2bfe6b6d40289f240633513828a7b967748bbf0ccd1d3fb9f6240f31790a789d8c709c278ddbb0f706778b5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f27e0fafc57629ccc0432827187766a30537e821a2fcd5f1088100d4d8b6a6a9ce950f51102e3b55167d4b49e0b6a306e0fdf90837d0630859093e90a94fa564b7a4a82f4ccb772377e07a2b5a6873d98bf665c92df1ce7cbdb583cda83947b3c9c3df5b3807b470f23f8d08df9fba78e13d6b635f9f59d2d4baa34831dc6c3e5a29695645b1ed50f3a3389e9e119de765e6d7daaff0b454eadd10f445e402bf3cf4d14f4d16c2d9e4fb5571cea7929d53019d414d118e82d491bf3fb3bd7427abd6eb48a0ed277221c42840eaa1fd5e7ce658f7763099c1d59431e498cb58357a659aea8e181ec0fb5ad8a55d1c0f129500a25b85cbcc8733fa3dfa9ea30a4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "006e3f343b22fbf5cce816efbfe06636c1619632665591f9b1fd2bd0aaac9a0f776c501d7a232fd2edcc12ac63b3b56aa12ae87982c1997e5ac5fd50f6a5c350e6e84fc17d2149547babc4830f8c2eef1885e4bfb15c9b73322b693ea74eabf43e5050c477c0e75ecf75cfe487f41f4a2df4972a16e0580d57946d504fb073f23ea691086e5bc40e2b2e1dd653f2ab201ad609fd06983a5cebb98678c039150563f6c944bd6558b422de25b9720887d97ef63b34cdee0139391c48558941ba94bdc0c22e605dd9cae669406c3ddb361787ec6437c87a688b0c64f0290b1bc0ce17466592a48b83b27f0442bdb15ef753ad56eaabeb08bb3b7ace7f9620fea113"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "838d0ad34f2393aec53682ed48f937a458a32216a74dcc4a1e591a538119c3b56cad78b1c4b722948373c51c04a50e46fb5f3034f43c5d260364617e6f03af7d75d66baf3dfa1ca94e75e77d304c63ea5015cdd7fb1e1cdfbd6b5ebef2b2addf697f14c97cf9b5cbb1bab7f612b3a428d32cefbb788bdb70729e53d5b8cd14f586aa2b9410bbae2d093bd11f491469479eb640847514d72269cddab484d882aaa9761839aca9851b3d409211de83df742674d6305cc3a71143fa5077bce9d3c8da1f6da0df5c271f048ba589e5c34a23ef12747299d9dc4299589364f2137ace59781e3f01011ae145a5e1af20c74516e0b56d729e49b3de310c197e7a760efa"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6b19a03c774e1c3c24ea889b552e99fe0068a6cda022d5ccb6d75a447cfa0b16b5b144208dd407e440230ffaad4f12a0746da108dab5d4f162bdc9b24dc68a2e9e077ef5702472c4ceaa89c29cac41b4782b92f6c87e014df2483580cadf2b455f823fe12c9c79a155ea32a9f1ed120fe0f13b10ab4792fd94b99e0aa6ffd27c04ef7088e3cb935436529650894fee6b5b78e0bb5aa59ee7bbb2fb46af784e2c33eb76a12cdd7d0087a081d82d3e466a381dd37d25d3b4a92756723cb1f1f49d0481d12baa21ff77c0291f902682226d99d77d36bfe58d1825988c97d9d00e15ab48c9919583fd60593fa93ab1ca8e7dabaa912f6535bbb05e82bbfaa8537b0e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "682673d7c98ae70039e9f259275c884da7c77136e06d47e8af72f82a09614a08ed125c6d3a80f701a61dc2ad967e9637662bf40b48543e5b620daf37e3088d2a54a8c5147ef99227cd5cfd0a478d1fd1ec62c495cb89046df756908621099913aa4142c3dba2a62de6a8899f0acc7932e33581d4102020423a99876777c59292d597428f50b846a39d709d38c3a842f9a9531f26dc2a11f518950eee92560fb6b6667a113237a3e6d7bdae48bafc90a76a6839b97e6301e546f5b136ff23d662593f74920dccb56d47fea557adca4b36820469425cdd4071ade7c5c14f365ba4e0da97cdd62cec66fdc724d3f309b6297c1c84091a74d656b4b030787df593b0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1452cef4f4e0d46ca8caf3a628074f7ed0acafd0a16c4c4c423cd361cd61319d5e912b162bb2b7326e56e20d5f9814d6339e0cc44da9ba1be28e473880b6276a86b8cdfd91d2f5fa830024b842834bcf2d425c48b5a58464b7a3111f55ade2d3b9cdb958392efd559f6b6136cd158e157faa4b7ee86a3457dcdbd877b82d53c23d6e71488e554574b78f0be72da8d4160aee680ce485f9fa544562a12a89328560a773ff25138decf4200e2558e3b5a364a4372cd1f64fb25887b8c2b3938aca10d8727535d0eb0b73af2b7ad70656f97c5c1a97d3e2c2d1cd2732c5fe8fdc5ba6f554bd5190a54742313a6175db2a77d36d24934dc056d66cc6bd83abac61e0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f5ab041e87b74c0ffa6f5b0a4c5ec8d0ee3d2357a0fd2face275dbc6b50a230f2108b4b37fa45d5bb1211fb26b96d315cec9391d198ad7713faf3c4fb60806cbe6378c7a08c2e75a67848ca98c80a02680650eda98ff0c818f1e7af9ff3a3236150699a4c900c394c2a00ea65b39fea873504898c6fced5e4520bf3d69a11debd3e66ad681b7d03bbca940fbc809f03f99079d0f24f31cdc76afab73ec0b4f5baff4437b0a304a8893cf593bcf47b2f63a401f1b456f1741b3b3641e3154e6f4bc035723fc3532ee22d4f65a3963c1b278c1a9a8ce7e04876e8c327a70463e3785b9a5aa5b4a50cb4e35d92085172a61cc5407af2752a59d06b58a242926328"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "83d3f4b18d2653189572e75e9b4464292ca649591a82b1569ce13838c245da67371b1ea78e4215eba8de713411ff060a980405f0bad99546989153017a380f9c7b566500fdd5a15830eb0c5f4723e341391268933a41311e9832b340efbc2cffb4baa9c5dd47783eac81a41e3d6336572d38b034dfe5ef4b94e5c3f903cf3e8e0a3c2c59cfd13f99f696b0fbfe71368cda5a1d28bad1af3c8976e3f6c1bac08707d2684f6d55c2ed4b433c9efde91b206e0842e534be7e88fa219763b960d9d5a43a479990aa9732661693b9e4da89a7bb5dda878ae43f5e1a11944f7a5c6efad600ddd13a148c1fc8fd2574b9667342c73f2a8b96511a5f75cb1ce486b9df81"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "31ce7ca597f76ab95d47563f728ff93bf43d9864e5bd1229b824ae26b5a13c79f6f7957217b37e1af0537fea81616187ff08a0d5c98a92da8dba61bc5c14da3321fd1146d83c2cbd0ec0687d81f6d7349f5a0cab0840e22cbfa83f02a79d321ff88830d47d4842c0b032c27a181ac06a42cd0bfedaf75f2daa53f64eacb5986545bcf150b8d433e66b698f2553f9da259bec319d8c0cec05d9c320e7300463d41eb077028c1e0a7d6d87d4dddf54c5b78d6a15e4527e37110b9b9ad2f3b2dd0db591227d41cc9f26f2349581dd89e0ba639d0cf9f8c86fe819dbadc688522b58d7284caabf843e7143395255e9a0d710ffbef6ad13f6a9361e20d2f6f5a414f5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5798785187910703680cb2109f492c3f0a91b4a8f11d3da775aba891eedec3d76fd30a939f5d7a2baf7290c573e886cec8ecec0b1598f2cd169d53b4abf8accc09709187f32a12c80fdb42ed98d9e98b0923828f0e38acc338234f7b7a0ee377644a655f48816ea4a5bff0f6d63c3945dc3aaf921e9404864594bc323c1f3ef42f9361ed6cb8fcff2994293e17865e2fad2d885277251fa24d7e7aacebc48d61c3b48047dd7c99826b3105d2f820cd62404cad5d758da461af67677e39e55086d8fa52ea0334bc3b77f95191ffacd28ead07a34e4672577c4c65b5bb9d5f9cab6e1f1242216291b69a0c98714452f01f37722ff26589734cf6020c5ac9196374"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3747c7c116cf30567e24fd4213c126ec84366a26eb304a65d144dd9b453054df4e5036c861b5807137934b1cef351411e40654bae5df6fbe3c42d763407f273d3dbe059fc6412a366775603e064b1561a58e70860edf954dbe666f8fe44f44f87df3b0e3f3e19c904966ada52f00806f975f256d4a855cee973e20f33c31f9f2b3792fcf326f075f86f275d8ef8df2dd0abac83d491d485fc167cd40f3802f66036df4fd64fc441ac8a25b405d5ef960127623c269ca836671a66a6bf2f39c0792dade17564d31863c7e0161ee0bb88522ac0c9054bebcedb603a2d18ddb0f64a91ca5a2f0086afd0d8c07cb0c1e7f24d12f866cdcde46d663c1d4dc7f7c6f62"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1377d4997c03d885e4b95f0350b1c8091a4d9beef9533dc6abd194a1439c383622b9dca5a49da247cd55c02186829f695ebb007ef0535c4757baad057d7bf76dcfe37cb9181b0c290db16d0abc51ff32d03b6a8e56ecd270dac231c81e50c7e0203d22b991291fec650b9904b2539a8a330172843bcff0cf46f06e32f55bec1f5a734e70ec8e4e8883e3c22eab7561d9c76737025352b5c9fa9c76eaacb909d23d0d7d7b6f1094ccec8ba94f149f81946faedb39ac557cc28817c9114a89a6f720d849f90cb23ad202ed4682036b3cb70b6fd5df0225900eaec7a21e39fd433d3200aed4bb4abc3b531393fa462fbc920c918f1938d33ca86e7ca3bbf1d34d74"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d0f3cebb4372569e8f02df9f42222151cc31659df8d5078e9ee8e91030735d27e66da8c87039a27ac28588e8431d7ad1583534e8570318cbb2554c07016bfb02fe59af00576b7908286f4b27e36f768a118c3f3a1ceaeffee03a1b67270c3e489cce5c5f1171e0a8734553403047faff680dbcd70bf0fc1f0f4461bd4e68c6c0978da3490a137ddd8f62bd79c6a1daf70f7a9a3e90056ccd41c62f04915bf128f74dabcc47cba85b0fae47a04da32e17799ca150814d27793816e6a198390c35d1f35abf6816761a5ff0c28b1e60eeed244b1f24934174a1d2c469475f3eb8842eb9f5c6224386994aff9579f26ea7d73c668a113ef7dee8b2bda576135d452"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "53f2db262358c21792eca635806ea1c1ad041d9334e977a25c1de0fc8233ec6f01737adcf1fb4dbedbd0078406ecad921e37c77d4585b5eb5ecc74c07ada1864a3c13acaba9372f852aef55ff2dc42c0aaef74bb656b8e0beccb7b9eae587fdf3b52eb678af1032e60ad12321c9c10c445448df523856ad262208a06b8817ee229df825f080a72d5e1a43f222215824a8ea6d455c80b2563c65be1eaa0455714ae576ae67e46d006934cf0c137b8c9900af9ed716391ce96ec43296e83a5a10390ed91f2e6753ed0254f0290ad899462b3b7af42c3c5f0893863a3b5e6052d3a6dee554746960a07fb6ecdf781e47b96023ba01cfde4c7214611a1be5735e2fd"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "11e8938238a20f0e6947015987380dfd88a1661606bd05bbe4298f4746e81e3bbf34aeceba5360f1839ee0d7d7fe3e578cacc2d24b15eefe2064edb1fd04ff9a44c0a600ebf00f64fbb1ead4246e5ffbad0c22441ed073462f26e30b61a0a9142b4f993d1b26fa32e11382da33b9eb5855cef6736bec2f4f5bc6bf82fdf7da62346a4d9696c53e1cfa789667b721f32f7779daf7df85474096a9e9a7291afc76df3a66c7a0b997b41bfb71fedbdb4e65095efe1a81d35b66be55432e0a6e33905475b46a94e05bce7fee84645f500d8ebd7c0282c35f22774e7089262210f83ed485cd2b045acd5d62b4bb53dcbeb2588dc6535518189cb0220a7c9406e454d6"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39a8e947c919ecfad7ee28bb708c1f9e825036374ea0f610bf5531d89b813d506fd00bdc15850b250ac50fc556a676c894fb641dc650999eb6239b91e2c755126bbb9fef5783a5ab834e0ad91c60e720e80e096c091167a2a1dae838a16fe0ebaa8efb3573c89ac5d8e0584b5ec4e2168ef097f937ef0f0d2a2f964a8e6a810dd15b9c27b234d788af3c4f54dc97035657ff19f2835555dbafd02c4ed3c76654fa868babb71534bfe84674eeddbfc2b27a517f666bd03a27d8173bb92826a231cd9a241c171445b416934ebec5f7eea4fb41a61937d9a98f61b2fd1ca8e2be125e85cc8d16d553b114ab72395e86fea52f54edd853e9c5156557e38f621b975a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9c13d877ac2bd8c02c11e29ffcc0c1046dbc9870177e843c30b499c2bf7fd09daa43469caf2b8c3e955ded95e4d62209f7571bb45593f4cd8b0c7bc9470a8a693837248b5a7854dc8e37e752d949479272642994182061d7af80b0ac6f6e984874c8cdc6a5d7d17dc9e9de5ad12120cdb9f6c0d09c0e11b87b3423e37ba9437a4f76cc1e6124579e5f79832b89710de1968ce46e3e69fa185c0a924e8cb5f996ee5963f6826dd37714de264d75545e8509caf8735330cde7ed4228e5779471827b83757c466022117c45d598f5a4a7fed7be4e1b4d320f894879061a75d1a41efd8dcaf3c61733ed8ca2cc2f83714f8fdbc7a97cd6d6b97ea3d36ebd69890633"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00566c95524ad0995eda7d668fa08e8f75bea868b60972d6488cbe8939bbde68fa5206e671f35555f628fa707ce7ba0f468cfa8b9737e0ef64e0e23c901e4965ccaaeefa9b84363a3037cf5f9e044e295fe57f32c1125ca70c639b22732aa4c4b3e5562690bc1d7e7e74dd01c674212dcb63c58fa23333d45e1e4ccffa5d186443cc785c5ece3f2d7a8995e25de6a171cbc960c272c2899f6f87ceadb72eea1be085245669ac08993591e72bb9aff8bc29388b35c99f1ba7477af9d16754894a50d4caea4bc80e2aef2ced27f4a1c88be284bbb40cb8ae279b4e38a4cd8a51a92a279a799b3316c2938e1386043ae7ab1d8605cd310d7239c805a07a19c7b17d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b46a0aab5f573e32ffbcb411cd99d2f90aa9b1abbc600b0cda0d824f79020aab47a2494caea20fc93017e77b99eb73a1f8a550b611e2747ad29207772629c2ec40918c07adef1c90c99a15cddb9eac88955b4093a9e743d2420b4647e167bff8ddb07ce197db89d8a7d3f327058a41cc459ed4f6d5d23dfc015479d95e195da37f5b1fc318a3f74a0ac5fe2b9569c7fd99b8eb3ed3967a5eda1d246a3b225548f67ff860202033e7164d4b99dcf95f4232d18a7913f7258a33179133a6fb4ab5a4937b642eacb92908cf79495745abc583524cb0236fbfadd2c7e8b0a6597017912b4737fc01432625a508355869670bef25d32afe6753c38cfd96ec38953fb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3b65975357ab2a410c2fae7f2f0381e6c40951260451f2eff05f0dc707abd013a996fc10658a6963f462877a808f61ad0362b9f640750b19debf3d59692134e357a49ed3693f50924b7c8a1824ccafcb4b93f7679dd892823cd479895d41fd1c40fb89fb1da19bc1fdc72eb038782f24ba3326428cfb166a475a9fd27f94d1a0ca6fa0e6a0d2c2883db3eeb2c0a59474da36211695fb811b9e8bc7f05ccb1f50d26d71a2dd209b0d269a736610c7dc1f7343a4736fa2b8c27827dfcad49bc4a86822cde1579dfbd646474f11e1a60f5e4ac2f2a3a5421a7baa9dea5d24be03cb6fee771dd808b67f886b37be5a300f6551d7e7636e9997b3255ceed5187ebcc0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4516c8a39b8544d1c65d96472fea0b2753060330e76e6f90f41ab349953d26ab1b95fd87484535b68c0afcf1542a9b966a9bf98b89a53bb28877b34d168a4ba8201215c55f9e86d30b7159093517682e6e956078947e54e3f3a779da032af7dc6bcab1c0b2a6693fe0eeb9de0d158bcc125293a6f10ccaf1499b6ad912ed5912537e3c3c5f18eb0ab8e701056d7b973b8b61af918858b87152b6c40671bf96735ab1a112972346e771e7cd9482f6f59d320b8798a271cf21779747f964281afa1303142eb3e1841772de825b4b5e68024dea014193c4e1c206bdc6121a8f2d41837be3d13833ed615d5b9df4ac4c86cd25344fe1022df0adabfe2d46f7d9f0d0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "675ee6980d92ab6d27c29fbb88a6b913cb0a42ba4f2bdfa35808166c454e708cd1e1a7e30d8e0e4e814ef107afc5d0d0e1831bccdc8092995c156a8d247b26aa0c14538423e4804be22fd2140c143515fb9abc828a7565e8bbb984d8cfd21fa2e5a897074437daf0324d18d2b2643d667a2fc4f286bf60c3e7d53e4a3f2f3fb1030098c673c19a8b4660fd934e702c0fa8a8aff154f6ee19afc7ea6cc7675002b9bf73f05c02944aecdd5f3c371f1a13c1d5f3128d2a754782958a05b341d185c1d6ff50ca68764b8966ddb089d4c66bd1d7afdeb01fd0fc7b46df3355c8db6c33dcbd125fee54eea860a94ccadfe789548256eb36ca481247719278299f560600"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000068caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c6d36"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "68caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c6d360000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000068caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1758eb94588e6fc4f50c1be1afcaa41027869f304cad513b1fb12c2f446d63cdc05c4830a7e3e630da7b2da4f7867cc173bf6420f9732277282596de41ded32e21d0cc31441174da8765f57419c7764ea758f55bc17646eb100c435d1ac0eed6fc7ba6de5f832094ee2f479979765e05ac9976788db3c241a9e32a0da864f0019a87646ba623d63f4411af5dee1be9ec488c7e3e1b231479de70b9ac5f78a17b1f4120aece45f26c07e7bb345fdfeb05e14bcaacc614672a465fc523624cb19f66f9c6c3f642b832ca44cb25176d679f0e05606c3fed022cac24c2bf960a406d48818e3eb7ed53b0446032469047dfed95fc18088c92d91d93722c47f88163a8"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_2048_sha256_mgf1_32_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_3072_sha256_mgf1_32_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_3072_sha256_mgf1_32_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1203"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(32U);
            {
                auto m = ""_hex;
                auto s = "b520065682633ba54c9b713b2ef19cdc1fcf275ba1744c2350da7307a20971cc30eefa37d1667d23d20001a674f0e00df4f9b9e1d5fe7eb85cc45cab5dd625759de83017995c93d48b126df03aa74ef87daea0c1652dd370ad5d663598a383cac217a208b22c7cf0e448cc7ae0555f892ccb8ded6894cfb0c328cb542be0485d860ca77203081f3b04c6f55c5689b1a66b1c24819a4a7ea55f32e00f61accf4b411bb320a96c990173b63ccd74e7da7df5ceaf33a39a8acb89a845a594b164ec6e22cce940eb06f2d487a8bc4574451878c2bbf57d241f76586e0703bf5f86bee832d05b75fabaed6accadfc1ec2cd6e619dbb29b65d6e6f5e118ad52d82a955d21005ecd63fb382f32bb8e2e1e57220b345cd6422bdd84a91495d0ab5775b08139edee960dab1b4ffd9ea5b27398b58e6e35211c3581501e99bf5e3f17fd79381528d28a4927e28082f45bfa9519f98ea663dc84c50317adf0bd5da98b01459011cec61800534dd5afc5a567c19e4a400f06dee74112083b5322615c144ce3b"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "8e10f23f49011d761946b283d7152e851ee76e5caa1741b0901eea317d8945f2a0368551b3f2b3a6a0d6a939aebded8fea0a96dd1d037be33b1c35ce78dc89693918a99d547a1d892f4047c09fff7a6523acb0cb0cddebcd4a6fdcc309a466ca9580fedf032bf56154f8d79d5c4686abfd2c7abd342b37e5373b59a07fa865b118c44f2c44b851306dc97eaeeb638f14bafbb09c81996beabaaec28c19f06ffd59dbe3080e0124e2386418052735f541d496322c03ebee6e4dcaba24dde9772a9f079973df26e854c255eb48df50c01d49831e54b64d0ff862d03fb4d82ff204d303b537176c50ea56761a83d0aed8ed2deecbbba981c8aacd1300051a864d1efdc897f31383ccd6f181bf976a75e7a7613b60b3cb2a6f7ab8636f672990c13017f2981c11ba36096cbea898f016c581ee859e950bec195cc4e376e134341b2fd3e3d6181ba4d377b2aab6a148c6ea8cca9ee3478297e901856ab18f61c0233c899841e5da125516cf5274dc1b22e2a51c922daeeccfad0f2a8bf84e531bc4f8"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "54657374"_hex;
                s = "22915cfa1d7dd30f50b4c0e4cee42c5f0aa1b7a6644f8a11e611b2db042b122af8211ffc1dc220b435d8919cf64d715b54ff8a762f702b365cbdab455509b97d9b310011467d4186647b957e2efa404aed3b84840529bdef7746348385a1c6a2ecdb88d1cc2b40b36c346386739c39d2815938e463a35348426f17d32d633b873d6124d8b49a726743af7c0e56d63394155b63089c63ed8897f8af2a2260d33499afab11c911faa754ced5acdac2de571f39c2768716e4308244a99d1e65da7061d2feb8ec8b4e517bd5e19cac626698479ab2019257cf83ad7b641db2345b38006d63f84b41772b90037778389cc30ed6aba6af212d9326792af746d7bca9211fa344fdc2798a490aed3a2840620c2a85e3d9b9c38f2330072663e16dd26bc414c7d68f6b11d2cd3e0387c1834c5e2262a9e2dc1bf7c0108b4e2052566c7a941ef6b38c8687fd7abe6add2b745c2c2d680ae3e5646ce2e717ef9899c7f3fb1e3088e8c0587d86546f752771819595a7a3d422820ceaa12e3ee671a456dac673"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8f9ac1354af4161d0e55b5674821d02823b3a6b3f79cefb98cbc77f9ac2d91cc6345f989a7828132f73f3630a247a936b6a057b3e5a2fda0c5999ea7721ee8880960c24cd2377e869cca1799747142d57ad6a8d83ec9254d89f591add11a758e1ea1e29bd08f624d0e28cea52ed5eed7c0f5f49d3533eb1cdbb2af837dc42942f9a86b5f4e2d5ce506697ef067a344949bdd89afcc25978af4d50c300bcd0ffc9d93cc559e3ae1a13215a1d3f6030827340c6591061a5ab7e65153b1df8b25e1421f924d39c7e6f76243c1bb9ae4063d9a475cd2ece45f4e288fe0720074e87868d70a5584a9ac2b47a56417cc76f15154315545a3ed6704b365f15d34320804469c3b09ed211cbc9e9e767b6f21fa16f8641d8b78b8dff8062a25b5bd3b6a38cb4706c42c1fbbe66db1c05cb57531132eb94fe1569735c33ec491c318a686c837ac810be4afff605f92bb390e7ab3cd24c0cd997cf13f112e5aa01746f43902432639e1eefcbd37b413c586f057bcba40a8f1251251e84cb7c87c53c1d1d558"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "6e471c9342aaa27bddf64b02e8805611a13770b22cc3d24cdfa9a2fc14865f59344c288cf15d4c8785089968a12e9d3e63b8179489568743448f698f316640146322ef3b611fc98396cf4a4757e48ce6701f123fc0bb8df80b63cd2371522f8ed929f7bdb709d424af6eab2eab212b43afe537fec7bbb9dd02e64f116e02ad1214ae931a6fe28a5982029088a27bb95ef2ee46ad212083719327acab5ee51c82d94d5b14f6dffd2242ddf9fbbb2d03f945796a3e35346f2334ca6b4ec5d9ed6f1584688e661951e948cb95fc5cc04e90cad98c861ddff514c60275650ae3003185efe0c04356b07f361f7dc7e17c5de479cbf119c2910aaffa032aaa81ec9eb9f7e1ad21a410ffce2502e4829404d01ae090ef289bc28c9c3f37d3fcae33e1523b3c9b81e301f51d046196fc15c90d58bd35a1fb11fa04621b32cb61e718a434a0aaefcb676cbca888554d1e84d43b108fc1cb123cd2d300da630fb77a3ce29a0f53af32a5ce81c5ad772a199d1180a9e2f090847cd87ddf7b39aeec89a6b492"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "61"_hex;
                s = "39f7dc9010bf3c200df551499404ca40346e58ce0c56271e2eb7835187ae57a7b9a0688c9b088ad85e128f56c0299c437a1a9a9104f3f51aab7043d5714963e46ace5d8e435fd3e416dd61474e9dcac3ffa6c3f0ebc4ada987c4313ec36f2c43d2dc749e496fbfad639dc811304388990b98cf10ff616a866bf5d98cd5199bb74704ae4ef365424130738b9d81f893a5e2316ee6daea185c170f69ebd2ad455b56676ebda9d0bb0bf4d3357475ed8166a3d2dfe6e093c3a4bc5bc2fc2275e6779d809107b621138fc629a6767d5809c85bf88b46b14a8e4ee9e310db746f4c0a79a3d36f6e305125642dbf823474fb913a9967a6d120e82a79ace48c501fed8dd6edb9634df909fe6775f8f6fc5b79f5881e1f13b7cde37c7c3f97319cd612f8ad2b1ac921079f18213e5facba0b83c17887e69501a6d2eb37661f03590af1a15646165eb785f467cad0c625947e8a8a4a68f8938077d5ef7f1b8b4da0d09ad5874bcb22ccc4ee36b9341b974a51a1d6ca009ded4ace9faa99d924a23421aabb"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "ae8472e987806e5110beae330056ff974abfce7ea9927979cdd14346747414cdce06a9c78eb1846c75dc288d7da531531da49ba7651d3a1f79e3297fe37aa73e075cfe5ac004b166526cba55f914e0d2fb1f12a60a3222dac434fa378c2e7b0ea9c2cb5e22cc343ea624ad6cf5545a61364cd67d6dc23d22e4888a253e940ff0e0ce0207c1feedccdfa10f50d2363bdbdf10893e3967d7555fba157f9a450d6bbe63ff31777bdfd402afa72c3a2181e5cc025443cec30d253653db7e82eb7dd488e6491fd25001723eae2e3106c7b50c2b73c142a4a31ec43edc9ec9011383c99a095b36258a0a77aac2af19b26af8a166b130f7f57f03a0e8007d5ac0eea9ecbe14fb7885538a22c13de5771bfdf523fef9c9b5f52ebc2af7902a0baf2a33923b0d0622b8fd5c938214aea4b9e7f0a647c5520c3a94a29737b95cc623f20bba8eaa3e9db60116fe1760d9b7ac1841e7586aec9708212a5bef2ff67c74462883062e052ab9fd90ffca0f0a6166b71a93bd289a1d4acd2d6ce72ae0b91cdde72e"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343236343739373234"_hex;
                s = "5ce99063bb6c6bf8e46772e8701b63abb2feb5f88c5b76b76c00c719402ccb399d6c6d8c67ed5b6fb0f1dfeb8f8dcc5bae03ad57c1b0f53033dd2503b9604fdc40eba51e4b03c91a8d12b1a3b929b1ff1e8e79cb58d788114d53f7e07d87a885f6dd4d26560583986f7a84dc466ba981db06beddb1fa80b0a444b9a56c82f98a927977da9fa1ca83aebaf2c43692cef61b12995d8dd0f3bd6bf061025ddd34af3e0257203390a80765ef706acf7df6f43210a7928673d260f2f3c30a9bba9b08735dd9aa3ff2fc27a2ee9e130c88ba367c3d1428f173ea08e273886bc153c11e24b05cdbf9b00573b013170417fd96b0106f72c073f1216ba872eccc9f56ff9e3e08bfde64041d996b117a114b723cd97f70e07068ece643f58d5ee5cadca7e24a18b0a66ab724fb653a01c5749d51d4bf5408d2d2008b30eb3dc20b0e14510c06402f789276b6237802d608ab49378001ed6f3604abca038e3c7e057d95e85c9e668f397bcce18765132142d6b0f118c511e57defcb316fe41dec06b988d911"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37313338363834383931"_hex;
                s = "a7e0ad7ec64a600e37b70dcaba9036bb3ea95508c961668c4e051c8f3faa454496ce6c009ae9cfeaa2c194c5c9278e46b75bab40c52f077a4fea175b2679121d30b706139cde7ab571c89f4d19abe07c67c70afd3e4c2c05d60c92bb2a639ba389826088899605f1707ecacd88e42491debc78295b44f4e09791f9d541823ad5c48952bd3151ef98ace7e251d12ebcc9370bc205a1688c9a5e9190cd082da1ae94f22eb2b0b46b2a5eb2273b0b324215de187d685471a07f673d43e58f36c1e0f074765dc59c1ebce449229361d07522c7f03f27eda57ab8bc89ac683d27ff4f95a328892507952f14d9e3d8643d805c327eef8bdf13ab7e6634a103fe92cbe9e7b00f9bdf8efa740866c044735799d59245aafb8d04e8bd55b66fea31c9fce4cedd4abe68444fc8a6dd550c3c8f1d6597bde001fb977b7802e0263b7319ad7a6c1c4a6c558774641b204b6d3eb2a2aeedbf4a38de6584031102a1958fab6fbea9976793bd1ea6c9aeaafe81515b954c7615f8c45538f40a22adf0ce6f2c977d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130333539333331363638"_hex;
                s = "6c60107dd182d5cbf4550e7a6e3a652f731503d8fafba3a7aa52e7ac93d4de4e03d911e058ade448285bb9c3452b60897c099fd4ba22ff4194eef1a3fcc3250cb9ae270c33ee767b2b4f18852612e27c4ab31d8ea6ccbf122a357a6d6e527191a36e0aa2aa925f68e158c8d5decfbf8484d16c2ce906826dc4773d59fd1a4032c2f576a1ae8374a13cc24abe15ac1403452ac7cd8a643dfe18c911ae34f773520fa94472c596dbd6f5b93227951ebbcbacf60b18e5a60330eba9bce0d8a732cfc27c7c0b9e22070670a165846d9d7e9b24dc6ee9759347f5c6320b63789d5ccbe9566d9f3c534e152f2686631a41aa85801a31a7f31cabf959cdc93755a3acdfcf0ddbbc5298e91fbbb2675565912e5fd95cd59b5744833222247aaaa5a5868da4d1d1af590b8633dfe6105e0a6abded2497ac7e46650432cbf0b784b9447770b20f75b2618fb7e6cc6fc5cadb022980f78943fa9f784e5f0c8fb5192239dbd3293a38e6dade27a07e08b54597029f92a8b29b700f842fda55aeb3e0dda79405"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33393439343031323135"_hex;
                s = "2264d276cce22aec8d109ced7a048ea44d627aee577f1117998316af911e98139085bc92f120827b304c4ca519743a33f7be05d8a49a28cd716ca65f6b976513b33a440b6e8ec5daeb85d6a5926dc5015a2d24d94ff1f87a073867bea137a7217254b9bd040273664c58d61e618ace6bc942c446401c721565f74fad5bf31475093752e3a67fb32231ec8d26649594f32c5d453f0baae51b20dcc24f0e5e82eee71d85aa77f33ab01cb588420cf672461c490db52dc2fdcc7a22ccb2b92fe8de0e3f8110c93e5890076db8292b76f6fe80ecf3120b4f3824f77e538551ecd435922c7d433f0467b445026d0371a49a73fb2ee900c094fcb8ecc4c01b330dde0561fcde6bf2dfb6d26f3c3d9b897342d8079e29226828a39d8fec96b53e060a771fee75b482b2e0e262069316bd50e8e210078ce56476f70f149bfb356fe1e490ea642ce85a8664e50d0b3f350806d9de3926c8b2d417facd926741022fafa2f7b10781397cf012697442ea742c11f23a5b5ef5fd10369207cca693fc8af57d22"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333434323933303739"_hex;
                s = "677dd6918bf4c96934e329a114002460d67d1e8f729eea9d2e8bae78f4442f1a480ff1e5d20c1bd81e61e5f92e5e42881cb1fc22bb7da3a4d21060bb23bb17c234a85c76f7591fb54ce0ef70ee7556905eb670830b9d10905d100f0c255b944689f23e1313b0448777c52ba80b767e07108818aa5131f8b75c84fd2d7b4035e0df9a213afa8cb913482ae0af76a997aaa0c8cb63975bf9c006d89fe4ea6ef035cdb4137103585b9d05150b086d7f329b70efcb428ddf76ca36d44af742326aa05039382af67216c12f7eb2dcf01595f3b78235341be0bf7ea30f6294239c7a4b1ead8f98bac805e88caeb482b13c5bc552329a47f1e26233cd24a3b4bfb6be6d9e3ae8e58f06c95b513ccd5c61685ad0aef627bebab0b72bca3bc374f49645e403bbeaa255b501dce3f1f46f9d74d1aac2f6ec5eedc5440e3dd9f264bcb1d98b855d1cc788d796919d014ae215dfe2361a1d13aa55a7163f4164cff38c5f62c00f59eb20efec26e0fcf66d37f12c7a9d23dde68f25620df1a4d5e5e55ca94634"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33373036323131373132"_hex;
                s = "ad825df96215ebac22f37e5948fdb2281bb7ca69fbd9ed6d3f4d2fb21cc6f9d07cf7779a264dd427a863f0cc36a812f125d6ed9bccf6c233ae8958299cfe645b17331131c32459377524326f2e9eb43124e2e2fb7a025e0ec3de6551b7ec0aff5d1b4c4c03e454efcd250a7c9711f21e71f6e347b5e7400cef50eed93426b43cd11cf55c34a9d6d1d54314b1f0869febf3b92b8db421c4fa000e98ab0f891120d7c0a91bf50e307fb2cafa596c800a05e6f42c577a02aa2169cdbebca14c41d10ee1bd415785d7594347f46e700f62bcaa5cd728025247f39c40edc0977015604e196fa30b1a49d84132469d1a870a57d272c98ed93d8645a7bb92a4476057bf2b134ca20e45da22cca2961fd52d65f840b07a87aa4ad104af67d7bbc53ea95016883e3ee087f39582b13e274df32aa419eabe12a9eeb08868425c0a1ad06798d0f7da987340313cd4254a4140a62f3bb1b76bf57a2c0712ef2105f4de0819f6c724e0a2d92f87683a2734bedb4fcecc75ff26291ad862fc3397a9f02e6eddf4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333433363838373132"_hex;
                s = "b3c301918f5d1becd6c88ef04f908509e9b62acd207cb0c03e968b56d4237b4a23cead6fa5a72ea6472af47ef3854766376bedaf67c14a7913d48a74aa6521f8ac814f01e3bcb073e3b85f315bf51468c28444231402a77cbebd0cbfc98b06fe925f5d59b4353c21abb324696bd5d402e7cc5435bccd8eec3eeb8e7e4b5d4f8f719adc00eae9180cb3cce9dd89231b637651a76d87c0311d0f9de0f7c9bd7f6485d7d600bbf105e1fc6d3744e83528fe761c2ab0fa0cd5c386d2ee44b0967ce2dac3abf1c723868569f43ae09f1a5ee32245b11569fb2dfff08f6f40c0cf45d2bc7fc524a82779328f850ffaedcd9de27db5e1bd372a76fb60fbbcf88a14a2d820647f660a894f5420c7246d9d9401ad56d577b56907d9fd3b69e35faa40000207d704087e3a7011cc343cc94f99ba653da6451485a9fc17bbad2688b511ee68cd90288e4f5e83ab742a54be006b51fd75e9ea3ad09ef7112f793b61d5470aa16255db34a8abd5963b53a940c890ce89f27b8f7e535489e965f33a4b9798c301"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333531353330333730"_hex;
                s = "602883fa2f9a6ca35437d377fffa5cf5a5643898763960c7722d5a5b808fdfb4a09a0cd3bbc8c5d2fc8a603229a5de18866aa0c5d88c2272784784c883918fcbf47ac62f5e7523d65d6ab486c68ca245199e1acad7f087b4e822669105f4f45a50c1a43722fbac7a9b88ef7bcbe5796ac9601a09d3fd6201c77ee09f591a9d37f48b3e93fb6ee5d9683d3ef4d581fb2ad9e5cb2896bacbd078952f9dd04540fbeeecf6d8d9fa45e791ccf3027130d1f1ec551fb35ebba6ff329c7d31c5bedd65303d56b58f826f38917b3f79d82b442f4668ad479b7e108e2e59d88640c1da8ecdf719156ddcad93d568d9593dfc7bf0bda2519454cd2b1dafefd556091a2a13ff80c75bbe9ddb04b1e55f7edccb8a0832ef03079564cc367cf5b696be4e193001d8c3bc5124227359c7616381a473b07f31d6494c062b2a9151420b828b830f250e66ec570e38bc44e26bb83d45c7f794a9460b4b6d746c888d084a754ac7d75ab1bff232be49dd1fb73efd76fbda26e6411b3b1de8671518f937b8ce3ba8c0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36353533323033313236"_hex;
                s = "b259676e6b9b49edc04cf3f6b06267a6af924d278c21f5994c2190d0cb667d641291361a8bfaee8236360a4dffbd5ec4f1f8d9f85b54c1bbe3c9dc35332443c2509f0ad7d5ec42571d755af814cc0ef48e514dc5342ca7653d535789c8c21fee5e547ac3c247c9be6b792199db48a17299b5f9d3bb9881ca95751132fac76d776ad02872279bd77dcb43b0cae7673e40907c1bc321e14637f224481f58b90f875cdc08c49515b4be482147fcf2e62126fe4c0310c0677eb7eccd9352a9cc0902b54e4b3454f3ffd69666d16469be958a54aad1d2a58eb561b4b222a4ca5edcb5612d03b8bd2f7f26302b51567b83fe1d59eeed36bd2ef128cf476ccbabe4eb55d8c4ec91a0bda8445972fb3d74a4bcee2ecf5e90f5bc19d4e9908e7aa284cdbc37d22ff4ea70479e8e2a9d2bf0a6f02b3a2d2643a34d7d4f93782df0607c806177f61963b60c08e4154a074e92b26c4f2c678c9da7cd9d16307c7309559a3935a8eff9593b5454a1cd60c388c995df971075c5397feb77f36ed8b9987b8ef3db"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353634333436363033"_hex;
                s = "57765fb30e12f08143d72d7a4232c91583d60afbd8dfe01c3b50d861140d3c5bd0a17c3a51dfad96d8ce0716348dc6f62c12c16bab5401a1fa90950e96801064dab2537a4cd0b5227708618ed2e34e2eab8a557a316a5a7c42b6b297cfa646cf8a90af59730fe5d34df9a2d4a9bb0d8bb1d8e5decffdda6f50863bde347c17ed88e232c4d3235b00ce5db088e514f3490f8d459eba993d31f99bb24a097c0e322454e6c68e6c9cb0042a8fe1a5897458d097ee68e5c79163f05ee0817499a98f2af038aaf02c488fad86ee0c157fbd1cfb91a17bc00971326d15e1c02ab440c46b07c807dad0822e2dce9505ea75dcea6ba134b58ee9eb79bb70c2045c1a4e6206ee9e12909b1c3a7a386cde5fb1965101159dd34c586170491b3b8cca3a9b4f1d0b7438aede0efb1cdc9e7712abe0675ea9ee87e2cd8200cb08bbb85a3f87695c3147092e153c292e5a32475bc4800fa2e3d037070bc6f130e5234f5cd74c9109d2cca14eb83bf61747712b4b9c90933d2c25d876ba1bf7a8e601b472c154c5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34343239353339313137"_hex;
                s = "27c677b2b0b546f23d5c3ceaed4007cfff9fc1e0843de43e7ddee8ba32274954d79d9fad43c10e890266123f247abd2ca351a15b196a340b7753d4cd3756a091271a25fbf7834b05ee9c5db4a8a355d5746ff9b0ff61061ac4670bfc9468a4101917ca61bf6da1b029872bc3fe14a306d4d43794deb2a1ae0a4aa5f432e9f33e536f39c249fc3ffc294a466e7bd7b3d35e7ce5f15a3564df9351770fe66b1312e69437a028d07fe31ab3644fa6d16d9e377fc3b8820f79d220b03012add369c630c7c01c123dfe1be97d8d71d491dc38e7781635139636213eda7655eb2ab9bf8c44af43d3c098667c6887be8e7f29cc72dbbbfd5c43ece1a0bdfbd01aaaad107700ed7d9468138638afe7c7ec64e66738e188400e8a71f89526f8170fb56a200f69dc9e4664fc24f40c80e117f3666f91ccbaf8dfae5fa145c9a94ad64219643a66c93a682a365bf082661a00bc8b0a663a6f2efbdae29744c735937c0f0d7f6faf7eacd068cd02c016cd16741d49170bc40e2fe3565cf3866db6fc1d528959"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130393533323631333531"_hex;
                s = "9849c3250c03095ecc9ad404f9ee412c4ee797ef0a0f0e806247225fe03b3ca5381157476b44bb8909d1cfb24504010873333dc969f035e08d552c2b9e2da82159619a75aaee04f20c5359450b6d85dbdc98e3174010395bba07cf3e64cd1ee44f81754a64cab4efe7c019e05ba8b3577333fa692858c3dadcb0f7047cdb1d2bf75b34493988ad84794517f18c934d95a7ed5ffe75aa5b3b5608462f18bf5c656e6f1e626d0e2ae4ab7c69da07a2616c515b88fe33feba7cab21eb9869ffa01cde1cf3b318e4b7c7089ec2d3748f93ce3ebcad0d75bc2e5f9bd20f10d6d946ee112be25dd97793f7295cf6862ec116f306d5328759c304329178a50a01ee76b5c5352ae160e0e7116f6e9640d7be77287c3910c929bc3a2a5ce1cbe08e48d5a27a11062d74442c5ec8a92be9bd8aa82db17bec86b2e141500fc5edaad589bcc0a0bc152a69857420bd5f6483aa3db9d1fa4ce7f6a1e20964b1620e8a3a13839311a61031e31bdbbd3e1350d1773ed132355eaa3adc8a292437293c26fc428844"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393837333530303431"_hex;
                s = "9d81ba9fff8a9e27c1af56efb4b48088785b9677397843f335f038b46e863045c5c48fc689ec046f87d7c2a1e22308558181a1dd95711088ba84db74ebe33398f77b760c693371a403d8988e3e90d025aede1e7b9d428ee4ce4502a307bd151cdec1ae148c6e0d36d50d3c19eb1266714b0111ace612dd8abdaef969c32cf3bae1bdd4b14cd53b3ffbe59ca75d279be3a933eb3496e0cc5d9b639a5899accc4c91f820cfcc4609630cd47f0f321a349f049cfeb5a74dd1dca0f898a36491cc3752c2a8c30d39c24f9cbfa21cfca15600e4ae161a9834f839878bbe66e201b8c8aa8a430913e157c3c7d74bcd901de43108d6049805bc85ac0b29869184fd587fe46d47eb740a86009940240480d3ba700a7130207637a438746084011f9039e52c1f6aa5c99d7093d14e3b4da4148f825a222fb8b1c35e5946d02ced55443cf0736f72011b129a40632caaefb78c44fcfc31fb2449f2d46c7aa53966b7966eba8d143b3220045991f66b1efe10f696d5d568ea87598ab5fd6655db506bee18be"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343633303036383738"_hex;
                s = "8f0c4086ce839242b6696e7e0fe63be07b1da1b77447520172fcccb41f341ba944927acc17cf1ca0686692130be5bfde236385628b0e99bd0b3ac5fcf2b64bb6fd0c8ca734febbd00dcc9b99887dbd4a8c5f7bc97031a7e18f6143d561b29ef3e25449559c5563a9169592efa534fb9b75cacb7ca67b3a8ff76f5642dfbffa93e4ba7e51e8a5919afdbb1c3ec91c9cba076902383614b2b1906e6192b451239870afb863e158f8ec61127f8a7a9442610c1ca47e5a9c8a0f460548320727ef1633cf9092cee65e373ef16322faddcdb4f671d91305ae8b3e4dc9ec65f5069667d462f429b025ee6f05cc38f8ea53f4cf0d81b4ea90f7e078e3b8c804ad2cc7525253fa81ebf50e8e62bd6841f28727214d183665a108bcf8e6f99b284a86b3f6adb5f5df71acda60cb6864970cc22769c1b1ec94abd1fbdd1c21edf2c375bb167ef66538dedde6b6b3c7f8634443ff163482250f1c8e97748cbe8ba0370662b1a10fb58b1ab595e228af813d3fbb852e9b8014a98afd6d96b2e27c0eb7688595"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39383137333230323837"_hex;
                s = "2b1f093b09ddb27d5c25518781409db471c83e84e50332c47a183a657ce60fd44ad9a786b4d6ae9506e591a449dc0c46f65d9de5165079bf5bb776b70eeb826e3c58dd7a916e37d83b7ea6aef7a12f1aae1462844b0bab4acd4a5c9cffeec5c52b0a6d36ebb34facdef9c3dfc46d8a115d3835cea32775434e78dcdbc3e5444c82c0fa23f52fcaab3b8dec372ef7b19a0b391ffa8110e77fbfb6fea8a8def46a5f6ce20566af9e0918404df4446d6a69300eeadac1b0f5b81625f44cb9abb1876572815c2363e5d36691e070c19baf8c654e6440572739c468ab7589d262d3992fcdb2947d6f18e4be55572437e955d7f8b60ff4b1f1dc9d0c5e6bdedf913225fc65b0acbe8b6baede362cb615e86fa2335eb818878d3dd7bf689dd448205cdf14f69ca5925df66cf421da220035bebe9a78ec5fda4c0e4f49a456f9fefc791fa9109eaacb521e27aee95c120f4f9cde093b7a802dac80810b9d4d5793416672b58ca19273284a581ade84fd6d9bfa31a3b5254bece875a56fb3ad6451b1a661"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323232303431303436"_hex;
                s = "2b04d224788e2e94204486c111c0b07540b8e7324a8d57257841ecdb77d6ac906ac795dda72d51b054b5ce6c5232e061a18d67d64c7c1b1ef1b601cce28b84ed3645afc616eed7d1ed7c21fa348a418fc7417449bd997340e99c672a5b83dc43003fff82771a30b7b666fee40e078dfbc7af969d1aadec237ccde38959a0b5852ba0aeb15d8864ac41dacad460e9e69cea0374cb90fe2df0468011409cbbec5085f31684142100c13521742a47af6962e7a38d682f591c8b63fe3f629618afa3902590904f3c99bbd3f2681f42196714cb6e59a6422262b5d6c8220f6564cf35b3873e356015ae3dc6fbd243c29a8b4043a367a49a0dd44b921d98005a7bb0478371710c4a867a0022742449d594a321727776d906e636c4f1c798a65df8184d7c8261413b16a4544c37a8bfd4a3fcc4dd0cca3c3049c0446dc0e27e334c70f66787d8bfce5bd9dc2cc5811ad92518e679e8d219926321b0e7c77d4743db318ac1e47f6a5dbf3f6c53831a2ec8829a07125f5afca4f9f27a968fe5d269d5d427"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36363636333037313034"_hex;
                s = "3ed79e7805fd64fffe1863e6e9233a502bdf1e35622799a3fd4da76a23a80e3e6fcab61e5c3f621474e91b90a43b36ede27a8627460d04a74677ae0994e949b7b93e01868c5413af61dcb5a9290f921fdc24073e5c7a85ce910016c2872ea410c239af0a33730ed89579f8d1f0743ebec1e55600fea2a3a98e49ac1c5ae12e3c27c32df9ea5fefeb5c4d004cedbcdd30cbfc00fc21b4aa5b172e87d34920c6dd31d9c80db40cadcac6341634ecf8c28fdb3cbae6c236a71322b81abb9137baaa83f65826f1d66e511f727935e01f16cc70c5ab78451f2fc199c02051789c3683bc573190adecfc041405c9a3aa8a6e36b5b4f016589d214da8bbb2e7456b50599ece0d8b61f106955cdd38eb737db4fd52783d60676af30c0d58bcb44655210d2d53f1d7001c925f74754041e94b9251d950784bbde135ef9108ffaf59170fe76d072011ad7fd1cf1ae2763140376be701a5210b29faef9e2501cb3e2769955230bceff7ca53afce8109b7cdd3812f412482f8157d55acdeadea7d9a3b314365"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303335393531383938"_hex;
                s = "072389935994033eb7a1bd07c3ddeb07f64589180bb5a0445f7c36412de2021cf7715254528c7ba95605045d2195499e095beea826d0f86da9386078b83a64c4e3dabd43415f68a1b4f08381ed290182727102e875bdc2854a28a725a8b9934dea06a8799c46463a21a9949f8bc19f87b5c0eabebd25200c1aea8eb8ae35be9b153ae54e11f348be421127b4bfa8982cb7db0a122a7b68c0f4496766c9250252c75ffc317e6c2a819edf70609a8a5935fc8e06554b84f31a5a2e1ca855f96c86acc12459cfe92b613573af365502365a3a3f7cd047ff3a227fc09c5494036d39c7887bf1f11dae79f83c0d4fe7cfa02c8e11561f351f86b691a14af945353284f9c7c0ea73d5389049ca0195cb103fa81f45ca01a17c7a857a142223f67c8551303478cf791f0f638e02e60c7f9452f848ebf0b6d6d8d0059bf8a2d513221c385ce075e8abe3ae0a7df9e65090ca2785286b245cf5ce734e4dd2a25774583a4aec4fc1ced402f25c2353bde80c2ef3eedcb5b761a7f2b87c201f3d5f9c08d3a5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31383436353937313935"_hex;
                s = "9c43688f7ccc4286e104c653c87979abfb36869a82ff4bc2c6cbeb4ddcd4c51b833367ac00098a84ceef062af0a0c0dec46b54d726f37df117762f83872611aa495a88e69fe0e31e58cee91e3b70987ff17f703a39a7af95ee4121b5bc092bb4a1306435d094a93153ee22dc50d4d4845c60aa065aa03ca6f327ddb3c870ac693b5679ab3390e6782dac49b76f71a0dd6354240184f8dd9400dd84bc2959234a3c9aea08b4ce781d38405eead754b8f3cf4c5bdd0cbf3a15017ef4bb5813bc9bd557fe288cbe32e6f6659ddcb01ee10a48a9f9d33cb5e57164fa77784c89b6e9a55ba65999f7cd61170d826f89e3cbae123ddebe1d2bcf2dac72a798ee9d2a47e80f1e73ad28c6516b271012733e3d8c3db695429d0d67302e5333f1afabe6c36cabac97c4f302e28b3a0821db915b10c1e5bedb64bc5b88d99b7fbd32d3af00b06201c64fa66f38fcf41903a7ef1df4265c0e120d1accb631c43b7b8fd49f8f77e228b550656ff7caeb79378dc3b868ba63d8e97b832ba18224d08cc87e67cf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33313336303436313839"_hex;
                s = "807f9a9f0fe0f04c59cdb1f87be60f510dfef3afbf5fc8d13aa735778a4c8823e82804650a837afac849e78c8d1fd81b364e98589da3f2092bae5f7c041ec0c399b994cfa89bc3c301ec3980f7bfc789a7838d212866a500763b5d29094f112ad572b2a825f19510869c5c6e675209c722be18cb9de4a95b902d46724d6413581cce113a53991d748ad8fd132643bca1e5fd305247044efea07f5b17145ef2f03faa8b13be02d49445f8864e1e0b0051f5b594d1f0b912148db82a6883301d532839f6250f0c34a1c17a7e0887f42e650e26eac3f9cc453b69c12bc6548e06a37dc905ded48026d08f32a17c7a76d546296540194e95ab3310a7bbaf0c6a2e9734d8522ab46ff457f5a50238eeaa4027325d2a48e2eb0c0ae7931296d16af25abd5e6c2ab00f7b07f5f21edb7034180cfa0b3fd3cfd34b804d3d125291274475e2d3ac97bdc2baa208892fb0417565fe9f7e987e1c2a1ea04c51347278ac2e3f850d355e3ac6adff007d158697372f42f30bef185cb1b9ba2f0458480f0ff6e1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363633373834323534"_hex;
                s = "3091947d5fa8bdeb463a0a5c32804fd244203fde74759a3101a47518b68eb99948d625b4f9bbc384862e6b33c5b4c4fae240b782b0bcb298e5ea090542f9f0c1a0cf21a42ab111cb1c8072e625f60189092a7164339e5d1eb77aa07b4d8b9cbf850ef0907f289e2b8b2cd61fd184af7648404a9b15e596ddb58798ed438ae4a6325adf39c4745360955e6a6c060edaccd38142102038bd8f1d9d5a33f39fb12f0c935ec98a0c00efd93beedd16f340129977cca90999e773b0ca9309b8da7c33a4f7db346631bcdfb3b12c8183a4a3628d713a9667ed70c9f83acc2797086f5fd5685dad6127ede04e6036758ddfeba4da385fe722e249f88366fbab3f8f65a02512f286ce0fe21f77b262d5db7787ad0218b3b30f76c33f7560668364223b65a96a272e23da285346e087f67af331fda31c507c364802935407b455b67cd05cbb15aebfa3b7fe2e031d7547dfa8aa3608bdd4ee2f722b1b4ab851377bf10d42a1b2b33341a53a7ce1094ae33418f22c7bbe84ab8b8bbf7226584bb690592592"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363532313030353234"_hex;
                s = "7aac4ae776954df9e6c88289a08c1581052f81853ccaca029e6bdb564f91e529d8223c7685537181d1a75adbf7bcbae089a7d177ba6c83bb704dd427fc42093a1bf1ea66886d7946eac4b811a111b63b464da8ff910042a35fac714e8adf5dca827bb384cb3fb040312c04fe8d5263fb02a9d08276d53ee966b690ab2872d6c102a7f415fbb19420bfa5861567ee50158a4ee141dbab2eb640d7ad768fcb68d9a4b199329d13076090e9655c33bb791ea830401e2da57e110ef068a99d260a1fd48f104f5558264542e6fee26eff4ecba4f9df16330e2b000ed9d37855b0a14f1b7265fa0db6356bf260308410c899fd00d795bedc5e1daa2b3b8e58784a2e0de16a3bb0f64bf73a50bd3c2ebb462a2580cadbb6a1e611836a60b7c8b6c1083c9d29ead4bd0b627e538b8eaac398dd7218dacfb2905133fe7c31bef29bb1346d4e6163649854a6c7b325f2149ad91b8d8b827de278db00dd0dd9827af62fa229bdfbec0c71cbe961bfa7ed25966920753debdb70e3d61ca747ec55c4bb05bae2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35373438303831363936"_hex;
                s = "aa165429af5269d35d74e8b033ff4db882282d22b60a241e6d0a546dc191d03c0f75248db4dc833c587db41b9c438f485a2152f8f81617756533cb15dbd0c7565a640327dc64da2badc23052de4b8dbeb9477056bacee1eb95e93af46d6d68cc795778b3506b14de8428fbe8782600e10df7cce98670494efbda15890f72cf089357d743e9ed681a14b84c159b92cd5c259e6da45edc3484a853ad74dfe99f1b39df3d3b20811c89c5047047a83b67afc944401a6e99d9dcbe55756faa16dd217ee3812d7b2db054048d5add496cc49f417d1b608f55ffcac574207c10667dab31ec80b13d301fd257b25cd8e35cd201f629627a5f23f25b1667bd05bf0195ead689813acded914a8e800f72e332605a50bc2fc56f2bc5d26ff8e8d7bfb290bd85ad3fce2e2f387c9bcf99dfceaa9b3fd0b7bf9aa751def1ba5804157916dd771518811ea92da72dd56baad486bf5ee74be5154448fce4f4cd99a53921c3d19cf210115d9072335bb82f5be48d0ae266c2254efb1641c2b062c67588cd621334"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36333433393133343638"_hex;
                s = "27d888fc7c46d557a83e3c9cd507569e2974ade0b87cee080e75dff734047ebcd9d7d4fc589c32c714b810d65a39460fbb85ed5e57c749c18d41a8e5efd9cf8fb7ba6802ce9504a7cd38d45478dc1ecac6e71a7475f8f2046ab421bd92c0f02545e51976947e09787d969efce3e39e66eb5645f1b15d850d580fa1afb5af6beebd4114e4e62d8e94001c82f2b6cee03591de924c7faf75f1eef6047d3670c2797b210d4ffb88f424bf8c84e615327277000b91af82fbbfa5cc4612644f7cfb7185713e0a6408576bb671040496bd3f8d7875f75a6eb08e44e2a9e3b31274787be8ae665332864e2fde4b944d6443b99b3c6c3a712fc27147f98799351a5c84e3b9ce898a43fd85f8c296a2d82f813ad4f7a2adb157e9ac743846ee596c782b2138e6c1248c3728f5d1a46c9a75ce7bbaebe8b33d44a70bf8e35b000bdadbf3796a38ec4c27f6a216166dfc1621f8509f73cd253acf1aba9b687212917aa840fd5399acacfebeb2ceff5b22287bf5402f9c56b025bc337f22ae1c6ace24d016fe"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353431313033353938"_hex;
                s = "527dca1594929ac8f5b13a38b7300b0d692494526151b90d30334c06daf2ead87a8488b2547fbd3d9331562321da29077fa9801097ec1691ae0eaa6879300d4411874cdcf3aab848235d69cc7696af87f861a2029db0e83f5fc79720b824b3692f5b5ba0e8207efd2c3e66bd0e3ba79989d1d6f2784f69bb43a6bf5fa48dd9578b31bb7ab93b17978b0d17378639cb610b498d9897eeda4e302512e7aae0470cc43ac4b707728ae328344e908c0ad051c47751532bce56dffd05e8515d297798c58b8763843af7dfe481f40b2b7d7cbee868a506572d6a54cf008ce85ec0060bf82301953b23bdd5e47747a535d3ef8fdf5db0c65d701b167a531fcf36a48e63d8cc4496cd74cc5d11ab04b32b7e9c24840edda771fb0ad3c13f2aa3803a104e09cd3238de3f3c06c42224a9e66287aa53db9ed088b7d6964fb5823e0396813507281b6c4ce1d5ba0875c6eb3a2488af153552e302e4da440753e21fe085e770fa3c23a4bc0f056c464c52f3bbb12878ddbfa88761466e83728ddae9b6045b45"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130343738353830313238"_hex;
                s = "c6fa78fe1091df4cb9d5f90213f52d43e8e2362a0ec8158783d590b8bff66366fa01c9723861c4f8fe32226efb1c88621d12a3ce9397b0e8f728f08792386603aa68e22a291fcf57ab7bcda3210c09fb7a48ea1967f6d0a22971e5d48fc439c3b1ed391293dd4f705289ba25b0d4f542816e592f910461b1f4c04ef9e73e5546dc8321f51d89245c9b5f68ec0eae43bf82c2a36949a94588277f829a017d60254b2c3185351a3a856f7aac7a23b8e3f87ff1f0716a4d1b907becbef5245ff0feafd1761429e7049055d20d967cc02fd40a1a25c3661efcf97b2dc611dbfb2caa0db2f00829e579040a33f7ec9f2bbc3d997049a7b12dd40a68f8d9b5264ed510cfad1b644c24f0e8c3354fe4885bf385f3bcfea73a13a0eef555a706f5244fd902b2062e94c1bfe88466ee9c632761605fa79b6d799d9e79897bf0e56efa34f055571604a409d5d899a8550ffd6f002cdff6dda4a5201b2f95a7601c846cf1d003c5b3fe93a9ba808b2086169e5bb2b895fb29100f141ebb3567bedeaecdf001"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130353336323835353638"_hex;
                s = "c582187c93243b6e33d1536612de1cd350ce22a3520f3f9ebd59046a9f7d52200fded0aa32bf9e8249c189a59273f2cff5bb7da32bcd53c72b0aa730f82d9e5162932a7f42b65fb9e7a9ab25458caba2b6058922c21078aa7e31dbf24cee8dfe9367102dfa41cb73323fa0fd58d9f19a167587e19b5abeb075e8acdbe89cc5da766b9f87175c7bc7b7fcb7a68b44dd8824cd4a56165d5fa290bc332664ba885055bb7e3437d33501237fb6bab3be514b8ff4c2f15e849eb2d8bbe19bce1317982306fc29ffb921a76b688c75dabe44035b59830590b64c143d723e6114426186eb0d12a5ee5bbd5e73f538a8340aaa80e0c036ef0daa3e980fa69ca73f7e04d2ef8c9565c8c0c0154af2ee9e3c90d9660d9267e1847fc251d409df72e466fd6415761390347142cc8b6394a63e179ad401f4ef51fca0288c78a95958312febd894d1a36ff9a82e4abcd8a27d085cbcdc54910d4df2947ac22fb7274fa2282e39b246c58cfeef5962e35b772d2573b8650778b317de8e17be4ce056537d797209"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393533393034313035"_hex;
                s = "5e43e4fa01f47b68cc7916afefa30e1067d5c97231dddef925424b7ca45a8f37362b1170d01594fac651891995507da14cbe02f5063046525b0dd185d6b4962d28f73e354bd9b78c9ab0fc35565571167af0d11ce0cff9847cd06779ce92c1bd2432116b216dd52f47c0f7274813e805e6c4f6cf037c0f346448558af381e76b7e161291fab055fab8daaf7a5fd9ae3ef43facde73d483711cff04acad39ac74fba5d8cdcb22c9981c48be6c313a944f25fac0037f6f681c44dd90f56d763e308b998feff115fed16e19b83ba8521d0a465905b04c77cba34fc6db055ce7aeae95197dc4e154f6875878a1a07b14bbc0e7870668346b92b322fa91bc11ac3806fc3dd39fabb0cf02762e004003805de8a48192970d859c9b543294d11fe9ebe524ae7c36682c786d99cc14bdccdbd648b0703122d9bf2667a2516865e709397d1050ed4a7e65500954ec0425d7a8d4c0c4ae4554cebfa7650a242aa891ec7da7033f384cafcfa2eb3aad090120fe63fa0776508882bd4fff340f8db1ebf70a1a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393738383438303339"_hex;
                s = "25d0cdc3c06b10672d7335b0be5fcf402b3ad07b4bc3a97f04ec4b375475172db481e23be199eabc2e56936b8f3e537f9a76fbe60f5d0365400f3640ffeed1d19f8e98f7957f533621362120df4d6f0c6902760f1074a122223d1b643bacb94c8ea33f7ca2c8cc6c1f12c3ef4916e4b873fbfe9632f2bc95dc8c64ec639187b078b9c4eb5d5164d377b267c4e2a61839898f2a423a2632ed19971132366abaf871a89bf28e765896072a77032d28d5ba55bcbd72530cefdc29131a217418ff9ac814368aa66f6db198e33c3817a8054b5604e796e0fd27d72fdc2df780d37369480a87e7b69aef0a5717139bb9aeb168300801549af195a7b3b17fa75f7d6fc92e38d2afd70a74ddde5316e7e7eef29abd1e9eb9d6dc1c38b876a2d5142a2377ab22b463c13084f4ff7d44b6e2916fcbceff378a65a10a0c5da94a7496a1a9985ca5190cc207b60d69b28c480b7d26cb5b740231d90d9de1c55d647fde75631b2b6d363a52f249cf6b643803c573e73be9286ccd17cfe20d3daf63ae5a18a497"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33363130363732343432"_hex;
                s = "8101f356f3c6e0b21a1c075f7a3efaa5cdcbd9374a9df447f5be5b3b28a464984e6c6b819d61f1c7f07657e95ce63a4dad768b723f1e305170bc4d1016cef695d91a65864bd1ab2365b2bc596d252ee206f71cd44228fe127e7373efa6bd2e845129218b99097a074f7cc03ef9ded093f4be643042bef29fcf8819967a34a8db6a066b73c311dd2931c39b1aeaf55fcdc035df8bab8105cf0f07f5cbb30029da314993926c2e92b5098568ab1c533b179b8c2f8faf71699f7e6eff87daa4a5c715c7ac0e181b87b2d8d791b61130045fd35c34ea29710deb0c33c339cda01195d12a5e23ed545958f748e23d6b86e034186d9dc2e5b527a7375984ce505bba46b54b5834e1c952a7af468d9b9dc29f38458f74d3773fc5c35a8044a2faaab85759669225b0a981d8803dec5a5655511199ab43abb213c4a61b1c1b3931e29c25f948fcec49fcd99df1420e2d894f2c33a335082cba0644e5d1f14d49965db1c49b7d33c2dae8ec6b1941e8647128ee2b295ec5b74d27d6bb6ce0f1eb19a83bc2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303534323430373035"_hex;
                s = "130b9beb5fa37118ed59eca2fa8d7c921de16a6833b93d98a3707228ca50b8ed6efc254784430512c4ed005769c8434c9e752ee47069c95cc1f476866dcdd62f2062de8392e5fbd8c19ba2a08c80ff6b66aff8411ae49ebab93cbaec141e8d9d079ba5a2a552b1845fc57ee718a45e941e925a5df2bb9fe11b4602a6399862c3185086627836043ea15e5a90a2a1ed074d7f75090fb72665356a68bba2f38610925f69326bb24d02c37af09cd05cdb4c1d10505d1c506b719306e4570b752fb28be3453046fa61e5509e4cdab16c4adf44fd3021202526479ccde6ff14190100d5266f6cae543e65e34fc9726d9bc49751466aa67d54a7efe7977e8e64dd4cb3ba0451df8db524fd09b1e196e2d26c46e229291f4df7ac83875554d0ca1f55786dbefb03d8fd9a018401537dabde193494399823e341860e4f1c24a4de0c86f4997eed0308b6ce27b3b926ca80284ddfbe74a62e97016e9aef9ca7182cfb3f1a16e1e5b5e3a2b1dde112639218054f0e9d477291f0d580c1ab7e840e37a50fcf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35313734343438313937"_hex;
                s = "bc3def5a816a23d23fc8a7b8c4cc8789e4044a8c963cbe7ff9cbcb9e50be23ac92524c5a5338ab8b42e7db1aa83180ce3354aad430ffd2ae43ebaafa88990d100e27d788c779aee23846e4674af21b81ccedb8cdc65d6380566f649ed14c3e43dec94b3a527ca6cb53001b6d8f9210ede057fce83f0bd7da60033b96afc48a44cb4341382f134331a8e26f2ef0956701aa12151313754381ae2d5a99167222bc91565e83aea3f057b286794dd9805b6b533831c23984498a55985cc8465c3f35764d28715692e9a92490f2ec82122799576b808bc9d0fdaf87bb4d391f5bb25c506a6fb92e6fe746de506eb3748a6d036ef5d8804000dd0ecf738709ae6ddaeff44734513374a022c21ad528a42f6f0a15f0b5c47d3a64379191f161d5f96be33e7d61dfcce2a30ecb73e34b99d86162b66550841dd700a38dc1057838397513aebaa411e347c29fa9a2d1789378f044cdcb9417f8ec3703be8ce911bae96d44c5c3664c62df09f58a2709eb379c3921ca5b1a277bc7fdb7bc57737542316ed1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31393637353631323531"_hex;
                s = "0748441edc133ae26fa1300337716e0249d9c9096e9eeb773499b442dbd1641f3aeebb86ade983206301ade397b1089f43dec0802d87d23287f89f7180b2d92ce2f77041038005d1cfc27fbcab2bafd477a51cd4f754fb58311b80c7f481205b02c1102536e4ed18f9c26b1bdee67b72bacfa4d69bbe8eea7c67963c644c26933d27ebf984dfeeda416d45bfa183adfc10d8eef03e7b159462102e546f40bcf27e723ca2ae516e768488b2ce19303f4cfe54f27be9f67b239aa6b379487995671105a21923bfcd14d51b4b5d722cc7cd0a6f4b45a95bdfb268fc6dfd38cf73804c2029ec83d055d49995c4e1896bab3b7ab0835bd8ff1a2cf4ca185cb8b520c8d707d70429e667a5e2f40060494a022c17da52cc8111c40385164a34ee45dfb52bb34545dee9708fdf2ee221f7434d0a0f80b7bae2a7e9c01e2d74a889a25a43f39b3e75ce3c09320cad054d145247c7c99d5b31a53f9cd0527cee1c44ed8545750b633916bc016454a0e1d4c046e600a43029afa4335d74795ca51216bb2041"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343437323533333433"_hex;
                s = "03239cd5b45155f6c48ab1ca3347f784642e7aa70bb7dad5dd98d6542fc4ffa1fb4c1a4da2927e3c395386f2a6024963cd4f3ef48625b9e89e92ed53ea68b1ecf962eff8e6115f2eef77652c1b99d4d6128367971203cd84d134e1d3a2bbe0c9d15879518165ed03d4181e295d6e66c4619e61adca73a0dc27275ec35d426f6add92bb798df26b61bd3492b1d8fc6ca9ed6759c7c8ff6ea32753e11b4ca5cbae38f98ac7777aa52a5b7590f5d5d76135393ffe9a3f15379a4a262796aa9b5ae08672f2a3564534e2dc3f957a8716fe786b0021b6e1935355abf9b0b75ad3b80aec1c152542b813b85f5820a79d5f53e3a337b36d4d3a641c450f88528237b610f489886078a6a37a3a2d6d0bc49aed98f9306dbcfba330d00a0c45be89c85747310ae1bf8c92ca960a24beb76a4020fe0437fbb91ed5a56203185ee5035e1eb4c9a0cdb0cf6ed8fcab3956b543dfebc8ea1f275fa529bf33568a053d2041e340dff724edf6eb6d2dac135aca2173baee104442239c2266a7cc03cdefe5b928c8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333638323634333138"_hex;
                s = "64ed1bc0540b109447058fac11ad2a45dacae2b174abb4c111e868ab5d9a622145e59f598e73686b517071b3f7bee34d5514227b9348fe0b2a5b772b7ad4d9582ab2898e1883749e75947c647a4caa9d77d09386d9b4ecafc741ec274554299ba25f0515b7a1e58544fb5dcd8f99595c059f6b14aabf62c263bac6b295875c863e210bfad79772c64ba0a346116ce79513fb176f0e1f2129ec2db112848daffd20da01f8208b29f102cd813691adaccf98068c081168f2c1932055079f46e3ebf36e05bd4554ab2d1a75a3bce9db7c4d84a89873f5b6bc8747166cfa861092664d1ce95e28011ee9661f1412c8ec3ea196f996e3e9e93b5dd5f89d31d9f56708beb9b06b92f7c1e58df5efd5c63115a792ba4d7f69ddc782ae3645894dac86d47e2671b8f0e63ec7559fb997b25daefd1589a80f163f93ceaa397292ada973296c6b0f2660c6bf7b66b628b696a6109c9e516fadb25a3f475ee1f273a490a028396bab59ffb8e91abce0a246631c2c76ee08f8701704f0c4347edf03e3f2e521"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323631313938363038"_hex;
                s = "65492fcddd6529a4e1c19f7950c492021db03f4d74051396a94abbfc6c70ec10adc1c44cf77535e98da1a096ef5e93bc55f9a9ded5d59eb15ebec17dd51cbf7e26cf9a8291d7abd8294398193e981ab84f5385962e7cb7b26f43875b8a2a2e89eab011cd8a9d3d683407eefbc7efdd2a81618b5a7c0f6f07cf311fa426c86974a9da06c9a8981a048f8c7b3255eaeb3e10d3d8c0187dc5b3629bf5349996655bf5f372b50d82381cacb3d9248b313fc353645199824534cd4953b2aacb20110ae426ae59f84650bb3b85f58094056511362f9fe62601fc05ee75f5935b8526bab6968b96c0c65d40fece4b70037fc319ddb9f9d86a453d32de2818ef5e2693a6beec627d881a00805e553e15176e9faa6c91029e3b801bea69f427c2dc05f9db8ce7d5a31a6da5eb8f1125d3ba724997df48af34e40a6307c7ef1d205361bdc89817c4d1a2023874cb2a8dc903ab171fd14df0745d65f3204d99e0d920bc36f382dad09a4b174adbd8bc72027bfa1185838e2b20ca7a6ed226eb8b85df5fe26a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39363738373831303934"_hex;
                s = "37ec056388181d8538bc2efecd679986d8a0ef2ae31ddc67fc54aa915ab603a6a34d62fae586e4501bbc61085fd798b3ef753cfa2c0648b3ceaecdd393ee601a89d502ff9ac14711ba6a8d377afafdbf4017f6cb095b7bea1d99260e51af92bbe93490aa484fb38a91f8e4bb94af872bda587f2f7c5269ba7110c5f2182c810ff0ee356dfe7b084b3de5e15a1196baef0bc86409ef187297e01719ca1914beae4e52b7a494e0fe2578c4051b5be61135dd0345dd96ea780e7efbfa6342423fe4f67bb5c79dc55852b3be79fedd980897d68d61ea3e4d5336d82370f924acc139b6ac711ceae9cc60b9bea13c32074a475c62229d963a1527012146c53f97093f5b2e2039a4d52f4566bf3b8bf55d8d2efdca729505bf0d1b0b120aa835ef2cb7c3ba065f81386cadbc00c060c18f4ac989c757a63108be4ecf6da31838b17ee1c37b66a887f741f8bdebc3c0b959940461e208aee539cbd10994bcc6c0d2f55c41a17f8fde8aa5c0d3c4fbb35dd48b6ebd9f718d924bf16aa4d107471a9a3e71"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34393538383233383233"_hex;
                s = "0b310ce960efe7d07c04ce0e3d365f157a48b171bcf2ddc75ef02e097711ecd1942ace2c414682dc2c4b2ca884b9fd7a49527319c9f444cb3e39a92d1d7c8236010432e731181514d0842eed1a3580ca551f81cf8a43014ad4d57f48a91207cac155dc40724078a4d220f3906b9c2289af6ea390222e3f6c17a62916965459387d4ef60c39eb909f6c2fbf5d5e67c65ec132f763cb43127281cb0148a06571f7ff84b11a551e4a2b7ce42792830a13ca5c1a63aa5044f1fa96085dcdf0d2c4d7f8ac3a957bbcd6f1409cdcc2ad59f8f62b7286309c8b77f85679bee92df4abdda67287d15e6145ebf4f7ffbb11139f17252c80ec7ef1a7f589ae44b26b00d11e228bb1a75339b47ca94e84ff797b8551a6344b72cb8373c26e360ceff4b43511a47f7e6e99fec828dd1e9bfe901fca7b95e88f7419a7e3fbeb14b1163e032d731876a7704418a27531d4f6a33652e5a419d21aeed1486be626d6a09bc3d3581eabf555545cc9d58005f74c94f70777450501df2a8d169a57d8c2ec70dd159fbf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "383234363337383337"_hex;
                s = "0d5c19376a13376655c05270301774c7d08879d4fdc341e64411dfbea6c135c63ab50c20bac375da36811cb6cbc9ca6ace906c6acd5681ec4a6b545a54316ed1526a69fa6525b11c9b98f8f29a984950f77486b0a15ce855826102bd3ba3b1651c8dcaf4031ce28f51af0a361a23e293aadb727b181eeb50f4fcedfd5847f1d01421f12f3cd11b1a2b3b3ff2e6fb31f2c138a2f4f77d008a4639fc814aa6fbf8a47004c7bb72de41d0329580f9ddbd2d19e077fd9087144931895bea8b616354f7da1acf077d8cd34021a88fbb73ccb735c1bae6127c48d151db02d7671760b25d2400711152d5c27a318ddd474f84885c12e8fbfa553322482439f5c9d2832ace15aa336cc092a13024476b95ccfef9022a4e0f0bfbc55c40947d45570ea8f09800f85e0cfda4eb9999d859b9b3a1e9e9ee0807ab32e93f1e16ee36e4f4b656eb3c616ad797e17dfb5300c6553eece876dce978b8cb082a0e9bcccf4708a4f821189354f9e7310c358e864538ac374217e8379aa9f0e0e7daca3ab8d46a6ae6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3131303230383333373736"_hex;
                s = "4567e5476346c06b1ba264f66cfd9e181059d44b0c37c4280a41e41d113c89834c0aa68d25e1ab8717cd85c8b4bdee482c3eed7d2eee16947bd68ca7e6381187b9f09a3468e2f67b0cbf404f0f5634f0ce62ad7eed6f557d7874290b8b3a9347e4f203e7d246096f4575127e860b13697b27fbdf4fe46541c48161676bf139cb8b75ce528079bd6f01e68663a7a7a3ca944eea312539d32ed11e0f3b1062ea9c251697468cb7cadd182f4e47602c14553395c691a4271f117a9db613e2e82a9a5705ab4ffc7dc7c0abd0371c5ca10880277ff83f86b4204f72005b6bd42ab03db0ab7ef82dbd48c7aa8e8f448bce64082fd935420b88fac01080cf544b18746346c0b1e80d82c4745ade0b0a53f226594c7e550df37f5856390fde9de9fe73b78efb4840b9e330803b92b1a192269e8537730ffb8207947724dd6d73c2f97b7c465dd47c0dec5d6b27378e53dfe91ab7c8fcf27efdb08fcec4503d02f231a52367ec85370eb1d959839a77634781587fdc9815603b8365d8da7f55f9a1439bfe"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313333383731363438"_hex;
                s = "617db8fc96c122d6566a59a03f257336c7565117651751b4b76045e6a075aa3fd481b483d06f966c06852e0fabf2a997eede481ea707278283f80f8fd3d9d76b968063eb160a4f22b2d5c45715b046abb00a9996d9a4c318608b6de17f8287f769d801c7ecd1e65656de6855f77f3024fb57b3f5ba530fdbb5f34a1d5d34357bef984c29e36328c7b61a82d84a24bd811a945db051d3011f703865cf45ccc59a722e8802e7b744a1c1d5e19bae1ca9830c2ae22239a115c2e6bb5e05180826eb5a9848a5237e1c7b2f38690f43e912901f45a69cbbcfacd0f6e6287d63b231425626e876a8837a6eef686f9a27ee04dda25843ca1c713acd64dd26382f3f41590c66acba0e8fe5b610f3fda96cc50a2b12b4fefc59388020c078375eb5422b38641d6b7c5298c047ab7f48c99cfc3558fad3acc9226653a50b210b7e82b1b757c22462b066d81c80caa51dadd99228a7f21ac4538aa44ea034534f2bafb9d1a35f88ea870c975bcf1e2f200ae175712f01258073b1fdb80cc0b8d557e6e265ff"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333232313434313632"_hex;
                s = "5fd3fabdd57d92ca506781f7010a675e303c2e794c1466f02b210509a8eac6487ce323e757d25cc8f7f37b041a6b910bef34c0480b6ec7a0b7e97a48167fa2eb19ca90e62bde2a8eab7c291be62af4cb458de6ae143a4a0dc71630728c0869de47b1d31e24bce26f395f49a1e329b5231491e40206a33232d67eb6a944c49b0c3c84439aff432fff3c97c6e3ef380e163832839a6fe7dcecc26659641b20e91f84b078c5e5ee5ba567c9bccfdeb45f298a8dd72881a587fc9e0c4f6da8d49dce0fbe01adec3cd87d4e58109ead90fd572f698c7d4945b75f5e1f1dff296f68f5d5ad8068fd59eafeee4ee29a2a9a9c06a3c501f0ab92fa99ee06342a8b178bd0019353b24fe118e8e12e92caba88b593dd6ee4619be013c3b59554c9a471da32155fd3992c5a81a6b1c57cc510216ef8de06679f08dd5cdb24168546f9d6f16f2352cf183b50477b0e8937a1eec27a022822be4bad086b9717d6eeff40d743ed6ae14b56fb140d0806f04e55c60fdc498716ec554d6b53161f260cfce2ea3ebb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130363836363535353436"_hex;
                s = "4731821b071f69fe5079e2c655d96438d9b205f2334e495731b0f4f443fbd63025031ee5933d10cf02e6efc889c4ed6fe609977b95046e468f0e006054c56a5b3b4bcf39f126eff5cd7542f7e9ac1897fd295a00b5f10310761384f110cd9296e1484275d4d6553f3f705b62f70692700185bc9be3a0d37821e1537379d31a1ed06bda54b0a4e4a85cb293aa3cd2e3e728e096b63b0081ada8ef3db8d9eb069d268ffe1429c91266da750e7a7d3c5eaf43772763e4464a459248b31b5c08325617a0d9350d2296e3a380d2048be129905b6f6687022f9e5c1a2b70a5634a26f35b5618504ca41587ceb54cc99c9b11f415c7ac6aeb6158b9f17e44b4cc6a72e6e05df296faf06e70ded3852a82554b741011f8035bc11839b3fdffec38ee87b8d2a191035d73d45a6e04cd37bfc2fe2f1f759d64bd4b60fee54e71d0cc5716c6ea9b2118894bc42057ef6027e9e82d436112a0b6d6abf7b281b13d59c72d0537c6f9416e9932824b6f6f0352564c44eb9fd7c9eca99f1f61bde4be6b6890e6ee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3632313535323436"_hex;
                s = "2ac125ba1020ace4a4694a63d7f61b016743d8fecc594edc98d6ac28dfb8f41d91864485b3faec75a89c1ab43ab101388209734ffb6d29886ea1b2814bd6edad0d278da862f2b12ec18d60cfcf5a716d6a37e898a5b29235c6fc8bfccb95a562f2f20e5f7bf31abf28b82bbe5d31690b3eb3b1aa36a89af21ce247f8e079087fd371f0e176f72ef04686e756591e38ef77cd73af0787b01e02fdf16cc7eb94f6773dbd5a7f818819aabefe0c9bd47d79633b84cc9fcf7b335e3e6c7b48e8e5b86e3e85af249c361c43aef36c16f401da463a23194b0e6b1dfc669ef1ef4eb626e88c8e63edc823544e28dd701040976d082f38df50de1ae7be4f238594f8bcac3b51b2a79c5b70403a49a1b86ce32ebf3b70331a75fd25a54860842799e6b849f81648b5b288283a6cca8573e96bb5c090f323004a35c9b201621cf18ed1187db8ec02ce205ed2ef0d9a8cc72decb811629cbd864ede9f3d95e5609a3cb497f581c53740bf93b658d6d6df3077c485d51458b05803c4919616f4b012cfd966b5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37303330383138373734"_hex;
                s = "b83b74425a7d0b75192094a32f8dce49f9c280e41da0a8c3c755b7f173110923e360528b2c7dc52457b3fcc353afbaa0c546002955658d904bd35835c6bc72fbf44840ae155802c573489d6c7d51ba6f4b27168c058826ff94db0c4564c178e475dede978a708a94ea7eb8a6ba43e47f8a72e05351b42fed7eea51b7fa3b63e14643797f58b7717e9792f8f5a433d6fbceec3899a597d65a33fafbad960b67d0539b82e88f74929232ca007d93804b269e554529e7310340d8a9d4a62165e27c3b5c21583744fa849df3a18fb3025e0f47be2bbb41574c5646f916f364d565b9fb044150b9e9095fee419620dd20554ffb9edfe1e72f49cfa4834585d25f693108557266529ca3a56f56f05cfe44b547ed359a562b94391dc3e9afe4414839522a6d34a907a9b3bbfc61f10815f275a62343d869e631fa776cfb08c9eb6f76fb249c639361e40b025439e4711553835b26b22423de4a64067f6df28c9368c46d933914ef659d584b703beb8675d6e4be7e2ed50ee6c3012d0bd38efd0784f6c5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393234353233373434"_hex;
                s = "2ad243fba359fd7582b775ef93b1b33a1b7ddbaa13a67cb10208a1324526ad5aa7b72c98980a29c01611c00ba96db203a36a7a15d4ca00f30d3a760dcd9e596e2ccf992c11a061935e6990038e2815181200d9f1c22afcc989be0b9451936ddf1f726ca37b00dfd67fbb054e8cfa8fa3ca3feccdc033f26d4579e8bf4a7c2e8e4bd42c32a015e3c91d032e46717ec9eb1df817ba54936aea3e42645615626991bfe60e86e9262a61f956e10500691233c0ed4e534d05492d73720d33c0e6622c7c946074b859fe0957091a8a00ef55b872135ff432e255d8e6efe1a1eb3fccba437739af0b530b7cac723b3e61185cf06a6818725c88334d2aef25df07ccf4fb018aa2dd13d6be2a7ad8814f53834a72aacf68ff819489b2e5eddb0c9bf4cf350eba63f83ecb02713635a205eff1e97dac41477637ff8f25f0e451d0bb23a3615e0d138ab632aea60a05ae6fd1b97753ebf877ccf1983064a3710b3c12289d1b3350b382e8f37effcd532fa13434bfa9af1bee8eef60bc2ac63d8c1402dc6551"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31343935353836363231"_hex;
                s = "0935bd0191fa4dbeb1da86c836f200990d4a2205d236cebb0c7487b754b8ef206e7f7072db5f1e3121e3600ce42597a96186db672111f0ba8728eaa96e361b7ac5fe43013f58ca17d10633f0f1fb3f164e151e10775c704d5cc537f71ac8a61ddef7d589cedff8954d1a483937044d1474139afa0cc73fbdad9e12fc12976f55ec81777f428e0dc186e3f3bf93b358bf9e1627fdfe51876d5f34959edc40eff10ba71c56ae8ec8f07fca2e1fc5263c2c22f1c8138499f824920a9a8396b31ae417c25a8f928faa665a9cb6b54752f98f17279098a54b68c58fc5879998e7f65130ed96155ec6ae0d92b35badffd05b19580be8386b7e8d2fdfe338f971780108f886a309196b6542dc4038a1ba456fac18e16c9975c9c60c47fa14ab953af372ebe4678dae70084eafc43245cf513142eabdf10319f433d7531f0d8b84b1b6dcaf8645644f0d52da661823b3de259ce2878eb20b5c2f76c348d9c06a2feaa216effd2e454530a037d8a43cd9641b55bf6e2d30777f29139941d81cba6664306a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34303035333134343036"_hex;
                s = "8122587ac547b17eeb670434c9a471b27ccf84207b20187763dc7eb19cbda4f5ab197972ee7d6930bd399e09e0cca27d0d5cc83222d6ab2a7c0e34ec7d4b95fd84b1f57a5344728e96ed08453ed31ba9c2fac3edb73ff9e937c1b1ba1a7dd0c927203333f7cb18c543d43bfa4c905abbb2d1385a764ef1023b3b822403b886b45c2b0ca23ad5c50009daf366c15b4a5bed78a3bddcd0c5abde0744a9fdfcde2dfbaa9c35d75f15f4b552d6e1fd4614481ab0a8b609fba2ceb207e32241a7a3ca8de02d36aea4d081514532e96345412fe78ed45a5007dce67fa1a88c29cd4c542b9d3ad44f84d21c0bc3081c54f7b9499e4c28e648f1db9732b7740100186b1f7fb111b5c179cb6e610dca7810547b181eaf4188348536069466c12980a92cb9f7471168f0a0c47e74d52fea5a22f70cb48de381e0419a625339cac99f4401399e28a1f10a2e02035e473c0d0317859f1010cd254a99aeb5a5d1b24c9af1da9cd5076208089762aef452c3981259d5196ae7cacaed7ff87cdc69a890a1b1614e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33303936343537353132"_hex;
                s = "7266f3390c4e83544de122f24f5c5df6e8e5d08d2caa08cdab672dc1d43dd0510855b15b1cbb90dc318dfd197e45b1262611ebe2204a7577deb5fbe93d36b587dcf79f9957b02daa33e27b19b623f55feb79fc5aebb21a55d61a2e397e528b5f68bdce0e8749f55f08dc4115354e5eb11add44d9e3dc4e43b89a0dfa8e0ca0a83aeee298c7baa0fd0a5f8afa4880c6fc16c1f543451dfdacfaea6e7587370793b6da0d6e9642156ad4ce85ff9e8fcb3e786b3f863a77b9e2e3fda7e9106a96003588ac0854094d4e2a6135342550c0cb134b1e8438ad95b80bae702bd62d7d07308092381650f00e712c96ea1e44eecfc27f9f0e79d038e905dbf4c21a5a536fc7dc8ae5bf219b7156f7ab685d9598fd165f9794b2c6d66ecce2a5451345f5b05dbea4b0087f384448955c530731e79cb987c1dc19e6ef0f64b728ebeccc8c77b817d7a8d2909601ed4fb1fc6042840c56758f11c991be89988bd4f07392510d804eb5cca1e38ca40482140e8534d97c26240b291196efb36e37035acf6b7b3b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32373834303235363230"_hex;
                s = "63e54127ba8252243aaf8d07eaf76a53b52b8970072098db5295cda173164f6fbe8114b3d80ff9bab4ee9f9bc91ddaa572aa3c5b186fbbf5b0b4c5efd0396195f9b6d14a840016bb24d0eab6dfa48784f549055780f2645673b60c359a2a2c9adfca78383366a40909b8fc3349f7e425bbfc78598369955945591dc4c332fa8187ceba20c25cc1baedddcfc03d31cff2ac92e5aa7227cd5ee17669fbe6843b750058695bdb32d15f1c2c6541318a6a73bb8ba2c1d0459c8b0df04952e6e2592851f26290101f30afab2e310d1417955b9f742cc8999a1419a053061ebecf896400555b99932c892f7427b536d4ec2e12dd158766c9a894b94a0767745abcdf3cdf31d34391e2b6d7934601741af881bc2241bebbb0bb0e7ea1fe317c6a49bed76fbbd5b11372a7202c84de24d92180209a8acf9863fe8c5c32c6bf9c2e18cc04c078b0b1521b9992757f8c1ef9051d25da1e99aa884ee797a5077990dd937ce3da6183dce345cb6cad0511a0b5b5e443d614637a65c7e6b46ad31fac8dcfcb0c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363138373837343138"_hex;
                s = "a9f6dbcb6e1b58bed27576c89fd8c1b66794525e9aec2511f151cf78c5915b38739aa8300d6e9dba0d016310b6f35be62a44aedd8823d771ddcdfec3b8bc4d9f63c0bad975441b3341faa7a6c88b39a9148ddff3eec71c2f511c42288ee5e425f779cdcdacfe47748cbfe043f889b0ce03ec56062abadb2f692dccf9bba3b369bcca678df72eb5eed4eb830a7d61c0041135cdb096578bbcb1b842d4309be995f6947843b4f1c7919000d696bbcdb516688f69c09722404a6766f22170f0f07b958f9159fd2b8bcda115e7b79409e3fcaca71af9b75e05cdf62c8b9b904283134be56b58c54c307cf0e590e69f5f180329375eea2c2b04567c6ac99df6560fb0fc5d93304e9640cfd8eee0b2d5a5bb05d2ac7b1df1b0e4c64a278a0c6c694cc1b3555396a6bad33261c820b242a3a640aa7d17f2710ee127eef804699d7b1df6a31742e9d58cadfe42ae7e1b9f93bb83bce387b56d7e92cdbbd7da8da58334257ed837d115eb95fcd197cfa9daeeaf9141dda689c011344489a95ccabb014ece"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363432363235323632"_hex;
                s = "5a16c6eb90bd39e932224ba1ab24e3283d8d0ba55ed6b24b993bf085ebb1a28ccbab385b1e1b644a891894320dd067e2e838580243dadb383ca796ecf1242ad1a9cfdaef6e226bf303d9482dc2af1b3e5d8cbcc40aeb52deb60c0b092d0beea7904c3fa0c3b40e487d6d3ed80f10e1aa6a17728ff9c3bbc5518296499d30583189877851a91ff6b4cc7ec2e7b339989613437004ab6999db14ff55c0baacdbbd859824b900b24c571d2710ec22f5e45052307c1765d95f94b99cf57a907925588058c8f7f7fa86dd87e87e013c884d099f9ece5d3bceb16e42789357e65e9b75b81a89e30ad8f2a97c74a35b095e7c70835a0192b28501c8e88265cbffd6e4c5c578ad57d1f881115165191570a19df33a536b909d051ed98e2d9d9851e32989e62357f273aea38da08426193b7c1039fd5220b071cffce9690fe86c7648c3318fd4984b25f509dcb798cd1410225a40193259025c34ba22955e6565103a4d01c78de604dde9e34b838b496bd1733207137000d767f6e3ce639ce5f19707a9ad"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36383234313839343336"_hex;
                s = "4b48edb460416b6e1dbeb87fd511aa579caaecef2bb7c7818e4d57ed2f1b1f656365d79545c7e392824212dc165d561af699376087a621c5b880fe3bd5084cd57ba6ea2cdf1f4821e2bf054511c9edbbcf2f46147aaf69b7d9d4c14bbcf51423e610761306c1caf1d46796165b22ef8dff2337314344fb5d80b38f1b38279ad65911cf5e19c13139f1f9c3e073e1a66f6656c29fa6ec91f84963cdf4718e1cfeb1a5d171a0cee5d90477df648c5618e3759201666c974f36639804c64c39402c2410f1e845cfdedb804b59a059ac1c29415eb14dc5707da5c2d190bea837ccddfbf998eda7deed2eadf3fe2cf39349cbab80461e0dc4548639686a4c475a3a432cd6216d43d83e62a2c7b44429ee42afe573d45f340304031837b98dd7be0326705dd7886d7eb26c5728c1e3433ce6bf2fd3877a48c06e34abecf9cab71813bb18a6c7fe6f4f4990da065ed10cfb05e9aef47848039b855ab0cd07c60c5fc56a6e1e5522a460afa946649474c9e66480d2a265ac1a29705571dc03310d50c11c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343834323435343235"_hex;
                s = "8bd972bf9fa52f2d1f2d564edb34310851c8c4b9f9136d8fe494cc79832ec497940b642e32466527cbd40af817e3ecb844bd62a49a53871acbaceb15c72a2deff8f7cbb8191985fbfd780adcb86a99c34c537f848b586b129e0a5e960f810b812c99d15b38e3657bc09f8ed4346a3dbcc16402e331a13839b7b23518786a67e2ac96a6ef7d9e931abc8fe188e3c349a27621b2da88c6fa45ddef436b420886cdb19fc031ee58201824ac06b5129c5137e10b6a701ad7b31d204e32c4a84e1b3766287985e721bdd89173626ae8c6b328dd26496b2726d5878b47590b38d0cdd7f31057dc066455d4ea8738c5dd251ea50815e96bd5a45eb6dba80dde52b63068196b0801b39f57b2d6c82e52e6bb66224046d1a2250fbe1dbad25e970bb0f43a325f23a40d9ee879909c300addf69295329c5cf1153cf4064917a734a2fe98f5b13a96d7c24e9469e763f84ed13dec5e5aab260663a1782c12a0b8286d96b2b0bb1a48df461726853ce60bf6ef8ca3820bfa5afb4ede207a8ba7825b7cff4cd8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "730a26b2c3fc2df474212c04fcb346b3b78a58c611351871ac1c5262867ce19a6f553880d68ba4c35827610b72bb044162b083fe9ffa7a82e2366090464821946f2ce1a8ea19b12c10c0e42a52ff805851c226748a9d65d7cb2057c9ee0beddd8ca02ae1bc36ced39925d2429d531c2e607bfbf0648708ef4f7d816c8839cc8c62036ac37e811f94a943198acf6e19c66cd829bde9dec9969eb4724e2d4ddc4f8c2bb2527007ddbaf2975937ece7f1779db28c610503e7ebbf0b03459a1f4794136842b57d04f14e22b98ef37939c64d08fb242cca548b7bb2c2d8b1df6bb8b0b7f6f38e47226e9fc0a4723c2a518ebdc5c4c8f15db74fe958bb567e55f092d3dc8af0128b353e2d273d574433c22cca579c479005b52c715eff1ef4eca8d82d2f6d7cc972fe0e75f19eeea3b77ea7fe26b1d29cedbfa7ef0737e4aa50a567b5fb417e356fa8034a72a53c5d1c0cd467808df6faeba89dddeaeb09c3ce7937450b41e7c1d4403b3033d3531adc24e9f5fe35d877a3e36fd3702289e69b460b97"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39e95e2dbbcf1817407146b19148aeccdc6b538729ae4f3bc240f4ed8cb9dc6a0e9cdf436bf5237e79e239a432a953ce3804a7a55bcc3f7a0d37d0123b1f046ecbf0eb33f52631e049b0692ba2e55db134f60e085c078b0cbbd66a74bd09c852fa9f029fdcc25679990dc482284de9fc74df343aa7197d84689011f61ec0d1d0fd3b811a918e80b9ede6c78c03f0ff6ec7e7ecba9cbd8a4124128034e425aacb004c042be805710e94ca4d36cc2f5d893036091950bb1663d3499f8ebe09ea2760e3939b835efa585834112a5515c8900db98a44914a6c3e5caead29b182e585092ee59126c9e6a7737d3b34b2fdaeb74ddb299cc3725687167d5c1f92d9186f3aefca61ad6c27283dbc821f6b5aacb238500a51f7439a8bf555ee26fba4c8613fc43ffcd254977f5f67095ef23e956721d5d71a8a73503106b2555c7433cabb304f30492c90b357127b09d45f171d7f4d4939c84516f96eb8f0693385e53a3cf8a6b4d0638b121e2e70b5451883ef368097c7a2010dfd889015eef0081513d7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84f1e37e7d52955a8d076e83fabce6a7153d49e771146ad665ac95b67eea85ecf8c126887c0b0e4ff2f4f3ca11ccc510fc4a062b3157edf20ff2763ed0c44ca8d48c571119bf5a4ada5d87eaf5c389cd8ce3a9ce70bfa98d5536fc731a2607066bb2cd0915511404e69ae5ba69bc197ed995f51d835bde74c5dd1d4e69a54445f3723692c3b201c28370e4892ea56c3d2b8354489a728495e7d7d611e82c739d53ded82f1e72c4e7273ec63c8fc4cd13241219659d9c6c8620a455477587737ab97959a91efabc1e1de8218bb67466b8e890f47b5ae46266ac06e06247f3a169a31f9fafa268bd453c67b77f7ca9a53adee42b3a9acd4af467f7defbcfb96f087717137bcc0bfb41f5add94af4981c00d95f992995aa3ae406dd6df56a7070834d201eb1cd12c7ca87779de0eb38dbb92f4e7f6f78dd224d0dee4b12b20836155553b0a76e2cc071abb59a70ab393679ca458d18f9a5ec69d1d70b074d6cc8f9c3d5143de1c53dac156d36d28660953ac68670e34317a8864cf7c7214e5c9c33"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "875c6f8f3395f75024b7ade4f6b3004c4607aa6cc99168d01ccd6cb481b51fb8a2bb44bd10a0e7768f282653ab6ca340b044ad03e09abd01bd0962a5e3724ff7a49ffee7818dd5acd0a6968c5c458c207d0f77eff3f8a2be4b559314b02e413865ecbfc0bf7ed7e66ae10b86efa9873eff30a17aedbf81cd98811ba228543ece8b14f64ca98dd26aa5ee83a1847d6fdabb8140e4dfe48db39f6a48a825b7af48c1e1bd124a2f6b76d0e37f76f4ba986ab3afeb55c7cf2f45021dc325322ae61b531f43242c65ba8b4a550801e966602730cc186bf4678d300d5783da4bb9d9ad54aceb656ec7e4598e3c209ac48e1b775b68896fe282bc2e3bf9cac99c601d64de18d31d1892b3098fae2933854f822c49faa09e079c4ffa9dd2c006471263f02e7e8eaf0345139482cd82ed8e6d3e080887ed13f2e65819a1dcdb6d3f5692f5ec7f3a0609f2f71ca4564d58f60a0311be5b597ddda9b07b52541ea924cc05146243d8b3899d3ab001184767f896f0e044224d96c975127c1c987a84d15cfa12"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bed5c44c1e2a041c2130caf34ce43e4efdde6f7846c30d5a1bbdd88c266485322b1fd6d6353e85ca4538d862394fd32180b36c10b314a8823a6c4a78cb62b5b9884a6ca480ad2993d4f209d1895f9a4182a14d47f09a13c9c9bbaf211d07653f8c610c16d156c931df9436bc7b9ef929dede2c1d59a2b0441290f51825ef44964564e3420dcf3c1622a8227a82b8d3806eb5d246a3b0527cde1be3f219a9015653f3f8a3956d055eff6a90f42b48f3fae5dc57d6be111956e6a9b6ef52dc35ef5ac363f1ce802c4c09555dd343ad0dda96b467166ac515830e9e2ee40d56e68558408b1fb71cbc4a964ebd832e315d8bee13529314a8ae346f4d12f5ef00686f4ec26f9479f57e69244264d81a0fa39ba7670cdf2db9684e0b70d2864c4f2514e498e87d474e65cb188835d5fd8c34e5432944cc0874eadcd0a3e62d9f533583d33f5a99af63d6cf429363f58f691deb4a95ff409e32c393f344c5e0347b2f12125f6e3944f563d59c6539c661129f300267dde299972f02dcc240bb8541acf2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e28f546283f9ac74cc99c6bca79bc208e47220cfb0717aabc521ac55119ec6bbcac880bed0007c04eef92a24b091d9a09ee5d3b5be790abdb2c98a07313d505fc876adcbb1089026940e03dfc10fb46a0c2a764ebe86e51ecc2ab489f56daf38764fc0a36a9cb4529367c9880bfd7631c340fb7fbac0edd2e1def00d65bd52e597e2eba1be1e41bd89a00f5c66fbc18b93e9cc1b5be962780f6d7a9c6d375a28556114f37a8a3606dcd68c8128bf7a7e5f1205778bcf3048bd4f7c10cbdb4ae759954c4e4db0a9fe4df270c41bb86885dbdd8cb7e72a33322238a2d29615a2f01e9fc59c230c2cce58ad096c2de5071e020f76c8c39874f1de677dd5d2f96ab4dc145098d25b740b5279f05713daff54ba695f950039882059cfc2f86c35a0501b8d0914aa59a806e8d1403fb2eef163ba1d6e3d1e18dc99c622f8c2d360bfab2c9e8fd9d74a027e466fbcf4fa56777ee0fea7e04ae1901e65b5361f97146d7f4a550adf77539fabb7135967dc16f8ca99e8283dd69627cf27cb9d2df20bbbb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "72a383f98af947949576c3f27ccb8a066f4021cc3b61ca7c5b7050cfbba3ad2377376980c0d2152d6b00e4168b2552495a225a4018673b29ffb0d1510cc93bc298b448335ad906dd3e72405fad46d835054e712daef58757ef3d43ea53c6a20c5e010cf57a7aa5fa699ed56439977c599eb972d05021b58416da010f8ae3d7fa286516fa77df4084c8ea22ba2347aa7cf7f4d883ac99d0bbcad0cd2ae386c42f74c80b1839c255275156331e4a1788582a9c2fe59f71059eba4559b514e2905bc805b3e73d09c455f8aa4afd8e2c7cd665485525a9c9cc8290c209f5d9dfb500eedbc6609dd93c677ed9f03980bfbe7129d9c39f6ef38cf5b1db6e5c88ad4ca25311f7f1a874fb28610deef8a09dfb44f925466d1d3ed040669b28aa0eeb9f4e08c25bf9f04efb2b94235ad3a8230cf5166add4b736c74b7a49895ffff8e1aabaa0451ec70444c7af3a71d92d90c698cd4a470aa2acc6e8d6809d6b7e2f86bb8d293a5070cd864f0467472a338699d695b36601a592ce114abb0a574f92551f5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78d3509284dc06b54583e11ddf2507d9e50bdbf079fc319d107bc2527c1b742f4c759320fa22435d74e94253feb4a379128e7f33c5f3462fbfb92ff40c10b23f8bdc5890114757364207768014380fc16ebeaf22a7b1a9366f3fbbbb912347f1ef595d742a976b69377533e7b61d3237c3693cf43b34f92773497b8df7ac0660f67439aaa66fe179b34d9dd4d013e8fab958fbe2a27ce84b6d1c3c2998a50d41b6b38000191673c23792db2fe47e4ddd3b5396c65dc44812e55298b8b50b5a2a01d508b9d215986113b099717c3a4ee930f479308c20c26630aa5419c2589c8cbbafa7eaebd71fca9e751793629d767be8709fef9177d6631a48731f5e59fc7e98cd466375e8775ba935f12b45575819ecef4d78d85b6e984d90d41c93bb03c832fe415fb567a1d951f7dbdf407beef8caa3a741ca7c7729c8d8ba98896dbe52d9785feb49332e646771e7d84b75476aafa0a54512806339cb54ec1c70943beb508966741eba4d39c2fe535aa82a9cb92eec99d38540efa3e39fbc02d757ad74"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a1cfce66b3f9fabc4aeef10d33caca74f998b299730621024b8e7892b96b9b263b9404f01efbb13e0bb34092cd4f89c4be81b9f64c6979491dfa7f41c18d3dd5a76724834e909fa45cfcb2ccf087d82e9177e1d48266503f87913b33653d07eb07fdebab36ecf98a163cb0fc66689a2d706a9b17d805536e903984580ec6cbe5b0020029020d0011f032b6014ac14dcfbdd020c8fdc017cadc2bdc1bfbde32710f8283437393e934987792c501bf067efd9ae8b64a4d95501d2fdda3b9a94eb31fbdf5a938dd0b9aad441be1c4f2833036883e7240988e875ab44585f465c690f84a4d334d9b6972590cb5e3982cf068caaf86ca0b1ad759e9fb1156c0defc9ea0268ed86f73297e30173f518f8bdd385acc1527fb4f637893342e334a14020096f1af32196d7864d9cb4c7663e235712204159710446c5559882875f33d91df39109b8adcb4417ac740ecf0217aadb82a1e9d9ffa9bf6ce46944bd652424fc801bc989e04247a56eb1f5f3197d92d47ccaa63e535874170a78d6d9e53484a29"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6886f7654b53a37f9bdfa88cf4eec9b116f6a011cd53b6fa7ec84695e9c8cb8a245cfa96d2d899aefaebc63a2fc5d2bdedef554eee82ec3cbdc78091b6179e4701735643bcfcc61846c8873fe910fcf7c76dee5426e2083a20afb5028bb138cb689767dbe1d2eb307161578b6cb02d45b6b10c2ee71436294b845ac441950ffcc6cb262c9716b8c43657cd4d0a8caf19fd970455d7fcbdf3c33115016d5da3180ee50bcfd2b6c5679c4fbb477e7f8745b456fe1811a557098d04e9a2c36d201383f98b400552679228b906992ae5661c73040ece6bdcd66b0240e0c79c1b4c0d0c1ae0a05ec6aaa4d5f56b32ca17ef30ec29553ee6524e1cb24f694293730a6c700283af2ee706aa0704a94bc57717454ca709e5ff0f9d7d846ecad905e7a0b74716a02ee59170ce38de7cda6f3782503317d449cfbad13e84c562c9a4020df9bfef652e1cfbdbf0ecd32035d2b468c1604bb86c216259e0abfa14eea7e61fdeb6b9428945c944d15349f91681a3f0c438370ad1c7f8b2e3cbb402bd2f1e2ad6"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "610120f9cd9523d83aa4eccedbcb617d7ab19acd08ad62d18558ec900d5c14ba303662678571a10f047e3285cbf2b3c7032033245a523fb16b83f1d81f159c16c51978c61383fcb6328c50faddf5df4ef97315f537e02f94dd4ac1069b44daa63d1eb04e5310200caec065ceff7dc295ac778a919a54b7fbcbd6bf4fd48da66fed918990cb5ef9b7f740b7716cbde27184824a4f64d1e872653572c50b7fc5fc03ed769f70c3ac5640086866002cfd9504289d68b4b5e9d59d753214816a1e1eee68685cf1df2b155b6971c933e358fd3d5c7a97fe262a3c84f51d3dc2a89a50ad31d6f1d3347e58e11f8d7962dc9d1a6245e78f3baa7fa22dd2bf713a003545a53aa8a69e582b37ec2d1bda27299bc79bb27eac4e6879bc8a039892b35e2fb21bbbbb6de2767e80815c29f8d2ccd68d1e8e75ff1f2220247943e58a4ba3716a905b9f2b268d4bea891d3e3da1cf2f285cca322b4e5599c968f26b1ae2953f6f99efbf2149313a80fd01ffa70b528a7b38dc8cdcfc93ff641e77abbfccf1a110"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "042bea79b22418311d75e86d0c05a9ab4905e59b3e0b12fa0b1e372bbf66690e1c23145b23b92735f2214ac1eac2cc4045e299f40f7e418c91ff328e68bf17466eb3e28de3139ec23b57ce5aafbc1e0e1521a292935a35c6d6189a42a81c573f8be9a0cf80b34457392faf031b632544fdd50285a7fa82a4ae6150b60dd9a32cfd131b246d6c89fc92e9a1df96857a6b56fd9c897aa4c8b4ee8e10dcd0ee80334d2261f02930a3a54a3477c8e155731878637256f70853484930d180a37c0b604aaaf649ce93f886a5f9aaf86e529286bf1ab5c8e189d44a28814d5e1c7e5c376d8e80ece5686d6ebab90a51773be4a919b22bde123ceed06c76d2c1af878540b5ec81ce067959ea8333e2340a9f9d7f2b22e1052e7478382ca937cbdad62a6d8fa409170ef2a03299126965d558978cad7d399a683d19b76bc598b94f6c94c33c6bb1652d44508c777de0da7b651e7c938e802bac8355d3503029cd1725e2dd70a90627df66c04989e541a56dc7df6a6a24175d921ecdcfdcd0e8b454de4a6e"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "1d8bfdc0ddfb312f4b902bd241cb5750f80312688daf5e29ec6fb8cb085fc2978b25f101483e99d6c3a04e7a66e800257ecde1ef18c7ba17eeecd94d89245d15a6690be9d61faa9c94cefd06a24ad229f521688af44a2b26f726268607a3e4c63228261ac1bdfe714ff0414d6029772e53243770d735dbe211df1ce96056431405c2c612ce307957c5e7a7616bfe877148650de4ef0b4cb342aabc9315beab5e33f53986efa2b49de12b7dd1ae3676ba09a2aeec8c39c65dd44ce408a8c87d91e2225ee776cc1d924f354ba2e91c0d52b55fff4ccca2cf6ee76ee6b9588ba8f2d1610a7c7ec520602b37e206095e658fa144393de3fa47d048a017ed93ab89f835b63f8232c3f31eaeabe76a056c53d87f2349198c73cdbe9bc89085f610cbbe5f5ba65a0190d7339f2c26a7e3913aa98aca138bd87e6178c169d8a120eb5e74c51bf5040214efdccf7f9fc61624079081f9faf9c70b294bce55895eef3627cfec1cbd488940f7dc5f34b386fac86a569760bd490e856d364912ea354d4abd97"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "b01d88bdc0b6086a22c3ddd9b04a4e4a95c3b2550dc7e6c06e7a36ab17ecabfc5606a06f7ae7a0fe4723743e403112c7fc08800ecb687a64de4be5ea2482600fbeb01b46fc799b4206bacffa8c38d27c99cadaa0af333a8002829398d1996d1e8f64688670e30f14e96d9977056f310ffaa9d10b83d1c0eec4d3d73f64adaa343fb8b206aeeb2990342013ff42c7242dcf30f1653488b4976dff36a79853cba1dd28c6447e626e14a92459366208b7cadc5442c1a0bf0d4d8be6e32d5306173112742a873e8c4db781cd362b4ef198f32c750b44effe3bcb0448426f090941ed4c151c9b75588ac0867a2f468dc2fa46f0be778a8d6f2ba01ff47534c6d71d62109dea6741c60142580a1f4e22b1761200f4f1599970e1c456496ff82525085c0a12eea8c412b929bb1873cd7dbb2ab35b9eef309d9f0617fd37fb3c56a5bc84d965098dd6b0c058908f9cbde6858f0d0734726c593f2bcec32236741e110acb9d536a7942f67f4c8a4b06478229bab09e8a3ec73930b75e82fd4ac8e466fa5b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "52c636d91f3a8c269ea2be767293a325a7addd7b1026251d45c1e99d818f6f8b1d52306768d163b9d0de3600e18b8e6fc3d9e874ccfcef45e4011ebacf3500e712f36863e53cb01db1749798941d557428ac017d22be753eb401df9a96261126b017bceadb8a58e2d85bd51797e59cf9b34b9a42ad90ea441da58fd986e023d5f617498be1304552cb6f3b27a44a6dc9289a29f10ba879c82ccfbaf7468f65ffd1d9b1f44f60480a8743e4110a454d6b88f8f6870a32336510a0e967b352b5f73bd6a8f39ca6f40b65c016149ab7449452a59ec87dfaaef33fed36f1759dc4485b63ee302d302441502c61b1d8427843080d968341873b272991a0ecf9c19d6f37170ca7cdb8a3068acc8d6a7aa4e8a33ef463097a7978dfeea14018732672df9a124f7b3164f3ccc527a8c0d7a2d75abc03efce9adba296558fbb1110b4c6e7c8f7952f67bc558219d2a836c673467a4995140d9d7cc377adca9898f8ace6446feb50e5b744f76a7f75f103b654096fd2902fd863452ab4bc0f89c457bf1aba"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bcf0f11694a2a707898454a81625b83e3fe9a96155efad7cacd049c348c23eb728fcb3eaf395015657059129328f19f6e44f050d10783adfa384f20c25ac545c38771a0c46c9724a000868043d60cb9c688595c134022a0b6e99d594581f94638d24cff674a1f2ebc77c0d13a8dbd61848bb0595c6e201608f00c75c5cec3d3091bdaaf5d9c7cc60337591edf4850e7b782d45292baa165d99a811d79fbdd75d8389a270507d3eb26d5c240ef00869d910883ccb5436b36907a82e4058b5a2c6a27e092ef4cdcd5c98bb410bf229d8fe9520559e8167c0b1fd3b94632209bfe0332892f879f25afbba6fb67cb1dfc225746df618ada74a2c085bdbaec3b4f6d675504af6221ddd35db01829df1fd386236df6ee476a3660178a7408dff69a86feb522cbedf7ff866d5878bcaf19e82f09bfe2e6d33b4fb70e1467caceeeae4e5e0d8c81b0a7d3e17ec594c9be9c9ec51c23aae99c81fe919d942de167eee370c605564b8dbf1fee860c6e052a280c7190fda3c2f8c1f401e82c4dc1d67c73e78"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "58384fb43afccf19cdd00c2006d5a6bdd12a5ac149ba6b21d5dbfca1b394624007fa5a729a8d4e308daacece63654606e9be32ae8184ce9aa237cdeb44ce1c961a4598192a609d1edce2b9a9b8944cff2c9bfeec9e2fe6c7887f04e1911d7fdc994cdcc5c1282bbb2a519d4e6433bf087790c8833fc63e9236463121ade094e082d72a456ef9eaf928b2d38a7274b23a5136118e82b897414bb6cd0177298aac6970f179403d152553fc2d7e13e40c3b4875e6bc3fda904582ee49817f39e3c79b8ef70105de88387484595059453f9f57b52f1e79f5226ea2f8168e2e48de1d0d544daad205f6c32a6865f66acd4b318834741553cb1bce7a7c06e4c33cf51eabcbbe44626f53f7a2729cefda59ecba55ffb4bccb746dbd7689e7f3c1f29a6f26180fdfb143b16d10e58c72d4f8abb3dc3d35cabebe7928b5d61d5c1c9bed922bd44badf9db2f0e29f54d950a9978b1408a2935c6ab9e2491bb0624a888d306692fcf71e4c93bfd38ce6590e022c8e5bef0a9b5a3152edcc61c7ab8bdeef219"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e71b92c27a22e5003c8ff639720b5b809b34f1f2797135bb4ce06a7d1f6569c5cc4910d7cd0bbb15ec6d0cbeb5612eb9645eab205130e3cf04a0011f56728eb447d26dc77a4ecaba396ae84ff1481422d83e4418f4858cf6639b831105d0f8c428fa9dc69e380dcd77d8d30c362b1ca067bbaf124aaaa0b0ce4bbe9afa7f2787b6b8c476b6139960e1b436f8b13a1b85ffad382e316223261d7e7a5f2300cfc04e51957ea4a0a65d19596c3034239b8bf8f0bea6f0d6d749e2d3df8241e4622204c334cd748c4d0254fac93db64fbbaf79ecad12ad19c74d944970779a6401135a5a8cbb32b6334988df3424c3993c157620988aee3bf276eca44daaa5370265a6ddbcee5d207670c0d46d555027c1854ba9221bb86dcc4df2fa8e99833e362147c8d2c4598f467d0ffb8ceb18c9187511b4135ea068d9961bd07ee0fe56b7dabb222ac542746daa4a45cfd77f0213f7e5bcdbfebb5a4ad18d79a599d0755dbaaa19fd03f4bd8cf9c7c8416c14d23b0ca54de5f0492d2d9ced1c8b5cb79ccb5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a9f21db6f3fe415a344b61db76ebf60a84ff0df70ecb5cd14a16aafdbfbf895303d9eb831d7a9bed89ee3ca737f49643b077a824dc3f433c00ef1b693f82d30449fcd323a48c84cc5af375d7bfa2d3ad882480225fe4a6adf05c0341a7913ab931bd085134fe470003d3a612d88ff0da54af1bede6bfd58f19901de43ba61c72d5f96302b6428bf03847d54ec1d74921787ba1fedc480605fcb45b74d37dd0abb4067f97e28ccbb86bc0a1c05eeb6582984606be21574bbb7bc04edef528a8581eb135e971c6dbba21b1155e777da9f6c6ac182b4de0c9ebfbc59c71ee6688d9b054cf7772f596fc9f6e87bca4ee8df7d6267e29824b1a70840c69e1d162858ece7de3bf08072f5caaadd1b8c6617fa7888bd5e9d5367be064cc82ac4b59b240e0e7397060417e6386a623c96bc7f9bc1da4365e08c22cbdd2ef1a4a77dfef4bbb3e4cbeee7012c25ce52ceefa18bf5056583109030f91d92de8200f3b202efb9cf58d375df1dfee699586298b9eef0d1e99466bd47a0d128fb9089ec6c87e9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "70dab9aba45e87811d667c5e8324d1f0cc50071c306e6877acfb9a58e4b74798b193159021875e18dde242a51c3885cc51573a95eee4029f663222e0fefd68cd4fa71c6fca4ee8e2876e62bf8211e0986b4e1e7afb2c19ddd5e4e184a77cb11a045f77bd2622665732d1674111166924faf5b935eb2bf4ac8cd47b63ac0078c5ec05d4dedc91595c2b3f5c8dc399051ed0654401cae20128c3dab28e7668b05b4da624fbfab83e425031c8b8f4bb76b78e2e666eb854b0af342011a5e19bb252f90a94ef9c916a945e3e1fa926639425c2e2954533fdab1f6b944650249478792339d9b2f77b46b094c986720029e040c5c6b7c14b777fc9a164004a5b011b15ce6cab8d080f9a006546be010591c638d601d775637f2ed7ab94cc786b05e0ea7b0b0b4c7d1c730de93fec5380c1fa76501f7e3a8eeb26287b27fca17c30952893136a5c12c48163c9e7796154b0b2d6cc7a5d9491a9c777e6d38c60413c5dfe921962ebad11fc6771ee4f3cef2a2717a78bb6ae0895160818881798b58d0595"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f8d0b7fc6934a3eb7ec6feb90bc8ed2c457eeac964f0fa9ce8924218c5dd38ce85083e657bbd19ce6d6ddb5422315c067ea8307381c7275e9757f11f94723bed3a174728555dea45c8deb3265879d95f005d6bbfb4c75ecc7452a20b923f78d681a010a2c5d1519841383cfa8b299ab60db09905ae9914c7ccf1d1bcb578eede63da12ab0b16231dd40f3e756a3ee84716c64db348b1bc3fd49dce7bee98a16a1f6d9190d57b940a265a31f8298beb1a1f759be17724c5f911ca1d8bc9f2233eddb09fe51d2d36ed1976f0431f06b8ffa848105bf019d30d7d8d05303daebb56980d1a696f1dc9224164932dfd119e8db7b87e44e0dcfa1b76aa2dfba2beba02f14d1410dfdedd27832c03840ff86844b41b73781195c820aae42f756959775f6038f9615bd319f2788756afd3f37d384a775c4d6484ad3dddd7cb9a45e2b750d73f4f802e60efebcc235630ace45f2c50a2d6fbfc10b951e36c363640ea762ce6ed57649be8b49a45c987a66b86c2d590056f7d4a178e1563bb07ed8cbb8b0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "312fe5046619324e6b32a385bccabb713d787ff7a7fc9527bf1b57627940365fc84cb858435f078322935d0384728dc77a56e6429adb6ab9c9e3b6a250363d3a529c7bead31fcc57590faec372f816148fc73c8e0eed5b6dc591a10ca6711eb121eea991afd5b8a820caa377071a04a11f3ea526d150ce9e6f7e51522fa7b86ea5e03a4a37c44cf77c35b4907febb1fbd6d6d9c9f117dc0c41b465dc2afbdd09b93237564a4814cb2831a095fe9862d1f607a31905d45d6946a3d5b6377d85b424b99fe36e1d0fc5c7e74bdc6588bba4af33b9742e5727b32c24b2937a3fae82df3734e86b79fe21d9810fef8d6be753fdfccbdf78d735c4223cc8e7781f111da2d83a63288995d9baf1868158ec3117042a4bc4125f7db1a2e95877fe1437701f31955a20fa05e687ca84b6a8a4dcbf34ef627528bdd22a3daeb69761c47b8799d1e24eccbaa0cfd3f5684d98c5c69a79942846c745bfab428eeadd4dc52cf3827c08547c7e8a8fb0dc149e8b043a49ebd2160e0372733d38000581e775d0c7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "69d4190ab2eb0b4a59fe3692c6b99dd3ec7a8498f3b81dbbc4709b77ad49ae344a68acc33ec05176a5c1f572dca5ca962d51bab6381d0dd050f539fb5f6532a3c811d2cbde95b043d854c50f479ccafa3cd7ddce182558693c701df66747e537e29adb9c7e2ec3f345fa5010ff3f8ca5cf4de31139dc3f9ed93b4f7ee77bf9bd29757f330e259e6ddd5e40f86152f26c76cf7a778b7565287406e431c440812420bb1c9e36614b51745cd35ad18a018acaf3a8871e904988b66e2a09662f88810bf5bfc17dd7465abb77d2f625ca83ccf2e2f187b217c28cc0818f04e259ecd59c0ce07f6732eb18c72fbd007a1f070c554424185ba45e9eb1b10b0555f8d4678fd7f7e91c92de9f2a11c45be7dc1366ffc3ab71f263eb892ecef25353bec9ca6ab78668cb9b66a9d0cd68b4df0b2ee17940fc1c66915cf30be060952cba3b4237bebf7ca4b59023a9293c6634912a90291528e48b96542a0560da0c457407bf454a9ce5919c70e62536b8e5e26f95940a2a6446a00e9ca64e710012d07c9904"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39d628b828f44dad501db99f8deb5c33363c043b4ba041c762a0ab6c7edc993a6ca165e15981f82ef30cf91e679ad3357514a6a88f45107ff7675587d2a78ff667d2cf66946a8be5b7dbd535c530a9af96d2ab04902b9ea2f790e10c109950180e61759de708ae8167e1b8ba43ef317d8a141e70618184df8fb054b891d6913649df603e3918b0b22a85c0e19551a6d56bad91cae1fd99dfc3abebb3fa5eba6be1c26b103dbfa36a89cd595e4ed881393b7296a50a237edc331e18b7d21983b66ff9ec5c321955ded14e179752b32117a552b513a1b8a94852c02ead9457d6c82c33ec95be7cf8eff606892d1aa345e0e3fe9b6ceb558976002c8baf26a494adf5a79628ede5c99c9afd706f262fd42272e2aad790b0d8d034e6fe056832986b0757053d25899bd78a5d773714d1e52d7121518e3931ac751250b6f868971648e2a1a1b424b80ec09c1fe153e6edc532d737efce26c025ffe0713327e5ff37f692792974a6873a290589a9b888d6d82ea856a523c9f3a6b2edaaf3d76da41fe0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "54a5a3186bbdf9a08df3b3bb343979c4e74e3e6d507b6b81e1aa34421fee0fc53f9dc5b0f80ad535e25caf47ff3e3abb729e271e2e3d945b61e56fb29e32e7d93e748474276252e3b3f05ba709a1909b95414da0ada0effd5ea3572560fd24d3bfe2798006c322acdfb7caeab12b82169b72771b07030370f301a31f0b919724a5594d9b48bb5c8945cebae01653766b7100103aaa38d4c0080641fb7d946c2ba66bebc4e6df76c127eedd9b83dd239357ecd3c7a4e0370b016d542203963e962aba5ad8305d2980b35b8e4f65e2387afa912c13ac7f725b91badedb1332b21e15692752d474fcfe1b408d5c2bc2e29f67b9ab76cdfd64bbeb809ce9e89ca21722b4e04f03bbcf070df8387485d7a2c3fa0b0b3cd7e17562510dad0ffb1c16d838b042ab85d58fbf4429eb91dc9fb499d54cb92300d331dc5609b270dbe639522d84378b529dd7b592c5eaebefd4e032401b073501a4fe1530851c2d845263b0c988d6f49e7dea2cb4925f9ecaf77365bf01894202783cb4c79f3370b74ea789"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4ed9724ed7882a0ea9d61cf2d1bfb1c042d94b2427d71079625d8d59f7e5632a578521973bd496cdabf1e9dd45bac456440930d221b95cc4d2080e96c963685b909000c45d62835b9e68ddc728e9c03a4831a90435abab57a99affcc7270b490b850721609f568fa4a404ff8b054345e1d8e4edb9234330f9dbe60e4ee2042a5bfb28d3a11a9fd03655687561938c45bafc64f59d0d5d72fd23bc40a521dda3e2b4a7b69b6047193cf8dc3fee3fd299fe88b58fa052bce5c4af62baf548bd5fa8c08bf6aa17eddb8fd175c40128d1efc64e40e08076f738a5da495b1e9e0a2f52f1acc1936c905fb69871de2159aa5b4accfeca00764ecbd03f0c9a2d8231f26ce5e7aef43f271d3623459930a0d99a5a41c726085113509c15abaecd8e78f25fb2e5c3983afda6eadd0e68d742613d085ea1db524f8d97e189136b6481e3e61b7f5290f2d10b15a9b93a5fb4a6891f5e4a341797e5fe27e3c202d267d76be409a3b72b15e406729a2e56c9b9d7cda30283d7dd352c88ea82350e4a12fa17b97"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a855da78c44be74dddee634157b685a227714cbb6a21288cdbf3a87aa48b1da98cd590a049d2ab715136d147142e5526bec5d1d08a24d99e9965242fed7c0e9e3a94c6cd76511083b7fc244db4b8efa094624564feb61992b02b3f7724fbe6f53f4f1220fe03f28a6defec4632cd074636fc129d75f7c12f2da83903b1b40e2415096f3bf3955d1bc231f643cd964463199da00df164f7ebdd967b2415ed460f9d26bdf6542ad355dc0547ddfc93c272902eb0698a53b0d06eac9acb9d54d335c4a460c97fd778dda40854abb7086beff78928b61604dd94f8e0bf8ed54185c3bf14cb8bbbd79c6f9da3888eee31692b30f370f8d6e2716daf73eb5f318ed4f99705f019eed29b2ba5fa6193eb0049fddecff02ed19300102e27be3c85d231bca8cd1c24e175e95fbc2a3bf8e23e2b8a622f48cd100672e058c2ca2f3b1855eddb06b6e707e1f05956a4683976749193faeccb5e25af7a99528da61c686269b49ea5b768768d7f624a1600e403db229a85e8644f4dd7147315cedbdc85703c89"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5b7d079d667b60b3508089031b604327bbcdaedc887c9530ba1554694dfaf081ac91fd339323793d862786c92696f1d9523cc8aac14dba90a6363bee9a93fcd7751973ecb70cd812725f1190d62f9d950a552336eeec2f2759c4d347d4b75717c46365c684acfaac48ffa5a3a74748bd13d4ce461df0095bc2fe74b565f629be5407985ca7ceaac43810e42951e7a7abd8c2f548deca74f34afa47c2d72b85eea9cd2434d4b5ba81f9eec865a2c4ae17d4fe00aced59bc20f0e8a4e9b5fe98da5b7859719fea29b643323f2fb05f4bba83804ba1ae3040e62331d4ee15ad82221f14abe7a9dc440851fb97708b120e4d32e37327d103b626a64845a76d24762d12e4210e166a87fa77f8e2f2c9feda8dfaaefa10774480b8e6f6bd912c4048b77ab3cd7684c348c3ca398ca0c06393e83defa0eea7034c97695e7556facef23cc8a0e9d395080fbd94b085380550deca1a2952554873be0936714c5d78ca53d36728919a7c4e7069ce97bf215da1d02cf14068c16100f8f78baba2d19abd306e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8574a80f36973bf6b986c7b81bc6d289b118caafffc31d2c99d2dccc1e6611d598dda3fd7c22cf10c7729fa84a87e3f19ff4bf11a96018694b7d829bc003009eb104e8955e8a8717f2fa89220281fed0878b9febf77e5b81e93515a8541d7a4b8a4c008a298d317e7b82c826b5d67bf04d459a5d5fd7f69389dfbb25146c4805cab1aadd009d7b00956ba93f6d02f5266d8b06e28b346b06f1c3501cef04a1c607d7f85ee037178e6f2b0dde307eb6f5f88229541cb3d37e495cb5997264a0c1342713e8548e318681a783381dec9d6524f5c80c437b997f2fb95c80ca7158d0ebd531b4c9bafb19ad9ea0542217c1ad965ee6f1afa5a48becbf65b380f1946dcc85fbcd82fb90011e650dd1e507dd19037ec1f2ac98a87c25a6f588aa6b6f93d35b83c1e8e09152470dae2af8afc1fb2146cd426fe8d3cae5a80c1a63c7fc42825226bec26d57fb62bd048fcd921b8be7aa8d024926fe3cf5c5e3e7f5b2f50b33dea547389e40fd67a8523cd5facb29e97583f26a34f1ed880869800a4b35d6"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7857b1fe06fcc417c07766a9892ae30eaca65df7474575a70d8e286fc22e3092dcd23446b101cf27951eeb2cf879d320b2bd12f45b79c10018178532d8fc4d708583adb4d7d7469cd5362c074c519106c761228557d4280dadd907b27675e318033ad32ea71e001c3e7f68f6dc07509396a61db29a9ad376f406ff35aeaebf8c6fd0bf7df4bb721c91dfdffa933f37db0bee5d4f7d34f3df2a3a0f383e443647838d7c02ca87d9d79814ee9d5b2860fdfea5577702dbc829610ee1eb13f6e6f0636f39c5ec537c0695bca4971dcab6907e907650b92b96d5d64c6de52c4d986d458f0195345b1e84fbeaa483e3c926167a0d1a977024aef2474c31752515b55021048d2fc23ecc5ec5126c57b18a1656ed49aa90e0cb51e77e56507d7fc60b1f761354423b110d44c67664781e5caecb5da5475b01ab2356993378491c2ce4fbc41badf110c33bd0b78cd19540d8aaf27bc9f3450ce7579c87ee40a454133093ad89b29b99b4b15c21f072bd2f5c991e6a98a23fefc06121ba81540cad7e2a34"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9393a9989ba865a8be0fee265ee6b5b3cb9380019e3c4377521a729a968dee0374b547e94e6b12d860bdfd5197787d35208ae3e8d6a689d031072f6b993b7a8900a278fbf1c07dadcba6b4074375c666e035c2f12d158f626277d7d4b781c8b6bd71a97f575f08c4520b2d66588756b9fc8603a346cec73eba4e8350d7570e923cf84c1b33ad7bdd507d87c3ddf01084703f47d423a5abacb7a6caf5bf7ac4c61cfc91ba9483e7b3cbf9a094aae25b17468fb3a3b6a42d23225bd4859d2279037de2ff446eb441de7060a675b61b3e591a4f854265ffe937bcf575ea85b84046af568a298902774ad9a888847f3d20496d8c570da907686e3441998857e3927feebbf5540d734fc7093263b0efdc33f32f93b936d8f81b920745c2c854266059c92120435b3f41d7a3a5a7d2c3571a15db2136362f736e099e893785876f0ff0b51d3006417235129ba4480c4164329f1f9c6aaf48c93411e388f00cd8b6b125f4f1d3fbf21ee7ad4355a416101cd857f6ae91958aa88b31134a7b6906aa184d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b77b9c5862c9fd0f4e4d72fb7bcb23b2a5d2124f13aa7001275451a10148993a3e846e0b29157aa3a1a8ae643e2ee84a459b033201692697eff53b3606e85c6649d76c8288899499f2751918879a034d616543c0b7cfb215744b8dd03e50ce4eeda2891ddb8ca9c568ccf98b3128be25e191a4462f6458c718b33e5f519e3de152b0ec691f2f5b8f3cc150ce37814095001cd60b3dc6e694a3df5aab7a0c1b2dc152c26901294b01cba43b74e4e28d14a9a614d0198c30fe578831c8d1b51b1db0dc34f6c47de0d38d20efd1afc8d385e6bffeae43280f62a5f2715af79af64f04d126e1dd36067bb44d01ebc78769766bd4332a43dba1b124a4cbed381ccb43952ee4cc19201f05558c11f51ab5e76b76b01fcd036a949ec9e4d7153fb25a1aafdc8e0f1754bb59ffecb9a6fd9cb05d527661bc013cb73cec4ad1ab046e1e94b6d518604c7ce7bae1dd1319b612cde529a6ae588c4c6a6a7669e82e141ba6352e4552fdf05d9d1e3fa217ac5b38629d81ed749629ec53f3b30f29df883fa68e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6ae7425610f6d9b6cf5a358bdff3bdd00802d55cdaba2201794738b900489dfeb11d921d87449ef9d1e5b0deae4bdb26cc13c9916a767cde8e0ef67de6f8042e1d5f600bf707f65380f971222d37088edaafa4909ed566694601e25bec8c3128dd61e664688b5ce2ed2f626a5b618bb10d12cc78ebbb0f3cd6883b6476fe4f89008d9e8feb7e835fa873f2d6d9973412abcf12d2646723b1a5ab4e3b206d49ab6f47789010cf902adf720a02c7677847925487634f81e163819f286da4d42437e66ead9278a088d9a2628aec137be60eac2eb30306e598b9459f0ee1c79dc132248f013f15fb80ba713703b66848612d8f4e5d6bc444e166998f3107b459efc73ebe1bdc0b98e4d57bb960d6db0540f68b96212da6ffb05bac7ace76db7b3bb69188715c091f14354fbb8a02cf2b2d77e7f2e8db505e93603bbfff2f33ba54be38630dba291befeca45c76c67f344b9daf7a7b0712b5a49e7b6af29734516570cac32d02074a74cc0e49797508e1aff2af9f20a7163440fd962bbcc5269d8f13"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b9bde8fc005ab0b6b0317aadbef7d6e8abb69391bd7ea43fba5a49ffec02979f89d0a9efeacfccabae271c998ad7fbff4442367c07e49a892b9632bf4f30de3e95583875f3069fd3299a30bc21e74526cc51cb10dafe22b06d3a412a6509daa83d337e18c5dee6591a11262e008c3b562a18a9ada3169267eaa849b16a377b195ca6f83df0d2c2945a3d3fc2b872bc2ba965ef4186ad1e7ea5b56fb689fada3f377e0897e5cf86906dd2d894848a6f3d64d96a5523fd74d2e8418809fcefe5b9bf12f5ae7189e2aad268e835b5a701073e26be131c9dac06203142d93c95af3d00acec603aae2a24bff3d5481c7e71be5f63a1c47eef680a00991008ca0047c7bef7812c9b823a64e6cb40d0fb4472b702bf4f1c9483f835812eb3f70808e3dec7ab2ce2d8cf1c0dede8521780513140f10d84727d4f14ae06f65276feba1857a7e879e9c4f59c80760b117e1c4083e342018da1c42adc6c5255404adaf8460d122d3c670aa29b58c087d118643eace86667e6bad6c07f078f9cdb8618b48e92"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "872f410815926494669ff81dc7114e096f007790f6a4ae3a946b64984eb28bf28351616cc82ed34172f1d1d0a8918f87d64258328db63b72127fbd26320a21c114a7f0b6c88ef717d949f57a28e66244b1fbaaa942d3ab2245ac76f0cc4bafcc119a64f7d167e3e2a64dc9a004464b28bfdcac00a24ed7e3689ca1ed23480c1a0625601c4e7f1e374b54c1c1fbed91e0967b40a3920210b84619c23217c2a6a39734320607abee432c7ad2bb0a8b735400bf775256a61324d4c4ee743ffe99a7bcd13a27b0fa33c0dfbe0cf9663116997573a59204c62aa497e98a698b5dd19314de9ef95cb8bdad0e07b722eb6795f6ea8098b7b092f7bdf73aa459dd85843b310d71e0400470ac14db383940519c060d111f0b80896083b6fb305ee6d9d7879d177f7cfd85c913d226fd6c75f38519d7e8f6d32bce50e85901fe6bdfc74997862a3b809e5ed5793013cd19af9efca616a9ac3e346136142374f58ca823b6a6b2870bfec41207b0a8f58d72c119e319a3934cbd40451f0a1e26b447a5687b9a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e0a2f627d11c2f5c2a61cec6b9ab6ea6f2620085e52ab1d162365a2c7040178b3e6222503efdbc66eff0cb892be95abee6ae02af0a29436de4ecd2ff63eb7e082d51ab31d358309747ce61e30df4ab3382341b88eb2da84406ae20fb3bf9a968cf5ccc871be02f6cd9f2a89ffc6f3a69a589526e8a4f1a8c049286ffca8359e81cb3173a2d2e2cc76a4829edebdd3dbda327a92dd35202b597bdf077d7ac2924f8cfb29a85dc25dfd2ab6e770cc80120a7bd594e020392e58acca9d7356773e58aacfabd66c2d9a888379b73868d07e3d14af1dadc1843f2a6c8e14c93b3b29134169c5ae3b293ee6f6a475f20c7c159258a8cf1a1cede602afa9fe7c61a3218c34024a87bdf4a64ef12c78a11a50bc1521836bc4d84eba90ab1db1b17ef0e6e95d7c9de5d6b84e11dd5422a869ecc7f90f952794f6093df89fb664aae86669c63bd46de5972388d81908fe56c6bd029e393047c52924a97aa55c07d482f98b784e6d39cbc280330a34ac4a8a72733235e66234903a4505228a3fc8e1146034"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "07f0772411cdb1e02802f8ca699bf55bebadd254c9aadc16e1d6d4af3e12670bfd2adc2dbe80195f065d75fa4a25ef757766fffa4d902b386a9c7f247206f60c744938f50d6f840170ae94c6792299c386a1d6d7aeb73fecd5b72a28249a2ad771a5518fb694f54924e15cecb2d755da44b54535dc6f8fce0e91ea160ea942c9e34eef5d7367c9065f5ac270ef11a35bcedf663183f74cd2d504410b97b4034a59d201333f235f59924aad30fa877a31e0c1573f62e7be41f961e9c31ec334153d83adb0ef38963f0f5e20c90b67ae5c5e2ef8520587587c22e869881abc6bfcecd62a1f878115e6cbca7259e8b9e116fdeed841f1d698e85f65c7ae07421cf3096f6b31a07e251944bd7e2cf50ccf69a18de7c17700b25786d29ed74fe8d5757d4dabe2d6fbffc2227448ee8d5559f992a3b635cd74a68c329f1785e743ce9d3bee57b997f9ae2deb531f8994ada98d9a3536b074814c2d5003d6a3d50a9e56287f3aee8ed87104c19656a6057515fe17bb2a72a53a7c19b7a814252c8bee61"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1202"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1203"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c173283b579449345706368a500829a8e45cc347250d7b2179951fc652255996a7ac46f5f4e2b63cf08f0280a2d848207091094d3510a241ff4a13d5663bf288d1b8cd38ae3f077b59e64225f1865e9b110ae88ed01db3416c851c87c08a2c963395922df09f781d003ff454a28b7edb1b4901211fb4659dde8ca976e1c52f3a536e5492045c4f4c370e724b4a4fa8b1c075e69e46a485a9444b52c151164e41f9576b56bff21ff30f893a822f565bb6c2ba1a791cb3b852c90d56fd95ed6f9cef217d21c8bd164bee0c246df4bbbd4084608540b294e8a0c627a2cdd1561895afa91028bb7c4a2c5dd39efca7f8f9bd8ca5ea3869c90661c8feaa318f863cb2216ef4c56050c7e3718a5721936bd85823d44c605a3dbd36a3c2a1ac431f94b87188a7a65b0f4d009c0df15225ed9f62eb71268d04f296bf7bbc49b2416a8a4a6a44a2299991ae3b12b2edadb6c0db36aaec67195deffe0af57d227699cf847a55f1682e202b19e0da69966a71143d6b42cc1259eb76efada8f5e3a07e7bdc600"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00008f9ac1354af4161d0e55b5674821d02823b3a6b3f79cefb98cbc77f9ac2d91cc6345f989a7828132f73f3630a247a936b6a057b3e5a2fda0c5999ea7721ee8880960c24cd2377e869cca1799747142d57ad6a8d83ec9254d89f591add11a758e1ea1e29bd08f624d0e28cea52ed5eed7c0f5f49d3533eb1cdbb2af837dc42942f9a86b5f4e2d5ce506697ef067a344949bdd89afcc25978af4d50c300bcd0ffc9d93cc559e3ae1a13215a1d3f6030827340c6591061a5ab7e65153b1df8b25e1421f924d39c7e6f76243c1bb9ae4063d9a475cd2ece45f4e288fe0720074e87868d70a5584a9ac2b47a56417cc76f15154315545a3ed6704b365f15d34320804469c3b09ed211cbc9e9e767b6f21fa16f8641d8b78b8dff8062a25b5bd3b6a38cb4706c42c1fbbe66db1c05cb57531132eb94fe1569735c33ec491c318a686c837ac810be4afff605f92bb390e7ab3cd24c0cd997cf13f112e5aa01746f43902432639e1eefcbd37b413c586f057bcba40a8f1251251e84cb7c87c53c1d1d558"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8f9ac1354af4161d0e55b5674821d02823b3a6b3f79cefb98cbc77f9ac2d91cc6345f989a7828132f73f3630a247a936b6a057b3e5a2fda0c5999ea7721ee8880960c24cd2377e869cca1799747142d57ad6a8d83ec9254d89f591add11a758e1ea1e29bd08f624d0e28cea52ed5eed7c0f5f49d3533eb1cdbb2af837dc42942f9a86b5f4e2d5ce506697ef067a344949bdd89afcc25978af4d50c300bcd0ffc9d93cc559e3ae1a13215a1d3f6030827340c6591061a5ab7e65153b1df8b25e1421f924d39c7e6f76243c1bb9ae4063d9a475cd2ece45f4e288fe0720074e87868d70a5584a9ac2b47a56417cc76f15154315545a3ed6704b365f15d34320804469c3b09ed211cbc9e9e767b6f21fa16f8641d8b78b8dff8062a25b5bd3b6a38cb4706c42c1fbbe66db1c05cb57531132eb94fe1569735c33ec491c318a686c837ac810be4afff605f92bb390e7ab3cd24c0cd997cf13f112e5aa01746f43902432639e1eefcbd37b413c586f057bcba40a8f1251251e84cb7c87c53c1d1d5580000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00008f9ac1354af4161d0e55b5674821d02823b3a6b3f79cefb98cbc77f9ac2d91cc6345f989a7828132f73f3630a247a936b6a057b3e5a2fda0c5999ea7721ee8880960c24cd2377e869cca1799747142d57ad6a8d83ec9254d89f591add11a758e1ea1e29bd08f624d0e28cea52ed5eed7c0f5f49d3533eb1cdbb2af837dc42942f9a86b5f4e2d5ce506697ef067a344949bdd89afcc25978af4d50c300bcd0ffc9d93cc559e3ae1a13215a1d3f6030827340c6591061a5ab7e65153b1df8b25e1421f924d39c7e6f76243c1bb9ae4063d9a475cd2ece45f4e288fe0720074e87868d70a5584a9ac2b47a56417cc76f15154315545a3ed6704b365f15d34320804469c3b09ed211cbc9e9e767b6f21fa16f8641d8b78b8dff8062a25b5bd3b6a38cb4706c42c1fbbe66db1c05cb57531132eb94fe1569735c33ec491c318a686c837ac810be4afff605f92bb390e7ab3cd24c0cd997cf13f112e5aa01746f43902432639e1eefcbd37b413c586f057bcba40a8f1251251e84cb7c87c53c1d1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "636d31d8d5dfe0fc6ab01ef2ccd4602dfea62d386b002c429e7e846e7a98d0cb1d448d25be039d5158887ab46a9dd49c41537a89036a065fc10329df051e5f2e5c1d4436e84790ff6db4d3f31575e5f0fbdfcaee625722c5492fceaa3fb29d0a865200dec06e117b04753ca9450a7ca7f7d1a1176cc38ecab721864413a0d7a22d8fc1595b6cd0032fbf154fbbb31b56d3bf963761ce8ec9fb38bba3419716d0d39e976857e79b1faefd5f5a2ce0ebd94968da1ec3a387804694d90f37b34033c7f70ccfb26beffaafb7bf56c1b8385d489217458e0a68b5d680f9fa45382fd1c227ff3c11e3ec82426ec648a564f0e886e5b12e695dd2fc8465bd9d08731fb140084c79be64d915bcb4ba10f1edb4c37e35231753be2d9f339d37d7b5f22c91584a68a973f9cc469a23d3b5800157dbd72a8405fef4e444ff01f7fd23efa143c1887504e81773743843d8a73209a1deb66c5f305df539bc30e871332e82330e5b66fa6ea253b2b64b4c9781011d20e80ddd8cb83916834eb8fa696b0a4b6bcd"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_3072_sha256_mgf1_32_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_4096_sha256_mgf1_32_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_4096_sha256_mgf1_32_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "956353ecb7561945dc5544e4602466078c93f28507701ffd39e2a9813c8ac8740e6ad61c955d484e513b3dcea527e001a018ee2c207c1806a96763280236cd3c820dff79837c9b709cb4b522d3ddbc9192242259c43be75ea244d37ccfa8a4c75024a2cf7cc76e842ea69cc7ca1227405b070047387a5068e4976e4b8ed5f9aadd7b4db024fbb8d7bd8a040d8f6610c1c6eb1d4b606dfd182235d0360880304d5a750603af0c424b8c8e6dbc12c3697d2d609c97547e774e2e362ea96d1690dc9432112c535258b3db2c4c32ad510d6c07ad0788357883869efb8b629298724847925cf42b34386be700f02903db5852276bee2370941f397bdc3905e30964a0b5e73602703340960c3ed6078263b611f197955fecce4b9a32e43cd1d2e5e87c4ceb65edc8853a7ee31d28e16e5adffb8ac7b760fbfc63d5f174f4d0936461dbb12c964a6b6d6cee752e5fca1ab4a9fd238dd3e8860a1d763d2019f9e7b99ed7666d4e038710f90e0093bc566987d6c0092f571376e705b342d066c54e6e2578927b92c1f0928de44e9a6e1f49b907c6aa4f605ec9c398d55df81c67373b03cc8110162fb417f96fd321048647dfcbb392455115cd912ea83351853e6a185284648842adcbd25e67174a3b93b8a64ce2ce9de0e8577b8b662ce32e2565782665dd38e5bb5fcc4fe12e4320dab7773b545a09c6d39d9dbad459f21f3e624ee6ed"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(32U);
            {
                auto m = ""_hex;
                auto s = "492e60b828a9847501c7ff46a4a304ee7bf61ae87dd88cd5598c76289a70ab3afb7fa9efa3228a1e826241c13c2e120d22cd3a38a9b9ec5826a9711bdb119748e0f7080ccf917e8cb53f6f21ed19f4ffad9efd94c66e329226a811eef928816b5edb3b10d1f483b64bcad9b055dc78e99491560f59a598001e76a0bff0ddad4ebfd565495e2b523b02dc80050b64db4a200b5ca9efd8a1339d6cdff6a82dcbf769d3b0ed7ae53ea8f1788eb025e186a5eac02e3e1fb1f0aeec29b2929c7a718c32159609f973109d4a876bcecdeee6c6418df27fa46eb5cd238e274f94ab571c968b2c4a838cd812aa90e4657b95c0ccd68d60bd7d33b6e291a6a13f68e046cd41ecfc2bbe35fa9b4a0c17d89a708f89f975bf5a5eb9abc812b0c498d93d2d161f5c7969afbcf798029f3c14efc3f7c265b93fda572d265e9e116ffa9416e111aad32072f61943e9f0754f6e116ab5119ed09bbe245022b6e8bfe35dcee4a53ed375f5451c43f38f6eb55b48e386030cfb76c408c81f606886c81aacc76a999735682413069cc016f6e390ea2df7e8e74d088fb0643aebf4899ee8177a4a5faea3889181612ffdffcdb3fc699d578eba383e23e1beb68824c0bc7f920afbbea8ce7bf2b7c3bb40f33c6b7c8fb6cf73e6e2f3679669f235ddfebeeafa872918581d99c84d6dc37ff85949449d3994982d332cb9f9b8aca691651c4b63e58f6b38"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "3731df2cf46de010d06775044db5ad8c98fcb8bf2be357fd39af55a864395bd24fe7cf104374159cfff1b537bb26ecd67a0488ba7a124d8273ee0b3cee00bf94c5d34900c4ccd6e200cac6e90d97d8b4197ea78ad36be7a4fea6e1b43b1ed954c737bd6ec6960945f24308b085e255c1142c61af876995bb5736ae19ca0e1cd9b319634ff7103a4dc89eaa41c00cd173236c275c463a1cbb67f65e45b1bcc4e10c7f3456911e4f9ac4cee8b43651980dc2e8c332e5452e35f256463b96bb21799e22f4349846e8a2583763226b3278134b9313757163ce6ce0628376001fca63c535d384a6aa7cfecc29ebbb5cf6be9d2b211464e02a09c089fa63cdd9571f3fc559bd2b92b7a5a724d3b88fb4e42079add87ae188a983c11fb769d3ce65fc5aa27dc17b6914283971278a749101e38d3b92ed2817ce2b37d4dbdec14f44f2b015433cd6e5a5de6d803e95b8b8196bcc4a77ff6a8419f5c78b4dcfdae0f9f98e8ab792cdc18645a14604a604a417abcee8051aff0eab887f235b1c6143327a0db2e00a63e4c6b8e002f21c86163de68e49c766fa91ad956c12d36856cf58324d417b4898aaa6db3eac372f06ef21d7a7e86b540972dd4e3f7afae7caec8a692f31386e7b3e8b934499a945cdf556eae3010cb1ece6a08d0dea9500157e78117d0f4cdff096fba973f7c04f79bf42a54e4a82e5456f065bbe9382605c444d21cf"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "54657374"_hex;
                s = "2b981b661e1e244b67e1892bdab545edc9ef68b50b4572a536dd4a40f31195648b8180454faa8765ba19b7ac6a59176c1a2c621e6f4131af96beb4ea47252d7617b9d8b432b5cd900f7b328b0013364a520ce46ae66a63b7181ab60b514839ec8f6bb63ec2f83a2a142d8ce532f63ebdd3f29ce26797f46f68481818ff1e00c47df1e7e8d809737307a63902c94d9c2ee5c69f1fa0602eeedab4d7f6d0032de1a8294c117ad2aa34f1175544f2bc1d466c5965ae5796bae216cee8bf7b91f9746a97749cce0388f8f443d14317e825cba2ea278045826835dfab50091cc988fc12d4913920cd625ac321df4d89175ba3f49f89d372318bc222643ab888246f8e5ad64f227be043bec3828cea0bc0229be6e71a035dca97bfe0c2f34ce03c1ee9d084d19a6d6c301168129a6589cee1119cee84e35b561d1f658b2e4f16c2b4ac2ded8ed5757ebec2d5ed59c66f7bd932d64c58af7fc16af4d3f6bc42897114c9ec537f8b7ea86752a2a26133a7b8085f4d438ba643f7a389a1c6811c2ee4eda48060d27e6299b44c8d504d280ca56ca49c246b5c4c897d3e1d352e047f735cb7e30ce87061ef267bd9c50e7de77032a162ac9a026e684bb4d0e8131a90240494418fbe471c9900a6b322306e47915f83cdd8e525566e8a71dfc869ee5c7e74d33ac8646d7c170ff82f2f3e5d319dc61cad06235145c031d03cd420fc370adb3e"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "75fbc044fe19c72f459b5a1fc4793f7893ffcc95bab8609900b3c3d3be6643a42987c167e7feb63ec2a57f961c1b9c35b11b34044e065d7d3df0b49496dd80f7cd1eb2e8c0d0b726f37e701ba62a3003a17657af55adcb0b6e86f95198ed435207663d616d516bf7222db241094849fb232bf6fbeeed7b5879a6b6c8aebc57646117220bf55403d0ff078e219ff119bd2e52e767b708b91afe30e9be348766e7537e1128087b4c9aca0281415e550965a395ab20d423330939b4e37551a7735c6df2b0395dd032266ec7dd4afaa3c477c64e3f95ee4945960b7a0c43b7a9622448eba4149e30ccaa0c234be7b06f4ebe8ef43063c62282e0643c6e483feb1942e3310bad0c05bb2f87674825fed098d5c787b69c5ba6a1f716dfa62ede3b8a01c076598b15ffa2e2be82fd1d8025f8ded14cd8fc8753ef76419e1dd561bc0310b2c7845e2744c9621735758645af0252315b6a05894c264c4587c8870e02e94813fc3a797d590a9645d92845b614b0d89cfffc0b80c5b48186ae350d877f0bc06e561770736342f00d56b2ae785891afe39cc0412337e4f5d29ff06d727f6fee8f0966d52ac146ba82a753751ad786c9d70ccd3005b11fc4f6b81517433a052c2351390332bf7fcb4326a19930b512631317c0354a81ec7c529ccd1bb2ef206d697999950a539808958d6c2be64220123f12e7aad168be35de70103090937f44"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "66381e10ca91edb043adc721883b8c005eaac4daf040379f4d69a2bd7ded69cc6e85d80a6f3ce8aad523a5d185cbb2fcebece5210feb0318065ced244ff73830cbc628d79572f7f0961c111883b9c40336d110cdd4dc4b9a04ae4a0380e8b17f0667b71b2c5bdd1c9b48c4e83694820d4cf4200051bf3101559625c0d06fd0996b759e9f4c689610e41655b262957457a4d8341c65bd89dd438025699dda37aa2d051cd3c974103aafb092e865b1397661be3eee3f95d7a75d9a2ebd74e6d2cfa54ff0d8753130eca1555eac4bea45e90a6a37d7d057ccde4c32e43c7499d5c38754ce950308fcff69d42aa4a4fa85e6d92bd20d605823e198e94af5ad65ca4c2fb919391f919aa5fe048ff51a506f63063cc5f777fa70b20cf759a0b812b2527265fc7f32a40cc275ef94ebb4a0410280ad658e67c34d581b5e7a17c5629be34ceb70ca68f40aedaa3c9b7dbcf34f30f12789909a3540512044bd812760c3f76dbc644b89760b54d9e090dd9cbab935597c55fdc6793f8ef007f732732e3d1fcc3e3ed253689aa29acfcf85847acb74a722533b0b5debfbcd0b5388f6b19e8b9ac47753f8a616ed9a7e4163ce8669437c62271bad3497edf3b655e4d1523cd8f3448c5d07c48dcfaf1e1f8310baf3d3707ea23288911fdf91d7379738ba8fee9ce525ca0b9c4c03bf1bbcd7d1369c0d2f5e0127ce2d1f95322c94d4c309f2e8"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "61"_hex;
                s = "134d55894c80eefab7744abbc9fc5cbc087072da8243236fda9df5ddedd81d23f0998061ceec59d1bd4fa2f404547056f9616f77843330bc65a2d2386574ec9198b2abcadee4139074c3208e2f09eec1e527e26b78b8773121f852bb8480e22b34c0e1cafe9bb224ce6243c46c03cfbd0fdaf28041dba177ced1a2ad70ca2f1e7dddd6cd137732f4a774e47eb59d8225d4c6a507f8f273b600a5b6449d63924b3a0cefe987cb5998dffef835dfe3a675442c90d02067c9b3ff0e3f1d84ce8801bf366e040710ad2c08c9f379bd07797ed954d3e15ef1350ffef88e9bce7174466358effd2494d7e174ae88b04e17c5ffa7b63bb6cf194d007b3ac22113fe3a1dc0c97d3853aa67c892d7d6bc5b0be6681e18004640416587452c856644ae6c07d135afae80fb80132c1faf56c5b224923cef5abe9969b807023fb84146a62e19bb6d8e5af0475e07f48b469ba3178c99741af6e57aefcb766ead4ea6cb3d172532704818fd82e12132b6329dbdc62e4c9da1fee2cb19e4f60ebfebc681a5b892afb812e82029123a7414f56f57e09731fe107f682f10a5c31fdec1d60118cc3646b0284e1948b2bd37c280135ab587960fd0769629860d17c4349271267a89c26c5f5debfdf40d843428af1010f87ab73648ac1c698898717889c38be7a06b7dfe9f63a9c7a19a77d61e3235ceaccad99cce004d6a870b27cd13414383ef4aff"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "7a7848548b15bf23e4dc1908e5b3aa8989936c498e77d587e64ebc9b335ce6f400a3965c027c6c248afcda5c80efe8d1f1bd9e71a5c459aa428a4ae1d1cef91ae48788f361dd440fb3cf745c9935664e43b81e9f860985418b61c3afe63b85cbd07e7dd3601c8ef8b7467694e3221ba4ace737c3134a8bd7f7ecd84d1382a93e5c9a6b69c9a8f12cbd612e48e5145972a1ad4f92cb0a57f44e0fde4548d231a5ee0efa8698154c66ddfd8fdbdd41d1476bb5d8852663e4b7891755ef9fa7b5d508b190d59270d32a0a7f32b1a28570a7e52592324fc461a32bde7e2cd14b04129a400274e4183cbe44aa4bea3b4680061b119a97da65c6ed4bff5f2f59193ccdfa8d021816a2b5d32ac52414d1c51f8c198f4c03e0993f8e47c268598d665c2b624cb66ff02219a9100adb3ca9674ca1b63d77d6156307efe953a489529a1701ceac83ef1134e7cc7aaa578fa4909e9c4c0220a5c882433dd3f0af1d87bede7ad979ecc9999cccaec3c4d39265efad3c39809ad3f24fed3982dc74c57ff8cf1578d940f9c6d351aff9cdaa2481d0f355054389ab2a6edb6b5455677d828453cd6aa21000adda95644125cdc6b4a4f95cb69a1abd23b46603485e696dc419cbeba767b2fa7081e1641c4b2daa44f5fb2b9a6513dd12d6f12f0f1cf7da5a74223da8dc390468e46af16583faacb7fc0ef4c095c641af4d76be03e880d4f4e2c8a3"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343236343739373234"_hex;
                s = "303afbfa17c9c8d18b64867e7293f22c8a139a6b106ac86e9a59b590f085d572a0b1bc177a35e3ba74d66e3c6d9f7b5daef34e03080d13951fc2e73cd1c7cef4a815071a089964c35afca9745ae54c1dc2443c79ddb9f111182c501177fd6351dfa8a980f1ba2c99b489b78c3e31002007b00850c52e5db7f6cfab31ac0a6c8f6d0516e19304e8376088aae408ba6f69b2f70ebecd64a53e3da851ec36cccdb7e317a4f4a337781a7e9b0c168af765431e7342f53164c50c12d1e33b5f026a6cf1925b76869252d290ed048ad6c88b0010ab293f6d15d05c884f5c830fd09d107bced6a0697215afd121bc137438ebffda18b1a6f607625813ca9a93b54d8ad6be5ad5aab808d5fb5293ccf6bd18dc920fd72c258572b660fc2072251488c8623e3d2bf988a72fb289be8046975828e210217fd04d82c5694031be9a9f2932aba449da9d21738705a513a5dda2f277ba9a017c6363da9042838aff0c9ae4b5655580e74a95459666108fd5d870486b7ce4187f057fca8fbb0c877e1fb3ffacc26732c26a50c581537adfd596baf30563d7d23af2d68395f774f52abc238738a2fd15d1ff2046e07c382d176d6fca5348c1a44b44bf89883ca569b7cb9d7b8550e65229c4fb21e3dedb80ed3ec51b378c77750617741976d5b2f764c7db5e103651782df4841789b6993c5b73840038cad16b03a368dd6684b7a90ede21a2ed2b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37313338363834383931"_hex;
                s = "245258fbe3957df086cf99d113f5297d5287f6809236e97e398a4a66d43236dc93c5ff7b089260ceeb8312ed7c7fc2a0faa6b5933adb453e0619ef06601d5b2e2ba8b43c76704c29f45416d0085d209911db798c0aaaee221d795fac94d66d9bc01eb43fd9caa23b5e34d33cecb735319133696aadaf316424a9bd445a6b8bd779791edb302f352b1460a69a25fd14432cf043fcc4f1ae1b7bcfe6955da3a89d6abbfa08e703372b977c57a84ba81f7cb51bd58a9929a8b8dff805aec99b03a46ce82a16d25f6f30e501a9bd0fb8a47105893c2b361f80f2ae872e5358290770198cd2b5139c234e70b80aa18cea9d9b94e2b3c46e9311b2fc513e28a5dc83a4b1603d59ba12f695656fc40bc6f890731e9d990242fb79f5fd2111ed7b7019c0f22c1b84e382fff744e9f0476e4eef7259730ace36cd7b1747856fde8d1c6883df62b20eaa58d18febd316091acbd323903a9351016d089ba51df67f5cd14114b8530049478883d53f0376ccdc8ec472af2907a5463c320c066ecd8aa6ee8cfac58f67bc051685f0d38bd2649442aadfd87749e22acabb6c396e018d623540edd2977842ebc518e3b2954a8555de5d4b675027488b52f8ce32ae864b9e965163b0780b53e8e227e914c139f91afb662b9c4fbf21bcb7b43040113155b97571806c112aae1e9da34743df2ceea812f3b931f33bb103d9c5239c92c701c0565fb0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130333539333331363638"_hex;
                s = "3f4d6ad95e3b937372ffe704d32b54c879f04e85dda332b360b2106942c45c7bcd2c7ace3c7cd0b585182a83e89a34809fcd72687c007c9a2ae07359449ff983bb1b5c3a0fb44cc694eee28b87d961847fd9a3067697c3283d4e8b79fc086ce77eccbde90a7960d9112ac4e9f0ce5ba897bc564b3bb6fe023dc369c01724455eb40170d92071b3cb08de7cb55300b244992e80c2e181d854c9974fb76bcffd3b9389f37f39dc0c0df15584fb6ca4c29b1fe1dabb1570a235f5b17a283969958cc7eed4a1d15eacf84f8cd7214b063b79c976887039adb9a1456f022c11c4966c32dd4c7782a187eeff40865ac926cfe97a8640ecae28c5448e8dcbb50279232f0dc597b58dfc4ce53d9530584a808cc7a20dcdc90024931732b92ad17bee31b60e7e3d6667d809e4bb02caa28d3676a7eb5fccc841385a010597b02fdc728715fda89cfca37c72cec44b6befa8093b99a4cf0a81a23e484a671b589437b4e6a953e27e7339e00cf0762b9ba9aad64170b8f07c76f2729771b8d406936fb219d3decb9fa075f51ca804f7ea59dae8f663e49f6b007a0300a28bb54707cd891439207104463907bdb7f7ce2c7861888ced5527f91e6f52003fce1090d9231a07303a416138118be8c49fc919450247a9004164030bbc69534dc7f61867f494682884314dd0fd6573af2cdc3e86ce5c9dd6af71dee512c78f8cd5eb4cce3967e349"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33393439343031323135"_hex;
                s = "8732ca98efa135da433f00d9f4f5d76ab711876cdcd965598e243a7e68565eba7d60a95a5838dab1a3e35051cdc1ad7be6a6a872ec631c8f23c84ff831a25a01f3f8a49547ed98ecd7672ff561c438aa86c5a8a7fbc07ca1f6437d6e30b695ed81111365f721fffc36979ca2d1a55818f5a0fcc922dde87ed5b76fc47d5f4ef219f05668feb398b77573f9b1232f090647a2632dbfa3ee02c585660d76f2e3504a682382606a766e214c51a2813b730a93013ddf4a7ef08028c8e444da2b8d1f583780bba7148a010314f2588310da17845a0ee37dd6308d1f8d9b87a88df57cb1d530441c6a2c7a18fd47b4b7f89353d3108e91bb584c2c98a74e413e8e3be7c8273d0822dbabf96970c61b104ceed8306038a215c61f15bb4743dcbd80de6ef1458923213f7b27abff0614b6e1c3b02c4011ba2a6590fc9577687a2bc5267762367d7b62b03110bfe5b8023ff6a7c46e46a5deb7a5fb5f7b50207760e449655bb7ad84638091119729758e11c30c7dac2f0bac200f0d62e0c603a9a6a4110dfc70ba838bc76aed762cc9a7c3830428f0c8c68f7972a3ed68f9895ed0fdb7a7d6f206e8cf44100bdceb126ff8a5bf21b1e6dce17c3bd3b8908a8f4aa1d7f16800185d96332be6d5c3c5dbe0324d1cc809ce72f1cb1696c5574b13430687b2ddf1970c5b45fa3c4df55b46c88603677f29fddc4eb302e2490fa09af3b14d8f9e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333434323933303739"_hex;
                s = "4e3b548219cbdba85f3ca9e739a153e8fc69a4974648806eb92cf2484b00dc272b4ae4b88db9b38a5e4320332c2ea62448c08e44968fc1ea1390f66469ba52d4633ea98bd3b6204e813bfa3353dbbee7c0c659279d7bc78770290c444ad6105ea2634fcb66ae0535900ef9cc458ff9da86e40dfd4e51f6bdc7b221641f6783d14213b6507ffddcda844ae38b323c6f22415dced537575e175633997557af0990589f019ab5ae99e32557f82b1b9c1c54e9ce289cbc98fafacda9ebbddf5fb3d99fb73e4ccb3d2f2ba889bc47207887f646d529bd1cf78ec915efb3086d6d4d664e8b07d094bc88d8e9fbf6b2ef22e56dcc7ea634aa021efaa4b85aa517b748322a8e0ee3c53324865a8bbc545008a5b855e9813418db9f74b178c1aad20e52bd7679d2a651760c6c195de92bfc27fec2405bb4b267152cbde712ce658a58700eafd2b0d3f06ead2cca73ec56cf4e55b5cb112263bdd8636b51779fa27847b2b658b39cc023df2d67143922dbcbbd07796d7702aeb831bcac758fa50d578996b5da3ecdf9799bf27989e5895bc1d86e99cc8ee5629479e99f2c0a038d0531aa2fd6cffc52bafa4406df74e0f33ed33fde3b4f4caccd06b68febad7f59e7e951c95c24a588ce25d5e92b9b411d8b25af54e87553264faa6c5773d6d59a01252bcc05a40f3bbcb995615cb85dd1771cf05b75305b5dbc9ccc8571c0290905c22bf0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33373036323131373132"_hex;
                s = "456c58e80907cd7723f351425750bfbb8fbcd7a42794063f9c3093180a79c9b289b0c2e7db35cf0e90af75f3d830cf27ab4fd739e1db1e51d32baf5c2c219e2db5b856b5f0fc49fe33b32cb53f6201b47b320bac4f8e26d461ac6bb4c54a8cb3666717f9fdfcf148410ee6e2468394ebaa58a23fa3c7349ede819045d13a082d0304e5d0dfcef237c661884663dc956be112d47bbe627a1e66deaea251aac624ff45b15a6cd49c50445fc6f3e8a15caf4f9d082fac7b788695e3401b5b80fade651c1fc2404f5ad45ed632bddd1d02acaa6467f0da107202ab964844dbf00a48716e28d84176aa98ecb76ab52c631ddb9e1f06e6655cfb9fa1bccf05e9ea3aa773e540d0e7937f78e754a8ae4b57b0ea7d3e7cf42686f229e425f00cacf766d0c56de3151a151e12204c04d97a1470903e78cbaa74ab12955e1b2cb162acb07aca887507a661987e83fa9b0606f2b0d1303a709f407cb6866a560fad21f60a65bc4db2440b1a0b349cc29668a9f32a6d6e4ca7ff2bee3d670402fcfc05a51b988deaef45b6504689fbed8793f5061e50b803ba73843f3d8ba4ef097ff361a7cb58e95bc740d93a8420f81c13ea40f2f4ec44a0195d010577fdc42fdcc9b17a0c273dc79b48bd417c980258689026d292508c0c21346b6d9959f900cb3d7edc5acb5ef2e1f75eb3560c82a20e7bfe4c151792b3531c708744149faaea51a9e8bc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333433363838373132"_hex;
                s = "70aeb4087275eb488c13af70b3bd01ed728cbaa7e9d23227b4852d07bdbddbccd7e7e45cbf67a3609cc5d916f090bcc003ca86943a56b99482cba553f54a6c30f9cd09832caae0eebc61ac2824d1adaa448e3ceb6678da38629b2e3dbed14937881cd9887b23b0971b9ad2b30d63f553bd6d8235185b43f7a1db62952c4d0aaab7b598777a3c6406c5fdde2664f0112269f8a02dbaac936674f08330dd7ad49d7aa7a43926f9a40824a386ef0002963b2697e23db3bc227d12730271e2842ade151db6db670cf849ed14279b1378291d32fcc4b76d918ee5a0b64f6b5bd43d84fd5258f53d908f9bfee9b9de510f6e94ab4209ead7d48d4b1bdfc13afbded36d85de2adaae2e72beebd2b83208b7171d1618a66016e3c5f89364c9c4b8e5c33129f85fafe0e48080b6b78ac0f898f73f9635d8e72939a039d56e59b359f5f7e891f81c59369dc97da667b8e2a2d86f84ac9dbe98eed74c4f3d73809037ba17467825fa21aaffd18daf6bce69b8a7b88974565012f9ec01a51646884c1e64346012448940c4b3af1c9f86bcf656ba5efb0b1e65e8f9bafe42295bca712030ef6cef2d8dbb300ee57af3cc40e19dc1ee4138e78cfbf6f98bb8ef278dfda3b2464bb0bb6c9cdfd19e1b70004c994d4ea2962c4cb66e4fde4ce9c62b05cea744414da3cdf41e6285c1134ca53dc8581c6090f2f4b649455cab26912571dd03fc4ba4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31333531353330333730"_hex;
                s = "27b2c163e957b544022b487423bafdcd96b0d6b8b91f3df95e1b57679a5ab1c046de6dfa0f6a898a6aa1b5a81dc8eeb113fc992f4c64486e29b733fb4bf040afbf2a033eebf837d0823c46a70806de28a2a2ff3e39116e726afc7d400864bdefab2edde98662e1b6b036266fefcbc6040f95ed6c316c0969bdd3aa93db59d9e51a5172adf71f1af70daf873485523d9235c217407240938d5746dcee5b978aab3213b66fb75fb685d99f99160f23290baf90e9de690e1baefe716f119163653d35d7d638af70712fc97def6fe88ce8520e695f8a7b28a1ce73f0b9d6ce433ac0ed5446656a9b31dec1712d3c0fb6dab5f8cfb7fa3858bccb01033d9ec092a2f7f0caf68867f90a0318dbee1d40edc4c8ec0fea960ba04262dd7b2e48a3200285705ab150988f0b4fce4fd313d45f109d1f4a7c1c184d9123e896981b81afd280106917dec36f5b0ef5d3a71bb37a0e9c42491cc28bb82c70256775a5f2cc5bafcc15a8852b41ac59b1c7f654ca8d80375bc49e2e6b415458628d965d4ef4a751701abd20cc9f45e3cea908ad75e3bc258b36f584e60502e7cd02d2d4f8976bcc52695adf1bd6325e06ffe0ca161be992b4fce04d2440d6035164b09a8b955673e201f473c0f759b27e892c7fa61483743e25af670833f6fd49bd606aa04369295355a93163faaaec789400ce03067bae206dc58c8c7b4157251e63d683257c27"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36353533323033313236"_hex;
                s = "675b9dfbd81c45913b46533153fa93161adc71cebdcd218b534c43f24b59df6fe8311da886898300e818ccfb8911d740cf619edb42643938185db0e2749e1bf4d6ae5a5c2d7c4139c339ca64e8dab0bbaf762c5a6cf9b6e04c86e476a6aec56c110a94c9ba0545f6f7fdfd08510f555cd67a9a8fe12f8d04bc00634bb3f84fc92587a3d4a9bb121762d8bd21c85462ab0f33de235498516ca63e0c4e157fd3031d78da7117f46256fd99cdd5cb18ac82d85c4ee1fa954e603dc09367a979d452450a63995eb83bae1d371b33cac539083eb52894f534d06d3e091e8e6a1dc8dfbafd4abd4df3fd5aaf8b93bbd1ff1d26ba7d1aae04e25a1fffb6aa7c02a4e75dc099d0e3d8381d7df70bd2558113c52ca8f839487ff5571c2a12c4c8596b023a0f9cf90958b69e513e59ebb5bb892b9b48c8e79887551e9df73f8f1357947f9cb43583c0b775ab9ec0d89a700cbbf935ab3ec00061b8d462b83c496a4b8abfb0dee0c11b4d5e3b6912a33599b014b7c381c2d8e82d06197cf2c40698730881de5df4e7202fcad15bce63c6d08573cd7712551404cf830967976e258f903aa518d7ee967d1c7c319bbca1a24420ed6beac83719c43214b9617144c1daf762b66f22bc34b8667dccb5b3bc980090ea22fa61c68e9119fd5f3d88c84e2ea9f83f0dd7dfc76b7535205fe0c4f7798e14f5559263dfc3666e9536e8c79445674dccf1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353634333436363033"_hex;
                s = "1d1824029de39c7907288499362efe10d06179a8211e200f73889c1b9b68f7bf0ceb17ff58dfe494654e108864a2859075adf2ad2bb2e66a061ac9330ca9fddc525b3be8761f01a9c3eb7c9286215612962882b42ef74a2328e8e4511d3a589653bf0e46f299a52bd72a697fc6f09c4ee62c2d34d5487ad8c723faf42669583f2c7418c5c3f4897a193a19511c19840eb5c2c71b81023c0df8b1c6d3f27a880547dac9b12e094dc90904d47473dba66cf61207c709cc57791b0786148f62c591f72e46754e3d6e6f838c97397c5bc90e6079bed3dee5cfaf3520f50e127be6ba35cd9783b46424ad907a5c04edec02560c3d72179a6ee5cbbc9cc2331ef0fb157ed60ba4effbaa9a208ef03e1a4659d2d9a77f36fa783aa9e6dfa72015f6d6a586223a4640e04fe01b003aa395297c8d9579cd3b8e0134a06ac361819ea8499e010615478cf3d883b8f6a1ed2cd83cda71c7a595b3582ace4cab76a387f9f1f30aba9f5fc6ead0ad95343156a734645abf5b2771299dbe5daf2e2be5d4f1e6db93e92ee5202b7419b47ed5539d14d30d099d39f504a4162bf8a16a986c5cbec2a7d56ae06d815c4b91301d235a3d7e5536086699b44e5b92fd723804caf6acefa2fd58a9dde0c0524cb8d5a6288b05490b1153792bad9fd99ee696aa3b83d8f04f965242e98b1e6a96cc13f5de46a2fcbce6bdf33022f7860faaaf6d1ff0a5cb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34343239353339313137"_hex;
                s = "7eba46db8935bb9f29f3e5009b8ea19022f177fbdff7b5c11ac0fe7fc31ed63cd12685096956be4cea1ca37f738104144ae4a62591a467cfaa68b7e45c76bff4719026f4a5b1ad2e1a587bff308a27647c93cd869445d23043f87fb1bf0730e6f620864a61a097bc494eff10ae87fa270180ad0642ba638bcd53d753d2b8ecd1f70dee4eb0c90d1108677ef19a13c5bbfa2b1a4fecccdd54e15909fc73e2947677bbb4cfd097b3933facbb3d4b608e600d06d5ad53ce537efae69a5c6ac257c850eaf211aa58a3836368a21498bc63aa271ad5e8bf169ee149eb7f761393061ecf567856c64ef7575a9785d2c482cbd9a2999cc6499cd39103ec8d91ad3cb8cac0b4588ea1cbb8a61cf622bb638db4f0ad7ca8b1eaf9d7c60f9c7427e08cccc25057f497bd444aa11da061daaae0e5cea7e6aca793a51010be4b4c500af433abdb21dab5f79a84c302d290aa296f03fc1a4ede683762b72bfd2694beb537d06c750fddc312eb9ffcffd25558d88ddcd2509ff2f2615c5f9e29e6d1bab5145c6dadf490aa978530eb2358bca9759434f765c07130749d3b14ef7c2c5e45547d6a458fd3c1f80ae725a24b72f896f55d40da4a21b3612849d18119d52b962302eacc6620f3951e2d41f544801d4f1007479f89521e023989e9eb9865989fbc18234a0d07a89c9f9b8d051ff1eb5d41d394ea8045f94980020cd1c1992cdeaf5a27"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130393533323631333531"_hex;
                s = "90462930f56f9abaa7d7cd95bb07bcd9108fb5eb9c0595e5a370507c457e188d2b6d4fea1f6d6ab5e3b96c1fa140ef5ecb43cd48f942387fa155d2a73a19f759c681858150a1379cbeed487e39bc74a72d48d8a8ae1b40e894c6dff19f4e2e5116b3cdf078eb2e30393e3580bce971ba0187c4d90203de37a1c13c3ea40cddcada0b15ab8c963c95a8ee80ff1fe44fae72d18ad0f3af1567e5ce04b4722f93b581fa42731215b515f572cb98446a53614c93afd5f8d6742e0b1d7f449dd39ef1734cf8e04e61fdf0b7b2a4ad44615f88f7e1d4fe105fccf397f9531f3833f0ed49679b91b067b4f9ca35d53c4e6930b75bdd03f3cbfcdcabe7f688f69e88a76b31bcc3e200cb5ece2a90d77b97f4f1b192694d92904def232ce4d7775b94956c75ce8820dced0786c820c2324b400c951561970e769b616e605eb9b5f873a71c168e38285ddb572200903c24f8dcca7a6deca91c27d053d87d3405dc5f7169cd7b54c935f8c90b3cec4046077d1d84d8acdf05d7a0cdd92ef6ee59edfd067cf00e7bf4e911b877f60b957b88f0e71665727944ff95748c47ebcafe04009a3f356c3edbc423c7a31a9e8345dd9041926d388dc0436b6d514d10a3dd13bc0321f1e6f56297294d4e7e2d77ecbbed84dda2d03eb9a846b3ab9402711d72af55face368da74ecb263ea9522d9a7ebbad4063a3030c3bcd4b7c9eccd8eceb34af0047"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393837333530303431"_hex;
                s = "6a411380c1d5066a8555fddf5d4827fcfb0db89b1c60e071e24bb86773f951b5300fe423238ab7df1c109d854f6804aba4901ab6701ea545a8469500dcf95e7fc9e1bf9fa79b5031f130f583d91ead61ad11fa2c5a97d990909eb337fd48eb3bba09c761f0dcbd48cbb2bb6c778131c3c6e73403ac7c0006139fabaec0d91c4eb1adc39e6b0504a77140e685f60f5ceda237f47a5ee4ab5383f9d579ddde74886a0daf3c8efbdb7666532a44b7856d13a5f75d1656e5c6a9167d26a110c902e9b3c8274e01f0557551dc56c0a21ae07ebc6f7635d45eb0d7bc489e1b2e1e472718cd55193380feabeddba9ab7dafe0c77a57640fe56226c73deec26cb88419e0047550bed95ad0ce8d97aff7be98f9a69b18fc14b1666e1a6162b9e23537e4843bfeba82b884ded15f30ba00273ac4fd03a562080119febe45cc267847439ab0ab18080f43b53f13114d7d854cc6a0641289a1a1d730e7f4d6dfcdb32ce4a3700475996c12f150006f0d320e68bfea09db46c4e39361305c5443bb7166c39b775af01bf9a68ef453c04acda04bdaefda50c31dc995f083b7fd5452d10d01b9c14ef432180dd20334ca82e8ea9ebd2c8489b02e3061bb7e619ec357861082535d6c7b3f53d03e912b11d22cae5f6d81cc771b8bb419bb30574c521f6a96f6b75748b8e6bb506ac1e23acdc3f679eab5d4a85228341b7974d2e3cb0db9b84fda6a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343633303036383738"_hex;
                s = "8194007c4c78b587712d64a5df69812d750f12e7c57ebf456beb07746e355bd95a5053ed9d72fc3ef8324157d2d2773a604cdc4993b913f213c9f5c16c52132eda2c7ae23162080fdb3ba37d0b52055781a41a52fa697dde398f80d7651d62ae65439d1a7a31a01d69d90020bcf371c15aa893e30a7ecc74d1596ae94983c081c4b3307e2dfbfd71839bbda72714b0afb7ab5e2ebf45f1b303d9c5b9290c4374617efa01f76443643830b1c081c847e412e16e6d81cf0196a84d2cce5171968dad6181d896425933614919230c99db549281e5a4a8175447c81056dc2dac7e4f2c3f40d48f3cf6927f42686a6ae0edbeddb20af1850bfb25ac16cc251847cd60cd315f3ccaf963b03d0dbb44aec18279c338cf0f214b06fa6bae60ce81350b70d86399d161263b1df5c3a54096b23bb9bca7e83c8697f4a24fd6c0b77c2e8c1f0bb5f6daf8c57f4904dc197bc74ef42540cf7d0fb499612d5def3e707fcea05ce016f7e1bea0ee3ac8f1861ea46a091e540eef09bea510c626dd7b55ba4c88ca6606eb8d9023a3d0b23c0b3f9ede7ceadae7625100c95a23fd7f74532380d1ffb827620495ee53940a01dd2e3effdc91a660ac887723d7db1b2a412a7ce022b779957eb14adca87a87b4f5c30b7708b023a2198e04a6e0fe06a7fea4478be85cab8ba17163e8f013f38942eba371939a510b5fdc75dd9eb2b7a4d8410fcf4b58"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39383137333230323837"_hex;
                s = "2bcba1b930217857b5a0ebcb5ad8503056cb07504ffc769d7f9c28c0fbd7c753c8f87d3d889b21db6f07d5d51e292c5afd106cc7118e3ff784ae083a33e5298e856a2577796e662be6839c09da8b7059a6017102bcae65ba1095ab3200d62a497db4f372cbd33aa056fcdcebd72ea8c6aa2456830f2e6a9be2f77a92db7475f5231dcaca4293754ed33ac008ccefe4da8111881542d1f150232ae8200046a3a22322a81896ef9ddf2652ccbfd0bd19fea2088966aa9e7a47dded3684c4a583d44cec00831f4e1fd3ad4f61716eed637b0337bb6b5e9b5e699e8319f7e748b766ec81cdc03a67f40ee050ef79b60f7937c7a36b347d84e76674216e870ad29a9687dd6d5b0a092579332eb6ce1e92d4d3ccd1e06dd18b3c0b7171c4e16cb18861c917581c317b6e7d3eb5330ebbc5fb8d2b6d9480b23e1293ddbd3770d60735c98ee058849b4ab72cdfb1be58a9dd090fbeda783cd70aea933aa0a7fc357c3873000b7dfaf031f03c9bfef07463fdf07e3077a37ec918b8bd30f6783cc0051ad023318990f4f158a72d207ab5505c98937eacd1dc04704c56d0c7147b8c35dc4c7bcb992d57584d096471648e8353a2a80c9ae709bf4ab20f44d060b3366385b8a4b69b0c0581247f2e859aa6114d57e1fe6211fa3be3f36a1bf3cc6af33b5e7e80b829dd960cef2fa249f2d53236d887ddf5f3f38925b8880620abe236df523d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323232303431303436"_hex;
                s = "397c56d2901a34d833fc2563c39ea82ff392cdc2a34efb9c43b5d73076fc4975c8e4fbd499458a19b8f83c6a719a36cfcafe0fe003f5273ea0a935f072922590ead8404dc7b558e686c41eab65ae42b62fce11790a0eb7154b3edbae3833650d8e95de4d2807227c47c2675310731468b4f888adf41421dd2d22a13a937629fa3c4ce0755517917125d3c7b3d82be5d82b1e2df73671102dd5ee10f4b6355626c28e718f448bc2ee7eeb7ec82eb25eedbffeb4c0b6da1386a134e6db3e56563da0953f2342f5ccadac5ce5560a0e3237402734ce5c67b72c47baf7c287e2c396f7b8932f102738bb4fb86f7958722e9582eb38f678c0af1ab4f51beb8e3b91cc0659503f39ad526c8d4562dc30e29db940548cbb7a44069c3d31dedacf571097b62526e7b0a8d87959c9dfa5389a888fec4773107aa1a4e3c7d5201ae4942840e03b9042ae525a5e9058c70ab4aec851013ee41fac508da61ed6388bf9b920c22ebed852437d59ba3e38c5b3dceaa809bd2bd6386ba337601f35cd6a2d65370178572dc61931d8b1aa3d84b18cc75d9678e50d40886b48357ffcb158c454626ff0276c305414f71348b8091fc7010c8988a247d5903d291ad70776fa9790576f0bd0a8bed261ceca85ec83ec4f8cde1450225a7687eae70a57d379eee28298e10f671b086d35522e268e86d93aff44f8694561a65d7a48b25a8548ab526a4120"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36363636333037313034"_hex;
                s = "16a45e41cdc78c9ee79d7c42ca47085b81725efc887fdf6962443d1be064208875df176e3bf837d021efd22fa78f7a3e6bbb2a011b25f12567869bc2235a81f1a4f03cb1051f842af5d4ea4a31332f033f03c0120263c8b28f07a046c6c2728ae65cd333f6d847589db64a7a7801c508f58f05b1a3443adb23634a56f3bf0670b9266e896cd8e6926cd2123f85779f814ef472547563d68ea407f75622ceed4acc9ccc989b5a1b1047cc3e2b8c06e638273f23c204314b3ec7cc6a2aa5305c774d4ed1c4762e8997a6422db0d3fe706da8506e33bba0607ab10d29a8e3ba788b45c588304d1b440120d0d625159113dd82e3d93b0ae2b6eb25c22e22bb9d50285d6341206cd56e600eac1aeacb358903a93b516460b404fa26df59910f9d053151e54bdd6cd155ca2141f07bdf3e9d38142b8faec360c3941a361eb86af7e6b13e5fbe716c3d0c85a35c60be70699c9f40402dba71e0b8d6ea56479393d3a9edcd6ffbe31066bc6359b6050e47251fd03ecc313f56a78d313890329b59c7f0915625fd0587e926fc62adb74e4529da1b9a2fa5dad441d413c3a2f5addb6cd922bebf72e031640f6c633254897a70fd4572d15dbe42464f7377fdac033e7a2fc134c56a9e0b9d3bbf121bb5bfde34df9677178c905c01305c773ab0f1bec22d943bd786a96e8d43a44bd69b98dae86a590370266f6dd072b7d7af9c0698ac852d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303335393531383938"_hex;
                s = "87b00fd063a5e55b9dc60cad16c16dad3ffea0ad11a99c75e4d1e01add409ebe8749a1c6eff17eb06ac7bc6c98bcbd269c6d87289b1c13abe3bdb7262398390e22f5f109f49891067a35577ac6996edee71f6675c2665c9960d90790da3bfb982ff2f9194ecc5c26656242d7a8b9abed9e0e35dfc7f8577723dbf417d65d1c634de9e0c37ef063ef80d07c137998fb4869da6c7fa6d7013cc1de7bd34c25a0fbeb6469c79f7f8319ca541ae0c8c470395fdab59ebf78f589ef45cc8b7ef2999e544bfbb843d33191c89d721b29cb9b6c8edd161be943f181f7a4cfe75c4564c1f183064d9f3e9a3b996f61e5a6513bac16f99c428db753fd61c49d8e80e120fc46b6a7e4fb194f668db78fa55b393bb52774224f181376df0abcfebfc90ebecb4819135ecf101c34c02ab3dc1d6bcc79a5b065ff3ddca9a5c66c6b70154a7958adfd96209bc4ba05e181205cef7f3df2a1b0c5d095cf2de4b427cf847d67db367fa6b57f109ee8d1a3a8b9935a4f36b88685e891e9684982200a321aee1ae9c86d108f2cf8875762faf9a6059d871bd977232fe9d02a9dc23764b397ce647356acb3da356bf58f1b3f080f569f6e130948b0ab4e1328111bb8b7fb654ea28cd9d5063e29c45ca8ce286361a6651f0e5ab401ddb496f13cb56ea07c31edd3c6b49a5b9a5a9866896c0ca01f67b54eff8695ec75a62610f1e61e5bcc1698d1db98"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31383436353937313935"_hex;
                s = "42b87dc0b6291705fb72c50b2a6b3091256d7e20f4970a2641262f1e2cdfa51088e2ed86018697a10bc8ec381f3708e0f60318bc46c5f8726ffe9f0f8aa10124fcd16cbe8af68bf135381da155a3eadfe99d07675e4942009ccf5e91b2cf6e0bb50c87b8b4f20511ee8fc16e489b30bc9fbc1918fd6079e0d1eee930b690dfc914d1d481b3f7d1e9532536a8e3bdd80aea0f8f4229c73d7a49fd3333bf2ee2e945ced2828c73c86ffb01f7a24869be8ce666670f848d1637de12c233774b35d71cd5ea4435c16bf8fc05da1351b9da24ffe88b8c12f4ad8eb7b080d49e1fa73fae1f9f6059b152407e028ed9f91e960c0189fa2992ae609ad3d37067061c779d37dbb469c03067d2497ed2038038001c6aff46340bda1d46c397be463fe40ecc24e16ca0e82a26029f7146a059b50d466d05a4bf45e7d5572e48d6f7eecf103a98309adab95f7bcc7b0f4b12e41bd56781172fc84a52557a29675a6509f2703e2503e4df3f99f36ef1f0517e54599d19b28c30076607e7be629520169f5eaef6dec6d6c4220ff81c72f45857e7cc157ef4c8f304aa38f375e5baf3983ee003fcf15e3c16224e9039a47f5f76a4ee7b31571353f7a78c5d21f72aefe3ba37882a15069654c15b03069ced15cbb17d93b154cb1d8a9a03d09371284afe12e85b02eb57a4f64cfcc165e635d789fd9a816a30e0bf9109ff31a93dcc7e735b6bee48"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33313336303436313839"_hex;
                s = "59997be2c727458603feb7536807fb91010d2f07ce7ad3976888a71226f5a52d22ec389dbc9dae076076cac0030d63acffce3edcce0e5961cc0e15e7f4dad376c453f040ede19ade900cd9e4b8caf01d042b1bcf5b8c9c61731482b0d5867cba2b36777d6abd1058cc46c59d62158fea9ad31e672bbcf9cf7c5a2569328dbce889948b6f8bb52cfdfb4e1ba367200c2aa957bac9d41959ca2d1c0e678873a136a2297a6cce79051ef6260529b3bc1d8af23897da1aa715ca34b6e38142a778357e267a07e0dd440c38e9b710aa665f02e82d9880eb166deb2d4e1c185bc0cbf8fdb65a97e7b21999befcd5515b0fb0b666f4af68d9592b477d9d41fe410eb58f01d7b1f6b17965c10065fd925d28bc6b6dc26348bdeaf7bc014418361435f2095cea870730dae1f6c98ce7535ead1bc66cb9f69e094edbd6c9a7434c8fb6b57276924f77872b29f102e45ca2316fe0d6545d9c9fd6f56c07ddc8981be1ca952fc7de6bb49721f83df7b2aefde971f484d972ed2964121d1acd8db1dc2b6b35195d077d18c94282f66da5f01139f93ef9d281c8ac70659b93963e562fa4b2b74a5813be566a1a10666c016440598f7c529b1abb3e189b7b00b8f2e1b944d09a473fde4baf35c18cf4ecf1d759f1bedd8c3d244d258eb27d685a140465b7741c9c3ada7616152efd67bfa9190c591e297ae272e52dc0064d442daef375eddf89c6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363633373834323534"_hex;
                s = "71d88b86e536052d0247f9e84bd7440c9951827ac2c5af27c60162d3a13d30cb85e71a795117bb9f81b0eb1537c2e4c7316631f7dc4f04e580bdbbbf882efdf9e7aa7655f16439cc098bd2c77c0a0b74e1eb179e911fe109a2443c22574e0b5dc07e721085fe68aaec83c0be7898e0dd3b4582c845e633b06690b284cc537082924cf8d09ec4e1633d05cfe89bfe1380f6ed48155e5e4fb178f66259df28751bf96cc6ead4f3c1d0d0a0618d4625fd0f5bc3cb8bcebc60e505a9dd72bd0223035fee6ff46435570066ecff5e6c9373377211b5111e24fb7656f65fb94aa7df71fd5ea34ff4bb1ae32d51468b228bb82095d4155dcbfa0ab9df12598da81e3334edc300bd1f9c4eb60a2a1f7b426248521d99a0664e9c973932d608371042225e4deb38c358c2c7f593f886c55397dac53f94e13f171ec06a0327f5f458514ace4618c2b4ae414b2927d98c52727f09a16c5f5f2d27936d37e3ba4cdcaa18688e2451ed19f67adc4732837e2c8fa8c5602f260e79fe0d9146458f941eb9c576c4e8d31e8c948b9274ac8f29be191bdb68adbc01a20cf2fc48e0291e0bd9969baad27ebcabb97958e9413043ea2873f56229b8601e7fde113a097063644835c28482a112085a7fdffdaf4e0dab20be8ff4adab5eb7393acce6575ea40966aca06b4e1dfba1002c7c5d055a89e11259ef061cb0a1f7c78ecd082d8a5ae2228117c0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363532313030353234"_hex;
                s = "872dbd850628be3edd02a7d8618c81a5713395d6725f24a7c7a4a5fd2bc377c0b3285d2fa3b10864325e3f50492a107a31380a628490503a942b8ab80a71b9de49a7a169f45fbdb663a96ded6fb7345bba3560b95aa8873462ef1a3039d889911fdb3c9916056a76cfbaaa4a13328b96c3fefaa5403ec10325f3619b176f6042a68b496a23320905a589eaf532273e6d675f25c4da6da1d42bfa53a16c850e250f16b49277aae5cfeae17b65d61dfffee85cfdde1e0aade5c2c24ceb241c7a15ed5d529e7a680134c5ce3923e77dd3ef5da6a3194df0bcae4acb2ba766c5fffc3ba6e3f849ade94bb14f0b4aae88ba7d4d32127d74d319f847806ebb34ab112222888b3df62df97b603e763e40cbb2503f0f88c201b2ec0198306acac11da24eb983a01e93063b01e419ee6d39a819171bcef4bd70b1c1eec3fe267573611ffc2f51b863956f91a8341c6478b13473e1585ac6fa7e7ed804021f60b2764a727f0b0fb683b0b023c10f79f983fd5422dc638b9dc83b59eac97193031cc6112a26f601531ac273ad970427a26e970e886a6ae4cbebea850b5c86a5f27e4e39b3d17ef0f5173441ae242fa3dfcd36c2e8ff7a9a910b1b757dcd16acdd2cd09c517780b65d03f4c655a10919b7960be45ee1da723b370e293650902ec2d2407a9d05c191bdbecca3af3aa952f644505581f2c4313f124a154ba1041f8c4a1f5b1903"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35373438303831363936"_hex;
                s = "1ca4f54ab74634f37dcae289b80a357bd0688ba1473a78398f4ee1b4aac47ca18c7e619bd95e62efacbd011260febcfbb4c39ef770ec10773e920aa0c2e773c57f6edf308f9af7df14f4d4b507204cd90128b6a2afc5e35d1f8a4c4b1dc94e1e0f83a8dd4f91a6b2a6e9527de6cfe3fa8cdea12004f1106c68ff661dcde9018ea2936d55bc5ee27f11aaa0f287f14498d086d620fdcee1a48aa2b1eea95f528934837f93f73cfb7134a858da3a49e11f7b5c4948cc56156c150b104f0c17a567496f5fac7d6d7a7eaebbc7c24e4fb80c40ae8c9abfd6faa774b438eefda7f27e25af393b0d8eb0532db8ea3e7d0d5de3983a06fc4a8e1590e42264a8c446982d141f9941ec98866ec3cd04ad1b29e163e2407b20ec116014a5ef70bae85d5702ab7d771bca15dd3db198bb26645ee1200786388b739e02d33244b6db27652412564583742bc700799f418153d9d30188361d772b1bb5fb2405cb1d1caab303400cd65399bb8dde393852373bbe3bd50ec46d516418afb8914026b27738e7a097390021136ccea75ed65af3c63dfbae938a9c52fad42435c21aaa943a89ff6653c3da52cfb2ac32819f09954a0e5dfbfa237f6e872f037c569fbc41886552fb7f6e22efebbb1b8197cb870b3e955def4e260333c59c98c6ba973bcdc5236ee0f450da196de4b18de9229a8291c741b9d175d9a1e9dacb1ce3305008ff19c93c62"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36333433393133343638"_hex;
                s = "00e1e76be1276a4a11f176b16dd195491f28cd53f6e05cf24236fcd28881f0d33b25b9e236da7fa32cc40b128d007e0bc0640ffe42dbb2c5035f96516110913d037d7de017e264d1fd11862cf911547fe07333b5bf48c3c2ab469e733c51faf346f403c9555b7d273cce68ef59d7b8cb36faa91f916693d1f5e7f9210fd5cbfab72ccf931d04773c8f0460a1817cdbfe479c87e30d2e9fcb81a804383b0e5ac0d73f5e57229b7adc5f8c1e8ad19a1502083ba61629c1f4425273e881fc303448f32f0cad03aa3e7346d7bf3b9b27b09ba21df73f63ba1c420eb5ce21a1f777554f3877cfbc49d5c7268aac844e909f0031a32d62bfd0d87c26e1d386f34731712fb9e78ab58a083a45014678a49651f31bb3fd72cffb127961de04462f9e335df384217533d37602d3e8c19c93e09097e20c4cb76bc2359e86b389cd0d17520b6315b43f965f6d23e65f75f8be42649b2eaa1a7f11b033627cf0b926852dd8640e5a9acff47c7b3568508ce0df17ac2e72d6598bb8fff2aa61de42df997b1846be0aba4a41f9f06c6fef81e9e8b500cfe08fcb776baa6646024f391a2f69e45a060a6641be139aed935d9262cf8f4275b17f735c72e9c60a89bf5913ba4c93b9e426c9298bea999b83ff53b07eebe71c13155ee0fb027b0e8c46fb9aa641e9bbccf8df1ea8deadd2640e01662ddca3416a68f0c7690b79aba52b1fa657454e8e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31353431313033353938"_hex;
                s = "28fcdd6cf03b8d97f744c27b3eed915b93845c1fa1f878b7f22d795a1d5e6a5f1a18d1d6d8cdbeccabce9577bd2831eb9ec1db4af7a3ebe814e2b75ad489fe02bf8e36d361ec480421b82717eaa48ccf4e14285f5a12e44a396e723072b862134daeceadef8ac42555b82570fa70f83d8dedf22235fb7cda917ebf5644b32f8b92171b5241d648983b4308276b4d71b65e61926e7057d01d98ebb7db442bf9553f59bf8e2b66ceb86740c011fd43b979f25809e3ee72e91908dad7b660318bd1c099941f7b7fd87d0505d17298438d23f7ca328380d5d83c0a96ef33250ad05a23465b36b3305af30a981c7680eb10f57be48ae114114b5c29f6f75170bb4503d340c7a300670a727640a186c8e491c40c8337d049dac3f661ca8bc4cf0e7346b5153c3741307e6d2f0b6f57b247b3cfb958b3db7f71dd84ad57f67067e9fccb3ae89cc77d6a9720c1cf69578525b2cd0350e0ad480d459b0ef7a4ec6238c3f868bcf7d8f7693d9b06d193c12e40d17a270543db29c0437e14fe1ea5aa2fe19c6c32bfe70fb6072a8c12eee8b21f63716b056c76d38fcc7847f8b3c3b4f2a8884e1e01db981fb156eb1a915b82e38770387c2d4e82abce0ef570c3fd149c951e31390e305701880dd75e0d9aa5f2780ff221345761d7a005351cc03ec313821687b11904e7b769469875ea8c33b77ddd475c674cba981292b4abac1ac229dd81"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130343738353830313238"_hex;
                s = "23641d3cc88c0160ef8244b8d5fda3b296f49f925fd4d461baf6676984061ba8e563911df8533b2ece77fb111b2b36abb02611106ead001349c1f6fd0342e84ad18093a4f98d5ba48bbc4fcd950c2a7a7f27b12aa6f2ee3c5d7c59f2b3427bcf956a2ffd36803c7b784e55279111b3182170f614c52a942a33019ae9f44ef9837efe83ddea6f404f74f9529871c760a5f801332b821e78e6df0146906cb49ee652041d64190311e699ed401b3122d36aeb466181a50ccaf31d7cce253b731498120c4f1c89cd5a057f7157f072170486f7156a221f47dca341360b682eaca695f1ba2183ead1d6011fae67419e05cdf522cd9768b3209ab6199cfa5612927769ef0b93f576ccf2bdb90f11e7017dd406a0b3e32f57239049f2aad5d33ec1606e7346035528c93df5080ffcdcbdbaf80946023f3e836068365a891ea16e26dd9691aee67412d3c6ef68dfb0671ae542497bcc25656781b9660de00b562d0ff26f726f467bd6fe0ef780bf93027b848c08d2ccb597ce88fab53f0cd2f5914f4eb86af463277e96842389f5ddf63398f850bca973fd305cc7f27dc9880a560fd2bd1c66ad8481c3487ecdb17831ffd21e0229218687d2e2a1b3001bb12995b612e80a3a2ede515f7d0dbb079da425dbbce6eed057955bfecb3e5df1d95f78eb6b8dddc485720c4a90b30fc287328f6d883e1a29aa45d56c0eb98676615aa21b65d4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130353336323835353638"_hex;
                s = "509537d3acd3fd84ced9891046c010f8071650dc5784db1f688b6bff391f1fcd6e1e4c36bb8e9cf9224aca9462f8c659f651471bdeb9599d9cc46e8b72227a63060ceda3f3dde4918bbd8fe3af7a09c825617bd7a85ed3ad7f2d9c4db7478d4e2b02fac3f8dc042a3a92c8fe9754912b7e416cd08e79daf36d41047d4893345ba0aa800f061a2abadc0010463a038673ab204b0589a427353015ada4dba98c02c07aeeaefeef299de8ac2221c29d8ffee3597f62f1539045ad77406afa13c35a990d7942e10fd9df962f1feaac38cec5d756e6a4764bf5348a0cd66cf37a0385e604e5049639b822bdbf97ebc45e5c02b058c33e09e6ff30513c7fcfe70756333b30bbfade73d5a7a407a0f1e9ede0885117c8012053043d62ba34f11c123eaa13d7dcce8fda5341788d386ea31fa23c0d55ddfa5011d319ce6ceb99a5be5054881690e4cf76174b507049cf75a15f8a27433bc6730f07e6e8d7cd38318a1d0a6e88bdb552d3856f68d3eca0445d9b6058556dc691105ced55d09cdd287dbfb2f01a8dc401c7f51bc889a233b837a19fd3231ae1680d3b5147312cffd3db576606a2c932d86dfda0b7bd822798efa4c71cb986813cd096671dfbfc948d08f2fa1228f93e2b7a43eb9371573493cd17ab2584260450f061288e85fe9b6684cf83a5609f549d6287932428736c080a3eb57e5e8cb342d7ed68ddcd7dac4caa4614"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393533393034313035"_hex;
                s = "3bec4fa5856965f7312700e6dcc96ddd5bbad99e53c47fa3ab8d13254fc78ae5bd9815c9c9f3c843e93ed0427197cd9b395f7ef1991257b95c28b5b3ecfd6818acf5d73112a6b1f10313507d602cb5c62cd814e1f32a165a325bf07a086232b3850f41f20081133535a0d11e92a73dac1b23dfa3ae5d75852bc12f3b914e987876011a0cf0f5d57c5c865caf1741cd8889b55c6a5ce72285c76d1beafb1e56fbc26627163cbfcc5a2ff8bbc66d1750b533d003d2c0587ac795fed47994066e5928e14c6ae4ff4b202a8041d37e376099e67fcb080c300a0ad3c88d6f09e12bed474c40ef0d69c270e120c5361d036180ac673b44e1abf1d5e0cba79ebcf94ae8a023b531a7d35be916cbc8aac8aae9e7b3fd89daa3dab7ab5a81a69540906a1a00e4d8f110b84217109c58055af4f23d5703321f8b22663e74a0539b783ea76c25f94ba4c7fa33f52796f6223719b6db916203eb156708a6dfe608109065bc0f452297f9be77badd71495f7dd3f93f31d251b28651a48b0d2465314c623f31f45229d64242581dcc261e72530b2104a32793e19bbf11145bab33529befac93ddc1956d3de933fa4d61c11095232d460b9feb2103b68f0a12993b9f3e9eccd631f030242403a39bbe5553a15a138b6d99a644cd2fc82b664fc42caebbf1d741e865a0b52e32b706864168f4d8b29903c71bb3c4465d644a547b5c6d51fe8dfa8a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "393738383438303339"_hex;
                s = "7655912506999c9f509466f90088bc697e0eadfc014e146d3d8ab8050f4f407c25355112361e64ca8def90ee3c9f9f8e4697cc9a08febb705e15ab092d7e59dfdb255a2c89046b4ca33fd94943080f3764a99cc2601689511e6e9d89014ff2ff3363e3b4994691469fd40542ba91a63215230122da5d43eee9baced2767bdb6c5752b89c7c530d0bb7c18a3c0fcafceefbc2e5f3a330f7a9f8dc3c73873c44305f80ca498c96e15ecf536dd00ef7132c08e5f6cbe02d551656353d0c07a4981ab06130e07ff5d14597c42c8432d9655c7b793a46771107b202bad1ab8be4b3112afd57ebfc89635faf67a84f0a97fbf7d136b67cce9c17807fdb993fa33a56244fbe182b47efaab64cf28bc369553ae0e9584e69de7681f58262437fce9013c1c20a1d926d99636c6cbf2eb4a3396360e60808cc7330563c006cdad7decffb12966a19d8c51689716b17a4dd8d0adc4a8fda4d86cd60edb2b3d683086630aa91242abc601c608deedc6d542f613373ea10393991e9889cb73db9cc21556ab6796fdfa5c9c4eebd99daf4e9cd7d2e9f984e4eaf42c4f5a6103a48cc931757882a5d044be85350235bdfe8c478117cac02b78d609f20de8e80ecf6673d19afcd90639567934d28d0cc6cf3de5fd9e6db80866aa2d095ef9eb21a865ee14e0e30ebf60604a507ea81bc1d8a19d06d233536cac549e37319269db4a54e55cb0c73fc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33363130363732343432"_hex;
                s = "611707a6b390de22ef2eecc67496fcf2b16251283fbef26087e1989150c1248cd189e65c52b9ed2d0cb6fc1644b6c21edcceabd63be7f5bd524ef68ef627d4ed6e1eecc0e33ba3c1b9d5db703582a3ccd817d0873a756c42be882ec33b4b0c4f74b8d00be26e352f8b5def42914c39cf98b549ffe843295eaeea3dbc5efb96b26fb5748c63b3719524e9f16aae63da88a0ef10ccc0edce9192f8b33f418a6c7870d9a7245b23c88b2d1a870a621a0e93eeb23e51d90f23dc9cecc766a80f96c66286b2a41667eaa152c97cb79b7a15f3c6bef6cba8e98ea5f0c2c09c13017b7334d323baeae1c38287513bcb670c340729f0913a4e85761bd0fbb328d034a4791048aaed089d1f23c5e5a8f85427bffead66f7a16886a6d9056cd60ca761f4f08fae54d77a2790852bff8489207883175893f2d2c50d238ba281406318f24a43255a09d61919715feba83ebc991824071f3a6b98b7f518f38284fc36e719e909c952c2bad515a80b700ea2ae11cd1d6d78a599a592cfdc912cb41c514711a0193311807993c6d88b9c7884c9b614b2dea1b50bb2e7f871cc373b4e5e97d514c973cbc30b5c2fd6d29d850e18c20d0a68793a052f5b2ff830adf72dec1729651b69a167e4018a250d45cb4bdc35cee5e1643f00b23281be6546457e8b4dbe5b3b11e50110814a99bd9acc15889fe70aa39fe688ade3fc27921506a1b65ee6afcf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31303534323430373035"_hex;
                s = "92bd2f48815c4c4c0f05d445e27193a9e8f063f9e7976a24451767d3d8f5fa0ff7684eef61cf6cf035e5bbade10a662285a4f961fd34bcee1e9a12726ae4fddab6b0b3b569dfaa64b6f956127b8b548bb86230e97de3e1671fdebed2ed33d320b226c81a6b1a95938659920fc948f298c88a2173098f77a66024f794a8e5f17b33b4f20aaa920b27f90ff62fdd74f2f2cbfb6e42dada530b17e770f3e1204eeb47ecb50cfe30562d63b86c4e27d86aafe03075d92372586d950ab089bc9fbc0834cf2288b1330f8bcbb99d0e4ebc12a3ac9c97cdafe9c2d6fbd333900339e9a0e63285ef3a4497e227cefc338a4a4a96b1d9a851f2b0d305a7fd7b91553b72a2fbc255757f9f44496e8685a9a30d5de575576f816405f5f543086eb0cd0421fe674325a49dea1d700e4ccb664019adb55b0d7c1255c9d32ebd2a6ddde870ed7dde3174bcb35aa5bcd62222ab221070ba03947ff63b8b5d63517a4b2853942df059a30e45d240c32988e933c9255d1afa0668ab70b9475d19f1fa009c8961ba784c0161b2acbd62662746120a72b32771b3da0a0a69a42b589c60d3c36b94128d6b2052a880ba7c877d85b28d49011d27ede03937e9f6fe8cd804c6914e1d998bc3bd167afc91a653835add13be446101649469014476e86429818e86f601783e7af111adf4994336b19af662587dc330b97a6966209dd3e0f969f8c5dc53ad4a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35313734343438313937"_hex;
                s = "6cf40fb8fdbfd3a94a69b9cc9cd0116bc040454a7cd08cbf7b878b7c8683d259c8623ecf935d7d23560971ccdef3293b2eb33000371e005c2e3a1d2ea07035ab43adc657ffa243b1ef073f5f218c789e1e52abe553220a67d4abc258edf642e542616dfdc50124d332076a40379bbdc60838a439920564fa0fec9cc9ba59c75fdd6c6ceca2c290c7a756da0c6ac837ef4395d506f5c9d76867483ac2413013069e0160bd123339c0beab4fd5884a1c3544fb6267c8e53870b721bd56b863ac06b6c2de1791f6bff4593337548715d24176bf9fb8ae5a0bb9b36e56b09060e2a4658844ddcbee01f1b4c703532058adbf05162ca4b9abea5154fd569bedd519532d81ef1312e9df06e52df2732ca7527676704bd445932b240a9fc4858c4b44ed06fee30b50c5d89f5f1046b9eaa07ac1308514a35a19d4c8ace5b57fda573a122c474b74079d4b0c47b25f1d3802e01f6f4ce1f0a01281edb39485c48d6587cacf5efc2fe194843f72b4adefe05a8364f34de739d5a9c07e5d1272b1aa8b87bfbc4075030864580361591263f36036758cc9d54fe65ff1b3abcbded1cda0990c361ea312aa09632ec91f4b565c4bb7ace0b7079e520d41e2666f560592bc7ba80c4af01119bbee9f0aedad6bb323139fa20b9e568870c1e83bc5bcf42c90d477f7bcf2417199e3d20c123d44c7e846d104ebc36c6a4a6729adb87b28c8e1a1e1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31393637353631323531"_hex;
                s = "8f1e8b8ce7d7a651a5ccca41c4c2b3f7af80f1fb5de311d54e8e693d3fd53ac27a6b9efddc2d934efc81d8695abc6661e62e19554a4dab77c4893e735439c0ec05097636e1dbc7dd63a76ad0492b773ecd3853283574430c64b8813c352ebf13a761b769918317c644b4b0c2c9b9e04ee94069bd9ce2f1aa42e2bfca0e02e63abbf23a75ff06e76631f6ba4384750aedf2181c1c8f6b780c0960b29a56959b171ddcb14ebee30291a35e618874e51cfcca78dac432a4afe1b92ae0ccab06cf449b9175fe9e5d3edfd241a18546f6c4c8682ba379155e495a9c6ed0744a36c40a992a9391edbf1220baf11c163600c928202111a6bb5c5c7fad9bfdef2fdd2a05887bb02bba673842d8d1ac48888cf8396cb70e5cf0b51a717e8dc381d3dc5d3ddea59abe23191820ea6786a337eb67adf7c94910941c3dde3ba2e4788a533605d1fe15a8d309018926f29fed39990a073777f6fcdb6a10839925ec0c8ff3ea80e13844164478de928a3f28e3643d3c3ea701cee470559e5c71c9da344b35f624bd91d58112200f343b6a3a1e23a578323f390a03e0be72b5cce53f0c7cd2594d519d2d01f430a9ebf0cdc9f523e80b00577cb7f524c204fabb01633ff1f5a598f8e267c8fca23c72cc559505c19f6b1f9cb7a172d87cedb250123d97947ffc050f4abb4307bccc757d3a60d12f2926e2817af65a24742ee2edb5eda5774016e6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33343437323533333433"_hex;
                s = "38bec0ef412ac3c934aef5287fc4a9d55c450dea93a8aea15b5311e840a62d60558ccdec3edcb7427ac9b6fc89e5a094ea5f1166f6abc24305620f004d95b5545693579732c97a4593e58d3b5cbec63071de555a48f9fb1c8ec7f651fb0f8ac95ef9255e3c41f56f09910746597d62ba88629d50587f981987d4829df4b1e1380bae7be4603593a86ccf64f32af0c655a87a1ed127ed5b224bc3284875b9109a94ce76f2f86bf96c3062fe77cafc252ea62f862cb254ea739b6fc9bf44fb130057a777c8e45e368cb9e9bcba824597497b9dfc1857b494120807d91f181b9c7edb32f22c3fb47a7086ce4a0e275e0becc178fe9f5a3d77fa0247c71b9a7874e4fe0340bc258926fc6da84f9c06b5795893021cf9f97d83b405af71626ae6ef604a92a1bff52e672f7f2fac248f24ce0a78225ffbc19142994fa02ce9b1949e5b60f9e9129ea4281ee798a2555575b69d33170724c3a3f0f21275ae8c3bac9648f27eadbabf0618816e6864a9c7e0f090de9dec3cd920094d8c2693bf9470c2f0af5f66065db34ab26313091b3c7716db9f77b09e3965325ae03ef6933961efa8c857663918ba75a1fe0d2f4689ae8edf722dba2950c9c5bd1892886b16a17936f5978188ad7c7ff3881fb7c0aae98e495c1e1842513ad63db4c55cb615cd11bcec9a71df1c5e9e2c98d108e69bb2e0da1be314a3bf6c203fdb3884a2505b7130"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333638323634333138"_hex;
                s = "934ec7da0f9887c3abfd01a81db793fe3ab2bd121445906d7c06b222bd52f35061cac1e7b5208741770534478fa8024aa6241679298830456a73da97df0d1283f7638805587977e875cf115c5e4edb7bcba908f838d0765adadbf4a26e3fff27798de0f2c1119bb56e015d5727c2626042b91dac8935da51a97b6963bb7a32cd894ee5d9ece32a258a61f8c81a753ffac15298f27204e6a123ae11021d03b81fcb2e9ab2fcc0f6c8abf9b7df4fc417cdfe3b630f467d8d28501e2dda1e41d92a9830f18d64630d1d483287a2ac01eadba8bb19564ddbf3645727d907e24afdb7d491d7c72e47b747a4aaf6478055a83f6ab63b266a74d3da07a8f601f8d18d75bb84b088a83976b5af2a96b5c8faa160fc6027e9c3661cbf536234d1e49eddfcfaa426ba0d0593bc012a9887e51e7bcb83f90080f535316eeafef3ad01586053efd070e7e2add6cd82b86b7a1a0e038972a3b7e8a13608b66d6e6c04af478de0842474838e1d9d06b001dc670f18346ec04ef63b09242bdfcde4d049a05d0ccaca61bf07a2cda5e0099bb8b1948a4bb7d819b5107b052e1f6ea88d9ff6bbb722eb779bb1a537a33b17cb5f44df77c12d32877fc95990fb56d88a6de48ab74799c6f4d6d209403814fbfac53de4176db71f44aa68d8af04bb5725416d927f6f97466686a40bc20187f843b3d0c21119fdf607268c33d6b5f0d8284e4c0705e87a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33323631313938363038"_hex;
                s = "072175f202038c0970767b29dc961f86c0a6b1b7b100bf326180c31b65b0d2ba095ec256c4e3d90d984f3de8e88f8f1b632dcda3982dcbf13a3705aba7b41be69b905221e626e9cc75925630a3686676c7b8e35e9d0e96d969085cd9f1d042d6647a072700ec134a7702ea0d5ed2364b8b7831955b27b1536e4e8cef1310e6717fcbbd41a787a805d1654c95678ac75909b623a045a49b620b11ac167959308c3125257f36f2f752d9bb42e1941f0d23dd5ea200529082eaa7400d24edeaa70225fd3604f9f2c367dab61be53218b2acfac3c2ead194c5080378378b2cffde5cadcd3a559cfcfc229ce1380ed0da35d34ae83920496182ac41ad29621efd4242699ee511ce4d1b383cbc3cdd6ecb67a7f1f0f3e84d57b120435b1257498c73d922aa27fb91fc0fd63447dbd6933320ad51c0c3739d3fa65cae206682c23727ad46cd5338c81d1e94ef71c2bec4bed6c75c5b9f4b43eb7702b945315a5c27dae2ed341eeb35468978c1bf237b2c24592d4c5357bb03a9f2e68b3422cffd9fdc0ceea99ad4871f5e3e9174438fccc3b03b0396e9c6cf2a1831b196f45a193a72b0f02c5b83072c87952c41a039e0fc42ead4eba7b155daac61129020d4b1e63a6378698ea5718b6db973343b94e9c6ecaa938b01cdab06d35aaada510554c424e39039304e1d357cca26a49129f400adb6cc0729ad6012bca1e3d676c9c68e765e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "39363738373831303934"_hex;
                s = "40760ad79f382c7f671f00aea354252274fc1f0610b3d8d5082552a0370482385f3b67e70b7d144a67e9400e2a8307a08ba99064aa77374fc0456cdc4ef60a9baaf9b2ebe24713e20eeb9203387019d3c76a637712e7e8bec99b32b6add0ee54d362b888f8ed4d3915eb6d4aee085a330eaa412da99c82c6ff029eec54c6b1233d2bebb581b562ffc082cd805b6c9fd18e4d1a2a18e0ac769e782c2c1657ae1d3756e3d4b5f7976abfb6debc441d7e4c13444a99b750a57ca0bd90183c11a5d8728a984a8848e045832deb4c39bd4ddb58ef5650ac0d555711082f4b432579fb1fb8e39fe76f5a12a9d038413a4841d4280ab46947bf536d2c4ce465e54f3fe2948332158bbd15ba38c10174777f0174fdd9b918c285e1ea54f233d1fc8fcf8e4bc0d34d49b5bb96f85390ce1ccc755f5643533858177b769db891470ad0257121b28fe310c4651d476acc88409e082bfb233906347b521cf66061a0fb094568034a76864ec125f7bc2e4f0157c5e8d774d42010992cc11d0825dfb8f55e622aaacf05acac6fdaf8f69c5706e0bb5d0cab087359b0e963098b383bdd92bf19eddee8c3a921a8db3c3410abc8ca4b41b970fcc58113a3ac2439ecefaae1d415a0f404132f2f8ba9e846f82d7e04640a283f8845aa9cf59524be5cf55cea71a04bcd10c6ac2be43abccec34aff43d09201865d65f26f7233654104132fb451edcb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34393538383233383233"_hex;
                s = "32deb686e013aa3e7d79a1a6790223e7e06cd6ff177c18b89e8b21cc361b9af7a99c42fb8d3553704b198e5ddd6839f8d3fa9a5f08aea0e8e31591c0e73ed6b26ea461f3d60bbe54f5ef15618d80ab691ab176156ec2fdfb2b3a49c32481dd4edc91c0b25ad5206e88ad2dd2bfe63c6a9f803ee56aa6b934e195ecbef15d2a7811452e13c9bb6b4f2c5aaba5845f8949edd1e29b573d661817a50e1acdb6d56b1cdc15a40e714d275778883baac648bbf5e201956f8e9ebde2eef1d5460e7701a1ced7b53d20afb70fb765aa93b913d31b8f74d45333673e081644f5bfab367cb13918cb35ecae49a23c9f4a42ca49ed166d0eae9c97092a1b45552917a41e9fe7b9a06cd03ddb4f66822393ef59cfb0d0b3a848a15df3f47a6566e541d9b9b435cb6e890c2b89bf2989b59f08b6090aa6248bc11afd626679c0087c95962616a1e5d0afbabbe71f3783b087d763d8de4983d888b3aae037cddfc5a4752024b49a0827355ba187ec1a53e7cabaf39bbd6d0b0997f7c3c0f79b420a774cd3d7d74e2fcb78942bf04637bbc6499dbbfa61f7c6b377bceb87932c1ac60501b9def1ea6fae8d9544fe37ebd225c559b642d00ed5485253e23661436a2337f58e9f6a395f74094f60860e0dbb8aa460bba035486a19d9235631d95880b385fca04ad997e4062520fc43878628a59f51520da7846dcd27275c4cbd2873673c6492c201"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "383234363337383337"_hex;
                s = "1464791bc1e7298ee955700cecad59232c24c2a240bea9b3105bd70b0ca4bb3f764022e1275d4368a1b70ed8dc393dabf74d4fffd748db7215f085769e0fcbd13b335c30099ad01d98d052d0d546719a82d55ea8c63db5cd732333ececadd1977a976123a2f16005f1cf0c234322706f4588cf362722c76098533a63d348726eb3080f3a777e1f5bab680daa841b8dc63fe404fe5d33cb7eea62f3f17459a412eab45bd63f2e846872cbe5d835ff6f47ade492dbcc7b8e6d3755b7bb83dae7bbe82468ec011190f693785b8a1cc831a4ac695aad172909f25c910b75b460873b9a8e61e0f622b76d7fbc52541d49a70b77a947bbe5eadbdb594e05de710710057f42f3adc3804dc3c4201bdfd10c9933fb3c9e380ffb25ccb7b6c7648e5463247b95ec300a8d9f2352686b060a516a8b18f88485e64129c54a46a2e0b68787d27bcf8ad92a9dd0f7ecf6d43e9015cd2fadb6e4bd85825f1c7696d7363dd64fba85ffb20ee26487a8c95d6a1f4be5cdf21fb3567f50ec9ba1a2e5c87ab1dc0bacbb56377345af1a42156528fe5dd1f9f2ef50fbc64de4c4275f20f7104820cd3e3a8ac14e0aab82cb6cea9822e0c4bfb7c605093e41c494ca49e5b72dc25a72ae6dc44c33f942e71814525cf2c4338037c617b4c4b79a020a3471986d12b057c484d9cd5132ffee4526aec192d0dcdcb077368cc88cfc24d50c7a499c9f98f3d6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3131303230383333373736"_hex;
                s = "5214543874991618c693495214bc75af0941b9f81476c074921bed4f3f287c95a67906a782119e79033b6a9a25b52678720dfa5f359ec19977f40e01ab5b48531bdb1826caa266d28fa407026319e2f3ce00d04d716a71f98856cd48a60a7de7ce141d14bd1828eebf993a4d82abaf82619642c6cfb17f19489e6b25da17ef1ba1ae105e7342923c56a94cc1d002ae4e853f8f18215633b4a039dbde7417ce9b0569875990103431fa0dbaa31691e81c91dc2e20482b10dc7442d875bbd96297a44a3be721930a14434d58680bfbd46d317297a6b552d76ddabcfdb18e7f530b482bd8540dd9ee3061d213bfb2ff2eda3018c9d57fc1f24b77fd5fc61ae56aebf3a879d3042e097cf33fadc7f4c9899475fe55b9614d3ef190dd75547bfec4a311829de159bafbb52bbf9800e4aaefa1f4dbdf26dd228847eb35383ce366ec0843d9dd9b617d42afe2dab5faac4e036882724e84b188017e9bad9bdf801ecf348ba22e2420d4c89b43e0c65a49edc20f1c8f29ef113aba75abb7a261e5cd96585d17d4a4dc84930cc58e857416c195fbde08d5d3db25db63c5c2fa44fd71ed6c101f2b512dda449981481c6c1704dba05aab8443eb972710741087ff2d3f76a36550efc835e0cc0304b564a2d1692470230b384905bfe2fffbfcdc996c450fc276dc299a046cd145a7c6d74ebcfc414e81c32b26cc2d54ff1238dc4e4b90ea74"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313333383731363438"_hex;
                s = "4d93419477c751cca75ba892535f1a52ad7e52a598cba14d8c08ebc660772d4b63722fb731bfb93e1734c3da1e80527653a363f9efa1060ec42c1b536eef907ea91d574398da4d95fb61f12c570dba4428ae7c56e0711669ea0913d64ee7cf4de664b6321729ae15f35f3916f1a72df2d9858a3dad3812db0445b6174f40f4ab0d81e030cf4668659ce53364cd580b77938df1a95a7de0493b052a5c9fdf947eaf5b72104f592ef391fe87f68ac5b4668692244ae2ae93b7fa544cce0a781ac4835fc1ac122c392f389af8086eb4b051a2d75c36a6db45c5cd7336a298ada80d97504b3c7c27aba5f2607e31046586ac1d80e3e8ecfd3c0a996fdafea4d97e30a29f55bc81c1f10653fb23608f63a0e91aefed0578682c8c3580e29c7a54e43265a5c4903aa5ac0174dc4c0bd21f55773017f0dd7330d9f0cfa7dac3013ca495644879cccf763d32379811c7ea11afca9f99fd5505f7766224e09d9fa046fcd7d0e3f0a4ee93b2c0dd7bb1b2d465fd325d8af89ccc1d97cc862c49aeab56688d4592a047ed4f0f19c3602294c10ca73ff7987b072f5431789dd95fb9d39cb4ce3753c80c9a3a663111ebed5cc48acba437f1d600a627f94545aee5d742755ef480d35fac15d3829861b2fe9cd5859172e70699b060e213bbeeaee61e9d8bd90abd4ed9e0dffadf737d2dc0d594beac16d039851c97d0e3d030463caa1b90f0ab"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "333232313434313632"_hex;
                s = "23dd57fe7ca4c3e937ad1b18a540bf3a425202ca237aa5c5e423868d0f23bdce63a69b5432095374993975749b68c1683bf656fc695f35869e16be84e59049817b652cb9115f31104d8d1f2795d0204d46ee862d8d6e1d250c9a2eb69e5caec4d93097f614294ed3794f178ab4121966deb1ddfacef5847d1278bc4d3835c97ed1e7476347e7ac1632e756928e2cf560468ce4a98057d264d1fc82189ebadd07b216b27b4c66c4d486ef0a9a578caa2b519716687c351c69e51a8f7dc6b34b8cbeb303ff682a767c9ab057ea8d52621e3f821da0d7603d4e8d77703474c2d8a0c5756c8f42e0f88b3e49056adc721c167e4c43a5ee54f2f1b5882c38e7de6c10faaa89e1491ebfc318a56b18abc97623c70a6a13205f24a15bb8f5f0b6c6e4017d50e5ac68c35285f1cf7ff8062f5f79e8b9a0c29fa54e4a36364c5db7f3391d56d5c11c4bad27e07ccc9c004571d338632c3e761505f1978185c4808f3ab8daba5dd6aff21fb09e8a6e585faca61a2305e2bb33b991d5b8835a3d10d0c99779efde6cb39492379cce1aa0362b1f25b6f88ee104f528727dfa6546c4b19b3f045131b96ab5a27a07da8d9bf4bce63261cf265e0e4753563db4da1a63738d8c930a51ad111a8dac6c6efa8529b83665d8e9c93a05f0471f811085ae3daef9ae4a8d9ef3907a5149659e83ec74e5f0aaed9e775d15585e4131f02c01a08e73db64"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3130363836363535353436"_hex;
                s = "7badd3feb2912409086af492b43c5bb22369be5885713f478d831af1f07ca200f0c67c2d6462c555184184d34845b7cda60e5f278b38fa7c009ae9aafd5abf9fb1ea4634ce39ef8c29d341d8c6dd5380943b65506477dd4ad1153597d95329dbd5a7755d7a27b50497246bfa4457c3b8bd425973de847441e97db38393905ef6f9cbd862daae8973711ceda67ed26096d76d16175ae75672551907145a3ba7532e65c466c0bf2d994898d41a367719adab9f76a25a9811443f1a3fe2b55c2b4a30a4fb2e493d6dcd9ff96faf456e9962a42d715981aa206a5575556f9c8f6fec8a6fc991396b621ef85fce6d63fbea11b2a8bc3e5a1c8e09d446d4bb751910c7de9535cf1ce2a825a5cd52b28a2a4a132420483850388a80c193377474aee0a7771c93e2ebee1fabea7c9d9f5cd88ff6c42cc84289fd2bd46f3cd2a3c1435b062c1e9a0b0bee7d0bd87e560c0ab51ae105644c50aada070af7f26db3c00698cf24ea96ecbfc7a365061f86970670a046959514ed41fd64bb7462ca63c1f171f0630cc511b105d66f60e3c5a761aa6daf60ba1e098ac05b509f7d44c75b168d1afdabf756d696c42b63cd157ba7dc840facf867e6079c098763be70b97f1e7eb573446cef5fb8917cf855451d92ab0c5b6e3e16d835ac85ae46b471408c24f32459e0cbf3ec3ec386df4c4858d38a1966ba074928aff53c9dbb9bee8833cfd3df"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "3632313535323436"_hex;
                s = "4aa9cbd6bc066ac61695e4911948101aad036866fea9a4f8307d05683ef9f361ed0a819f27e5da406666b1d0aeadd62de8d3540943c97d4aeb9e27faa08526f07fea9b388efa1830d557cfcb09741ab1ae15288841705aceb17c54b24089f61bf129f7ec82e5850b3880e0d174f334554db0f3d7438bcb13364625a4e1a692b86740637e335f765805f52f165d98ebc678a235312fbcf20564edf18dffcb1e0abe404819cb5807c9040f42b61b8b80b1f4be07239e4f3514d022684fe9572aa008df1c9afad00210af1a05bf6b2fd89a53d1268e509e56c587b5e1b72d18c623819c55b28e44c284cc5a730afdbc7d930eda16a9bb38e8f8180924b295744dcca65311a233380f379b9953ca6df77abc654084beb6ae9289c218f8db96c41bd5788c15dfd43e4025633a83537053343c19e83ebdd15248d459edba26f17ca9bc542954f94cc73ef8be311cd97f399c8f57d03a66c268a53b2eb850a6b39d2c7779e3e9952476a400e7745bceee26c11efd509ce4c7ca63b74b92d472b020cbf7a3c83774f7ad11bec93b9d65b1880ba4714f0c6236c15bf1731ed36ec473f67d8df600fcbe41b6f29d47624e6a80f015414b3b4dc07fcf8558dc29c3fa089f1329632663e4cef9e10dbc1322e5a8ea2f6cfd428f773c7ed56e268e77b9db742e0e5344ab6db88202a74aabc15122fa5c7a5e73dd430d25f8c01e260122772b18"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "37303330383138373734"_hex;
                s = "67d6c590e09452f1170c57016985ac4d7c065cb27100e84229a12904b7187373d74b1c525d4e5c8f13f4127f797568bb192157dc318f55f74589a14226ea09599488d3a81de3bc431c624f4c43855677f691a40541c8d6798fb75f498833c73ef40909d40f3719c46999ce8ef6e1dc2efad90fcb06084c3deaf0ec57f724a499af95a42bfbb0bb0524fd9859a50f7965c10cc23a0c42e698a495404ae9b5d136f8ee7be6d83eec858a6535672784f0e3865a43a932460c5060e5648804cf375d129af3b39ad2fd4be91c8d1fe3a0b1711c73531176abdbedf07a75d146132ada7929be08cbbf0addf32763fa1dc5691d563ae1bbd8e2bad3d993c6ff8bb12dcd6488a69a7fabd4af74c7a22b92a6f69aff108d99138c56c753692bdb4890cee153f8b2dff0f22d734eafb6266d1488cef3afae9ad722f9ce99b8814dbfdf913c4658cf1b5d06039f3e268decf05fab2154dfa16e6b25eb2e580b20058a1c5fc3d88db38b56214ed70978671702757b12f7e182ba44e02c0d02db990f65e8fc2dec207d86a22fd616a749e8bd3059ed2a9b9bb597d5dc59a64c182f1ad2daa9c9ab54c56084557b93b72fefeffb52f4e33d8a937840c990342e0cd9b6b72a204c1e06730a168907951cdd84d6bbc44d113153175eb402cc3d5e36d4740e7dba5a24cf94007c76f1c87be617e92beedb350135828799226c0877a2c7ca8b54b879"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "35393234353233373434"_hex;
                s = "4b8ad9a750889c2ae3cd3dfe7205c974ffc04f15ba9a05079a1fb24b093d2ae1605295f5f38c32c0b934e56f06f68dfaea3e52c22c2ab4ed8f225b211371d9e0eae0e1a2cd9c00ba72a5e0f4184da41e9dfed325ed7af87800e044c0ef4f913c510c3eb5fc8a0d0c36a98f60ddada081491fa1a4caab1cd6c64ff0e9c0c2a4a5714fd5d74659fdc960ea2ad80774ac02586b488ed4dd05901d49f5b6429eaace02f4aac5fb4eb7bf7899842a028ea80e9117e234a7e4ddbccf0a6de02d0f1fe6701920c4221c02645ed560289fb04e73a6d30ebb39dc74e1c087c8ee495ec602527543b3bbc5eef7b2991364ed3fc27b1a21215618c02a30582afa45fa4856439bf20daa0d16f99eb30437604f31192f23f2bf9c57e97e0c5283c02972b6a9571835321119662fc55a938b332355bea18b2ee12c4c0dc603cd28af343d34d3f0d4bc5010bc661711690a45fe830c0cf7814f8aa10a2cf8ae284fd080d73cba5af3eff2a4fd66fb0df825b8725ede4c5184a9806803a4d0c94cb1dc64ccf9ea71f0e98d5a941f60736af0731857cc793cc19654bf5634e4dcd8899a7f7147d6ac70da9c17146dea2725259a4f64eced2dc936c825426856b81c92383069908e8f4f54189af10a465355f0da514e2c334fc74f8ecb74e5b452012def3a9513f46a0a54ac749ba89609db9be60543b96440d32446780e969e49f7d05a9cb74115a8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31343935353836363231"_hex;
                s = "1932e0cf0ffd2ada47701e3f5b6d8f7012ec9a1ae8d75c53fa3c6ab7f7d7f1c2361de4cf1ee03394489338525df2f747b8defc569f8340d26c2dbc193bf107f0fb19c6e148255128f37bfb3a5955f30d7ea923e15f8bdabcd87aa299a6695fabdf6104a3457bd18b115303ce6d6c35c8dce4b2fed8b498de5010b01dd82fc321144b60196f45267c6c8ab8e9e3aeaf7911f7a73a3d5208a2642f8254ef00f1fed65f6c816f8a924399d6c6b71eced98fc6b22da2c3495d1ef3398bdefeac88553829990b2381fd1bd02b53eff4d68c2052e2802e71e2b5532c32f0bf8521a153276fd6b2d499a596743b82240942e6ed7a19037dbc1216fbc42170945a35346bf77ec5658c9f8fcf5ce6e75de299154d5c88142c922f4e04752ad2a6d8220d37ead668e3caa4ae9c2c0f3e44d430ee2c115a7c183e91b0ac45f884fa8d0d36c1b6a083b8f1145b0fe2aa00a522d0da064c92425e453af3c6746653202e0114ad8168a031df8138d24a655ef654a9907af69a5f9496111b1d97be6d4d544701c1853fc7f41579402840f15d974a61439f601c8ed5cd373c318283d6b4eac968d2ac1357a90bb272857fa501833b9ee2bc93924d3114979f2452714bc6b1bedbfbe6b1b4ed0a1465cff71bc8796bfc591000424a5fe97403ad7802a8c526696c519374c3159eca79f5e8e3b1edba8a8b101abd3573e80a3c494567724aac687d58"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "34303035333134343036"_hex;
                s = "7a7e2026a025f6a1989b14dbb30b04d03b12a96d847e56183cb73bfde34fa4a5ada232e5bd4e93696f17ccd1596b0bf1d3071dc5f0c186ea7d202f243ce959100892abb72e1c1bdf7da2e5882867782ffe4622ac0c8f867944352562f8445b10dbed73a09d7f992249a494c258abca4fe818c85fee10fafb090cee6db52e80e404e5b49992f321f7d842ede62881f14638317306079e87d3d713232d6b80b49a76a9c62654240c47cc8eb9d6690ff9dc19485a48587b392dcaa3b15e7f78cb6b034835f96e9cd115707db08020b23ef87b6dc31f4c54f0d17a9a714a975ddb8e8a03b627604fab80cbf52d7bc1a9d8678c3f58c73181dbcb55f0720ce8d281c3af9c67cf9117c44866e926a5819c23c482fb53c41dc44244ddb657f8e7760ed6795cd875813012ead3822f5ace25cc1e3d0fbc4b3972032c8f7ba0237e93f6e0029234059f7082ad695997c6184b4d5b22336cfa381cc2b0bcd1ef0019ab62d0f80a15c31fec09d8af1d139c2f249468a13bda15e49022b7b0ecd6dc9afaa15bbbd978e1bd71664f272296c2942f0488d5e72a615536bf8008b4471a94666d6a2fafc8eef8ad493fb0fad8c016921ccb2c3479f7efa44e8b2f109621d96ac4ed49d6c20f423cbf89a74bc3c528b45ba8ca341612940b21ab6ff1f12140200fa4d779ca76345e6239f99c6e9b627e3d03db05518940d23b59a9f41710afe33d91"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "33303936343537353132"_hex;
                s = "57f2f391111fbf44c2e685940e4fe576304a638b7783a3cd5e374def5c89cb81e24d68e37839ce8f39718aec3570791107715be3e004a907e477cc29ab3bf1a1c130b39f19623c747c62360be5c68e93f0fec81bab2ad1ee7313b5c9e2b6c3ff5668dcf873ab7beeb91e16a9239ad46d2441fe091db86553856a97f45607b749da6982feaf59f5b5f751a5191e0f45e0a7b4a309523bff24d53000aab65bee328f1e1979916a837362f82a32d3a4b72f1a106cbb807e92eaf316f74ef19778210234043a8a64b4fe7f7bfca912356af5bc765fb7f36900353a56fed653b31eb77c77c2bb448699ca84e0d20816e4186ec2d4f4c686d6d4f41a35c914f34415254b57dc3cc02ea9c1da2a6cde543e3b344d3b59ede5b18a44df0a1ae87caa003250034a6f00903dd691473c50d038ec749a360c9a35ffdd0db5c7cf0fac87a230227890d8f8750952f6d8e5b7719051110a3562cb96b1592ec85387fc7fee30fa57e9391a0fa71d1889d61ef5a27657522dcaf75695dbd5a3d0a80580fd0d77af4decc580483e91b17b2acbd0298d4ea40583375f13f561d4aa459e803275a2e365eed2f3464207e7751d27d3859f716a1d668fd0f618b0e850b52d7cc4c88d5ec59a7aabcccd5da96ae485726286f2c9e31877bee9dc5411b198b11854471b49f756040b19d884a57d79ea411e700faafa9d80b0796006c9d1d0ddc417c21165"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32373834303235363230"_hex;
                s = "17df78ce7fe125d90ee5ccf0057fe37b4cb2caf4046ca8eb6ef3791231189a78f1c87305a9633b32f1313578df123d2a56683f66a945115add501d8ed91693f3a45abc947b24f87415f2dd137c3cd7835dfac4c301cf1d80b07dd0a48182e4d64b8257e6f19c668b737ba09b1cffc023155f2d683160aba73fd23848f687171d3f1841114470d176465c0c31dce07d5076e46cf6ba2a0adf8509319b6ae1454a359fd9116e746e21620dd7c71be826db8ce6b4e117883742a4d7758e71fcde995ff16f0d442d48756bebe0ceb43aad5b7e09024b30124757e93ee53302ffbc57e9083dc63e15d04f04f0d41f243a8b96897155e92a66116a028aa98b3b3c05aea992623ea2c764e7c3807c3c3a28453fed5038da31e8a38bec7110a27d0d1e352d20b88cd116ad930e1bc4731d9545ca21d8873cf8b86aa00af297b783ecd81c9eda28b2021fb0695937f191c39703465f9d4a90a8e8ae4025d63ccb941534a919a9181e145d365b1f9d1e46925bec75bf5e0ba45bf7bf68f744b90e7ab464db5d0ef971d46f3d4b44566853a92dae61a48aa73ea7bde8ee5839bb447d52953b0e5722a32b398233cf6957fc283af33d4c4728321f426133472657d5f656ddee4b7274e22359e16b486d5fa07f99b68893baf210d55117d45bf56054ef90a8b6645e8d1019e3aca49a5bfadef85afa6d003c687234309e3402a91d493352a5cb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "32363138373837343138"_hex;
                s = "276e1744c1b7062e91589ba1d76b136b56efc48ceeeb84121877ab0c395ba6b09594c0620328057e9af0a460fdbc06c0dca08d163ea9c50f3f22b71994d569a6c09e515deff62f88507ee230fd1511b176356f2500a1636bc3f8faa0a3eb0aba2e038f392d7df644b47b3bb9e23d3871ff96b41244d51f9abfb784a40d18b44a942528b4da7c1b9df5ce4c9ef5f3b014ffd7112922de8270f9e9821d3f494d33eb9b28b9e74a36355886355dc76c918b7e47ff6d24f008a53c87d9f7bcec623ebfdea1f699657e630eb8577a2c80b6725617f4b4c5561eb3cc7c362df8c0cced77e995e1b14f889855aabee25a2a63e9b74cd22093e2ccdf8466ee94321faf156ef1be5c8541fc7d432cf22bcc681e0c57035fba354124a42273a710a28d4ccecbae549fc60b4acf7ef056f7a2bffb464a883425c1fba88662a0d5ec5adc17844380767c483a869e1e4bef1153daf32745df4fbecc0a0684a03786b38c8830c47807632d1df72f5d7cb2c0b3cbda7d4a995c4fb2036cc6c2b896738b760bb61e5ad2366249dc26e71a3d4a377edc341318aaad6868ce47ad94b649f740dc264c4e885161e35e8a1d5e6952fffdfb6f6547eaf67abe4ea9c0f5ca8997339e3e7aa0b2de86e2d17be7c7ff6c372b985db29973656f686236d64d35b7f42b2edd4c81087ef999672a170176a6c34252a615a0f7d26c0696fbc8bfa177d5eed279a2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "31363432363235323632"_hex;
                s = "3a0527f7b62b6f7a96db77a91b27f90050f51cfd03e5e09c44d02c2dfb03939e90bbc0cbc5c9d4a52ef86d2ba6cc7e043b081cb91242139aaf3ac457954ca4d17b41e5b2498533bca87e803dda644c54e16e92ab95b6100e2948b2088b171b3f25861ffd46876a01572dc1435cc8b54eef72b78df25df184a61b84161d80154c0794307a2e83db584e191b4025bea954f7b750b5850b9e225d5db15a55f1ad6b9c2fff59683c2d2968629f572b028c40a9d3cf9c73390cbc27fb3f76784e82622c2d3815e4bad8b54bb432be6a6b7e6d8d91d3d250fd4e2bc4848a9065805951188b139f77120722aef4494aaeaeaaa9e8ed2c983d2fedad9fe364d7972f01078057551087c11586d5ac0e2162739e4a421f00b31faee89f55476ed48e87158f94c7767fc0e540768846f44a6ed8f4a3a1bb4c236191742c13361a9c0da87e438a4e7d3f7094961893fc85c86fec8c676cbf92d74db90e69c035109c93069e1b83654653479770ec37ade5df570c3f7ec7519c0d83c8798e7c061287e57d6666b8c48ff7ae7328c6b653a1fc9bafda134234f6107f73de14c941a37ebf330316d7264bec901e2693fba76d3241e808c3a8fd476c4a5d2c9001382b03e2ea6fa295bf3491bf8bc3d26c5418baeb58ccbbd341c409a2b6240c61acf180c5469d147f271edb876802cfc3190073e828fcbc0299eca766907e9a0cde32342146ced3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "36383234313839343336"_hex;
                s = "4a841f6dd18b6dad728f491a6c748f984909072c7c2c50373db2c548e5d118ccce772c5088b0077e759f3029cf116105ec4596e1788cff6ea18e8bff5ff9ce245c8ecbc62d143aee9cb7ed66e898d48de8013e9ff1fe137d0ba6a07d0d393034b1a765ae2f8559b0d5416e7bf3ab87757618c4e2694433f0c753c8588cb58ca3385b467bab150169bb1c81825582b6815150aba2cb6dd61050447c11a8e96fb588d1425f482dab9d75feb8379c8e0229a5f12186eacef5abdb90fc0995585be9257d1f0ea831c6ff21f357a9de755d32e85891ead90095063a922e2ff7979757d0b467d194337c96b282eedfd1f8cc52d3e02b01ca0acb6f99c26caf5f0e66eed8a4fa98b5321a32d15308f3bd0c15918f05af6d07e740a016838cb38c995f9ccc53ce4e88ef4293984ac78e51eefae9f9020847bbd0d9e6f340efcd137d0d6d3457d6dc9a018fca1c620e95a87d5577db77d9b56edede6aee4fce211927b3a6bc46b6e048036683f6fe40160e4f0942c02186a19e1eb316d33aa6304418d07f9be3a9050b2838f855eb4b3bb23b1ab0ff19edc287fa1557c393fa634970369994b06e3d943ef827c2897a025c17648182df355a5376678eacab1a1e2311a6e90977fa7d0ce97b01a4839901504d175c9068d728c8143440641c8e4bb8ada58e89bd895257002cbf2cc847547d43bf64442f4a9e1137f23643cfe69829be8d5b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "343834323435343235"_hex;
                s = "1059836bf3084a871b0f11b03eea2ffc3a7fffc371797c9cefb571b407f94c8fdea066832efbc5a3c29ae0e1ef151eca1eb813e8b8e61fc3744ea837cdb786dce9c8ca5dd22daf8397d9654e828c12c7807fe656d572b39dad55d99aaa5569b1ab4958d2cbd260fbda641f403ff70f658bf25fbdd71cfd1e56c154e448449662aea41c7c6fec1813cd2861addc782cfc56e225ebd1106bd1c256af43ae1fd7b28f769c947e14d7a0509c393a2d8e93f2ae5bd1238a0d1d9dc9f4d2bc56ab5f5653b5ed8ee09a4b402d49dac80197371e6adc3cd8b67d1ec9b0779445ddc136a610d9f46b7d84f942028d8ac7726fafc08d6b5947cb5ac9f533310dacd40bdf0a64216db25f6c886ab794ba53d2bcb1f8ff9beefe90e73fcd29341d007d41547737b4d4feecd766d6440c9199b8b6f69b2e266c7609d17061b9565c2059f9d3a9348819c34815762910b6921fc1cd6b7d2ac8041169ad0b0ddb1e4397a2c6b381e3706dcce578a543c56a098a13a36f9578817d77b20536a715239df2c52abf248436344e71299b2df2ebf32a4fe0566d6232325d1b6571061b88f522ae64a36eb618b963283edfc00624ed9d7b466537fbd1533d932f1a3e58f4adb80887276e7a7660bb5bf7bbf2235124924002914419dd3e28faafe8621abfdfbbcfdbc1313ef72a3500a8942b7abeccbe843a576b947f122c9cfcaf75711b7367770aea99"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "5629382f987048f03b158dfc15ba27891417674868a94a11b82b82fc412338086390517bc55e280e0c5b6a152c5e44eb25f9c014bf66514aea4f71f467e612b9242186276694fec3b754f30486eec2b67a81b3dd61c70e87fce5b12a75d5acb30ff35e4d94601deeabf2d5cd26d30dd9ffd4106a7247c9149fd440d2af4422b190dff1e891f842c3f5f688f10d07bc127f94c26ae506c38576a9ef93de3a9d47db28c0dc46d0e4d52093039dfbeaa7079d87623788d00c119749c9500bdfc7d980f7bb233c040990dde0800e19d428a3c239e2ebdaafd6f174212ad17a036d2ff31349e8964d5594802b924a33dab69d3d9ccb97edbbe4063bc1dfee3e9986716e2495743bbd4bcf814a45df69b18c46a40659aa6cc61522ca5e395f292e41836dbc66d15a803347b1cc098a7900ff319068acb326bd5bbdb865ca4f391c6554dc9b51ce52510531db7a70d0624869a2d2323eaa54e3b4c49becae203849108c00d6742a144b9ddd7a45132a2dc2b42ef495775c3cc9fe9312345b3f1fad6c13e0e7ba92fe8fd67924cd433739ad524561b7538863aeb16e139779036d32036487ab22e029649b89ebfb264ffde09c38a35258beb29ce46d8bd873614a1ee8e2b7d133da2a18ba14e2a72a9f83bef8332e6243f32dc25582d19fca6d88c1afa4f23837479832fc9834496bda34fefed066280e3fb73cddef8c72c5757e3417f5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "93cac00d29dcd13c59c08c017fb4d1a1fdbfdc110dd2e87386ce2357cb8623fd167c679707e89185005b185dba5458363d38435c9c49c4a1482a757c67e79c88bd715b601f10b0499423c77803180521f99fe2444d977f27e86f557612e9daced3ebe6e142ecf3ad74c32c395c3fb925493b8440aa6b3183b6283c56fa1625cfffe1b96b1f1f2a906c95e02195dde9cab260db36c31b9f5ac137c575272016d6fa33be2f0434b9462801748695a9256e4069a64104684ba9e098310ba4dc3cc2441fd8f250ca080c7d91ec08eccff15bbf7b4583fbd35d8535befce82a656a6c70a0583d30423712d557f8a1e9560977858a1e4acf0c196c2d92fcd4e9d51e9b811c38477b90928e8af3bb19bf5359003f7acbc1de019ed7b38400acd10eb766cdb3118cc374de28ec2408cf43618b970657cb3307f6081461d90bf9555ffc1df6bdc26a98d54f5bc212ae51db675e2775e997bea806139a7f4d32c75eefca768cd1eb707ac75942b4bc8faaa640555abde6907d34666b4e756bb1d7755f6af157579b82801ca06f56d2153f12000dda261661a2e1b7a1704906d629e116fd3cf1a779a7900144a75b400cd56b43f9676f54b92fd472673af88d249bc34b7b696f55eb08bfc653c428738ec08631480d0caa2eefaa865f85f14f6e61ac0078473e558fd826182bd0a3ce77dd54de5a9d78e3e4d3d46c136b2664bdb2e70d3a21"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1590f61a82e0a6f331352230a995032ada91580ee31af5c1683b3efff9ee2c48ad5c36a0a2c65bbf5c7d579685faace7dcbe706fe82003124b94a05a27558ea8983eab69fb226f8605450bf13dc0c8dae90f8abaabcaac27fa8ccc2e06cd37cb1543c138ab80b45d715b6c504cf1a7b82554110de9bb52c7054af4eff289d00c9d56b4a6c933bd6f3c4290ffe4255aad546e5e4e71e5d5b6d882bcac33831ea6069fc2e350fe3776952a5832116c971356af3f1618aec1c466fe50ef64ee9e936acbcbb61552be9d6e1362022186249f4e6ebd8c3169e11b599f6645b11b30150155b0bb03f3b2a4dc585f504b0fa3149210435d2fb9fdac4638661725211908ae1c0540688b71b70100fd12584b19ed054d25aaa1df407f27b9d338ee5b9fa7274a29d580d0acb81c1ea182b957c22139bda8a1c7fca529a6df2089b0c3d0f03d3d1799bc186b07aa22b7bc06f69a80e423e86a239afc819232851c1a18337882835144c8b3f01e632ebc22db346304d794ee1a76dadb5a6f5193bba3b982c5bbbb7585dd7e181633dd92fe01a0994ec08d1054eefb474f45561449be7dbdae57fb1490e533014c0438f57cdcc582034a94c07cc6490794ab2164013b5f2ad5920326e83d9b3c216d3d3d2aab60b177c65b8af1db955456c992e0009eb9270a4cefc04209ac032314142e1c55b518a7b439cfab324fc9962a2c916c14cee7dc"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "70c6a2593c3ce4bb4cbfbc51b41570fb966d50bb48f8e9e6cd294e99bf3f60271c71965277d8f85e280a012c5cea3f3abf9370d983728bff790d93d00813012d286fe4bd7c36274ddc47b8ad6277712f43469811b7dfd77f65839952b5edecbdaaf590be732e45253e09cd98236b16d2157ec762e7c294dccfc4db19566b1f365e91f1169329a1c04e42a3f60c0b2705fbf01dcc933e991702f3c0ff52280014f6b8aab35468619cbdb554a0c6840f4cbfee9a9381c7157efe29f9ff6c7cf32118326e6754012c1d612a8e3fc65295c48d5366a2d649eaf3544fc6b8f43f637540832c5c56e0e7a56dbcd76e32ae7efb41fdc172b01bfb389e5c5df488813a1034dc5cdab30890599cde5b0da830ec2504ebc708e1a96a8571aaec42045d701b080c193472a80886f3a68b2ab330fcac623ea99c3eefb01af168626857d6c458c0293d5d6c76e87cb7a91c3bf62901a0055634ac21688425d1601635ce0f372963e9065195e523d6657c1a10eda3a90e21817150751c7ea1682199e329e8d60b6129109378f45dca594b97d29364d1e5c9c335c7018b1eef7a65fa2741d5e6bf161376a47b0e670ac4f2edd43ad1b05e0d847c74aeda0affe496a2f554d8061242aa705c713ad2166bf81f71c03703e1d43af05455c53a5adae6714302b249b2a8fffe2f04ca1f5e39bb22afa94cf9429fe99f5359231bd93c5ed008beadcfe4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ed784b228ca4c6d8600fe7f18db69099881d3ac4ce0577d4e46e10adb3004f213796e9af8cd78ef116f373cd1a070569b49a4ab55f82259410269db674ea4993e7ec3ef834ce32318856142921ef33ba4bb6319ff6118dce780cac66d7a8315c12a92437f446c851c657dcc5b978d454250d3fe9513f787a9e5fe9765be6a92d2a970fab69933e56b692e2c579259105dfe3f0c54da11c21ae0f965c7f8bd15b3695171a2b838cea7085309118dba06cbf83856fcb927569760e341bc5c9dc7da5906b03f74c426b782c418f1ee50f614982f5188bf86894e30770a0b8fc7b02fca221abfbe64356e9bbcc0eb47c5700ed86474006d308ac4c1709b88774b101dfbe0d203c91edd140532878a186e6f972bd70fc7d0527b3a4337c9a715ef7f9256a1e5a06df5aa4fa6be6416143cebeb2d2bd039727325d8aab9b4fef2a31465bf8fac21d27df08db6ae22281a0615d252ce3eb8e539687ef125da304b6bbfe2518b57c95c1d81bf5574880874a49d46cd9a7fd535d9e7d04951b4c2e03ae15fc562016fd6f7b08ea5b427a78a2d8770ad98df16b94ac918edd0c4753055ba14f7d1b253bdc37f5df236d70b0e83b4bdaec9bd29c558dd708fed46daa5d4e3312c08523a0066369fefc7a2ac70ceab29a3b56928317127a558aaaded7bd6855660ea87d4defcc175255894bc9d94d5b420a24d06c4817bfc4ae92ae5ba4ce2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "924769b488c2f25bc1d2d2ac9b2934bf4a00122bc9e635e8b2dc3f5550579fd7fd9e072bd8dfeb7e8917045c7b2537b96f8fff9961115a8f8e866b35cc1444633877208bfd1410e1ac91fe62484adf7e8c0eb5885859c0757590e34f095f388320ce455e4df56cfedc7b15fb5c9d95e696207cbddfab63a71eeb9ebd4aba5c214267a6af1524716821a5a2693702e103c3f9b487235a3fd3ed9debcfa51b5c796fe2916746146c07147370ed15424fff4b07ec133a92037783626a0a48d2a3a440a611712ecc7f28d4ab146d898382a2b25df98e27e15e168ffd725c57077e86e2e88cc015217fe2ede8978e4d85acfb66cbd2fbd36936b0292fe63650ea2280f86a9d3ca427a77f4f9db69f117a0e41ff86e98caf36072322201c928c125c2f4a19358c62ef47df4a796d67d2feb9879e3a195895042a5a8028bf9e013f8b142363a1a192a2e3bc96847a515322de750fe346ef150a14e1adc7cbb6d480bc42dd06a8495c4e6ed4ea6441ad719f2edd6696da0530f54868715bb25e17d492b174b77a992e2fd997bee727a63e8cbaec87de36bb700eb4208e174e2ed437930990fc7f5e58e59706402565e52e9f207b4546514dcfd84d74348ee93e90e9bb0f4f288fca98d526ae8876779112236a5446cbaa615d8f6e45dc5c351ff45fcaa7f9e6891f09a620b2b12489d6ee3043c86c35b0992a086a271d78a37fa5ed6322"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f984e7041c4622d4cb6bdf9b9df4a513de73b47d0e3688867794786c363e63fa09dad2d74552cd262b032f1acf8afa7f1cc8c593ae33df963b762d9f44ea94b98bde0afd4ce6a320cf449d8ccf29c9e488ece1d2f0a4142520ce2051898fdc47f69f63dd3abf0154b40ea9da12342685596a311b6c18f11bb9c3317ca8460f11658608a1ab2986bd4742d278166b5282d051e2e5e68be7374cea0ed4acbd94cfc3c3d35db86e6cdeec623e388f29309e6fe04a78750c44ff946ca92fe4492b8bbebf00d4aa52257d0801200a72c6f8c0f330dad008dd934852bcc053e63603dd82ea0507398f2058d5bbbefe2c25b72ca665e5001456bd95a7b13bdf53fcbedfff4a06d326c91a1cf693dd8a8fd6dbb9e17cf4cfb9c7d2cabc4f27f2ae01f81bb88343536586f6b7641b6a1bbd3f2fd97ebe54ed42d019a64a8e994583709eb6a7db5f2ce7606ffe6097370ee1bfc459be4cb21a8a6eb45a962d456f44a3c42e694a11f5461572e3e699d18a8752f663550511767411b66e4b5ec38658c0eba5ad74630619a497de014ca061b1d1f9d0fe19e4b52d0865c6befe3c886e02237268e0b4fb07eadaf6bf83e8f47de8d6d0448b10c029b4d8a6a5e37f13a167f56e50097817068061cb7b6895e3e13fe35e61791531c9d51fe616d767a0d8b1a145a47032cfdb51c37d8a2785fe2ca3174cfc58c52cd964a1864cb95da6c5a45a2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1db0c28280679c7279d9f4ca1b3ad582da63a80e18ab2baaec5194aa6c2435cc5f7c3ad16e9b3e8eae8a9e33a7dceef69588aa5b0b16c184ff54b60c41c687b77d849eb36295a7aa3590e30f21f2768eeab26f13135ad5353c889540906da7021ad10751876587888c25247584dd4c7e35de68d6900676872d7aa84dca74cd41390c01eadc982359766fa6cff61bd424baa7cd46fdc40a17a97df468bc200849ed315f4f53d6f24a0af0a1b51112eeeee438f48ebab9c396f4b6a0dfe6e23beac92cda74d5a762bf7591da988341a796ad7e6cd72ffb6df68b081db763a48eacfbfca7132f27979af705089cafcb774e592f92ee06fef8c9f6635480a0f84c89c2ca4a131937a93307ea76326f2c1627989c0dd0eee1b34371d78ab794543124ccc2269f67152f409532e9c1d1231d79e5d6bcfe9a153223038a1fc2df9e5c50739edfcb6e7157e0d885105b11be6e5a55a950cf48e827961c00b556c3f52554ddc9ee9b1a0e3534b724de96b1009af28a3b2d2e4359e674b76ff7bf79d9d6e52db23471c9a3d430b05e85edb469dfe566441e5bd565621006e1d1605b8fc45b2570cb06779b28283834708485438b41b478216ecb9db8ec64158159bfdf84361bb1a2839a6733db28d46f99e2bcb704b55f25cab22c7436474c68fd259e86800ed657b4a2624a1a5de45dcac39c5c2d04f08792b9a5013bff0b6da1c1c288b5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7aab397990494d9b556095fea34c190bf712b7b2a9307f70252ffa319ad6944fddcd535c7d663a961a6c9ce7c7a733c545c96f70a7356804d1e68378c36c1390bb3e9009a743f338586b1f61f8933efd591092e93f7546390b7aff36dd102e45cd8641c010085b7bbdc1886ccb8217e362a45479b4c54408b7a87cf00bee6be773589266ab0158a337944d973b13464220c99a6f208637de6f89718ae8a5dbeaea8fdae74ef54c77d506187774f1404b1f77a02797eeb4f396910e10d8e6e40759d83b4d1a784ef7554906248478af8be8bed223df96e62106564681f3aaed8e996d4b7ab1878c501cab0e5a2beae6acae399dc6b1045362b7d707ed8365bceb02fe4834f51275da4b3f1cadcfc33202265c600ab3024121f68a326e37e721bee887fc1deeadf43066797c0ddabbbeb440c0d6dee4215fa8ab9482acec22c151dc9985517410429c771954b92defb6d813d0da98f3e9bde7d79f7eb048657fcc666fe05643a6dc8e274e06ca005f3416ed0dadb760025fe9618cdaaaf35321d822afda4096604b36c1cd1b880c955115eaed068519aad85df7dd36c5ba5093eb0079c54260f4e5e21295b4cc028cd946c91f598785e397c65054459951450a5ef0ee7303650969d77ca046c83af4636902b507704976bbda5da63b7f40f1adf8f491370d6f03a2cfbd9d299643d34549e14bbf4a961e72a540fdc317b447a5c8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "38d4ce6a14fdd1db34c7e33f34760bb8b255372f80cce1d708ee8c4319ec1a2ef9bff49755de7e200421637c42538d85ea8ac52815ad7571820b61f377ef75d8bf90e515b10b3105ed914efeaf9d65a395487456c72ac88daa242afc0cf7d158efb28922f4e5c5111a0963c0d0583dd5c1293113c80940a566eaeb3f109bea357bb1f963a4fdb9e7d3381d33b4276c426d31b02bbc4830566b668279ef07e4f311c7c890619de19540888bd48c9842ec59fb9c11b7f57a839e32dc11b2deabdf77788692c31a2930ca014ef4c10ee800b942567a898cd9eb6583819a336c69aa54b188af585364a2c53b2d5bf141a5ecfc046df96f2f56e78509ccd1d01b376ac7fd98212d84a801ffbf42e70f7699fe69ff05d3b43dceb2a267eee9d9975f965a843512a6b33c73a639253bbdd7d0d1f9a98f757bcf4cb5838ef719c3d40e31c5192d65c9769ea68917da6b1881446a852f8b055252b1409f8482062823a88f26eb81ba17f84d5018f6245281acd525a9ac964eb937066967c3ea8695f491ac9a8e44012f63b3410c38d99f68e94022d005a21c886b0c2f2e97b82a739ac1702939c350736ba649f82d2a319be328482756383daf45bf13034cefcafd54f3eb2a94b460a36b3b1a57c89cf60248663bd69e10b02434b20d174d4237d6be72400a3a372ed9b0a0f609b64a9f1f27c2216794d52266f8f27598cf59acfd59489b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2346ee48cf6fbbb6f8f60c179f02d44b636665d50d425ffbc72a3abb0b865f82e4e08005ca0bda3eb7651be77b0660e3a538307a6f27a2e0d9caf745363e0b162ca17944dab8f2662cf0c93747d7d2bf2d0cd99e40073f06772c297e7946fa115805d2b0d533118b7fe34f56bb8949f27769a9d5162ffeac36530e3f8951f7441c9fd306d0556bd68ae8ad574edd3fcf3d36d76dbd2624f672236766346a713f15d5b26fc37140d8b4b88e9cdfbdefa4ea8c09ad2b11d1281c41e117e1b0ef1d9ddb537511629fac3cc9468892b0ef3ca1b0577222b2192aaeab71799cc4ba56bf0917e6f2e57603e89f8e43e11d61bd2791d125b42ae09b54e4abb839d2a4bb168ef9b783d8a6a60034aa257cc552e5fc0743e8bc5588e5c3c015a6dbc1c3665a65a64b53fbb2ea44ac3b29678d69c3b6d3bd7c58426a9b63c3adce7529045e2e3933d63b8f003c2256f474db2d56a70ec453d1c2ad237429096302401bea13ad2395dab8348986e0a62869df95475b4f9438389907610aca56bccd5950748e02582b41a0b3ce3b0adb3e40eb484d771b48339f0d68dbc63de4649045d8c1b774e84e81fca2098d713ac797437e98c9de328b3fe2a27144445ed3c2130b63502b5de8da628b06c8186f63dc73b6b1a4eaf39100502e1cf1fd940bd3aead4dfe2b9249fbd558baf4bf879d277981acd53fe77a05212da7313b0e8369f6ec4db5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64a883f439b07c8b21b4150c73cdf50f72f6ca2ef90da34bbffe5c92d37821f7e6a7a1d36904ab5d9133cb82527a72759bfa44c8923c18551129e6a6e3851fb2d4641c62e43f7c7e4c740d414dfcabeb37d40a5ce73a77810a38bdaeb134e5049b29c1486ec401f5e01aab83568cccdf7fe4825d3f56a05875177ebbfb792e5cb2aae418fde5b1e0f63a3e83d45ccc1f8549ef6de0fdcda92de90236560a514dfc520920de4f57325750e52acbd3b0bcd02ecce288e2bcd5058d40c647d9fc9e55276948f19d7d67608e444b632ea1661df452cdf3ab9fe6270db4dea4013d38c857d26685fe31ebcc3a339aecf247bd2b1d7805ceaa22a021523da3522b58cd4f1933c117bc289f20e0aea55bf92e19e824681b2a9b93c9680da90204bb69887cdd774c213368608bbd9d3fd2f567ecad17b49f15a4d55564008f1c27d4526568e34fa231ec5c5ea0023be8730b0e6eda39b4bb96069dff483c8cf303647ff17420a3d022a304be72ec108924a4c84579b38c810988551a76043cd9aa54f763077e4d2a4473b3da44ba857786c6217fd200ad7c0bd5609ad6d6c85ef5fc04a0af27e2489f367ea7f612ab825a73a1fb7b4cd9a7d45bf4cd0a72c9bc54ac81193645b14e39cd46181a79371bfcfcb9359a6656105f79c11ea7053acd4497db651f98f593d8487a2e8f2d3419945410e580c35d40771022340c4c4d6f227f91a1"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8a5225fe5edbf9240c281f69cc26c89641e258b5f21f56a5f11c681c87f6f451fc07490fe6b1ed4febed4aa7c010bdc312e453a599be2b37fc2f1a079ce1868e2ee59b3e73c527819238393b8acae914ed42c9d2d7641e697ca8946d2b53879d33805fd91f56e608247f1c6744d8b8a12e02bcf7f15e2ba176995f15a6458a926b77e56c2f3557e716cb7a730812a1f6798159118d9d95b593dc45eb59ffc9cd4e636b9b8ac8d9718e0e89269291fd42cc2ba7b379cdbe8e443f283b7517ee5a915ba61cdfaecc9203450d70db365588043cf777fe92e0aaad484cac58ab1ea442a2ae62f5dafb2718112eab650d36743a9735621a18b7aa5dbd9d2d5122afdc3b8ff49d91ee79af3743a0010bb8e88b6fc766b98425e2660af1b38cef8b7ce5b9f3432a7358fbb07f20c9295a5eeed04a586bf04f5f9e8b3425a7d0307b496848da8738cbc267052d7a679c95e799205b4f7c00d9cc668c40cbd6368294402e26bbadb9690a99945d8fab81c5d178d72ce38b0b47b24043b27404690af103b7240595134faef4788a6106234f40e2cdf06089fb602198562b18ecd03ccc58d3e98173a9093eea3b315cd9349a010af282f3c485f92c0fabfb774d6127204a254809585c4890622d98659752276db7a890dd0cd4a6632004651bb194b056ca446c85cee7328e80da15c16c960f514dbe8fb9cc114330a160adee4cd449cc1524"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );

                m = "313233343030"_hex;
                s = "2f50dbd395abc6fd0231b9bb6103018534b39c4d60d139615cf1c9271185c5d3988e99735c9fbbb649e3cfb629d73fa9e1249180606f8e8621f3f5033e5cf7f67f4abea48b53eeb5be67031cb6afce1b26538ca318650b87317f6129f9792f3cec4e98a56f2d7504999ac1fe46729fb390448e5353b999a52044d2baa92f2ff664ab5a4ed82911c5c9942a3741fced99b9437b102db72fa5d1fa87929887a2e61ab06dbb6b8a39659f41f3ae07061792ccf88802a6b17aec1da1c35bd85da150dbf11b3401109e43261a0ff2b22cce779b19b5f2925b55cf143743600ac4c7dcfae7a17970da3d52d74ebab46744e214d22da8d1aa8021c8b47d6e2c585535025c19335668e2d851d6881a594d03852b45aca4fb10f9e85f053a0ca532c40cc0537518baf7fa388c2c0743cfd6355dde1382cf2c9ce1f418be20aa0f3be147d0c9c8756e2c23797fe9f3365aef876e793f3636608b6221460cb76863590b3f5f56f6a5cc0b0ec4d56b40776d629eb32c7e1838aeff1d3c3761edeb91bf62682f7502dc685e29ff1f678e287efbfd364ff98088f42ef58ef2a50415531c1021a13c96c080f62842167239cda8209ee3641da51f3711f0b665cc88a278dbe2619200e50037577c9adf0d78be3879cc1a362f673ccc3e03bf9a39f4bdc10d7f044101a02a83ef7b63784f002565c06eecc819483433bdfeb20b5f91185be6adf22b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0898add7b127d3f46c4eefd56fd293c166e7b601caa0584059c62211f3c063b9a479f7f9361a1ba96a6a640f9c3c12b18820e6da9c9bd01a6062ca722d0abdd5a9031ec328ca8729e84079ea4133b4b4cea8ccca9e1f9b6a53fa8486ca20390a92dd5945790c371eca5c0958247344334891b12b53baa4b7df2e15307cc58420958a4a8cc8bfb06180174ea8228ad46f98725981a2a338d54745ece14b65f38bdc5c6bd87c3b2d81648b47a89afadaafd51bd9250debb9351f654a47708332411234df725ecdd0ba3ab778560689932559f9fe94d937fbe12126025f3d1464f7e5081c9f8b7f7a422cfc3584ca98b5f0277e97ce9229aeb208892f5c564157267fe59d5cecdde948647dfe7dae62ce6f39419dfa80d4d9336f874395a7f4f2099bf54227ed933ce9705efd1704f9a9469c781fbdfe8df12b13a15f802d309abb0c6560635a22e49856ede3c2a5271a656a76a059fead975ea077c4e632b9f13b8b3950f2b00c3834d63750098e792b824e54d53d6dc102a4c7de5b449d083436b7714f99928969c3499104efe30110366abbf71c6f8e4f069be0d246c2ef417e84fbe075d48aa65d82590c3ce862c518de635f8c6ac009288aba112de47c117fc47be80fd79f39e9831239c34cfa9bb54a07ca67ef318fe6efd6bb6f0049fe255846a474cbe28bf73099e948c91b0de01a9f60b80f21ac8f5601ec36f12e06da"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2daac886b4fdbf32ed9f9e66f1abd5af7266025d168620b051dccea674662e1a347ffc519345ec8d40d0dbb4a5d60317632b5d504a2dd56e89aad4438d2b824ead94b87bfa918ece96c3639fb1edb6139bec5c4d3366588992f26ddb39f6d504eb24b90580e475da022c125b6ca3f34251211c40c3e2ce95f9dfe051f728eab654d95a7ea5aa37c84ce0c2c3abe551e469e1ea3fb94b33b5c3cae230aca4a13d09fa6925e7603e2db91a17ea0a8ec77372c4425542bee8b8a5de029715f62a1992c78ee2b06dce17dd57796d48e3789e7f511bf85c15366d504c8266bae2357630e5c70985622dd85bdb6d04131ecb639c34295c49b47c325018247a154afd1674189ae2708ad2ba5c13135cb27d0e5694e058c9d36977fbe36f39aa8ef0f99a7b59a9af3bf3ef737c36d6e8f137faa38bddc62fdb1f1c6ca292cf606a41cb32253804f14a12e66a9851697268b8e619556cd00f6abd55b61d7b4d4a9ec8a7fc3ade79f96e47a2b376c881b96f0279d0cecb634c4031910edaebe92201d144d65f450357313fad99bf10183cca7cc6fdf52382a280d71c0b54a846ad7fcb2e62f569371ca403e60d8611a77ff4392c1da2a0792bfc835b161f407e5c279cc705483fa94db072b9023407f1bb1de67cfd57b08f6c5094eb2754ae1581a8471766c1585c1afef365e492c380b7e64722b6beab3c1e367b9d615a33fa1c13733731"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "707ba25d4bd3b92daeb91154e68d056f31857c57610f808429bc5f0c0e4b52e079ce2628f78c9b0ed061764cfb9c937164b70ab7274093598a7425d5e67a48c945ab8be4e7138d88eb5f0486c35986c805212366c2a9e775533e7ce71b1c35b4bde53e779ccf31d31fcf278744bc7507969532a8fb32c1073ee31e7277d9a6111450fc65c60afa0632f84fd2e8fad4d201c1dbf7b9ad97de8a8977415a70f3946a17dfd2e4895199775d6ff45d4785ec78bb5c54e26df4dff47b81d88fe70c2d2ee5e8bf83f507b6a4b8d747288e9073fdcdccc972534c1b51638b0f653a4f6a2e22b1393744e978a41856e6753f5460dacc485160d480d4d5bc5eec5ec3eee1e2575e2cfd10856701425c4de05966b0a6e86c9545455f6f62e9313022a60b4d34496db4f94fabf9e3a40be0cd77a15248fc2173a5ea65fe0b992528e0cd8a7ab2e911386c5b64d84c0cd0428fc2940d78e8f75c9e3ffee83b4328561760da96f7b015c2700ac6ffabcdd67a0d5e07db92cb8ecbe4842ad8aa0ebc3a1256ed03e0c3e8f67f51dc70cee8447adb7112ad7791dafe3d1319dba8c3e63a9837c15e3af11b0cf5942a8ef2750bd218ef7c266a756627b23b0861df5fc9cb240d49290aa9eedca74ea69cc8640ff746731fa916eaae176b492f5031105e38490aac5eb46df185f9d6e5f8603991158cc4c43744b03dc897fbbeeec00eeab8c7310051"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5acb1b66dbdc180df233c83a3b6291477a9d8b4fb7f0253d928545739b1c517defba99a546e291c23d1e925caf1aa51b462c689d070ae413fe1d88cb7978b01a28ce7ebf2f5f97df648a7d819dd028a53b1d604ac9edc62f62655a56642d087344e52083073ac02fe9b8ef7e61f7476d59c78a66d4ee07932652997bd756b24ce441f539e4c7bb3786f1e4676d7e4bb3ba8a83701cacb2663fee71448ff2124a8cc19e15924404bd0e5f56a7dcc5fdab8146d947010a44711c80409fe6b12297acac7b79943c8de00d15fc1f1ecdf9b0528b3004fbfde8fcb7f082378d97354107e47c48a1e3c0499ad6371480e88fd164deeaa3a014b18760074cc96013b86ec31bd967ddd41900cb9c2f3bf5704754a357124dc536af4305d58c8c88ae214ef3ddb53ef10a2c6211d55a3cbb277efd6be1b36d6a8ab997679399aa7f21444638902fd34d152f8ec2eda7467018c0546cb54233a62fa4b9184813b9d46a034b3d7a7f8f01bccb8a5b364badb94d688302598fa393ee8cf6e2179345b1e5d866e2bb5954bfd9d192ac73374ec4cbc6c1478cd042e4ef270fbfcaad8987b0e4e1c696bec8b1ebaed124a0b58c79fd9fae00e19feaa82d52dce97baecf82b5338a67fb536417ee2d0b8584a998486c770f26b8a58c8856439065b3a4b81627000a01e64daef83b146cdc7357833d447a4ff161d63200457c6721d6dbafc687887a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8172c8d2dc7f58d3905698c0e814054a8d780d154d14b9d05d96fe0416e6ad01ef540a95920cbb3b3460e4b3bdefa26134a62e09432d0047e67c680cb7edfbdd65eae2f2a15a84d97886b0e3c46ab9fbbce611145b83aa313fd03ff001ec07b4a6f814f848cedcbf69669e03641210fd5636b889079343de0989031e37ee25057aa0bb2a793feff540f1d6532420a64ef3f620a0070d2c98e7182cf7265e8fe8909b8e2b4cdb2dd20fc0c1db0535d489d37f48d31b3727eec9e171b6467d63124d1663c99c019af340777e6f4b43bff7b50f3ff456bbe6a9938ce5e59f8497be33cf7e9306daa643b5bdb933318fc950f69d309989a262442584a877f114e31de926de13e1e18653deea56a0b5d4d825456e3bbb30debd83aca1c535aa8ac8553da85571ce4ab6e04d2eb292f8e5fea7649529e29c71420ba191c97c24fd9a8662331c7949a4669d2426e76a259b9ad5033109be2dbac49a5d13177162f06d5b6ffe55a98c27c859a43f918ae9b586b18c439f3c418cefcbac8f38af9f8be8fbec886899f754a50f319ea8d09ea8a3d12a658e05e62a43555e241314e246d9421022fd8c8fbfe76d3e26ef17fe84c79664f567edf8fcf6aa43769282d33a85e89832a4e81300c7f156d0030832c3f0cd5ba91c7b6f2e13d2a91a9732b69d32a58ef2773a9a74beb5fd53ad7b479443a6527022a367710428a1635592d90e11a2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bf03228ed95a2af0101321c3db174eb1f597c999c22224812ded57643cc1fb9d9de3ce9085dc60d9f1d40696f0e4c1c721cb247ab1fd2d1804180e5f51b3f8de75c489971e7e7098765e4f991ca5212426e771037a301af1c7ecd95a5ccd8367e2f6e84b63799119c7d0d5dde55e6567fca990c11bffdb9517cbf6726dc36d19a97641dc3ee44e568ef4297c7f96f3fcf480a87312448105a6671778abf9ef6d8c9ab289368560e2373f54c3e313b2d1db35501389131d1947fd7dc49570bccba2167ae4610a0229629da730d8d8d8218c5a586c5095b61fb600563ef660cf48dbae491e91bc07ea96d1575fb26e9802888fedb07a68268d9d76fea5f3429c96fe17f2f0678703871835788ccb733d40009c8be0b3242ca11f7153a4d906f230d56374201902167872d6322470d53e660d5cb4b65a2ac69b6bf6095722540312980aa2adc3d8d3336a8f4205e2e016587772117de6a357c20dce834cd8aa7d31c4444a235683b782e473ab60404e6ef8400ace3b8d48b6a7801c99ff1f405e888257993848f71e81287292790e1b011cd410e3e3acf31f280ab36ddafb0a3e1772690d053f077ed980c596d81d2628e47abbc3019d5277c70db5f4838581db0e572a2bb0187d08b488f2dac22a0358cf77e0e36b17b17664a925eac940d15cd9424e92f489a4d28405ed76507625504fdf489702f089de36a4300373a833022"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "83a5b64effb15f9f46303e81ca509581874881b71b8e1ca08205b22f383e722e89666c2043a5c77362ce6509816d8cc7df36040eced3b7b1a8df22a2efed801dc4dedcfddae40f20c79bc0f8d64c336099f1773a7b32fc484ef01ab770dca03e071815651998bdb4b8ea11255480e63be22de376359c37b3019d6e264e1f7121de2e7f67d2cf98af80c1c4042b8c05bc79877de903740ee6d1889f2814ba9bfbadd6a5ebbe09de94e16fdcde8ca8af9933080124fa2ffc1e4338d1d878fd4c55dbbdb273e617dcdaaa76aaa19542274ca74fdceb0cfcda21547674b2c0ee936e955e8dc4aa366fc9f3f6c202a0a3982220ea8384ef52f8081823679e60095fdb84d6d75a63a563f726f5ec833633ecf35d27a9e3b7ee4a94133b1c5a15a6dda4a3f1957c399045ca096b4be079523d9f558031529e9173e7cf612262e5c9599bbbc2d94ef12301e23f9b2cd173364cafd6a3e3afb7582f282eeb4b2a1c17698bde6b6a82e88624e3d1737071b8c1fc6b5d77ced9b78f0c9aaffd78fea3bd8822288e0bb761092244df57ca49e32ee8213ee0acda5bf8fb91bcc3409ebef6c310f17d9784689e7c79ff33c9bc317921b416c08030c4bd02629061dffff19844d867f9a06ed0a8c1631bf2a55ec418a6003a6b5fde0d0ff223c8e689e93146771a2cb74ca271116af99c68605d9690ceaf833ef898a234dc0b70c684ee1c638152"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73342b3c90d9fb6a7671295d7c258b80bf907ac32b1cca59db942b80671478c42aa2214a03e4d7d7b645ee333d642dd19acc5b4eba7b50c10688b8044b6c9b765a8124414610b97b84e0fde8876360a53396587eb973ae69e2ab1899ce030aa29d2e83d9206d4a26b384dc32ff02508169b65ebb6fa5f52eb4c24ce41b5e467178b94198fa399b82e2c75055c1417d001ee9d643f9f6cd1da5a566578f1a2af94f7e3901dff3f1f4af10acbe6aec703457b7ed27ff17a77955fbbd527cc7897fa2375cee83d89ec509130c644f8179df5e0537d8ea63b8b29b734227f74062b43334065d4092a30f609acf594d917994ae9e9b256325f47867beea84e036c4f8b117b366b016fbdf66352c5dc6f95750ceb121ea45d4802aacba9b7c7d79bf2604a866d7af58a2f13671eddb7539c2fba46e094e92c129006552ac376d216bd0c91ce45c365b811303dffd2082a1213487090ff3952adc4551a2787ab0d52180d0d016990f243720cbe55f2c0d68465e9be883bfe90ba55d28beae531a2b6924c47fa7ff4222b4f20a2403657f3df30e423875871398ac26fad9776cf8cbbc3cebd735185c1519cf9956c457b2b7a3b8199979f2a0cd0922b391fe3ba9892980bc3ac260d789c36de616fffd525097b358875bb02f27ba2e23c8fedf0aa5635d6179eaaafca58c68ef2438be5ff9a8b5fd91972389d2aac7a72ccb6fffbbe39f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "545e9cec19e99d88ffef7d4c655d2f9b43f3c1516d04c034c4ec8f1169bd29b4faac01073bf2c46a6225ccb2347be24d1d185a8036b1f6cfdd32529c7f1ebbab7e183dbc69b761f8ccbe4ace536807c656dba7fc2ad315e7ede291c870e9029d005f7576c34319c1f1cc5a229abf2a1dec3fee015d60c3a577b1f1408e03db21029cca296c0bfc2955caed97cc18c8faef4ecc03f4acbc8fb6790e7a8d0b919a268b242f58eeab9933e0bdbd6e186faf94a16445fb346a341a19c2242e2aa922480e3ab05b96577fe69cb6070c62605e9be171625f0fba269e72910914aabfe0e953d14415c65cb008528bd73bdffd1b7ed09ef613b905b981cc7e72ae48429ce545c5699440037b66cbf640ee711c67f3fa7b7f3061d7323cbf7ca8fd5391ec929c8f33d51cba12db45cabc2597db12d73f5394ab6a7f3bae6b828a07b4240f887b246926cd315cdbbe3af8e27722f02ec8a4468c5980819b5dc9ef9b3240ba4ad0a2f1421b4efc5b9960b89baa5427ef5855d0e4aad5ae99b864b4b7cf85be717de8a8fd602af962eedd1dbe123a3c6b638468448764c034b64c94da5b494551be3e3b7bbfe521bd28f422ae66c89099578c7e16abe414fe8aacc104b89c713aa55db5a27758c0f3b4a8513f89e0a0c2b777a21410a12249dd344fad4fef8db7acbf2f5ef7accde3cc6800cec47d376debbceda46c80605c0eaa41d70688d3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5be11f7bd46a4472aa7d066d77c1ce4a88940eff4236717046bd55bd47cc48bca44fc48ff5c45faaefdb1e3dce253ea1bc87d3c44c83310d0191a282338bd6386df4020ddcf109f62944c7519cf4e8afcbf34d92540e25d503483a0999c92c76b3bb0748d02b31e40e6cd33e3956b5525cd672b265fdbde079e1a74a3506ce365331fa83047d2045404e2c0ce4b55bb11aefcb3f25a5d9b718e24225576e2485a68482e4bda5a623254cb9601fd8112f8fe78360b20945483e1e4ed707d20d4d994f60d04817bcc0f0bfd43e79cf68495132489d7ff5545ae24b4455d833630b191b658e0623916e68fefd9fc7b75ddd48ab79037ebc1c7a4eef9a701a48cebb5b3e98715ed3d6b17b197baa012de22fea181816db8741430cf030156948ed9c7a37cb98a60d459a0bf7364871bcd1642398f12c5beec00889a209d413d33ea7d3fcd3d9955a8b96cc803415382d1674d6d4266f5a78ca8e4315ed8c53065246426a6112a83298ab53b625271b5e44d3d55f378f6b64be82eba13d06d52a2792732e13f5d27376ecd64f56d45c8839ed7af7ed7b5260861b29746bcc415edc93e19295122171e71b1cbabbc6dea47c70d16c4f7da5ce61c6df8caf4d4c6d1e81f6ba0231f5a5974efb6d670748d1f881cd34ad64e2b7e352e124c7744a3aa9b25836f069ee59dbbc0558f69145b7d4415e03a8e9c651a13f98092b7ef3a23605"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e7e3862a2fb354a36843c872c8175c7feba440f5af01cb2080edca8d8df6d66caae40771fe11d3ea7af1c5c3a0a0044818ac2bc1bb764a547f3c3ddde8503330f324adcf962755b8708275056f1a38828376c72c8cfcb115834203654838754747bb1e3d8fb9b542094267f26a37a4e9eac48d277d7cf03b06d8e5636fc75167573fc858fd095409c9bf8f1039d145e4a7dc03f0bd6560c515f06b2a15f14eaad2a39d6e1bc588b082d2da518735ca6843a0e974becaf8e21234d91ccd18aa9ab068bcf5eedda08c4d371ce23ea02ff86541527522e222d260ba481c3660bd5ee6e19cb9b86747463e0ed2a628393e0a321adb6d5ffae8612a5c53fec44ae4a432b01062370ebde52c0738342025ae7333bb710982702f6b4b5b9b22ddab02691000dd83816f3a5adca44fe6175cb24eaeea38d577450624300da57cbfe90366664391662a97906badf4a0bb67a7bca1bc8f4bdd133f969a89c21a9387a1243227f5d67e2486d4f0d1bba97c440c6d1cbdbfe73a23de51f857986e5fba7db761faecc98b9364687d56403c983689e59e5f1547fb4bc18045ceefdba22965edf816a8b7bd7a96b1290080875ce0f3964002b0f1c3453249e96e1239035bb8778a772c9289d9a645b81232831b507e23d34a0d1e2f35595de73d70e74f4c9f4e4213a1d19e9e73c4f22d211eaade00366e46b35ec004df6747a1e9eb6fe04e13e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "875ae0615590e5f07fe62b22bd19fa2b91a6fca64d786e1df778015e4642726eb6cd16a57e9a3baa814bde45f74ef5966fc8cec5e519ae52522e0d5467b5c3b1fc9840c1d39b1059efb52dc15dd90cbf8d602c663d30c84709b6cf87c5652305573654fe88f41e40f5918ffd097c3158f98a7dfbbda35904f3e0af6612c9a3564f7d6a2be617f737715913218dafd34339ac56bb5f3ec68dea257d3ed3bc19355d9c96e8045cb5399aac6ac0414e88ff0e1dc1114d226e0778d3679e123c52d6fc8a1e67bc212c03e57b3e0a9a5224687785a597d21c504ceffe7a8fb20fdfed9e229a36081e0699e42ec1bfee8d8fa3718f6a557877f789c51e0ecf38cc430c56d2ff28a4e94130289d7bdd49cbe1e01b9382631bcc8fe81434f14fc1b85f1d19e830d4aa733e7a9f3b7f5e95725cd4610d15d1b6838db89a0f3ec5418c687c2ae0c834729ec16c29b9929f48c15f9d7467413191e965eb15693b26f2a099d47749ee86f061d636f341cb64c8b102bb9ff21f0f1fba81ad86657a1c5228f56174714cbd4023bee481dbace94e2fb9fc59c79428395ec877fb7092af1c6d1b877c967758b6945e7b30c0205be731c755f7bd221f2e5eaaf729790c39281d9ed7e63b2d18d5ff62aa4081f5df5e084d901b4c0f0ed1aa1eba177f65689015f63d61d9aa777385dc85136216645c85f2c77b88e399eee1f298fcecbd3111085a5a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94f9d111adc41e6dc4625bcded3f556a1cb7407456e252e6fc1d873afcb7ca79beb18a2d738dd105dd0a7e54fa969c99d450d112dd2569f1417e15d6f393d3e74b849797972e454fa3ad220f5546cf1f60180d6d70b751e28395348da109afc94e698eb51312abde98c409c751524a6be4862e3cd2dbaf126ec26c76381bc8e8e519944f04e645b904a8685b4cced79d158ab48545164c58ba1c8c662e75a0cbb9f5e360b6ea8b7acfa977efe49d634c10505fe355d57aeecae808977a3e80c8c1a295c293d696871083630c6f3280045e6eac582481ba74d0d637882aefd15e30fdaf2743b415cb74ea97eb92250adda2a514d41bcdebbf8302713f5d0d56b4b9b1b34222041bf5f4f5d64556523610a50652b52d89c8db18a2b567431c93fadcd72ef81b40e958c131d16f56d83d27c95f1041bd03b7e8771540e7c62373da66b761e46b2aeec8198dd38dd7074dd51f66c2398993da738a51b71fac106c1c7000791cecd96d168a5bbf8eb097dd0011d22a5b7e489f2350bf2d698466aee3b7570c3e6659d294c5e4fcbc2a4b46288d067f475a54c1132fb432154d89ee845e43bdd90869ec6a802320eb09dcc455a0c08ca72e0a79a82aadfa8ce79e3d21329f0f71a72b184c361390a7978f199e5acf55aa5a7b1bf13962882c7fb62f519eae6139b74ff5043ede0d65c6ac6af7f2680bfac13b0e27ef6fceb81e45928a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "50d81c073d09499d0b73a7511572cd485e2779e0b2309172a43847b9001c52582b75394ca438c4e358946232ef17596d4cff47dcfcf40661afa1d3c3d41a93ce9d2f681622acc2e4e4f273f9e1c5cc23b53c8c89ffe20e1827bea29fdc713ac1dc769df3578a14372d05e0d94ae44ebcd22d4ffa6c9276d22f8def3bd65bfff593ce2477685cc1a2d051656b91233933a9b107940abc716d12a5b3ec939ecbbab7a2785ca4be41e70a99f60a013d04a6b237799d8f1743ada6d5a97193d5b30ada75f57e540a64085d67b0b28d2d3618d52d2da4857d8aec6b05982d07ef918ee82db17182ebdac2d59de4452a2f43c769390c429dac2a34d65670e433c6e00afacd4664aa99b78dba1a1a39ae1a3ea6ddf067debec393046fe544ba9188904178c3b9358dd355fc2a788695b2dd2ab867f1452f9cabf2bd52031703b7e2a6d00daad2cc21bdebe9c3b45f9f164a1e3918998f044e18bbda1b7b01ba732395398db4d50e61085f42944d0b86c09b91e5470ff37e42f299a92d3a38b6b8e98a4dd1b1a8d979aa8a2754aeca22449e08647c09554739c1eb0c359157e87ec35be8fb44aaca5515ec5bda2bc861c08adca65c73a0f944a29db90081560789fa05a2f42a7c0dd8eb199e8efe3c9548cc4a269b0767a830b7fb181346876b3a8f0c9385885bf69b1ec388b93c4ba7aac60fde8bd4e4c9ea44c22fac2de7331df3d5fd"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bd56fe8be48062f611a16d070328829b6e032650e54148551ebfae0c221dbdaa461fc0b837b41db093fd3e7eee34f6ea975b7e7c6a9c65c9da26b8b47a34d4f85cbb76f7f75f0010375c10301e6c656bb990919855bc3941f04817de84b225bc68a53310a2d12c522732c98a435ff2ed2deef13e6c22b92f1518c01d7a46fcdd650030017aa0d55b53256645d15b022bde6494dff48e348bf243b48acb6d5866b01c133c8d0fddbc5d50b1d41fb37d34b3ee76bdbee3be46e9893a64e3571590698444d9eee18308be2a61bf6e28191f052550c82fc600de6e01c8637d7e175399fb8b87aea136d002b589b7372d0476059c153525e63a90d0aedd48f2a59621ced9e6852c9644ecc1a60181b1cacf6adaf549a47b1825973c4d2926a911db41ba10eb244a45d582b9acf30861c284b72bc6ed4ddbfc4df7f96a2b6e4f962e4c8ebf27c35bac4cfd2ae63c1e335ab5049c3bc5e606a65b5155709b9bb30d5e10eeb895232bda1465443e19b356ac9187d5799e62e778710820ca4fd2802ba8c52cdad0bd12d8adda85ec480329e927a6ed41a8c31dd35b1444660f2f643204c4864590014c8fe35db260990fc731f1599bbe223a3d2f6613d393444eb6003cf53431db39691318a1435807b921be34e518bf2ceb99be38d607174a96e8cdef1f49a144c71584b45da1e5277f2ce4e0762c8f5bb8e48e4b01579de204cb80324"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1f20dc348e8b89ed3004b194c0bb635e27c643f70967d65b0f5d2d4ba55ec2e48d62074a49de2a73a34e5e4c0d172ab24bcb1025008c7d473c90b64f9d6991f3612deab90b0b535b11400c4a11261941ec9ff3738ec48cd6f0237757b26176ec2339e8bf2b4560abfe1a183683f9efc70876ac821d1874079d610a1f7c7ef80bf39f1ec1fa212136114438b422e4dfe65e8fb48f5cbe475715a67f8937ae7dc3ac913bde054cdd1636ee70d98233cf5f0645fd57a38da90428bf7511cd855431d2a2a5419d75c2199d338fdb60deb5617716f2ca73daaf02260deb1cda509ee0eaf457dae4c9f439ac00323c873bd6dd65cede625d3ae25568772823f402c5b354befe236edcbf956b700570c87eeb05568e0a50ee60d30cbb5b57c6c2dfd805126d1aaec535e01c81d62776e4b19c76dd412f622e8aadf9fcf3d78b34fb6016a550bcd72d1709b5b7308f74ad3c37fe0bbf4c707229c7f40282f09eee4be13ec48bf2f84b32d4886d0946dafbd0422fa49b1971b694b7dc55f7b4d059403df37155fefb9967b45db2bd801d9012b1cf0e2fd9b7a073868756d64cddd630a43a9447853b4214b06bd6bb4ccaca1d6bc01e79e328ed68ee4a6b54fba5b47521a2dee8d6425306e339356f97f3b19d7bf822016940559c1685ae93f7be27eb3e9fb49d7b08b0d5960a68524e60cc7561c7e61ec6049362aa484fba37902ad026dc"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1e7a63b1ad5c1b708c49031647934fbbfa2edc1185b1096326c8430bf94b4ab4f0e9401a68f94cd6fbe2d23623210723e800ed878c9fb417ec64bd3f38f3f08bae77352a7d409485a83dacc9a79ee25526af32d93b3c702cef4f37bfdc7b295b7d243accb80c256c9ea350120ab7fa5ab047229e9776ef157b26212e748176be885752308720b16664323f65d83ce70de21d4e2e7d5a633784e9d18f58be6469970b52c009639ab9e2b024cedac4553f88e42d8012e8172be9fd4dbd3bea1887f065526e090c3a5e7f28b416785a0fd33c92937383f0570720aa6dab92ad7f006ba8b17c4890864313ed0312c717a2a5906a8f101b7c2775d9609d26e76e274728b03169d94723919e2ae5126caa2b6dd1a443d21d4e36512d06c8b5852dafbea73b042e1a999ff7147c49ef19eb7f41cd31794cfa5f65d9d0fe626d08b6257dd88bf0cc39113d0c0d7412ec7020bdd5dfa7e9f535f4f2799a06d4743c5769c5c85229ba5d0dc39b027df702c6fcbe728887b0fc0b606480d3c0e0f1326a46a7223e3124dd4d27cdcc48c7ecbf7440967c2e57319effe5e416de26e60b995ad9358ce8b863f35d56f69ebf6a6d6c0eec94c917a90316db70e7f105d171700a17c52c4a1f9e15a5274cd96ca4e872c577f43b54cff898af42720f0d3ad00d170f9c0bc35fdf297046f6c750b6d036905fdeca127e6f2da3f5add9ccf7ad819f2e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "62a746655abd3d4963eedbf1ccb42adfd9919f42797c65d833ffc5c5177483534b2b46b6773d7b6b9f6a1a03803a2c85718045caa8995d0eef3d55c66491ed65aca09dab89ae1541245c2edef535f8ceadf4f74f1ae12ba9e922508b7bb157b38247441863aad682200e4da61b4b3c7292cb824158275d042858d15fb7ec4eb5aeb33dcd40f58a670110fa939ddecbcc9c20216b6996a43a3267b501a2d6f05c35a63befad8f6534b71448027183e45abd98dae878379807eb97aad9014a268b2d042bfa20b3559565b22def87bb0beceefcaae1a01f068ced30414501767fef2373fd8d8ae7d44aeee885462dd1cd2136e114a9e63085eba22addc0ade5887776eea10b594da2abcb245a03039fa151aeda0364fc66a12a15dfe89ad7678230194600554679e0c02d3c35bb2af054e2bd68e73fdc66540257cc10a0c0145fd17793f0c88d76670cbc62e0a56b98d82fe1f5ec8a85c0075763e1d3d873deb0fa57f127052971af34122b9bedc760b2e441939c33bf18fd9d49e2def61dfb3aac87eaa480a348bf32bdee4e7303d513203fe23165f39231b64baa0bb1495a868e20a4dc3dcdb4c643646c23bb1ce0a4088907ebedb6fe13938156f9811affe8288e13db8f45705229a31fda7476ff07bf6069ef11c0e19b369f53e99ea901ac8d4a1ba8cf92d74009583e00783add48b6f7cd7d28429bc48c73b47539630b59bf"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f04e32e17a9a6991733913475f54cb18abe5cd6f7856a8cf12525f7a83127c20255149565983719e58b10c23fa70a27b40d723370bfdd14bad670b5a22b3446ed1473e8f012e5bfe70a1fdc1a7d826430e301405db72c815763e4c5486938de8f78b556648108eaeefb6d5a4520da365cf64ac69d2f0d2842b5650da2d06639032c4f90907a3164f67e0abc68a4bb86778d6f0c6f8c1585b76a73573deccb7010d21e959fc9189aee02458b8e353f12a3d98ccb6bac5e3a57ffe5b60af37b043fb58cc478ca9e249e94a30bfee4c509e150a3e28e56dc4222f9968ca8c62ccf57326a473b30055655654d3e700ea04756bc3f687707e0dafb9531706d06c30aa171e33550b66055adee33910aef573af9dd06b2611425d9d4820807c12f7b29a7fcd98c3948d5352e3fa8083205e13f075eed4e6442c0e3dcf68c765ed93748cfe33d758fee0e47a1977d0b79a755e731be22bb0c55cad80d54939b7a8dbd4c9c20b7369f907bbc2a540fae0189ab09fe62bb8defb479a913f3ebd167abbeb35104b2e3a75504b5eb58a1e34c991254e7b9115dc6fc0946e4d38e2c475199ba283be6b222cdd0a90ef0cf9ec98a3cf815e4d9ee23e3708b6ddaaadd146a802a53b57beee909528452d70170b8aaf40ca92fd5c3f5a7e87e93f30ee89881c7368c0cad47732e9b58f13e2d4873b596005e6344c6f030c9ed75bd65f273baa67d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "856a35de0779d33d013b7f7bf55de6612b8cb179058d490a4eed4acd8c213902d25b4eb5026c85b60e77773d3ae3570d037a087987267eb9432aa434ddf8b96379753d5d77b842b468af926b87a37b93ba313a6b0b0a5fc0028d68e569fb70c7bc5d29d4353c661fb1cb5e60340998d69ae7ff80ef5bc617207eb5648080265610b56d7b1037ae271e6e76f36b2ddf6d7ba35cb6430b21740ca0efd45d232600842acb225179af8765cddc356308ef617e130edee940e07c964517972ca94458e38f04375de2ca2c1de672f7885244ac95f883fa297d7e31f20b890a7d91758f57e9430c29a021ff5d94281ba0e7932ddcf031f0825881d3607cd3acc5ed14e517b61d2014c9d2ca6cb51e7da4ebe14341eea4c84d9b0b3fa11f9c9f6423bd414c8710cc82ec788f09c40634c3551ca6751af5e9fc966c687e170c5bd4358a4a34a8eac48f7357b2061d0610830bb7c8fdb59e5b9b55005a0cac3ecd3d6992971e64017a0d436406019d1d5fc3726c9c4cc811ed19d10114f61dceea8196b5b3c4015de1d761f4500b5182338a7ec0ba9369b44173ed699fd2ccdbd69f60b80b4c4e730f9793a2cb2c2b2d95a5156940162aff6fd8fe6dc0eeff643cec3fc5f75a9f516b0c422ec3938f4caf76fa09ec797b6088920e910d3d5d8df0abbc6bf78fff486c266540d74f9f55ba6aed8d21b71af65618fa15b94051b096b33a8066"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6df0234e29b09c68529dc6e379485376e89da42727fc88a547560ede5c518af124882f393e10fea33f680e1e5aabc51158c9b026a454c152fe4af301f40033693006ec509892850bb0b569b2907f7afa8864a9895752c47838615cf0f15e0b139bf83127bbce69f6abd6356b7bc52b30e9a58422ab4ad68fc2c812b6554f64e5c158027fecbaed30f48e90bf005cc6f0953ea845922d847f30dcae5a9b1e00f3ecdb139a0f38baa31a9404e816a9fb8f13686adbebfee71985ab41de8e0bc714bea3270205bcf16d5b7e8b42cd6332ebce2aa3d9501d30af6dc66c5ad19ed759567d16f0a391839e721e7d04c5c7d23df660fb18cd1e8982b2ed6860bb1700c3abdcfa8853ae187cf32695db4252f22503ea039996ed3877b93bbf413e27990deeefea7253a0ac23da6408923617f1263bce559ba3efa1bce8164ddd282ec5c115ccfef85493abb23c1490f134a63eb683ab16fb952854b40bce433d97d98f0348aa658ae3bdec9f0dfdcd25cecf11a1796726069132726e25b9a9c6278bc010f673b49cf89689cd2de943b94125e5a7b463bdcfb4b4ed7b52ae32f71cb0ae2f0ddcfa6637871fc64d254f1ab763b76cd7f93017759c9c73656a908cf0c687eaf6eedb0e510f3592be48a814ed7a9b387da754b8161f1cfcc2bd9f7bed8391484c98d542f5bab86af285a646965aaef05387153b51c7a915fd1213a6eb789859"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "31e7df11d14b2fa289e45ca2cb36d568aa4470b5c6aa0d4bc0c10a1876146b876ff953e582b224adad6358998efc738631e44a34e2c1718f9d28f695d0e1b1f8318d2301bb3913dfd318707964e5a7e111e5a8765dbecdd90bf4e265a367216c6126869515c65d8788c9fd4842a6318d1323e50233cb92de965fc23f61cd8c91baee4013a1a928428ca6ed4db99eb2290c0d0683d7cc928d0cf252b389b64e67995249627cdd90cb4e5fefc8da61eb3e8104c6138e52f6710c136f7061e961c485eaaa586eed740eaa2c0ef879d2af5eca41a5aa1a2476e909c8325952a9d8ddb3b9f6bfa6495c4e2571e4c0ce727fe087ce484a038ecc27c7f0743fd93dbe0bc0386e4d025092d21f9c7d569ca0201d3347e71932e6efe64fa847655e4f1b01af20e0137160b5bc03a9450457162db68997a2df476175ffa040cb4818aa6be70cdee08e05724c8ce0174c6b25629c33e9aff85fdd6c438aeab60c3e939bd6deae3be1fc8beaef81b9334a1c4d59117863d7e73249f12a6a295bac6879a66a0935497040357bdb9ce0f2ebd7de693baabbf70ef76406bfe0e8a8a1edc183185a92b97547d50b10f24ed71a8a3d558ddc20f2b40801db842cc9a38021944d8b97e06e520f0ec22189ac11503a2d84b8291957299b8f1f45feb408e6c828ab97cce7c644b9fb84b8b5c3daafaa90e1c177799c1dd06fc6e48fd309d40b2888f4d3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1088ad6c2cb501f99bf0c545d84b526de3665f419af5e941d5940196470da54dd01f58f48ec6cc56e16b1e21573700e57341188921fbd96362ba5e377e051a1cb2025c0da7842409e8ffc5728b2df3fac115d79a11d7a13ff1906cb8734373e62af62dacd1e7412a89327759542577d720581d4b8a928ab01e023ee7caf33b9037fd96fc17ac43ed9d604b096c8b0a11854bacdc88a58ad8dc3105c748813b4d4109fec80a4385f74b8b102f02d59b36e6cf4a347d87daaaff974e0a1f09255fd49e584b3c88d4704258fa8c402ca67ef95d1f2757312a63f307302a31b021fe1bd2be6feb6c1d7895642e5556bbc96026a591431adbb2953efaf4b54f33c8c8b9cd06e23ca369e5bd81ddac3167a9eb280f060afad68295effd5687e131967437d4f9f97d7b46afe1271a4193407a1251c1075705d4c4cab5e523eb66b2e1f57789001075b500a3841b7ea7c130f37761c27097c9ff533832d201ccc243691f19ad4a822b7ab203cc477398bd32506b4952adbaca1bc5eeba7c565843e17e18257a7cfac8746218a2118b9813c655f6ff55577fe17ff6fbd6443ff307f20dbd36bec5835c6a41bfdc7b0afa12dee58b119ebfa8a3ba8d3e77e3841a4812bdbe163aaf5bfa05a305c158115227f569fa92850205abbd275f1f24f0dc5b14cdd405d27fad86f812d51254f1667724fbab80e6fc30a5f1ab60afd412fef8ac19c5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "956353ecb7561945dc5544e4602466078c93f28507701ffd39e2a9813c8ac8740e6ad61c955d484e513b3dcea527e001a018ee2c207c1806a96763280236cd3c820dff79837c9b709cb4b522d3ddbc9192242259c43be75ea244d37ccfa8a4c75024a2cf7cc76e842ea69cc7ca1227405b070047387a5068e4976e4b8ed5f9aadd7b4db024fbb8d7bd8a040d8f6610c1c6eb1d4b606dfd182235d0360880304d5a750603af0c424b8c8e6dbc12c3697d2d609c97547e774e2e362ea96d1690dc9432112c535258b3db2c4c32ad510d6c07ad0788357883869efb8b629298724847925cf42b34386be700f02903db5852276bee2370941f397bdc3905e30964a0b5e73602703340960c3ed6078263b611f197955fecce4b9a32e43cd1d2e5e87c4ceb65edc8853a7ee31d28e16e5adffb8ac7b760fbfc63d5f174f4d0936461dbb12c964a6b6d6cee752e5fca1ab4a9fd238dd3e8860a1d763d2019f9e7b99ed7666d4e038710f90e0093bc566987d6c0092f571376e705b342d066c54e6e2578927b92c1f0928de44e9a6e1f49b907c6aa4f605ec9c398d55df81c67373b03cc8110162fb417f96fd321048647dfcbb392455115cd912ea83351853e6a185284648842adcbd25e67174a3b93b8a64ce2ce9de0e8577b8b662ce32e2565782665dd38e5bb5fcc4fe12e4320dab7773b545a09c6d39d9dbad459f21f3e624ee6ec"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "956353ecb7561945dc5544e4602466078c93f28507701ffd39e2a9813c8ac8740e6ad61c955d484e513b3dcea527e001a018ee2c207c1806a96763280236cd3c820dff79837c9b709cb4b522d3ddbc9192242259c43be75ea244d37ccfa8a4c75024a2cf7cc76e842ea69cc7ca1227405b070047387a5068e4976e4b8ed5f9aadd7b4db024fbb8d7bd8a040d8f6610c1c6eb1d4b606dfd182235d0360880304d5a750603af0c424b8c8e6dbc12c3697d2d609c97547e774e2e362ea96d1690dc9432112c535258b3db2c4c32ad510d6c07ad0788357883869efb8b629298724847925cf42b34386be700f02903db5852276bee2370941f397bdc3905e30964a0b5e73602703340960c3ed6078263b611f197955fecce4b9a32e43cd1d2e5e87c4ceb65edc8853a7ee31d28e16e5adffb8ac7b760fbfc63d5f174f4d0936461dbb12c964a6b6d6cee752e5fca1ab4a9fd238dd3e8860a1d763d2019f9e7b99ed7666d4e038710f90e0093bc566987d6c0092f571376e705b342d066c54e6e2578927b92c1f0928de44e9a6e1f49b907c6aa4f605ec9c398d55df81c67373b03cc8110162fb417f96fd321048647dfcbb392455115cd912ea83351853e6a185284648842adcbd25e67174a3b93b8a64ce2ce9de0e8577b8b662ce32e2565782665dd38e5bb5fcc4fe12e4320dab7773b545a09c6d39d9dbad459f21f3e624ee6ed"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a230e2cf480e61f31244331604abac8c4bd6d7b7301fde01ef3a8e60a2640b796a3e48e51940723b4b8d41f1a7ef61c7d35642399e35a7ea25bb5bf74f848c75e27869bcb5a3b6e81e28d921810469908bfac3f1d0ff98f4f525b52c549e99593cdb2390adf986aaf26d0a497c467090ac8600339a3f34d5fc3adabc53b8340c272487c525097c8e592c04076457bfb0b5ebbf05c49f03940df70b307aa8fb432df9b19ca1e96b196f27d5d9497eb2ae97030952359dfb4792b04e89411885945e68da3d7aff771101a64f600c4921309180b8aff1effe0b95eb60134e9dd069096139e0c0b2a7f35c04c92f45a227cdd55811e7b1f97e0c1ae163b4b458864e226ee541854d4d4f9a234117067f3e3eb4d9563190f1ba077d61a1a3f1dbf7f5ef8ebde698ce5b0b1c78603dc77c4781aaba05da7d6b5183bc1b831aeb6fcd4d3267159289e13825e3b2dec42dcbc39d44dbbd5fc9309369ec70c3f7ae1ea364daec5a314b443d8fe5f3d871fd96d99da3122f363f07aaf51027fdef7026d7c799b9350c5cc93a62d8fe1a00f2425e7d52941508bd0d629a1f944d22af0a41714bdcd37081ee025f2cc541a89754e89a6faf6bcef5aa524adc8bafbd17f6833ed6abcaee23ae7b98343e8defced4a495e963a682453bde20c09a8bb892395b9ef6f4115c9817152bc891711c36ec05291b8c11409e884dab5540d6ee976233000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000075fbc044fe19c72f459b5a1fc4793f7893ffcc95bab8609900b3c3d3be6643a42987c167e7feb63ec2a57f961c1b9c35b11b34044e065d7d3df0b49496dd80f7cd1eb2e8c0d0b726f37e701ba62a3003a17657af55adcb0b6e86f95198ed435207663d616d516bf7222db241094849fb232bf6fbeeed7b5879a6b6c8aebc57646117220bf55403d0ff078e219ff119bd2e52e767b708b91afe30e9be348766e7537e1128087b4c9aca0281415e550965a395ab20d423330939b4e37551a7735c6df2b0395dd032266ec7dd4afaa3c477c64e3f95ee4945960b7a0c43b7a9622448eba4149e30ccaa0c234be7b06f4ebe8ef43063c62282e0643c6e483feb1942e3310bad0c05bb2f87674825fed098d5c787b69c5ba6a1f716dfa62ede3b8a01c076598b15ffa2e2be82fd1d8025f8ded14cd8fc8753ef76419e1dd561bc0310b2c7845e2744c9621735758645af0252315b6a05894c264c4587c8870e02e94813fc3a797d590a9645d92845b614b0d89cfffc0b80c5b48186ae350d877f0bc06e561770736342f00d56b2ae785891afe39cc0412337e4f5d29ff06d727f6fee8f0966d52ac146ba82a753751ad786c9d70ccd3005b11fc4f6b81517433a052c2351390332bf7fcb4326a19930b512631317c0354a81ec7c529ccd1bb2ef206d697999950a539808958d6c2be64220123f12e7aad168be35de70103090937f44"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "75fbc044fe19c72f459b5a1fc4793f7893ffcc95bab8609900b3c3d3be6643a42987c167e7feb63ec2a57f961c1b9c35b11b34044e065d7d3df0b49496dd80f7cd1eb2e8c0d0b726f37e701ba62a3003a17657af55adcb0b6e86f95198ed435207663d616d516bf7222db241094849fb232bf6fbeeed7b5879a6b6c8aebc57646117220bf55403d0ff078e219ff119bd2e52e767b708b91afe30e9be348766e7537e1128087b4c9aca0281415e550965a395ab20d423330939b4e37551a7735c6df2b0395dd032266ec7dd4afaa3c477c64e3f95ee4945960b7a0c43b7a9622448eba4149e30ccaa0c234be7b06f4ebe8ef43063c62282e0643c6e483feb1942e3310bad0c05bb2f87674825fed098d5c787b69c5ba6a1f716dfa62ede3b8a01c076598b15ffa2e2be82fd1d8025f8ded14cd8fc8753ef76419e1dd561bc0310b2c7845e2744c9621735758645af0252315b6a05894c264c4587c8870e02e94813fc3a797d590a9645d92845b614b0d89cfffc0b80c5b48186ae350d877f0bc06e561770736342f00d56b2ae785891afe39cc0412337e4f5d29ff06d727f6fee8f0966d52ac146ba82a753751ad786c9d70ccd3005b11fc4f6b81517433a052c2351390332bf7fcb4326a19930b512631317c0354a81ec7c529ccd1bb2ef206d697999950a539808958d6c2be64220123f12e7aad168be35de70103090937f440000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000075fbc044fe19c72f459b5a1fc4793f7893ffcc95bab8609900b3c3d3be6643a42987c167e7feb63ec2a57f961c1b9c35b11b34044e065d7d3df0b49496dd80f7cd1eb2e8c0d0b726f37e701ba62a3003a17657af55adcb0b6e86f95198ed435207663d616d516bf7222db241094849fb232bf6fbeeed7b5879a6b6c8aebc57646117220bf55403d0ff078e219ff119bd2e52e767b708b91afe30e9be348766e7537e1128087b4c9aca0281415e550965a395ab20d423330939b4e37551a7735c6df2b0395dd032266ec7dd4afaa3c477c64e3f95ee4945960b7a0c43b7a9622448eba4149e30ccaa0c234be7b06f4ebe8ef43063c62282e0643c6e483feb1942e3310bad0c05bb2f87674825fed098d5c787b69c5ba6a1f716dfa62ede3b8a01c076598b15ffa2e2be82fd1d8025f8ded14cd8fc8753ef76419e1dd561bc0310b2c7845e2744c9621735758645af0252315b6a05894c264c4587c8870e02e94813fc3a797d590a9645d92845b614b0d89cfffc0b80c5b48186ae350d877f0bc06e561770736342f00d56b2ae785891afe39cc0412337e4f5d29ff06d727f6fee8f0966d52ac146ba82a753751ad786c9d70ccd3005b11fc4f6b81517433a052c2351390332bf7fcb4326a19930b512631317c0354a81ec7c529ccd1bb2ef206d697999950a539808958d6c2be64220123f12e7aad168be35de7010309093"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e207de1295caadb15098f51f5db90f9f000776055b107be58bd24d52a01d4171cb9e47a40790254f86a8a56c8ae38252f909aa3b9bbe7b7e1fed008105690d9afa647067ac122a272d30ac28213d2cd37b45cf81dc48d59e87d9ffaef6e1c9cf6ddf4ea5ff6123523c9cc885344b7e1ef4c8096bb542bc0fa5c47abaabca9a58ca85bcf092924741503a0f3c54c725c48855dc434b09d761f729051fb15af5612bdd387b4cd5019577327bb2e64edb065f713d50ff4285f1d184fe709207f809b9c38d064722897a868f8a09bfe1d33c80be0693e98d7e85600befb643e9f713584c716306731d7f8087dff66be1c4f6dddbc51b6ffe6034845cf0f88749e039ec314887c94648154f7c97235323bf78041ec2c8ee98ea7c553ecfec1f9fe89279c9c91ac6acd12ebe969da4c67fa6534ef9ace4b629c7b1de8c4ce1dc2b0f5bd7d416db6eb512a4dc8eda0322138cb7c65b9a58d712284e4aaf059db80af5785af4d83d391b7d8bdc4071636712410d1dde662478eada1a2f1f35786b78eec77b2788536108e7463d676814a91f81fd5e2084a8c1b1cc33988e73184110c6e6b0ef1de874104602eb33b5276ebbac95d91b943e25de6dfc66b31d8091961c78dcddd358de7f25584d9f74dc6271ff31294bee2cc9b2f97a2583c9b33243600500bc723b05d65839de7442895bd57a1dd508651a20e20f264d8dcb59d485247"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA256 signature verification failed", [&]() {
                    assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA256 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_4096_sha256_mgf1_32_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_misc_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_pss_misc_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   WeakHash - The key for this test vector uses a weak hash function.
        {
            auto n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(0U);
            {
                auto m = "313233343030"_hex;
                auto s = "03f634b2c133e157c7955445082102a69228131ec6fdb9840af28ab45c62e20cf832c055418b665a4958c02ead8ce77d62852dc77b8e427bf0326653df718ef84117af503868cc7aff3c4bcbbbe6e69c3e5b14de31095e3b3b43701329a574c7e2c64ecbe08f3cffb0429ba429e83c206625b9be1185bc5df34ba5a58fb20e655972faf6c0f55a94db6cfe975e4506c6ce4572ae5bd196e2b108ca9622b9bbc315193697858094bb8007d8c007674034375cb1d4092e28262216aa44d12edadd1262291cd085eb8d892ae461ae6c227ee91b7be1521f53b332e1c6bf7a3797c92cc86b738d306553bef975ee7fc6f0a968186de390046ce1f51fab68bdaf4ea0"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(20U);
            {
                auto m = "313233343030"_hex;
                auto s = "46dd15af9e3e221e85d682f4942a8c7e4d31a3bbaa909f48e041b3f582a9e799e9125e6b5c6fc35716e73da6a707f8a2c59c49ac0f4f140715b9c51a6e07172c5c9675f3abcc60a46dc671e866de78c238dba6f34e24c15578ce9d9869a915056c550bd632e49ee78067a7d20c597797c5628048d8286218d1291e759b49e6fdbd617e78d00d8953741c261bc5ee0f27cc61719057c5494234e453aea6c086fc6b63cd21d1da0d160db4a1b80e94f19f14f5d3e8c5291926bc815a378e8cf8b2b3036b02549854bcc0ab0634d0b9e70570a8fc732ce0f12ad927e67356f9454ef5f1e5f89766bc8867693beb4e852e6f2c19ad88e33a435548bd8e840dcf84e9"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(28U);
            {
                auto m = "313233343030"_hex;
                auto s = "a1f187aaa6f2c383b5b88fcd59d80a58475bffeb05049e71096b0e396ad6168b4f98d2be393753469dd48107e119eda73bc7ddd7830a7772d19cb7d799201b534361ed52ae91909c2efb355ede49f16ca7648b21a0c4a1746ec5bb48cce5b11adca074d79f1252e906331eee3abafa6f985205f9c64dce2a954ade4e600f30d154494be677141e4efa12e5fa86e79cf939149bc30e73627407455622515064b5b3a7e3f2816d67ef59eb499c9cf92b0f9f78a4b21ef7c32dde4cb89461f6c7280dd9d90c403c0dad486c22f039a16524a31644b635f05bdb615ffab67df491783c5c85ca19d935294c6d458a65ffb065229f408596b0be0327d5af052845bd6b"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(32U);
            {
                auto m = "313233343030"_hex;
                auto s = "3eb30e9c91fe7f0c0da8041f7441bb3ffd542e63a8519705a9941883aa13cc5ff4d5c14263605687778edbb8c9dddd4828524342879a6c8bfa6203d85e338de351608ddc987bcb510590276ea691728d5c94028e10fd47f209c4e4be369ffdad3a0483cf6c8704af3288e1b4b7f4ff9deae00f54bcd068347ddfef7c3bd1e2d05be8e87b52c8f348806898f0cef7f494e2c2ad3fffc73a39d5531c629efc0a63604c4173af03ad73cd71cf8ffa79a5cb8cc10efa66004237a342899bfa81f5a47e76776c9a626d49c6bcb051b168357d5ab4b7e51c1142c86ab4e52a6b3bdf85cae768841396da036a733fc15857078ea563635ccf5b366499c550c63dbc449d"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(48U);
            {
                auto m = "313233343030"_hex;
                auto s = "b261dbd4e96d7508686709dec566282ca192a0bdd1f37aea4d0530e07734cdd664d933906ea5bbb8616d1ca5b8e893ea85c613e6ec6fc94f4fb500bae6b356af8419f55ccc006781f6916190e50f411bd0c0bcfb729d2b271a4b1b30a80f53dcd9393950e595a2116e27be9b2ca1465e0eb5dff2d8f9d524c70d06127d9bd160eade8328452967739cd5e372e56ea098a662e8f5868614e0834cd380e7481952428cffb9e15daa66406c025acac8a73d63863fe3192c1eb9806d42f4add9a2c9c608c763efb64561c2178f90f46b34dd967fe6b0907bb13d2a13450128c43c8b4569778a1016495ec317dc21475705d6f95843bfb5f8f1029d2f257905ad82b8"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(64U);
            {
                auto m = "313233343030"_hex;
                auto s = "af289127c72413c318120f8a55752cee713e81786ad2002fe51db89e18fa0ae98afbab320853da32aff8efd5d07c9e9edc8211c53d6cab61e4e02827cc80b0ccdb8ce3a5984bc7810b284384eb6afbbfbdae51ef15537893737a46a750b71a248a257d4e15080201837a69cffb5a1eaa2ba31549ab2737fcfbf8833db9692db50cac6d22d01379aebb00ee43505bcc4c151a84cd5b1da9d58122385d1aca9cbc3cbd6e4568b8efb51f862d170315ab3172c40dc36e871a10f6cd88bfce13b384653738875acc2ad47e5110fcd7702a1737ef459cb49d70d3df4e6f29d2bd6c8020c4c77c3124fd5d53be435b0dbe8eab6a70fe120c5de89717290cb8052aa405"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha256( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA256 signature" );
            }
        } // End of Google's Wycheproof tests
    EOSIO_TEST_END // rsa_pss_mgf1_sha256_test

    EOSIO_TEST_BEGIN(rsa_pss_mgf1_sha384_test)
        // NIST FIPS 186-4 test vectors
        // Generated from: 'SigVerPSS_186-3.rsp'
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.1
        // "FIPS186-3 - SigVer RSA PKCS#1 RSASSA-PSS" information for "rsa2_check"
        // Combinations selected: Mod Size 1024 with SHA-384(Salt len: 20); Mod Size 2048 with SHA-384(Salt len: 48) ; Mod Size 3072 with SHA-384(Salt len: 24)
        // Generated on Wed May 18 13:42:19 2011
        {
            // [mod = 1024]
            auto n = "8b71c2bcb324a3fc23d292fb4f18cab5140d521013361a07071bc788859cbba33fc226b2cef9c1b3663d307acd3e4d8eb7acff63d048495a2d61fbeb617a42c4f424a347673173902cd1cb11780003e715662d195996fbff55f6b9feb54a18197e6848aa8baa15fa020cc54e72ec976d766ed63ee4e00071a11e29d7baf30e3f"_hex;
            auto e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661"_hex;
            auto m = "78b8e34e3d1026e88148aff5a05d5b6ff747113148cf47665fa1c842f6a2b4f0d783c8cb4097dfd08be1b9530e72fcf241f278c81e7cafe3ceaf95f7810194539e57d3151cd3b89a2fedac3928c61e3196b8cadfb2323b35fac38e671b747ae7145b8d94996db82fb5940e0eb402c91440c48ee0ca9af2452c063cfa8ca36c93"_hex;
            auto s = "697f7422aa7bb453c6b7e5c3c1f5a44d4631ceb0b9a9e77a0ffffdadcbd50d8f69a2fe23ef495191dbc4df75605198af429807393efce5d0742c6cd65ea4f6e60fb9de39faf141f6b9f2339bfdd95677de6ac7856b183ca7c2e19fcfefa916858e7e41de93257e8771e361d056d5c96557c655e1da2d4906798cc4b93509b0af"_hex;
            auto r = false;// Result = F (3 - Signature changed )
            auto d = sha384( m );
            auto l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661"_hex;
            m = "8ae68ad40631981d0cb68428c642fabc658ddffc1761e4a436fe5c90bfbe4b7e07f5bf14a91b6325c32d5130625028293ab85e7c9bc8d850a07ab808aa0277100cae33d608114a16fb60275bd41c5cc3caf1f1024fdffca93f9772a95e283d1201da8f210b5a757a1b18afb204eebf107e0240951bed79397c1d3278c477c60d"_hex;
            s = "7c17bf8aaeafb9c97966d905205b1f007a1379e5fea9418bd6decab846bc4d430de0315c5b2195ea62900b34b7d37cd6dde7e37d9361073942976215e7183e4dc876d69e1eca9cc3786d2e9922b71333ae3f0cacbe173a6346c152273556b6bdd1afb7fe01fcda772362fe20be34bd4c8ed9b16cbcd3db910a0d89a1859a2539"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661"_hex;
            m = "aab88ff728c8f829841a14e56194bbf278d69f88317a81b4749aa5fdbc9383486e09bff96a2c5b5bdf392c4263438aef43334c33170ef4d89a76263cb9745f3fea74e35fbf91f722bb1351b56436cdd2992e61e6266753749611a9b449dce281c600e37251813446c1b16c858cf6ea6424cdc6e9860f07510f7417af925574d5"_hex;
            s = "657296e902331b8030a72920c6c16b22ea65fe18e7e10b7cdbb8a44ef0f4c66f3e9c22f8f35e4184b420ad3f1bdbc1d6a65e6230abca8a9bee10887833dae15a84bf09a4542389c685fd33e7385c6001b49aa108f2272a46a832bbadc067ff06b09b2f5f40c81cc2acac03311a3945f7a9f2ea81213ba9ba626d6a7ed49f17dd"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661"_hex;
            m = "5ec0479f0010f6f12a707ab52bc4ba883f29ea19617d02d660216fc535fd08af94c54384c17ba9fba53687792121e734a2c6be98f68d67ea5e7f502be450f43fee9d094e1472fa6b2f0f9773b2ec0c383efa0fdf702c5e87fe36692c02954bca95cfffc5a0fcd188ef85126c872c10dc3a4c46b87862cff668cd218f37d2f799"_hex;
            s = "7202f1ed02d85d82b574b06fa3de38a0d19b80a612f470f22b4eb8a032c15be565bcfc7e9780d35f1aa11a312339554ec51e690287ad57acff359fdbe7cdfabf9770e9b33343cd8aeb8b2ddaaffd1d2308ec9fa28e5dc26abfee5c5e8470adf13380e7aefef727a78dffaf32bee251ca8bab4dd375d2a9e6c470943bdb58028e"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661"_hex;
            m = "3de862f4efd8bda0f2f8254f730e5a8d5baeab4382a6c5371f99c9d684e9a13208da934744f5168282abe584723b53231fd6deb122000681153960a84bdde601be499174493f2a77188c5dd45ce70fad431df1be276b55e3062b41da32b4c249497b8303687e9e879ce2b2ca99da3636afcc0df2f9af5a64d8b895f49f35df13"_hex;
            s = "26068d35b77ed46848c6006fa718c92ea035464018403019929daa2fb8af505ea81e7b0c1ffeebd614d006fc6c445febc27a562ac6bae807a52d2268690d26b1510c9c1bcafb16626212832b1c5f8a24630c16849e6c5dae23d2af780f34095ebc298a0cdfc3dab0a853148b74b676baa2b23bbac4c64b7354c3f0e5c901fc09"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c78d0b"_hex;
            m = "bf087ce3582a9462c3706a2eb7cafae1b9b79c0185138977af309b428a29546c4973223d64b5e1b03edaa2230464ab52d803bf862f669f0a7751d0dffef09fb00f6b63085eba02c3a5bbb6c3908111e4d7ef3f31a9868c58517c255b140e23895817c5ad0ce0fd85433a2f7522ca357dfda5a669bd1d584785da231e952ce8dd"_hex;
            s = "17cbcaab779fdd6aeac8f0b90fbfe96b6d7231fdb550f2caea85eb9911121d7a0e956cf11414bb111d1d0b05b1404d480d6eccc65c0d301207ebc1b150247809f4cba9ee3b5f759c59602b1e63594ccd374d509a7c135a68c6013ed73ddf68cba5ea31087af451832411dca910fbc2aaab286b3a9c95b1655ab872e8c2766d0a"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "cfc4fc3458c4e37c95a3d489a332e08e4019e477c85645c0fe24e25b6fbb2b24dc123ddf9f3220ba965dda6c97856b4821b3f7052453cd6ec8410f9fcb47cd2f4359d896092f8c944b9517c046adedc002219936da1276ca2e7cf43b344d96cf31313fd766f5e84af1d36afd6a46c45c140841579d1dee3907414118e382855f"_hex;
            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053722d"_hex;
            m = "40d5b6a7c87573de1cd1960a16abed930b5591fffe17bc7114d1da7048e1e3ea6047e7792007ebe4bdcff3e995da603a1c147cc51a7f543814d5c6c5076fda235d6556d519f78cae552c7795eeb806867e23b8d98a2869c7fd5c6c2ad510d9841d7728431b0cff43ca2e49958b0d887f17ca6cc3b8daa424b9acf4271a8b8817"_hex;
            s = "09e22f6503b81ee8e29e0b6c969b0ab7dbde242245d806ff55891541429a85fe05ca8d21be824bb985ec0aa98d9263d83f8f3ce35f5fb67969e0e77014d9b20936c37348b337fff3433bab7fafcbc429a341371048138bc0726a19b7a4e3c765e89660400e2cd7e1154039fdd8c7d8f0b897f442e5c9bd04d49e1116937a2045"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045b"_hex;
            m = "628acb4da4fb0c0b2a632800b3d4f47bdfbb3ceee7c211f48af460924b22c9bdd986ad1dcfa789119d7c83f3c6d4439d4df6042c6984eb0480a597145362f95b775166aa0471eaac9156e0255f86bf77d422376a2bc97d2c6bb9e3979537abb322321d7cac23d7e5ec37651ce4b011105d88fc3194586e7631796ba5786987cf"_hex;
            s = "5b9cf3df0c0717027ad0acf508fc0ff4d11ffed402e355675431b8fd44e308944ace9cd66a790ea66f25ddcaa43a65b50304da9d83b7702fd3e9e65d8ec2d73c9669ddbad51814a01a0a306442ae736ffa87fa8bc38cd1484dce14c5474b578ea26d98b47da09efe294f1664c9d9a41f23d8be9aaf3c68c475d793b6c6f8a311"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045b"_hex;
            m = "1d39ede43551c1527056d10ad3c7ecac54574d9a989e7b4f010d6df2e827f22a27ee5035db9c2b346894a9c9bd98d4e4d93c40da8d9bedb884486ed682884bafe9bea5ef812618ce78c6e69da8a2519e19304819c70b46aca5eb78e3e1d51e096a8f333db05750c8abd4cead1e4d2b821d19ae7fcd574ed56bdfd1408f7831e0"_hex;
            s = "8a547641db63e40de38a4a9aea327ee84d158e974329a15ce2478d2792fdcdac0d0abb6b61ac8f9bec9acb780298be56975c476ceb125e394b3d16562b03e92fa5f392c72ffcc0b3ebfd67a4c6b80f5652a59bcfc170a7f46c214c099ff287de1cdbbb3e410ac8d27d72c2c5357005a8262f322308bed50c3b67960e5fe0d980"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045b"_hex;
            m = "26f567e1af866ce7a2dc22e0a2596df4c60d343f4a91b5d485321b021b5252d6740c1ae06d175a3a4dedb7c7fa2c66b96d3c3e56633212fb55f43d61ab9e7e1f2d250770ba3bd0373c723140dba3b0c9719118413ecacb4fdece5816777350b837885618feb976e557b2b8d4ad88f42cbc54e788452187d8060894aae99970a8"_hex;
            s = "b7a051f79fee95c69277cf8eadc867497f28bd9f66df38de5bfee5828de89d9b5bc3ac72579c86abc405b36f5d7ea26b4fdb88dbfbcdc8b756c80b8d0ccadd8e33ea5b5e4bbb9e8a45ce61b4dbc61f855f864d46a2599e1ec5d45901f0e273907a220c00863ee69c74cd8e07f29dda0ed6d519af8c926c2b2b648ea1e9ea06b3"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045b"_hex;
            m = "489a093a195392c15b4ab965677d572888209e061834592ae55b7562daebc1d1db41f2e4f058ea87a69a3a98b2f5e59bd83267b00b82f5c3d65a0703fa81149559689c8912b96c0dee321ee0fbb4df0a769775cbee4180d1a7f7ffad3df2178889b61012c89fa1bcfabd6d2789e2cddc2bf8d03d099880bc21d9674ae9665212"_hex;
            s = "71fd89c20c030e2f1d32c9b3241f008daa2502d220a9ee24dfb937d6d0a91172c686ebe146a0b4aa881042f0645c65f3241edcaf3e6e5e2eeb1196bcafdbecd04bdec6d84aa6800b344a93c0e2243d6450adb68bba8168ac8fe713cdcf63956e502c04a5ef05ae603fa38b3ad50156598de70f740e35e5a175a6f045106a05f5"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045b"_hex;
            m = "ea567b6c6c27320893fb1b63817714739f7169e43e069bc47de660806cf3ea0f710b6c6deb21db4b1693f2052fb778d4d8b7c545bda083e978b5b24eb209ee2f8b4df5e83ce6642cfb43c1fa206dbecd85dfbc1432998fe13a7081e5e0a8999cfec41dc5a89d55150cb2922c9cbf6fc870915739e51847158bbed52c3ef772be"_hex;
            s = "0b9e0437a57b4a927e26bddb19a0736ce67ecb210e79f2467a00113bbb773be9da3a1071c0837dcce41abcebc59f5387adf9402e50ed6cf884ad007c12c16e7a97323c150d7acd7a456348fa803d4fdbaa4c9648724d2e68afd18f9b0d4247502b71578afa6d25335565a47b9780687d1997e30ab5ca2e60cb00de5b4a6b757e"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "ecd6bfa6bdfd753f6f856db12da04af254dbf26e56623f86c06031bdd60124544ceb56e4dbec53740d231459ad3767bd202f857e88e4d767f04574329aa51c414f4d4c52edd021850cb1b6a4bdc11be1ab63b9da3ea1e80db05eb8bb4f1e801fbe4b7a9d53226dcb8a4cc6fb954a6c44802011ea4745c75ba6d82b50e3243aeb"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7"_hex;
            m = "a5e2ce04a27a898b29d3f51c2cdfcfda59674975a94f4796361ccd7e4cb3b8eac263ad398b2650d08824b6bea0791c9c1338d9b70bb0917275eeace50e8306cac187e89a30dd38f391b9ec3dbb60c48d802f39c93edfb10eb107f44e0be2e33e4753686fba26a9baeb9981e2a41b3075495351f369640d3293708f016b5bb70c"_hex;
            s = "bef3928d30828d0f473d1bcadb04c4bc636362f82bfed5a3f5caf3fa1d50fcff15ceaabfde593f997315b1163c03f80c5f668e32edf24cb4b9f0ea069f9cba9ee4c234cb3044222310046bdb4cdf003033de6a483ffd36f01b1bf205fd79b58394f477d4eb88f6e4e2b2d3aaf56a9a44c1f5a377ecd755dc71812e205e0cbbb5"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059c0d7"_hex;
            m = "a8a186db7f996a09a652fa6c82eae8be7886d7e75ef46dc2308faa240563781b419283730bf74a7f020877162b016bdb2e3f1ec1c3e926cf67d6152153ab0830ae447d5302566585ed527b68198cd38a6d9cb6e78504adb06014dc4b590b919b597f1d814affe3a3cff6ae6c32d248549e6648618e8d2bed8511a6ab00cb3be5"_hex;
            s = "a5f4ea68ef0aeb4b95f166f500ad95ed68e876743add1cd884c92e8c1e5dff02e3c5631e244efd8708150e1bc1f848d338bccd7d3c74099bc4e88618349fc3e51b50c311eeece26f21b63fb3d20ac52f4f20889f148bafe24ffb5a5e913b83849445e163c4b0777e78cb1420848936953a58b73d61a74ff9e195fe9c8a989f79"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7"_hex;
            m = "b47e91f13b8cbabb48637ddbf28ad8a44c9c823df2932403e146c6298c3187a12c759240571f4d1dd4add43aaecfa566876a9d612fe223427599a3163db33ecad31dbf4b7fcdd1eb5a4b70075f709ee6c56d57e58d10c6d15743b99579d65315527e0059dc1daeee81433b8930f529eeafae991033a4777a2e4cf2ed68202f4b"_hex;
            s = "6cb1e5a178a8f5331e7b93ade2ec62e75613f5b93b1c82a3c13f0d950ed14f1f679cdb0c3d11d431005f4152e7f19347f0daa308652aff6d7d2c162b6486cbe8588ee1e8d3a6e8a5cef12ac61c1f69ef88ca70c8c600820075fe844a6e4d003e722586684566b17b51438df5e9ee2a5272add516430beac83704ccfe9f3e32c7"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7"_hex;
            m = "e302eccdfddf1455a17fd2870f737f23902fd1d8ab6cafc39bca443301ba53afd79bca3aa52399d5f701c4460ec0b718d6efdbe3187f66cdf16c775183a0623fea1448047138ec2c0695c125ecb04846b032980f5e473eb3f44448d3178c9d8d05b490b5cbe5b462b882f1ad110bd7b5064233e7e58ce07c8e99e0422747aba0"_hex;
            s = "032678e9feed45edf12af67a5fda9d1941f2942512adf95b04804eba5ccf01f0b37bf9e6a2e01b482ac1afec7684ac896b0d8c4149338e3936422cc7058114faf4dbbf7bf3c330f3f1e8e16a4bb755ce1dce34fee376b6c58e352f88e6ec8f60c5319d45fa01d46d7fa5fd2eb7ac453d1b3d34c17e2c9cf3b851be7b734c733f"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7"_hex;
            m = "f5ab2af81fa31cd0c85348d948475b195bd3a5b26c4b7ab71376d83edc4149b74ab10b7c1b1b6fa9ce977f2d63b2e321626306591e4174393bf287ca6ee7420d84467d90a628423edb05787bce6cbe71d2f89aa4237fd3cd6e8c1be59410f180ac54c65c47325f3af7857aec12deb4b0b379aabc026f5f1ab52cdeb6d72420b6"_hex;
            s = "e1c4ae4f01ae882268b35f11cec2b112816063506ef8d1934ed7f3ad76b7a12a663fb965321886fe7eaf05abeba8bb57e44c9937ecf0515862246f737abaa80a127ba32e78e650d236653d36426589e728387f1adb8001b9f69007d5b2d504ef5c534526a60f6b53d006c7ed0230a7ec9c09d80eb22a7bdb07f354a0292c0e22"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7"_hex;
            m = "31aea9d1beb7bc4f5fc7f5a49f8968654fdf7c2d32c84199fa87039773021fe1ff6815c44216df261ebc81c7e2bbe2c7bed2da697bfa8c16688ef6a598afc6d94ae76f2ba90c7dcab66825e182162118a0afbb5dda2727e423f1156ccd6a87c5fc74e08f5b613e440d140a79e762ce60dcbe4692b816b90b12f889767bf90aac"_hex;
            s = "103aa0873b0d2045b0867c084fa7e253c0119c91ad3c8144156b61f36fcda4a5578f515bf70167a1aca05b8fd168287bba88558932d54b218e822bb8c657067955c78ef3f97f3fc73d1c9ad93c31123cd519a17a82c4afd2bf915907433be789b302a9cb7cef11e93c07d35961ad827971221a0a3b26eb74445e6ea0db338b8e"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // [mod = 2048]
            n = "cb59aae30883db678ea7b2a5e7009799066f060757525166030714a25e808482e752f04f78611b3509d6005b411530c9ada4d8fbddc85f9db3d209eccc6cf0cae9aeb902e96688d2547974b7eb3323eeaa2257cf8d5c7c97f5176e2cfd29e19d0487380e3e64338c73bd592d52e9dbcc9606ed5835758c1a112c6a004256b5c4338322695df2ba573be0e79a7b9f9afd497dd38eed39f05f88d7d399d1e984d048067596ad1847ce51221babf51873bad2d81fa91cf3d9fd307e3ebd41fc49a8b3252ed7a71fd2357330bef2f1f89f2c80f740567e2ae8d168e56f007e8fefa33d2eb92b7d830a4f978ffe842ef0697db50602b19642afc50ac1f837e476c0fd"_hex;
            ecbb343"_hex;
            m = "329b4257ece34ecc0185031b0bc665c9c87ac66ec01a8c69281734d2076e97b0977d6c6cee140f86ddd0818719a4af3798b9f70f3e78e8f1b9e54917aa2e5d4a05836654ba2968b795ca2f9f621093165672fb77aa4d20258936147c2c8f8208445837f59848e1c7ef1c174c30309acec84cdb8c4cc0bd6c5fb39bead7b88d54"_hex;
            s = "bc7b0631f92c7dfb0e3e8694650bdc73623d0356ad2897aad8eca32ef4531263f3219e0af3ef2fa3b8a3eb878b3f9c293c634263bab59b1dbdee04afc3fe39dd8bcf22a0052e6a081d3b68399294c8c6aab199beefc49706eb3436d95bd3e655d21cbb0fb3488052df8819594ab0f9138fc5ad4e9e3521425e375684d94dd74b9a3a7a858aa1023e967502a38b67ed3b8b8f6086427e8c8b4ca608c4b394fc8dfb818daaec3d4f10e77f51d80c0a103569dc28814a80eca64100d9fce5d6b9081f871bf8aae624f1786151290c86dfac7643b21c74f4f5313bf8b7693dabe4c816d7d309ce27f4b08b59d6a26795a9c2278ffa2185a1af12257a5a6de57c1a41"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ef1bf"_hex;
            m = "3cbc49d73addbe2875dde779689a363e42cf88b3e13ab520fcfe655ba246268fe32bbc3dcdd8b8809aeb4d95271f5e9aa828db969bdf4ebafa9fb1e7b5ef83705f611b2027ba3b7f0b52e85148be796015adef7b901084bff97e87151ed666fc16260d8932cb6eab31da61b4b3bfaf15f1246969aa157fb661618defc543f8bd"_hex;
            s = "37c9ca333ade423c46419ea16c5d79f56165a03bd5c674fa0127500a1bd7f5c2d21547d7bb45f558b3b986624c8eaef4db101e4092dda2b4fe48811ef7fa694c1384f460087f81cac1861425e44b86bc2fd825eea94b645afa4afca29f632edce048aea9e1365185a60821e4385de7d7435ec00d307d477b2e6a6e3cde0f340c71d2c59624a7ac8cfb838f68b436c403ab3b45f9a19a0a14ea8f47407b7e25e51a498a902ed8eefe9c493421421695a6d17a9cd5b76efad7b39b8d584cc2902c03422f06af528c6bc65bcebd8876b5f4d1ebb68ce22af5de05105837c15f5ff5c4d41ed8019d6a0448c94675e192a51d5eade91d2237ed57773cf3b37ba3da71"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ef1bf"_hex;
            m = "59632917bcef9eaa6edb1bb6013bef9e5d285fe212c49b44ed78f129ca804141a8aab16a035aa1d25ed2e25c1fb022469fb8ab0882d44e7f4459994a158c5175e7651c54c5937db266bf052c0215c8d764010f2941364c16c8f553797a8cc6b63c1dd19daaa01892af2beeeb5271c89ad38af10cf7f27f51a0d3857ca0878a4d"_hex;
            s = "77a69f4fbd9456eb8cb973e2623d8ea83df850f3c7bc7c8f976728f11b2daa6204ec45e15cd36dcdba5d88bcdeca490bf488a32d12be8c93d9fc63d2a91fcbd79b4bed113dd98bf5b93673a1c143828f47935aeeada7938c65717fb8b370cf649134f6fde56602ba7d6f890ba166d3fe1c51e7471c98b661a6022d7d1d0caa5be5d140e94e70cd1478b9b33622ad69559e27cd6878925cf07f37f5dbd1ae457eea785053d06e2e4d010fd885b897f743ec09c2b06f774407123ac30cd91f81080845f885062fa4be9da31f4e6f626c61a7fefbc123e8b7b80978682b773b5537b2366d1118f506464d27db3991fc2af283abbed6d0c552120f82f906c38c2e0b"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ef1bf"_hex;
            m = "b9403622a632794f7cd74fbba93aaa64c8d91b63144fe7ba23305c4cd135652d7a995d1c6cc2214e9b24696e976358e1bcb7514ea8950d5ef38ceac01a6d8671bbae8d3a0810cf7a76809625b53b360de536e56007bdcd72b15a60bd06f8ec27e6486f836264ac5973b37eeaeb0c6d6fab1e7fa2170f507fc763654c7f20bed7"_hex;
            s = "81511a0c2eb37d5c6fe2c214c55d6b0e5fcea17242d5a5a9eb4568ac1f0af9b8912498ead877ca43cf9e19c743c3d8ea6f4e67301de53ebb81a1a3eaff67d72e450ffc6646b6b45ce8826957b9afbb13f571c38852c3eb384f6a595538ebf467414f3522471147f2ccb347284d0873018bf6329f33e0b49f4e86338b423a1027a6c4718187d19281aa896a286b6c89622e4cbf4cc6cf4c3ad4443516aec8708006dcbca5f42c9b943fc8cdcee23d9099edf61185635b53ad4d8853d8a511cdc50e189cc8929dfd32f9dcdcf2754adcc19b855f41d25620b65090180ece407427e9ab602a38f1f289eaf3299db856cc5bbda17de17a74bace89913813d147d9ac"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ef1bf"_hex;
            m = "f991a40a6c3cda01f1a2fed01ca0cf425588a071205eb997a147fa205f3ec10448090e53f56be512309cf445b3f6764d33f157749d5199c7a09ef6246bd5c793b85d24d9093c4d4b318b48e11727cc8bb7aa5ec8699aba7466e074e1887bdf2a51752ec42f16d956fe5943cbcf9c99a5e89bfd940c9fe447fcf3bc823d98d371"_hex;
            s = "6b42514e88d93079d158336897dc34b450e424d61f6ddcf86fe8c9a368ae8a22c4ee4084c978b5169379da10ae6a6ae8cd80028e198cd0a8db532cd78a409f53baf7d231b545835b0dc06d594d76868d986889419a959268fd321bbc8bad5e800e452fe1a1a2a5a851d542494473deb425171a2f37ffc4cf0600a8d561b20f777407bbef1b596f92e518c0929e8bd52b015c2718d14443a56056f65015515673deef32ae5399ae71f97873ec1508f8c41d6a66a13017685134e5425c4b580a7f6986c26fb272f0ed215d6698dcec9e7c5258173b295b3611869254a538945de952dedf291837df0d7a205e1b76b01140df4edce3afe7245d46ee3b292bb117b1"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            ef1bf"_hex;
            m = "a95ece434121269f4bf036395e54718c9b3b247de3534fe147b7b540bfcd2fd81f6e45e54848ff209b81f986b49db65a54a2366d9e7acb9d8798289c88dfbbf395bf3d4653a187d98685a753c8e933c281eddde013b6489555101abc4357532af497ddecccf263d1f242672904008fcb0a65405da9ce6ecf9a65b3295afe9e87"_hex;
            s = "c878b4b14526efdfdb99f7287c0e871ef6c0aa7b4d2ee29299a782c8391ecdbbb60b8aeaab5343dffe7ade8af07156c45b16842775cab5201b3403dbd6bf0769ab5533d4c40deddb1eecfd8a46b933627d0d25893f0338e6dabb2a778649ebb2193a9d7c99d069c6c209b4436eda411184d99be0f80e3b293b5ede00f58ec4922fe8e1c6de04e58fd443d1cd96fcc9ca4bfc23343532a3eb840fd5c197e7795f2e3982a928e602b1e8f5cca7ea20da049eda313b1ee8d4b1a8e7960e4cfb5b16082ba73060f73c02716324658d3f00a3ff0a78dcbae103d5048e75669053645156f6640d4f6d1645d02e772dd8e70fe8866cad5ec2878ea6fc5c47530bf9eaf0"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "95a31458ca41cf7a280fd060660fbecec18b6242b72cf99d8039a890ce07aa5acf432d9b400160374b3626a46c6107cdf51f1e8b519ac26ef169cd75d3c5e43267ff391dd0a93730c39c166fb77c4c5409c19ea252bfc8e990d873368607c8ce032bc0a6968a0a6a5a918d49d35a3fab9a3e69632816026d433d65bf765cda3738e8c12f43e869089296b36ee84704dadc37db62fd18f380ef76334d882809881d6a6dc8a8f49c4595cca6f85e9dd8ad616cd984a27f4938fb9aacfca473f1a4f00b0db47b471f04b4170ea909cced5960d4a3d269de9ad4b2a63e8ab712f1f0f7c3e9ad471e15bcef3614eb4dce291eae0785ccf2399b16b51a84d1df8ab395"_hex;
            ecfdb6f"_hex;
            m = "d5f5d567512a899c0168240b319e6abcd8b92a8d6e20b9d3ff80a0447ecf92155b8ba15f5743b1c798592c5ef806f7c6a39ea597e116eb0030c354b2966436f93563e52c205826486dcfe7d88c4b2d18d78b4d59690b5fa734cef0aa4e5bf7ca8c060a965270d267a951bd409275f2f99b058a9daf08fd103229daf54ebbbcce"_hex;
            s = "672403ce06f1ab0ea42fd043666e4623299fcefead6cd204599102fc8d543d3bc93342fcaa1262d52e6ff344febda6faa57119ee7418cb78a893aeb245f618c072214e9740abfab998a0896a1c9066a823dd62b5ddf9e9fbd7bd6b68437eef595e90e725180b3cb12301a989cb78ea2dd48730521caf4b2754679c4df2d8e2c12b8c8e55f1327fc6624d85555558fad198db6973ab155deb56cbcfcd44d8a61f90400dd3760b19aaba4dc167742bfe1da0d9ce20036c284729e16b8aff5b6ac3121fbae8cd55fc0779fd0ef7b382c85db88b2ae79270b1110875923b2d72d8ed7d37e2bdf5396b158a89fd1ae95c146737db028ad6cbeb0ed43edd421197d23a"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee91"_hex;
            m = "6ba3f34bde03e48259723bd599464274df4de2b6f3bfc3b06970b507234a4f0217fbd5e352eb5f783d7138ed204685e4e43a27c71d25e25d4821be9c50f6adbf58d66f98b44bb326386d7f6ab658d177c2dd87c9b8787cd70182f4eb91a83a32b49c870f0b0a26b5d1ced6f56364705400a0c961cd9fda461cfd1e9ced483c84"_hex;
            s = "236f23de25bb3694f5ad9f09224f5ec1e78cd7f371ec50097327026fa53b1689a95eaf54738cb75e5abba87a964d32817fd5071febd84d60c7b11d95e33a7f90f22259bcafb9425cc1a79305a00a1b8ecfc3bfab326b6463ee57d1e435db91f45cf4edad0f9ee50dbe42130cfd1bc424906deab4906571688d1a514d98dd074139d57304c0c2d8a87ef5f8766486da8df827f9e0c81fe3465ea52d1984d738b9fe9368a0d05384e9cb298330671f65fe52062a0d3c4af210ad471bd5ddf9d72787f40ede3b77297c1d3a5b29ccadc574e9001bef89e4ac093986bbdf048d7b63bcc072a3cde800eda63bfa8e068fff4cb9f15b5f98c255fcde6d46f139e4d30b"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee91"_hex;
            m = "f3169de46af85cb510fbb4cf9c0aada9f875301ceafbc818f428a59679e1e6cd203d18a97e96f979efe082e8c43a252ea4c354872caf42e4d99aede1281b5cf8fb9d25f43f6a33a8cc09c6e08ccabb98e09f0e6c3f2d9d5021232f811bcbb4bc4bdfcfadf69d91aa701d88a13ce3f84f75b168b36c9e60c3936c725d9a177780"_hex;
            s = "47b74ab96c333f1b60313998e9bdf5e313534c96c2f7b139f4fdc8295c8e53a1ae275b235a6931c69690ba8f1cd5bf9d3e1a6f8a23c9f026a592ddcfe35dc498ebef292ed49a87b4813ddcf04cfae8aaa6978f629ff58f24960985a452a09439a3aa027668055ac5900d62f5f584f8bdfaaa72489792fc32b6adc9d289dcbf5bb9a278ada1392b42a4e5b9714a1c3af00f937962477fe72b820dd4fce5cd2e25e6a56081d6119df474b7b7586b801680c4ecf9d067f584d79a9cd0f451aa90644096bf9e80bd469727ad7b7ceeb9cba63de2abd423ea96675d8fef64130e357a5d2f67da0fa528fb3ddbe2fd553033e517533c6d1c301c094ce0899bcbbcd4f2"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            ee91"_hex;
            m = "599d4ceb774e4906332eaa216b2fe8e1fa52506f381baa87c34319cc80ac425fdc9ab0af581f779344d71896cad6a5912fdf268056d63a8e867802726c4a3afe64cfa9f5f4febc1e99f36e96c7e56a6a2b58746533940527d05535777bc4dedb76a6ff6554d45ecfbbeb72cb69447f94752703c9d73b517b2b417c85b202761b"_hex;
            s = "0745457af52fca56abd808f094951d3eecab89ec10b74dd49d51a9241c3b85972755a1f80bda2cc96cda7cfd549eec820bd2f99920ebef1d10722918adca8d408c3c883d7c257b117842420afbce88159c7ac4f4bf27f039c24c19dd275643d0ead111d5f04912571cd3a7d40e3f83c32b44762eb6d2e2de22ac006643c498ce55f6116463336cfcfd0ccdab250e9931fde68c9796e05b012adfb76359491f26f69ca9d06b43843a4976f2b017643e6cb80b8dba2a01f1b01231ace075ab31d40319b30ad738f62d2b8a1f43ff1bf67f83330fad67f94a39c2c51db23aa775aa43b708ef25c9c62eb565606e4f5002ab15b00dfa829c99e3dd96b454c7448174"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646e91"_hex;
            m = "73a125e5705e14e15f2446fe326f563785bcde93d2ee46abe4efd9668e9a1e089cd9656b0a0aa08b74a87449ce279068551f3edcc5ad3744cd17bcb5c0aee2b98df92e97f10f61d5eb4595fc7109899b610e3a8ebaaab3800c7c25af2d513aef2e48a7f28d3501c6ac44d19f82dfead791d1fa3318ab606889663dde3d4bceb3"_hex;
            s = "7a7a4e5b349a06dfdbc9ab958d5fb70b650b1eb2f7eb43cfdd7508062efc9ada3ec0739ad95b2066009f760c8c5030e909189f36b0f7756a67a69a38d2db57d0708a4a2e295b165411b2ebce13723bdd9194afb288452d49c585cfaa3148f5f5464145d2d673cb1803b6ade6003a9f25bf27325f8bc4b883ec7cad37eeecde9ea1a62d0b30da841e2446706e72ac2588948b15fd9ce09ecaf105bee8bea71622e2c58ffb9eae9bce35e9caea8ccc7e0c8593128a6656267ed088bc26347b7b249ac45e06f68034b6d39a4e2eba8c6f5c878450654bf36e5e73468413510e7b50d0e63de67cd7ba35d4f2afca5b460cc7277f04faf2fb03fd7c8995c2fc9b7e6c"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646e91"_hex;
            m = "86843b3170034a9f8ea79a39657a5e7460c50ef75c800dad690c8818cf25a1e85012cdccad1e7a886c4cf648d7478c334898f044a41bdd5526b4fc7d5e3e089c79c43034c2f4bc7b69d0f4ae83a73da7534486b2c865e29d466f760eaa5f961988042b12b66c58a00f9c5d137183bbf8083199eacf4566ab53a4c073bb719487"_hex;
            s = "45dd07f00a1727f2e992cf0fdaff0c233e6a6866128416456fcd2db6030a4f3cd216db9c4cc2bc7440e06081595e9c51f3c81af68166f6b9cfc0ba4491bf1835b1c946d69d0a6b8c39e1eca84a3bf91f7a299cecc1d98e6fa2ec56cd01ffa04d37423933d746295ce669cd8974caed44f45b88cd7eaffbfcbc70353a3b45c53895edb4e6b19a65564ea3ed404506a4b8dced831c2174995b4455797dd2fa3430f575c6ee80b7d74149746b415ffa6613fc8404ae9e5625e1b8e2b74125b341bd1cd8ce2e87c06114f162fe464d299aee6ed0fe70cb4de523c5b0e10f1f8996f3fdfc9379c3267c268cf29823af84fa756b99ee42f4e0ab8b691e5145f43e38e2"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "c5c92cfbb60bff3e7f9499847e869a4bc37250994789c2958ac2f6a168bce2a1915d38725d8596cbcddbd463c2a46a52561a551f8f49d527eecfbef5589030891d9d90090fb35e43e8620c7fed4a056cd1c4a56e6134433030fe8027d1819c09638e43e359c7c389ccd1986457ff5e21673808cb436608d550d62120d9bdabac419cd6249fec945f10711874f10267c66320c701da90d7354b23e1646b89b22cea44d9e67c706ffc04a57927a5c9157cb049b1090e0f86d6cdaff29570cc629fef0646f9e5f8a7dc67c24052a34b91ab08b2e83b141cd0c098e35cbbb9fd408e7e107932128f6eb58e604764a7fe00acecb9b03203a24c9a760ca0d8a5886023"_hex;
            ea26a2b"_hex;
            m = "fbf1f99265060ab82e3cf1a3cb86ea71748f05c4d69e79c209bd3b61c11acfe1c8ad5f9aac1b0af7b5db7ec31997c9a373d56ce472d6b177cebe3f3a81f6ec7a33cfd2b5f668a5a433d14478e4708d6504a4765d44a9591e00bc906e717f42a5249e7c6dabb384c692676a4d95dadfbd0f464ab6b6df19bd86fd5585fb7c7a6c"_hex;
            s = "89e152374ee953c4d9e69e29c3100f0168eb71d0f5ad31f6eeb52ab6caa465ac028b81478947fe08765d77dc9d4e75bbe2cfd14f25124e42f7bcff6512193cfe3ef9dffbf07020cc5e4ab0b0c44fcc4b2bc8285f16fe08be89b432fde26b0498c9ad46be8bca8e1354c39b571a8e30f07aec84a1fc9d1a8e239d79223a6af22b4abfe36ac108291503a4f557a7bae28b25ceed47fd5b81182cf391ea409de7ba1eb2b404d4468eb2b47c2930845e2e9199fff4f0c838e3bd5f3a0bc798fd6fa4be5e962070cb45d01a84170638fe2234e8df928777213a87be0adee56b8ae514cc05c5d52f872416b1ea2112e76c364ce82ca33027e0fd1f8c0424276659c08c"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            eb2b5c1"_hex;
            m = "f2280564177a0b97e8089b77d7d0cc8ed54849a90d44a7dcd319f5c6d70394169fc4494e348e90c81b2333f6863b1cedcc26672517b2bc7a5c4fdc77917179d41a364b3d844960567506b4fbe3df01cc85fed8e9872bf1fa82f1c073abfc48164bc634b96f732449e0f9450f55832432e818c47dc777ee632c46c8408f6ca9e2"_hex;
            s = "7f65da249423b1406aebe4ca1253075588b101d47207acc5dfb7198dd45548ee71ffbc1bce87e7befd256ae20250208c451bb3a4dabe87c0dd67601ce21a49b1fe723b224d02c7304876e5b2f6804f76d1d57fea8edb951b536c372929863cca988380373af61402e746f71103a9d012d0db121c4e2f636e44b6457d16d12e8b493bdec5d05fd311b502e56ae99071d9bc62dcae68b27f8db50d030963e2dab44e4215be69694a55bb113a8c43d3c2412af0ba055ca740ca628a6254add0e0cc51593cd9a283cc70303caaf8e543ac71bae196f208cd4c9373e2810c94029da46b78b421d6aa8bb00bd83c474534bbaf9629f53bd2df3346200631f7cb9ed4a6"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            eb2b5c1"_hex;
            m = "55c50839aa7d0321a6a85cc3f55ba7f6643bc6a18a8faf73ae9a70d4e527701b7b65f70194f5f0551342eef2bb116eef94595c159154d8966fd639fbe0de525fe96af5db8990b6419bcbf10dfd930f98f230048fc5cf1ca4b0d6f883fb75d308687d0bafcf76dc4c06ec6efc0309125b4569c8f7702906053741b4537e147b7e"_hex;
            s = "0b853828fa2089ce0d1955d52b20424748a4b227b56c557ad63782471cd0462295cadd808c5250ed2f11e7d2754c8734fa9d13c8b96496eefa515f3f127869bf42fc8c6bd0ea0247863b9c56747d15b16da322064f7cb723e2eacb4457c241b3f84a63b7bc307dbdd63b4d755b9b4a6c0b7590e5c1c7c5dbf9ba61eabfc29a21944ca6166e56e01a42a94b5d8b898c0fd073b03ea998f35e26289454012e62bb58222fe9a03c9b0a562b9b16602c7794ba835245a1401b8e3ae28e00541cb7a9aa8335de46d063739e8c71999b65f7c8fec3701a46bf3c60139b5b780bdd08c679117e14136c84c93fe403efbf346213ef4c85bcf3e2dfd44a6b616009ff47b4"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            eb2b5c1"_hex;
            m = "e4ceaf62ba10e317e1001d8a6a008843880790159597ffaf56ef666d8081bf747ba650fd6591d3f15a81d3b7f33b59490cb8c88ecb1b06e4dee6dcfb036ca0eace8a117ca79282cb12883b1133911cba91a883be1a93702d6715e70c4266965f65e0b88785fb39ce8f7b1b4132e818be9d3f894d8ae786b37be64f454355eafb"_hex;
            s = "c269b61d34cb9814934aa8d2eac38f5d941d7b69e1e0cdebea5f275f9fc4a94007cfde1b33a0f9cec3d2b60c6b6675d8a91e7a3251d78c31943524ba75824cff10dee098205f0c84d0f941bf1098785597a88c10058f2c857f85e53a205de7cedc10ad3f1d2abe3cf7c61382c14eeb6d7b409f690f9690fe9b72eb84619fc1f95a8fab7bf9a35248d7e1c89559798c0958a75b85fcaf143b41c3a23864a548026d57209ef64c2d6d61bf9ac15257a531b10fcc06fa97fd6e3fe1a882bce6fd2b8eb5a6267835dd8eb0b5e3e21350f6650de66d27c719980e98ed96006115caf94c061fd3669dc64653843853269b1b6df0515cf67f3161024ab3cd99a4ff5f16"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            eb2b5c1"_hex;
            m = "71ff5c8bd950fa414c774075da8ef7a1a58165bf4fb7670cb1f5c00cd07fb1ce0c80ca719babffe73623fef91298c08b12b35e223bb527a3685bef5e3f04a94a63153992eb9d83511435c89a322b32bceddfadc4a96cf943468bfd510ab55fd1db8851f7b26cae084c764561238d75bb9ccbfaad82250672b34f93ed19daf8ea"_hex;
            s = "77b82998fac61f387b1a3264bd695ea3fff605bdcaf4c2d3a57f87f3f425134b16711c7812ef1a6c7a5d191fed835b90769883da3e7dbc81e141e3a477cee00b1283e80dca67998835ef33480caeb10f5eb02374cc38129156197e81ffdf36a09e4c22ba30adf9760c441b9691925a2233138f93bb0283be4affec35094f9866e1de3ba4a7c3ebacf88abdd8a1034e968d104235a805c372daeb7b7844ff292bf1e02f3fe8912a28d92e0724f285410161f4fc8c9ff8e0ae91feafb890de775f874de9c8fd990fe77c21525d55f882c432060da56561811cb7fa2a7ba4ad907faa5453d1c2a8834eeeb7400f17445d59a3344fa64db8ee9e97020c5158def04a"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            eb2b5c1"_hex;
            m = "cb254c69cb296eae328fafd8354396594c74e8f9ee4783289bcc8a922031c2f517353c2fade0359ca8713a9ea899907dace6d272d982dcfe771de8803d28f707ce44736583fa12856bacfdfe90cb32e77c4b26eefc54afa4243b221b93b0b8b3f9393731d6dfce118426401e7743453fc48a2d94e026c6c1aa0c808aac32cfa1"_hex;
            s = "bab31e3b71988cd3f2a772cd0e33b9db6d7aea6b6b99f631a0259ddfe9489bc662d9c6c9e03916592f212bd4e9619148dcea0b58b475c72dff8815aa3f274ad19d19126d67dc6d120e985ce16a3aeb64aadd785657fc0370c701ffebf71d83260ccdd9da04a8f29a69a01c3a9a6d2bd942c44d5cb91fcb44af60a2b8e2c94cabc23ca04ec6d3005a82cbe06546c38d4fedfc56d549c785a2e23b04ae0135b03a17d63ea504c51a0d129c172ba2ecea5dc6b8db4cec7b7a4d021da03ebe8cf6cce67b8e032b4ce780136afb144e5d8019e7916932ba87c7d9c963c0f51d62c873af41396d87877ca5ae888ea7d322faa79345080fb9d2e6dd98b7b219b6662114"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 48;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // [mod = 3072]
            n = "b125fc054e1b9db3b98212f53840690607c110bf31e18871fdfa13046496a2e73b3204f33bf8350f841ba94f511cbb2f40587b147a820fd166213968e8fff9fa4be4718a672f4e9321455c56d5e4e09d4f8b2c690718bc46108de269857bb4145c86cc75a4bd55f972285e4054b9fd13927574e63690958177784b39b17083bdafdd3ab8d327dbb9da93fc5cf9375205566242bb30246254ddf04c526f9141006fbaffc268bd2fe9aaa19581bb1c19e77264b08670ff3fe2b543f47a7af95bbe94b99300889b8ff07b2a44d5e9e229e33133b58bc7d2b8eb92a3bb6c035f8891d3165284e9ced25d6ef19a8135d06ab889f7627318cb043c89d90667cb92d1318880107ed9b866b10fa9af2225a987827e866c981f0c4424740fa71697ba9933a91c0d1fe83efd8e7d6c8287de72811da7fb4fcbad42637f0df47482119a07af9cccc993537cefe7892054bc2ce20021e9e37f391ee57b66c40dac49a346a54e6416f4e40af67b7190d65f497febd7d54f148fbc4850cd7de200cbfab53d05fb"_hex;
            ee73"_hex;
            m = "643e40f3636d706e1337bcce6818c10a104fcf06ed87f859c8b667534446f43f1073f5e561f45653a0ddecdd5fc40663922245d2fcfdaeede7c4fe4e187b3da70217964e3a2c66f92bc593c60b931f7e0e4bfd1ad94923863979e0a615777097a1f5ce37d55ec9e71eb85a8f53cf35e3ea909ee56cb37eab269db6632284b394"_hex;
            s = "4b1264459b5d4066370a09c8e2047911d542e800c0ffc3276bb2d88c74cd16591c0c1c85ac44e08c74849c2d8fc287f5e4c33ebc7bf781fa0e89b4d7ad8e0a0e4e450c02e48cea826f19a96a9873407d131375e99fa2ad744ddb3972f3ef5e3a5bc7a6dc8701c93821bfb31adca2e6cc8f9fd375290b991e5519efba5fcaeec5eea24b671a6c23b6ae4e203c0d0d27553946d1b2fe55b43fba5d321f0ddc07ec9cf72aa8633f8f666428a637fb2b10e7fe9bb81f24c5b5750036d6898d18ebc358a63803ec2b67f516b36321b343f960a1b8db943ac0440c006391dd64e09f6bc3c1d2e2e2cba781a161f0aad3415a5b03addf637060cf0211a02094a1f7b07d443a7ec958abfe74436330a2a8c7c7ec86f91bffa9c35e1e8d3683307e33f226f9645ea66ab59ece99a0496698ecb8926e4772b307110f64f8fc02ba7076d288d4fc1481259ccbb7eb35afce0269f279f68433017622130f62e91851d14bb7e6bb648c00be485fea37bce55ed78575fe12ac3137df34722c0f2e992628c525a1"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147e73"_hex;
            m = "d55869d6623971fa7c90b597b40354195106fc488a46bbcdf84812f14a4d4ca93b7a0dd0c1352eb387d2c8d29e6f8fe5701c621ef54020ae2938bc8abd40946f0c97fe2352de24ff18c113aaf3da0e276ed2281245ca1226d4f93103ce96f32e32f8645a7bfcfce618a7bba61b0c79e6357077ace2ad393ee1d498e4e71613ef"_hex;
            s = "9c2d846eacd75c81b7cadbbb0667f58ec2158c64ddbbc2af078082aea4047e30a59e74c3b5a58be9553253a7d8bd4e527a0daac1bf03f3bf7ce5cd8d20443eee2ee89a78c0692c08e3c452aa48b5aa76b31e00518e435fe8e7858229891ea0c16529ab09e3801b07f3ffbbc54bd821714ee90788d61f60a819d00ff40914e7aadcc596bae30253f495adf49ddfec4532b824e8866e39406c0021914f267e424ffc589440bd847baebf346608978bab8ab4795199ec755ac6151bf9466c5b085812eeda9f16b4dc22fef2908231bfc31211293374ce6f7d681959455c4cf0b6660895dc128a5bdc8445a0811f2e372123e5a21fc0638da5f26ae270930d2e096c6aa2178a4d84040e3de195cdbcd6940cbac0df96ae273a232a4c5a3fc2a2bb7e7b12e9c49d95ea2458cc7cf23ceaa2c8ce423327de1ffaf6ea6413a8843316418c2ae714fcd07f75c0e557c71229c137e0160eba1c29f2098245a8623ab1e05612485d0764448b2149ba1931513dd31b7ceea80549c26ef166d0e3aeecf7bf61"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            ee73"_hex;
            m = "dcf645e2201c3144ccded7cdf843326481ff3105019a5308fdcf74a66033e7b92817c4c360ae83324e73cae2edc584e49ed4337e1ac18772ab012f839c03ef36ed12f3d64c7c63ba41f437cba9354d4065e8b8ac53c85c3b7d04b83891e402d392b07922cccef7650d2ac58e12dbb4014003699895f6f9eadd9fb6cd29204819"_hex;
            s = "0e7a238a1eeb14ed0aeef74bc58feed30afaabd466b13d91b72283a694b785d9a31552b60217d9721197409318097335961d234c9cb6a86bdcb72d6da21951c70461858907336f52e82e7d44074980373a5bacd08768ab9665624c8df9f09363daa823948b4b6887a69ab7eb15d4afcffaf8a1499ab12de74fabbc7c93ec60f66b783d8395fdf95fc3b417222882c91b40d249165f5b60b29da2320d2cc3af8a1c148af334c404d9fc248034888fcde6ac99411995f6ee8a1479def7857307b0b40498a56e64929c81d14a7a91477935a37311e30600d418dc07d6af4cd200ae88d5ba69b2e96bcf993d105a18a1f7e8a56b372961ebd729a76c15e4297ae4bcdb5ef2e7242e30ab9dc13442440310de6bdca48b98d67bbb2ab07822b3a9d5345b4509bb3a82c387f354f4cb19bfda50cb88149f0cf4d8a668458309676c4c7a1ae950ef5a5830b4c1d0592ccc875a46828e617608023f1db249e9cc13e8c0a28b0395465e5870b96d68ef2e254393b04bfea234ea3fa46c6d53d3c5d51640d1"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee73"_hex;
            m = "f5e7010e4829c855dd6c3c84f57a50cfbe5b3c9fd4c9229e07e4f10d5f278a5e5d9b21ff844ae67418f7e5a8260c2b85c4d42bc29aea60fca1f233092b861e89247312bd9726169d7361322490338befed26cf063cbad3faa0127b30b5eedb7cd1d99bf189a4a0f87712e8a03bd5b635c0b9f014c120c5bd8bae922a04450760"_hex;
            s = "5f231b5b8e5804698ac2931b612c7087462f296502f7cfb95d8547c813004ddc1c01de04ab900a2606db31f98bad9d43d6ce858d7413f6ca48df1214c348725507d86b19314aad2be754a91ba551e156707a991e93f4e49e66fc82ad34d1f36ceaba9b781df4b277f62f5072652ae60a6525f6b28a77e144edcd4f596dffc9cfc6ab235ac406c7d5fe3d364e6c4df5e2e50c0e9931f3ab47fb41bbd0ae196f938168f52f3ca4c6290968306044c236792953a2e84e2a2738f296c032d7a0699849177cc6495b27258820f8476c4b09e85e30515bb9bfb2eea6bb04d90f6561f5bc5123df8e6d276feae3f66367c4481b1f72b38f51529972d9259dbbdbb2f04b028d439520c72abda8f04d7b277831591d2d6b6398fe15fc5cfd0b854f4effa0a77e39c1e596a466e2b184c499e2b15aacc5f6bd4c74a58e346bf6f5aed5343c300c8f71545d95d2276d54de2b6e23aeb8f5247fa6713e0e528e35cea82148ac4c72a654380dff36e4ff0f2b0a14dc271e87fa711e915855efed24eec15700fb"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            eea299"_hex;
            m = "961d11d02fea2179ead83fa51684e5f4a2b804a898e2a3b6e8c4c91c676c9e761767cdcca9322caf40f19f8478633a1fa716a59463d7c549446d9850ea8761f442f20692060fb6ab8385ce369f33fe3b1a69a89d14578838d0c59a2bb7053877a02683ca4e6b05953afb956493da7a6f8418d36cb54936a814359756d5d06b27"_hex;
            s = "28e4ee2583d359cc91cf56aacc9a9fc560ee09842fc4fd66433f383b67f4356167c799e6446ec0939691a78947c072c1b071ab15c4c4de6d124550139d6b61c0c8370b725a9a06704592975d57fd3d8b3d1867d5d69a0b5580316f211f10ec4bab68a2dfd99cfc31cd3c5c2b87eac54ec482a60ad2b0cb1fe62676e5405459a6c010c1b9e81caba0a82043423adca1cce0037e444572b092c5eb060b020937948ac798b41c55a183af7ff1c118ed778a140acf7f17894ec6d39de22871ee0bf2fc97071a9662663e62609b184b9e78841f0df34963b228b4b13e5a059ed1f113f14ab65fb95d79a904f4d9c47d619a37b2170ab2d41daf64c39117ae5cfc94a79d055b63485c7681eb4aa4e3c044e98b95fcdebb9bc24c907635c77333acda3d5c1fb9c79ef99910b889a1c7eed7953c07ae9d234c3fa53d627b7fd89b5321c2e8c3f9038fa8391095ddaff9b9ca533e42554c83abf026974a82c95c6d55c842b2a39df9c5faf50d29fef5d148017c42bf41e7de2073dcd5d8a6f7029a19dddc"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee73"_hex;
            m = "00d76dc429af281012cb92d5f7c2fafcaa73ce043fecfa01088b70e5c46208ff13e08bc12dae0ac6d4d87514872d699ef9e8480dc1908fbf531c64102f5b6fd95893eb370869fd8ea20044cde865b1f36e2b99d24e5208121e6e597a1f04036bb738b6ad22a5a76f648d288882327b03f183e8db4ffb0d0351c776a9fd276dbc"_hex;
            s = "619652bcc22cac5046e8eac8694e0ccda00a7ff1afbab00ef5e971a700499b64eabe6f80102687861e7b8466ca32eaaa87e9a0d143f75dd7fde50b0195a035d4db443045416caa3d51410c66137ecc63e6d0568f76769045ecd66a3512b246dfd296397aa41623f4ff67a67b42b9ff692dd4b9e4595aafe2e7166eb02fb3d13be0f22f5b6c716ee0bffc8ec3567e14775f98ef1f0a6b96fe092be0a6d243ff668045d42a72173c702fd0e19c23093497ccee3ecd7c1f9afc876906b498f85c3b3c0a88dd5988a9e6186d3fe635fd7313bde1aeba873901f10f30ccc2d6f91dcaf64a6d9a95028b1236e9b5af2404f4c224388ef39801eb4b50902925741d3ee50a4d309f920f1e823bebac39312243f66a3f0648db6411612e6c881b4e44920c7f19d7fe5970e1508f2d6cf662d313560a5219973e66bc54bbdc7e05ae3b46fa7c70e5af4d4e379a34fb6794b7d83c3edabf36a080b3020beceeeeeb948d36d157b3e2d27e79f8a9b2dfd413655fb71e68080924a7fe8401538a3e90fb1cdd83"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "9e428342d2e3633965aecb89b0ed65c619c47fadb9a9017fc18c3d1837e5f6b4d0fddbf05bdb00b659bac9645f02c78f05e62d0cf57b977345eff5df2066e0eb2ae3af57ca3d0fb0f6a475fc36dfc6e5870b3ac5d850e2849fc32c9b16ac3b68d2f815e8c44d1418cf51f860356b8d409f20210cb01c2cc7e109ba76f6c43f2096876d4500012d8ed7dc1c35d24eae1ecf406ce3ec92606623adb8b9e17c3677c1fdef1a54d9442a9d990c0733f03b31633b11fcfa8c9f2b1114f307a811657e33d285093f4653b3ea1eadb28a792c835f975896996bbf029d1f688ad2e0b978888b07c3a12303fed92bf3fc6db29837ddc7c71292abaed99f3a0d7e60b15d9f2cd08d15318d70d35a7b7ff2fddb22d89cf261b8ba64242ba4616a93ddce2015977421d25f1b3825155746bc13f92a6097f7f66e919505af07706008378597af3e70c7fda3e9c99a763aab19ba3f459b12e8c1ae404d5091d802ae0dfd6b3619b97d3d964daf1de600b7446f8a7bfb3f4956a6d1fe967089bebdcc9b4ac7b905"_hex;
            edf0ff7"_hex;
            m = "6c2956c024c46d04fe8190d0383885e367b0485a0512aec52c9d48809f9c8a410a952ced8bc4d1b070c7e74c439bceb104c73ccfb5d7e0a81c0c45a9c452fa3a4572f094c58923d2bfb97c4b031ef620fe0401113c5724952b5ae529229cede8a129685cdbfdab9471be197681aa4757dfce5ec9a278c1b4e3f0f0a9c163ad72"_hex;
            s = "1d096e665bdd8042e8f4ad8710042a3e0f26f95ac00e285e1bef437622dd6f3341a2a1840a09f680c982fba7a69e14e5e1b0d199751863996843696fe4eb46875b2ca707937b36bcd9da782039345424863af7275e002b25f913c60e56814ca4fa2b32769340dce790bc7b1d2c479a4ecaadd87869f62605e2302cc2bafacea33205c943c6bd60aba0cab77e67e220c615007479705df8bf41cc164d39e09b8ad34c4bf7b542bdf74b91e53f7ce30b9e9d29a1660c1a2051168927e422bdb9a8255db120adce8385507d0631392b62548bcf40527c265c174ed19ad00d9f4ced6c9a2f620f6d9b1f0bb605650e03baa4da21eb4feac20034f64b16c3c03b1a35f890c8dffb6540dc892dd3aa8942c88e3733173b9ba931bff106020bf3cd9f797ba14e9231efc45b54acc2aabf4caa189ec42493801000016b85b42c8ae0b40495ae3a530712bdf5d33f09660903b1605cf62a8be3773556f25d08c0a9d557229cfdb289618ea3dbf3390f9f916daf6b7cf909b541a72691b6f9b7f56becc8c9"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            edf0ff7"_hex;
            m = "d17e77c2ae30cbc6e50616bfa30d7c59b961fe99e559e5b653ff642b63c3790aad701493435e7b0535eaedb45b23855c4ec662b5b86d0547ce03fa801a7bbb047ec1d14476f13c529dc815f4735872f75dff8ac5ed991a3a64f507b4758644694c5bf6fecf51d6552488d7a673130ad1edf4bef20d47eb361dbdd1eefd4cdce2"_hex;
            s = "1739c5a5949f984829c5baee380da556de5b3fb39deeacbbbaf1409828c92df1d00149aa41195fb6fac035df1e9ee276df3d508928240bf0932a2f9224fc5aabc4f9ed4c413309c993536c8cd0d0551555a9ea8797a6f7ab60eada0a969f3687ef75669bff8d597aec3f8d868dacd1ddbe5f819817a8093f63a4127ae39e8dfd70c38fd1e56c8bb742ad9b85d61764c391050467d18d78ede56bb0f598823531a64a4d33ebda0a0882775a52ead6c404913e0ba876684321132069e420a8cb44b1f7b5d0ae431016eeb137c9a78a701936d5b7879f3f9a1d679860949b8d266c3676f46617add4bd8ad742d95aaf4dbbe6e123898240d123ce5c804bf448904945a928a897baa37aaca37ab1fc53f7c0f2a7de496edf5377dce9ed73f8321ab09083057c44529f65ff0846cda76c11f579ca00e4ad4e768ae3e19a7ad0a3876a0996bb829d03e9736d63e886bd2f9857d3280f1898b51be9d95e66a479faa76bab6bc991edde71a715846ed20d76cbf16e4e4fdcf6e91136350c8388a4db005e"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            edf0ff7"_hex;
            m = "5e91f67cbbbfdfaab386b3ecf5f02aaa92d48ba0a6f06f913b37c73a6a6c2086c3f02600f0d9678d94435a5b79eba015ebfa89595f1eda6b59dfce2b8c315a444245b5a7fea518386080c3c64a4240414168eb271693b240c5db1a8b9d658278a138ac572f4c7911dfe4f416ae1e92965cc9b9f412767e7848d2b344e6332189"_hex;
            s = "56f14f6bf965b67d83b1401c8b23f4355c0f9c0d1db670f23c89086ec627df88fba5affc742661b0362728f83c447474348ee700ad8d58fa48e4a65a1d5bdbee40da7576d3b5c7071fbc9d9f98f083a9ad9a1397cf023abb81b2b0998db238a053fc4303c057ea27c542013e5cfab46bccfec5abaa3887f18eaf2878a114e5c2ef6957f4297a7b6ab006920b2c4b0ec53ceb8539c6143245bb357abebdcd699219e5a617848ff3eedb931373d3ec38a067685848c21be6f787f609b482363bf162b7df1db2f579041bf8349c34b88e48a7dabf178a3fff29dca6af55c45b4f94b24c68fde29f25f258cb3c44c8abb460c4276a5467e8547dff71f9ddf806d884f34451cb5adecdf854ddc8004fdb0bd301f36218ac78c37f05000dec91248c16fb8fa24d60b0b224638721f54e87137125bc815b2adab635b596890288fac155b613785cbf52582f81159212230bbd7d9de687b890d409ae477a61f089a174d4dc7b90bd4974d0b79b2e828d35c853bcbc46cba6a3a31b95d631af2af2051fa6"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb8f15"_hex;
            m = "5c5ff1160746c63bedd787e27cdd9f581f2286c7aa3d42aaf8ab2e84d221fad21321f33e0acc841520f7fdfbbb8094de62e2aa2821084f392f5f0714ce2fce58732b5b732747a2122dc99cdbe5a34a5ff000f84a951dbfdd635a4d9f1891e94fc2a6b11c245f26195b76ebebc2edcac412a2f896ce239a80dec3878d79ee509d"_hex;
            s = "824b73c9a5008b6bfeec6696ce8c3560d2da11f6dde2f8bec7b1d447820171d46f88654b30be09bd7496739c86cc393cf06496c7cc203cdb739a0b7abb5bf82d043bcda57b6a4f2d2c03f813cf01c4e68e2a2ea5a2199ed1798c017749e35cff02d0daf19521ab65234ac7f4a2e904ce4f7c2d559537ec161b6ac5895677ee9a3ad1e89330a02557845601ee76e5c4086d8a25bf49b27d7f23bcef3fa74ff1fe752069245528f9b3e5774591d855477bdd7df7b76258f3c654840ce0c9adfc4e8de5c20cf619e7b7ff6e9d3d4c6503551b38134d47c6a944afb84302db1ac48b54f980819393142c23cc6bd4bd3ab519d42d9bfc9be75df722aa6336d341d9703874e41ae2899248a939b57339d6ae6431513d6aeddb91accbe990491c0c1c06af81167993eee641ca06a1fa6ecedfea2162edef08db09adcc235eabc7f511c8aad8cb0f9f9601e400a258afc1b249b47130474747ec710c26e0528595c968f8076354b0ba5f422d417302d47572cb2394d373c17096edfa8b4ebe2d74a9c8ac"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            edf0ff7"_hex;
            m = "6a798995eaee88b861274398cff6d0411e6995d5fa4fb92fe2f7d8c57f3bfbd335bdc7b6f971f495625c0147029b2671f6a68befbcd6b77645254b774b36f046e5958e7b593fbf99316583ed916d35b9c73abd9224ad08070a6bb58347e11175a18646adb260cf09f7ca2f522374e361b9ab9586d9db922a5a527eb21a4647a7"_hex;
            s = "62f35bc627d3cc3e8ff8c9405295f967d95abb90ff3bbffb536f4a14d05d6ea88dc092a05a46847baa76837383e9527bb267ed8db2fe4a94d47dfcd8e23eda67f75a4fc9e276dd3006b0cb5ac21ca483a8020b4df3485c5fd6495577d29d32c6d4429b042f3be4675cb56ed5d3178aece1e8c938106e5b8c1111f2265f6204fc7ab87860301a1b15577c605a0be4931048753762d7d4c2cfbf3e873ed63b2ad9669971a32be0c8246b862cd882ebec164adaf79e37b3b07c9ca193887f370573f2fb9dcd9b3c9a0a155d5d622e1196216474fa2a0982dab39e01d6654ee4b36817bf5f0eb0ef0c65b7dbe1dfd6a6524df99895ffbc264b93bdf61502b7e2c9bcd63e7133c611f5ea7e3218d001aeab09d891c045cfdcdcc049e5cefdeabd617af83c96e29a90133d29e4a2e6dffb370bbb64ffee31e3a6bf9225df8fcc0c0ccc7606b3dcfd883c3950c80648049673cc65f0e443edb63b26bda9b554b2996960c7ddeabe849e871199fb54566913a7992f007b54fa8aefc7f95561cc030e80b8"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            edf0ff7"_hex;
            m = "1470f2d65fd72258e662671936f46a2af03f6000847eeac83d673afa7e5b78314be1643a0a523c6a8bd6e035478e34fde513c6280320b175328bc190427ad7e4c1d38fb0bef4215dd2a5850f624adb7a1e5e09f7cd1ca6d64d7f17f6d56df7947e2fbd61022598d7c3b89ecc0f8f2648a20672946cdc9293952b8455bf9ea0ea"_hex;
            s = "99a58b0398830437da35a7689255de79718f66c91cb07f9dcb33293194f1dacbbba05013e8df993f06654c45462b3723c59c269df07a5ca742fda3236ff32bd98be7cc2e2e7d5c7f88f409b2a0b9ee85bbe33d0e84823fe6ae1b4e38292075d0315959806254773175de32162b66c7c68ae0a4eee7b1e947f20359a83513e3bafc365933d32557551b9d3fba183736201decd6a1e1616f18c6264db3e905f36f98c4818b6fa54051e95feada6c642ea1a3fcfee595a172ea05ab7051001a55958c3a733e69161b441fa1c97ddb07f9d73da7273fda4e4b3a0e5a96c2d0e462348ed05fd5a23a52bc6e08a73e6b7c595db42bf36e2fea5120b605ce1e8503f34b676354f8f861f6185d1aedd915d07f978366da1a7d2e4a220c43babb4d60d2a543f0406fbd205b8c6a759374e8f17c5c49efc0c0a2f327eb0c0c681483af84c88eed6da33e222fc8937ce9026e8533950b684bcfcc7c450ae5cd750a737f718c201d33625a95a4dd37de920ba97af7dedd961d0e8f5b61f9007013ebdad61044"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            n = "a458e38be5e581c433d88dfe24e7e1bd0713bde19fd7dcd794b4fc97ac6546fe7874ab10783407221aa6a526de912097761a1f0a10166cb368f5af6a60a944493173f9d9e04a9061109131de32ddb21f06c571ea83aa42d9c172d0ccb79fd0bc421dca68179ab6329d0af92b8d2caadeeff6c0a46a6bccdbdc46e7afdfb6dd8b1c20695837cff9a153b5ad8b6fc0344006c3916aad0f6f19d84fe8b93bd6627331283c090a7096af3139c714fa1045ce449ac953d7068db92ecd2b687b0902509cb5ac0bcd16c9751afc847d0164f5add3c038efb41e7ba5fdf8567446aea2c9d7252320e5503ff0ff236871541c2590a5d4c1ba9a315f885d732fbe15c2f5bd5d70b158fc33e30a44b25cf56ff600003369a935c2e017a3984593b2beaaf9af0e6a5c9d19bde051ef1fc5bcd63391488f410e8a97cda45bdd9233e8401b5f5fea4b55d091605700a903615c5f8b6c18281b5f3d77b85f087822ae5ea14ca26795504abd011f42de239f3170afda6ddf17f69470d46034aae629f8ae2f9d0d61"_hex;
            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e59685"_hex;
            m = "6ec1913b9a55cfce3baa6a742498e6712109949f2e5e66fae70e01624090149d767ce89c46ed39ff5c2945db0e8422ba4a8154e3cd3b9fdc96031a2e9b4b8568bac3dc66f2c12cd3d3e6a6ed33fff2882329c6562239b665905a4ee965f85e3c22dd9523089a51538829b634fcd0fee494480f7f931f539ebb5bc41d05604622"_hex;
            s = "1fdb03e44e04d5823751c29f4404de6859ed5ad1fd7942c6387494327b3fccb98d662bd6311edc0bf49cb4d1014c6f2fed8b5238493bb4db23580f10763707414e3c87a663d664cae71bb00c2596b2515d711f1087125670e2c58f7ae57686f82da409c79718d942fa05545518055a256e007ef761d4acc33984a629ed548005acfd79e0cf151376798eadcf978729a3e18b9603b7693e1c923cb86b52199a360c88e9ec5303afa6e60e47f45719e93cf2e7a53530b9c9a2ab3b2c8b5d7d6d7971445c8a1494bc36363ad58a1c1f4bfb86534cd84be778ff4ef4a410a73c9d0ea327d30548977f2337a74641ace92c749ecd54af207c4bc29d446eddc173934bcd3e998da643261275b1556063dd5c1821c43cf2bef36eef66e514d72462043fac5d568d1be6d57e49f40f30be88c7b4389cec090ed954f48fe48aa26ba39dd739c2d0097fd31330344351a3e941bd633952ce99039e31056097d00aef49218c2589212b44bdb12b6edb68c784b8f789f370999f71eed9c04d6dd2d4d0723d2e"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee59685"_hex;
            m = "f6f47d4bd1da9f9fe5b02b1867a323fb96c9d6b14c650f25d3668c6ef930b1ae679f7e3a2e49bffba30482146da9cec4dc17928e7d7adc98ebcd4b52e79dc757ab106f987c27d3b77f4064b1cddf29c0c9adb380b2c15250741f89fbc47ec0986b4f39aee2fa459c206bb838b0cd9ab706951fcd13c3d91417642db2b75c0437"_hex;
            s = "5592798437c8c3a7f2d02b41891b25d9b81c8bd63a7e539477a9a995f19438af7cad25645ec908d3fc00ff47a7d2142241241a90ba742eeff3b28889b80209d30e3a610007e646954bc78ec5c8016421ebe7bbabc7f65aa029105c2c1f12fedfcc9d57864c5526018543c9de3fac3ab80fd9c7cfde719c79a63f94f813f86911e21b6de23aae07e77f13905af8f118b53bfb5c7c64225f2f12d0f16b82d6c18450df655176b1f4b804af1cf266640f7b855e2b63dad7ee4ebca63c450b66790c1845c484fb2bcd73eede97b8b722a96387cfe4f2fdcd50e35b4e7de29bc28094d7915f0a56673d668858ef90a58fa76993ba3861d73c10a8d37a88190ac4a99589279b31d156750c275b025e7866e69e796c037629c4d154b0f0435a99af8847d6cbae073b01965e7ae3a0ff3123d81e0ec03858824a3cac04a9c34e95989fd5c82d89ff40aa3cae21e04c68d344eed7bdd61ca92ef1c42ae40b92a66c55e41c0d8802acc4d226d0d684fbb2f7370751babb974c3dd3dfcd6e348a2c22e006e8"_hex;
            r = true;// Result = P
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

            ee59685"_hex;
            m = "89008623eb2864cc6d698bd707adce222f5e7f02f128282d42017bd892678c1ca0e93e9e92e9fb6f45a0a931e263d97cb2244180333b6ceb6b67b00d7c0f613979ce446f782f4639e8b56ed3251f118e4ae9457647169733332d012de38216f4bbb680dec481acf2ffafc404f969de22a0b6732f554212ce425d5582ee461513"_hex;
            s = "52c068fd97c371bf7ad059310286d099e9e1486d6bdd9aa324a51019afbc5b502f1b9f2fecb23560b7a414d0e9e6fca69f4cacdb5228728c77e7659139ba2de38fd74b98f7d70ab4cf61655b84be1473db8b29563f2ad053a89369bb58588874d8d49dac78a42c0ab78d5dc739901b9106dda53c670c2e0ef47a45522af0e3ea7d584c6d1b782469cb7e86b0df2ea67d50ac4dd491e5248974bbc3caa5523da1809f93656706b72f9d7d17ca19d3ee4ca5942f9f5da16db8c25aaf911d85b6c30066d42b7cc6bf33672323177994b95932c224a87a3b15c7a74bead04ca432e933ca26af1677e3fcd67c3ad3196aed8319bfda468b753db289f6009972fe0ac34e7cc2c0c9833534a88e79a6ba7177ccfee0012f174e7e63e63b8e9f6bd24133b2685843ac90aa83ef81b421a202758ba48cd95c46b52192bfa52242bb65a00a21e72f73a5a8f3100c5f8d5fcbc4a5d3ab17a2bd7cefc23126f93cddbf575f22e03c7b7c2e5086992f712bdbfd155b07d05970d8e56c8da399defe061a563036"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            efcbdd"_hex;
            m = "6cffa158533194214a91e712fc2b45b518076675affd910edeca5f41ac64c1cc358b449909a19436cfbb3f852ef8bcb5ed12ac7058325f56e6099aab1a1c984ca75f4ee8d706f46c2d98c0bf4a45f5b00d791c2dfeb191b5ed8e420fd627b43d08a447ac8609baadae4ff12918b9f68fc1653f1269222f123981ded7a92f1d85"_hex;
            s = "8fde6a6c314b86ef918ae2d2adf68f85e330a8a1e3486bb3003fab3a52017096ebe000a4a7e8d05df6fafcf4b01940f5e322b7c64a7fb5949a6eb356e905c96c6abd9ef18b4ea9fcc3836dbf6b24979b9e6fa6785e09db540c079a0e97d3adecf6158de9750df9598ae8e7085140328c50beb09ff37e10f7fb11691316db255b6e9be021bec7b0a967589f63d6dd7a43aa0901cc83b8a8954542a41284f2fc381cb5a6eb3625099c911bcbb421b35a70ef5275f2744ead1813873f1d0333060d9cf2ffcee888335b0aed2428362358f7d1aab34fffc11f27ab3cfb8b5390e7dfde1fdd33f2a8b8171d865bf40a8df783e216112b4d416b31f33cdd8c905133557b074cffaa14c73c087e6990c9bb7a36998459e4758ab07c85d260849c0be374a99f3b8b23b97fa5c9dd6206ed21e2bc54fc256e080856c3599772b00c4c5799daedb1a6674625029da3e17ce73365675c5f3a71398f4a0c4f609d4f4016f554cb2424e19c35ca2b0649a210edcb6eca7ac2b31ffff175b25d77b26933e52787"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee59685"_hex;
            m = "4621b17cd9f5b623fe73b5fe280ce9ac840805608acd6e41d55ea71132220c0df7e7c4159626f10d71882983f0aa2a92d11dc906c0b22cc028f4395d48f54e12894e33da0f614dd48ee114e65f95c7a7d3585e7cc765c00178d136aa99591faaa35ee6136d2e323ffc855c709c5426b32fc0aa0ac66e90c96efe84414dd5e79c"_hex;
            s = "33bb9affe18723767ee34d8e40982c735099ef1806d8720e71d16fc2d6617a8cf301e992b6c5fc567aa971285cdb372c1934eccb1e83a6597011ad091aefc40db52a7cce970e3e2eee817a727beb9e5d137e64606279c36341c4a7e7488cea8c69af8a3e8497fcbd7679462a1aa15ae4b0d8ea321d4f7c54c75dadc64318cc99533297d9f5bdf4882e64ede175f32cd20081f996c52f288bd56dbc63fdbba190f1167081c95e37c0dbaad3506009660a3fd10d992a2968bfda881cec2cad19ddd852ab579abad0a9cf43c10b1758867dc0f25317d630fd154caf9a4b057d2abcd933748c7d87686c7661dab7b5990f32708183e494b243b862f4255ae02e2d2bfbf00f13d7cc2be7e1f16c43c94b500898de9afc7d4aa8cbb56a4128ec0159a1568c0ebdb819f49ca06b0f0686dfd920d6eff0a3a5e1d913d4ed44f9da20572c132965a958a139207e8900cba4d6b1157a57a4414011b412888cd1935c01e630410607db7852c174dc32b6312d22f541c453ccc07f7689113013c367f4889a7e"_hex;
            r = false;// Result = F (1 - Message changed)
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            ee59685"_hex;
            m = "aa4a6da9f73b58f5326d587572aed18ed9a79f3dbc6959510349d2d8d3eee6d76ba8733e4c03a51a9d9d770dcd3476fb7a03c807924f6ebeb83dc691e9e654895fadc136b5d124e94d3e8123efa98f4cb2dbbfa8204d798895f6a9bde8617a524d02617b7aca5ec809f97f9e1e34a5e849d78a0aae8c0316631d83431986e19b"_hex;
            s = "950e4924b04152a1bfe6f36351d637ac802b08344c250118aaa7e8c414f39f559761d458b7744d952edf9851197b2465c46aafa827ea0610f85fadd7b41418b04c1e335fa084fdc84782e1f51f90df0eef306d9b9361a1e610244fc5dc609a9f82f670521f63b3b3ed8e1a48a630c55dc9f73f16bf49478d8410434dc0da78ef840a4bfba56d5770d084c90d7ffd198a802c8b90a8700b96a0f2f50c994af7d44b3e9eabf9c7b5d9d6b7da0d64b623293b5b7e2108d7085fe7f70b29b98c3bd575df131da4b78a50dfb6392d0f37295908170d4475d7702ea3abce584efbd4b4e37ab760c1641548a79eb7f27c69eb4c78113bc0c22ec2d2a9a244ee6fee9aaf57f71aa9dda726bc0dd580673ff2c69922dde0b4ebb92653fd324077040fa00a280454ea879147937ed1f53ce26422f4677e0125cd49c2bcb9a88767e0e67ca51f6472de6cf32c7b0ab7bea63253d8fa031a938621a026a92384bae79594a8c9bddfb06fa9c58c5a4a5776cf65b1f5d346da7deab2154e45440b0405d1052405"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = sha384( m );
            l = 24;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA384 signature verification failed"
                );
            })
        } // NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_2048_sha384_mgf1_48_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_2048_sha384_mgf1_48_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "cda6fa5ca76bfe0492ec57e0a3bfff7272dc8d1e25ad1fb338aa050f02c104e63133d6b5b7c4985ebbae9ac036a5b9c03074d60aec8e25baf392a0c430ff05b88e948805d3dd74511d8885250a7b574215ada015c559076686e253ccc96c0815b1291ee787cc3363b4f77d930eb998d7c582b24cea9ce21de9722791989863a27ebc80a00de5bd2f9228775e5a4ceb054d58c9be36a054336971a13642dd9510dd696aa268db3aab2299d5d88f8e562434d1427094d3df8e72d1ef69b4ed34d12bac375223b2a25cf227f735f816e85e17239304769a6082154cd15899fc1eaefb69b748a3e5ed24d38372597de3e4e2a27b951d6ac7db182d6809d8ff511b7f"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(48U);
            {
                auto m = ""_hex;
                auto s = "0e899239050ab21c102394e6d22090f51a225112a73257413b7fbc9dc5c479aa21537cbe2b126b69b7857d97c58b5425cbd67b41e8b17c37d6df0bb0d73bd468103ac09a11ee5edaa42dad5080765b539921c031994cd02b367b586477ddf45a280499cc31d5f2853874836c0ed0c220cd388e698d94f10d20f696030af751ba9ebe44a19341a9f539ceebee0c0da6ec6333da9c7bfd44b6e48ef29bc07c43e9f0d829a888b6b19dd282dbe29e93d80c46a6fd0416c912967319b5c967c85002654f75ea03f5ad1e3c7e5c696c01d0bbfbfbe22d3a5ead904c8d810b655443da34d76e2f71ff58401bc0d93adcd38175c94a2ae6a2b4b8066b53a9fc38fa5740"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "9b45517f6149764531b362d7c6b6261b77fc37ae0b97bc392ba27ecb9bbb0d2db931cd7118c86727202333558fcdbf84464595b31b28a526bf7df2582f40035ab5e1c3896337ac20f137568a52f0b64bc544531f00791a4593ed2182b82bd71366cbfb6cdc107c79fca7c3aae679e98e75b40b2034d9375ebf750b3153a97d829bfd5aa39c29246bae601c131238275503faa532f0ee75492b7d7b5b4f55d7be619f269d80a3feb414aeb1f36487b0e46b870d4756f98cfa50d6834a7cdcb23890821416cf0c8e82f688aa8e46ef8e3179e5ecd3cf157a8caaa70b0f4074294746e41b906d0ce85e6f2485cacb71bd63bb365eed5e91c9af4589d74b3f9487c6"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "54657374"_hex;
                s = "1ad8f3e3e3327398960ed19275c2cdf187001516a6116b7ba2ce301ac4952f1d180e08731eeb14e5e94d49ec6c79a31cae6d256e32f01980cdbfcb34feeda260048c371358cbb70a73b5da7aa245a83372d543383a0eeb58e7602144f70e7858dcfd04592b2bfc5b83ed58170bf692d00e546d8a734a726df499816d6e2829fc7028850a2732a1261f2b8448b3020d29b27ed1fab22c932ddf85ea7ca9bab730653cd59505e0bfc1344a46e6f9dfe6e68f98ae2cad303367f598b8845801c8b274117d28f8393504b7a32c9ffc64bd42c2759f64157c3f8033e67e5285e94ff992692424869ed0d24a9d003670532002da0c2f9df524b1bc3b23b9a78f5b53ef"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "9bc2fc58e6db83a04d327571189b835a63df65aa3a41918aebd7f97c069cd499978370e4a4e46b1c27165b51f703beb3beb1c0a3a83ed6613dc840b58612a996dee3a10e1907bbceb5960e4f7a0fa9cce69a3ac34cbbf10b404b685763ae3fbafb42f125a060626e1136742d4ccdb469b3a6b58fbb4cacd3f5fe88da8838e2d2645d11618067edc8eb6bf6f96e1055122cff85c423d113cb4e9e1303c268dd5ceca5a201bc17d582a84ffc14f7f5e654a25a89486d54991f85bd24a6112849f38ccff768d1ca3c44e3e6e6a23e177426d26bb1173cba60a7938bde64b02432db83fab73c3fd4f10578f826ac3cea04172aaf43d60455c2632ae06c7665ef4537"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "4d657373616765"_hex;
                s = "bdb7c473f439b9b67e0e0ea245958d20c5b0270a0440d1de803c45c23822a09ab49a95394f9709d6ac70395a5438710c5881e645edfeeda27e2bb513382fbc86348656126f039eda65a2f593fb911ecb93389f6127ccb7b4048afeffdbeb07f46a97e32c8d284947e115d266574551b557501374c9e47b93c3a0e7ac3920e4936a9565a3354086a4849b256aeeff26a7c047c8e8e98562a9c466eeb05118de3217f37b7199c6f332f69fd6d4b4ea4b50f158e591aaa45c2690c1692f84f82dae5d8dc546fe6f0243f69068397cafbe13966fc5b291b153701088fc1185beedbf5c60f088b277ef86f9e3b7c0c7e0faefefd7ee554a6f656111a8d67f9af8d063"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "61"_hex;
                s = "405b3418499192edb469565e94c668980e9fbc718b11159bb4d884a403bb0177327633b2fa70a3bd127abafbc2efbea5504235592eb508452a11fe94eaf795af6f8456e2dea9036c0a4ae2e89f26076b862d74346ae04cc6e88b002ace3cbb5c0b28830bb437cf8d91dbe337d3c3e17b510f4c8a2c1d02042a7b03142b2e3fa1d1b03a2945ea1694974d081688d865e685278d3ea017d7c638d69b32b4acb8bf90fb0cc86156245826b1353c927db0847d775b710998535a64c8a4b1e805a783733cb6fe31a0ac9087c2fcd157fa81a68b2f867a35d61d42f068197dfb137f595e0e2ee1edcf27740ce4a2d56dce68ae1344fca8b2fe29c80a9fdbfd5233449a"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "6bbc592d5c40c195e4191e0c02dea65d2cd261e6ded89907cd373eef029aae029ea71f2a2b7d4513939a309c1db2dc8453e1902aae4e65c3d00b112931873b73ebb0cc6c2d8a6a7fbdd4185372423618f4b83a796d6585e1583f37bacd83626e8f1d86f0147fcaa051642f04558a39d1c7d7fd62f33eb6c43a1009ea4e15863d4c2366c6448b8e47046ee72d99173b5554a1c728e9503ec4c4a196e0f05ba891bf92cb4535d65882a58f6dc7b5270fe78140d9fd1e849f9f7e591169d0e032dbc713931de5b4bebf54a16649b47fa4742f9d60c1f800f53fdb7e2c88c9a14d1514c781b22a865bae5090ae3d73360567b15e51b3325e94183e253203fa367089"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31373530353531383135"_hex;
                s = "8bb2f8775cef8652a9bd5f287327a971f4a705a913dc7eb7d80ae418679270a8ebfb4a3ec56b575cd9800d238f7d04009b1f27ba522f11b21d1f92e6d94cd7549a7bf9463d4c15fed8277b4c1c63235e91ac7ab45c8c7efe85802fbf6db3ec4b32fef606bd43f4411cfa272e321c580c976b0b9f996cc874450d0e8dd8d4ba1ff71478816b313d86266d21a621d35babd3f970bff8117c6ea6d1922b5bb6f0b0928d0fcfd42e5066ccd8932c85dc3e674bad74b31ce69eda6037f4a0df98c882613fc12da9bfe29e22b4deddb87deae2b7d8c7ca42f14c746521da7c6171f20b091e5ffa2493ff9ecf3e4e30c188778b285bf1f2d4b10c537e371ef91f282520"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130333633303731"_hex;
                s = "71ee3cb4d03d59e51a043a226a4ee748f8d18fdcc0ecca2b1ec2dc06dfb1c733cfc6872a4e821d4ffe2bff7c1d774dd92f9e68d5d51ad20caa1190cd2c961f97d9d436ca7c7d86673b819c03ee5cc8a8a9f0e751df0fdd4c44d936eea42ec38df87bb675f7bc49bb70c7aa18784f8e5b8820390ac721c92bbb749e5964b86e73d834c073b9ad28642755effb33d78cf6240a777819574e4ee97d3b396674feaefcb1a67a3ec78aef914e51fc75014ed84441de04fc8f14a3a72c6bb03343b2688594aa53566fd55f993cb761d5d6dbdfb6c44381c72e4bec68ebacf9a5a49044e9796aba31bc1e45592b810f729abe30795fe5573ea654b3823a7b000d616382"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333632343231333231"_hex;
                s = "bc3a0af4e86072ce7cc60fa295e227fd124677b036eb6698c578db7eabe7623c9c0c8cade95a39fa6a446a62767f16b2f00618615e5868d6235d2aea6cd89d202edf3b81a1acf688556944656fe15500039726cb799ee907cb9fee429caf734ca515e79e50543decd6e06737934f402cb8c6bde0d6c52886bc40f7e13394e179aa82bfd61de5ef71d2c5b98507d7ecbe6857d84861d3ff0166efbeb3f38599767de29002d34afdda00fd4e166e14a62e24efdf706795800178f075ade248560615cd4523672af092373dd3aa9e146cf4df09108d9954acf11f97eb414c8018554cf3749aebd652fd0620b1bb385a12d9845dc77ad577c025f32501284827ab66"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34353838303134363536"_hex;
                s = "5590b1979756b7743e70ed479ee9d344848d17b1293a9569596c727adf2f507c701415a368f5e4ec25e4e90fdc0bc8df31e782ac749137ab62171fff56805585c79d352b3712e72e86b337572239ce0feedebce28390dd52d51271bca8363dccb7e6318a18d93cc1664bfdb59b3996f0f03721a4a53139ccae1f7a11dc97e699f64a58db75f013eab501a330b58ea4fa3986a4c6f01f718a88125ed9cd7114e2d62cef8072e6fec67089e45034f72e2ace44814019a3c18daf00d2f0c2b23f7b8f0712ecdb28d7f3dcff372917d1b2ec6ffa75fe6acfa563119f483d23c7d525f65643d88568d3795eda41405d6d6fdd669d3227b04aec5be6497dba3c47324e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313436363035363432"_hex;
                s = "43262534884f553a3ef1862dd03bce94dc59e1bf8df1aa83100c5892ddbb1777542b71d1d3114c3caf86512876d3beba35d832ce5f98d5f6158f7a0ff6edcca47f18397a66ac597550829ca7372efb4116eab1af790d0beee54d065050648ad06823d628f61528621dd584bc29fa7a0190a54b73b2b42ea40490c272066b7392531d047a68b9a38caaa85707cc563b04a6864d16d324d651d00782392a9d9f90125755e76a9d6e20f906f7bffbca92978f1b8b0db1d8100f27b7c82620fda2f8384cfbcc71a8f499b85873de23c13846f2981c07a4248196c6572f7d3f9e3a64cf06880133334294600f35a0d824cf4e08008da7cbb8e41ee791fb23fdcae0fa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "333335333030383230"_hex;
                s = "9c225901446e32b8e4d4cefa95225088cce82fa7a5c1966e342e3ae3f9d9011a88c47878fc78cf58d592735c57fa58d015d2cbff3da6b8cab51fa70bd0bd15fc9f2f9e99b0fb77f2c02d4379a3a634bb93856cc5e7c8e17c314efaed43fd858a7791bd4b447e1e1af25ddcc0d5a9ea16732164195105feb1da479cbe87bb794ce399b3dea473accab0a12dd437815908061fdce81dbab01e8e7b7c1c137bb48ddca41ec66b3cfb1d8f171848e1983376435e47c0db8935f117accbd1c8a78d83e51998e4a6818d7dba13ea3c9c7c67919e8f8919e87153af2413c8af0f6776e5665a92fc22a614f65d0e6b95470fa3a88a68327d3a24f1c001d1081689161a9f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36333936363033363331"_hex;
                s = "368e96a72cd483dfd5b2bdadb2f7f37e22a1b43c7616e74b1e4f068addcb2bb7e0a56e00ca749bcf1f10faef7c8b23ba1804b1b6a667910d3f33b4d2e9a92993376db14f1d1719da419099f581afdad281ac965d88a96ecdcba7693cbd6e39f9c07acf722c13d7392ff5aa6cd1732e3f129a0c6d4ccf1ed3b2ece1f3e226c6e73667f024c96db7bfb91f237ba825d6e42774c0dc1316873512c7978da8a613cfc78fc76e0422b2578759aaac7a5f37142b312834291921898c913ba5856d916d0b9906e17c452e24902f1382dff37a461edf8556168e21593ec448f5e0715e6f04d553faca93e3566245d73d907e82e8332cd48c842b49208e9403bf49bbc464"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33333931363630373935"_hex;
                s = "7ce56f2efc96f000cfd0807363f2e399bb2f2a3a925819ab22e36bce5cb5921b9781c4175f4d719aa29b7feebb6a627ba02936795216966df6964a349b36f2f2e5cde1715ed664d9c8f51fd5bafd83f64471f88156495d5158cb9132f53a012d0c397ef0f8bcd3cc7fcc4201cc38dece4f6af65db29b2dd5d1bd164483b40ce3bfd64100b509cd76ad28093c06c3827abd89c6767a3e5a89d7614f658aa2ee7fb46ee59e5a77259c944e1ad9ff7091e193753c377557cf9d40d100ce0565a0d1d9cd140698bdd1df4d92e60ceed46433834f571b9eec29326fe2b1aa404126419303d07cfee4f3e7fbecb215b94ae451daf9fb3c02c4c999e68996199ac11ccb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343436393735393634"_hex;
                s = "c4b28c9fb75f97072b203df5691dbc2df7b592feeefc99e43147f8e36c3242fe8bb4dc4bce262d5745d11cd9d8140f3a4932242d3010855976ae263e83c3553a01be14a6dda43440ef5751577c31d3baf24ec4d0794f5d94536c3b5ca6bcf3e4ec6a536765a5b8b0699328b3d78f3ee81ef581c6f665e8859152080a1836b3a041af03454353451773e3fddb994512cb3991f4fc773acb7a9c9807fbd2d811b6554246666b5bf02dcd0cd4bd715708c3b3eeee37f4f3ae34bdd9b6f314c5b1943794f6f79144802ff8467519e82923c3bbb8d5d41ff7b0eb3bc4b6020d19ca953248a25b5ee3fc68ffb48a18e6d482f2896d6767c31cb94c9c4190f41e3b1a67"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35313539343738363431"_hex;
                s = "8c77b607266d6f30dcb7fbf6cf25fef1c4158ba635b40644ec4b62f7034047d547ff8c9632e86f3bd29b533c7985a090d45693ff69cb1d48daae484b9603101b893b237dc8eea52cc9283b88cdd9d995b2a10bbb1319154a0acfb49687ef5447f4f3fcaf8486c4b2fff359f849a01689adb4ef10dda76302f89b38fc4166fac5424e461d9c12009e307a38ede757b3fd7dc4a58c5a97506e7d4c984582e9d6f32dc2a5a7442d0f8e58d6c8efedbaec22bef6e838449a4a49f058d3e0b2d5225c7ce693588928ce03ce4e92fb2362eddbdbeb8c1edd5170c34c41902e8bd38c66c8e81048f3d4d4dee8c3f60acb605d6134f5c83ebc18dc3069fc6bf89e14bb2f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35323431373932333331"_hex;
                s = "128119c616f8312159ec6f19f45039005d1aba3ce8d3f14bab6bd898b7c51f77e3a0921d608571f77a171446672cfdd1448bb56b5ff96eec39065045ecf3c614b2a6d03239c79c94598746d7b0390a6d3b95b26b0506a91f7efcbc8b75126da2dcb3e42fbb602a809f65ac6921f25ddefca21d2f02d17a6492a0d21775e2ef715709ee58ea6b3ab8c9cfbf78c252f4eef5ff0cf25cb538a9b56981a12a83f74d0f8af287bc99bcd97db6d48938ff5ecdcc2eb00a73245a72a14c91d6d96068c012e09ccd5bcaa825121779b902837940d231462b70c8b2612df7d602ae6ad5c33f6441f5865d47a9391b0cd482e1c6f27797ec12cc1bd1b48499c4a7bf16e498"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31313437323930323034"_hex;
                s = "4cd6b991bbf9287cd001106de4a599c7f6be3f836b737a10484c906fee19bd9705ac47b2ec869ee151c53ab1b0aa353bd8d6f9f8eea5575df0d760124ffa4346891a6a080a165c90c653d089dee1c7d3e7500c4bc9c3f478eb0d846dcf3b9adb9986501e6ebb6080585ef153e9c0564708eca80c8ca5be2e4e1fa546db40aaa5b60567612c9154ae842fcb1993580a1769c5519667d613599b8a66a1b2a0fc33d857dd344f0b1cb9a597d98f22b6290a7405fdf2cd7e83b8cb7a6ffaf7e0c068e1bc985851489d8598b951984f7845ace8bbcfc54801dc166c3c36b8b860637ced6afd8a295fbeaa220ba2f295c2ef84c79a20c9f3c47e8aa8eb426d5865b0f3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130383738373235363435"_hex;
                s = "665b297bc1d4cc79b2b0991065b0d828edafa57efa345e05cd1ba9a7f6d174f7231a228bbee2e4ce71435a6d38daee306182df67af421d4ff62531a4c69d33cc3abe803f58ad5fb7e0d59f595fbb7a38bc6239f93c26c8b590e9b24346796b6799c1bcda054deec366b61586e8764923052e55987588c14d903809ca215a189d4e2f288400403e9e65319c92ccd0e43c5deafd8497425f81162c6b18cc2605258069028ce02536aceb43df075b79f064a958d0f8e5c192be43fe2f9e16dd9eebb5194145bce906907f4c36500d5598aa0fb0ca360274956d4c8422f4173b4c5ae2860fce6b9da4c76b2dfd72eaa9dd98331039e1864f0fd3fdd673f7573d05b4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "37333433333036353633"_hex;
                s = "11353584dcc86815ddd1863d193311a3064d70b8df7840bda599b25ea0e98d9d8d2e45d7e10153cc6fd163fe279c305283d43941b26b0bac4e19e9f7f83d10152d884ec0dcb5401cfc22715125ff4a4db1d999c30edf10dc987c1047e10f22a7738169422b4d50842465af248f642a4bd65c120cdfd7ec3ac4197f2209f6a27b261e7c9ba5725c0087a0ee3b9d70d502b495b73362ba140f4ba927e62647c5a1f8a33d795cbb09588ce561ac8cd9abc700dcdceba3e9c03a57ffaf23de1f98270484119e44c28aaee94878fc3fc07f0c2a96ebd7f8251f85398401f68a7bb3db331d2f2e0cc23f0739269726df4b37a7c63a46b42607bcfafba75022756adb89"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393734343630393738"_hex;
                s = "a02aa6cf969856528ae72c68a68434f64c8470b0097ad1cad74cb2f19915de98c89f4dc94081d40352ed9b4e937c6bfa5a18fde1f9c21629a5ddb070079d9f535e550109dd74f7db232d92da39154d4c4c2241a17483f55e7e6ce2b31b3ecb2e96658e77f3e3841da174074ce29c544dd5b8a50fd5f16aa14be69b4733cbc1f9d8f2987d296b1b4588cc2fab2314e4a5bd49a19eee49897031b0aed90adf92c14730b26a18d274779d37f1e423a3c2a1556dda0975c1237bc017e655a9c213ad20018380a20f499114ba235ca09406d20540beac42a4add14bfb79affad5c92b95c88e0fe128a65c7c548727c64371abc80cb61768621b32d308963867d9111c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33323237303836383339"_hex;
                s = "762cf6fe48a4bf7bccb126253664462f8020f397b18550dbc048c8461c0795f2567b3744447b88efdccf0f7f5803e7ef34fa69504a7e5785f887c03ea54f8a93b75c45b7934b22855bf7a06dd57b8da327572cd2c6c46ac44bb0421bc48cc5899fe7b2ed74e40ee0108b96df7b07185320fc327d80608c64279b3e2bfc184db2617ccb5861efcdef11a644412e6cbe1025216d5d12568b3428fa2372403f855ccb3867b584dbe881654e14d2ec3fb999df2d02f3f4838f10e006993aa8f29be68a487165ea4844bcce21b24afc1dfbf6825a69bde365d6b57c4399a8ebdd23e27698b6e917ea39ab9ab1e392885ee578deaf0b2ac6dfef40a303feb51833e1a3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323332393736343130"_hex;
                s = "584328bd8526317d453bc6c809b7b6dc80dc5c2a2b2fcc84fde42ef7db40870c3237ba8a388c11cb79834be24ae012cd0b32942348caf8dd59ed7548b0c99b70e1625b979e828ddc74cd3c31df16dcabb02390e8ee397f02b5e72df70b5d5a1211dd7d361b0d587a7b94d33e02cce3beb23d9bd75d5d54cfa864671666056fc65b73417c3e3653e65267929da4d2efa30df8e71c1ea4eaff7f87706426b76d01f1df588137498bd32ab55526f70ff7d66e10b9cc38fb18522039365798cd8adec918cb16bbbf4d5b09045a599eb492a96422b77c22fdafc33c11f4a21d5ff409e257c6392e9d6b9815a12b48ccc825250e4fb02756e804b9be539d56e0b6a68c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3934303437333831"_hex;
                s = "7526dd7e5a307106e9746db9b495d0b610f038fa4da23c09d33f0f65648d0589864596c47920893126544cdceaa3954322963c978cdb45fdcd8a9981fdd87ef76b9134d0ef2ecaeddd40e8302b833465283f0394de3c1b81402aab702499db078db008d3ba849a7809dd8309a0481a1be858c3707f6a28483c092dd4dbd7d659f67e4e59e92979b3b96d3fe1847709300896e3bd9d66b869a4c9a6bcdeb2c2fecad0fa4f90b910aaad74e41d30850566bc8d0f0487c6c33cb30a2d9583330cdde767282534b3eb403184aade3f1264a1f373f1d62f958930d3e645ddcfa5e55dec0b904e1b1ec11dccccbc9bfe50743f3fe30b3b3d0b73409ab836e4814191ef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33323230353639313233"_hex;
                s = "250985e3738fc4f08a6b6da36179b72394797501459bfa07bc5b5ad40bf2d4884c4cfc0d1ab34ba934ebebc07bf8a8fe78fddcd5ba496d126de4001f7f0de14ade404a3795f812aef89ae4c5282d41336d2fa5145c9551819a0c230e68856be26ecf184f41559098784425f15d66adf490b9b1014223480ecc16ccf9ee16ef5aa7f7a2929cfade2f0f04ec8d07cd8d744b89b39eb539e92d801bb3e22255933b284d085975a09c232225813bb0a8a41bd477a0596a652bcaf794e3b5f00002d5306b52a8b552472657baf9cf3a4720b3c5816ae95b794b4a79c6021c4ee65c87506e631b318449a319e21ffa6c68cf914ba54f32698322ef5e63a2ffc0f15b4b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343134303533393934"_hex;
                s = "5e48eb2d31498d1e20151c17ec34853b678ac6a55ce745ff2398fe716725a72882f10e1d78c68b5a2d838804de43ec5d8d168883cd4abeee4a732285b861a478deac65598744d60bd791e13454853288768ece8113ae6481df48912772bcbea2aea4df51accbd8c738f6b2f3e4e35851cdb7e4c331ac033035f83c74c6dd29354813226a29f536d8a4b1bb8e5bea96c39357af41b587dd2760ae52962d55e844228ead7d6fc7ea38468f801fa2b8cf29e194f84b0e89027e0343eca46807d6391571dcfc06632a89f6c45e1b678b2fb8872c393a0c3f5b69b9c825fb45f9ae77e68b4bf41ed1d0fb16bbadd41abf134514d5d01c704c275c42c848861204f165"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31393531353638363439"_hex;
                s = "93a9382190ca466bcbaf332655f0d1c6ef8734dccae0653ac6f1af879ea242882e6d18a364e32845e0fe2a322c0e2b62a6be540fab60eaa5018f7e7de7cc08512956ddc6bbcee91e300121e45621340da15200f37103eae8da6854861d0dc8e6fce26a15fc6caea2b09cd068a90f326ca064c838d224a1314f4e27bc1924ccfabcbc36cd01a015189e0cf54215d6690cef834a753a217f1b1e511e574c70f1221f22c859789321c790d911360f94d25700c567f5b72dcfd12cc9cb962504ed10508bebefc6843a4833747670fbe83c345118881dcb43e280768c8dd0eb552030c72e70ea92986f4b32e6a6b9c5885ec3fea8db60a98646f77ba666e60766e7ec"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35393539303731363335"_hex;
                s = "29aa4170724e37efd968b6470641214af9341e7dd5f2158f6b75a7452616a7730b41c25c25eb201a3e01c1f89f92658a8f591e0cf5c12fe6efbd8fe1726cc0a1001c0a4620100e5b05fbc06a89326588ae32186f8e699d3eb45ba470eeff6b754268f1a2d8e02d50c679003ac1b2794a4c251452a8e3ab1d16b2087497b0531000ffdac3a3a9986aca8f3a69ae993013dfa8b16bcb9e7c3846521219a2556faa2cb54500aa331fb68a1a05e2ded987843f05b132d9777e79a3bc44d03f7bdb7aee38f0cac705a515539b8ef48312672e143288401e9586521ee10c5d2dfd8772b930e8e30c79bb459bbfa0511d6aacc5493a6c1b3a396b7c5c28456b8cd8bc8d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323135333436393533"_hex;
                s = "be5c0dca9f07fe74e028fa4c309e5dcf429b4a7a666f72becd0510b6cb3f2d874f193ac3e7627fe5925bd704ee1574dd09e6dd64175c43a7f675ef35f40ddeeb1680921f2e0596859c28b4b9ad2fd25000d6a4dd19003fae03af8750ae17f3c63a52cbd4a6b03d01e254e6e56f6cb513904de3cdca4496c9a9be2d04afba8a0d97ea6e23cd56346a04743abb895d715ba9c4a4f54d16297461da78877e9bea213672983a6634b8eeafaea5d2c0cd242a0007e8099f3296889e0027aab08ca7ff8e93c4c93ea266ae95e55b6bd740b313f5a1aa837ae93efa0f72ecce5c213d9929b54447870b991ec6f13bf3845aa2550e2ad930239d0d36aad8076893b287d2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34383037313039383330"_hex;
                s = "29413a18c9b13ae5c15771fd3a858f615444b37e05b3f14b110f72b43ed16772d9d56a6e2371b4aa86763e1d03cc90891fe1c244bb282bf60ece07fb6cc38b56ad6b06744a1cd10e5534c299f3e53604a030332c01a2ca6ff14a321198ee4e531fb488aeaf54fcb16f9f57c9966813ebc3f85c239ff8dd36a9cbd7d922763cd1373bfe8a2406e139dc14a3afcc3aa56c6b2539f710de60e2f1ff05cd221ea06f20fa8a7196a6affb643192c917a8de8abc04458051b518b645e8eaf39de18ebd3ad1baa2567854c526e48d80acc2124b0a7f3050d622ccad0c612f3f9d7b547663e76cb85acbeedd1d8a5641656236b0314195aab7e63780d0ded54df362093d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343932393339363930"_hex;
                s = "cc665c92ed6a2dd6f3fcb7b65e5d305fffe4b9aa63c6d7b1469e60a3342b3d2d80b966fdf1f74001c3698cb116e763968b85861b67aaab6dae8e7f732573ff3cd05bb9d6125b7011270d8ad01a337b7b0488257657e1644f2a17117eeadf45e428ca98f03029277229327e09cd22eb831bcd95e77b7745dbc0c7b1e41918a71a3a1adc7e351a9b826fb52a8c5eab76b200583373dd25e55240da7376199a0ec26905bbbabac314139a88aa05424a1684489cb90e5b47c6f782f0f212148a25b8fe051bcf6e331eb4fab0353ef825a5444c0ad2b704d0add66b4a1743e0928c73a57a43f90ef5c16297ed3c5d5fc27250cfd56faeb476890ed4b159e9052234e0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313132333535393630"_hex;
                s = "8222c942e78f5d9a3ce45c75a295f775c3da9991a7cebfddb9ab9dc77f3cf072e4d56bcdace128b62300f44d8eecbed84a0ae702405962da6c6cc39e2d11da321052659cdffaeface5b4a5c597845ef986fec38c58c0a9cbe1160544a0fc018637762be340eac3623bb0f2573d25eb68dcb13a1bf1b7ab0410bba410746ecb5cd61f2bbd44edbd80b87f7291ea90ca421cf71510a4295d09dda1b10d11379fc4c4f7c187eab2c9ab4b97c9e5cadaa5d6a35d01d16e286321ee773d14148cf34c1993f5fd2e4e061039e19c513ecedb2d10da4820f882f163edc65ea24a29b4880e0125a5fa3a2f6a36f595043aca8d72dfe8c37f14147d1716a25fda97426650"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31323339323735373034"_hex;
                s = "213e90a8249214301608c6aa343538a6e08802059f97f96ef43e091a039924245d0c3e129ec3f434dcd6e364bc8cf05a912d6d6b3a5eda7340f3956c7ea358c69839df0082349d975a90339f2813271f25d8148e53a3ff925a701dddd4f8946de48ee2fb8963045878229e9c8d1ee6ccc933dd655de303aaacf456888f393e3b0dc9783961299ef2f0ab8fc4d684c5c1ba1d541b51a9987d50d596a0c6ee8e2c993af488a3f4dcfc406928d286259bd5f824f73b3402ff8d79816d9dd40d593db7c47118c10dca94a72d79d5f889e380738800f7edaa8f0c12559f19aa508c66699deadd5ebc440baf88efe72743b77a110c00495002e5a0a0a431104fd48419"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32303831313838373638"_hex;
                s = "45151d8907d6e48cf41856777bb5240c4328962a3d12b89d57145e0484093c5365309d0b8089c71e8cb8cad849e55916b0ee34cfca118f853875a8e0c790f19a7aee1832ecbddf1d52254abfff1f08e79a77dd7b5fbfef3bfc330e5cd0c8bc934f6a0f7914e9da7c2e780ce2530ce1e6b3da12deaf610f93df7a5725e19df23b5acdcd1889400ccf59c0b6c1dea12001aaa6e37a50bb604c4e5017abfcfd903204e1345fc47174f5531c233fb2b10bbf9ba67d628eee0b92de59cff6e2346cd4187c1bc4cb4617503ff9413a0e24091212a8e891e105ce247b66a882ae501fd02db662973ef903e434076bef13fcfafe8f8da0de3a8c749a0ad1cc36744febb9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343534363038393633"_hex;
                s = "7f4ae958f85864b947a1b07610e32245eb35702a9d7e91698c5211630f42d013c77b6f49bda09c12a91eacfd463f30462fc81eb45233df76682eccc10352b12ecadc089b46341f879cdb5edb7063eaf3fcbac9972ac7a12eeeb4dc39d6a6f1c8c89593a05a425a4260d97c0aa819790f4614d2d806617f67d6b3c1c28e8fc7f215372098da5664ae24f60bd9e7beb69bf0ef47b3d3cdcb16544b6e267c2d28c7b028cc2d131ec6e8e487d5fc17c283491694b476a019e831faf5df08ae61c3b046900b442e9066abb12e6d51fdadbd1a229f8d50f7272768487d09acf522e0232f49d4087fab79743095351cb0c274c950f32112457dedac181b6da12327ec1e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31333837363837313131"_hex;
                s = "5bb3bbabfbd9267155d23f4360073e92b78563bb54440e3b366c578298ec893ba37eb5fc7cb591421243d96c8ec682974b6d7cba5bdc140150e492d3d90ec84f3e7babefc12b2b13e195e1be31e7f064a9a0a91d1050b9afe0b1e1db058c13c9b6241507123dc8c08bf94216d88ed1e682e62dc791c80825283a3e75bd6696492ea8f55b6727e79925207e04063e930b63add4623b75ae6395b53f1704d77ed68b94cb7abd0d4c0bf2c8c76a63fc12f34a6aa5bd3577e3ddbf24cc7a9dd3c7ccddfac620513b001e4a82a94a3e7233fdd4e58f9c7532e0efbece025eef386c4dfa0e1a5e4c32217c0e6c8e48de0f61c972e6e11a2d3afa972905e8750c89f17a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32303331333831383735"_hex;
                s = "cc6cfc1296a7bd603533e400999a41da0f2fb17d091efaa5d06544a53b7171866da835e304f923ebb8520b9a972ed4ad185bc2f2260687b74c3cdad2b3b3d0603d802571890de9e7cd9751050f07bb463f6ecc0b3963b9a803a05618610d3f2f1d3fb5af9c8cba3a9079d48b9c6a84cc829ddce3fba9eef0224ed5065609202160acf24c751314ef532b166873239ac24a3a4fd9288a46e87d251d593e949e1061b1a5cd061c616ae90ab4681da48c8fe9245d146339af1d97bf099d3c9aa9a729890194b12f4cd85fd4b69f36d5311b255489c2d8db2e394bb6b1d0c94396c7ebe9a06728efe59c12ac7bac0aa7e89704439019764771c7183ef4ee12b2f60a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323535333538333333"_hex;
                s = "a53f216e595062481e4fb6f89ca2ab703d691fdb3faed0d66018e0e0987fd5284e4c41c02c86031a61db2001b39b64bd8970fd5d8077aa0e7cdad0d9c4b2a1754e57673c2f691f6369d362bfd8002920be007f8627e689aa21e7fe058f95c5c7957a044201717e807def135e2e2dce27291d4130e1660b4c6ac7927bf94843f197a60497d17400445583f3f1001b1287c280be3f90b4f9f7e77085bcdb3a97f6d4f34482c042e4c9fb6f746aeaea9b2e7029747f4198be26f5b6347a5532e9e0d10c72f1241ca202a57390e29215666f1cb9ec0c8e8442b6c477381ae818cb1fec9e3c1abd98d7700f9d430e0a61913c2521d60904c9cfe949893a5cbaf50190"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34363138383431343732"_hex;
                s = "223d92b5a2dbe0cee91aeea6f78f16b4fec0d822e078930b7e989747466016dc4489fb8d07a891b4493deaa93334856e80856ba0368afc4fe55e969499a57b4cc7f6a0b2c71dbb22b35e7a2a28716e14b88ef2825b0f4979b0e4b9a10cdc57c415feb996f7290a15b03a948f9280c507b44debf12aeafd36a2b4846f5676eef0a2efe4c73b518f22ad2fc74a4e3df677cabcec2f1f172ff0d2a3e5a46f33e23ab3a95b3d7798c48d0ea4203683daaf5745e9b55cf8cdee8275251175280fb6f8e7e3d0f10bf031ec0f5413ef330e54ee7bd44c24a07e96c9721e8701d28cda88b5e2475fdfa093dfa9b0726fcd7bc2098f195966d95b51564c0439e691868ce3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31303039323435383534"_hex;
                s = "a3f569d64f55913075974d2e6873c36344d905d73e64488a6de39dac2f65308c3a51530302def88d97c57ac51b663fe66c72a3136651090e95f17d4a54ffad588393a095f312cea4aef429da42cb6e9c682da12fb08a868a88c430c1ed9422aeed56349cfffa4ab13414f86e36d2ec1014438622f9410e99f993635e8eb3396002bdf6944ec29fdd6de3a0a6fa0d4567d3a0fb05ccb6a10633901ed79922b8a90b06cf0a172abd84d1011f190299144f18af7ff02a075d53a859fb040ddbe5371274207a250f5425ccdd31234d697e51e852132e8235c3112a4217aa57955564e77415f8fcfc3e2dd8eb0fb89aa3af8fd6c4699af04203f2908be7565108b19a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32373536343636353238"_hex;
                s = "036894865d4491b58d9afffafa393cdd927b2a087afe8e51322be7d8b5438a15ba6ab8a833db9373de0c525979d19dd514551c5057a4a6f3698a096ea23d02ad45ef143963bc6d248ccece325b754acd7c41697ee581b4a67b591071f2461431e8df72d6496d094a651c1b36ee182ba727bf48e2164389e1e621d454c66e5d309e09517a7eed8a1a4b5fd9a016eb59fdee8e16002089611b480bde039d292af0e80c6c839ca80358f239f4cd999dbcff9e1c38758e60e913428e0369837cf8fced56509216d58c870fe261df3c5b68304ee594c5daa4c70079dbc1e8d6aabaf3649a061200a8d86a616632e1a316122cfabf5baa93c173d358ec0185bc3329e5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313139363937313032"_hex;
                s = "c69effd73fbf1bacf93884343fd2a9f773302986b9a16b8c19d61893d84039ac597e900dc4d1f8b56871c6b59192db7a5d7d30c744bf80792e05b8d28077751953d88cb6b721ff64337162eb9bba23d6588c844adbf7e53c25e705d1a9b97d9bf4fbac8ee2b777793ad71202f28007fd1903a1a501b68fab8f6bc5ecf00842106892a4dd422fee4405fa18dd70900bbf4e2c5f12b74ba9b50d00460e1b7ce7359107ed0f858980f3b6af21a09c88a05005cdf5a189e19950e543f21f7d3b5755b88f9162814f51226caf739372f18c01c75b797d26ca2de0f09c7933afcb33080bc4ce3ccf62598add604a75922ad6472515023c3400b22c4fee3e78c259d1dd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323333313432313732"_hex;
                s = "07d3e97bb3e648c32b9fcd3527477c1e1fda5aad9dfdb78c376162401cd003cf7bce7441dfb6e4786f339554dc3247eebd6b24609541145a52c4615d528f919a5f4f21427998fe1743c825a93491ea5f432b18365450ba9ff355934f5b8fef72be8ceca79bc5a67670bd113f36b197f637de1110e9a8dc7df898feda01d9881cb185d76edb6fee17ecb80ea5213b5dac93296522e9dde4bddfe1eaac94bd25bc743f79d36df48edcf81219ab7b615627411482931e7ad325d35ad6b7512add01711183cee64aec6da6758cd92e17d467f79a4ed51977dfe3cb5c521aac8fbaa6b80f3cc6ae3d27d3af9ff7c1ca8923c002b03e353b700dc6ff643f1aa778d3e7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31363733343831383938"_hex;
                s = "8ea80b6cb6d9c5e78184300a5a0954eb7c294022a9082ff8cc179563f8ffaf07b3ffc42a4a18c6693ec19faa91d177e1ab6aa4d5c9f004e8e6179572bcedf8297cd960a855141d3d272d605068d4ef83631072051405a11047d1817755f11f17f48739c308ab6519bac3b7042ec051368a91c834bf1459c87e63f3ad79b9466e35ad015a5d25038aea0a712572cf1e9f01a6c713d685737cac8807f439fae6072aefeec52dfe435d37de858b8610cc40d23a310cac344986a5ee5c51449bdc2259fca92e759d9a91ce44beb1f8ffee0dfe0c11c4e6a14e247f33c43ab5cfb51d46d37bef3f90106928ce71b0843e4692dde18dce1e92afc62058f86eb2e55cef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343630313539383237"_hex;
                s = "78fc3b86f5a35bacb0505dc7f456e19b1f8ef69bfcd7ff9a823d733ac5a47417bc734e38e4abb08c307b4d01bfd411b498769d24e70f2bbc1c00a1622d77f82f8c1aeb4e62c7543a3c238ee9d181d02f7f25e1cd3f51e3be34d14fb5456bcfb0f7c9eb3a2a5be6ed6a3bea9454eab8bf7d3f0c99c768bc92b941a1b96125cca86827204f0fabefcba1594f930f34e6d0e624d4b94c7459352aab4687c8ec4a36eff2f3de2b9e4851c7fc830d7e1771da3cb8a3be5a3650f2acb1e4f5e077b8f7303ced4e8c1429fa804bc8f06e6b62c0217861235c5deb21e3e5165ad2e5d728dd136cfa10084e559e69535042a2d6f71b370ede98ccf9bf72eab4cfa20303fd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38393930383539393239"_hex;
                s = "83500892dde27220b298fe3fbe1b6c1c68958604ab25f3576f4f22ce3567f108684382926a404f78f7475c2caffcb682d570ea8c2c0c686f1fcc3bb3dcd7d34848e6bd6a6f2aa38d63a68fb548ea06d9f08f45ac83ea8abe6dbb6a3f9a194a08c482a52b59bc73b099ec1dbf563e5b2921a0314ec5be11cdcf46aa3e7e8347b5af9ee6004714ebec90043fe705294db8fc6ce7cf85a42924807a4b1a0d7d27acd9f49e2b44f15dff329b07f78adfb6dd764df9d93040a26fb1f57a157a454b3114df82fa1239c4b32180be2a71102207299e03c4a68c42fd628957df6619c2870e6cdb00aea0db410fad68762b21ec755233cbb673bbcd185e5ff4e96993ecfd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333236343430393831"_hex;
                s = "3b2647a58cc8e01bd2472c9da383fc9322869f3bf8e3a96a65f6c2ac82e68f3e464b14f5cc9c14a172218d9782b3697d15b64f5810334781472c35dd873e0fdf6d8e5df2c0a140b92dc8de3ae1750cba211ff70d3c1f222adbf81c50d025494a6e846201f9b2cda39662c1818bd9a001100e78c095b87901837ce7ca5a3e295605e70fd255a5880fc63baa053c1ad2fea6c816559fd91e77a8ed7683763577a9145d725e169f2eb93b72b77bb3e70bb7f68c7428b265d4492b798f390ee452636e052346197348d68e7680395dbaad89d934e2921e1fb8c23cb5ab8ff77256527ad130e4fe4482e287deda85a5e0dbec3a835c34712ee6161a181ac2ce6943b0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333736343337353537"_hex;
                s = "5eae8f5c8c890ceb93e17c967ee7a3d8a559d3c22a44783b643961429dc653e2f19ebb2a3c55286a4e8cbe6f45d5b0f039df677bb62c3e084c164ff76d806cfa4667b4988ae3e2136dbf4a85c2f55bb42418460712d3ba3cf45386c4bd0783a8e6aba31fbf01456b007685f5b25148f7e846ab559f81c843783d9b19f740e127bf59daa50079265ed36b716fd7a9cbe58be3783663defd29910d260dec617ddd6b025206fac1d07ea52accd24cd1d5e5da099f829ad8f725dbb4c7754e90e6a5c789cfa85ba8e6e775257381fc8669da095a55fa9f3992024f88e2774e663aba5a2b3bc23f77e0bcd0a2657a52759322f8107ecd92a3cdf9395d7887e6d06647"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383630333937373230"_hex;
                s = "a58234abf48b4c1413a68f9972f25cc71c2606b54f4b5c1b398f2ece9da40feffe040466b2402302a0ee262397cc0c336e75d51500122a38648540bfc895025023a8f70139edf2f03abce11a6d96bda489b0167483c3d000d9150dd55845d15ccb5cda5116add1bfe9270acbed7e0269715e24b98d5c4bc4270ebadefc3d70998ea0e28c57d54f8b458ed28b7a1d84e0ebffdddd792ea2bacbd0f6b120fd226988fc2128dbe87f553d5333889d1c474e1ae2376aa170030d8a5c2f97e58094bc87deff3b1a771a9e093ba42b057cb5f456825c621fb319f51cc33bb44afc43f48ba9ebb38ecfe21a8adbbd6ef519e2dde698eab5f1c6ff9c929f0dd6a489fc75"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35383037373733393837"_hex;
                s = "0898a1f4e59c5b8f2a4ed5a5b879bb3b0ffc88faf0f3e185bb6c228485c6d21333b14c4dffc2c1867ab1c352d76e490ec6925bfe842c72d7257c19f60856a1ffde29b0533988db8981f9fb05949893f6c6cbb64d09db483070879325886d049853457f9506126569577478aeebe2a7d6184a76f4cbc73c3da08456a30b0eea5503f83fe3b8c21e78a120199543dc554261c5f2ff68715e388737d596b32ec3b3e331deec5b86170bd5a08c4c65479580f6ce6ab3ad3b45b878e5e2c6b5add8c3815f069e2e9e2ef7d8eaed915a54dbf71c55a62b1cecc7224610ba3472078637c45637b38bea3fd8469e204d32c0268a9aed0c075e838861e7af2237baa0871b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "353731383636383537"_hex;
                s = "19f9bea5872f8f7e6f72b9542d2f0163c0cd9016b95094ef42801bbf87afea6dde61ca5a94c16b956e2612aeebe60593c0ec86552c456e764afb8f5dd1e2893c4ced74604e4b5cc7171af8099c09b41b95771cc54b59b9db8e8513dcf56f31e6661707809b18cc505588fc9cbb0b4c0f4a285768a2cee16ed62aec0d6594c909ed74f2da4861895b7544cbe761c4bca31ea39f5fa2857b7483c8d7172b7ab01cd2db5e3c7cc20f249edf2ad987656ed256f87f88294b9f917264f600695e5f2005b52805598c612d20cd45de7a6ef26265c30f4a103fe335786e685faee280a47bc31483bb09d6caf69920ea97ed4e967840430ad099583e606d7395c5c9c788"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38363737333039333632"_hex;
                s = "39f146df58e990ceba07192c0cb0ecfb1849843fe6a98a5f89d03a6dd83de3f00a5d0f196d25758c9cbffb2a4d4be53d657c4b166dfcb804de15d2d74a637dc27b617e24b35d606a77ac1c296d3eae7da1ea78b1905a467588b8ff1e07ee85595e0863a855bf8cdc26156fb7378333d55639aea2c561a4e7dde4e889630e479edfe2e9a4316655b109f548f833bef36ca33e1e61efc567360da6b604d4831878483462c14eda7dd3511f394504ae1135a0b49778e50054549d574c4cb694f2657250cabfac17cc88ab59d16e3024e2a3e883a258fbdb98353c8ea4d78f869d6be05209d1488b2fcb47262c8130669d98b02621ab293edf2c5bdb705434eededc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32343735353135303630"_hex;
                s = "2b4ea1029882a6db792de7ee3b0a7197136c47d1ff9e8a0fc7499547feb013851b99902ae418e9dff06d07c88119626ab31e0044f06b7534b820a718ad4de5ea03842c444cfdc28ca5e94423fd656a39e5cef02233b873cf98ff22b8c8be342edfa0a56c9355d9ba0d6ff6b1e7b7fef176d52508351c6657cb91fe935bfa1f8da8f5d9ffe8adc279b57b1773ca0b1906ed8b1090c80dc0b07cbf9d64bfd8c7333ff510796b60d8485eb6568a50dbc4e469db6371b45e2750000f1e0afbb56e48a57b57b16d557f1a676d49ac4d2182b5f621b4bd4265d6b797a58a8f5884f19150540e08fde8e7b49584335bb1b9b85a2aef2dfa60ecd4b68a1b85407690f151"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393733313736383734"_hex;
                s = "8fba71a204b96fbb19ed371bc56bfc48d52d5a88fd311238d7f9b598e3efc4a71f3e7cb78faa2c9fbcf25d96bced243c94e6ad6fa6e38f5a1fcfd481f7bb9305722692d3d0e08b9ea057c08512f32e8223f23bb031a0b7627606e186c474b4507b11628b45c8b05cceebbbc27546c1c5a2ac9eff162033747c30fa60760a85693a912b8f3e619a1a883d8476b6f0fd48e32b2d571d95c992424c73300d56c0b6b5a52d09c298e18f4b16593d51861820ac5f880e7a36976f73f1e5e0eb0fb0593487aba94c94ff4464919ac841c3dcfd8d3849f82e8daff58fa2766fc50bbd1080aa49f608ec57ba281153ec52feb8d965ad6006ad267678e93c447ed738fe75"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33363938303935313438"_hex;
                s = "875048bfd2b130341cb7746859c7b2efd3681bbbdddd29d0e18470bb02c80a108d1abbd3941fbeafadb686884084b3f52cbd6c99486af2c4c67b4da563649e845a0e6108cb0ec78ec09e70c514dd00be516ab799e5f0bea597927d877e8d0e061cad14bc59d7f9ee7f6c747a258ab5066207eeee7484ab9a43b1f61be2d533c806bd8e8e90e09b8aba520361938adce8e5f57ccb1094bf9803d3c126f3bdb13b2ccbe50e407d41a50e946a69b148e41712388479634db7b2f0d50ff9f6367601f5642395459eedceb7a2b19d58bde5d246568b875a6ff23785377e68571f1531a1b57592ab90e5c8c1f2a98639a9bea39566803510db4725ef2ea9544e70b7c1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130373530323638353736"_hex;
                s = "0d293d98febe8373c914100fd208fa2b162aa7473c9feaa7acb07e37e1a7152958b4ed4f90b9e8d82e7912ea06119c52b9947c4a54c90824ef9cd40431d8b15e914d72e59a13b0af2c0672556c3a8309d1e8758469d6932e7b4cc5797ac3f622c6216bb7f90e74dbc4304a6cfb01645f0774e860876a9caa4e30dbf680688287bd7bfa3be816d55a75680524a703266f8d112a3c1680db93b49e2952784ada3f81ad4af0dede6045bb929efd6f8ceb77b97b7a7a2bf3c759538d24510807160c66067a13df7f2fd41721cfa2c32e554a8c21a48bae82d96ba160616a6a676f43e855d82481cfd5e79505d010f1c9043962a7b0bcae309752c1745a692650a090"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383639313439353538"_hex;
                s = "aca661874a864563eb8aaaf6e6e75a3e452dce41b216571efcf3ab61691353e2bf61a7288d6562e8125b56d073c4194cf31f66ccce7f30c741fb523ad925760bcebb58c7023897ef8d9b8f4fe41e6fd4fb47c6a69d584c005c9316b718c578303e477d22a632d94b7522ab6769a746ecd75e5c1e3680be1be8e7fb9c403a7388118d14c210ac3cf3615bbc7ced41863044203870c8d4defc6b727dd2da0be030878a92ee9586a24651a881138d00876b76afd144f02d854f333696b1ffaef09586ea2573090a5e39388f62432f519f1a2140dc967c7ebe159a2bb62b5ddf5d927e006cb2a4e85d85e730b6ef97bc49dfe0aba424845fb835e65be65ded3cda39"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313734363535343335"_hex;
                s = "01386b55892d032ba6fe9b13ef18bdfeee6aa28992e48f6039ee4178b69214a0fd74343c2f2db9fdded3f5b29ed0407950c6ed10c28cfda14384f6fff6baa251a95c6f06797c00d64b4b9b6d51ecd6cfdef0683281517f9e446f79ca79eb7ade4dbe4293e26b26a5989a066ad46a654506b3e3bfbd7f374f77e36e2a98b1c161348d8846934bce79c65dd510abf507df0531406099ef1d6af6e745028d14f3dd3c73ba7df3be311e333506e8e7f864961f21294fd97f54320ab8d09f2a449c7d3ecb749e484144a661b2e12db5f2b4c2aa8c1b7e42a81a0ca524b6863ef1f668c4d919788b6e66e041fa159e82c78c849bc4280a41d0ea11ae851c50e35e6f1b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "363434353530373932"_hex;
                s = "406c67c1d75b66ab4de0cbf36984a2919abe0e4e7124aa10df130673f0ce7b7264fa77615edac326958d5ab2cd12183377fc92720df9a733fdb776794e048d179f3812b13d1a21e329c025014dd8d5ca715da92dcb49ece33a29f687b60cfeef83997a022c2188f3fbc5fec9f1248d1fd1b15fa9f85c1348871b76771c066216cae6a5aebf4fe9c6f96a14515b85e48b14a715ba3491d536cc5295a803f2c202d81e806d74a04cb40d930d6995c63267aca8c6b4d4c4300500343a5dd1255139c5b34ab1c9677b7439ff8f4835b0577976eabac05606819d2982db87ce2db3e24fec98261c7d6f6c27a299c86c461ec68147cb5c9cea0f4ad982fc69e7162ee6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "353332383138333338"_hex;
                s = "ab941a3bc557548afb36c4345c9d090cd3c87cad4b56ab6f091ebf1e3fc26f4f7b57a5701168dcabeeddf6272806f6f892ceaa716d6ab24200fb1c0e4f2288346d476c399550b6840013ded22de6ae431f530211630568f8cd4416fbbc1ed57ed21d87367d479930df73c656f52535ab0e8362ef0452b1c2c33ea553e21c724d3a4028d2ae08dfe0391453a6da65c01f4cab8aed1459ae5e48cb392d3339d3010dcc546a739b4f4301fd62b496349387430b8f0b001cee1d1119c323f56abce67fb8c5e3ee52bb1cdf20a78253545b88e1c7525b3e98006678494e23ab05fe750407cfeea460209e10424c33a85e41f7063d5ac035902d8d468cf46aeb6c2c54"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31313932303736333832"_hex;
                s = "babca7a8787bc5d1c95dd66a39431a88fcb17f3c112d10353a6f60f59e8ca4904e5f711dbfcda9f2cc30d8e2ec4fe8f1a72893c8b603c9c029ce8d2dd0c2dfe2f5db900f914aa243879bca0882eae5508c3965798158f783c9c697d87883f28da6b7137809638303c8c6040c917a4ecc8ac093458af98e56c0ca90ff610861fc8dfeecf4fb43cf4886b04b4898ed4d65f516b6d15a44ad9439ab783188666e16e6c2392a2652aecf9d3770601e00519b0973fa289fb7ce5a97b8c5e6e9cce83a06f80f080483c50bdd65d5337cdcb9a9687c356e4d1277b105433e8d3508b74f90c6398e2e9b8532bfbbb18a7888551542756efb8755fe32b66fd3c4f6cd2640"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31353332383432323230"_hex;
                s = "6d0a1084929f556203c5554b226ca1886305a4fe9148d0dc7c6a361308bfcc8cc75fb891bf46befbf66b92161e7bc580a8143c027894386251826c2bdb43114d1397569c4830110e64bfe839c86daf7966ab07968d9b9016cff7b0a60422cb50db43107a905d6e9943288e4462169b8eb7c92bb33c11de51bd122059520cd49b2f1d05d94e6a27cae7cc34c307adcb698ff6549968e8bfb665fdcc5df1b85a65c072900f1ae8ea9095ec09650a86a13539b5457f23aeef4b7b24c3973cf61df33ac59d2a1f31b90c06bc617b2d60d861ba7450e0be6a229fe96f6b6fd2e9f7935695d1ece94c830771ee31ee6265e90dfb3ed285663dd69f863cc14555c2d096"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313536373137373339"_hex;
                s = "0077fd27ad9651f0ed72e1c3b8f066c0aa385be79aed4eeed255bdadc04d9dc992fb222f19a5e7aa2cd12114ebed153bfe6efd22e55682ca19959aa9072451b8e84a18bbfab153768abf69e41ab2f4dedbafc6af0c56c72f718170758fef3574ec926b1a86cb30657b8b78d2dfed5c6d3769d65ccb40750ae18fe4c29ed130569fa514cc4f35d39210f0e319edb5bf902f5d91b7ea73da72d840d0b26305dc8a4e61e49893bb18d2c70faf702a311dfa44743e87c76054f397f377c31eb76b944104a3960183a1571dc547ff896de13ba02ec917a17bb9c9776cd7856e960c9a8e74ae9fdd9de42347c39407ba5bf914fabf07edb7446072693c18bf07c88f4e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333033303931313230"_hex;
                s = "a5b942ff02e191ffd32cd043be31e80db46740094863dd04371276e753bd2b06ff9b675ff72d444ecc37b8c9065e84a39b923328a61f7acddec5afb3594b161a5478e2a99669e352d8e89adb71e0649abc39a072a1dfd1610d4805575113b896b8f7b7950ba2efa001c4acc6d5f218b26e0a7295e7ed40a22cc4ed00d33b002ecb87e3113dbae5fc601ef48a71788a6acf9d75fefcdb51b8959cf61d96e781d9e1cbb6d21402fc5367a4c27f053bac9f8aeeb8a75860432c99dfe555bc9f889ab3634e0344c69b08ef27ffb121506095e31079388af5c3cf1a4c3a667ca982d4f7188d0687a05d49b2b60ec2ca3868115e14def6d69948bfb8764c9b798c58e4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "37373335393135353831"_hex;
                s = "150c22dfb978d148e47f686fe974cb1204b451762a1d8ba6661ef3b40b35457edf4cd39e402f03b821ba66aea09ac9ce925383d33ac0f3fcb0c7a365754e303c0c0eaa40f0e6994bf9d72544908fc39a8107fcef1dbe10ba8272f419a5224b5b9469f61b91e61632dd24c6ed8d0df5e79a5b232c51e455cd846a9f6f7948116d1923bdde4f86ede90b8a1a51861644461659c97fe9c91d4c8eb541cbdb50bdac3419c1a9737e3ea790e7d31333deecd55b79ef1839ab50e75fc03d4c2ea91f03806e5fc36501c99b2ac456fa40dcf260ddb7cda659db0f3fa773515cdeb74d36dca704d648531db64dd9f0325f93afe1a5ad3e554b7267929ca10d54147142c9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323433393636373430"_hex;
                s = "051bd75b776d65fd71c24fd46c6c4f3024b232b429e71fa5347042338e196a1155561505754d2e1fe3742b28122a1d67a8e9e4bbc172377bf4c7236dc2f89e2b7ece657b918e6fffa596f64bd9fc7c85a9deae93531ed78047b7d7655e803ee9a44ab12ed8822154cc87ca8ab10d3e32576af690f1644a537a7ef1a1af2b9f7c0d0e151dbb8a254cad17a8b538ba2047bf0b064a50a5e040c48f164df3e357d1b0270700ca43939aa8505b50f7870c5fa518d54d1b0a2e26b073ecbf7a5b759b47ef909089cfa741e31ff2973fad42606a4ab53155cac9c226473fbfe1f90ca8475b5b42229a980442001a55ba73812ab4b15ca3587dabd05549927d3dac8077"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333237363032383233"_hex;
                s = "599228ffd4c569ee651cdcafe7417a7f11acdf34c80f93497cb085340900ed1aedcfb2da30e44859a6276f74179ee718aec9468bca8a23d98e20be8b0bcc142f9bdcd80b8ff495fb90fda9f0be1ad03d7ae1a147d396708fcf2ff536ada9e1b6b1f6576038e044ebb415ca4b301399e365407aaf97823248b4d1474a861e5af4244bd394f5410af78e979f059c9aa8b8b09f0d880a319f631ee5433d3b5fdf60ea88ab53c696de34db6430c7cf101b875469a89d8688107ca41c8ca69806809d82c9a03da3cbd4c7bfa4b925b986132f8df1d9a907c2072963b7d5cf4149d3cdcc15037aaa595184313147495696feb5c3163dacfe2d891b13841c738c1eaac4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32393332303032353932"_hex;
                s = "09f60b4e5dac4eb6d4c77165b9cb0e5cba4e034bfa5a68e703139ff7e4f5450d1eaceff50ad9b684292078eccf480f20e09c1704532dbe638dcdf263beb89aed558fec2b7391e7599f47e3573e9700b06e9587c3334d267689545fadd996fa8d4d6b7c5fb0a39d604c29cdea56379445cb93381042d6ccf47102623c1fc72a25aa0d5e8662eaf4a5019847beb6f7b59f1accfe3c10606528c72421b45d0fe2095fad32c23f06be1b2f494406d71501b5d9982efed05d6f08444309dcbb554c5940f09de540ca1d56b610a701b9450951ba6dbca80d28699f4fbad7f2d814a2e66da00a8d157320ad66b80d0c883b5bff956839011ca5fef3cd171f6b21805119"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36343039383737323834"_hex;
                s = "23f47d7049092ae27547afe95e9c51205fe53d2c154c0349ae2c7d1147f4969a62d22d4eda591cae4f3c15c20bc1c937c53458497c3a174cbdaf5952e2450c99b27b2059e084d6428d6a7f88605d025602bd335f6c6fa53a695dc6a284ef0b4501e908a8c591036a4a66932ea5ccbbb519cb960613e7e55feff165cd6d55b50ecc37788d0e1b20b0c1da8464b2034036e304984023311c2a9eadaab4a513f6b1848e11babf65a8a0dcf10c217cad95b9a7892a6fffccf44035021d70973e19b21d993fdc99f9ed251785b046de56c43850360585a09ef2d33a485ba4f90056937be7a2365d06c93b270faadba398f94cdde0f93056ceeaa07677bb29a7652833"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36303735363930343132"_hex;
                s = "0b617f7b569ba44fb9a3564b45a6e5b839f111cd462c4252d87ab49986f26933b172710bf697b8829f7d8ca31851f65bd7f8dca66393bb832887e43c26921b5bcc7ae2cdabab4f3b486fc85f7837b0ca5e8da197a78fdcca401b95dc7eebb026302997d07b0876eb85ae1c43d3e3cd673845de9ca5e0915b56b8e0a15cf5a98e81bb2f2a4849c4a3cbecf60f66497b4beb2da0a4e465ff7edd14dc7c72a4d20e1db8e83c65127687a62ba9429ef175695ed0978ead2d3b54f1e02d77f3a93d7e73b9cbd7a41776960b4828ba61ccf93a4152fdd6e2af9e2f93c77032b0a48ff1abfebab1ba7ead2f3a90ae6e5316c6758ec8a445fde1c5c846ee1cda1817d01e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333231363233313335"_hex;
                s = "81d0cbd3999a3e5446ee597a5003aede05dd4fb74113f2989bc1ac486781d4a31e4c660fdb415c22552bba493b5348b0afe6f14e3fd7a9c3b7a54f890fedc97d4805eea3c365d288df66234b0ca8c32dd63b0a82526146c255e38bb39a7454318c70a8764adcde80de5c3e989909c933d598af977b7faf0e0654524ddb9348e800174c1ccb24c0015737b8fe78e28b5a88d49329f2ed7ac256f4d1aee681a98be2d4836ebcc3fb40aba16e416e584b320395ca3400bdc65575e1bfe0b57beb09024ed92f11771d76dfb412de37b87323c556dc8b91d633a0dc0e7dd3c6f06718a4a67200b20b427e40bc2d406e2d7c407d4fe6452f39b55ff9643f9f514c5561"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36343130313532313731"_hex;
                s = "138b2ece15d2eb3e818a5e84779ee0d93907ac4e19c0cf74b748f75b8a04b0178b73986ad1c96a5d5d14e1f239ff1e02da99d9e5f9eec43f2e7bc766679c670c19b1d7e64044679eb7162ac65882133983eeeee229347564df69c13dce98ad00b4ee9c1dfcfa07922fb5d9ce619779857f0a3e9c4c67b6e47164eaaf0cb9c1f14f85db4cc5d30743c3e459c71af275b18f7d57fe61b0835858356dbe3570dcdac855f781416b8f135e46c449807b0381f8b35ad36526b8a21ad30e19d5da4a329861649a88247c48f80bf4734c1a740cd46c9c95c70e6ab72d3a05a94afe92bb24f415c51bf267fb1dd8e3ad0e1c9772b85fe0c51669cc41bf37d10e53630ded"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383337323835373438"_hex;
                s = "ca59a3c03f66d9ca1432766d247b354b51195ceecfedfe1f57f4c3f65fb9527ced2ff3661e7b0d8de11ccc7392d8bb596a35d60c0328cfabb0a6b1212109df9520f956b5c0d316fd7f74238b47fefc2139900607b7e6c3717683f1e34d912099fb8754fea5f09ee9d0cc810612a258e3a731a9355a7f2344976af37dacf4240cac969ec9a4418baf8d52161dd7e920387782f2ceb0e8517a09ac159ce88dd09fe25deec26e22032604292846c6b740ab89d88ac178a62f13e8e19e3b5a919be17930ca85b9d03b1ebdeea29a3119d833657e6a2c1ab512002488da05f48e721326ac2367ac540dd4e4fad6a2446fbf1a190a6b4c4e4d3b1016e23b0fa5e57c9c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33333234373034353235"_hex;
                s = "85537ca6f72e3f2bcdec4a0463b5ebe2dfca9a030e5c72eeb6bf7509ab332101b963b88aa8777f44b84e798dc92d4e46cc2c38e12aa763c89fe9cf9fe6d4f29733dae1df8ff7af6b914b7eb9154412f70d7a2335e7e0bd6fa06109a536bd5724767308862f8c977f4e109dd1eb802fa76a2ad8751f31cd06e671af4c141f486c45f8c231f4a0738f98e4fd2323ceede94d57aaedd21ccc4e641b4c08596b1972e2aa8433bf4bfc21bafe4d36d8e45de95f2bb4d604fa2f77a013005738be382fa2aa02d184c3232a03710f2802e82ad11f126e44b32326556f3c53dff45dc5b0ef1758327b41493611334fe9dd7a8da558c2bd8bd67d0185af98c4c0dff0b491"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343033393636383732"_hex;
                s = "05f6dc7040c8452fe192d5fd80e62bf33f7a37516723b909071c8e61ac0877304e1c24e56d9d1a943235c89ae5e95cab146e3402d8f00f4ce61babb81d9f216df2134caaa3df9ac81a07e12f4705a43223874949f6a8c4312dc66f226ed716988368ff5de94c2062c6247d945a3e866275a580ba8d0383f20c0864d47cc30745976e3129aaf3c57164e9cfa1a22ace52fd3f1cf1d8796842d049f181ffc15668ec99dd8416378fbda32f8a7993df7915572f3bc4c3398c81d29eef995e58faebeed65c4d0f131d87e03d334304f074a055ace13f11ee7f8b01eb230dbbc3d2bc397aad4f828b4e385738c51b99feb036b76f555a54ae10b988c1f7bc6233fbce"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31323237363035313238"_hex;
                s = "1aa612a643b34c505d2485880d3161255c1612d4f4d6025f50ced45b0a6dd63987d5eb5789473165b07da40f4b668c53399726954cf2b723fcc64bfc32d31122036ff556cb1723e9c978ea53fa3affbd7b40abb92790c16171e449e7586735b7b1f68a3d3c30ca86fb2edbb258d277d857fd5bcbe8dfd00fdde2ca13cb20682b9e301f62451705ed63e6661529ab90cfec4373796a96ec1c35b8e7e17947442521394a2bbeb29c8979c0a8133b5007663c1edde8e2f9e95a78e3bb1eacb4ba0cc3b3d9eb58a73168bf907b1d3d2afcca0eb7ea86969d6e622d4cbd24175337b527d638b621daae3373eab6a2ded872d74e2d452317a2be08db78de6b981f34cf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34393531343838333632"_hex;
                s = "9cf144fde9a1f4bf50b78b2b0820bbbaa015f28a7a72409b427b3c17142d55e502ba1de7ea53ab97039f6c98ab1463954d47758a2063d1efaa89bba04fab56f991dba0f18c295b4c8b9a64ef5ca92561d66d9be6047ec5bad1da04800a08dec9d8f7a91edb9487d581cdf00b6058794552ae9bf759dbfb79436ef44ae2a1c6b8f243eb0333cd1704411f92beaf7acd870601de800bdf31a630995bc22021085820c4744c59fb42702c05f82e682eeebb5406a9784b101a74fc5068c374af0ffe858c082cfeacf5e39d03826416edcdee203321b035b5807a3a62e7431f5fe0428b879fd422e4902a48e81f02b36cf01a9ece95c87700de579d9818991c50f4a5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32343532313237303139"_hex;
                s = "85f7259141c6cc765a79ec1de56487ca3bd11a70630a490afef9c40ef9a81645ad8104f94114aff7545c7f73d63e6aa93a26c92a333c0a799af7c0b207d10fe751d83e7eadb582961e9f3a538383250aaec815cf5a8eb25fda166787b486914cbb4e78a78cd1d95365b5097a534b664411358aea142a669c0905706f15f0fc81b6c4d419dfae0987657471fc66ad9b85002b388a1ae9d394127a8aac376bd9b2ce9b9d0ac4f00cb705245d70d5514fe5986cd02639a2a221b4045af2568916dfd8ba26e10c13e04221e0e09282ec392693d9095fa11bb936dac21ec5c169c1db1c2a922823b36ddb5ae176ac053545fb6934d6c089fdf0d15a3bcc592ed062a6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31373331353530373036"_hex;
                s = "92954b3b0daa052c0684781e02729858298f13ec11e8684428fc6c243de54317e5d74a6903270f927bbafe8f81b192cb7374a2b94e92017a715811eec951e72c2159820517b9d650c98a52029c608f5f12546d92865af3c474df6d87bf35ad82a99ee13c5b370b39b58e4dbd84700c029498d8fd50a035cf2399ac5a29b769f0ff4555f3485faab3158e591701b3a4aa8a6bbbdd9072e5c3006bfd2d0082fa9b89c526bfd440f435b7e4fb0c3ecfcf0305e8d246f5d17fc3739e96befdb024d8ca8b6d9bb255555a1656a6f75e6154fb3fa24dae8ebad52cc5301b6f72f08a2e9b42748f933757885b0e6c9757cc9ac20f0b7fde743a37ca1e93831803f4d2e8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31363637303639383738"_hex;
                s = "4d39fd5446a1eae319889ffe1a67364c9d6e1990084201bb2d59ae839d3142a1f789548f2fbe6d2b3aa2d0f160cdd2498c3c22bc9fcdfeada7d3d31bfd8457b3ac5eb2e97c3b4d4af54d379ac5990a8a2343147bf13f0e33fa2796877464538f657848c8c471322198ee68839076861feed89948340c4c46196fe9e9c8b039f1fa0519d1649affed46a219b81cb36ce9b925cbb17372172704ded15109a9ff494de15f067cb5f2bbf2b72c4d83a7e6f66c7a5bd00d37242e53a0a16e9b0ff33b435574fd5bb2a44132dae120698dd74c6145137528c8c0bbd6bdc9a4ebca534535789c87d5a5a4f34c3eafd63ce4fe471842d82c2b773d68a6935880b076968f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343431353437363137"_hex;
                s = "3225d5db1eef6655b6624268a3b301ce5eb2c61b4eb5ad01cfc00495480000caa8e84ccf7e038d620c0b7d56a80ee97f57f3156fb86201421a7ef466f78e6a5fd6ce83df090863a1646cfbeeb0183fb48c269dcef46950279f5b1af5a96efa963a5de2f9176a1ad693d86e26c1cb858394ae899039db4d3d22b22df531a323268cf24683b2c5221f3cfa8e8e23fb88e20bc74172fba3951a66d0670ecbe5d4d2de6d5302cae549ecf9d50a5a9682ba688764bc2b2834cc840565d2f69fcc603275c2be25156b7419a9f7d86ec726acef8c3dc7558cf2be7fc6a6ae86ee3137dac477be98dde54b6eb5b76a088f448112454e093ce752a1af653d7ac5ff886841"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343233393434393938"_hex;
                s = "83db91868eb7ef8b94801a19da920b82f8db5cb6d310eb7c7a893747cab37b4167ae397505d6940d1fcf7a1769ae12b8d66d030745938aae83d24a87b61497b498db943f37acc52392ef105b2120650d92e7e5a8de78298bd37da743a0a4f0e6fd24e0a307be83b4b7087334e87b3ef26e984bb93984779565039acd081c2b97f4037e8474211b9965e9459d518debe3fb8d69c7669f5299313e419a5a96719e103e3062d22e9211b09e49f38b69386a2a5924d4b9385d9669b0731d0448e76362a27d0b14369b3800996ddd083477b0d29fe3701d54199bdbaa417a6509d28aa394609328eb48b4af64ab95f28517868466a8c576e50db65d926f7c42ae215b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34383037363230373132"_hex;
                s = "2b8e5a4e46d1decd4793bcac3dac843192a58cc62e6159745790b8658e0f6a3495d62ae7281f37b7f8a4970c058fb35d05e316111dca3b2b569cb254cb8491273d60f3f8c864d98d3f3323f43d2db4687b7790fd3ba8e0957df2b13f00b113d07556dfc028462e34117f00c1793c6e9078c627e927420223a38ec59583287aebf9f8783a4df55a4b93f9bdf3d36ea633cb070a3d2ddee6b320e5b8c5898ef1aa697250611a763d30210286bf6fdbcb6f3cd3cf308203009600137ff8a64b753357279a838ef4a4fdb184419b98818b2d67adc22b8b7a6573d70e82ff7ed0c64c360a1229a5e8b246c0e2b3c6cb981ed43e142a3a908d265a981bbaed730e2a8b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313634363636323839"_hex;
                s = "24170a9962090ae8601c4b97a9e70e063fd1df678739a140caabcb7c2925ed5c791dc1e430d7e9aad1e259d82180969bad9e514642b007a826b6b3600d9456c5459f83472f5ffc349c1d09a6e308a83b108bfefeece8be5e46acda00f78b418eea9d344cf045f7bf57ed2cf1f6bd73627f329fa8c520317f61783b79e879b8b2276d9f1e88accbb073db0c6414f1695c5a038ee4123525a5fbeca40613cc94a6d730a7af7484ccef49070ad84b55a876bd41e5ec1aec5a8450af95e66f4a5e275bae95d7c9490a7d21bea5c2519e7fa51840037321bd646f5838f53f1fdc94cb99a68264116676967923918e2edb8ccc2be836e15145b4001e1bd0c883e3d484"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31393432383533383635"_hex;
                s = "9931edaad4fbfdd6283278ba630a7e60f93f430cee522a8052ce898aacbadc15b7848b159a79ac9ebc7e93f762a0215f56a8e7736eb8b9d3dcf4a39108a34f8915b694864082777a6e79b40c339a1ec04215301620f87c279dcd8d2f90a4b1810a818104e7fbb4fc99bcb266be25cad785e530c391a0c74b9b090199957b564ffc5759bdbfee10f4c94df372b5240eac76aa3963064796c634779f225a587632beb62d91656f29c389f684842145f7b81b1b63b702089716552f8fbd63eaaa05370bb167f67abb5b38cda2cd7cde5808cc6142212627ab2df10a043e7119bf2793a92bbbf076ffe289d2ab4958c798efc15c21b49305efbbce8d90a8d65aa53b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32323139333833353231"_hex;
                s = "aee211300fd7e78422fc337d0dce10df97483cfa1f559d6c34326367642096cbc4e1a026bf1f8730eef538bae015fdbd89117bb639294bf4b3d248fb0f91f2acc8adc5e5901d6aa73938a4e8fa51b230745daaf454d17e98cbb0ad201bebe0fb819a9301657d74b397eb9f724ba97233984fb7a94965285a24fc08dd020ece5d7ba1c39c3a84c32f9e8d9c647608bb2aaa716a9b738b89d3bae71b095058ea0b72aea1cc0feb931a7be2c4c522e4d70031152f3f703dd378e48ae37d0866ef84e108fdac6d312151fcf481772e6d74b5f0d6c941442e5f229c656b4dfaf22f1d7a53a0a05f63b6b61e0c7246dbeab45e0a550b37ebe5aa4c1c152fcb6f39e653"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393236393333343139"_hex;
                s = "931b37861e5d09c4e4f7d72cdf70b1f081c291fbe4d2ca59b6914304afdc983faf6f186f9c1de537612bf23fb23d791d384597a4942560c08564e9112546b565137f5c41ca0c69acf2881c4ee6607ad6d461d250e1d717d91736609d56988dbe4c303667bde9daec8aa5b3b6b53979c3c939585b8727567bc217caacf6f32cdbd9062aa5423af9e0873252f558aa71849e2726b19aec05593473d7531f350abc005c9dcaf35aac2a9852ca8d71dfda62016e1bfe0146c6f57cac5ea28d7040d63c5cef47b3a0ed3e0c03fbcce5a9c1942eeacb11de8d6839d7b28ccbf4388856526ebebf3db06f230144945cbafb5205c7e7db19f16ff63bf32562a804e3c3a0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "373639333836333634"_hex;
                s = "728f6e5618edee3ecd327b3c9c0e15142ca91a27d3293a11d95db3a36fc6903f15939515ccbeaca497b227d7c14a480a47808c822a69188b88d41d83ac551367bc29646363ae71b699c6b6ad3f07557fcda6ece2a39ffbd6c3f9055bf460d3a2d9d4eb5527b3498365808871c38ea798a59bab6be006b1cb30a2c56df12c0aae875f60d29ae38f97241707dd356f1b5f4d4cea47088de24e27ab4e830e7230900f9745fd3e66c2fab6fc523bdf3ba9bb6f8acfa0deb129d7203bede47c518b8388835c4d261f47990459ab7aba04320fa3999baa9f3d95842fd2f35cb8f452fbff5e99ed701f8ae269a996fb79cad68f06a7f232650093fda35aa5081d8f8613"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32373335393330353733"_hex;
                s = "025f564fe99306334331c7fda5e66b453e3c650df88b266bbb9a3117a8cee6518babe26bdec6675e8bfbf104f1fb26b91cef04c658b68b17cdb35675f2ce4785e0bf8d466b94151ae978e991bad76ac51cd00240d0137577c518350de134d42e6b46ac083d40e3b0382efe161ac016b69a047d28e95aa7098a46e0ea43556148e20bc76ffc3cb5e70adc4a448d95ec86d273205d1a27eff8dc873b97c86c69e808d8b446348a6c89d10354f48868421f22d4399fed076ea4dbd7193cfcff1e9cf51beab1d326550b13fe4ee0e96df6b974e266b9a229d7fc8d84be2be72dbc5592c0da0a3a586669a59f561a8bdfe26965b7fafef10e1a2e41d323ca2c8f9f41"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38333030353634303635"_hex;
                s = "1b2ed8768d5be6894b13cba43364f43b3daa3a96055941437aebe2e15e89caf2d11e5720133cee21257bf7356978b09742541def3a690e33fd1fa987ee0c460974fbe56a0f2affb708646132e25b560125ee845e12fc47c07b5ba387c09f7c5f4bf86fc86ca9cd6a3151967d5f3591aae74101d04c40a5f5f126b703438607bad80534f4a3446ab7eda330780da8aa597ffe856acd2cabcf3aee756b8fa7aca33dc51fb13983bd90695c07fd642103cf608c798f9f7ada508be3669953a3057ad2e169ffb2069fa6ec0e873d4e0d2d14dca8c1bd746ef18065956752e89ed306d05b525cf39e34fade644f43e34e433a41f67809ad30534a4ca33a7c9b9f63f1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333037363535373338"_hex;
                s = "2114a3eb8a7ad6a30a6da6a1d53c87e429736e1dc923c166fa96891620d7b49db271380a9985a43b7556b1fd86d546966679233a9d142019ba2481a5133878f6648e2a0c5d3d9f2320a1f53e1c6d28293d3358bb2d863929effa02c2e2207bb8a1642f30ca1748fe1a4641208b887436be191c1f1eb1d5d08843d0184fdf35ff7e1b9ab2e463165c3afda966b98efabe5c919bd1a15e79ca5486c70e070d6c1eecb0bc0645f4619695f04c3d2fd3eddf61882d122f17ccb10b6e894571bb24426dfca1a06988cf544f6f6f116a1fb8db76b21b0fc0ab82c24187784010ed00d969c47c979509afc3c58264d2df3d5c51fdfb0bed5e9d99feb41f02578e806127"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "39363537303138313735"_hex;
                s = "448228a889cdb6f35b0d40dfa4ef77d32f836e81b4a7ed3dd21c85e35a8a58fd921f8ed8411733cc6557da7b4bc99c5933b2f89d9540bf4b5e05c982f31b365b22b7412097dcaa3f06dfa4f196da82adac10c56bd3e4c50da479deedaf3cdee3dee556c9cfa288879d40088907fb4c2d824f935459b8e7e5b1d0b1e955de663a07ca10a5a01395c97e0331110a923a7ff24450fd126543772f6abe2fd299601bbcc5c4cbeb922c91a7c91792cd52a71b7d0df387dcab7e1505ed2eddd66061f21c78719ff29ec641cc96f59d0208a6e2b2b02a841e58bbd5774be7267508bbf591673dad71f6b43796f6ef99a02dafb1414a0cb12aeede18fa2efece76e0451b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "243c6bba129527fcd13b07b335a5203cb3d54965f0ff9ff6bcb24d9b410f360abb6ac198d434da1e8071b18920540af6ee6ba3107557cb8c01ac00dd929c201b62f89401131d3db209e8c238a9458f160d966343afe088a2e35d034d91992505326ddf2d882cb1b26791fa13fd8756ff55efbb3ae800da65a7cf78ad88bce6a83c3f42de3da0738e0cb18ac979ef11d798e73b5e8a49dcf88a112115e319750ac828287b1e500512c0997fe094aa0309671291b0767cceab19340d2ba225887cafb8f4a772ffa82222228c220bf8a6e1f4ea44ffaeab73315e880a4696a7d11c763e4b9d6c71aca3aecc27bde372c444071c3df971e2b22f9e7c937d57ae6ad5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c0f2dd6a8193ab8a1c8c1c19f414f7565c26ce261a63d584be5acba8b63083a10dccefbeb312e961d1acc422bf75c4cea57a75dbb8eec33ba38709668fff61e8f9a8d37e8593c9931fb2271a5dfa168828d71268bd446f65e5abb7643a58ea6ce97c464bacd035c183c374e61be750420cc1446a4f7ad509f82833d1bc2d44db57be7b632db3fd009145d02341de6b4bb89b7dcf42a225db864c3224cb78e0487ef53f16f5c69b27d0a49f7d76c197be58306435879915d856b548ecf6c36666007f8032c4670096afe9c08fa760d49247db1cc0c91404ef2a4a90416ea67a11405ad3b1fc85a380b676d27106371f9dc98a4977c7de40c2238a9adee94b5fe"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9c93f785b188cd2b0fdffda97a0f4ae789b70b37821c5d1dae0715be170657607d3d7cde3c79e615eef1d7af141a748533647339e9ade4b72d22f511de414e812821eacb905a4a33cdb37bfa89f6435145f91411359db90202fb64734f5331f2dd2494ccc57f39f990ffebbc7b3c963e3b3065d7c4ac077ee2da7adc4bee6f7c1a41df59da99d857d299fe13b862756dfc886a043fb958bc601329853b4501efcee5ca32f6dc71b0b29982a7485bb8e82f4e8e3a7dd28c27fed9a245f4ba11614a4f3410397617d6760ae52a4cd6cf7f9e382ff05752d1681649e86d19cbf231f3ce7060890a3be4dc9d8e63087934f94aea8d2bb0c6ed60571136496886de10"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ab1d4b1e95f86f2b811dadb25be46ce606ce2cd30a071cbe4ffa444ba4e14ec5e7dbf43295dd6885c23cd7d41a4e58e2cb3081f2e5a4ace4ffa65f1eeaf9abaa4b61b584292e8e05ec9efaa37464f24cd9ee40df12afb8803bc718a8487542053597a13144193b614abdd81b10051fb32b3563cbf48eeebff04a250fbc7b298d758f227a029859a1dc94baf2ffb7816b8d866c09af2fe6d0c81d185f17eae782764302f4d14e3a0df7e67264d1768d03dc6e4a75e6c005ea8028f91b130fc17c379bd73e3337b4bad49daecfea91defec4937ae51e808f042ff44792c7d292a437d7ae8b19b3b0ce2ab48df3f5ee7e79cdebd4185dbeb8cc6a9d9c5c39a6bc9d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "275b90afd0379b1f3b50b60f8868deb782fce381bdd8b76518b735f4e2f4fac97d1ce31ddd3bb91e1ffb6ed5b227edf27ec5fe8532687c4907586fc2cecf47479bb63b33e2d1c421c7032e36e5e5a811d4c69c57da6410c8ff8d7cac0a2d61db2dd69a71370ea7269d23599e1bcefb90727f275e5114444c5c450a58a60a35b38661a78221f3eda1dd726267251a259423da8a586448678dd64c786a4aebf9b6102327ba5194fc42842f502b96d14b812667662b8af57fbe85fa53be328fda7840f733d491672ed28564ce713571834b675c6e13c5771cbd69ac5af59cb5412cfe0d609e69901d4ff530675bdaa288cb1272e9377d70543ba2e27875237ffca0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "69a1af712699465ff84ed85dbb35323df339f7627310b2b3cf2b8b9fd4fa5cb0f536680d7bf905347a642c1960c3e17495770bf939b7b3d426ed2209b5e47a6029af076a8e95f9a7fc959041d2e221d433f3836e37b6075a8388a2a6aed1785528cc79348d4dead276988f7f49d827c0ebbbfe7aae9d946f16c7a3598da587710a8d9fc72ca537534959c76a35c91ea90989dd0fce6bbb0d0f8c439188e51e0c82debfab4ac1dd7df3c3e48627039a9d3829a7f08432da36b6ca6d9ba0f9a15f6a61afa09c1ad305c3182e0a88e128192d8d064af7037950574cfd21b1ddb5f562ceecefed4e62c6d12f82135aab2c0a6dba9a181945f56943b4a81faa42fff0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "370e3c05d706312a8aad07b7615d221a18fdafa4c15a7acb236fac8c0f1e8fb44fea421763abced0949a1eaddb178cc583073882d5243d2ddbe40a6ce61bf8958e8c631202f120f5ed34c92a7a69abd17e3e54ab7d28f8efb43b845159f9c4be0632cc35d7ca7dd3e4b15da1a89cb60f7b03c70dd898dd7d3a8b4404e6f28e7941a720eb7db514cf1e6f4f81b8a9a3e25deae08877dfeafd9fb00fdc984b902f62e8ad7b5159858aab2351f94e3f0664d0624d10990d3778ae2182de43bfc1281e0188c48c4c84a4c7ddea5866e2bdd0d92ed0f9aa828d975b1373e3512d3d95994dc3da81ca4ba5aa657fa13ca3ce3c3ed836a3be2f9770977b854b518de76c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8c8001352b612c2a8ce94e15aabcf7e077a4135a6cb9f128870ce3f7ed11b74df002a93e9c7929b504f9c33d6bb1c8193dfaab4a808057380c3a142cdad876290bd68472ab37133d50d3805b6037c855d145d75151c42b6fe5121ccb44c7a624e897b298694566698f49289ae0ea09795450ab9d17dd30170b27fa65d54ca4a07835b3d772dc27ca21e8049dc5751522530169aed63009013091fa7621583d6487029c45eaffcf0c9e7e9fea1cee27da0f623b3e4cb8f73db62ef1a818244a4d00165e4328cb2b1af117eb8daa5cd808fe06e6e2058b7db69569e7db51b072381fa6acb7683e4ad9164b2e29bb3c72e99e0f585787a77c69f8a58084eec664e9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5bec85b7d892bd8bf5452d477c53eab4c930828493ee9092e4abf42f905580413a6ad458f82e78a839a47016b2c6131899abffa563f54d49b07c3f56ba5e4975d216be7a591c6466e472ae46edf2a15c72b649f7089f4f1147cdfbdd1334b07303320a95c6bf8426cb9e6452d3f8695b4e376058db6805a7ad304462ede8d89543a5360749e83ff7cdaa6379941d28a44a60bc36353cf8ed7cf1e3db091d136372d489602ebb1c4a41a6a15663a809e2fd3905a6e62f49a4df64594e0b13737de6c7e38bc16b349c9a71fa9d8c519b6aed9cbad2984e13a0d75a6d24854823e6c8d64d891cbd64cfbbbab9157f4a015bcf9b6bd1465e5badfc462e51fdaaf698"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "715e5da4bac91cd3bcb85f2c017bf98d232f8ccc0bd01673ae81066f83e3c852204dc7c203c24c3b3ca2b15e570698c842377ee04ecea3d983e3f416a74497ee7d67d6bbfc2a4f41c49db3d8bb7463a1db38742823dc24a17813223c11ce540cc2a87aaa80b9a6b23d0d4d86bc6820e914100f9a01936403c410fb1be5f2cd9108504f3e9f9c79bbef1a925b0235e2043e89b6b602d9b1b1f9e4447d2adcba618d8ee5a01069e15023af60f8627227fd81c6fd708636a3fd36b5d5969d9a505fd8e0bbc4e143748dfb2b815d7c66a3945d4ebe4c1c91ba3609ac3bcb1fa2d6d00af4a060139e1ed0439bc1bebadc2c5a21daf8b7e951b67cab8024fa17e5b8af"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84f7ce7fd2dea710a2513ec4e326642eb8a467a4d94d2c35c50edb9623026ad40382b25a983d95bf6fcb8c13310deb1059f20f8fa8131480dd721842de05baeb43ef689225837acea2af91d66814be312fe0b0408fe1e4268c79092e6c1e45b5f9aa44615c0763bc76bf84272b8870259b2eb0660d841d6c45e11bcd521dccd7db749b440aab67d831ddbcc228aec2e80f173e798fc413c2bb980cf520e878ae4a1be675d187a799bb9aba6cd485aba6c0994ca0868116b12b192bb4f1b037b1b255669b9dc3bd885d2ea2752ec2839d2a09005083c5256ccb29bbee416a05f8d0128f27e018a943b52fc4890989ad18079ca24eeb22bcc7535167ccccf1037e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f9e300715f310210801eacf20bd6a6ddd4eb1ee80eac0fa1047a69d63e6e15b607918ac25de75d2e21a34cd6259c6a2d4484ddf130338a94290df40124628d224bd34255ca5ac22834cdcf64ee92be05dc23ffd19ce95755321e90dfd029f7c0a4d1601b0eb0f8f8a9dd5223ab597bf74629dd571613a792008f23dfb8d99ddefd3b753923a219986491cefc2a72ccefe6277d9c99bda215298f5e53121735638866006808c744e99c35f79f2f35a56d07b8923fb558839d71604ea80bf98ab11bf2e6f945cdff4504832c80c4401f573d41d2d5d0912aa182c8b1dd96f4aaf4347397d2ccc0f9f63c75d8229f72812c440d7e9c3d09f134eaf9d3ec47f0e66"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "581afeec7d9ea6dc2999a2e3039fb2e7ebcb15a416129077ce1ec60e0f0d0dd9d81562d58e79be65d5227671c06ee1f065767fea6ffa543a68c7864f330f852e60c923b97433a416711a068236486f6e3005a456305a36e7160ab194b25de50761353e9f8e824e55bef6fcf3a455fae37a309af15ec9f094bb4cd51475449829d7363f573494e027f0f61c54073ec72dee7ff5f5b1ee952001eef2bc241c5fdb9977ee9b4a8e046d5e215db5148e442610744023ea1439021befd095b22b41bd129e17bb3e529e9d3e85ecc47f6c7c9f1bc4a41ad8001a0afb38186eb849c79e024f2f28933ef48325ebe25fbca14f01cbee722e5ae9a2ad2a8ffc9492f86d53"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "1053d3c5833e6c78a00146d55cae8129b8fade750343b5ebd526b51b44449cf3367dd8032c3d3d5c09a6b20b89977367238c0bc65a7d6ce5972e13feb1aa72a54258acd2ca207dbace39b9831158ea4151986932055f780ca0b2374a3d1d2f32e2838c0739a37ce247eb9f164732ad3df98aff545cd9c4a570b82e18d1d4819135011cd7082e2716ebbc1fe927fc9e575733a38a74a0a632212a7595bb7dd92afb24dfe06722a20d8efbe8e4fc5030730abbd7a2fc22f907db7e7a1de84e62eb93fa3fc728392f2ebd615b5bb3c239ce58e89489679ced182f8e95dd4ef159b2d6f9ae4e095cc9e02e33bdb640d0d4853f380a7bb9a011e784cd334aec42ce3a"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "0311df808b08ed6a5f1190d36f8932e2db1cbc5194005dcba53a8bebb8798914265d1c3b8bdca66b1212ab8f9957a9e333eed8ab4e7d0674b62a4c33af819f09b7d1e7aebbd694a7ee3fda8a920d6041e7df7f1eb223d9beb468293eb335e2a2607e24b8837b62d41391d159b09b5c34ba92cc74c843c7b1516b504e5612d619f3207088c56c0eb40a2b28accaf7e7059cea8c70bec8ed59421e42df6551e3ff309ad4a2236ea2874fbd89ae683f113a1b4c8682d59bfdd77387cdd4ea3d2895b70706bf1af0d08dc1cb76657477c06eb1a3ab6600e62380714abb292334e59950003c56f01057a6681d3543783db2765440c5c2f44634728217f1a10902010a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "303c8abab7cbd142595120a922bca04b9fe346d11865aa1d5d6eac6f2bc024a6577ef941d4fc4403132c5126c6dcc2cf9eeda27b58d2028db2cea33efb529bd14a216d48057d4aa194706a5adb7d9e6181b53416ae1a0f24b4095008716ea4895bae467ae807a1acec2726f2245e9b394bc3e3e93c550dd4c15575309288bc11a07a2a19cb2fc5a22e08137d9ccd3182ea7595f5bc062691e885e318ed592d98c7b7ee6a33b8a02cb2cb45b6a9274659ede5c4bac5fbcd306b8f3131dbbead9fc3c1741d3976b5dc62ca36217366f68ccd0e1fd2aac6554a2f08eed1d21dbce299a96dbc6712a35e542c9882d554684dcd781d5aa674e546498293e670ccc278"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d083d8dfd9d7f9c025ac87bcce1d412cae312c62d553bffd242478fb79fd0229b5dc05cbbd13b30b96c5592afb54048a95297c9fc2a09a1a4522f557c8eeaab6e83963b2ef5c8e2f0f313c03794b03d55d99f6b5f520f1b9b8f9a314358dd93770ebe3e21e3a1e322dfd4ebbf59ea6248866ebf903db73e8a7242a6397ba78a07c81b8e5b53b1b6ada9a57aa58bb92903fd4e6fa3bb4a1e363e11baae93fac476ed803116d9c273cb818583b8f4429b752d12bd46ff2aefdc62097ac7a34f66188f69ae4352446f2071959fc9929417db398b653996fafe5e9efb656d68f971fbb37b1b9923d7b9b2853abf02a4b007c77466c0975eb959082c2955cd0f2ccd"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "baa84bc0a1538d73ed27536fd361376cd460746fc3cee0ac5e1b2e974387e6f777f078db4416a6daf8830b996c732f1e2d4bf0e3ccc8b997244ef6df1f63b3aae80bdef214a5d84400ec4220f370af9ccb3a8a4ad64a72bc1a805aff670f0fe8e19f572b3ac3783e0b6801a303cb79d5333699557e3e0caca2065607a65be01804687b9857eed93c9cb0a53d4faa367de9760c67db81e3192551c9adc3b104600e6962aa2ddb2c710128571c107afb9e59f20ef608adbd255f65cc0914681443c90c5c08a8d5dfe58929e213c0e8f98c58a8bcdddb6abdbb8b92a89dd62578597c273df393b5ac640b2ea04a52639e4bc0741fff484358114672b517d2e5cbd9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7a77bf1e514d7c9de864ef64c8588423f459a175e5354de858e19d5cbd709796ffad275a9732aa534ad47b894ec153493bce8a5190eb833e280a528c5a5d5de8c404679bd0f86d2ce05ad18f04216bce377e4cf0ae7c5e2c8d4325ee4a77c4ffdc38afd2098a57f990ff041bfb5d7dd67511f65c8881f3f04808892fab013fa9baa1052a0b8b590c75b527a51b111d9a00a91782c99c49ddfbbde18d30188fcd44f5cfa151e52abe554ec10cdde25513ec88dab34d84c4835767771ff3a05f26a432a7e492e5d8b1de786bfee65f58a7e876347c89e98076eb301860080dbd594b33ca37d581c8a9437bb1acb2ea069edbd8cddbfe74ebe917a54d56a475d441"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "953ede0dc0c366449743e174aa784c771248b73c0cbc759c05d555e43ea910dd9b146878c44f6e373a0a660b9e2da39d4c52913f3ecb43f946bf7cd99d37f89fb81fda7016442978b76bf11ef753b60f012be9fc54fa2c387d42bb9bf07505a8d09e907c38e869306a7d37aea9418a572883c1534226f0f9975cacd420eb78ede74905c9406f7095d3aaf6a8ea0e1a7fbb423ba69a48db73821cfab6bd2686cb149250eb0ff1ec0ea53c21dc5726bbb2d59d1e112333d95c93660cdbffd62f95632c89aba586f51efa48f4a9c0cb41b8fb8f5ffdc6532bf3906cea8b99f626d8de70034d5330bfa09d8afd66a190381ce7054acb0a7ade59347301c4045ce278"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e09140d55ac86a88eb1a85aee1e4f40dee345cb8db9477d2a3e2b4f8e326015977f78482eabde5c4cd425fedbd9ffb8a766b4be517e4461b04e855cb44562a9b1db0887c94ee4e83b61914c03285eed9d95794652ed3e27b447f56e9473e3b213622999eff62579de1f37004d41a4a21faef617282d8ea5fb50c7c365581849344ffff8d09e991500a1c4f34614983915ec1aaac5e4023874607d915b8ddf2a031a0d4185ac1d7049d4e69a7fcb342e3c4bb692a05353b6b3bbb1513093be70fca24ea14cd1de23b77ec6aa0651ed53c979a313495da07e3fb436aeb8e0dc33a85c573e94f5bafe0683c40f7389c29189b9b57977ed37cbd081fafd3ddabb76"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b58a3cb33eaa7bed71644f42554cada409f38391e98244cdd24adb194233e01172f0688f4c54e3dd05e88ae0c6cb4c872c4e0af02e50f4d37065d6f2ad4015ee4eb6411e7e4944c957f5293739bfd441564ce9dc42a9a51bdfe08d66541e9e84ec9acb65dd2cfefa2840e6908d184bd4d0fddccf04be21cce769108d48ce6a907af301af4ae5b9bada8554dcb961e8c069cc7a843c91292de9a0791f3c558b0f84006d29c6cc19ae8ea43021400a8959f6c5e217a70eb76fd159cb7f6525d884a42ec2e60248d0c5000afe787493796232b4459ebc421c042d247edbd908468805e359dcb357518b305a15763004ca22c3790016dc011c3cdb3d270a723ba44d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6113097e7310803dc1ab5c48b0b45f11816792c43c01b57be7d6d6f6c3f754ee49bbe8b18650af6f2221d428f3a1a6d4eab3bcc8775964acd3baac5bdee983144aa80d8c92cc725a78e31b212bd211ebd6dab9594421dc02577761a99668ac87a34b733dfa7dd5467a9c43fa1b487f2e2fc57edd744ee291520f6e76c7d4a3c4e986e7659ecbd675bae3f5e8f867af4071060189f8e877a52021f2014e93e560c3ed8cd89466cde155a39257303ceca3ea708e14e4591cb369c1005742fdf8d913f2f0b166689aeb1ac3d2780cd4bc5b8dd33b8a86379707dde29699eace7136c164f5ad0645d16ba93c729fa65713318c337d079d56b23b5fd3333aa0dcaf5e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d1f4fd892a565b46ed9de8894b7035bde92986a587d02c430453e25e0e326b6fffbad076fd81c0dc9d9bc4d87743cdb5cca6614b45df9d1b86be946aaf94db1262e8ff0b735b05109f2fe40764c2f94232d22d08a06dd7902e09f7e4f71304f3a8d9fe9c9cc655588cf4dd994759479bfb3d5fc3e3e12bcd14017a1957b2604ed09c7098f12bf873576945a0891eb01404cd138aaa17a8407d7b83f754c7c07168f34d3ea1c0d3728c77c48146540907409eb9cc3590868d1d3698b8ed1063558b1fecc5173ea717c6b84863682f715fc100dc37bbcfe956e09bfad6d79035dbe1ede50ce6e002ee07e97c465b198d38c8905d8af135db180d794b9e43535c0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "cae4073ac306a297dbe64f6d0b343c9d580754f82e27343ce6e0f7520a0e25b98a1c504322598c81768fe9a99f954352c39cfff7041e31011ef4fb3d9c1012f8cb74211cdff6d76d0542541df77e2fbdb415e2b47e6717f8d9094d004a69e7283da092c351e20f7397aa2e1409c076672ce6920a347632eae4c0bbbbcbb933bf70f66d0d3b62ab95bfb1808445f5ed91f5325908bfc9eb4da33dc352654f6671ec83f554eca4dbea1dcfe896d1dbecc521a8ade51c0e1bbc69b076682d9d49080def3564f88424719ce596be022114e21e077ebc97fdaea9f0c6ba1ec817937605c7e45261e45e6001694d1f6a85fdbd8df133bd14cc546a5755bef795ffc96b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "980b9b0f09e2462fc6153905c07b6ce955b1748c4cac4dee4eac36b525d429aadbf2ba9cc29fe7797b8c8303d72f999c2e2c5847c25325699064ad5d769a6b0ceaaeff84691ad2e6a6d9b7305bbefc8929afbd4b8121bd7dcb290ef9aac59bcbbd45d6a3b33776131f26737e2f5b7d7ac7cce4f82646f40fb139d53a7740a3ef7584c1120fb8171eb644d33051260012e060d3404a1158d1716b6f2b85a5a837df705f9646d99fd71d519925776c5c09842cf40b135e83ea5a116c830537a438043d31b8939ea45a1b50540aa68d6be146d5f69fd07915f2af4ee212d849feaf33136cc703c00832bb195ff97a6ce4783993a56c681a62c290254d4ae9626591"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "036c1b89e877ab7a82ca59dbb56ef4b93392f86c5b67414503fb561719e71236fd6ff1d01fe6b52d0965de40ff58470d4296490be8680d3d976e044bd3b2c6fe7254fdc3ce4aa1d0ab06d09595dfbc356095852ded0555bde6ce9f9bd8675b56e8a18879d8152a38884c489eb538c21215a3ce89081583e74b4c31bf4b6aa0f8a3fc5bf3732d60c79646691ca089d6a44aec50a9d6f0b6d2bd74345c994cfaf3eb092dfb1130fb579ddaf871c750e722677cb61111cfa01c47310a8f37f17fd2bda175fd9ae1e7e96dfd488b6f9d9c1540dfca2b92b9677bf45ed13cf74e351c13899099cdd957919a5e03c82a85904327bf392e5454ca24563416802436b7e7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b49c7f85c2675b38f75d7a164eed23a6a98792a3bcdb80a91ab61f125bd6305b3ee829665dbeb5b7ae1b1c29d2b0b935312efa55a35cb84e2209cecbdabbae52176858eb3ede898e52bb2440c7dc4e993ecb0ec2e0a6f8fd2524c7a41b6c48612d13aa8f3f715c075c79219ee3bf33a4e873932f08176adc2a2a39f6c0548e1c36241ef0dc238f01f55d381ad485464e2281a7763be1e52127e244e38ce219982c514682ff9191cf9776047d3fec3b6ba8ae7726ef1d2f270587daa6dc7c77d90685bfa93ec9e1f8007e73d24898ddd8c629f2a50c8ba7615f50d469640870a2df9bc3098064e07d00059c2ea33a0837ead2991e0eaf60d36cae57410d3657ae"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0acfa7202f3c923e0c8122dae456d0b53896b0211b59cd207009e1c31211296561f85c32480b64d33072cac74b51795644ac667289cc4c0d1f6aa628ba4bb91e552eaf4387cb0ae96142e71e097723647edb0e3238a10a8ae93a506fcc7b9c82a1ab9636e8d86ac7df07805058f459461326778780fa35060706de773aaf577515cc054b8b405cc4f9592555656831ce391459c83a1849832b9e9b351174ab17be00e0f37796c2dea9780da83672673822db786bf0f51164d212a5fe7717a98e2f285719f0974f8db6ca46768d85de095b5bb36d780986831ec777f78f928c36419fb83e22200df39401fc3685aa001e4bfa2785c3494f84a9fc89fa1088764d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7734ce3122b0538a5b8cb928d4fe654224f8f8a092871a6231d1c7a2c12c55013d2d97193209a4a329d725512e72f7c6f74535e34f964db4b0bf70d83df34f8b90a1527195eb5778c422129fc295d0bc32faa0d9bdec5982447c478967a4a6dd6ac84aaf58116738c08b00225b052204ad4cceefd5485aaf265f595b62512e098e4d3b8103db71779e54665f9ab5bf6cad7b1f90c685543bf2744f7f84c5302bdafd85ae6f14f5e2aeab1fc73a5f219221cf3f01f47611c55cd6cdae9cd32911f49e2efeb7ac5f9e9d68184aa446c76874b0581e6d40762e72c746a83d5b0f88825ac70e161948ce257a3bf1c68c2ca4f562edebe31836e4b3b28bb16bc00ce2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4bb64d47de62e15a042c21ce6a46ca4a15b9838657f84a983ebc7525a9ddf34200bd8933b68974981ff666ac5d5daa76c460c4eebf38cce4df0d1c3feb1785cb24ecd747a459f90aad1f033b438c34bbdf5abb68e28d21c7b8d616b4c04cb582c6f8b0b32bc6596ab307da60745e410ecfe4c28f9ac129b2f1bbbaacdbd357f8217723ba51df8db9bcc0b57915542cb84465397d72b57761136468b3f8f0977a4895454554da60edaaf39d20553155aae5f8c60fc241b297ff4a44f96583ea0614c84a88ea38ea2c828138b18ca2a3057f7adb678f28522cba7eeb87a7a3e9ee77961d56b105977bea9b18890da2c16f66be69dfdbb7630ff52d483a0ae5d512"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "69d519bbf8c5b8113c6d9c3f4c023dfa495c5b48e1c7a693187b254f2131bf81cd0ba7f36beaf37c4930071855fe7cb7ce3fcf11e95b5857fe1cd6e6c52e8ad7da591be10ef2cff4d6623c04002e63e9cd6b3c7f35f16ec6cd258b8d72b5a938e7962a642a8f90db1f488d9db938f6add210f3d04d6a79a3d9790167d14b0ba49df928e4c02a631971edc5ac319424c1346b81b583cbf3d708b5fe9fa73bb91798be7f7a50765ff32f27bd14e068f30542f0bd6bcffdc996d78ffe3547baacef3205e3376e8482ae67bc421a22e582f088a3f0304f2278a7bf1bc2c48241d34e12f0c499420a8f17736a6dd72c6b855511b16d5c1ab109bbeec466b62595bf7f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "210c6cacce03e62cfd5509e6f13e62fe3f78c8f93e9dec45b4096cf494bcf6087485cbc19690e09f4fe2368c8a3a3554af5438d5ad18daf1e9786811ecd1af050b06bd054ccbd7e609e5fdc2ad40d5ca775b76e145ff199ecef3bb94dbf5c013525367cb0c7c010436f24244db3efdbdf61fc3f4ea414191e921186c89bc5b87d3e2f0e016326f11a0bc750ed9ad1f5ed4eee7fd58dae803796952d9e410a28a79d12b2d18a6cbb4b7911d7e8a852273a15461ca824c3ed373e647d3d8db631c9d5b79af7568eb472fa443f85bd9a54c91c741964337c68703fb8ae95d35d12a4125f24537882582a2f0d00da45faa43eba465d94b052b0981ca2c60db7fbd06"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d710e255a510372879ccf6c363a32d0bfe5b13ef13864e8cd8781e44ee1b10298a123c883330951416891777d166146046c61f13fffb1934ebfa15d0718b917fa31c0b57061b3142fbc99b076d7430580565535a8641c1f7f0e38bdaa54fbec65f7f7f14ddfba7844e0b9de34f573b36b9e9d34e9c3edd13983b75576cb3cd92c39451df5255c4a2c56931ca243e3be210a3a71da92dd963441d344f21cb853d7837117a4c402250e22069a8f0ed9a0c96bf7012486d7fb0c1a625f764279816a43d62607255e33faa3d4123b0dc3635c1da802448157570941d406e94e1fb844cd06719bf98ff4e9de5c2bdc86d8f69202a839455d00803f95a72e6b5200b7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ae1cbefacd6fca1a5fa2cf36f610c04a225d87684b50b940235a0f414b734ae6aafd6557c81fb3dff3ada6d46ef5cc55269150130682e22999b03eded34d1b2500d229e0714e36038aa20194d559ffc79009c89196398c7e78ed8b648498203bd5dee4c31973f986185daaf0caacce8a89810dfa69c93d22c8947476c7be68dfb9ca399e207ab75a96dbd80ea7645d2e64c901fdc9ea0d72840ea0a29586edfde160df945df49aab4ef9a0bfec14d16a975bd6a24ab6ad499943a2471053911a49d3f8cb3834261b45e5ff796b1288195a74965d9491681a2f1544a78a67db9afefec24f1f5ae1334aa4fdd4b82106d134b33a20d44f7100996486e4a1c412a7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "45d74c60eb0f364ecb8846bdde2b3ff1b31dc1b43f0383f604707eb4e06e15960f5976ebc5c4c70c2425a117eb83b7d0a99a8d6209e4cf01a36baede6f2af2247bcd77bf3a435e035b36eae108cff9b76740ab79922765765f90e5514696e03e9ca68a3b7d4d43ed0dc6e5b0e241f2600c6845247f90f0568bafe63410c224fc741d61f433efc93ea929c56e7e6154adc9ac3a801237c505fd7fdef3e1e606124732092cf2de2897b29260d84dc9136c6edb32e2d3ec205ecd38890cc11cbcad9cc3698f601abdaecddad68f07bab0079116fdfc092997c1f1c327c00abbe6455f77b5e69ccb3b4f1c946da0886fdc10f41019ace973dc980e9e697fe48d4948"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5811402a92acd17ecced4d44417584f5f36d9bb8cd2f45ac6629e08ed4dfd0ee1e41c5dcdca170f8e5c1f15af9a1ce92da9d077a4341152e30e9b549a497d9f0aa46ec9e36cb2f4f05bec9d0b562a71d7822874eac9f7a25f18dcef9342e1f0c5883e7788f92f6f7078ee95cf53daeb1b82cc69dc0e4ef7ff261897a29e9d7c5882740ac04466ed80aac354ed0decf9a4c4d3588ed3a55b6e2ee6254f08aff183a04c13e1e2dd05628b08dd97e23f48f7cb86ec7f86efbd750226cbe9850903446b9a8346dc66e979d4da65508cfe071da7c31115d28aaf9de6ce445eae18f5245c344e569233d15b7964de3bb9b566c64f2d04844b509bdf9d5245a335a0f9d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "cda6fa5ca76bfe0492ec57e0a3bfff7272dc8d1e25ad1fb338aa050f02c104e63133d6b5b7c4985ebbae9ac036a5b9c03074d60aec8e25baf392a0c430ff05b88e948805d3dd74511d8885250a7b574215ada015c559076686e253ccc96c0815b1291ee787cc3363b4f77d930eb998d7c582b24cea9ce21de9722791989863a27ebc80a00de5bd2f9228775e5a4ceb054d58c9be36a054336971a13642dd9510dd696aa268db3aab2299d5d88f8e562434d1427094d3df8e72d1ef69b4ed34d12bac375223b2a25cf227f735f816e85e17239304769a6082154cd15899fc1eaefb69b748a3e5ed24d38372597de3e4e2a27b951d6ac7db182d6809d8ff511b7e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "cda6fa5ca76bfe0492ec57e0a3bfff7272dc8d1e25ad1fb338aa050f02c104e63133d6b5b7c4985ebbae9ac036a5b9c03074d60aec8e25baf392a0c430ff05b88e948805d3dd74511d8885250a7b574215ada015c559076686e253ccc96c0815b1291ee787cc3363b4f77d930eb998d7c582b24cea9ce21de9722791989863a27ebc80a00de5bd2f9228775e5a4ceb054d58c9be36a054336971a13642dd9510dd696aa268db3aab2299d5d88f8e562434d1427094d3df8e72d1ef69b4ed34d12bac375223b2a25cf227f735f816e85e17239304769a6082154cd15899fc1eaefb69b748a3e5ed24d38372597de3e4e2a27b951d6ac7db182d6809d8ff511b7f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "939e1ff494950e18e55425470626db1e2a7f88463729033aa86d619736fe975526c391eccb026d56d450e6fab9077b87166236c272c1dbcf055b992cf48c5fc084cb10dd388c55e1cad22d3bc9f83b0a0a65b7aa535f603b55ac154fbb5fe8073c9fa808a7b3591eb46e21384cd379f6a7e4142a8b71725035d698d1ee9d281bfafd1d03cb6fa22aca66594b6bfb0c55dc7777bcbd306d448baed850cd8ece6c6b3300dc1ab0cec5d86447d9e396b57a3663f107c2d0c967f399cf493666b90b79c4eb8320567c4cb5fe789e3696778f695cd9c94805155da4cd7584bac35e21f13c8cbc2969317658abeee4a53ad2a2195106dbdd593360aba03f7694e8e9ed00"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00009bc2fc58e6db83a04d327571189b835a63df65aa3a41918aebd7f97c069cd499978370e4a4e46b1c27165b51f703beb3beb1c0a3a83ed6613dc840b58612a996dee3a10e1907bbceb5960e4f7a0fa9cce69a3ac34cbbf10b404b685763ae3fbafb42f125a060626e1136742d4ccdb469b3a6b58fbb4cacd3f5fe88da8838e2d2645d11618067edc8eb6bf6f96e1055122cff85c423d113cb4e9e1303c268dd5ceca5a201bc17d582a84ffc14f7f5e654a25a89486d54991f85bd24a6112849f38ccff768d1ca3c44e3e6e6a23e177426d26bb1173cba60a7938bde64b02432db83fab73c3fd4f10578f826ac3cea04172aaf43d60455c2632ae06c7665ef4537"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9bc2fc58e6db83a04d327571189b835a63df65aa3a41918aebd7f97c069cd499978370e4a4e46b1c27165b51f703beb3beb1c0a3a83ed6613dc840b58612a996dee3a10e1907bbceb5960e4f7a0fa9cce69a3ac34cbbf10b404b685763ae3fbafb42f125a060626e1136742d4ccdb469b3a6b58fbb4cacd3f5fe88da8838e2d2645d11618067edc8eb6bf6f96e1055122cff85c423d113cb4e9e1303c268dd5ceca5a201bc17d582a84ffc14f7f5e654a25a89486d54991f85bd24a6112849f38ccff768d1ca3c44e3e6e6a23e177426d26bb1173cba60a7938bde64b02432db83fab73c3fd4f10578f826ac3cea04172aaf43d60455c2632ae06c7665ef45370000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00009bc2fc58e6db83a04d327571189b835a63df65aa3a41918aebd7f97c069cd499978370e4a4e46b1c27165b51f703beb3beb1c0a3a83ed6613dc840b58612a996dee3a10e1907bbceb5960e4f7a0fa9cce69a3ac34cbbf10b404b685763ae3fbafb42f125a060626e1136742d4ccdb469b3a6b58fbb4cacd3f5fe88da8838e2d2645d11618067edc8eb6bf6f96e1055122cff85c423d113cb4e9e1303c268dd5ceca5a201bc17d582a84ffc14f7f5e654a25a89486d54991f85bd24a6112849f38ccff768d1ca3c44e3e6e6a23e177426d26bb1173cba60a7938bde64b02432db83fab73c3fd4f10578f826ac3cea04172aaf43d60455c2632ae06c7665ef"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "521e5af2451d73b61b7af2d81eb427bba3911a3f2e61105bf38e15c74196c8e66d52239936aa1a7823606fdb4d243b32dca2c4a95cb3b302fd34a9c0879711095b4d1e75c59d005836c2b9a05ec1daa63148841b285c10bb70f4683994fb0a598b927415ab2004dbdd6405d57804ea142f21600d5bf5487f3f7419ee2c2790a122199cff03be53847cbda28161f37810f046df1c54ffa9e3070ebd1f8b08b3293c6a160ef6593ab497415c2a086cd5242f3509b375f70e12435b01c21bfee65f2156448831050eec3da4df7ddb04acdfd89a5cbd5f9afa75a8e3871378933c1483c28c1bf405c42625b673bd0de4737ca144285af3981fcaa7302534e8c36e9e"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "682272b36ee1a6c7d4d73f0f3f153d8e84e2fa4ac812581fdda214a7b45d6ff7b7b3db0c89da96ce2e651fcfe25596761982799289b9fd2d69cf122e08404c9db0bdf6f8240b1545e76302a5a401ad56522e0a6158157dc1f9445f8cafc161b25423d35671d9ef714c5d33f7fc155424ab2ac34e0cc93bf2ce385721dacdc6251c7e3a5618bdffc8ef3f278477083a96de83303b9d286e64d8297ef0948b996616d34036bdee5538ca0c06fa08c72f03739fbc578814b402671f5d625dc9050d61b389d1f0a32011ac0dbb53b9c2980d315bc16e2272206a1a955ee870df725e78a7c6e9f793f5428af92c670df8e3bb0d567699714b04fede399f49fe19d0e7"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_2048_sha384_mgf1_48_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_4096_sha384_mgf1_48_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_4096_sha384_mgf1_48_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "e3ae7de5bf44de7d357e238c8dff063ca713470777ab786b495884e7a9ba1dde65de7d2b5be3f2b7d1830cf6ca8ed5c05d3f094aaaeb1dd2e4b2ede08613109a9ba34c7e2bf8450225974374459f16da2c14192c637985febebbef01f0381e78d0fd63b76038f5e3d35dc7d2243963366af5d7685f1bcfc99dcb91e94c93019068353122edd03cc3e615e17c1bf1dd7c43dae86f47a40238fb594041cebdba25f3fe9593a6c329b7f7c476eab7625d17ba7be7886936b733f8dce6e6c937f588da1315c1117abd29c83895d95988d17f9fd7623960d8e433d7c6841507ff2faac36e0e19a41eb2cccdb2a2c0fae966719a99d203c924349bc0eea1374efd3e23099b2d187922016fd014087520a67363687322b90d7a890d8f4464a8c794d2a3f2070ccd3b0ebbca2b42bbf8eba6f2c0bf8008b5616ee7b81629ebff97a93a5b861989daa10da7c8e3bc7b0cdb095f6ce1185cf8fd3dca035eb3e505cbe022d81d93945a144806b9fe0ba07f3ab9c70e72b5fb77ac6e4c7e03aa2dce7c5ef227aba1acd48c1d93e0e26f01e8f1e43aa97880d15d6c924b060d1face21d03a796c86301f4a74339e472b2f96cd0755741cb9df3535077381ada84d1bc0846a6c44c8a8d3cfe1b7a9913d1f3d7af2c5ea4e67ce0a7ed3c0058206fd13ad9ccad5a8212f3ecd788368a6b6148178c7c5ea8d6d385227f2c76a047216e5e206b1ed1"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(48U);
            {
                auto m = ""_hex;
                auto s = "012e59c7c347e07df6c1155573c2e4d356c578e364c7ccb3f31f325dde0b6aedb5b7f69444f146f124a4b6b29eb31fabddf409f2659c3ba79a3ee56266fcf39e62dbe164e767e8d375a7046be933639b50b654fd70190993f5a91a3a1fc5c2ed4b905be6a936dbf53769332107a7e3c0afc0c3db2f0fc97296f88140a21ea582ccb85265c3b9356ec053f95eb21a9dfa47b8cfb4b9ae58e9bddd004f8baed6d1d6ab8866f295a01bab86e2fc12251c55ad7a4a15a53ca47adcbcb0e7e34e7aa906f92d82e9ae23556dda560d83754731f03401454e428da669da8768677c3878fd82418a17c0b251437ef7579b9eb8eb6c7b47e1545597a1b069d0cb2cfd92ee579da7518faacc3514903c32383f3bdeee17c115141fdfb0466fb6b3393c39e1c7bfabc2f70e6ea31366d5765f033065ab2d159c0dc115fe2486d4d43f0bcbffa8098718d21ca243dd1f32f5919b74724004807cb76c05db4c2358b1067bef250a89f9643e729c156d2ac01ddd322ab608784912a58175122052243b8047320f465fb70462edc206b492c780543bc6f0549a9645d00e788c67930cde162acdcbdb3e8c1110978773b7f79e4ca5c1eb24c4148b8d4935df75a54a6191df5fa9b9feb5b7fe300759deb8878a7b6d880dcf5d87bb7bf665b45f25abe710d17b38e6fb8a9dbc343f77b238f7096c0f502d78e15be6cb7abb3eb7234b1cbd77f10a2d"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "9201bedfa253b10fbb241c6d96ac6be3a650de9d1298fdbca1f6443651e1b5ad5a67651e5c5603ddd74266e37981eddce8ff0f7d2466d1072d4996d0b2995bace6f698b4a3a9cd84f69a6c9bd5a11783d914b8fb24fcc3dacc8fa22c85aa73ecf4149cdcb14ae48c7f437733eacb01150ae0d25dbcdd034da76a9065ef1b6994eef7b671aa05647a93a22857cf287f06f021acd67dee6e8c1d39592f7fb7b048af08ea2d4aece4517bb44ded9c86c3c215dc44a2e517098a7cad72113c07b71703b9a26996f93a66f4e4d419eacbfac86fa5c862bfa8092734a3796fea860916e849d0eeb81d02103e3a9f3d2485d9a10961292ebc32eaadc2624b1c1dc1c021aa12ecad4fa6184b0e00b0aff4d5ea42c4fe916c10304de9ad0029ec63a4f1e4f627a297d8e803e86af219c0e83b31a12bdb03f9725ca795a74a73f88febfdff2d691781570fc9d0bcbd4ff1f549734b846b07aa9618d3776cb1a5d937719b5f0cfd03bf5d839d33bab6191df02b9ef920d8d3b0a00fc658f726b2847f289a4d996054e5e90099312bee6d979d30641778fbf1e0839fd9dcf59baad8082a048e591ae7b92ec50059004b446838accc68ef9082fea912cf2628a7887e4a2a9f46e04b43632969ad7632b10469490c951e7fecc4122508ed55ff3bc5a9011c1e105b3e1b9f5a4335140c324adde7770011f891b8c64e080b1b60ce271ac58f3b81"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "54657374"_hex;
                s = "a3d6b617082cdfc9239a9778bf144c3c1ad1263456e371ea285e0959b547925f2c0fa07afe79fdce9f23bd805067c26eac2a881b37578c83965197216fab5fe3e011b91e8dc84a02abf39a965d76deb86f8a3f2c628f3d0ff61b0546078299e8d0572312323877e66004c62b174b7d6149170b8a96df0c8b073eff5a2dc1b1aa298d6db2e70dc80a0f11237c41c6961e6919fec8f9eb7b83a99723819bc016a1c828db93fcc545ed95285f20add84cacbda5d763ba5566dd4429f49ddc5a55ca890437cb19c898eb0ce3d51c7a73f0aedac39348870169a1716318173254d14336499e8db44d0f327da8f222149236aa6236aceaa7056e7e091e407e21e150d0b9c3ec25fa806b24b02ab7b2df981bd1e9f1ff3a1e42e39c88e449b7ddb2daab1ca273ed4bb8484259f1f2d01d7434f5a1bfdaa81e328fb674c8fd54aea82a9e718adb599a65b66ed5910fbfb2d78bb46a269707a5e2babe149ecd127a5ff3344bd03b5a97854ebc5bffe3b95b969b725093a5da52e2d680b6497ba03f8b2e9403a8de3f85254c0b94232d47d973162910f50cd7bd9a3b7074a09b475209ed4cca9b598af50ed7d19bbfdb5bb4ff51cec984118d03275e6c1056cc113162f482002a3d3a0cf2f62215e8cb1aad01a669ddf9b0ab443af57bace6c270b78faac6ae0a317bb6f9967a26c75e569546562afe28afa2ea81def1f3be344f35dc0940"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "92528f459c1bd0775d8c4655fb2fd5e8040f3265bb57fe1ee553c48f34738f3d5ad2ae40d6037f02a23989669e0ee9835f3fc7444213558f2eda9bb9485c3b81d99fe1ae4e26b22cd5ea7268d489d291d4f5e47f5cac8fad31027cc56138d5b55b3e45b05cc858afd6ed92bec181e1176b84ec33f134801aba8620b294b2238165b8182dd30c1831307ec35944e1611469a458ed3eeec14805562f88eba7e952beb9c19a8ec9c6a0c7e2418d0ade519c1675ee3b029bfad20c434ecf2b1105e76592bfb0341380adc413d566e62c9308f59d6ee717d25c5a2887af1c8341127b690156186a7d265fecb99a08421c89c8da829c6e242f561876919b229e73cea2f0694d8bff282231ad9b010e4d1c65483c2acfe70e0d840ab25e5d181ed7ff884f45d48c45934a60ffa6cbeefcff85d4bb3b6187a7d1454a2c08c5fa222715bbfbf707a492ac8fa2a709686acf466966823473d82a7d7366e253a41372fa2200cd4f3cc4d78a4bc2c425a53d1580f0e3ecc17b48bc55a8185688f3362a5ef7cb547ef4524606ad3e317f0d1027059bea88a0ed7fdf44515838e3a03fe059a804534b482801e5b1cc35ee6bbdcd4c6af53899cc97457224b8470cb72c4c41cb180ca639e18d45a9cdb38d27d9a82c04157c70d5ac18b623e79eeb9ff747289b8580257356e7a2488f0811509190aff1c7dfe3e28019f5f861543af0004f897ee7"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "4d657373616765"_hex;
                s = "8a3166dac4219d4122653164d8a7a756fd44439e54b053076fa70c6a8d2b5754bdf8e18efdcad42c10b927cacd75d9c0da1dc3207001355312186f7e89b4fa388bc9585e4a8444281abbd9da5cbd0ee2a5548053f9fa4727bd8fd7995f4b950093825649105b892c4af33b98df51d18e10c710bf73f22e7aa03979e0e245c88eda06717afceeece2b95d31290db6144bcf9e9fafd6f4faa7368c2fec17cef44a0974574ead1595a3207ee55f5d6c9a2b4cb9158c2c6887e4221b114c2e0b1492f9c0e19cf966339ccd909deddbb9d77377123f59223732131af5e0ac80e11c75c7dd2263afea03409456bd9b59cb08997900e96b980abb202351155d541fcded93c85cef6661ea04b12e0e0013f5349dbc2dc1f2c7a95a395bfcfeb6febd6c2a72cfb57fbae79c4451f4f5aa9f67ada18ab43f7e164d87ebe30e21a4cda844b7558ab17b82086fc6252e76617ec3553ebef35f314be2dbb05222f9a657ae0f147045af346c47ab1c1ec44bfe5a6a04d5e80011ce482f3533fb861f9f9ece28a0a137a820cadf6ac8cbe523c2ae7818482439ef45aa6f90295dc5504fcd683cf490eb0f277af050cf8dabc3a3b47537ae89b52ec667797fab33be87c3050beb96036f2e8cda382f96bbd3e0584dbee29c91ae66689ae4e4c9a962208bddb33f93b38d1d4402a6deaa1e5dca75227894805a32be7fa29fb8c7d93cb9d9d285ca48"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "61"_hex;
                s = "4082fb11ed263923d611b422fecbd68613a30d578d778d4e4c588bc802f40c2dbf83dbe970b8fcef1bdb998dfa14bc1f897f2c038b453ca247b9b659748558aab16492781ca72b95df6d359f0d9462843b5114f967e699021c0e298c68a8655646a0cd2c7c55bc0fdc44c8b7968f4043ad65c4356c9c613fc5cba1a1cb4bc5262aaf8500f725e8d711e15cdd03d7549662e313e1ecb8a11dcff7ddd2217ad5285f071115b5f6766686f6b0a261706a23f880a158318066d28b7d71e5109c59880e52f790aa59b3086195c0005ecb89e3f5559669552324afaef4be4ac8032d06113ee46763189dc51b08abd1e8cc654c5effebc48a9986d1ff30aa766e1ec6cd2540ff3e92737d3da886868a1ca4254934df1f6ba548a56bb571af502c1680daa0ff67fd4dfda330abd824190a12f823577cbf4331e3b62fb0e1cbfbc6af08e717d42f484d19b32dfe543a2106104b7b9cd3ca238c34be07b2ba1363c7784fc66057f93319e3339775a00f931932823cdbfb5efc9127b4b763339f4ac780f8fe30b8f61943c1650d00589925d90859ae238c686f4feed9a204a4d5e61f85fa4a66dffa814d80b7808f9d1e981cf68f24b0cbb7cd21dd8171ec1385cfc53d973192b177633a3bae9ce1a6e1db510b6825bd7133c4556b54a467a6d83fb665316356a72e6c46ac1a51f5594b26d9a777fadc7a058da60966f7d5f3a121f0468461"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "d0ec8c0c3c4ca9ae2b673fbd2f33080b26834dc6b7edf36d1ed526018ba9bbe664f72cf3b9ed4000b3ea521a902a872978562f0a13a0b3f4c073bb6df6790db64cc9113387d913dd526018cdad6e9676de893ca570ce2709b83691f72ab4913ecfc49437a99bdf611208db72c566b4917674e05323e28e0065f8d95f34d37b298ad070120010fcc639580579337aaadc7dcbaf3433373b95332be4ebbb635ccdbcb96caa8cdf793b5219cd368cb3e9cccc908e797e8702226249fb78e2de7dfc2f61215a088dd338cf21e10830afde11edda05b9f1491caaf2bc4f20242faf706915d353e37e910eede3697a73d7bbe6c2ce9f36ddf7dd0129dce0014993314d3251d321a07a732f6a8a303db4702c489a6d197cd701c834c268b2b558d5a2db87c6d0f7ab055e7e78dac978b3a3292875cc554140ea89cc576748e89da1bd38b6bf277fd3425dd678e2bc03e52a3b630316fe0571e01b050b37200cae844df702d5474d5c730ad0db5fb137cf59c43b425940b6bfb1b837d5ed57d0c8680609776678652d40a3803200bf0480679419e80f67abe2a6688234a79efb06953834c056923e972983e57a3b6fc0021b2587f820029301107df9dd1973749bc2a6afb3cdc5fdcd88b41b57c3fbecb3742b510c9f1470c91dba0852f3c13eba4d11a9d29481c1e658e3e3d87df2a20fa7f44a33a97d4b53be317b4089e2228c2b90cc"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31373530353531383135"_hex;
                s = "a190a394b0f6aab4d341fb60ceb04d6e676940b60e812c780f5e6f77715be5897e99789f9cbabcda4e4225f26929531d3de27fbc4525aaa00a179d1af79a3ad4ecda0f2c419cd0a56d6a9cea07129963e2244418ceef681746df97baccbeb480c7d25e5e3892772ab511a66498686b0b59d20ba8fb29f3b93ef80f440bee491eaaeff508f8262cffabff71ce7ee0a2d9503b4ac41206f64ee2f00bfaf66ccf0b6e429b0c0a56810eab2b0debbabb11448c056a3f06e36896f1321a6b151aa79cd9c0c4f67e8ec8bd7cae8219dcd03d17b3ea2069cb93598bbd738f755a5b751de8a82c959d7378185fb7b0e7b5afddf50a2fa586812ee8ff729d50b8e939dedc8c4bafed983eee867bd6d7ad2869e4b920716f04ea24f5d216b8fe68c3061b06c3ecd31963c9b339073e484031264d1429927da50ec7741925deeecae6f9aabcc838f10089503af1d9da30c42a667e0c976374e3dfedb2b130cc8ad5e5ea670bb73e3f75c9cb83f97ba2cb1731cf6ac484ec9449bf76218ecc695fc0970887838b78d5199052bbd1dd8ec98962ebae565d2d8b36f8ba1d75f21943d2baf398ee0f6ac0e2a6958fc8cee9ed38edfe182475dcf80d0f0f87fb4be2e597ccc80d5cb08145d6834e2bdc42d354852faf8e9063a1ba51a77fdbc400a542c5a7b85f3d17cc01f03d136b691ebf313d51c0856a0fcf87a7589470796c8c7a9077671d6b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130333633303731"_hex;
                s = "00198555a5527c19f0e258970b588a06b776fff3835a7338dc581f8d2c276e4b90c37556e32172154b1ae4a2d944565ae9f0be60ebcde660424411b189f09cbcdafb83f27b2ca052fdff86555720a110047d89669c3c731b52814d66aebcf182e7fb07d67e2af57868cf492ddb7563a10e64ac53f4408d495a649bab67608a83fdb8a8ef4d08402ddde446b4892e71c1ddf83fd855ef5ef56ee324543809d45137f2746cdb95bb196e38844a96e9b854d3965f765cbd26ae2161c8ed7974ff42c0232e756073815f00737846da1bc8fbf514a3f33d11af7d51fa379beb2366e0e395b0353215f9ff48f6ee8dc9afcfc646167aa495105cdb52e73803e174a05a97389a2d9c7e0f885a2ce79d26300676830662fb49c504906d9eb02b53eabcc2861db4a0d3c5a4b2475adfd9f5130d3539b6dc2d2eb34e6ed02328bc426770d0c93677799a5fb109f60355eed5b6c354bc745dc0c5112ca4edb2013be06a61c745d2e363ba4c268743f0b4df1ba46d112b96cb9541f1594a4ca5649c04a666e39cbc0380b5e24b1858e9b93106c0f4123125c35193d5af5335f4a9782df72c6ad7e14297fa8da21d815c10ecc19cf0bae323de8580a2727ff803cd9fe1105eb2901b2499fc71209ed1358b35795267d2da8987a9e06c5e551f257bf1ea51bdaf23a15141a08957aa3f919ddafaee1ed9fc741d640702ca216cbbca4e74523a5f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333632343231333231"_hex;
                s = "8d6f123116dccad1f15785d6dcae5ca50d721cddfb8785b374ee4b22ba0009f9278416a77659d395a25d0fc76ec48deb7e012c8c93e8014a0642b17dae89a2ad259510c0239f3a088bd3c32f63dbb58e906c97a40b58c1f5cb601487e0c31c63f95071526a48efbdc84d69ed5b64959dcffeee337fbecfb6fa2755396325e6d743f090ea26317e6e359fec48841943720402b1355faf59ba56fd3b5f59d96423cb382c665dceffda11535f99c615a582aa51d5c1d1652fd2f4c4a4e7a0b7b037ecaec6076f57eb1e3499c8e11bb1431392ff4c2f9ffe9ebe4189b010248d417b10340f3cd452323cbcf1184e7c406f3e38d72e3d79a0096579c2b1c55804f0e9b09dc125a47afc8e75050c8e27200abb44c95f1e05c5c6a7dc6b83bda21ad617ebe065fccb24ae2932cee6401c9e255637e84bcaefb6de405e766d911ba0fc76dfe19520525aafcf1a22592d585dd6f6f10af8aaa7080e2d369956306cc06425c090392c9ca482ba5548fe8d821675b73cb1b00f39f7772506d6ab315f46cf2ae304566f68336fadce412726128566fa73d5c92ff020c5c8ae711d2757fa3106c2f57587d9158aab2bfa8e1585478fcc744097643211edffda7295261d53bafc6f7c7545a0fa190678eda836fa34e325cea8c450bcdf1d6d43f5ca025bfb6cb4cf369b5cbfd3392686d00ebae63895eaa91faf3134ab71cd0b268af7a750945b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34353838303134363536"_hex;
                s = "3235fb051f16e66c67767c024273acd573091bca3e8079566cb22000c727eaeccb0717bd76e81ac4355fad5fa2b06a2f432c98fc3236af2bb2fc0e231030712b3341b4fed3c80f213f8522707d46b9b9984b0df0c3cba695f277b8be7583d83da41fcd8f16832229c76c997ff1760d9c7c9182395b92abfc85ddbcec42eb9ffcf1194247f5d6df4d67735ac875c493d923194dd6ae3d7a31fd2b470a6d9c2a0d7067609f8a79f3da80ba50b66709f71787ebc9154ac0e369c323f080a05b86cbd7257130473bb9e662efd914f6f59a532534889f1495752dc7758211ad3109e623992903f83270a236c06a55bd4e8b6a957d8f93612cad9d4c26cb1ffaf83745d1315dca974a048f1f9571d987447ddba0a598ad9eb72913cb8ccc32b91dc06c31202ab331bd33f1b74c9b5cc10a889a4d3cca311be3106db95d917e88e00edd1d4e34e0eb6164d28848be77aa90c5a79e85dfc947f5687132654987750bc1f75e9c50a1c0f4bc75db3e45eb44f8a53bdeca66eb351af16fca3548c9326998ac9b33af3a700e9f2607c22e8bad137b5b66269012f3d304e298354e02258194643ba6a7ff8b118d4a1ca3636b702002384905736a75c848a23d37fd029131633664a3dc94638b1ad57696f5d77d1d4dd008cfbac689b5c8eab445b7663ecc183c125516a56459f7325785a036f3ded1b9320cbc8ec97b1340ad76b27bbe698f47"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313436363035363432"_hex;
                s = "96b1d2bed1dad2bd77ac84b780df806c0538e7115bf85ce50d80de4260c26c9e4ff3cca3024e27227debec82ea19423cba2d3ea00db8c2baf0174fee20abf618fc00dd873bf0e0253a3637ec282e7c4543b80b2fe09071736dab30a9a3361f8f5a0c0377824e611bc97473090b39564073c3272a0bde8395eec7c071a2a4c5b051c40b0302e1cad3410c8372bbb67c7a5236e969aea591aecadaff9b9cdec18fadaef94c1a9c9684e169791fe7b34fa094bf49c5b65ea8764651a10ecbb7236ce8f450b66c8d96fd5b6d5db01d63bf18edc681d20f722e59042b8d336388af2fd051cd36b53d7aa33a5611602c6dc042aa7d14b5ca2e82dfc4b6cd8d92fc4bf654356bb7c404f8e22259bc5857e449629ee5e78e81d313094792d9b1c142a6cbfcda7ed30dba912590db55eb99a50ef7cce587b3834377938e8ebecf2000d3f23cfe647aeccf0792a2094ab321c3799e992ec3941bc40734a0261a1a19dae9e45b5c204c3cf49b1c634e09334e2923cc26a7b482c006f5cab2a13744fb0192a3d8a89d93d90465c4915c157d44bb61a4e726e199d5baa62db7a522a95bf34f05353a8014596c59e8d9ab419cb959b75f46a6ed127912795efdd260d376a2a356b531fe8b05fd27bf01234e4630c27503d9e9f92da2cb36639f632cf66d4db5ebe93310a444294f7205bd0fb247786325651f271453edccdc9739549ce69b22c6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "333335333030383230"_hex;
                s = "872b3807a21b982cb31940399c80100fad0bb5e3077fb8d134302df2e4691ced58a23aaa8e87347202bc88b8d8a6248d215b3c3e4c670f29fa3ced565d78b5fe4eb35f0c6b5bb57e5755c0427ad62ca6ac99ca21657f3f06cdb75e8b86a7f97258b27a85af02c159d2f2de11eba3ef54f34fdc46725381e50bcfb01985a3b998bf1bc343e06d072da797625a36a40b4e1ffbc829837bdb90455db28d31cb27f1117ef7f7e4e36b217ffdda2c03fe5a83a01c79117facede2f3987711f0ca3a8598f337c78bb04ea92b39639f1ca9cc1cd69001cef0b5d1ab32a7d072f4cda922af96b284e9ec7b82c905f8b8d6c4489623cc84503d4337d2f9f700b6c4a9f75319e215d6a724a736bf7828ef6030f6316ac7a71bc736a3d5371ec5a0291bda23241f4358ceb7045927c93dbf06a5710a87a8e3a582b757b6806d4cc3d1e8a0bb8d282f7248c5f6b884abb2bf2acab012efc58d824624b74f241f8d87e181cbb66dbb5215d252cd921d45a3b2b65299a44363ad125eb8de390268947557996df06cab001b3b9c8106a4b164139194c3988ef815ae439749e9ea53dc6fd9515e73024c3e3253f9c2a5662c3e9ba6746f3a5b5c4bef12e5a45194ebbceac2a939261628907a0c26f57ca11c1e9437334e59dcfb8e4bb0267ae5092b9d6043e0913025dae784600c90bd822cdaf793e8ac2debbac1a86c068a417f4602c2ce0c79bf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36333936363033363331"_hex;
                s = "3e91e7cd337f85ee0bfa3e75101cd27c724a9da1449117a07539f58618e8d4d6969e240a3edf82ef823d012c7875b5c0b420e19dfb19ac1c29f8116c94c355ee78ec71d86fb0fc12818356d067cbdc69088e8da215a1fd6a732a600238b1b7c17ce8460f47638a80c4abe308149eecc203fc1083a00fce117c370b00146b177a9e21aa8469b62926aeca53ca859523b3a6d1260666b969bf7b03d56f16971dc2f3dbac6a9d39ea56e39ea64f6b0b31350d786113af1af26ae4fc3e14dc01d616674145a343f029c66f975df1aa276269d2f55b9ba33648061c560c5d0992b9fa69d4f8c368bb43a719d505ff70cd7eb067bc205dd62f5fd3a982f7d1a3b92663bf50361adf09ea92c1a126c858084b7682643d1e1e6a71e9ad2c931d4b3d453b8d704703d890f323b910a66965c8fe513c9c4156cd98fd06a68441ab865d4eaaa80a282b5d6aea116c31c828c7f7465e27b6eb5813051a8493f981bad1122b0aba5ea0f6d82cc3b7014fb8bd5eab98eaa506f0692bc9d00c0454974195a2e9b07325434673efbae7b4fea983a070ae4fb918794f59ec48f614ac4cc1c02b40b7b76648eaaae44518deb781868209d6d7b6b5d227c168fa48ce1b1ac82e8eb1f0c8fa148906b9e1f6f30d8601b3ce6dc2fa2f1641cd902c7ebae172a79d9e573f64299f9404ca413aa9aefdf6c79f6732b114b1280424532bf218038f112c5837"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33333931363630373935"_hex;
                s = "209772832d3736715249650ce7bfac631fa82ff1ccaa7e2d3e6f494bf0722f224b5f0eec6b1408521538ad8514a4c067df31b0ff058c557478fd4c76213ad716156bd5b582726698bea8293d2401a532bb4ecf461902d30838101cfd979a7e2337e283e381e37dfc86286fa49c463f5dde98afcb9762e7c617ea7e9197c4271a12932f14d7590f827f6131c60dd96f2f0107416863e2586f08009a78feb2bf0ccd662745d6c3803433bf47db160d5f07ff3003cb72891566c5cfbfec2abd9d30e27956879b50bcfb3548d9bdfa9ae1429e2146341914ebc5de81065af18253885558d6f5bc525e4754a91e2d57052b772375fa722cd83cbd6109c1c1145f022120aeee41afb059c77424e45fce1f1447ad110928b1758261e00caec9c9cccfedeab868b60976509ac8abb44252465764ff91530478fc1f8468363737821194bc39112b09e9a2d5563c1df3c2019a761f6c108ab9aad07ca556727d7487401fa2132fbacc02d4487c5812736760418b998ea2e053b40c75723bc425dae7829ea0f55a4898cf56b9837659169c43fa0e5fa7e5e68015f354c0f4e1259b983e40346109edddbd64ed67b982535c72f1a5025e80eebc9f184c6906f5361a5d9cbe66e53ea9bf5af84fc97c9558576435b8f743d1c940534dfb4ae28630a01cdbbae52ce6f4b1d35b01a76fb36d941755568a73986cc9df822c89e6fc3be9208dfbc8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343436393735393634"_hex;
                s = "59e39d41314ed0f21c604af6315d8f7b0c3769a6241e06fdd8521714063ea64101ac02c5214dc680cf2282bca85ac86c088e5b520945a4cd228b3e53ae071264a2b1a1380b48c6f72e7dff739d8181698a833c0c6bbc80b2955e83b0119dcbd05bbb45a26b4dcb7396906a28c8614bf5959ce6ebe861852fc5c6c5eb11f5809b13ae51ce42dcfa1594240957e627e8db804075680d8072d2bad16fc8063672be27e4b358ce6099ac49b395128f8f481efe2e7a7329d1846a17d6105d0aea96d584e63d749a3d93906ad6223dd12a93de4d46aa2da1ba55819918ccc5810c5dac8c3932996d1a727d130a06884da044e01b9bb83d9dde8745a3b5a577b33e4d5ca2489ba726afa4affc0985e729e6c1f2d8f22c61d82d4ac4b5a6eddb466853067e5187a68a4ec7cb8c3804c21fb9cc41e3b4e4582f98632e4952c58592ceecfec17b84095097acdbd9d54d52695df547d6e1f485bb91dd5d9559980f5a649451b88136cb7e2e3952cad7b061a9a00f87d44f8a1a748f897bcea2ae5a49878ae1eed4093f9dab68534f99ffd8e86f3f02afaf557bba279dfdce84d7ffa3da25951dbbd7ba18e901296ff964ba0f40d4ec7eb36d3436c5759c2809c5ff6aff6de2e10b55689060b055ab1b3b9b3ab15c95e2c490fff24cee17a4f219a27ff4aea61ef241342997d71d549d426f0c57d4de64e002e8f9493ae3d50b3102f2c66dac"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35313539343738363431"_hex;
                s = "1a299183ec65075637b16eef296d81377721df3bbffe9e28d96ee71d958230b394a4e0adc46a329663db1b091da305b5185e80f6fe6042d310957bf9538a2ed4d3d7ad2e172b232dceaa92c85d7759043ec767966882ede43cdb38e772d02ababf44136569f8d22cc0822136f66cc11bd89420ad15b26aa510df92b46ade2b22d3f75c9786fa76d6280c0cb7970c537a1ad1510026bf1d94115c436d75bf5fff8e74493ab6451ad489c610c9e97d313b7e3f9bf01c344ca516108302763e4d10b070855e30752e25e4d95b589f22e27243969d4cc980d8ad004c278716ff031bb0d132be1576ff88d9f23018985c8648940bd4427ab071e9ae0ae4e342f0731906a41d405d64232dade137c965eb438d157848302f80c3e54304ce550dd31728db70c3af069b15ec9a887cd67044e82d37e32ed3f7034121d8e5a3c1fcbba9cfb946bfd139cfef49f2c122eccb654e316a2835f8d888c58ed6d4b4c6f0915f800ed2321e1ad98dccb4536dd11764a4fdb87efdb837a0a8c8d8772dcb26d4f23477c6894949f42a6418f0d5485ad4d82ef3b157402169935bedfe74a1ac852f6c2466e29ea2a2c40506070e7a60d8238b1e4c5dc9b4cd38b24b4bfc2e09281c9036274c5743d51443d0bfca7112f8112a44c13eca8ad7aaddf06cb3998476c0ca70665cfc0ebb68861e0598b5889845054a6fec71f645478db976dcc2ebabb538"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35323431373932333331"_hex;
                s = "880ec14ecb4d03ec09e46236b7d672ee43c39db6d6d495bca15d605179ebd7bb0fdc91fe97a4c0917cc9f19ed9064ec702687244f17dfd65356a4f9028a6f09e0beee7af8ad1e4c088606680b7f09a11bb38479070cef9f3beff77f0e2c5be461e2c97ca28ab21b64fa484c5bcfaa3a718af418f3d9cc552e080af18cc53abcf8ad863a64fd5c4d2dac2eda8d1cfd9bf19dcaeaafeededdd28663c020ee0ceda0fb197b19de1366878f456fdbc0f7d857372805b65c069972d43677ca5ae07aea748982c595ae53d32f93b68767e5ff4f983684e562173b5f523a9c2e66690c2c08fef72e1cf47568d5673a6a02c8bdbf948f748271986d73bdb00204d7d658e93014ffcef1ae08ae05ed1f96a9bbbbe3f52d17b2dafe6816fdcf035fcf33c57d4a62e5978c7102a9e30d231d64ed8c5292c5600d5cdffe92a4ff9f56026329681666952a928439ef318b120422f64cc7f80ac0fbfe32decbd7056292c06b7ee7ac6e0845093e4f159f5adc865d62a71fd141affebc92356c2996331e4d41732c66833070d64f076b7c85e246201c703b1f44afd266eda508589a95f3f9436b3825ecd7a4505fd2f691897aefb1a473599d5bd2108732821fe9d4bed0f1f3382a1d6befbd5220e032d7dc45452c653c439313f1a23531b5c6f67c2fd5cbaf4f853b69262b87c3c7e9c08caec5a7aadede6c4d4527d65c602b6d2f5b069fc0d89"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31313437323930323034"_hex;
                s = "381209c33241f532f3bf9c8c54f9357f18f906cc2275fa9ae979ea2bb786170091a3a89c37ed1f2040afb9d808e9b283b345a1650f15d77a5c957b8f71b486dd97ea1fc5103f5c3ca634a9cc38adff19091070fa0058729301d22556b90c02d09a5249406912f99a4f8f0da62648bddbb02130bdd5b15a02fe226cbdf4e3a33b87273fb6440d67bf8a56083b3bf4313b283802c8e0d1ac7e0b05f1b60aa62891465878823ce9b9fb29dc66cd72bea24eb20c80859bd531b5a918801c3d03601addf816c07bb68892e504e05d0d2a05617db950c2c45978b736cabf8a2a3b696da85fcd276ece63191d187ccfc94326090e5f6546487e837b6bfba43c5fb9ff5005c42c0c334305e6e0cd62ac15355c7cfb7fd1bc5b85421ffaf3e2feb9b4cf116235c8209170beeabed6a54d8eccdd63c6f75acd65db40fcdf4029f50bed3db55fa712e1fb45ca43625cd33b81b46b54b9bed5661bbfdd6abac9fbb315e7416cfa9fb09ff5195da2ae29e53fa87c97499c9f8fa33d424029fc0c9154f75484f99c653df9ac3a584043f61a6c9ec086683682ccbcdd5372abb111a57bd00af5e247be6b59697c1796526610bb028854ae9bc17ef0e2353c59a7f47e362f1b396023979c99ecb7819e67668a8ce727893f460bb644b3d7a84a4e83f12031ec8c7a5a927e9784e49b4d7f54225690a5814a286dc138fbccb078f0979625334c3e64"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130383738373235363435"_hex;
                s = "7afc322bed211b4971cd072938269c726ceb488cb48e4ac4638cd4022c9513f1c3c0c0d0e99fc9a921c1699caa6aeacc5e1f387095959808b22dbc16084720da7363bd162e0f2c05d9c5ff287ef327837651f0ead9715a6a664635860242fdad9a6748a03a4a84ad6e801e62f339b6d230f184991e0a862e02b55826a5ef1aca3ade29b0decdbcc47a9ce4ae5542cdaa3a290d162736b7cf55b427064d7b27ee917eebff09cc73a65314eb44c8e0069fecd10e68896595dd5c338e4bfa10c9a639fcd3e83221837db170383482d97046647b9c6e95075d3ee78eb84a97f472f346810e34459b902c2b0cbaffe13601cce2ce174eb7eb4384d1453f9127a1db2d6e0db709b33ad5b7716eba3133c206761e9ac87723b88ca0a82ac927b442c5cd6fafe864432cfa2b923941504adac6af9ae642db8266454179cdb113a1ac6e1b515f4cdf0ee9746480c1b856322185b9add9145f914ea8c10bae4df9dfcec5443a3e1b33957438d790e4e1c89119c379fbca12170b5bd77b1b0217c56073e78f083d264939acf0d33f45ba45f2db3d0c63761a895553a42fce05cb08c1583f010adda8a9c2194ea317f3fb2a43b340a6ad32f96bac67d5823eda1a00f65019148486ef9faab577af8b1cb668ddf41bab7e68531803186c2f60e8d2d3d1b6f9bdfdeaa734fe0790832e6633c99d685ec1e4dd7da7d4647c6408d666f9f94b4243"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "37333433333036353633"_hex;
                s = "b488d065e2df2d5a57c7006b2cbf802ba6a8174daffbf5038968131ad6445de2543431e02cc24ce81b492cd39fe9f5698079db283487d2afc84ea868897714233166b7e20cee3d916d209df5056107409619d349c2890a25173ddb0707340ee9b549e564e28546f74986802511100accc07eed8798f29112070e74a0275722ff5d1552f18fabea4cd1ffa8bab5e17511f29ce878a64e2df8fc442161c878f456036447ce66232f50593e4859949b3757e47769af18867ebcf359ef8e9d9ebb9cbdd4bc0ac20e61c72517e768de8124360ef88a147fdd246ed2c13f954bfbbe962db9a75e4a6d30b64406b8d854d53179fecc8c7f37e53b2964932087452ec60b40bec2165c22651c26fb919f1c3bd82d681e23fc1bb9f9e6847a23575a114f0ea37d53ff917636db174875d0e8378a9add38f204a55db55e4a094aae403f184fc491930ac1f5e53e16fd4e85f47985867b03c70e5f1cdf54adf7d77e9593c6ff92406aefa908004eb3fae769beefb53823198a2a945460c83e830b56243c0fc807821062fea32166670b0c701c351fe56269d5ff15480a26addfef946e4da5a88c4a0a98ee3f34c35390432de3db7f30444a735f487da49832453edd7e6067d6be3e9f2799a3c3cf96642d597bbd86b8e1d7bbb011dc73438ad98b55903fc904bc6d87ad106742eb234f624e9f658a98d1aa8cc1e5dfa868613dde8ea83efb56"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393734343630393738"_hex;
                s = "023ad3e280e89e771f5bf4174806d510cdf0869e2c7d52669e8a8c7a989675a74f0e8f9622eac214fec2efc6763d362d5d00ead4b70a4a644b55fe6d605187a42bb70ac7f4b0d598b1dcc56aa2a66cb9ea8f1c67327c139970fe9f152fc91f86e21052a3ad6623292a157b0cc06b2ea1f6e858ec7b18a38bd5d47173d84adf51ddc51a02f8660d49c87c29c7edb6d051b8d488973077baed9c6312acbeac660899c5dc633ac66d1dfc22771a5f804f1ab076905765e25ef01942491b77a7cf84e04786b46829d6157f91bb3a67eb45cbf7f0ca088e438502d683ff92e0d74ff2dc23a76cadcfc9b8c38b9df9393d79a5ec55921de862a4c0e6ee5f5ab9a7612218995012fe523594a98c015b81b348d561fc11f976a2b78a43518b849835b88601bc84d963c2069d6277ecd3c0d7692b94440d5359cbf660ec503d0cd30a2e80e8facf0e1aea20ecdaf69e4ca27a709678026cdb1dfa8be38656c3675bad16d9cb36058b6ecfe4710ef313564161a353e3f9741ac42ef9954cd78a6899709901f368443dc05e3c088b1cf029e249ce3674f4eaa3c88c6fbc88478fd5f7a0cb7ea5b0b4ded4d738c2b178498f1be4f9ba87a56dd74cd94d676493c87e37e0c72b0581fda8c2109e6a8ff22d6aa12d5d32ea5b867ef63c1634ca51d221fb9357c75bf3b5538858ad4edd03a1b644b657403ad2a6bff562c95617a5c56c2090f99b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33323237303836383339"_hex;
                s = "9ab45952db4dc99750f404d81deafd1b8e0f9755412c3ddd3fc965db10defbfd7a6cc82f71f3a1bf851b60327d8e8d7f1f617917f5441521cc44faa6cb8984008870196b3167bafdb50d5b63e1a4e3f737335b5ea10fe80f2c04d65621a03dae1ca618775a91add236b01a4b802d4da5d168f63f61cf9c57426c9baf51d25c9a8da2e8ee48c5786b9580d70e71eb2378b49fc079f8e20b1f781299f24af07b17a85b4b67c35397213e5011ef1a97604f33d1a2c9eb0e8456a8c2fe0aaab37d9ff65132dc4e2e0ef916531ce42fb82e7cc848d829ce203f58973257a0aa99ed35b7dd999c2784c4299474c489b4d52d6a547c2fd7ab296997636134cece77d4e671c11cab31b900861d7a8b40fc424fe94a62f743cf275e0b9721cbebc8965ef622273da895cb915c3e1ccdc6009542fdf652b3dc38c7347fc047df1ef4e5977bfab329d240cf59cd7ef4248ea6c916abb06a06250852c292e642d0bc9e30591a0677cdac5b9c4625d93348c8d5145a9051fb99510091711a57461c5e938eedd8acdcde3eb6d0ebaacaa5bea396f72927274e2719a6757e40ed1e41305aaa52e16e66221e275c809267290d0b16ed86fb882e12e9e51ea1f7f9094dd17495eb289dad48c10186a8a979af59ff885b6c97b052ae0099f6d1744868f7e0b94e2c28382c5df9d6501d9fc3951475256c671256499caca2a4457f2b0ec704f090e12a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323332393736343130"_hex;
                s = "61208efb01695ac6608757bd5cdf0ea8d8f73131813898f9cbbeab0c2abab067ef22697ef54cb4c44cda993e93d7342498d08208e0eb94863467962c080012933a02d2f7a8ceb7399800fc571e358ae1dc16380b8764a43f09fb69f3e2c50294375c35005dbb786820f69888834aeb7b02a18b69643887290d3ac230d5c3211257ca5426981e3e62f8f1c17f15b3790e8c76cee2087b839a9d8400efdd8c1f5c013e5447662d0d034715c242a778bf567c002be073c646520cb5b874ba0f9331d88f62c44d0f6f6ad8ddcd393aa11de333ea184c539ad0e10cf8371e922447a4f2bea3a1ae929b4cfa6c6093151b334f3056e01055839bc035997bb82eeb066e6684fc02f9bbe307212d77b5452c5d777c62017254ca08bfb11282f0bacb13dba292350bdf2c8ff444d39d2f4ffb2da6c527b446751a929b631c933afb603eb6c20a0b980da2fe065084d312fe2d2a43000e85d49b7812a1d2e2e9c356d6470ca9f69d0a55cf34799adee67dd72fca97455f63ee2e63790cb3886af0b942d47813b125ded6ca7694c5e7f53d0c4ec4278ee333c11f1ceda1047f289b987618faf56accf0f88f20690c5d16ff010d2a9e383b868738cd86b24955c03efa4c2ac3dcaa4fd4cc80dbcf3f5bb1b0d909ce143b4744cd80170ec7ab9c5e482aa47bbc260c497968f0056b0e56e73de1d30f5204008a1b3ce53e1798db0611c6f0a397"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3934303437333831"_hex;
                s = "a9b85fc77056892e72accf61e7427733ab4f4fb2dfe1a6c526f63ce32bf88951ab72e67dac5a51195eb7ccfd96197ef6116a099d48d579c40c8fa9f816a1edeb9b17b3c476de18046a0fdc3a7fdd80603284cc521d438dd900ff4d987e7e863396b2a3db7e69a748d802d3867e63ab915a027983fe579b907156dc8476168134ca10e533d5454e5a5ce62d8128bebc9c355bdf9481e54a3150f7710f8cbdb05fe38b10e93c90396080d012d4c503aaa96f9341b510967f89239932a8d85a60416c3f9344ca6e43e4f342bb033dfc1e5369f8e457a5c10dfec5765cb424caf8ef9d200f24400dde1e6977daf23e95297991bf61926ec294816b44bae84e2cdc4de481a3b899fee3ffffb271b9570a3e40ea7c44a2b67d5d0538b85808ce6eb53e2ed3ecfec9223bbb0d6dbcbe7a9df8a2c85d4bf7a1f99dee69e1ff42bc928da28f44803b82c5ef3235d72474173701f41bfd4bfcdcdf3709bebcba987230e8a1ad70aac2e64c2b0a225c666a6b7213a0594dfda6dba29e819b05bbd063b249b1c70a2c171c07b8dff38f038bc74966db8794175cc6a6b88ff9d5d1c0f169e8ab3673af0fe7798a2d58486d23b1f0091fcd5d1e355668622f1c6f550cd4029db18af582e03331fa316e6d9e6786c7c59a12439cdddc0117a2013bd21856a51c4d46f6d36b993804e91441c8740bc210155ac811843aaa1d6b7fac358977950bea"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33323230353639313233"_hex;
                s = "470e6ae71b6f5f129b9c7e0137ae9bab3e0939448f1e7bc154b1f75f57996a117366a4b8c3c1fe83ea1e32efc6b8bc3d3907971f61fb9a97cd3b4de53dd399265fa8326f93e5182b278198996ee1456c6f81697c5045219f198c220050a745c0fca7b8e8a7f5aff46c2718ef78618bc23420eca94789ec16c7dc1dc9ce04e1458a0fd4f12c103cdda67622ed0d7188fbe1ee870e0e7e16cc38a891aaad3a9040a6335e49afa1d6273edd518e2ba0539b8afeab9aa733a28290823522c67ac99d01ce3842bb9c936e2b319d4a563d03b18360a571c83066a8f63262b9a4458d6afcca4986ef5c4c3292315c266c125a6021762a9077a72f0290c8971aab50c84be80bd2e86fb4d3dcee93d4202156493a3af96e812fccfc55fbb6ea63579fc1f46f8ff5b64254c994fd477c08b5dcaf992676a52cf95e9f8dee6a0e6a73040f1e591d4b5a4543946f5fd198531de8e6ab7bc9e4b7e923c1ddb5284df7a8ed25bdd1338a6baed00471f8463ac52b728ce39ad9a7c7854c682309d46b726083e0ebce5ab7939ef1ff2b663e16b2b8210359538c141b97ef45996dc3071936b77c734d961fc74fef32cee1c0ae99bc0bb259fde812ea19bda08621569ace1c234cb6a5283d1e5bfcd1e3cfda4dd3a16eaea2b60e8b4841aa08d60f266a126ef0faaaca796cf1f7bafa26b7777c4eca8695b5bd5e9b741b921ed6598f680c6c7a0d26"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343134303533393934"_hex;
                s = "2b41e644822846b5839c053125dec025cc25a75698b472c8826b0371a0d2519af75b8b9338873374cb590113fae53f4d10caedb25c1176f3149ec4c279028fc548bd6545c90682345c19cbb9a32fd21ec3fd368fad4bee5a179862041af4c3621119846d24f49f10df075898cb8bfdeb5c0fce19a3e055268b3a5fb63fd924428cf6ebfe3420728eeb5aaad3b0ce503b6fd8efc05cd93e8ed96ab06829899131f297e1c7f78a9ba1711ee6fff2b979fb4f28200d9ab05573855db50c13d8c73440a1fb7801b070d29b27f13d272aa4b205e2c36eece378c7850020ef6bf3fb9b09fd755148951db8d51a7387bfc2aa374af9236ce21f7ac06d0f32e54ba0c682b92179e7423eb96b16cd7953ae4071c193af0135355aea10ff491dc44a6b7750c39b286b4a5ad883a816196f44b0b2c8ed227f50ce2977dcf1c93e935eaf32e8c52634c9b14b18f5bcde9dc8df248185110f2be1f1f2b5b6c81c9cbeebccb97e9f7979fa13f3d83e3382b6ccaaa9d59423e901568d788b04ecae8edd80fba8b16a2785c55db79c857e3c5a3f2c2f5f1ae0b4ee6daabe48c614a009a22b18d1eb3da2c82ea1220ed1d31296f0577974bfea67f50406e3783151fc0191fb988882f1d4cbddb422c9198b5c6fc99f6fed11b23297c62bfbc6760464b54f152bf26f49ec4ef5144c1e945d00834e1b2560c62833f9756ecc4845aab7a4391c32acc6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31393531353638363439"_hex;
                s = "57495b49bab3f8a89aca184b355421d781168353f28dff1fd03d3ee6a170ebe8de8354c88ee862b96c2caef05a4d219271da3734a036079985f64ef5537c4cff9ffef1c0a263a8f74e568b07d605398e1db39b6f74bc715af92eaa9375639ef505de3e03ceaa09ba8f0778f21f9ffc426d8ed83c01221330807bf68d86630051c23d881adf2a5539f88fc6d9021747676dd3d6fb806fcdad07f9e1f33a8fbc4aa833b51475b7287f1ad86eec8e8357926d388988f9ca85d818bddbef41ab5365eb7126aa6de94a7f266414825e960a39003b48955ea0285821983d5759fc5ca54ccb33b3a1fa9816e83edd30c9d22b84faa362601e3cf9a3862df247e1ebb483347031def5bb2263486223793b74b7e0b9c2054990307aadf51d84396630dbb23c4e7562496a2b60df278110167723e7f55033ee28ca4b8f6631596a59f506dc5e078c1992c87dd809be122d6dfbe013224a45ffc22017d3537e66cef01baa9f6507011a56deb449876199327f60f510ccd65c846c76cb580237f453fbf787067935e2314cca6f16edd3b4589ca98d47825e675c0527e843c5382e65dd8c61ab6bc3dd15a54cc2cf62aa7ad8c837114a880613cc3377670b1dfd09ae85998266c5691b9fb294c4c19370ec88ffa928a855c306a11ab1d64fc78df9b1323e2029c2c4d6234707ad9d921a9778a1c8236b4dafab99ac25fc56ee97fa510c825ff7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35393539303731363335"_hex;
                s = "5bb1144891a760cc0a58aab73bdbc3e04ac35898b399cd65786cdba90b95b7ca5f4673b5391045eba1b70f00aefd3f8ec21356520f1dbccea29fcd8de216dfec999f8a87d99efad9dd5b44c4df425023e172d62cbfceb9729042536707e988a2069096fd271f15b1db8e9e6c6976b8dad64813ae21a82037bd1f0caaae03ac3f58f8954adc13c58647b770106e3368212dff32025b86dd11ddc41eb2a0820db89efa0e30efb16f45c37bb2027a5786957add99e3e570817344edf26dae2134d98ef4ffa09392436472d3d91b728558f3459cdbe5d5ee9f7e30b3ad5ea799618dbc7d97e8a76ec9a61360bed10086d23739ae83ed308555f927765f1bbaf9f64471d33affa8ff457d7991fddabe497240616d72eeeb1d6c13d1739e57b29eef1e93642c8541350fdbe8b130657d456b6a8d03d0116e802591931671c0c95e46cbdb5b3c307d35d97bae15992ad7c2400d0ba69f96ce4e56d655fe6b4799945c072fb2456d93c9b87e046378697303e3b1168b3283b64894fb096d2ceeae8462c1a736a539b5e0f6db6edc2a7ca606be6f49ab20eaa63a236d044221d6aa1bedc4259a2e655c499df442a91255d94c30c95e9c7c8bf8f69e18da6d8de7b4b5fd6e4776882da18097832ca3c5dec62cda0460be8d555352d3a1b0d7dc1791942ad429d86f353af8c088dda494ee9ec497594c401049539afcf5610c89287246aa55"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323135333436393533"_hex;
                s = "2caa929e18fac0b6dec4ce92adbcb53ddfacc1cec9ddd2f5f6db65045fd5f4a50aa5e11822f0c0d9c2050426d21860e868093fb0867b86411d4b8a2ca15e2b6521eba20376c20a32ca21ba5f08773dff079344814b2761c35417ce920a816f6f654713b4cf96e7b300f9d9e202362c56960f7d17dde97838d8119a150c6cc0c1ebdaba05200ab06dcdc3e501885213169a4e18d4615e476f1ae68cd75b77e2296ba02d3fb5d7af1927eb46686038b562786a1923351514ef26dd50c9caaf77d6ed73b20c9ae4bfaa06a26fddba1a895a1e634b37819a20a0bb0c81ae44b714b2ab926ec4287083b578f5eed09e8871385bc01e6c84ab286ad2328db46b33767aaec90787854048bf09d4afb6f9ca0f5b66c137f0e538e2527e47cecbc6e8cce906dd98a318d8d9f7f1c5c16166ad11ac5a08c978e93f1dbfd3ac148502891828fb62ca6c66e6f65e46067a37a6f0a17e1bd55d749dfd611e2c271d755a20dd6dce869adc9bc2b023eb45864c9360b8e9d463e6280ab664b6682b698bcd9b15da534e4260441762cdfd5092e143b2c77ad8f4514fc0cd7a548900eccc11721d9a2287b78b52f10ffe733b2c73ee5d1f754087e5d89a39cd7b7a8fb0a2e3a350b1fd63076a49d895125e0f77608a0c2beeeb1c837552f6159108f58ae0e872518676b8467e002b471870444794ecf72d91077448a632545a987b096855b1f9deba"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34383037313039383330"_hex;
                s = "c39ad592fe422f29639076b2eb85665026083a5fc5d69c68837518b8c1e5946fe1fbca6ebec0affd85178668694a2111cde01ac3ccb0f191a03143dd8543ff40edda622f6aaa76091a9bdfba795b869891a9bad2b728ce5c859599fdbe1d29c3a2f7c82cb8b28ef82fdeba0c83f86ebfa5e63a73f9047012ad196e32970cbe9d8b896e4e79ae5c6c537f3282fe65faabfaf957a92d98db3f0e79b39bb17c326f97e95fcebd1c1510ca908771e94033af56b93f97625bcd0c6c97dd4b7466d14f17d63d2525a2eedba1cccce3de18765542471514540d90e4bde9199a3478f8f76d42d3639e7f8ea18cd30d1cc261cce10ccb3b3a597b5515604d22a61f9509004a3d4b1ec01c505777ef8af43665ff4ae03378b65208141b1ed6ed5a39288afd38dfad10edba756d350be170aec624c18268fd073367a8f3f15f36f60efa9deb847e5bf5946188c791652014ad627ac8348dc6fa07ea3d8afe1f6c8fd210e3b76d2dc220e1361e336e365dd1127257fe3d2f4d205a0dc757bbb2a19c926a5deb0d7a8c02869e6053081d74606b66edfb64aa6b2c74fbd73bf2c2a50d9d7cbcdf58fcffa4b486029061de1531199ebb503c90e585ca69a0666ad8a3b9fb24ff210fa8bf549f15b86c35ff58d6e2a64c0913a075f3a9618abd9b93c2b34a658ae2a3e68e3feacb823a58f59d9868a1b6827175cce5950538b55589d2a7a10dc2f3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343932393339363930"_hex;
                s = "7d2058b8f9c1e60a56ed9196bc7c0cc6be39177b49bf7c1c559a5d56dac14889091a495d599c60579a125c831dbb11d31707ae70dce2106321ce9c999763a3536c1fcb851391e0f3bdd254de2c4310e1c36e7efc935bacdf9552c442c2a63cfb6e5b00b4ae6d0421715cddf8f8fe8f72bdaf7499202617cd0598ad907dba3852afa72d19397f90b6071114309a2fa0f7b0b8e74846988d231d9f65c291ec3dfa76a461f400a9f8057e2a8d11ec373e5cc4a78bfc4df43da96424ef0721fb8e6d9ac945a7cb52a81a44a1c236d036489b15def97899fea56c3cf65ee3c608ccd167fbfa1ea7ecd27648e4a34e030878fc7f57b9daae0663b3e523666bf5439412bead84e0954e47099d4c4689e2933ad40d6de34ec9f8d712b5bc0a7767f905517155d2c945c4e5ae204f53ece8fcd7381a4f0b5450e71bbd974dfa8089f931f9ba5721659b62edfb4539867150669903c14ddaab09dfcf415b321dcabeab278ab1d4be9adacf8ce8f342159b872605e7774165da9f54b7c17aab184090b704c5ca808f95bd684dcb179d4deb6f0d0d3293aa7bf62d1f06b35e25c741bce0324badee3c760df2e7ca134b17b43909daff4d201fd9cbcaf43114d591a92ba7f8ec1615bcfbd790225a1ea451f4182ec6ef2d08fd796968fcab00de56119359c2eb74082d109c556f6334081570fd37ad991eab2a88568143ff0a166270495f443f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313132333535393630"_hex;
                s = "005a6a0dfa67f92ffed08576b12ae6b9cee3cfea6f87fe503ca7b0fc7b65bc5d45ab681ffa9b7219a74f22c04856f66f17062f6633736a292e265355b80d9f744ff6af4d9faa9388da2c8671fbaf984c1a9ce021b484734978c2f6a7f4940a4dde0baa1cfca5de0213204458bdac30c32a500789dbf8be6558ae0acfff89bab946c30a4f64ba19c2c925dd590e4cdfb26732358bf7c52783bcd28cf3b64f877d0dcab1b4cab82b37cbbd3d06d7018d69e58c946f46b86ada47419212526fc46019e190d0a39c1b6ff5bbdf17aa03b424b284b9cb3e1c60bdbebe1ce24aacaa549512d9d5a4be1a43d28b4f437978452feece94eaecbe12ad68af00f0c92c6392188548f11fcbd64c00937bf461db60046fd0a50a25ad3c1f0a233f55d06adb12bf360f7b2361811d43c8e269aca5f139155209c21b2a5fc2f4ebd36bce5aa9e1bdf185a8af22da0d8c42b4158ad8643cc219badd538311eea16db53f52d8480d2c1303f5461c6b3d44501a24e21594b8134d0eafc3e613cda3435799b5431dc77607df2a2cbdd201099b7338e387e66621fb2d01e9de6d5d21da5b875480e19f748937f2bffcbc45eb69069769b348a763244303dc032fc1f1f902bf9ff1fa28caf009df7d3c3fbb3ce67d441dcb474fb97e2655bacdbc79b65b4eaefe99df6c9680d4688a17e2b38aedecf2688d384e89fa8795ca838ec577bef4134e79934a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31323339323735373034"_hex;
                s = "0a270b4c3b90b38b3d383060f8550b01227ea4ca695a994ac34a3e3e74846c6ef30dee7000df1ea7da791a79add2fd9139062158bf7d95e502932b9d98485c549829da361303430169190ceb40182d84d70df8a359261c3308619503e4b64a991ea8bd83fc8e10adab31b5e9a2ac2a997d709b626cf5a8047817201e51d3dbd5cc3de283d37ffe3fb20f283940cff1cf68976ab167dfa568970f98aced77168eefaee310ba03afda153ec305645b7ff99165f82237ab26bac409b05f537a7b5ef224a76828c1d289d58c8d980519ccc6ba53e45bb1a04bffcaf957c2ee9b05c1a652dc16836ffbbd3e9f5f438c7c58deab577f1f29cec22f53dec763ac458a73ebd0721746c3a1c280f5d2a4c68658d89ac0f5d45cba66ea36eda43c861be0fe71c88365ca13e095e622424e8efe33e268459aa4090c07c6d543bb05362b309c9be5dcf3cb9a0ea95503b470e64c4b198454cac5d9c21d5ceea87e2247518c171b0bcb8466a269b8079039e62b0998af75985114cee6017857e120d4aff871b3d31243edd2e5060808eadaf5641ae90c5359d18610330f2c158695bc2c2034cae02552f87a99f3d11265c0f5c9f29758cc4e950b0a6bd78c9954a894fd9f1e5cbc7fbe36f91b60d60d87e1d47f392792ef9887fc1e9c8068a4cfce1770cdaeeec311cba3a7a19290a90f6c825592eb624555c1f94b5cc198e7dfe946ee4292c3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32303831313838373638"_hex;
                s = "cab2fa98eebc0cbefaeabc8253b4070796ec6a598064350aab81d315e02bc45fe657816ea9193892736920131b92fa9c8a6270d2b145a6724298b66e450feb5936db7f6f9439e58166ef78539f15cee0af4e84fbe88d3af391bfdc166983115cc31847d40df7441ad1cb5d01f66dfe3cf0805f6aeb756bf86085ea619ff7a5d6d92adbed66dd3b3aac7fcb05c24b4e3da2c055ad3f6e084fbfb7920b08be10aa817f8d0e5cff6a7737607269bc384ab0a8244ec6f0afb83a5ccdf811e391a5a07c62fd201c2119085743ae5743e09096d005dbe5764ee3f865966dd2f0b50dd1e866698e0fdf21b668a1782e921df7f4d7ad55ba7982d5a80b370d652a515f0b8094ce85e315c9cf8d0308bff18848e8a1d2accca772d69c1d43f03dcc0335d051fd9172248f36736c95c41c2f67eb2de2133fa24230dba75a6974c849b842821e9b5a8c04660db7dc5c066cc187c0f04c8ceb0f119daae44600a230b54fca6f371d04c88526dd9df2808b64612aea6069d1e2f595a79ed7101f9ceb730c3a61e829d966f13e3883b9a8863142720f6d03708c45554902f22019fc04199fcbc676546c789ed2c7830aa77f50d7e6c3be865e5e5b533df0804faf9d62c41fb43cba7bb7b55d06815945bc6ffe6e3405cb98747b2f48db4b34017d3b48f6fa3bffddc4694a0fbb140b132d34f686b8ad8cbb3677a157b58f4fb74f6a91a6aec556"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343534363038393633"_hex;
                s = "0cf301e86187963e8a85a893701b50fc3aa55df9a832e7b6ff592efdb819b8607fdad1b68bba441411b90b7fc8969e2997f85383ad0d33ec16fc2e50819c15b49572794391873e0e518003713d37f0c1785f214a354b7ed58db30d3465251a5c9a68f5696f731fc5ea4d89c2556926b9e5a207aa8ef577efd4254ee08dca92ae82d3763665f2569fb246211f127654588d4dcbbee85da98284009e4598d69de47b63224fe7ec9dccc0b29024fc984408177179c61c233d68dc9a0b3b43325ebf2c825c0415642a8b4b02855d14d8641fdc6960150c02e3ea2210ea164e8a48e99cb8f3288372ac6d0de57442f70d5d5059fd007c04b804b1a9beaf117e17ef3b28e743997da1eacc579710c6b771c121ec5fee852e233170029957149d3566a416abdea93da2620f5c8c3d28db30ac764ff38ed4a72460f7f1ec2e0b0df38e50e56026af83171f9874dc13d8a6e0e9599ffb21507dd0c9e2e198051b681c7f1ae4227ec6827845cf015a5aabc24d790acb3d6cf45925d2b13837c1fb30a7fc4a7e3199d550904f82ed2178267f414c434407474a09feb0c7259d1fcbefae593f0ead951494e82efaaf5cc3dadc332d958a16d2d311d219956ea12ef6da1ed3ba05f86e80395a279a6c7a07b35a809a60562683730c92a415c9766857461710a939b2f0614b4481ab05a7817f4f19e4d0cb7774df7c6abd653c24c2b4045d7417"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31333837363837313131"_hex;
                s = "0930c07c04e0baf198c7651800a21f7939bd3cddc4655ddcbf2fb8dcd901267ea22dbe774f2938dd08c694c8fa87447f98e82fdb6999e620d955b43effa7da82a8d2d93b8519a94bff22dba711bec1aac592f81bd090c51cca8e56fc674d76db2911c70585878cc7df6ae37109150f28730b6aae6656bf6a8509a1631573f4fabf67775575358430e5ec26918b5e9a4f031d8028dc59cd242118c8f4ded8cbf646e351d453578dd4de7d29d9a572551e75667976eebdad69797f71c9ed24a3aaf64974aac3665b743199b80d1149ae698ac6211794b3dc787ab837fde03a9152ad896746eb4c46acc2e5caf9ffcec007045e903ef30320e034a2698c74694b359a57858e9a26490d20403497b7b3096d5e2ec183efbeb4f24a281da398124432f753e7b0e2e9afc81a3d0e164851a922b52ec625fda5e1529e7977c6b85d019a297332f77eabcfba3cc720f0f10701ba3266e70f5fb00ba81e0684b1df1ef0d5f80e07baac67cf83ba332ec0d466c87431bcc7ed925b7b51a9c620b626cdfc7318863c9a3d7832b0e36a2a0a2a485e8b7e71bdff085368c26af7d6e06c1934897415c87fc98ef4ba11b5ff04c0fff7a0422f0ed364c7e723934256875c368dd5e1d7fe21f858e91fc89e1610d96e5ca3cbf13c1af127eb665cde549c1600aba7664967a344f6ab79ab24ba033a66bf4128a321bb0ea825287baafe5c7c1da027"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32303331333831383735"_hex;
                s = "bc82e6756fcba34c34ff6521963db61ff8b0bc01a9274ed3c349a6c5784004c879de1f34080e288e73e9331c20ef4d14b311cc9c8931975d10b12f8481287864f12ce9880ea162e8a5d2ee434a62bd0445ce108e3106d1198266e5e396a32226b8624c8024daf47d8b83560f2877548549cb5e5fa0e9ff61528002446130e86988ef4251e77f0f7e6051ad5df1977fe5e72b915fd5c30487547795881379e628295c5f75a99479a517c5b66b47c1b55d626cbc9951deb5a24702e5ab42039092a158fc0e6e5d7877a5df9f58e9e1996316be1417ded73216599fc32267420c5d6be88e80ee21f37a05ba9aaefe585acca637d82c35e8f854e12b23a1e3cb1a7d4f51b312d4227661edfbc2793094d0b06e859c79dd7798483f18b6fda02c8279a77859018bfe2325d550a1e0bea0670811189849bbde8000bc1a069362e2c4346ec90f73ce1e05bfeddb72136eae93175654e3ec31ed1eb0b2c2d37300d5bc1f7ac5e0e7be3a66f9cbc93a2fb14b8969979fad111a13e803468f4ce1204d46ea8cd5d6f811169c622807eb5d6bac40a2083fdd7f04444aec0cc8aa3653a924310a85c2a1d59d2d17ac8cb581f80b8207f8c9b8f8ee3c8715a486b5319eb77e59f6a2048aeb8f75ef7bd0b29def6b62cbd25a2c15566d05ad14c78f3135c4e53c6d83481e9f522bc9ccec58003eb085cd7f8049a5f340fa08463937e4d1e19032"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323535333538333333"_hex;
                s = "35db1f0a1f3356ae2a6a0418ca9b5f3f7d0b49e992f1f1bb4dfa590097674f8358cf5de651544eba51303c72984f13aef264d2dc67d61ffec6d1c622dcfbf0d76009f82ea5fb43c5d5b75a03ba9a75132d7cfb22d9498a8f6ff340a4482c4dccd4a9f9820a7b034606b429331aa14e756e34694b0f40eca491a6b258a923a095ef8d702ca6b7a8ceb026b2d1e5776f98d23df3bfd2187c66c1daf56364f06ce11b856701d01a10a53bda17784729d3c4a048166de20d982c19a7bd1bdf24e6a86548053666d51736517a2907a62086fcd9f26d7eac80ffc1c27785cff639e39d79197d46e72ec11d9ef99bbc42b0bc9c4f8baf4e8a339608b2301929425f0dc0a362c1c540f87b2d47c962bc2ab1bba11863b9b5d7c25c30b167fce6f32d1dc7d0126a2eec3738bedb21124e2951b0ba0c058a32ce8d87498b4cef51828d58445f3b5f2e8cb7c907d63a1f0ed41fa42abb732482eff5d532fbab729637208a2579fefe00ebfe33628b1f15a799baaa11093da35d39dbc8e43e350e5c9400edcacfc780a1461b26acaae5d3f2ed11feaef46ad0f2022a35a3620605925627b5890c40b74cf7cfbc76acf05db4b3b324844a7ce4bbe84e39181ff5c02e3dc80306aeeb4db13de0851199ceb10b2c9b5046ddc5aced9c6c362931edc93815c5d2c1b801bee343ec0bb50297d96f54186d97d4e3e67346db9dc7f56aa02cd203f829"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34363138383431343732"_hex;
                s = "4c0e3c5e470c7594c2a8b4c04869559c0948d57568416cbf50e7596959ff90571ab659e9f85fda2a2e18c6d7a2244bcfc44a587eadde9613202d7626e9c0246659fb2e9c66aea1e87c4a601745a63ccb5a006e5cbaa56be98dc2eb22e3fbe5a1e7772dd710c430f126664a8f7889d73b5a3df9e0af51a19ef8b1d6268f362de46cf61c17b2b9a84a87ebf35bdfa27633fdf194eac6702145420aabc16cb3ef39f189b6b1d0376b1af478aeb45aa842ea80c5756515af07b9be509ad32b9ad2ebb2d8b65f2bdbc337e4ee5bc97fdc4a55d3de5ecdd448ebbe30fc1667a9ed9d13062850fb59abf8eeb468f2528a017ad88ea97d20af3092e94f552ee4807ba3d400c1d263888534a02741e64e67c8d7f8db88708409960e74aa4065e0917c87b4bbd41836912917c6ddc5ffa16662e996275d60b24c589528438467c1ce75a7b28404224611eea87f2964c1bdd56f9999b8503909522687278b9841152bf6bc7585d8ce231a6a5eae90967aef15da3ab604d7c78535fcf62e36cce843ba763b2063e5541d9e0f0763b294d8ef16f301f36afbb5b86df126a3e9b0a4cc9f07958a2d5929cb4cd295bd1ba0008d7dc01a0b421a0383fc410407d7fa4eca534fdeab0d596717aa858933365bceecf79f400c23234bfe09c59246826c8a1cf2f8170b1bdfc9703af8429c9375518c8e123a902ca921a26113efc2b34a0cea43111221"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31303039323435383534"_hex;
                s = "6f0dc5c6942427411b8a4892942dbbd9e7c7c3b9cd6e3030612251dad7c9190bc7d9a27f72df53142ac00ad59a7a985a29aafda4e311516faad4279e08e39c9edc16388e4f37195b79075a8669586c441fb0d8fe39dcaf0811c4a91c18aa0d928b06f9145a558688aac2cba23649e045f8ce09b803bd0ebf2940e4d8d10be75e3f82737984894140bf6a816480d74469aa5b5965e84e93d81b003932d268bca34ee67ca309eb98de91a9168a93d5e68e156cba3f274c85c8e8251ed21db5f3f411ed1dca5b5882b58dc3e68f8296a565b9be7b52599ee087f61ad84d4b05fdb8a71ee1f3f64dd7b43ce9094058e78ed04373014b26ebc5767b84ad18b36e08eaedc18425a6ab312cf1261ea55c3231901d06dbd7e9397e399995438e83c0ca70f06ac270981410f5fe0e14ed4b568464554cc87e2f71f1fa3b50f780148f8f9c30144ec6b988ff8bce3c0848fba9a5ef0069eaa7a4b4d9f4d8b65b74db73cbc7ad66944f9d86d25372a189a0eb1b760eb9e07bb60651cb49c7a68b312535790e884c30fddce5cc75789885e23c5dfd119c5d056eebe2118b62b9c7fbb8e246b4d2a18fa4b89924108ceabf14b2f05cb25bc48036cc5cc1fc451abc3f924e28dd4a882508cacbe4542c7602296140695001a8ad72dbed9b62acf0c67d92065d44da4fa9574cd2ec4dfcb32bef55c69d4bbdef2def0e1d49d4772e3eb817e4dd99"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32373536343636353238"_hex;
                s = "0f825f9e322a5abb449903e418d7c9aed742de1874f42276ff0a625946065223e4e464b7996ad641e5bea69ca49944391eeaf3f8f15c6e75dfb7a3ab4a2591abb40b26f9425e93f1307fee4129faccd6285104de00cd34fbe2183a20ec9ab2dfd58c179daaaae041afe9950f5c215dcc10ec42d552c5274039626707ee1ad5f6d36f2f554aa39f7f264e8bc1afcb16b2060fd4ad5a395ea7c487414512fc4023557f2d2e86060c480b361a2d895dfe9df1735d009209676f06c2756d9573c561af4adcfac94501e8d8d9ddd0807e72e93d25f86efb79c6e7cc6725ad1a876587593ec9c0421fe77fb404f183e8432d2c1c2ed144c5a5d6e2b29bc2c9def66d7eb30b2c397cb9b0944723089e3a174073356693950a7fabbd887c9593f9ac7a08b03ff7ceb278a3805c269f2eca322ae0b1053e398796d58900eae7cb07adcc7ff8d2e0dbc93a3ef5549426914494f4e371b958be65b399c21c1d283d6988eba97d5466bd49cda527dc8f4f431d9331dfa72d28f894dac8136326f02627d54d33cf7c4f6ea9af79d2ff3a09d6f793852072900a267dd8d0a3f194b046c16dc72f1e04d70bdb4cff0eae51cc5d0527cfcf5186cf6e58a69f91a603a26e36e09db8772c061059c93efd32cc330845e20805a9770b7e392b94337b690e583f50461afd341bc2ad0fa9b4a33cb4ba4781afe87048dba3d9977c0bca85c09e806b7a3a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313139363937313032"_hex;
                s = "0f890e836c4e68dd76cd37b1d8ec94171010fa286f134688a89724724dfd620dfe66446ef130db47d67deeb6d11b3b0fc94086096f052d2a6b8e08683ee2761225dd68827ca9eedfcb0682958365984e4f66a518f65d1154a4b12d97abbf477baf25fc7298414108b10e12f2586eb5dfeb8f3d851fe290ce8af75111cd2dc2d7c01d968d3df3802e6e8552cd45d806fe352a8920c2ad16e02244ef6f1e04687ebb59e45972333219a3034a01ceec7b8963ba0dc8c6a84a49c5dc918f5d7d6e328d5375066909420c3d8ef8b9a1d4c9c898071b4bffc1cc8d5728b00937a985dbaba1ff53220d88fefa9ad5bcd06687f94b84cece064e445106f7153049aaeef36463606186c85d64b04d583fd85e17badfc066334a87425b00fbde26baf5278ab516cf45c73370e8ef4000c0fb202e8803022d86ff136ad676cd9f233394f81f5c1a9d315e5315cadfc3a63e071ae60c150ae5f5485313520656742c61a56ce0e9a0e6f1a236b5138bedcdb6af9698f773109d583b37dc9cfcc720786cfbf8ae33de0235bc837acdd03dcf58db6ffff5849b0dc0f793272e96734a13109d27b92cab0a740e9c8d34ae2118916c05bf396da5ef759c01d93ece8c4a894118864e39496bb86789b1d5ebc7f48234f738aa71cfe74fb1e9643461c0e29211d90c9fdac2e28744a382bb04de61cfacb54323d406587beca2aacb1bed0d549a8a63ee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323333313432313732"_hex;
                s = "d8f825d80f59c06fe692bd52aea31030edd8a913daf1c06d64ffa220506c74f6d0c7afeac7296d3f31352775fb20dd1c0b7e92029ddb482d29458267bb012e4c83363c7a43cff4a296a6b037c1bc2b3ae624cb1aa95cb25058ca81825136ae4e9c5bec15ed3f5e6678fc77a27207aae15ed03b06805bb54b37265fe8a40423869c340a3a6ee4962f3f4b41b3e0d14140dd7b87e1a69cffcb9a484598b8d0050c4a25e27a39850cf51b89e140036d778646ef40852b4d1177e8efdc06091e2653606b78e057bdabc1b73af3267bf2a193c73b4e0e52088e350b4d3ceecff5f83a1f887e077305f88ffa9d4fbd4c42600d288825e4bfc1ef3e58b94321bccc28f1919c71a93a80adfc23eb95a131de702dacddd5a6a9589846fce2bd450906249730252c0c7ea905f21e9aeb4fc594bb362a21935a07821876b07e7e36b701ef3f2a62b36389a7181adeb14a71530d3515e855261a67fdb96cb057d5522c9aad950cdb8a2a339bb046e9692a4671ef66ff44c7ad49956f339c6c9dcd5302b97bb37ce70ead5fcdb05a9175f09ba8e90e239f88c43680eaf3bec3e8b993a9bd1e5ba93d48435d52df32c73be348c80dfd52db10754acad82d8612688742a2db06e988cd3d09b5f46f36b72449e7316915112d87fcdc205b8ddbf51f1f839cdefd630e64b6e508ac7109df7c0da92dc19044ac7ff73ef1c2c962653481b135a62b3d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31363733343831383938"_hex;
                s = "0ac4d2d171f62383751b153e7405dc1e330aa28751a1e1180a6cfe8ec71bc5edc5bddc78500f2beb7f237466cb372d968d2f2d283e60c318ce01e386c566c688372b440c7354eb2944e77e065a8f8c9f921ba342848dd5edf4c8e1ff0b8ae9ef32f3785c79993f41ce0cdfa6a9a2e22411b8d68971563995b30b6425995dfb2bde3a55b7289be1e5318fb1c46ff2f1471ca9a48aa6245d90a82345b839f345a4657dd928e4f0d79556571fb456ee0be843d9973061bf191ee2edffa0daafc058801ae69efdfcb2266203f04befa18fce8c1f112e9d39bd391c7665d1f8f5e7060ed3be7a83ed95d0e4b42023dac95dd5032d3afda29dafce28af0721e177e0d8528f3b8569ee659906304e6487e9cf5bc314e3ee68eaaa0c9cf461cc46def4233c4610fb2927dda8d8fe851c8b339cf44598460c66589c551c81e10e2492734b1c6b424a6107b31393b047c5c609a75cc2b9f02689eeb1cc41606f63025cd3fc7ceaa480d31ddf9633051cf9243cff899c9debfe92df2fe1137e1acf8c1c4bc959df3c9c7b703c8b645ca2a3c1d717e0e86b3eb16ed6f24a3f4bcbd23a207ff4f6767ce8f5d3f720b733b913531ff2954afdda9d6f05ecdef0c014779b955f732032d1d36921ecc285edcb5e6e3dc55b30e2a8c0e54b84055d209232817c79ff40bd5119a0779edf2d85a02430865dde84184f39a21285d653983f8cb309cbc9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343630313539383237"_hex;
                s = "0ab2a709842bd7c83d3f46d3e6f354a06f4dc5de02a92a2b6f7f522da6307118532841d098158cb89bc942507cec46a6545a39a7589cbd100bb39c511d2fd4bf575d191abfa6895d48db98969889bb13a5af1627afedf50a6e52e9949304b8cf5eb52688b871d7e94bc7ecb696543bb3fc62bab81a2b802b5920a932a4308b9b0b80d04b74552f64326d1140927b7e8e2be808b891e898c013e4f34d4583214af2d9372f8516ac4e2d9d069a3054a78f054480003d23dbd4bc4544d40a55069eabf7e337d8166ec30940553c2518394db88860e16e639825ab955a5458e0ffbe65e37fb108586614de6411456f7d1ca5a5bd8bc6f1853c8fddb2e6af02629806190b5967cf15e5abb336f52a39c2388bdfb7b437f2a0f3bab1e0456b2ec9172a2c4bbe5892a2812cc9cf70fddf3f30bf9968edb5ca1fd8da8e85792d47c056080db0af03536e4c9c54ae6a6b592f9dd73babfea0445127add69b902241fc5a7b7e16e5ed1dac726cb149e62ce6d7f3847645035abe47392f3b130829a62a948a8adbb19e09cdef8439e4fa6f8ae9c26e30f69f768239944faf3d565fec326b3d6681692c830c0a55d68e452aba00854ca34e01f867d7bb009b4f1f022bb9000a32787108e8558f9a1f2b99cd37c2e4e31f4b9385f636ab0754c2895ce02937e7fa1ddfe1fe53f5515124ae95d65ac78dc4a946417a6c84ac51d86d8bbcced100"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38393930383539393239"_hex;
                s = "c4ded4ef13a21a0c96deb0c359d6fd44c10e4f41ad69355bab09e9a177ca60975802a4b2f5abb327088e3cb6dfc22cecac0d2c078c3745497a3072b8110e64342c04b262a08e64f06acbb849a31dac557697889aef7fc1faba576dc5679c915593da7fa161393bba6d764c77e4b35693731b44d8db74b0e89f6d71ee17a1978f41d9855c2c1d517d2abd1cba9feb543327d96e5ae0b7927ba90ba895cfa265711a83de1a81b524ea667bb103723a826f6003cc64e7ff4afe62e79f164e5096ce5fbd5c1bf7edd68a1ae3cf26cedd2a52c1f930dd5bb26e7d1fa874d0880e52fb29bfff568b228d3d3092187a34cbc8e478140f1ce5109cc7b5b0b4095507c58468fad7ef423de1422a6cc079758e6d73a06da2093206263c6f269bf35188cb996b03b0a103a6b2e497c0eb76eb9fe478f919ca45470c5251dc2d80122ebca801ea664a7ad8ff91253a508e1df39a7578b08f30487979fb6e0afd7c31e6aebb6b2844938e12bb27d1c2de5babea453d0cc710b8245b9463c6d55060a057c0292ce526b3ce06f21a4647e31260ddd7006b3ffd2a93ca2c469ee40a55d38786f8b4049f17bd50e556614c6bcbf87a1cb222c68bfe0880048c54362bdeaf99e7f11dfb4daee75030170dfa65b5b41d568444a212e9b1296793ed1bc995f0d1cb31d8639d94ce8c44d287740b2bc8342a0d365139e36acf82bb090b0617ac5ac38d28"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333236343430393831"_hex;
                s = "3b819230cc623c97ddcfb3d82ac408bd612c01dc6e17a9e9aeb92d4e6240001b085839b17c1806def35b500423a63668bacec45925b80bbed9305f84cd615ce2e63a30e3e3ac16d7d90f8ba85c8b147348de23ae0b57efdd48770ee97ede9af2388d326229d70201f8f8f5cc795c18a5c63dbdc00f9e2b4ef936df89d8f2b5bde0a6fc89ee2bc617625559b024b511940e0c18b5709927aacce6888350a10bfb78ebe3f7be2102857e922fcf4485e01405591c97cb337ab82b2c68a41acec507c3c93dc5a384f4e2b0f80a6fcbebf9d92cf6ab27c43c82084eebbdd25c478a19b7753f41fe949fc22c2b40f7617c190f370cf78e9a661b208677f98abe1d894d8fa4bedc234910f166e1d93a22f7f3ba70e77092fb598caa4de1d66519df9afced87262c650f23ef6d23ecee659e9219741234813f700f0f6dc1f29e3a82a16098c6b511f961b08c66c3add06361fa8aea6015a6685ff766143561b9b7fba9271124ef24cdef25a0edcae70b1acbe5648b5398a2875baa6d98a1277dcd24ecce2e75de1724e439f79506529e62c9e8b577a42609a4322a20e2fb19defcb7615addc19028ec960e7b2626d50aa07fc12ada46a082c7560967f7c9825ec50d473ff2cad02ead4dd814490fd3b07f57f168317178003f0deb870755c7c1b4b6bdffcd32c2b8796cce910862cfbe04148dfe1cb8b88226fd20a974e25837eea84453"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333736343337353537"_hex;
                s = "628f56eca3127026bc28b903553a82be78660a9f9d74074d279849dd7c117834350e060d4a3e5722203b900e08e472818e241ff9e77261a1f6e90054cefeae205d5c55fd67a350e3a2fa44d21453c6614d82e560ce1fd70ca5c9dfd2b9c8796f9ba2c601f4f756b1377229d072edfa222ed74ba69a1c40a61f9fcfce400f72084c98f24c351683b8daef345daaa4eb9992c7a0b621de7d14d57876969ae690e2bd9fe2edefe45cd6f218df0d22e1bb5fb534d7540b6bb4fd2a68661f5def76f102e0a926b1d8bff0f48ea43b83a42596fc66f1a9e7ab3963a2f3e1248db1d925eb48aca2ee72e8761d54f674e59a30301cc2c37f2e1ad9ebd9c29e6000e94e139c1a53808ce9be78303e70214071deacd11420812e1ec796cc7d862c10de0c11b5eb80310e2c94c00bd108ec1670cc3f0357a5a4d9dc0458f32f9a78fbb7ce3cde33690db9fa266c8de1b87dbe757eb546ef5fb9dff80030172fec74b91e16d3d0e80e034cb47f84520ab30a0a23289e77f27f1b90566a0b23623d245fb0b3ee69d7a391bca4318cead3cfead86a6f2b839a59530d22d2effc8390d442ec61e9158b5cd20279063cf7a4571ba8fd3815b5805a2b74abd326496e4d928fbbc8116ddfe372132b28b570e16d49d6126e16b97d2ac4236eb1b2ec40996726fcdafa333eb0ae02fa6a651ee7af923cbb315e1cbe300895178179cf53bbc0475805da"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383630333937373230"_hex;
                s = "dea49099992059c910dbf268aa02c69df2064b616efed726e5351b8c1a8cfe3b348194fd82737c3913fcaeaebc1393ffcd79d3ea05b10414f22e593b5b4200f6762d21d2b0c632fc7b84799c4644a8c1ebb95e4ea4db56fe614f6451d2882c81a5d20de3c413d70bffbf3ecd5a1abbf7fa41d0caa4b2795e796bb2847db6a143e602bc989a9a134f26fb3b61bcc04ecd4a0038845985037af0b09fd534a7ae44d9eb5178567d9d55605ef462a597456e945d677e057eb75d6245e42da888233a8648affc6faa00ddb937debafef25a7a73a67c87ec62491549ff2683e811cd967929a30f3f9d5b6d1dcabba1fcb570a96ac45f80115c46ca41f8f533371f9f94ae87f27c549ba46ba47254dbf3a51b55b8242a15c49e968eb961e32e2ee245e81fcbd9683ba28d29b816eb6e0b7698e22c53032457f0b1f4d1c83bd91c668b0fc768a7a2bf758833e46ea0c83e717ec86698228f8056f06043e9123dd63d02a7febd2dd034fa77848d7c537d621abad137263d8eb65b5285d7d87d08c8f278cd9a5ac194bf831961ee942c9e8371e5644f16e3bf6c9ba293027c72606f2050574c85567ee819eeb4db2853518ecdec29c496f40a3b9e6261f11f09cda24e8a16acf7e3e2b38c783e05f2eb67d090f10c7b0caf8a17b7b40ad2d6a512927f0c7d12984bb1daf822ae79b604bca111eb2ac988069227adbb186b982d09fd56effb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "35383037373733393837"_hex;
                s = "94d2d119ec02e5dd0820f1950889732e0153d0f15f87e79a15463976311e435e2ffb57b2fb982adc3aaaeeff21195b16563aae32f31df8a63638858af9b568f78e09d412dc9c82e1f39d4af5f37e55099f1a2055734a9e62252d676547694b9bb6706df2eb503ebb45e4bba38d01930d7cdedd44a38403873c25357efa14247caf370385da833fc73280139ad17a4f18b548661e09e68a5b2257c883ff9386109b1c01bf1edebf63b0b02df68ffd80d9bda797c48f6f667edeaf3bb64c6bd149a31292ec1799d13aebb3f852166d92c466baf491a7108615a4cf93a89edb47ff6c53099940eb1354b7d0759e5d516317e583926e5d4e7eb5c4bbb077ae7abab6800bd873c8b08418ef2f6b4394088bcee1245527c7102324ee3e25d7f9a4974a712ea659cef464aa94c8743cfef396c909a481e3a8a03db66f1cb3a6d6712c9a483124daf71fa585059b524eef5491a8a92ea2f563d5d210b3e354fb310b38cdca0dbef4fb7cdfa1dc61e718284ec46f90a2da6265882b2b17331154fb79a3f6a3f3d22b3ab3d95b42a2a9ecf90ccd0ce71940ce2d394b3eeea5842337e368fe4dc79b9cf8aca102e1f04706f009e54a32dd320408ab81eaa92754d36efda34767ad15071e3d5aaac73e725bd21f261da74709e2c6a783fa65be1cf0b0c5813ddf54c2c5cf72898ac9fe5bf3f5adfd9b95922e4106bf652eb296bb7de7a5f3cb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "353731383636383537"_hex;
                s = "4cb1cce5976846ee9b1902ecda4a0cac00176a5c2c39685725e68e11a41f9c30272857e89d907bf05be3e52de0ce2c90f838f6e9e25a6c1adb6aa3115710b16eed204b7f1ba2aa1d12793a7bfca62191bfd71ca26595ed5bd550c3883f54428b90093ae82c20ae0d24de0e33833909c012efbbf6b6f6a72d8769f5a70ed4ccfd3a50ce7771c0bb812a51c37681ed7f32e9b7db37346221bf0f6bdce2b41595bfc354394a5cd5786287acf013652c58400daf9b37fc7b7672daa4dbf58afeeb72e92216202e76b2715672366ebc29d9d95ed626e1020c82402fe181a3f6bbe1272b38df4e54700b018ea1b5abf739d7cb910c874c1a3709225213e6ba098de51a25ee357c087542f5104d09a1874f3372aa04413fc86af71b85f575e6b836bf37c93878fb67ba62eb050a6ed702e955b143553c74f7607f302052551686074f13f4b978cfbe73e2512221e0b493d1e607e5a5ef5e035ea4e9da3401a311b515c243157d9b422a8cca2c1cfcad90311919504cb4882030dca57e7dd2496fcb484b374b2637029d661b6a12a1ad1352a21182c39ea41da2bfa43af157497cd4fe99abc71ce3b5418cfcd4d9c2272c76e5059ba848405f260e82543637a9c3c3862ab17dd6fb7e2910085f59b05a84d949400b161dbc98949bd48476e28643464c830de0d53c748a03a57867b2738356a5426cc354d1449d762f4f4a2bc3a1df1e22"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38363737333039333632"_hex;
                s = "0d8495737e9ca3babb2e0a65b8245ba48cc8c549ef6a1a805f52de88c231d6a9af0171b998d43b36c7c23ba72520121493138bfab041a01e385441382a8d1abfeda5061ad69316cab49edc76ed094ed1ce98c87e5e42df0c27bfd3bc14261140b494776d7deb14d71b236cd6d9a1163e33733385ef9f5ae142e500d7bc10eb24d7b3313c14b6fb49f93447813fba01567c423c298769152bcd058a59305e8aa20c6f619139bca589e0990005d64ab81d3f2eaa714e06d38641effe5d4331f9bf3f965a562086a559eb1e880c580d4a3e82b2eee443d447aa0e9e2c336f7c5f1489b9cf4b053ba261aea7539db56ed393b254003db4b3e27f74069f40882cec8d330c4d16c213fcf5e455bf1e096b5d40ed7ac4b07e42b72607734bc3639a671b9bcb1587513a33feb8e383b648e967096fc470b74516ea5ca8417c2acfae0869fd23b3e4da17692c47635aabfb16378b82079bf23174f649c0e9b5392ab90a47c48bd2b8fba6cd59845aec9e01ca006e7bad20ed5e63198c51df6e463bf8608a8f7d3756e23ad12b5422dc197dd5b3744d7f3416d74ee1f20612ca2c988506f4be50fed1ba4242766f784c3abe8df925c2cd164da098750c90259b3d2cda1ed9c6c6e7ff3be82821569f9bce2d8bc93aa4bec82423b44beea51da455d4f8ea113ae4fc548ce3d5adae413e76027eabee42f1a7b7b8750b77fdc20ffbe3bfc50a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32343735353135303630"_hex;
                s = "8ba8e316d73af1abe432de67426c744489a74461ffbe3441c097c4b4bb667ddf70b90f91c3cea89f8424c6e38e6058d6bf927e71981f1d2346c7227965aa15bce105e2a9459fc88fa8499de866cfce8db36bd511b5ec7b1bd0c67f0e55d67faa1e00bae70aef5d051d9458c47bb6bef316f30a5d755283477ef25063f0ecc4ce763a70bd417162a3ee0c85fc70c6a72a412207d216e6a3ee40ebc25599019c88abe66aad7d8a53d72fe714710b01a83d5f9bd340e6d9bff785c78b1ecbb62af2c60a7a0f2618789865baa4ed06508f0916eeb695bf3ccbe7c27098690ac1f06718c46c40945c5ffa3a97142a2c36000a3b8ff2ff801ac0547ca2b7c803c19146f5d550696acde3697394dfad4b0184143d8c1cd4b4cf29b52b6a451eb0fc76df7e7e5a6ffb0a90148683a379075974d459975b09e7d00dcb80bc8b83aaeafe6c8ff34385a1e0694bae94c68fed6f9b54c35a6cfdb5bac6ebe21b437a21a120bf6b924cd564acd013bb64092bafd803289a85184c370b79fa377992df0599d0fac6d10e91f790d9c659920b27560d539e3e151d225984a8780b7db5c0d22887dc7a3800e2e33b912a7970f1e223693cc881d59acc38ae28c15940343e98b53bc87a649edbd427ddb3aec688cce8334105bef45b5ee7f22d4b7be251c92f4f94079c548cc715e006e0892d6489c3a97b9b06a3255fa501adabc26b38c1c8bcd686"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393733313736383734"_hex;
                s = "74ff387e3e39f8e537f8b26d325e170575195c883b5a8797fc08ea29f36b6c491163db5fa7fb9aec1ba9ce1118e888cf506890c086d4ae5710ccb434c6ad012216744bf3d19fdd48310af9a79b9d30fcf8a5c762d3c2d7a45c5a0e08a516f05261835c7cf97bdc61af4dffd1bfd46bee3d4b1bb5154103aa7bf248f2874c62abf2eacdf34a8ee84fb20324901f6aeb04a6788e5ef101da1670a52178cf9012220352f596a7fb6181c5a48cac92e7d1b90f4e5b7304615bab2b1de549159449d1d70362a883bd371108a190217bcf218b37ac3f3638ed9c80c160fb3c7f0fc6fe734758a9c3eb2f24cd6233509092fe6156de82386a5218d5826e6768d8e538823ffb5661122938c7b6d78bc7af840b9d7e1cd6ea2a81d3aaa5624b435c22a0ce5980e3718bfacc32358f1e7ca81e7fab7591af1dabef8782db37fa17a9dd2feccc1bd9b60a5f86e17dce8d6d94165b121036dda54f133f152443ba2899b3ff474b70885999dfc0fb031b62cbe138d6d53d331ecbad7b7f2cd02e854cc18c57896dccff0280c249e10d53538ea6829b823b637e589b7edc34b480a855b673d6b9d8456cc044d85a78b9982e8f91a2f5e73b55dffe9caef5c58ffaec3263407d55ba7a1c41857a5edb0c01df474206ced8bd3cc23efc63d555fbd5d9c099a692444195f516ffc373a39ef5ed311995effb36c40fe19295de73b73a1fc815b753aa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33363938303935313438"_hex;
                s = "d73d7130ed46db04bbb62ed7fd549cb50d6ab5ece0b9531c4d3a8d98c732087d92f14acf6f4405ae46e82ca5b11a8f0ad5b4ecafed60933d357a7d6c87a81a93eb5e2b2503dd154a2274fa171d68fd0e67d20fc206e6d235f55f2645f4c6b99ec5a8afb2fc63175dfb891a6cb8c07886f397b53c5c25bddb68244522b88aa6dc6ba9fd3293f14c2c56dcfd67495a88ca302a376e9fb384bca169028abcc57e9751abafcd84753141b6836baca35c65ea073dc661383fa4914567a7fe6baabc9e5542161d956b3e469202d1724c4de026b5d116bf082ff7575a8616044610460e0dabcf77f16fe30a5055f11b31b32651e1cf604262bca1cef1a39e34da0bb6ce48fd16d6772057eb304ae32513a247d17618831944cd0fe03014cfee84b8d283d501c3f152335e7d65314bed6e69d127a3dca26026c58c867dae4bdf4e28b542fec826463d2e8262e32302451012b7f6d75a95fc95344ab5f1861e5893044fa380903976ce1534dc0d26264d84ad5f80d6c6ef596e319b2569b6783217062c54a97f3568cc64f0f7276c3601f7d7f355bb9e8925f15abd34fa05a1afb0e2b61a4c56dae725d72418197e74cba49f070d775b85cad284a1041f044001a1448a0e749a3bf5d6cd96b8e403ec1df32c9c54ea6ec456117bee23b6649368d7a395618b6098bbacc06ff905ddbafe3b51da9e8bc465c3577a07257b2ba0f9a605f248"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "3130373530323638353736"_hex;
                s = "9f080a2fb38adac64e4fddddd792262e3e8108ead070335ac50c9757f29779d7c92ec11bb80089736308ad782d376eaf603f20bb63cea88bf04985b15c7aeb78fc2743b74b43b0db31396aa3dc0d9dda5b2785d855f7839ceb84b848ef846ab0d1ff232f115e3bb7e24274ef8691295fd5d5a46a2a1d8941b54c463b8af0bab78a0ad3ce5602a3cc646c3bf6ef00cca2c5a5b354027269d25271e3605189700a8bb576ae3b33632b644110f6847911cc81df1fde47f9f6d2284715ac6a5929c1820bbf88eeb59fcd880fa193a003805b35704052b0e4d30d03935b6edb115e6cb4d15f612bb7f19f25eb2d7aeee054824162bbb6191971312d9d7233f031d961df21907a875fa0f4f409a4bf7a7e253de1c77d4a4e4c354a001e1909f4c29233c9e414bb7fcf5fa36aa72247b0dbcf317134ba17e89665275e9ce9ab4e7f26b03a1684e8bc121b3688ffe09b7c08df46436f9eaa20158def506de8799e55529a04df7ec1033eab6cc264ac5a2f0e2315a0cc64cf307b165dfdda47556402829cd47595c245df74c10463f70619a49d0baee6b7dd5377984dd7a34f5279dc3caec9e76213ceecb59159105a069a0180082bfe7ced2c9a972f589bd1dd5c83c95b3392ce3fe09affa85d7ae8069a5e7e86e4c6172903b5a7842297adb618867aae96bbd0e3137907f0478783a0e1e54374ef8ad6ca71554a810cc2a03b368607a2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383639313439353538"_hex;
                s = "6e6e26823ef14367192fb7046e1a327c60eb0e728dbd290ffefc68a0a72351d8d7fd82d986ba93ce6c5872b4ee4b4993b25455899f85004db0dab350b4c5d731d49d40a89ab59c04b9b4d33c02d738c79301f1e6c8a33fa7edb686856b24ad4d08ccaf9ae66ac69ea22bbfa94b0b0448008f299366e7887d3ae937173d8c65a3763400de1c294a927a3f07ffc27cfe2d53d9eab4e11fae192f154f5835e1d1c5bd0034d0c4bd6f9375661aa5d7e511e34905a0ae2c5c1b77526cddbfbb9249b2571e6ebb6bfed6dbe3885c96345b7ca77402e081d8dbe1a3166c7cf013467a781fea511e7f5625897667d7d0a7226e13220a6ec35b13fa8b0154ec7822513424a3e180fe24c38795c404a09f0d20e9c5821579ffe387f7082b9be1d0abeb1474e4f54abebae92d48a10d072d2dfbe08696d591a1c38260ea8c246e41a29f6a333741ba5d0b40b6e9a96e66c74f48bd8a4652e495d545a14c3c326951068eec293ce3f7f40de5ae1e4e292d6cdcb1a852670a245e35a9fce0eaaffd0f89b9922075974ab98073f241c02ca3ec9d468a982c6a00450a1e25f1167e6d9f6bcdc94ef16a5f14c23f0fec06dd07786e3a1bdb21d2729cea85b99e5edabf2be564714e616886b830bdd93428601f08a56b3229ce247740ac34aeee86381562d90af663b2cdfc0be4239cfe0d7e7c88d21c8c3252124be50f081a3ac800da1134b239d1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313734363535343335"_hex;
                s = "088e63d9c808487a7eb7222c4ffb36f994d2337150e8c6a4cedeaa89ff0b8303e4dbd44eeaab61d5607106abdfef681144529c2f5ace10847878aa536ba2fb09f11b9e5b6856159c5d968875d408b4fb17a1991bf0757553cf1d33a1ca5d4f754663e40db281223a6ec49e057176a77f13f9a8d0b8ff3e9992f230e09a86532a2d2823973a3a889c324bbfcf766d1b5a6c329233c2b30c5e8c44ec64e764f73c725736b09a7ecc6b5c9498bdcf63f545e3d8d069ba00166327d642c3f50d047b605a0bbbc95c709a851e7ece1f3df3926944bb1d24f3fa41373e5cded2c8dac1fe5b4c475a690e6daac69235dc61c02d46f7df1099c092efa51df4a250fbd04f458d3a31029d270427d895e98f6f8232945b4ab68dd1a1944c4fd63adfb7c9b4010121375fed550662eb595b0aeab430495af86dad77dfbba611b7be681972150de25b9276e955281bd3cba2039df22331e8ad87939a952b185fc6ee55ae6dea9b11cecfa20077e6e8ddc5c8a99b78060a7d7c4403b34816aaf4ed5470a57f688991a83d6ce81fc4abade923d25b753bc6c7354bbbd19de17f27025379de8983d1f1c51e8e06db23cfe5fb9dcf8228ef23554c55956031c8be7d99cd8826e386602b45101cf260ddddb93936b738ce36459e6893207d62fda2c6c70e4ca3db2429aca44ed6fd6f56f27117f57ae6953ab627f3463e0d536a738a6f4878f44f6c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "363434353530373932"_hex;
                s = "686b8d3fd81ca272a2ae99f1e3ce58a44afa0a23245de6b76722c21a128b48ef70115932fbefaaedefea994551c2de04301366491e4971e8e10dc64022b5bedb8d9a72de14e6a5a9590841968b8fa04fe8c95e3e864703a61d660bd8b2ddb9d7508ee8de2809a5f1008f8c271aedd902bab6ae6722c177bc1e2be684b3e63d0ee4c0a178656a3e84d3825ed0051e8aa72107f579cb1d7809a4a40a64f27f413e5ae98733b32f8540c73ce423e04123283a0897a9cdb781dd76336d8404abbe2ea6a7feabcabd11b2cc8927246c805731a174cdeb8d8dfea2965ad27d2ec9d209ec81e285ad2d734bd0f0c895f1c6b27ba6653a0f16ce465b869eafc3be685b39c13a88ad63ef6f28d522ab31a3c6e761baf1630ffb97adc9fc794e641eb903d15b4375eabe39fcfa0fd069c6af08ecb1b0973a4853eaf37df834e7abfe8e8db93089cee325c54e52ce3e08d7136da5e6869d668b8663029d9edd304acfcd08d3979528e14d56195cbaeb5aff23f18aa1c609d32ba4fafd96c956c75dd10c992e3dec4b8c22e8998ce3de6dbc0e6022ff3ac7290c6f0b6c2c69a92099002c46e99617bb9b738ff0d8b9418ebb62d8ec7d8305e0d4eceab97dfc8ff6ff8dc0caab1f60d5d9113b51d87c2ac21275663cd9a86592f1f4972fff3bb65f836bf9e29255694550b5148ffef4c40f330deb052edb15f388986523e6fc02cb4105169804"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "353332383138333338"_hex;
                s = "0c632eaa3511a0c522eca3ac368ad6afed51239b011aa410260a0b13af5084ee17b83e9750bb49127ff92e3ba9c87e8de6a4be9f81e042ed44ce0a94f3d1ac54c8b884e865253fe52e608375219b71af51297c422794feee2fca2cd548dd406829f9a5136f741a5b4b52960658427b223446b5e25ebb74d9a3bf539f042a8557661365fbd0ad1c5247470100e293b52e56f189e7a9781bf47afa2e37628f56f08e72938e24637e0e6ce9ad8e274b076664d22feda8d48acc8285481d368fc6d590cf7eb19ed12162c2d1773fc6927bb14806b4318f0eb813321b0b946c2b119962771135ec9a956ffe15aef53f452e5f3a37b4a847ffd840d8f6cc4d53b9a197fa88290612b0c53c55c2156688f47530ff7204ecbe1ad2bdf48bbe9c9a816553d93e1489521de5043414daa54694e4cdf54550aff97425fd29f8de6f172531ef523ad4070dc3db13d43e2ad4665d8e7232066860ae68e0dc8020fee46df6c373e96ed4e463927c50264db12614acc2d36389ea7309aef6fb9b6cc4e9603bcbd8c375ee06fc3609a0d875262a4b0b12b231b95ee1acbfcd530f66c2bf275e3d346fbbe736dab9cbb535e54ec2b7b73a0e8011a7cf23920460036a3ff44a77a47bdfdf91f822933c14571221781e1be035aa89c2e9076f7a643fd46ce54fa824d804d5db8a6dd4a559df64981408e61a5f2d9b64f3265a6c8239671ce5d637005c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31313932303736333832"_hex;
                s = "c60c811676922f88e16c7c53bc383cc88495996b16106475efbd765ccc006ef54fca958315f3fc7ed4231fd276d91c589ec46cfd2cd5a7f7ff720d048d7e157d0d85c45d461773e1582870b399de67ead1b6ca66d8813f02fae68f683934e162570c133f5c3dc237338b3727e801be14b0f96a36aad708f1cd8a865f36edf4810792d0492aa91be12b2c669900cfe094a9224b4fcaac6180bb2419ab9129c9a95d2983546628539c5d246086e1db3a5198fb8e6bcecf33c735df8c5c262c2a3f4d048dd4f5f0e0892206b3a9f44ce19e94bee09980a3438b3bf59c030e681cc6452d8d9b17d0d9a965c2e638451551f59a7f75045632f118ef18849687dd87c6786f9cf7e07bd033d3d53f710ced57b3ea5c227097e7e4cb83b31cd33c10f16022b7417a6dd4396156b4569639dd4eb24f2e4df54e9c637aa56330c60e7db190fc5ba9f7df4026eb8e3f99d18ba6a8e2342022eb7b387d5ffe768cf800d08c5e125b60cd3429d52e0545efcc9b1d90062483e574135707cba240c299f4ad25c97abd2befd03fbc976fdddd9a4cd6472c9478cecba718caaaa41473b672b80609dfb481558902331723d32cd9911e4380348cf6aa8c76941490643511cf477567a999353021671417b086c3420bd0d5b5497d12f22b8fa2c6841584d9c340e5a3fea24b9e68bac75744ca92b080da06273c640f035b5a4ea42b16de0c91c8e500"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31353332383432323230"_hex;
                s = "1db61fa962fb6c90e8431d756a7363fe3ffd9c86ef041c4a5fd90966f7261e15424164a95a95a84a0caaa0dc78de4ef8a2721aeef21d573fe43d92e823ef9d834b17230653d745856bcadfd58df03c9c961ac35bdbdc171a6ff008d69675ce4408ed9594e2e5f133480f4da9b935f560093a537a674a804635ece21355ad2e9e7fa6f37c1afb667e20ea4dfc47104a7f481f8f2f0c41cc8559fe1c6e053b306050a555c8fb459fcd3aaf96c03244ed9609023cd6c4df9a12ff6ca60d09e38947e7e513084b25cca9c5c69090279ec204e04eb1cc8053cc717028c8387706fd9124c34358fd15d99bef94cb1b7e854ce3225058e1b314c8ceb452beed8d4833947944b08b304312179c5a15e468f8cde56a79a5a204628f949483e161171f20cd77ccb4d718a853d563669dfeff538170b9dda48a73fe6013d125c032aff8fde56bdb46281c4c47a10b273327266166592d4b4cb279af3bd79226afdc070d1d72cae31219b774fad3cc9fe55af79f48adb63a366628a391f85f6cd848e4ff20e7f9a3fd63657fef4900baea463ee2aabfa0315b9350d87af392822c4dbb8480e7bef84fb541992d333bf887c73862d8728caaccc77790dd52e03ad9fe0feb9b0344d253ee0860b53034e44403e2b7d79fe63dd8ba3656ca8c8d6004b36226b035129ec91a22f39dab717215d3c232ab8984015e5786235c9ac681cd43ad6b7978"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313536373137373339"_hex;
                s = "68cc5504123990f23884b399d9825b8998c0a5bdbec36e0e1bcc8848b3415cffa62525aba0dc24f7e131754567419d5f18c07e0ca6c53dd9b9cd97fac0e838e307c76654d57619ff850601ab14e30e9277a28195fdfbf2ae5d17944a1d1af4b3165da32cbb9ad6ce6bb443711516bcb0c6ef8cc8e088bc053cb832f7e5865ab1a2b8adc0338b3669ad7f24bc10ac71fc9a568eec56199652af189873e4743185b779896f4d1e675934a830269b9e154726cae7b18b4619bb437c208f4e95e7069cae965b005d243b2af3bd40b2aa6b1ead73e341da18e59d0c7333dcba9ff49eb6cefc44c8c5eedab018707d7e1d2c67c33faf4bb74e421ec10a827e985c29537471cf8c0579db11827c4042f94a842d4d7b8c4fdfd1f890c55cac9583d327d8ba9a61c45d51eabe2d07eef1a13d8e07153580592c67e77edcbe00275c6a6528bdf5ba7199472ca671442dad2644e1a7fa1b220fe2526d53a9ae75d672671405f0075b6a3e928fae8cc39189a4884f016535715fc317314ccaec09c056fe0dfa1804f73de3a4ff3c67d46e6b4866f422637ce842a7bcf787a91b47fcc30ab8d74ba65cd19182a087423c21eb15dc707cda30e9245dd23af9526a29d262e52578c1c4a967b4157b97bbabebbb841bde95f6fa24500c5895a38fd22f4f64b1604b3099a84aa254c410228424db3120c267ea138305c9dd7b414d8de16e50c266b5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333033303931313230"_hex;
                s = "2d43b9b3a341383f56d292000d23bfee68834da08d2ea1b0a8d3b80534bb4b49087330fa1db4142588755181eb8672c3bfbdf019fac30b7f99ccf8a2836b1eb77f3e3fcc4d734b7bcab1daf2ce40331f5f33db1ae75b6d2324d84bc896c4c90e4e874207bcef7f0918b49496b9237c570acbf0aa847d665a442ecc0aec5816f210b45d9581079e6862fd6fc21d414d4bcb7760ee56ceeb6202a17750d40b05d306369814198c5a3bf86e16ff4a4e405d5f2a564f79e664a5f881227c7a1e2f85eaa96a817d41fcdfb621fd90b8cc23044dcccb3ce4bf6d9ff5032b8a315455fa685c971e9e2feb9cf64ca68e50a88f86e8e3e7f831dd9ccc01081c231c8ebbaeb2e6dd8a5a6b03231b086020dd963ce66d2e1d17fdddf856db9bc2c90c2584a0b62c1ae10a13a3f94ed1343a9ed3b32213beb14310dbae446644f70f2f83609c69d2d5b6726b224b0172c82596b632022379ace2f5ddc2c8c5a81932978b2ce59d5225111dc9cc3370f4bbd94490c890508814222d1cc49475fda010a3d7af4c36eb47c6b0ee9d7ca9bb81ca32fe0b43c1455290b3c75227426f35ca44d5dd091ccb47bf5b62c501e3433a316572bfca051f34549cc4974b218dba2becffc8706d00723e06685c8650f0d3cec60b5f4bbfb0942c0bde7772de003ab00c5ff250391ce3ef0020eaceba814698fb1469d7743ecb0a3880f619d71e33b0ec1372d7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "37373335393135353831"_hex;
                s = "b35d563b4eebdf2314db7381058f0eb7eb818392e8ba267694cc070e3c48ca20bda8c8dd90892303ac1ef23e6dccf5156f130df9dd4c81150c3d224134b1510025b52d7f1cf3bf87ecfe6c97a38f675fc4c2da19d9a03c9238809e948e94774bc4f4812479cc2a36cff97b19770a25b7295e41fabcd587c688d1bb84fa0a919564082b44ea5108c7f1b4b056e0b1f9969767a217026d33d09d4c6f8e1dbdbee3fb67b67fc381a275a25496ad718c0d3ecb15c06c2149e1c64bd392c7149c10512a743dff0c6518f8c85fd5fc6bbfc816b36d0f0e9dcf7f178ac1a6ae908de3e0ebef27c4d4e6ef231f1637a1973a0e282f88dd6f483796531a328000245db7d3ed99458d000d0dcf1317de84a76cbad8cf34dd759e19cb72c48d5978e23f3718cb60c6fccde6d24b357f5bf3efbd89ab485f14b1eeb0a3c3be25e29544b640b98580afccbbd90eb6696d6240ce230ec5a9a40611958b27d8ebbd87b15224dd0a6bc7d66ba3e880f6a237a48bbec3fe2d0cb2bc29d9caecd2135eec9a4c613c542d68a7ceaa70932f8c9768aaed242e26c6ba744eba1939143ab00ddf9a061ed3c1caac4c162e1dbd9c8b1fa3b32c1dbbabca6729f928cedd40ec4ba9caf504278cdb20a28dd7280bb2c1acca159f9a67094e040b014a0dadef274b087255026553b978a79a1abb555cc3b08dd02ddd915bfc9897c66a9143b12496ed1b659106"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "323433393636373430"_hex;
                s = "d4552bbea0686a868ee9ecefb6207534d6e40fc9518b40b66f1bfcf85b091ad9544aa27ef956b265a7ff2261d153ae14773878d4b662e8a6a764ecea9ffbfca2a658533c509ed45e2805436f1975264a0a017383718f8e8c0e50ea57c716981a4ac02cd8598277973403327829c29f25fd9510ebe8cb6bdb7897b1c90dee064e3508dcec062cd962589b41b74891768ddcb105fc8b33bad2fa6bd31e065f6a53aff9462de2fc77ce145af3b90296f27110e74c63d64d1d8716431c74861fc87f5f1be05e9036a2d206ac975f977dcfe0498d043acf4530c241a7706ff6087cae9c54b9f0c2f3a824f1604f32d82a9487bcf5b3f9710c6bb8666bf310bb441e0ff215a6c326a21ecbeed910de6ce5fafbd74b442f12fa6598893bf5d9cea713d5a35d3752a6f31b8bc7bf9695075d259d435a401d60bb73e1ee789c3987d64122ff128ddcc6dcca5e2976332ccd6c2735df13e1841b98926721d0ddf802a940364b93fd6a43e4eab06d6382a9f7668bda0d880554dc5144c742d8e418d5ded1d7be65443ce106844779b2a50cfe90609d9b3c545c21a5ba783d58c1f61d1f941f694a732edae5fcdc2a85e0fea4c0427dd62a4f085b34adba97c1589728586f6bfc69070ef77dab26081d6f32d1b8c34b1d70ceb44537e84758047209978ddbc4f43e4f9ebe6a06f4aa9c94de2c59648be31677784013aa93486773914b26d80b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333237363032383233"_hex;
                s = "3c6ad9deb5c4058b563bad63dc1db5d1786d69e8d24bab33205b01d9001a0df47b409f21e55d4439da2b8513c1ec816d158d2f7e421053a0777862782e13e8afbebf41d5293459ba2e53427700d2a2a24eb0c768fa89e6fd7c4e4058d1d52a3ff2cf42d08e344adcc5ac39f7a6b9436b20bc88b2fe7aeb7b4aa0744162223621ebb3d5d9da7072e0e9ac2ff3c2ebd4c054f8b5604c34a9a276f6aae6600646594fcdb0ae4e4ee805773893fbcb2a46bf4147deb0154d52c7d849b87f0da2d99ebf1684c0496a97f4382f3bf2f927fa1e4f8fe78d1224032a51cee279934a996edef6f588cec4d6bb7649fc4306c8f8cadfdc2fff51b309a227662bb66d0f007862644059aa26478d981428f98d78f6d887709136ff0559799c4fe9bf618c0d135c2bd0037367cd5457c62fcbe5cb3139fb11508d4e60003e1c7922bb1e1c88de506db2050aa420330952d6ae6a4ee21709024187d78d50d286ceee096d792a6e6b78be37dbe98a981e3e4ccc05a027d2b72ba304e84ee253fd02f64edb13ebf2f028793b33dc35379911cf0d2b9e5bb621344ec0cf14a2819b4bdc2afc38532ac41739f805e9ef62793295ff5c47dc908f148ad5757aade2c53d3364f70ba5c676fa2033e6d94a88ea3dd399a5f0f25d5447b0301a26401ef9aeaf6149b83d9f05711d6d0dd1ccd007d7ff1a0a4b14f23c9458dcc6b9b1a08e38ea82412f904b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32393332303032353932"_hex;
                s = "a53d2ccec67f5f7d75ce8baf995ac69a2e8b5db28b203e2f1105c9fe30505a0b2acac239ed1f165d6a52f2b16e9a115ad4c4fd80d690326601b80750aa343beb30a4cc6e980378792a422357660e9fbac818104bd789824d68b6f0a4ad868f7dc96278c77d4e4dac84fc2f5c353e9e3dbe1032e9fcc79a94ab8960a1e415bdbb1cf8a2d52daaaf1e1fdd68e865ab5c99d9cd7e423521b4fe3dc1d754c50597aa7a2788310fe66a8d2b1c8db1e79680d818229512205bef6e81c7a6eae2adf130b1597d2a239b4729ddc83d00fb470afad06f48f1159844ca39888784d2cda896dc446e32bc6c548c478c605562293ef7005a6ef9ae0d74cce9a1c95c76eb2641cb7095d0676844db68019e941f7c47f7223dde266599c80b609906790f1d4c822bfca0765128b6dcb1e32d99f20448545b75c699d2c0c3101505c61373f56c7fb1dc5f3f2f73c35d95eb50abb4d7500de986bcb2ebf63c5860f3e283e693f024482f7c9106df9243b9a385c4cc7f81c5afff24932b9fe48ebd384b3390492d56d04a104009cb2245a2b1f30bf59ab2ba3b839947ebec8f506113a16e4a479fcda7dbdfb8cc111d7d4357b62fe3a40fbb07bd5c27f6d0864e03f1446e993f59baf9e3f16b00fedc62dc3bab3a39f1cd30305f642f292b9036f3e82ecd3ebfe389660ae6138f6ee6aaa52d31a5c5932e8f4aeecf699403b64cd6077f40efe56115"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36343039383737323834"_hex;
                s = "cfc6e41f6fc2dc3af8c53a9bd5ce30f6ff1ea853e220884beb120ff435d800e904c0f4dcb758b5913fab4597dcf0842e3e8d6aae6f9de2b875dce97d4f43980cb58c6b5c0b20ce03fd85c9dce129b70fce58ddf5d5d609cca4ffa44702975316e7672ac784adae4df81d2278d68777479e96d07e636b65612da543711ecb11633af25ea7e018018fa8c42e35df6a5c8d258684e166211e9c6da147e73c9a3b36da7c720784676ef3766bda116e937a31f2b56620d64eab0348fe0cf82851f3ae4d6dd2d26a1ea0c3d56dd2df8c86c0118b4a3772df5185788c63697aa0bb77b9826d27c56f37673915b822d44f550024e7910204ed434e4aacf2b5338e4fd4229f6710080b9ed11d899a88e0facc3bc1f7fca84d49679914365aceca22fcafa1335229d77290fe10be98fd5e48d7c949dd948a2e4aec5bf1d9453e7122b29334396b84258036bc9c2bcd81bc577d41f748955f5c8a8100fd44cb00560061033e2f2977c403e230e1ed8e5acba360103c95bd6d50f90c24f2850c82ed31e9199ca680db332cf96bf0ab722d5a9aeae351f04dd691de4dbf2329d1814a37baf96aba814ad08d766fc78d30aaf8aae0db189161b35a2d48ffa10ee8b98e5da87aeceac2b330e9afbbb33115b838085f4d87900c5be10cc9bc0fbeb98945c6faa4f32685760387f5d99ef8447687c3bd1787587f2d2e14fc9626abebaf61b3978b40"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36303735363930343132"_hex;
                s = "1d48c9999aa659bb7b8b341f6185ebaf61c34d03c95225a67ec759261a5a0ea426c8153cd0ec1e085acf2127998939bf5ffb8fc1dfb8e10e300a757eb8222dba32a9e9fef55d0f8794c00a1ef47a3925c63c1b9542603cbc6117f96ca363f7f396f4186f2c3ce079d9c17dcb625d117df0f598c63aae92f85a919b4783d13e12301458987add0187295d8cef940d98270cc9f8ba4900e30ec682c0448bb85df42524f29c9f61274836db63b492f64d9a6d6b745f9a4492eac780be4e111692e33997b143ba26b195338a1db8a4fe29e1161493af044dce4529eee053121e1d0c902655791ba78a5a4b8fe1a58b7b8368a990de8ceb7b5d5f6a2fda8fc37be250931e6c7cddb6928fd485fc820478bafb0ba480a94fde96ff9316460188e215cac7af0bbfed51a56f6869cdb0d1dd9b3ae9bbcdf6d8a7424c00ef6977319ad889fe31defd4006a3695ee74227a0595d1dcef5326219c9232319e53200353d41f9a4af5142f1cfc4e983b9604cf83e3408841dc9bb6c806f4d7db6db56da59254c213d2b1b75b71012f81c37fcaa27b6a5f64750e91a3cafb4ea2aac927fd36dd7ba9ef10027febf76489598a8f28534f3c7bd0bcb3b004399867fa10a6adfaebac90c8de9d709d5ca9241c7e87bef60da1447ad3e4dbea08c6fc8d7fe66bea55fec2278c736978a6aad81da4310e52481c30be424d85d209ef307d5fe36596b1f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32333231363233313335"_hex;
                s = "542208c04ce40c15b34f9685e1262bc2011dd8e6b1ecba5355d99b1638fe3020980b2af7d6944fef21f15ed66f8d4898db79ffeb1459a6d749f8eef2718a52318142d11acb43df7e01c90cb8a0eb742e91d232f123005ffff0b0fb5da8a02509c362a4baf189647428d420a8517da0ad67bba9b25d72a0fcc4b4fdf38e85012e7fb00b561f28f1c1f0343e45f001bc4dd9602b1cf2d84d8b5b8c5c9112e767aba2bd26fb5eabfcd49bd5e02edc735045cadfdadf382221a50205e759ce70311da7dd64a4822407cd8247849be570eb297ab1fdded021940324446c299557cf57dd40d09e2fb9288140bfd070cf179676753d8f4b6d59eade47427d9bfb1682ea9be406dc2582ee96f69db22ea13de03d46cc21a2bf290cf6f117463d2f0856c4b8a2ba8416a5bf1fc4ec84a87131b9cc13df2a0e02871b56cedd8e6f436e6943f10e2e4df3a357800d63b2ea70e8c43a17c1da96a9950309e8ffb11c37086e3aeadd4aaec07218249d90a29b74e08ca76c0f88a392b72e47658d47980ecd66b6743566b95ebb956d011b8af7914a94fb556b3036f166f18bea9d93f5fc89e90aa0a9f8155f391f3127afdd835babc266f4e679e9fa9490593e17ecf40f5b2f704df2b66f20fc65b8afb23f8a59d158d1ce3afd8b466ef3f64d6e10e6460c10e3fc9ad33ac9416c4f19e8fc884e84646c409e3a37afe25b6c2fcc9fa0bb348a54"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "36343130313532313731"_hex;
                s = "73121fe281ed3ee34c1102a3cc275590abc911a42498a2dc9d27541140e218bfa22abc817669c058c0585403db4147ec117cc5fcf3d56f33a9d4f9f4cdeada5019194453e0129d83c2e8a09509645352f431957a3dba091277f40c4eed53d65b6f5942644a366660f37f67c33d29c49aa8877a83c634469fb024165a9172bfd08264779aab67d8752dab2bc7ee4a0463a7462a421328a3de09bbe82ebb9f9d2216e177e13905847f658ede370990f7bb72373dcf9df4075d8eabb93019419fdceb17ea487f099f01fc5f59563dbc5c17d0348a56d6a1678a63d7ee6d5d4273dfde0d9bb46f68b24e38961cda241ed6c8a083b5752cea13be2fb8388e3f32f40fedc008261fe85d4fda3d8c0ffeb4f4be3b7cf46c22be9c0ee0db37ad3f20e447ee99c63175fc8b13d57aafc9258fd4322e9d616309bf99fa6e79706d7e6b6eaff1961ce75908b9a6f7567e163b62b87bc2eb73207bb7a9e43287a581f297658aa1fc27b4ebb2007a3631892be1f439a2727e5fd8394c69e2d845f8fe9650be63b81b6a9183dd8a6871f1105f37f7e28e751835f7177b32701f52c41c8a7eac8de5466a6837e78070436d0fedb879261a08bdbed9f104a47c469f2e5eab610db6c4c06301e0048b932a10be817f6c66b1d87a2f72fa37b75fcc6098211998d3193581ac25affa6b6930b5307d983070e9f3028dd0a67d2bb56c85caaaa42eabd0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "383337323835373438"_hex;
                s = "52d0cb00922d4772cbf774751b7117b41130a3e7303a6728ceef03ee8dae6c4c1dd20af7cb75a4b7db4a31fd7b0de0fc1faa7d938641b4d3e027a36c328776b7eeb53e997bd55a64a300861ae2dba431414178efa6844fc5378e1daafd98ce3a71c3717ab6543220ec1f6e18ed7f31af5b9644edecb300db6416ab85f082e49c58254d9f9f761c0a565194cc2f86383a7063dfdd9e76dfbb05c7f3ca6078cfd027fc9e270a013da99a9c29d25df117403cd58b85cdf3f13027ce7c3d1467391b3abb7b5abad0d01868f9cb41c36dae28bb5ef9aa537214432ca83d8747eadf3bc66e45dae5d43b1399873ab4e192b227aaa7cf3b080976fa6dc0be60870bf2aa49f8a7cdad74a70cf34f31e9b4343f8e47add3ffec7346785f55614723c3e1000af6954816d5bf07d993c8dc46074ff5c3d9ceca88e1d53fce377d7cfadb6fe3078b2fdbb60ed5b0b40c375c058e73e93c62a06d47092659633339482ae6e42c99908e48e279d78ba9c1182922fe011308ffe1e4c9191286c5c9000bbfa653c6eb3acb5d865ca5d27de7a8706beff424a94bff5e898640f4803396f18b3d23989393cbc8f1fbe81f7961716bc777e76534b2f5ddf6a270d29101fcddaa656bc87127533f6de8537e2158f5ba2c5a83e5d29c96aaabbd07c03096b987d5ef095edfddfc1b94efc998dfe51079b262977a0ade072e50f353144423845e2e8dc0eb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "33333234373034353235"_hex;
                s = "92d2fd3c04f798df721a8266cf6f38a256cfce348183d09b0650e607d07dcf8f1454674b3ab96688d246f6a3a50efb632a2d69a5aee0e0fc581213f4124a6fc9d5f8061799bb5c6c68127e9e18c08a44be1d15e85de32b762bd63a5ab7f934a0504855d188dfbf73d532922f899e715f7f4009b43aece6469602085f4d141f317cb5fd38e7e49cdca4a019aeeddaeaccb02e14ac6bd2466a813e4198d02192c347d8360d9d17b20b17a7e5c5506bec7c5d0b0fe14bad5954ce05bb34db364df51c7783d463b85150425f8529bcd812d5d0aae35dbe2ec875d65d96d9674bbc70bddf8e7ce10623cca9e45ba49cccf9aa643c1de53bb058d587627260218253cf4ca70ba42d41bdcfccdb9569f7f9b02eec96221d0eb7e8d7de6d18758c36ecce1fe9b292e183242c86a581c37ecc82916916b723106666aa72c8ef3b7981b618761181022782819b9c6b9126104f5cec3e45f16f6de69255ab71d2c71f20e09c185bba0eb3cf646167f76597a51c7bd6522f8bf8bfcb69a7d10edca550155b0d992bf91f8bedb157c123869df0dd685b2b496c45cf47ba25b2b2f873e52365c33eac33458b313fff127f08204f9ab12af7f6a6ebb130f0e88a0cd5a81dc14d60e359cb70f839854b7754ea463c00496917229a4cd8945cf708882622cee496334d6d03fd3c430c8caae1b6455cb87ae5e40567edd6c281217801475fc3dc46a6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31343033393636383732"_hex;
                s = "746b9d93e1070a38528d1a51afb942ac3bf850a07314cdd9a72909bc4dc3a4e47dcf5a0b5cf46a34de1df3c995d7caf90383edbd559f5ea15c9ef119b889df1c6eef3ff2994cf3b23d9dc06677727f3530dd63784da22aead6877401657e5b16f9e3dd900b9fe432a2a6e477fc917b436aac059d3b90ad5186badaa98c0bc2f1b277fcb60d1ddc9353b8c72801083b7819cbaf4091028d4837a7d006665f26490b56ee82e15c575264db71527222f66517b74deb30cbba938d59dbcb16ad31b0e94414896d81b02b86ebbf9f9147bac4eaa8c1aa120b208bbe2ecb43522508755883108698dee8a20ffe919034365674925a97fc61b210fe034d08d07af80c0dcd9ca08fd3a49b85a2c43d4ad2ea7f9cb5d0d1e8c25e63fbc5e937ddd9d08cac39e11250a68ac416a9905c6aadf4ad521d58af9d9787bafa5b19a14761be89e0d757c94cadb3dff5f6531fe7b46a9473c4bbc440546717f85910bcebc91f283490c149a014a34f3f594a152c2ddf43cfabe9bc2c824edf0c1ba6d349785f6bf709058d54742c2fbe9698b444b8862b0ecee72ccfea20f2a2f69a5535e34675e9361b57952d5a5dc39b200c7137f7d8a83297235ba1fd7b6080c0e44c5c763f8ab2f765f8b19374ba40bfc67b29852ccba64c09b5e104ee6e676ecd97d4103bea960b9cadf9d741e00c3e230b38596c4d70ab362e9f475ff2ebb3b6bab14beee4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31323237363035313238"_hex;
                s = "a46af5f84f5ca387be7f6b218d20b83e495acb094c12eacbacf837af068414be80a5c1240d292d102b4243e853059c01ebcc8e5b1795fc11db1828ec9ede6986566faf55d1468e6ce2badba310f3f87b493ce6e9c95a378fe3901d726517cb1145b09f78c7a3d9ccf6f55a9f354091b0bd8ee102adbf577eccd63cc7a08e1aad1b49bcd624252d2ed5165834aa6091ab8ee3649bafa36b5948e77955d6d37645675423dbaf056effec2ee9a8064fb1efd21b2db6cf8a98c5bfc9ecd8498e2c22db3e49f7ab11836d35ffdee0fb2b6f34cb1eeb0412bc61de081ffcdc597493a94b0461c26dd261561ddb581e6e4f22f40835c13317d44ecccf88b8cf4c09ed9e81ca31631f63a8e60bb7c09d1e28afa05ec359229f0d8d8e5f3b85ce342667fdd7b80c3056bca001b6a910a04f1a6411133f9496a522342e124c07f3ad4e046d8d82bb35aecf04b7e44b33d7b13ea7caeae67c32dc54f4dcb1dcaf27cfe579d8ee597332068d1ca8b11ccf67178103267619a3a4cf6fb5c0a02aa399f4940d7ca73b8c2ffb51e6f2c57cf3515c0c747b11cc15069e8ddc93f7138fcae3ea5c6c9ec9d0b313e5b4aa4071b4ae30f1de174ef8a8a3990d545f2d6e779beee73e3c85a92d8b31233fb563b380a4b830efb6dd92ae1bb81d6c951a0c751220666c0486648eae0fdbc226fb3f8d72e28743c6cf288c789a588d974e17f9422a387d1c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34393531343838333632"_hex;
                s = "1181020c0e476a74e9cd6b5e6a3379dd017873add015a616ea2f95006cd16fdae886a2630f11e90791cca7f4713b158dba913a05ee77db4ebff39a045f75002dd03784788cb8953c291d6bf58bfd9f93d2e356b3f3b1a6d6d7d56e1116e76197450edab776081232b11929940bcff9f037d9e62a1bbaf96f8086468d395aaaa69081704d90510858ced3ff2d69e9e388c9d05c3d4c903a172b25a198a9d3623e436275438314927a2d448a5c704b457f95097bd30c0394666dba599aebdbd9ec7c9713fe0a977ccbd16169bbdf92a14723e4459a88949becf445204516e51b0940e4be902adedadbd1bf20f4cf616378b2bbc8ffcc6bf237412d4fc11457bb591df98b521c748ac5dbd994fec8d7b6de0c7f25b246b6c13d91a3e75c64e0693c308bf8f03ab7146792e65fdd73fa4f862af982d851bcbadb9ab16180f87cb59e580779344de718579cf4c4b907c53db87c5c3efa03bbb9ca0fe2d216bdddf57e7702f9480f87de225d91865c980463bb7829fcd885124d7d054cb93c61319e1a7af11be0b094f7f7616aa1e7bc498f252364444935ae378a8d7608a4a3b2cf02f1eb9a4ab9bef3ff00d4d67fd3c3776885eb5f731cb99309e8ad58de7d6a26db9baee64189e32ed726b0e4885391f121ba94f8e7a64da80e8859d43b9c30db1c5b2bce85c9eaddad71cef51082fe42b5f25ea82056de5e7705c6d48edeb764f6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32343532313237303139"_hex;
                s = "0fadb5d7fede14b3548384cbfa21c204a8aa56146e31ec219eb7fb5ff32f4ed1f16abd00231886878d593a52a164546a18a1f5ffe98584790329dcd04a4debe33f702f896df36ec0c5ad9a487f5e91358b154c456c24b077bd115f92d904a26b4fcade6da45fd41c0f9f38779608367e163f13edd0086cdf31ed0073fdea282193851294bb8786de534c118ab00dbfd1882d3e21cc719ce3cecb4026f41cfad0054d1e10ebb24885c2874b8ff5f0921403596df19501aa98705c8f60586999795ce7434f10b62dd3d7f858f0d77d05b06f9cb359cd1ca8c953cbb3f17118f872d761fda660cf46ec02c2ee671904644a9339ee0ffd6cdc7b9ffae27cece3663b4edafd06e11fd43cc5d5e8ffb78bd55cb508665e9a447a1cae117e55ec57e775989851086de14c324a4fb933cbd0e191acea80c826cda2264f9eea60be2c2ef348a67ffd51f4839d9511fbc4cf78c28f13fdc0ffbb5e4c9dafb1ff36536f8500d31861671f56ca150ddf01af9e1724241d4c11e243a604cd87b951e439a0f9baaad60b28927dd98af1350700fea7bd5d1d3632caa4d8adbac33e0a913940394d423dbe01dcf6418aeea63d8c1d21cc1741d5d9181c7b0a8f9f67c3ad3368ebcc4da77d69138ebc4ae26f9e8a3315093188103cd566139ae8ea1ed17500415425812cf7878479eaf75388498f2fc224978486f378d830d8a912d59963175dcaee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31373331353530373036"_hex;
                s = "5aa1434c5ea2563a1c7efcbf1064278df4dbc4ca1699447c4d5339853feaa8195eb17707730ac5fde126b3f1ca4c2e12af01c9d4d4549f67f50c9d15e6a6e19d204fe40962916393ef2eaefc0fc7e7c39655a9f67990fea059b31d6d201d1b71043154bba9d2e362abdb08924b4684b82f2ec10c5a4b44906d3cef3e7865e7d7d91f4d84b9fd5fef841ad89a4dbb7e387a02e25ec863fef9a004a7250d4a5bb59d9be5af5eaf919e889538302ea446e5c58ae5814f8c10050f4991aa912448fe33f56030e08048b8b45a6271f2b2710c7a683e9eabbdcf6a787a5e0bca4d3a6cadd997fcd5a5996b76c345f4dda86892f316f44ab2bd6358e7d10ba900cf83e520d30deed269a0b438e7e42674a2dd53ad18cdc51de2bb28723d0e1ca2033ff18f28789ab87f15c9a50b2df7eab94a1d43c10ae9505941bd8c5e153287071d47d8e1c912d6783df190ac0d87db086f7b43b29755283f9b89d6195a0cadbc3703b5f3fef24be14f2782f8ca7b7bf0a62a6a1274637d08670de51137bd33cf1e1b3178fd2aba6cd42ca087dd3cbcacbbf50a2f1eb843df348ffcad248e9e528fa072a313a9e2360ee2f76476cd9f158df372efe2ffe37af9961b38c0336868c00a9fff7b3f81cd350c71e38d44a313c8b21ac96be15668cf376d9ac9485dda53ee0bc417e289fcc4c82fddb306b282fd79ee5eaacb8cdf56c8d4b65645673bd224"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31363637303639383738"_hex;
                s = "dd9585cf0195ed3fb193fc1ef99e2da9d7f3f67c229a6c14fd7ef2bb76b7c606179e50a7f7fce5bc54ad06e1554025ce3924700888700216c13a8ab78dd30212ea309107f8a4675ac9c8d5611a673c25d17d9449ebc9363ce9c838c901120287a7d4f5f59136054db406fcb0e83eaeb9c305b884e5e0e1f89e5028b9d5ca7f2cbb30ea1c08dbb8b8526cd82031f2d59328328a0d0064a88d3a2699af2f6c91ea813db5c84cbd4d32a6048de069b4ec96f12260930fff33927461a26ad353248e0c2e4840d1f390a9df19db26ce44165cdd19f0642d9adc7f4545d72a069b922f1ac8dc423443cd064e2207037361569f3d767556fe4514cc7ae5efd433d2ed980045e7572bc368ae888e5c023642cedfd03ec76d9b1b756423fad8fc16707ed9459807743350bb5257cd1c77e6d681d1388d7f3d2483e658dec98bc36838ecf96a67c2281adfcad92b2009c615fbd1320360fb40840b000ada4cde4020f2ebfe28348a4b6327f9f3712c9dfafd2708fc751547d8673a85b6c0d71ed288ec41f9bff338b75660f437c12b854758a388a8f7b7c83b87d2960e4cf5cb374950920615a8011dd03491133d55861287ab82283ecbb47f585a3cdad2bd86a1e63f4f6289914ce3f50c3daad7059e8acf31b8438d7e24b00612c3bc3f5763e7739f38974c0910258ad72e01c7d543eb5b8eb6e7d0059c8ccbbb2dae98eeb137606e5321"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343431353437363137"_hex;
                s = "8b38d030af1759fc62ebcc2b73708fa3558ef538496ab2e80e3b771540b3cf3a8de96bb39b9b354be6a7d8d58a577eecbf4941c0e3c98905ea92b8f31528bee2adcce833d46e80017e4f7e23afaf916dbbc5e91049c3a62f51d850e74658080f944a4e6bbf8bf7f4d5cfa3972dfef1e942027a143deb585df09b23603d9187d17481a608f014ee94a21b6fada1ba02839e824dcd2464132294722dac143de14b50019b748bd3d1c6bc4f87ec9767dd8b592d66624c3cb3c2c9e57d9b4aafcad15366b0870a67007d63f9a07a207d2a6d9e318886a93c932ed39608ebd17f7e2f2154a6fd150f480cc572b740d7771073de40c4e8a0edc460ef330e71c0eb9d0128ac078b23271cb3e0aa6e4b6ce1a8f19ec6a3a7023e2d991c5186123fdb309d58697c7beaa9ac6dd6dfcd553c5545622ca6595e3358ddac5059c437265886b78a5a4c67ee5cbb7b2aeefb1363397aed6e918f8c6d0e35391c591ed573cfbfd28e75c784f06434ec6555009596ea60aa34ce2e3d0cb723632a67a58132c63f6158a954387e7141b4780bb819546912fd5a4e04d717097cf55c6eb1077503817632746e61fd229eeab060cabc2f6f892cd401a3ffe9a3afb304f9ad820418c4ebfc1ea89eebfae067175a5d16a29d7d41af0a1d5b04f0f6edd17d86d307ee78b33b379605aeedb2657bd26c59ebf7ce0dffb22927a9144f797bf58515a97600cc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "343233393434393938"_hex;
                s = "20c164536e4bff5eef355f10bc4f9ce6f8306adb07e98268a9325000a36ed123fdb640228fb28fcbecc6620ff9d8d9d1a88776a9ab67eb576f812a250b1ea09469eb6ad158490c8a964a632248529a56d5dce0e7d15c42caddd0860b77944d445b28fdd572a323f2ea36e4ecacfac57d9f3378ad1c7538fa50dacfe5578b2f8eba27fa57f9f47e767de3b95ae9c609f3002661ac318ba821e41519630735bcc937b56798122ecc79c6abc3d0d62fc502bb06685e0651b636a3a89538a9db643085993b9785bd8f86bab5b98f3efea02065fb330453a06299c557e8da0b59b1f1e081b20878b23684d038d2bd59c93d556d67b384f3049a790483f29d668516896873b76fcc678651009a77cf2423a566c3360d305438c1d236826a20dc62c869c7407a6b6d89bd9acb7243636764087e4ab45ccaeb781356b6a98d782f7126a9f6d7bb8a7ecfb6e3918fa92f01b81ce1da90cd7cfb5a067d42bfb40cd002f93203bdb4e29b2627bfd4feda34e5977fff2b6fee3b2d5278e8fd3eb63b088d617bb87ac9b96ff0126e67f1a5812e8fffcfb9d5218aeb411c78edc8ca6d20ded383faefd635b068fc99b52a1c5002615059e80d9afa74ff4e7b01a5abac6fff6636170e3493e4a36f3bc94a86804d4c9ea87e87178317a9ff6b6716db48e00e56ed7a08de4a1a6d08411a4b5373f50d7d302cc8696b6c3a77de52428e266c68a40c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34383037363230373132"_hex;
                s = "4633d331ea24acd9343b7a2a12f5f757b7f35046c325adec6efba7df65769a04675c8fe19b6f694593b8bcd4c13e4d3830ca0fa08ca9d8142684972eacc8f28f2dc2ab1c6f2dbe547284fdd887f8f95967f4c8c84f11a755ef4c38259e6c9dc3749d47725aa93d49ed3277b09e3a77c84cd099de5e345b1e8d27a21d5994fd19df67004d8bffb5e78e31dac7957fca7f55490b654e03fb0e8c8c1d67bd43fe76d9f02dc672f26649ebc967e3b963ad8ea19c454764e07e522dabfd610a5a3450e5b50ebad7d12fa3c9d8f6e4860f783f37be43481d82f01d2c7f56adcf10b8886fbf8d3e5241192798e17363276ec254486bde64a9e3da64aa8595d4220a6cacfa9d4cee24f3a920f680c46d8da48b18e6045bdd7393b6b18eb91c0332b87e848a280887db3666245b3d3cb6ac141b5d7bf986c2808298f36d58fcd575aab34b00ddd142506d81d4db8cd10b5d56949bf9fa120d129a4953873bc01d9b8bc27e418547715da0501096512afa3596181a04dc3e7911011bc7a352bd9fe875bd490994d0dc78186bc10cd4178d369e0c9514e7d292d7bdb4d52c06b8379a29fbd7dbce0996cd987db8cd2cd9a5557b05f73fdd763dab058d0bd87a20a8b66873b5772349ace04367fd928a28cf80298b846347ca3557dae003585de8082dd3a1bbde276831d5a9535d6dfefdc224ca1e2d3f172ae61c82ba2cf88331519e7aea15"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32313634363636323839"_hex;
                s = "bcf29747c0364c18953c4412e704ccf520d374bc694507f6a1e4a6f4c7ac5197fe4074d65ea2c7192bd710ab7aefb9b9c8457c1ea58cf340f5d76ecebda2d33487b13f21141dbac3d7f1dc553f80c3ce42cdc6ee7461e94064a81b97a8b694b32140541441d5f3d5badf9b60e077d16fd6370a4a044d09c35d86836b9fa87378273236bcadc8df2cce474d60ef460bc2dbfe790f1bb7f96b03964fead65675308d2562cac00cf88d08d0a47ebe019a395f58b19a6fb9751a29f17e7206fcc550f93b97b8f541a6919f88d0d18f532b3aa46797514bfdeca95d3e5c24c5167038d8338642d16081e62f1aa56523ed4ae0f5a46193a60be2460331c6d3444c65a1d8aecc6fd49850a4d4cfe60f7cc307b306985049636a14adcfc2ed790700b36594d8e9de3c3ab83d7fe5b6ef124c96a2521b79ec6fa3a935b8e88cf3b0199e90bfbf078d27827a79fdbda096de6ecd6918403d7a868fee28aa1ad85fe71337a0f35e66690893d92752f1f56ade757bb9d75eef9133a9eb52da1480603de81e51f1d6694cb4c6587f5a503fd2f332001becdc905e13f251b948976b1295cdccf708af204139d0cfbfd9a688498c9dc61a2a13defb6215072ad375763d3c7d9d4513fa6f3dc3651817612f411efdd6715d5d6eb104d3eaaa5c738e4c2f834b506358c59759326f36a1b646adf58b24f2560c80fcd3c1fba4a0cd08a54776a816f2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "31393432383533383635"_hex;
                s = "29e1e123399abb8de6e197289a80758951352725e36bf5d2ee6b2a683415b6dbe1b99fde3f9c4f0f68ff4f7274f16c3f6d8e08b60bff4b384183ea99e5740d9675dce44d5ee689d22742851e1c3d6cb17e11b103e37b073cc5422291fad8480dbe9f14c437ea7836ba967e961e7b6ecd50e855f4de1f0d52ac63b36d18cc220a28cc48a5482e82e2467433cd416f0c0b5b9bca80024ea7e7bb2b822d873a145b34a039725d1179ce87bd2446898af8ca4bf6dbaffc3742c580ff6e4b649ed56a2a81c9cc7e57d0a8cfdeac526308702efebdaf849cba6bee660a38026c1f68c1277e688909bd8a8ba9f04aa7a539db570b8fb8672c6521cd5be7dc67bf041842ca68b013fe79e42be6e5bec8e3e47e9f4d6c2030cb2f1d10863d2ed705f1f45a7b61ab708416ac99ae8b275cb7a194c160f414dbc746b8cdd9f3071eec9a3ecc3ec105ef0788123ad61f6e92d517105e4e835e9dc135c81bbf7179bb7129014953f227285de3d3ffc13d14d1e163ee5472212648fac90f329fe65ebfc440b7749d4ff511d8f521f0ca4c0b63962a87f883c0aebbbae2629f49b095729b0ae34f78952eaae49181a496e9a130f1d3156d96b319f832e145c3d255d1e1c357d4e20353039baa411da47f11bc69ef76a9f7aeb56e9d1486f529ba66c4afd6160617afb9bbf89f8fbcb20ae881f776b79535d19c3b7d42c96901c687f3f5327c89a1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32323139333833353231"_hex;
                s = "3e0dd2ac3bd21c3a2a936915f4d302ec442a7cffa7744fe13967effa7000cf2a1f75788c2a1c96f9163e29fe650d83ee43f58e76cb064a34f03dc7e72c89a31d39b78852fd1361100257b4e49f1b068c1cffdc611d17eef27e395399632546ff9f774fde60fed6c21288af84fc54b5f4f09262f4376553e870aa1c31a7e7ed3437cbbb2e38815ef98237a5d0633bfcf35b830061bf1bd7fda92d7357049d4112fd684a4579f113c06a363ef691ed91cbd2fd77d4d0e563bb38bdc2a11a5ded18f94b09a812fdc71be2e68e281a3da17ec045a3a4091b9744385f4217d46d2e19c4460d6077ac7e46de347f49956ce7c26fda8b4cc7d77cee35e2209736214c8bffc723748198f5fc5326751e5b631dc27c51ede80cebb548e6d04f8a693969ff2130f27178df7801b92d6157dbdd3835a4a827ed5fb6c9f6d3f691638b692ba21c60c358896f54ae8d14f3bfdbaaa78650c3ced04cbcb5e8c49cdb67030af298d6f0244d75d7d9264b623388bdda5efa9bd35b324f1f0d15c8ba3008702de251b63a2f0ba2f6cc96c1575950602ecece5f61c444e7b60b4bc9523562239b2e5f4d9fb3785c26e2c5f5ca9d143b2ed598c011f01c8649761af6a529a03a794ee0449eba2e5003358450694bd1110b3a3ed5c2d5bd904c507bb83ac5d2f4d6f4820dd7fad9076c7b4a80e16a3dd053bf14186022e9c40cb766c00f86a2f5e2ca74"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "393236393333343139"_hex;
                s = "3d39ebc34a41a8f34a159af895e9e7db4c9129bff2920124f3eb5bb15972efa74d2e45ae81aa43ceb3ab112bcb4708a412c0c76f6a46acc091314f0fb6576a02c817a08072139b7480f5accb17da02a34866dcdc1880b262394db7b1bb407d62877ac028d58d70aaa16f920f1eeaf0f915d8e0bc578fa6e125f682c56115a5b16de62414f30f081672f0a594f7ca3343a582883d56fd845c6e55aa31c6b0acc1719130ec70fcd9a525ed0cb58439f8692e0ce9b65c61b0b6a964941e2015bf46d558d758486d12d8bf0355159e2710940be65dc8f416393709c9bc2c91bcf4002565845028bc260e67fa661a56d228caf36271af4ed82932e87aa33e348a36fe432b12377382b849b72daee4aa69593dae74f77da426d976f2d013e84aaade8a62a099291d37f6bf5fdcd7deb4185a1cf32a26c06c5f6dad11786f058de372c9c9c28e6f9bc974345e68e1de267fbc704981fefa4b27d7730362bf53acb2d078338978d96ee16557d63fe5e5d7b963efdbb1e79ac2b853d6f40d455aacda3f98b000cd459254d3994b8bc7bf4215a992a10da401635cb69e355b275c0c69bbfa092f823b9ad1a7f4099b5027750a373b67b88147401ba5829f83bced81240a0f8b135b45feb2862e3a0cc6aa264734c11ddc1bb9a9d8d5208e1d6bed76892fe03bd9f84a9dafe7eb22cb6d1fb58169b656f988f2b7b92747f351fe0ab37a0643"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "373639333836333634"_hex;
                s = "206711e4ba5abda267855d10067ef987f0686225ced037769b55e5c79f8cf1b6e4d3f775956994d2743c1a34292a038f2dc53bade5f492e7ec3632227b17717ea836cb0edc3845ed313bfb4adf193943c2b36dc481822db08013a10d3054b8b946dc49821741e132737e280b8516f7e74747f4a78f4dfa67baf285923a5936f5f995894a961bb707e55b9490c45ce8763a324202671cf12c76f314dc286fa8b9fdfb1ccc4333e98c7064eb170c8d4c249f5eee51d9af00603d8829c230e143b7c429a0cc2a70b0cac5310ddfaa6cbdc80df6048049fcea69db8cb42032066d572cc047ef881fa8043ae5a9ad798193c7af0823e086ddf59d96181cfab56df8e887254852759f9009b20e8b1fe47b72981f7569a0317ebeed80c75be9b1d3960d67577bf8bc836fd6c1a7011cb2184ebd1ff283e073dff85c4a1bbdf987bdd4c016f9fd338265be7fcbce026303e73cf00c11c3466719810f76318c8a5cc0fb51042e9e570d733882295e42ca315752280a62d3d3a488d97de35088df0942848cc23861b336ad9996f90993c8fe6a14a604788f88eff237e38b7cb011f293b11c8ec0bb1253d970fbaecfeae6594435850d17e252dd3c3cc0fee504666f198e9c2c6ab4628a707a83a8dc4d683324c376404ffe569d311a65fee07107d6fb52d654bbb9e61bfa99f6f6013325ed4bc1a372735aa34411a6406f847c9336d216d3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "32373335393330353733"_hex;
                s = "32698fb919231e785174c14b41664dfb4901ad6e30775d216870d5bfa34d7b535dcdcad476895e2e37d2887257476bf447027ac424e65f2c2be3342ae7374f2d05f5bf45120a69c993de2bdad226e4c7ab8175e3762334fa7497adeafbfa1715db6150ca1db2bd27634321e2b59b903089a89607d3655aebf19e6d09b2d3882b195527e8c221b4b162e7e821f6abb9947d285a4af8f535c133469676f158c5420c80ed99f767be15252446b580c2774cc0ba5288ea8d6a40f204cb79824fbe025d77733c825d378cb2613976fd3af85bd6707e717be38f5643949f1d83e62785fad59e96b3e9e343e678aa0305764f5bb76b9233dbb484c1d35cbbe5fda80000dc4c591c685e651ee279b94f59843c7f7ce611bb41882c1a29b61c425c1c8e55fbee05028c94ce0d0edcdeb99c0aec72d59e3afab654c86576b128606f9b0ddb0ff880722b76e8e1aabb82015a80c3a4da3db85ac75fbe84e72a5b5e6b782499edd2cf4bf7e1e5f127f163aaca6f9a88434aef0e268e5a85325273c84ff19ac0a92784135b18e92d8ad0c5b95e8aece56ee70189e2dc48fddaf64d98d4151fee71b141a5e80ef5fd8eb56ae7a19eaf80bcbc5f20e823d95a5a1597fa9d53e448f575d88f202e7f7889f8e6c81425466bfd52c2e423da6ff2acc47a75950009ec5418d4b9a78159c38885bf5954b6be259dae9a6842ada4137565808d8d04d603"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "38333030353634303635"_hex;
                s = "8d6bf210eff5de1ca4020212e529556fac51aedeeccac425c9387e07910fd9b4e4ccc13122b334911aff787f79f7c0be02c00262611d615b035042f59dfa28d4097f8f6d0e4fac65fd0feb70ffc7bb737937bf7daf1fc054c245cd25eb703871ea707e8677e1be279d041e6e2d1fa73fe9e65562cf55d2325ca444a9f7d3c4dee0ffe6037603273d67f2d2fdad0aa3641972eb45c124fe247cd013b9beeced8a1460118b1729da6b9b4260c581cde401ca5cada77eff4bdb6fe152c7ab51d7773f9069aa7c7c171b084a04d964d478d99a78a878fceb63a6106b867c4e62f8692cacc5ad5466f1b2195507cbde01651c74c40b20686319a260cd83f9283e8ab335fe3fba2c8d3e415053bed9f55c6f4d20bba443a3a5fa4ed34429e26ca70392f87a4d0b77f26413073d822ad55a758f85d9e65650b8f3c1e7ea9e42ef243974e347829cf83d53adf91781c7ad66194a4461a081b0b0fd31a8762e9734c7686ea7ba9c666a1da461fade5a59bc6debdc9cfa50eb58b40b8358530b42531acf21b967079ebfdef43058b32d79ed21184857ddfe31eab78ece708e0a045ced8cce5baa8a6261f05e29001aa064d9c8f1bab7d7da4cb80520e9853bf81fa105d65afdf7694d5c4227ea7d4a69079cd5cdaa95ac47b686a90fadc6ed69006babb97ad70eb1a82574791b37899042c44ea077a8496b92280678188f03a71b1660343d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "34333037363535373338"_hex;
                s = "de3df1500c3b737476d723aa29d6d3736c075833d806060947f36ee9d4ad1ddc81eb8d4133ccc94fb1d8ae9d2fddb8d41fe11f6438dae2f4ebc62704bb0ba67cfd53da5e988329a98faf0b5f94788687ba8f62d939b79bae29dedead6585dcd415ef84032f963ab75f3d3cb17d6a5ce4e8ad2637db624a078f5eb23e3708a3a7d1915d68501d8f0af37332e996f022eae24d2cc842e84a4b77948b138e6d0cfb6023d1989d17496eeac767fd577062b1843e3c0962c552834695cab02e9d6ef23c768edc5b53ca5bcadc913b7292d5150e815d01b5b94f101857bb6938121281edf4e254fdf3f4b8c19447e9d4d0d87f30ab6b256d7741590743a0e43023fe436db40667bafe9c463b5c3071ffbe0b9ce8811d0a2852defe52517c3a5dfa111d3cc5a5e7572431ac881da29a9bccad86d85aa62c0a466b86fba4ec4d7536ad695c0a2ca9ac206c4d33bf4b45fe4bf9e01cf5e7e13c1b01682a23bb06da2991a7738d48818a792a42a257c3ffc73907b326565d58a1eb0b18cfc588c546ff023351dcd0f1bc8ae484731a1baf2d455aca6b86ee380533394840b786d9aa086469ab49501210797b2811bc34ba2d675397da21e39e2bfb52b841555e5a16910cb77ac8d0944808fd34ae6a6ac5cd2e3626a238fbef284c8d607e47e71115e2b8866f39ca59520da156f4cd28aff2a457845d3652033a9509b79b2e24fc6a3b5202"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "39363537303138313735"_hex;
                s = "cc294dd105462fc89182e94e8535e510964e36bcea83ddaf8db4c7eedb5b357d3013ef3ea0e8c83942c43b14d9e525171ff6ef894bbed0233ebc03b87bd7a2a637e8a2d26937c8b7a8645e9d8673ccb9e7ea3f92bcc67fb2def295c33b807aa0d69f259c0763fa69876fa6d9beb0655c041b51c9696b003366bf8f0e009a87a526a8d8c9763f04f0d32cefe99207927faa84f57d6b64e6303351cef0418f53dd434dee8c3743470a7e8754f8b534fba2b491847de4265d092fba0e801b0454269197c9d6b9b0ac2772b586d4d4bec14abdc51a410caac04daaed54cee30a95eef38f671a538f5d6749710a6db5b75bbda6fef2c7e0610191026113a05cc3630c6c12457befb5fd196be7521ce4a516ef1876b9fb98aa6e0f4345893f558f9c93ebba933bbbe186bc84f4cd98e087e35628940223b9b245fe3adfbc00892f58fa087af0f3ca1600053237a8259d10c02a3cfc0623c0a5f952c57a6cdea73122d847399160812bbe31c88621dccc9e07ebca03724cb13cc50b882c4f00b94ec7b673f1f4ec09642b25eb0932a4a264e7fa6a47bf66600bbfda32f66579ed89b866aca3337f06e71f1cdd05ae1bea67b71e83df9a0063aebbfb21754ac806dca1982dcfaa58010babbcdfa562c5524eb111f49e7f27ab4cc3055d045709ce11eecea5b8f91d7f67ef4f837e59c2ee73cae2d8878183f6ab3b2c3b61e126d5f79e92"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "5ea794ea02586fa47c71f10a734d4e3add34f43f60d415a4c3a3e4b67cda91cb47c90bcd0fb3decf384274507447a050cbf3cbc4dec88b2e0c906904c8d4214553e713ed0742d8b1081919190e5e6cb60812c23c023236098ac8b5fe57079ee21d8d29426e4c8e531685d4c8058c94ff5d17b9e45ee9954a380fd88cc94ab5d6e9ec3f28dc6d4460a3f10fcf5542f81307bfce4dd4c83e533f9aa442d98251e6b4e1bbce1bf6e9d923c4e579eff13d0b09ecc73095c83c704b9a4a4511af5386e691c083e70a0811a92e8166a5958f9c95e9afd30b0cadc7d8007daadac301039cafa167657cd07bcaf423c9cd0b0bed912fb1156904f49878b30ae452ff1de0e1a6449a827f7591c2a43567272bb88bc9c20d9330c08692da27613d55c9dcdf41826cba28004982a43b42e1cf3b1335782ecb81ddcf52ab4e02d7a09cfb88ee942de33a993020d6bba8a91d6aa39abc1ca4cee4bbe33ce0db472e854a332edb4ed51974f331fa4cb5a8f427f6a3354a2c0292bf6eb5c2d2c82146d4ed51558b177a683c21589bdb1395a39d246f99bfffc833b71090e5b6ad83f1e1ff66388f979d69a1256dd7a065dde632daa16d4416705467548c7b073f523de13a757b7551c1aa09a5f6d277c6336eedc78094fdfb32cb774e5063b35d0290627a443586a52e93048d86c54a885fcbde3b74f7eef30029a85876376bd75d3db5c5de0b68"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8aa7f2429b187568bd03a2a371332ee795b5adbfd9a84fb7e895d70ffc7f01e7d6e0d07a0b25c7410273d36b07730a5a23a01000555c44548e388f7b86398d00fbe2d121851e9651855c3b6511f0b56171afe01fd5e0c505aaecdd37558c62ce00f523fc538be1cc75110d5673aadd3a38ce59b3da406e6d403ba1cb11557fa5ea516b3d4ed5bcfe76f7ac59d30e386f8c6a2c60977da23adc9eef9e396b797730440638dc553d42f6f5f9146e1cb06c33870eec749930c30ede7a047a692a89e202cbcd898def150604d306c73085c0a9367f50ab08d1497bc7f2ebcb71d959fa4478c29013857938c1d3f95260adc7d41dcd172a117f76851cb035640343f6bbecb0eb4b0b5dd294901ca56336142df181c47b08c063be4ee9368c2d0428f1937c26d697640d6997ad1f2bcf2c666d0c5526b4e5b33ceafbdfa017611aaac47f5d08d611998e102c089ffe3cd2ff40c929dc472fb5a94841fd5dbd0c337cc200cee6071efb01f80d96ee1a645c9cdf1f27f5160cbde6b045562ce51bf6561e68911baf5aca15bb5efb29ef46581b7f06489cc82bcbcd64b34384e7afe9e5b643893bf8b24c72ef1592395665867c39b0dccae4986cd91526303dbb4a30c8ade1ac89003db28e8ef03e3d1990c18345e1fa929b46d8ec9a69fd864030838200ed82178cad0bcd89a8d649c5022a7b8f8d8ee94c8b25bdc27df3ab63607c8731"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bdd167c19658dce21e7425950c447e8b6c2dfc965719122f6feba6ffe1d1712b9f936a003ab45ca2b87d28dbbd64723ed283bd47fba7f46687860420fcf6625114d121c33be1e185d51f9e23e1d5877502f0dc5c09a804a80f0512a01814343a3b56ca340ee0a516295216f3af25fc1ab6bb18dc891ecb4580fdfd7021580be405337edbd03ae1af3c2e3e932036bb4fe89b3b6d602e234e7cab024863f0e908e5ea60a822b6cfca65260132ce6e67dfc909e12dbf0b077b33c3bde9960c05628c1ea5d37a87eae78433176afabf59deb1240352ab7241f05691f819e48e272155ab05a4b2f02383540ec3647113727deab43162ba42f23c507478d25f2fe019671ecd4e356f790870d622e45edaeeb8625317b7f73962d22b3918738fec7b21039ab86ab77c2f1e60e84d723a632c8d36bbf76530fb14753b6df340278c9326adade4fca31331db0cc47e682e17e8e7822d4e9940e2e1bc20619516975019813608d9616f088a4507d0f07c80f3fb932c65df7e462d79c27911f923bd26a852e94362dfe6b5b4e0b9a4a78d043bdb9b8a7130446c643335fb34e0512c687aca18b1f3f1b353cca8412d5207dd2f7a15647db7ee6d38edfec9db5d4f0077cfa8ea4203f44cfac92603419ce53e4027d5e98263ab3247d63aadd6e3de859fb50cbc52d535e6ed4b48020ed5185f85c86f950c529624764d8fde5609de5243e94d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8f5458a21752fd2eb64b48709bd5ae3a5db1df868618ad797a7e0ada40a517f778b5c7d3c6bae58f58f12ad0791d74d7108c62ed30c4694b2f524c2695100588fe4be86e8f58a40d0d51f0b34f156db566aec0e618b680bb6bd37d4ef0d03a668686d7ea387d7baad1a58e8bebcde39ab1ae815cfb8b851e2880d52c7ae6fc9cfc18cee33e6a57503f4f2fdc9660daf4a11b7a6c9795deabcd8b4ec045b8bdd032281a4d9acad32147db0756841b9d18e68799c6fce2e930abfa9b85c1af5e1d7ce1fc516a9255c8ff97bd727277f3c696f598272934cefbbbb0d40948bc1f20b75a73901144a331327eb30b0a93ed4d22cc3bd3424d81a6785c2cdb33265a1349529432c59d14cda6a56abb17e2a5a56f927e3155bf84fbfa2bc90c266dab16a181ada2295fb835faa6e58b8dc85b3515250112b0adbd4b1ad2046cb79dbadb59cdf90e04e6e8564d5ae6052f54f7e8b5d0b52cf993ea4ac76bdf108ae2c4dfae1369f1dddad3ba0fa4fcbcffed32fd7cc4eabb3dd314e1b5b90d0377f045251fb9da763b06202c53b4f4f6396a60a7bf166a2e5efd29a860762b1b4e11dd20197996ccf3f5c44599e23dabb5a2d12124b51ed80d58e00bdf770348ffa2d71481d18315c7d8d110bd3e3cf651abfc737ad45ac2c6adae43504559254094c1f8f5dd4a4b6fa4895b1912845c1a0f3cf884e450cb02670c7c6ec7d4108d465f6f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "461d72979d1a33149fdb7ae57e465e6ee68b2630c78026211b6744a8028857763d9dc55ad35e4efbdd8d6edc76f955db2ba8c2630cb0b94d93c35ca4b73d73e27e36dbda881061c93fe4f0522c3ff98a48a1207a86b30979f0494de0e578d4debe93fc387c39cbb0413325c61c448c13974b6aab877712893849eba983cbc5b5657bcdf5f8dda0934af4a98e5f0224d959006e3896c237bf784a8b3752139fb8c018ba380709ce1f13fd8da9b796b4e8a63e59cf97b19cd0dc5367d78285e16e01ef19b27b48333188f2617f37bd3f83a490277c1420df492821fe9c1915dea02c87c7269ab298ff8a2ee51855688ec67b3fb4cdf607b719d5bd4fb030b7fd3fa6fe089f25d2f722efa41cae38919dac5e39668b22959f264f6f28579b1834aeca23635d80f088a476de3786ec3d104c1e69576f064b7f784371b9e714c382a31afe5c44f6b91f29fdaf67168220df8c2a888ed969e65984bdd21562936484d70cf3e904913cb067755217029d8932dd70afc01a0d51a37e5087de1da52398cb542419504c1af1521f828e229f656e5d249bd3cf07fe94b49b0294adf84e399d113eac6051f810e942e53a2f5072401aea64f8687ef8131c4282eeb4b53730327410a8e8c85b060d2d45c6d7b7b2e6318ae05cb715510e0ab1ec415d21c12c1c1ecf92b464c7cee78273eeabcf7669f932a234ec000f0c6432316c15e8c901fe"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "556bb026d73b4d8949c94db2740b6cfbb17137b69cf269ba5f1be736ab6eb0746cb7ffbc5d7d11995b2053227013d5102b9484c59f521853d99f961e46611974f47f3932a8e1f82a3f5eb047cf7c7bfc63b5dcf86effae34ba216287fa23d5d79e7ea2439aad07fd751e190111308d9b49a524db7c3b0c939d9012f9c2f3edd9534176ab2096d4e3d1195566d072e3deef214539bd70223f712ec45f8a28060604e29ccf6e5031432c9623190dd194a79bea16a1b51745f2fc33f2d4229cd543a1d197813525c655b34def9990fcf75deabf65b325815f80d544528a0639383cbad12d18d4103abfb634a7b9dd68d416600aa4bee19bbedff26f81ed91e119bdcde3ca52792e2a5eb20a4c927f96b238bb478ab31230901eb99f856d0c92915fba339393d1acd7f29270b728d3f26614c6c894c11693d2d52a89da376530f3356cda798f1ff98277e8f469895e66fdcd8e685d663e9a4b9b25874626ccec38e1acdf1762e20852727854cdfda4682951000c6b412a1d0344aa4f7a13ac1a6af8d34bd7881c8449e645940df870292dc70493149f609db2624ad3ec293d8666bd8e6d8deb62b16fb88e662ca32f99ab3a7a99247f9baf9ebaa3cb2dd05b110d5288550042ddacf603388efca1493da1c9bb92cac856f5eacb8c7fb5650e9288635b6c44a47b5d6fd36c41637a6de1eceb135871e747318c27fd341fd5d3ebab70"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25502014d5c711260e9318778261f5ed35e506bcb2f07a28a39a906742700b9d4988bcbb2a2516016ab3755961390261e44bd9e03ec3fd8cab95a0bb282c083d306293a994dd0f2f47119c715d08c2a640ac30692c25e9c70dfd69632d72c71677b0886b102ca7290d4221f1fbaf92ec37e99e5d48fa17b9f01d4872869cf204430feeba450e6ae165f76a4bfacc8ceb066cc6e8cfbc4aaba310675179926a59c7152f812310d9d9395d533c7c35fda7cef4cfe89c6ac4a23d6af588e2cc6a4b0b6bc81c55f5bf9985e9a4fd73c70a3e0982f56f10f0dfe3c09228b9733dad9d96292d19918cf48e19f2e895549fe753c257862ace7e8c48cf02a4a8e1b47caf7ae06166dc6a48e5ffac261a2181afb9c5d24f16fcb405f561e2e5df52157c30e17409bd0689d041d04248301e33034646bb98d1ac3c4e4d41a42232c9f630738582c3f84e3947020a97938a23c41bcc17a19f0d21d2241fb7ef0b98e456806e08503bc7a0f661f0fc775a467f8377f2e5baca589e731d43612a9fc32059baff2e51bb44a070daa336cbf5d682e4e9ac60f58312a71d0df2722b9a3594bf5e2b2674dc5d5f84e3bbd41dc65eec463ce23a17e0402b9492f306f78b1741d914af10e902a20ce25bec7ccb7ecb6ccb07709f5dbbbee7de2fb5cf243e47eb4a002d4ea331658dcd5579c4af405d4cbd43f50b2a34296460e2a62430477c00ea349c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "af875eda2f4243accd942bf9abf7eb89260c365d64e610997961b3278914c330e607ca8342847b02c9ca916b1f51c2afdd95229c9c3e1d33dcdba370f472060a3f7ee1d74c8667bb8945b6f10bdecec96a9699895f2fc58f21e235d54f2988cf78d27b65037b7b46552412d30ea2b4e1d96167b9f720f4704bff09e3bf6e2ba899445debdb09cc9e06078f4dbf1794813662d522c25c0e3346132c53e31b02723cd0252ac0932e0171ecf11cef73ecf8eee9ce23f3ce66fa6301050c8e8ea96ad136968926753fbd09a4da0176e8e3d9f572d4857962d04aaf33145fd4613329fc4b3b50c28f4d43d54317752f983dea5432ca88efd035ce839d09867e0d84ed57e331eb7ed2de74ddcd625d13f3bb586bb4dbdbfba34eb0d72130a62ac10079807cdafb40c6383f08af4109472d2ee6430c3c301bd6bc1a983ddced8618b08db2fd4ddca07c9f48b668c9d6f2cb2755a29e19ca0c8d037d3db7919450900d217fe426f054443aaad6be22285faa923cf719350cdaedc8733ece6d62264bf4a0dc1bb88646f157686a4053111aafdefd412d3d7f59a2544829ed429038f1452ff36d4e8b297d0b43148090a995944b4225bdf519a6315d62df555d2337f7ef07975f0fddecef82ef0ca5bb41444d89860405fc06a8dc6c93bd23663a977c68ff8890bcd20988efc44df6891b9daea3af083137a21f3776f2e85443b359ed13e7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "cfbad304e05807af505f5590a49eca630fc43df9950e5f43b2128a45d7271f2ddc86d8374af08bb478bc2ee3873f883ca0dd41f5aa853bc442dcf5b6fb1fed395d8d7d71f19a47e27cdc790e63f4bb6d17faad0f58efff1a36044448db8883325b290308caf5272255be1d15276fba4039206762ffa3b63cfd07c82ecbe0f8b68345f748c42729ef05ee87d7d5d83bf6f708658d7c45a7f457c3187f76e2e2e69bc74e60bb729acbd1bfac5b79ecd895ada4b2c9ba433ee513b651168fc23709bc75f27ac8f79336543d44af3910ccf66fff78113b103de9d3d0665157ebc14355e9048e04cba51882db9d70f41505e5343dd82894ff277417fc6b9524904b32655ff0dbd8899671b64b8f4e6b3878553d21da3ab842c12c0cc4cd88bc131bee41896d0337ea887dc729874922f4cf5b242296787db9709b237cf0b9a7712ca722ecc6842c11612dd79dba6b3fda11597baacd44a00519bf864fbdd3b4eebb923b7eee29aaa968d074cb45efb3304cb923b247867f819bb6145186cbf779b5c4d8b95add1b649b38ce306479e8684beda55cf68b2aa23359a9034c6b37e54262bf54e6cc3c959f3c7b8906ea15864c488e33bbec8b5d465054602798359eedb80c9dff2463fb16d153b0200aa01222fb3b2dd844f915efb05612a8f1f0371b2d668a68768a168d507af7765ae805ba3edc1f81e0dfc495d824212d1cb00012a7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "249c2d5ed8c340e0a3e679aefa16ab73c253048f5fe1f71a78a8b23930735f75b0e9061ef6c1b42ea650290738abe55a65eadbdcdb06caae1d8eef34d3cfface1454f56385d95f8b6e7b114780a773e7983886d4a88a9e967d2a9ddfff9d3199df1b1ab9264bd2743f843a9d2855d95669b72168cd2c091c284207591ab0a196a4e9b6731170d2996ced5d6fcbc22c042af2f4e9c62efbe0b3f4f1a34942c1a195626665d1e5aad9df05fc80e7a868e6025d98c32d6c04da4cc542153a45aa11d1966b5c6a97c23d59b508993ca82b6f135c4c9aa8c80b69895c057b5e86fc19897ab6020b3b63eb6baeb04baf1f10383fddec174d7e58ec732fa9af26126ef8f938d4402ce9e17a43471ab6cf92da75449c6e5f63cf23a6bd73b1c7f49011dbe17db6a1f17852fbadcc912599122ffbadf9a86093038183cd7e8fe07fff73e770ec3260bd10508270f4d640fedaee6ebebcdf3ea813d400a6f92010dd0e5934ecb97ec0b1d2ee32b98a58b2c8edacb35013484dcfbfdf56827815c8242a4c94afc3834a83e853d6a6692360fc8d2b99c4ba686d32a444855cf44173257daf1bc49e6372c1e160664e192e6643c3a6904feab985766f0c065274e118d1d5d3d60340d272fc15cd9a7d5f2b47c028f09bfa080562b23776caaee7f0ba5d370905479b2b5b29823a00d6876a016ce0213d52bdee9a610dcb6bbb35651eeb2102ab"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0c7fafaf24fa7753f186abef3ae15f456c083e644560b447bf29eb6f85da992eecdd27d13a1c1437f0246edbafb878461fe5b481457758980ec4a0e86db539d301799f1e58d7052752b36c49b67173744491f1fdb5258a2724c7b3a0fe677de960a0b873f859053b2a5c6c19a373c0025c52f0702a32f182a1cab5877d7aff14647e477b6a0fab0a8bb9c96d8fb76c53834a755ece39447c877530f5ff55b6faf5f0e28baa74a88597c70aea739a83e1e3718f447686a72c496453ef764a00d932b483996e4a44cbe76bb5969c071d730f8799fbcd6637105b648faeafdbb355933919997a2d75f818aa067542edbde4008034b6055982e69e633243503f25445f672412bea694e02251bdbcee7fca26d1e0237b2e767f3535d2d850f81167959a87539ce7d5d10652cbe1fc8940c095d0662ca458f70fea54d3beb54c77a4ba23957390d3121304551ea1540b6051e099ebfb2d4857f65af77f4a6051fd3a1c43cbe41b890e2c4c8c664ebac554a2a18b9390e71ed748eee48da86132a85d92b67278629b77362a64a341c2e97f8b38eae3e0fd70189da8b53fa0289732b7fb99ff182b8585c1fe9ae9e7418991c9933f3947267cb0b303ab4499149381640ceefed15e79ece97f148c13fda5e374eacc59b750b51fce06430d566256329829656b2c1188377eb167de4b3accdd834e349762b569d653ba1ae06f3b6de15e90"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e0c2b8731a7453f66f80affc9d8034fcb0941d488becae268e34136be6cdd4e7015713c36d2522d5df47928396fe0ee82c26f27bc361af78bd9c474f32629edfbe3748c88cca6599e52527c649ff3392106190d1185e04c451ff00feb9b4ece91dca9c1f69c2427bb74c54c830448e6767c7a3df5c9199a274d3a1551be70d7ee9e7f37ef4e49558ba04539fd12883573a9df9ebf5f353098f82ec55107393a60090489be080295e1b6343744ba4cb56066f4c949a2efaf4a98e33a1101a32cef734cd208663ace62045df61eea10a7a3e39cdcfc374ae0735ba7d1c59ad301e20fb65c014b96fd4df9b9898c5aa6d2f4646f5468690585f9546ce10c28d15c1e93f7bf18c9e27be523e1e327298c5cf4271a72a3d4ca37912f4acea4088d8f2f2932fc9be6795790a441a6d9845d4b68dd9e3fba6840eaf1ae0e0faea1e49177b3f81a7ab7183dd5cf1b3cd253e26a2ed5664f4663edb185e39c5b2ac23619762d9f0998e8356c5c620f684817fa4f9bd0047b319cb1f8d2ba6735b59b5a4f26aeb576a9c191fe98a7890d5513d77b7234dd396e1ea21087e598fc668f2df92895d859dac227423a54788d6243eb46efee54d1dd1c08ddbfc0aff070bf8702b49419930d5824963498476243c21d0515decd8e7c42643f66b32dab61906a280970f96ade7cf10d06dfceac50c78cf99961e380bb52de74385fa2e6e3a5ef8b3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3601bb85919c5347cd9fcf7ff0841650c48f106bdeef45c00b08f5be58e2da6dc66db133e0ffed95ad2c47f478d5971fef29faad8acf95cab925660c0c8e4b0daa4526a74c5afe9b97ae02bdf62f3f5c9287439dc9893ca8a5f0c29c3da12b1d03b9c760bdb20b047c6fd73318355337ea70d8969e720a71811950aef9f1b67e6130945c979457b772c4f57b0c7f64f31b094047fca5f24709148ee200831cf57458552ed60dda20771f659ac30f530fd43e84392b43d70387685cd397777785eeb24155c0079b926b2f9d6f8ea981da0635c7a77c16b89e2d4cb44094bb420686871a0c5beb0b69763f54cb6026d7d6b493da8192c86a6ad25fd2126b5b300068ccc592acf0a8c458c8bef6b48422296185e05037a3dbdcd77791788ec01277c82067115305e70a41e1c362b07c421cacee7ef9beaade2ef6bc469bc3e5a1512931c8c6adff5b2dd7c0a626216dc6a43f8e30b560e0c8064f3996ee3c01151b6c2db4181e232586dfb6dfe5fbd855e6b42111863e2f2510800fa697cd8d397a9c9556cde6298650ee0a65ed79267025a8ce31ccb75c0f26b1b309de5389b3b47aaf6989d757ddf922ac2b40bcedb7b612a9484b60ac252dabd4fc10fdeff34727c681c3aa0bafa26cafaaa328fb496f968679911390278d596a31aa68d75235fdcfec1b811a19c2a797d54862452a5e7e8f8a36420267582989a1ea17f7cb90"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "4f48c04e092fc08178a8ecf1ccdb571af8b74ba7022a4cf7fd34df95682452e61b6d5c3e9e5acad2070cbc222a58bcadeca2cee91f2a9c633f80f463b97dede13c89b9f44306ae9a41b6360cdc7fc560da97303274cbf156b637817ec28893b910b825279cedeb3c131376cbf58cb39d03dda4ba3e4ffe1b343673d4fd1ed31374f03b73de1f50d0cee2bd63418d8ffb0f4a5898b032110f4aece433efe49a39ccc496a188e968537020e82883a191a9906bc882d892503cdde4ee2fa1ceb4d433b3d3de3107af744cefb13dc2114404a96b5965e6632a627031ad74bba51f3e1ea89a2aa5488ecfc2348e7c789a2b0a2f34955a5023fa5a4f4f74e5de1450a33ef69fe08b96f0a7d7fcfd65e26214c12cb7f9ff0d83d9b071ea512d1d11410fcaa670ca4e40217e51a9edfdf2b3d6b0c1546e6e3ae668b05a9dd30967622d183f6087241b641040c3e5fa4f52297be25fdbe8a88372bcd96cbe7e16bf4a7ea09749444f794bdcc9d17483135a95fd69dfc644f434e2fa0aab41d910819518e0cd77f8a699282972f0584b983316bca364d10bc31d44e8fc66ce3b0979b3b1ef1d3d7f54c11f1052c40a7fc2eeb8dbdfc4018f2bdcde6ae0d4148e95245a345cefaef44b095ea49a98c5fb47c028e2781ef0d6aac57e07a6e2c46a45cfda08ef49a9d7e24937a9d5542757b3cb13ea601c3d25d87a696673ec9ecddf557aea17"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA384 signature" );

                m = "313233343030"_hex;
                s = "9142e5c23838098f0ef2f7eef0304c7c92f3917a7bda5629cd1d519108fabfef0df721cf30e38e577c24a6fc49a109f4cfd009e5d30c4e556461c809035c55ea59115b6b811276ef07986ad923fe2e215975684a0616c82f5f05c10c72998bd802e6804277f085b96f0e8151c8b7e5fee2c1b392b1149511a5970f164aaee4add1c92d7ea1f32479b7607745e01aea124ce3c443a7854c7e5c066db21254cadc40c1916fdb2fdf1d027aee48130da026633812e37bfd5b7228c9006f928b3c57009c0a2a2cb471007ec6238de406ad8bf4828020b0e39ebec3ac7a830cfabc17e3ca479a38bde08a4b7f100b5fa0f1d1fa4559030254188a3568914fe7025d8bb8d8ac9ce8472a95e3bfb533e2fd66363297ba0f218b4d136f47e37772e3c6c2f26f3bde9287ab32de17950023c4b8741ce8251549bb8d1aa6c6ad3c93ab15a1212e4fd614ecb2da3ba720ef5c188a1a1273d318d989a50257cee486f6b33b1fce31a71bcbacfcf605d5a7a363e5e75bad04728d5e1b74165923b14074703b37aa128735207b9464d41a165005329eb86805313d99c0cd9df12b504f9b156a5edd250962cbfb98ff452e01df0c1f8b493bc168a013481722e81790bfda790beba863e8946d43b3f974f334b9391705cf7c95092be9e78a23554bfbcff960babeb878b0d2daa3804f452a283ee45f00bb8fbd2f45c6b370868bcb6b578b08a0b1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bd216026070c625ce1fa0ab9ad87b13d2ab4e812edd2b70eed704979230dc0a020fd273997353c0cc9d164eb26a2d86cfea2cb8d67bc8d1e92676be0952b3e3091504327a6b0c130d805936bfc2178ad9d0746590d5dd5f08f265a81a669be28d78e299d6b54908dc34e34e8b107dc406b8ea515cfe486085bd56499eaa5ebe10d5ae0c2bbac103398de7a3d44674bfa33317e760951302ab5e6461e9a6532e0952472c8c23cc5f62a557c0d9feab75fbcb4fcbcaf2a24653095244f8cd7a700bd15f0173922172edf89c43c20bd7ed8d0d80f32842111e347043c3ab207bfe07a602817148b3e571395b423da84be16a9a7677de933a2d49c1b91df6e0344f4d7a8103ba413735871f11bb5faa7ac609f093613375a6ada09a011dcc38f6c227ec8203faf1f6673b8189efd3324a18b6cc2f5f7fba9f62f777032384be5f34ad1f6772d07f7a1bc3d6c07f0a6b67fffc690269b84af74a26e92a6fea7c51e6f071393c5f36372442b5e971bbda187defbb6636f00cbf9880258acbf0e8c0d6085d897aeba4a8c0c9ad7ff48180a3f55ce41d340e9008c281f27decf2dbdc842d52ab51835232718e7c972bd3cee3891848c9dc0a3869f15144691a1e582bae63eee6bff6cef7d7e57a8a86e17d8abec05742741885931eedebbe265a1b4e12a000784730662f464c46d82ad1b22deecc231f4a1579396215d3c04aaf34f7982"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d4348ca0846ac65fc4616cc16dd43234da208719ab2aa4d1d0b86047860a27fad5f5aab8eede041ad80dba2853625a07f19317cc55820761c18cb7a39479a1ff9df76e8864eb636f390447f7516398c6f635344f921a17df781595c0941d98f8041103579b21547c998286bb51257e2e5e2d01caaddb035ea679e17b7a9a5dc01407071f4c2916b1572ac2892f90bfc58a0bca54f144aa6da2e6b1e16370ebabc7700e7a4d3e4c61a18c6c96c24533553c5bb9f030b1daab6ce27bc59bedce78956dd15d8da831c7ee38eb44a8f852c30ad9959c3314a2512406dadb4baa08f433a5983158f358d2220b529f40631a12efc64dbebf83c8519f186550bf6942c14fbb25019009d5b3188f4f989a783f5a616eb29f55c865a3c70907742e29f0020c4700ac85ff2203be14017ec50d2b22382b1ff44b5c880c154d48db2c65393c812eb4da98eb1412d0a6a3b5e313e23bfbf4e235c60401266bb80e6a6ccbc00ab4d4db2710fe02d31c5df966982c32ae2a9651fe70dd9bab4705eab41d7bd0368163c33579ed203d73b2fe2646ba76b2768719815d174efae7910d996ded8ddfa71b02e363e60ba77c8c62179020d0322a96a5587b20f712f84e009a1595a132dd927cd3570fc75716f4668a2e4dcb182ece7c5ea139a506cc74af2da0926daad991c0d331ed4b2b008d0e4b8a0553ecd8a7c046d671b405d476d2c99c09605c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "76ea5b5002cddd1de8eeb834c765410de95df7a50e596e485a9408183766ccb00e14d5cea4c9ac99382ab051a4912b7f2d12f3dd0aa0b9fad529ae2cb42b1627a965f20fd578552e71121fc481336732b7d0b1aa77d17cf1b28d8f4441249cf92b5022618489c7591e5bf71255ecd5a815b6f2b76bbd07a1a098cc0f52499ec290658258335a6ee71fe729542cb09c7f26366dd3041fdcd1d0839e5fabc3efc14a2d7edd0c7cf6b789df775070d5a0dfd251050c2498785338c382d46d77a0cc75fa3ea21c0e04caaf6a2dbf39959a6a0e1ae36fad7f6e7cb328fffe9d81f3cf835734146a65a9b47d0627f62d4267e7a269bfe77df800afd96e6b1e803a3eaa8b7f8457f0016b0614edfa2094635b12139c01fbc4080948eefa9cc759a5f53bc8d3f452daf90a163ba958411110067db99133ab043da1f48a5ee465fe0f471e4581d556e72d234d05f25087c72c353b7a166dd1f630738ea9fa2ad2a734690789d72c7f3c1e1405465be87b46d3c629765e4a3ac470755a1c406dceea192ee7c2d3601319430f4a1657891ecd7f807553f795875bf90c5771fafbbe131ea4fc080f4bb26133be77f0442443d8ca88827126f303ff08fd282f66f352ff80e41ffaa296004ee939fafc31bf71947cafc68eb1335239984c625822e012d19df2520204890192897e4396df8becde4ccacfcdc0ea92413d783e862a145ac731616f"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57e5d61129208bf525b90d70b91586a7fcb344063022cb6880ea29547fdced300be40ffedabaa355907e969e56d25bc16b4ee994ad7b9f7dc78ff40952d77199f907f54da39292a8b5968352f8f75d116cd312b075f50e7e81ccac1ed9db0111ca03899539fce960a0822c4841510c34654ec63ce3621f963d9a23fdf00d1a32968876aeea451761f01d985d57c8f3ed9ea4401fb56e8bc3f42146029e43349725c11e0d95410a67d611c201408303f79f22e198cc99affce73c29d9bf24c872dd5ac170acf3495f9004da15bb2462b6130262b70c6419cc0121c1866f14d1532426b6663ccf5a2b6df04172e86e41fc2ef6a7c6cf518439bed264338d7cad39cd6275c0aeb95084626002c0bdc3820ed8b4b5752e76db47060d94a77f87de3bb14abda313dac0964c06edf935624405ca0b074fa3b523cb3d5e1d26e0947a37c46ef7c74d94e076c0081a05ec572610c88e77768467e949fc3b49a6de8506c041045461da0620e63ae222ed315fcb2192815dd5f409775630902eb1da82e1ae86f8cd54950f663602fc01415ddeb7b383434f61ad085b8e9a213694e409e03e7fead150a722170fa95ec50ea44e77eb57e7df00dfc75a315be7adb61f4c9d70e8b73052502a99a108c99d8f84e9a25d4b2cd01e4ce340b72fe99d8e4defab2cc9f765ee28f22db2599504e6233020005c61b8086ef7f661dbd691b998e506f9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1845145e1370655103ccacc88a34a9f5c460598a67ec75abd855553a1c90924224e942902019e102ee902856513ca3c193f795fb03025b799b98a5ddf8b85ae1ac0cfd147709addc86c17b6321eb33ff670b4ada5c62dc96428e6e9e359ec85fc0d2f5948bea4d98b11b07bb9768437de4b6330ba419984266109e30767b7af0c1d5c1dbff748966715b839469d748b3cf42f1b996dfbb3e068e54d80103a5e1275ef7ad7396c36bb1d353c3bf4429aa596e14141f8552960a3fb9d439bbc2734bd3c61ff52622f3bdb1063c31b621a9eec1a2aeca2fed58e6358a00b7c33ab7836544e42860a5f9edf7719570dcabf800d9d6d60ac1aaffc3833658da80249aa29602bd81589ed9d831e5ce1c1748e0270570d1a09b037d6e3e74e708fd16fe925e7413f8466d5b3c7db88d8f0cfa7b0a0b04a4281acbcd15f16a9c423a1e6604632264706ba09a76866fc44c3e6bd17dc74eab82dffa9c7bd6bc1ca18b6149bad71ea1a5062e3f787af0605ac3fa47919ab714bac5bce1ca1b45791d4d4c2ed1b97f8399eeb1485d1b9baa19beaf907873b9ad5e953d266322eb10373d3d7f2538b2e436adab1c946babe6abe2242c9748fec22ab48c0d048cce5c14ea349c61880b6a1d4d5fcc0e0cce1f4ca8507076605e0c63a6c7e8847148886c4a8108ab26118a1b579a3761b270e36082b5edc1a5c805309318d9ca834090d2cabee1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5c8a672807f65a7ae92450455ea2521013fe2b31e2c3a79f62ded43a2edd852da1e93e0713853e380eee74d99d77388c78d6a1b96454bd4513615ca8ac3a7f7c7c7f00137766fdbce6e0569a5a689aa31181d847e5021f9b2ebd74b1f12e9dc4fa9571b391668c3a3708fc8f114232ab45d31972a4c62d52d699dacc9a3aaf2516df8182b7079c56d350bbf89efcc4d1ce27c78749146399551e92de367d93864113f21f22278d6aeea95918f2888d20526b281f7cb22a641e59a6a016400dfc7829b0cc64b5eb7576323debd27092c2cb9ab1529e72f61a26cb970d0f57c3b42315e452ac50dcedfb8191e76077de7f10ba066500618e727b8143e3edba8c3e735dac28d7c2dccbb35e002f6778ad132cbc3987317cb44eb56120bc5d7b02f0010481232869329eef9f006d3cef241c85abd58dfb8ffd3d569698ef44c48b0d3f2898f09660a68ba146becafdbe4cb06bee174b453a3bc3a605bccc6992958cb1fa7c17a9baa38eebb06512653cf5842511c49f1bbba5fdf20825ff5dbe511bd0bde0cf31cfe03d15c7055564ffc409da345aa30739ee413fea3c6b7c4345842e4ab5689597f1f4f1f09157791182d0a8b5ff1d40574053e78222e3d6ccbab99abef32996abd6e769aacde18b9529159c6b6d720ebba8f692f0c63bcdab7465bf3441d3c073bfaadabd7614229753fa9b310d8257199d7c2c7f5e1b47e91da8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "247cee9f41108cbae680017ef4fd13032f9f0a88306868d2380c979936a455d40ff884f7f8f417cd4ba768fa4b7f20da9d1cf6bd720919f994430c7ac638b9ea1eb237f61cbd63863cc6c983e0a385486a5e50d46cd18796d17a86e76ae315e671b7222be333359c5d16ec125ce02b0efa63937b8e16498ca7df57f77864c7f22c36fac98caa7f5f60e213cacf7a56405e86bba918ad010e83742bec2d5c445d0639a38dd3561a1bf37c97bc2e98b68ba24fe68868cbff7c67afac12bdb181b120d5e6d027c01d1fdffc01e84078ee3be55f81e2fce671c75183d6f96b2bc7aa4939433115eda695442398c8796bcf391f79b4434f32295d01e9bc7188637b366df30a0e634bc22a57681dbf31fa817428d0cdb38670bbaa8babb0ea612d1951169b29f82ed7f7da08d144dcfe125b953f3bb01fb122d2c2fdf0c079e41cefdff825cdb2d5b97add8649d9c3e0b5e42ca81bcc404213e4a69995f23c9329bffa8e47829b1e5ccc505a7d8e0994f6e1d93f88902f2b54959c2096c25b21e94c81018652f1065dbe418851331a3e9d9cfba6543b246843944d69e3fd99a4ae6fc7b21acde60112e1c992673785b5e6af321dc258d55300f18835f7439366bb65447ee52e0f6f2d6e132706b95ad3de45eedf6b00b95a15c9eb77aa21fa5e0a83d9a6c534cabf61bdce1fc7e6d01bcdb84175c6bb12ce0cb1aa1e728f2738c5b5f2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c27ff32066187badcca9279f99170de488ec0f9aa0f8d5845a6ec945bc5ea2ec864b608da79df605da822e613665e0e4749da1c191c9bba7d2c8e3eb1bf9fa1a2e67be4bc5cf7a85e2c8e257165ad08922f3214d3c646fc2988f0436a54939aaad0e632a6d2ee770c818766dbd50972717ba7ee6605b2e282d4f6dc4d476e2bfcf36927a3788b695403af2ee1e99a65158f72663a3ea36e7b3d179187a5da494377a3dc651caf166978aebd668cb556936e3f80da58f07c6ba223fa832f2a4e1b117dfb1352aa2e7d128cff23f52a40c8cc88aa19f2f99f4494853eb6a26fc697cf1dd6741a0d5964d2ad3c28412c475ff2e45025adfcf74f66654df2a6ae0539e052e3c9e71703d35bbc889272574dad6dccbbf317113718c4ca26f98c58d8b6cc74066b8d59866289e8a3bd8d485cbb69657453eaf26c420e98f277ba77f12dbccead39d78a468a43b502238fe4385e00cfefb8957023cb4996889a7de9171deeef118cfad844ddc1c89f04352ec0e0f00aaa3ba9eefba5dfdbd7afe5c804b53f836e0e7d632cbe460af492e823f134500b4849401b27f265a92ea6f16aab92b93468ad585ca168b2c2f60a84b900981aeef22152416ef9a0ac21868947773edbd30c081eb0ce57d05aa70943d7cc9b9bd18a00cd59ba4d52f2696bfca1da845ab605d099eaacd020da1655f7eaf515dd843b9d8ba18f6abb3863985f57c7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "21bfd9bec971f02518e92f76434f1777028262ff7d98036f71fdfc5b983ac43ec578f680b99abeb60af698b346a156cccbfee5a5ce48803ad2cc9157f7ac68a5fc657a58076e55e2135690962b04854e059c895027ce2a2ae2a856b770cbaa52289ccbc0df20351f926e39972aadaed165d5cbf64076f63beeef75075378d9e78c7289cf2a1224c90a70b75caea9b775d73c1e5a0676d1de9e17bbee43abf8a9159f2e24233b0373a7b821f2533811c9ff30c63fa117c7fbc7dc43005bea3cf4e95857f55bbe42c917e3d21c32732d40eacd487d7523023fd1e340f76548286131977932629b57cec1a21cf4f928553f7bce493aa0833569f2e63219a3649ae5c53649647d1ffb864cd1da6d09fa9644c17db3d52e709d74ab06ccbb454336bdbbc2d0b08815e26ed37130bcec805312724dc62ee7801a2c23fd7e424c2f1ef2308ece2f1b8d829b2faafa46f953f171b48161789a12326673cdd6c57cd21ab0fbf6e4cb189bde926348bfe21e4983fed87f93001662c782d7f935a564df18dd3999632e32d529fd168992205d5ea39cdbca77ac340c2d40b3dfd9c868779abe6282b7695def8eeb27d2a47e6190371245cd23f1ed2c328f0daa6135fea8dc9d86962c8ded21c54379b0407f93a8a55b703fd27ceaf5cee13eea22d6afb62c1078f4d9ce9c31190564bc24f85f537e48b7d07a305862ceb05086e108fc5ac883"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a82c217dc30a450b42421e4e5e16293f0979eb35e50da88c672c737cc7a781386831e9b5fb19938862e807e398940280f74c333bd76e87f9b82376c1f14634c235efd80dfe495d8d5f338005529ec845e2dfe20dece7dfa0dd159aaa1221cf6190221dbb60e6f9d2e3e4c7e6185993ca794bcfe49f878a23c4136425f7d7df53c84dd189bc75d01200feff39c7d53c8a94c04aad5bdbe939caa0136a16db2530cf8353f9a10a8c1ae3ae7b62310d8d6e456e1048b2d64d87a36dadea240a405dec91e81eb9e93028c20ffda26434cb92acf366061137b177b0e6f28a87b78d10842afa6edaa59021d2c569d566bfe835993127e3ece7ea9be316a4b08e4f135c2efdc94bacbe25bb80f6def0f13df2444bc62a23c579eca662d9050b5f2e9515d8467ac2092a7612c0cec21a73c8c262106e72e21d2483fea2d68c8c4e3426ed4953fe07035c9ba246b15c5b3aab75b6f3db36f913f077a885b6a3d5b674327f6d0ba3bac9a00f64b5a5c4cc94b17f84f72f22269171f583eb548ba50a576b8221f8c28610cbd37d379e95fad5f72269dc9a10f5880d616f0ce4c5d8c8327834e0d99f78a727ee845a1e33b5f26203f55df45fcb16b226eeffb87bb7aa71aae18e4e7cd297a3c5c1a21e96e511e35bc28cd4a4ed464f74afa1bb48f71b386e8289d218eca1df6bf5f0f262525aac5454836369767f2ccdfe8f8071c63788c76d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5869970ff34c9565d33391162fd58577226773fdaac6e156b5c34c3909ed8f97e0722d919a9c2330ff51263822de4ca97aace5f4af71e4c27032f6c9992ceb6fca8ca216cd598a427bf73c2f83005559d7f0558ec2f9c3424a53cd4ad8056cea989eb9ffc54eaaf76d7439af7f22b2482fb7e5f9ebdcfb517ebf5eff9336b35d338de064c04239e407bd08422fdf48351c28ada80d23cdb0068f50caa3e05d524406b7d5869be60455308d65101a900eee748a00824938c84e96a22b91b2ee6590a42d2d9dfb1107c7ede2e1f66b58e9f5c5f91172da4a6f1015303e2d26beea9a806926524d965cdfb1b56d9541f41ab2b00269877a2803ce48ae47f74d586ff113c3f8d7e62ac710b95c5f773607dc939955f3ad277692ce4a733c6d1d5e6c1e7d66200d779cfd4a86bf7a70717ba33ff9bdfbe2e18f41c63b4e14f5a10c98653808c0d6cc712582bc18e7e7affe8cf9d59254635a2413f1dddac9ddd13660e763a2b151afae6538e5a22884f2320e778e3b977c46b4adb4e06f73cf499b653beffe929e9dea21fe903189ef06c26219e0acae071fceee5b76335855d84ea2f763cd571d9fa4bc08501d8e4e9604b2f561019504da13e65f56885496c17976f28bd4192deb428b2e8aa86c25102e25c2f9cfaad25c68c392d51b49186c4274863d1908811eee9465800fae08107dbba1e381539c89c5797783ec4e46609dbb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a66fb97882930455709af8e3e6ddcde4f1b57be1e1789e5e798553077b36ef0c442b2f02a333bd8f285400ef22f6270629c1fb78c01536930bde3bc1168034a20659573fbc7ac412d910f6b4fdd06df085b9f004c11e3beabb13ead2de9c6be5e9eaace6e7dd7bea8a65fa4b351d5efff8e175ad17e869bd0794727f393ee886c15d7bcafac2e302f165b6243072616c09699803d08af355a625646d34fc0d512f67ba189f3f33003c58d682881b5cf7ee138bf426b57010e19af483d711697188bea17399318cfa707f065ca3174333fd9ff91d4eb4b85d03c090a278c73bccd12f8d54a3534b2d38538bc87599dc02339ca046ec573a1b9298698598dd11ca88bc033ca02c018976f2e24f0f970f635d690c97c0f95431fa34c66aaba986a034bd412d21caf7135af9cf602bdfbd576391e7c7b18dd50874eec53e1e67f9c055bddf3bf9082c2ec5ce95f34e0cfd8206d1c95b6f88e8af3c7c0b6cb58ca7bd2cd322855ae093b7396d3cede750b94d5c064f98f3122efa31d14a505159d10841f4c7034c2ad8a37d14dd62965a7c7dd432f53320f0cdd53cfd10b57dcf1c81a66c0cd504fb10b2cf34002cc009734095b937ada73ff765b882b01608e997f43094d7997213d84521672fbcaf8e2b26eaab8b09dfdf9d6b838a55bdb64739f0daa63416edae415559903f6fa912cd0d011c7bf59b829582c82868c706d3221b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "03bb4cc69e1acbaf67bad7ea9902451a41662ebecdfd1ed0daa2a840d4d20f48c9733b8ce80c523edc49550271453da21e16c35c6ce595d5f38bfbdf4d8ad8ea0ac9c3c275c621ad2822f5b92db3edf8f260de1f86fb274e74f0903455f8b75379cce9e69ee90fd83f9ad35506e853ab8f94d2b83a9f1ec581a8621ac51d25f60e52d76aac88eb1609bbdeea10269a958ad9c89d919d40ea22ac09afdb0feee02d38825e77fc00e79d3cf2381c2293a55abcf7a37752dbffa3fa826f941114f45df2e760c70629501c8f675fb1583c232266c65c5cf1d241f497f9cb7822c2a8cac12e204c7405f3c065d9e2cbb5eceb6dec153db0d0625a1b94740ef6ed4e3b797ba65836f0143f2bf4cda7b0ec743799d0421840781b7dd83e9b6f4163c9a6abdc4df5f88236644c00881809dc557535b9d5ef7e50e3b8669dd900bcb4b839f06720966673ec26e5c1068f871f67eccc03f2f205692a45f083723c53b01f0f744b40dae595be4b32041177a72c5ffc4c5a194c75297c95d1ebae39f2cba882cbbc124ac51fce24e7ba16b458e2cd817c714b5401813d18238a68c2a9a17683a6f38be96fa0b17641fba0450815429529eb5158618a6df4bb4ad62a85ce1c74dddc718cf51eeb44520e7dcd581d55bddc015eb6630fe5892266f8c8dcefca78ff70a6daae614c58faa3922473d0f1b18fd0ba457a487615c2ab8d251c5c0ddc"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2542167fa38862d7dcc21c56e879ede860122f4051d0df8fa7a4075795b07871bf3127363b5661a1b5053001295e6e94ee79884d271dcd4e3a51b4d69772e2b4f1e2f15524b1292984e7de18bf7506b192554998fa2e854ed77a954897b9478e20cab55f8f16e0daaca1523cec9ed24e27712d5cfad0fcc5633470e296c398ec58f9dd5d9bb5288a226aef37a6cf62213e2b90e11ee4e7830d188346cea45d6095a85b672f0479d796296a2bb2bfb593dc915f089a9979be60f42df8c70b0f12dd81ecfdf4c5467aae8dc64cf64fa0320f7b7b6e4c4fb0cb21ad8efcd6bbc633e7bdc1a33bf52e0ab0cc5748be4eaf3aa088df2ac2f171a6238696ebc88e1fc8885563ec9fd7b6caf39ac9f9691d263cc0727cef371330d4e577750331b10279c6102cd83940cd0112cc09faf6919d9ba464959871b430dfa645be3661f071aa80a32238181be5f6f1f81c194536a28a8e13bfee65bafc237940d16ef0639b71301fc29a5c57d18400dbd6fefd8648a5f5189684b422b74bb6733981a1d978ec24701db8ad967ff90252508df4693550a06f2a258d9e13591cf5a39cf47b2f95c21e9786b1c20d970e7b49ff7590fd8d022b9524013a5eeadfb98ec889866ad209819e0ee779e8edd7acde580d213207907a4b5a3b37dc964398b452a2beebc968180648cba1063203572464328240ce7c8ab881f626ebb77d0e8ba76b02083"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5da28920a712eb173a4bebdfb68fab83a76f1b57cd44e0101be050321c548b644dee01c714e6b46cf5709d963e229feddaf377aee3b78c753a3e14330dd8ceedc1a81801c349359f6e5834cef2e733d98293c78d12b9c6d95c9ac782e43ce13c56fbf18786c01559c95c6f6b8b4f2ff380820881e24cb18bc9267815e0ecbfca55921fc7c343f39fa481f8bcfc00598240cea0d1b517e015f2ffe0ca1a916851077da42cf22a2224404a80a65e1e2a976dc8c9009ac3165b3637c0b26040bf852bb4e278625eb6c6053eb404c8edb389becdd46209e3a5ee75c067cead908cef7d07d368098eeae49b3ed7f1f6d335b4a303ae4b210a6eaa427db92f93f9692e4df835bb62b7492a5fefc6e7f7583110aaf7eb77425e930dee54ba00640b1649970b4ec3fc429e8c6c6d3d136e9a4e3f97f581df6519cba0fabb7b3180540921bbea04299fd8b4ede48612f6ae4a9201605048efc0e0ecfc973d94e15ef5caa8356c188bceea7c0808a4bd33511ad127732e2bdbc1a23704925b201e177645cff89860d268cd6db733393efe07bd0baf9e76df9e8efd66a091ec99df1fa263a708f85d053816546943b87ca487dc1b522ce42e55f94cc063b6401f5393e7290a53342545a365cdfbab4dcd56b931c02e70a57acefed75400d7e2c5bb6bcf1894303cd5f5d083200ed872f16b981be53edcd0db7eee3e4120a1254d8e41486bd0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "63d524abf67a5bcee606d6c962db476f34427f4d45aa13546d2c546ac84f30954e3cfead4f00cb2f2c1652f6f59fd5adfda9e49154f3706c21178277148dd2cf542ef66193eff716df749a9409024f77eb59914b34d94427077089da69c5103e21d2df69eea6d4c5c379685280b8b824bcfd646a41752c8d6a0de2cb9f9c0bb86e50f6e368a5645d0f6ae6f6f0c8bd3bf9ea4574ee93b9ded3d32edaf7ab5530bcf8bcf195d228b2afd344f00a0644b4460d4896feaf26e2ca838f435957e4341df21a01f578174cfb0185f577d4eb1e0754a5f68654a5542992ea132bf62b384dc9fa6e81d52906f03872ab04d5a558c23216273145590e11d4b03eb444f5e8921a9174d70a1cb0366eca891add337093ab687f1add01c3573b8ddb2fa33ca5d66dc2c4a384f1996dfdf84a02a3bd0025af3b8618897914b79c9e67a4f8052600a7e5547f758d07c83923bbdad70d657d093e80acc7ddfb1a0c67e85949638cef7aca281363a854ef9001152a70ee74539b8703039d9fcb2954f43f59af7941af5834266d1bd5f25b0a92e7291aafe801538c8a1e906188db482b084829e0a6949dee58da6b00ccb8f10505973971a1a0f865992c556e03770b0f42890a091b1b7a72569fc86ead8fc4d31b8ec584346cc01e05742d46eecf50c00dd472ed5670cb86a337fe56a1db2d12098079fa2639484a075961bc284dd83cb518780077"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9deccce15824e2a3bf7b74b65704f58d9f402f95b4138b371f6711f95318e653ef12428f4daa075bf94e5a39c32f3a469f211d0989ad856b8b0ddb11b4c8c0cf56836231c4c721cc3cfc8c346715181783496cc827061cbfa5d55c82f3c92b342b2f9bdbda4184579bbdd6c7abb575ff1d3521e802d9edc09eb9cb3ef70e28757cd29d11c6412c4ae91a63556639ea372a44938791eac106d03e4015cc89b6fcb7c3c93f2458fc628501071692b14ce1a1542008c8bcded1e7ba97b4298e9b7ad8f202e8a087fea766412327f7b448a4b63d0dad3f41d9311c8197cdf4b0eb36e37dea39925deace179ec73857f034035a0730e61d311aaa6307b1e24d5410af76ea4a98f81335295de6ce15872ed0481b22d5516feeab003280a9adfb535c18e65b506fe259de12387429f91be4149f5df38fe17fe81d648981507125b1e830063d7e470e28f1b0f8ad77ff54faf174e5fd23a55b84749ed3858aeb1dc77b6f84f4839995fa5fa1b2a87bf6c52f2a697b8a64f2c1a66a70962b896b6304b9fc02e05ded8de8b1bb8f95a0de58ff45467333a6006b1b31e6c2bbcc400a67c47f474903259287f99f1983be38e550c44f4396ddc21f23a5333d12a222b3d632ca9640985771653f5c8e054bda3062be73c71f0304258c422602f3eedbc2413e3eb0ebd3e2c104c5d6fef521344fbec852a81c76b4613c0a55ebfbb87d21dbe028"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4d0fa19a3840f48c11c4985202d1b1676b3d962a10b67f9cc9e64d13b5dab7f8a9fc955db466901e0f1534cb16d1b8a200e276ca8d04a5a85286dccb3e621ee97abfd4f7fdab96f10b01ae659216fa81e06aaab26ca8349d8934dfb2f12191efd11d79ddcfe88a7aad25a43c1be8c40173c9a677ea18eb2ce5847cc48565cf5c79768186f030807edcc78a1a318e65ef555aa058d8af8cdbd69bdb574dbdf749c13c233cfefb705f82115fd5483ef90817cfa6a14f7b2b9250b4eff5f8b7be013265de7d979c21c85ff8122df4a0ac03f541cb0058228c0b16b0717146d0f9ca89f734cca017c89a841e0f4a3eccb6c7575753d7e932e391d94cba026af9cb57158f3d8bdb54481ed5a565747eab07325ed117411567447181c49c84eed06abfb9ab8687a6bfc9b952d854f151e5348cf699e5f5c5c9c9d6d438ffdf9e42868e16abe6a8c0add7af9656f929ccfd418dfebb787a920842d844f38920dbca1c268dcfe7d0314ff8f9eda661c809d0d2515ab5763093f63d80d84de83a51abc1049ce7ef0ca057f2b044511461be7bea1bee2050d20cf90b014614c2b5c82dd2183a2c61e8b2262c642c1db48c0f4ccd43969fe7a62df0551d9ccd5ab1665c1aac5e19c09e2d2c67cce8b5f670ac35ca759ded6691a62fdb70866cf77d85341d690f9cfaa56fc45e44021a39e0abe56805ebc6c07220f1269890a0708314206a52"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c31005bb7f52007102849efef2e513572d8dcb41b2d170fcb9eaafd2720662d1ade031f290663b1be6fa781fcbbc08f0e57be91ece7d74df1999f67ac45afdbe36e6d8a2c26347a4f858d6a4326a3afe8c6c71c1d059379f51f42e0e08e2e90abcc17a0c5729dd9e4d3b013abe40137ef0e3ad9b195daadea9f344336c66d7440775bc3f49f42cf80f9a8a4b5ca370b04b95ae26595d344f00e88880bdecff10d54c296cf4a22dc75b873fae7361641e30e60d8f319514a0ed6aea2091db58985cde5bc31fbfcb9d2a712cc5c5d203d48c264822c14a76b05b8686d4d29319946677fd9029cecd225cf1cdc4107066ea56be74dabb449bc4ec9b6c7a3727c36c76be3771e76c9b0fad598e0d2f313dbb3db09cdef5ccea9da18bea70d48dad1671bd6072ec34c290b90b8434ff66e0168a97e69e1bc832f8ee756b23663b1a3a7bc9ae30f79713aaa62553738388c34fb011ea4eea67d7500009304cbf00e0d424e12fd27f9c58fd1cedc3e84ab5653a34298f22bfab8a2e6f910b1b2b602e56fbbb7ab7d239c45c21e379c05a9932c098d5368b3bd3fe28b50729739bc3f882752e556bc42cfb475ec00ed925cd1620a46a55a223da7a707ef97dc2d43eda88360de9694d12a93b988c2d4fbdb784c1474aafcd3017711702bd360975c729ca0090ce081be8989041344a22a23b960d1caf411ee0456f855576f780b40f94df"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7dbf6e8f5c6f790c2d7105335a737e8b328141815ebc92c707f34708e2f78629410c9b36494cdb0ddfadeabf10ae7e484c21e92dede755d5fb041d2c8551eda87b16fd5e5cb02a83c415a43c3e948896da033298a95fef8e5437d29ff0e8f5c5cd29c089d8f08d77fb55446d0526f2b00a3f1c44b85be63d8dac101178e900ae2f4a86a0a4b191f1d92b9f96b0af3d14daad4649c2601b57b3a57b2465ba803b10702af36554f493352971e84ef2ea5f8f71b45293b5d041d7991389b20431ae9cd4b1064f2f2e914d051680f7cb79948ceef2589861a7638e848668af19bb4ac865ba838a37c4ed2132d0cddbc61019952257e854af82dcb55641c1e65d020bab07867e1832bfb5af928853ece158371c49eafa601d6b94d92b8089466ce1209dcb6074161a6845941dca16d8ac6bce783f7686ae89b44a22e5060ef1c29faa84a8bcbec4ba262b55c1f256a871bbdacc36c9112ddb4184a5528b460fd763f91e205c370ad20aca848baf188f790496b3e777524d742e90adc708d134de82324c06ad009c8241ca1bddefc845b2030cc7dd0a50235e6c204a6f445493abfd83fecfbc7fc7d8c748c93d1bc976e78f7bc7e4fec00cb10498706a159c84752837a7fcd01410f408ba9265b81633626b105cd29a8d7a5c8079ad973a4f9b213bba90bef241fbbb37283135d43faaf9824bb5bd8f8b394c2f9bea85904fc058cdad"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "61499af78874b163cb21a91f2760778d88af81f43a2511f4bf9090d1a6107140e9dd260b8e1c1d4dfd5d0f767d08220e7641a46046248aca7fcaedff82c55b5de7a5fc09b9c0dcd868395da2c9d331d23f35b7ed4798676a2492ad21b146bb53b0f3b715a63abd44f7d1dc9f309272c2224593bd1c64c9e33ab63c4d17879951c1e83ac98fcbf0ffcab7807953112da2b481b93dcc698e35642849347d1e3dbfda83637c6561545856786428c4015daa98a85e96202efcd89831ec6e10942a7d4919d26e48c213a20d166a75248bdc16722a8b18e9d92cdbde1ec560c96ecc100767185e8689df5cc199b412047b648585638a37216b2a3d4ab3c42845508e0590c6d78d82f102c4cc713be9bd2e89d75dd7295a6f09495b7cf5af653a97964c7ec3b80df6c06cbcc64a45f5bd2c275a2177a6405cc26a0f25e9b3a91b0ab40c86ac7dfd11018e4265af8deb028010bc26a2dd4ced5a5808e2e51c1239b88b5813d62e894d9a28021ba15804c381cd987bc994de5aa2627d2a185f500e9a8ae28cc17b6f56eeb3667c763a1e5e5f2ca0efd4a84989789c73db111321995591f74ba4099563c2f17f056163a5e67499c2296456647f27c7973d5337281025b2fa5c6b81da804790bcbd2c43e5cb1f84b6c96b18c42613e934bc054f73e3fc24fd09c9e7592a7102f7f708118c5cb107b80a5f44c60d1a514b49ee26b939f2920d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "803558c1238bbbfbc060d2110e8fb4ef7f357a77ae9b62d064ccbfd722398b6ddab10b3a875da406582072cd78a99cc33770983e2dc864c23486cf7ed79ca57cbf28053be0e4c1a8f8a83156dab4971d8ec87d8fc30b6814b4157cdd4bc9011b501fd670be008fe2bbcd4dca0b40cf07e84ef7f5a0fc68005dea593c68b6136d9cf24ce7ed296b702af71355ada34798f812035fabb7b78640594f9d81827e86fe0c90c3e12a0be7a72d3df353cb97f0cb96520ed4490301c2c2a6c0034f1aab114c7064ca324d9d61843a937ea387ef01e519d96abad7016492495ac53491ade5b8a52922639b85759934a3ac3bc947cd117004a248774d4623cab325a8f1e6db2c734c5444f18a4a8515d76072e12a149db38dc71e4e5831e9b95f48bfe351438bb0289e5e0980cbcc4688dae55af01011dfe9a9fc2973a2b82bd05127876a54499f254f08b94874ef16c69ebdd76cbbb80cd47c84c94132762b2c7321c65c63409ba9dca6ec2406f3ab94fa026851b037087466ec9859dae48e7b71fd90fc61857f3b2ddc5da378ccd1ace6883aa8137329c23ec7650541a34ef2ddb4ccca3da70ef45ebdc60b4596835e3d952c67dd6a5d425e84362e1cdd0cba30228055f71625d5d121ce3e6b4dbab5b4c4c947ad7157e2e05d2407b736cea797861c472994d90440c4e77e0164030cb899b4036dc01dc68ea89f078930fb2d05dd72d4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e3ae7de5bf44de7d357e238c8dff063ca713470777ab786b495884e7a9ba1dde65de7d2b5be3f2b7d1830cf6ca8ed5c05d3f094aaaeb1dd2e4b2ede08613109a9ba34c7e2bf8450225974374459f16da2c14192c637985febebbef01f0381e78d0fd63b76038f5e3d35dc7d2243963366af5d7685f1bcfc99dcb91e94c93019068353122edd03cc3e615e17c1bf1dd7c43dae86f47a40238fb594041cebdba25f3fe9593a6c329b7f7c476eab7625d17ba7be7886936b733f8dce6e6c937f588da1315c1117abd29c83895d95988d17f9fd7623960d8e433d7c6841507ff2faac36e0e19a41eb2cccdb2a2c0fae966719a99d203c924349bc0eea1374efd3e23099b2d187922016fd014087520a67363687322b90d7a890d8f4464a8c794d2a3f2070ccd3b0ebbca2b42bbf8eba6f2c0bf8008b5616ee7b81629ebff97a93a5b861989daa10da7c8e3bc7b0cdb095f6ce1185cf8fd3dca035eb3e505cbe022d81d93945a144806b9fe0ba07f3ab9c70e72b5fb77ac6e4c7e03aa2dce7c5ef227aba1acd48c1d93e0e26f01e8f1e43aa97880d15d6c924b060d1face21d03a796c86301f4a74339e472b2f96cd0755741cb9df3535077381ada84d1bc0846a6c44c8a8d3cfe1b7a9913d1f3d7af2c5ea4e67ce0a7ed3c0058206fd13ad9ccad5a8212f3ecd788368a6b6148178c7c5ea8d6d385227f2c76a047216e5e206b1ed0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e3ae7de5bf44de7d357e238c8dff063ca713470777ab786b495884e7a9ba1dde65de7d2b5be3f2b7d1830cf6ca8ed5c05d3f094aaaeb1dd2e4b2ede08613109a9ba34c7e2bf8450225974374459f16da2c14192c637985febebbef01f0381e78d0fd63b76038f5e3d35dc7d2243963366af5d7685f1bcfc99dcb91e94c93019068353122edd03cc3e615e17c1bf1dd7c43dae86f47a40238fb594041cebdba25f3fe9593a6c329b7f7c476eab7625d17ba7be7886936b733f8dce6e6c937f588da1315c1117abd29c83895d95988d17f9fd7623960d8e433d7c6841507ff2faac36e0e19a41eb2cccdb2a2c0fae966719a99d203c924349bc0eea1374efd3e23099b2d187922016fd014087520a67363687322b90d7a890d8f4464a8c794d2a3f2070ccd3b0ebbca2b42bbf8eba6f2c0bf8008b5616ee7b81629ebff97a93a5b861989daa10da7c8e3bc7b0cdb095f6ce1185cf8fd3dca035eb3e505cbe022d81d93945a144806b9fe0ba07f3ab9c70e72b5fb77ac6e4c7e03aa2dce7c5ef227aba1acd48c1d93e0e26f01e8f1e43aa97880d15d6c924b060d1face21d03a796c86301f4a74339e472b2f96cd0755741cb9df3535077381ada84d1bc0846a6c44c8a8d3cfe1b7a9913d1f3d7af2c5ea4e67ce0a7ed3c0058206fd13ad9ccad5a8212f3ecd788368a6b6148178c7c5ea8d6d385227f2c76a047216e5e206b1ed1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b3565368a8c92e80c65d962fb1786bbb873231f742b0f98a5b7bd41e73779502db5682f54bfbfd1156221eb72ba834bd8c95be12e474adc024bf5761028d5444e60cd6f0bed414e0dc59ae68b37e72c3de70bda8597716c4b0f291254afd48c291723190aae9816890cb8f76bd3290c6d1668b0d269e0aa5679f5bb0dfb41e5de3377bac9a8b8bce00d7accdcb35c847a5b084d84c7eb480055e69a3343e9f111f519d32887e05881251239fd70719693d81beb8559e91d2a071b49a032800ce5a9e8ed446ed72067bf8817d0e3299103d75b98df4221d890e9365639fca9d7f8eda6a683a4697892d6dfb638d435df8fb3d488167119ca462f1ee2f8fa34998257b3fb5c31adb42fc0d55a504efccfe553e911332a3431fb02f11659cd2b1624156cee1afa424bc1cf70c626003141f2b16c237f127e534d392f311a83605e7984604444d06654c5d76060582c9a255e33e5573570001100c3d9275a085f57db0062eb77ec41793cb3b46a922315e3b3bfda3ec3f1eefb7093726ea55d0eb18f1166fa734493fc8cffaa78cf61337aafa25c54fda1e21391886c25dc8a8383d67a907d13f55ae262a4474422d796ded9e179dd901730d31cdd95563cecbbabb38256f1ec510d8ebfe43659c323202538e747d39855cd2691916b6e72c48dcb795a106f84c21951b3d5772eb0ede5644588bf76a95f3df1c392d7a97e7c3a4b100"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000092528f459c1bd0775d8c4655fb2fd5e8040f3265bb57fe1ee553c48f34738f3d5ad2ae40d6037f02a23989669e0ee9835f3fc7444213558f2eda9bb9485c3b81d99fe1ae4e26b22cd5ea7268d489d291d4f5e47f5cac8fad31027cc56138d5b55b3e45b05cc858afd6ed92bec181e1176b84ec33f134801aba8620b294b2238165b8182dd30c1831307ec35944e1611469a458ed3eeec14805562f88eba7e952beb9c19a8ec9c6a0c7e2418d0ade519c1675ee3b029bfad20c434ecf2b1105e76592bfb0341380adc413d566e62c9308f59d6ee717d25c5a2887af1c8341127b690156186a7d265fecb99a08421c89c8da829c6e242f561876919b229e73cea2f0694d8bff282231ad9b010e4d1c65483c2acfe70e0d840ab25e5d181ed7ff884f45d48c45934a60ffa6cbeefcff85d4bb3b6187a7d1454a2c08c5fa222715bbfbf707a492ac8fa2a709686acf466966823473d82a7d7366e253a41372fa2200cd4f3cc4d78a4bc2c425a53d1580f0e3ecc17b48bc55a8185688f3362a5ef7cb547ef4524606ad3e317f0d1027059bea88a0ed7fdf44515838e3a03fe059a804534b482801e5b1cc35ee6bbdcd4c6af53899cc97457224b8470cb72c4c41cb180ca639e18d45a9cdb38d27d9a82c04157c70d5ac18b623e79eeb9ff747289b8580257356e7a2488f0811509190aff1c7dfe3e28019f5f861543af0004f897ee7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92528f459c1bd0775d8c4655fb2fd5e8040f3265bb57fe1ee553c48f34738f3d5ad2ae40d6037f02a23989669e0ee9835f3fc7444213558f2eda9bb9485c3b81d99fe1ae4e26b22cd5ea7268d489d291d4f5e47f5cac8fad31027cc56138d5b55b3e45b05cc858afd6ed92bec181e1176b84ec33f134801aba8620b294b2238165b8182dd30c1831307ec35944e1611469a458ed3eeec14805562f88eba7e952beb9c19a8ec9c6a0c7e2418d0ade519c1675ee3b029bfad20c434ecf2b1105e76592bfb0341380adc413d566e62c9308f59d6ee717d25c5a2887af1c8341127b690156186a7d265fecb99a08421c89c8da829c6e242f561876919b229e73cea2f0694d8bff282231ad9b010e4d1c65483c2acfe70e0d840ab25e5d181ed7ff884f45d48c45934a60ffa6cbeefcff85d4bb3b6187a7d1454a2c08c5fa222715bbfbf707a492ac8fa2a709686acf466966823473d82a7d7366e253a41372fa2200cd4f3cc4d78a4bc2c425a53d1580f0e3ecc17b48bc55a8185688f3362a5ef7cb547ef4524606ad3e317f0d1027059bea88a0ed7fdf44515838e3a03fe059a804534b482801e5b1cc35ee6bbdcd4c6af53899cc97457224b8470cb72c4c41cb180ca639e18d45a9cdb38d27d9a82c04157c70d5ac18b623e79eeb9ff747289b8580257356e7a2488f0811509190aff1c7dfe3e28019f5f861543af0004f897ee70000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000092528f459c1bd0775d8c4655fb2fd5e8040f3265bb57fe1ee553c48f34738f3d5ad2ae40d6037f02a23989669e0ee9835f3fc7444213558f2eda9bb9485c3b81d99fe1ae4e26b22cd5ea7268d489d291d4f5e47f5cac8fad31027cc56138d5b55b3e45b05cc858afd6ed92bec181e1176b84ec33f134801aba8620b294b2238165b8182dd30c1831307ec35944e1611469a458ed3eeec14805562f88eba7e952beb9c19a8ec9c6a0c7e2418d0ade519c1675ee3b029bfad20c434ecf2b1105e76592bfb0341380adc413d566e62c9308f59d6ee717d25c5a2887af1c8341127b690156186a7d265fecb99a08421c89c8da829c6e242f561876919b229e73cea2f0694d8bff282231ad9b010e4d1c65483c2acfe70e0d840ab25e5d181ed7ff884f45d48c45934a60ffa6cbeefcff85d4bb3b6187a7d1454a2c08c5fa222715bbfbf707a492ac8fa2a709686acf466966823473d82a7d7366e253a41372fa2200cd4f3cc4d78a4bc2c425a53d1580f0e3ecc17b48bc55a8185688f3362a5ef7cb547ef4524606ad3e317f0d1027059bea88a0ed7fdf44515838e3a03fe059a804534b482801e5b1cc35ee6bbdcd4c6af53899cc97457224b8470cb72c4c41cb180ca639e18d45a9cdb38d27d9a82c04157c70d5ac18b623e79eeb9ff747289b8580257356e7a2488f0811509190aff1c7dfe3e28019f5f861543af0004f89"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "05efbba03b90bda7ba280c6aa2bc8af655c884de2401c9ff9dd59e0d82c8502dca3d90879694692ea2b3e77c6dd3fb0e1f180777b237e462bae0a8b35cc21497c36818a1dc89dfa64bca89cb07babc10ddb98538aee10a4e59b4040c366c8413326e79bc015ca2ebe0a53ee6a4c49f5d9a87bac550e4b6a8173fb49188aeefd28457b594420cf2d77bbc044f6f4f6a7d7ba52d657f5dc6b631ad914bb05bcbf2901293e5eb5a17a88dad2326b508624b698b31d1fa08d00a001db8cba4a9f42bebb0eaba07e87235a883bc719513aa217a36ee016832b12cc4ca0d628598212d5da416af6342855da7d77ba153e5435ed7ea5d04b2459d68c721adeba8c071e979bf89c04a3c8219d67eb514a79b3a2f6926650c55e724b62f800b4f9060110479442e4f8b82ead56330e2374cde8b335552dcfdc3d0f940186192fa9fa6daa8156b1e55005896fe74a3b7164520823e7b7f21611421c281242b37da0ded476903f4b44be8ea35b594a2d97cb0c98a7d2a50123be606c3e3c11b4984c5a55ed01b1848fc54b83f681ceec448dbc4d35d15c389283b26de66c713f05a0d31993ad3e6e1b3aaff06b6f046ab075d93a8ca75c3e5558f8f2a445cf10d5eb813bd6f2754c502c93e81b904d845fb55c9e0810ca7259a012840cb0c85056b0a7e141e8d3a7fa5849da50e157c46164c9c02ffc099f42cffb71368f0ac3dac77b2ceb6"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3b35a042a4791dc1ac1561ad1038750bb9a575a7ff72db2ee60ba027f8994bcbabe41fed36417bd139a286ed0aa6c3ef2868a7251442d060c1cc67d4470c3ab7c307acb0c0641218a45b9cdde05546653850c2168a59f1788cd55dacd40afe38eb941ff08ffa8bbe609f2aa795c73c0368f482d53d691980891ba43b69f5791c2e6f70e17a996a299e60ce1c9d44ebb9f29e700e9ae216df749149f6c222d1e1733953553a792745c382d44f52ff404ed5ee04c41ac8acc97c250f9a5e3cc6d70902d51e8ac000d05e36279d83491dfe6a40f222bc1dfcfa7fa5e0197cf47528f77719e007b65ca39dae17bd0f323b00ee63b66401e2ec5f8917ef600a41c3a61571a4d922c0b0ad0a290ee054ad15e63f1a0cafb749f80cae6cbeb06be62e1608b502182d247bc6a37abe5fd750ead8b7216a35e74b969005309b14be36a31c5e6c2266701d5afdb5ca2314e2f32ae17387d8284ad2c7225fa63ed47e7245a65b74f53a5bd22654b3878ed09b1e5e070bc20eefac6c95b006b8f3e613b19f518c48ee6781a12bd08ad36ba384d03d3ea3c4e0b1facc39741f9ec73d0335d2ee735355955ed12cf8b999d155d389b1a3caebdfbba32c883ef7d0e112d86e6149a3328b63b9385c68fe8a7b679e8436aef7466067a8e8bb49e31675729b3f448e7dd3c048973d2a5f8f7173c4428f3982a99361fa691d1588e39cd4485c450158"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = sha384( m );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA384 signature verification failed", [&]() {
                    assert_rsa_pss_sha384( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA384 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_4096_sha384_mgf1_48_test
    EOSIO_TEST_END // rsa_pss_mgf1_sha384_test

    EOSIO_TEST_BEGIN(rsa_pss_mgf1_sha512_test)
        // NIST FIPS 186-4 test vectors
        // Generated from: 'SigVerPSS_186-3.rsp'
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.1
        // "FIPS186-3 - SigVer RSA PKCS#1 RSASSA-PSS" information for "rsa2_check"
        // Combinations selected: Mod Size 1024 with SHA-512(Salt len: 20); Mod Size 2048 with SHA-512(Salt len: 64) ; Mod Size 3072 with SHA-512(Salt len: 0)
        // Generated on Wed May 18 13:42:19 2011
        {
            // [mod = 1024]
            auto n = "dab9c7d28a2b1e4995c12bcae3c9f580a2dd5372441888dc83aae5b515ebce3b95786c43b5811ebaee6ad90bff9e55ae1edccfc0fcafb4cfc43743749307ec0c36886c88a174d0156a2f88a25a5c594c558bf1a947335b1ab02e77bfeee5ab0cc25455819397f74d30ca31074d4612d9d928b66477ddf7b83c0cf4ee279c9071"_hex;
            auto e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267"_hex;
            auto m = "b80271b3ef26efb5b0ca8e809b61fdd209337ac23fbaa349e84c8900c2fb072b97ba52f76fc1d00004322e1676fcad4140ffbc026b72ccdc01826013c53c63b421adbfd560482b1e1d884489fbd6e06597ac9fa1bbfbc347d5ca4147a72017763f25e1d62a84a718e513fa5f94b63f47f6814a26991c2f924a6c5423d06fcb79"_hex;
            auto s = "2db61ebaca89ecde29a2895f21d61220300f01d117337ba992e0e5a65d6c4a6bd537f6f74e64db2ea45c8892114d2d5450d9b9eb38dece3dadcbe91123a9ef8288e000bd3fc1e140d2499a7fdf44f3382e71d4def1baa6e40d8b70334906f895055295b8f37c779969975c11b79e2184321a883e1abcbc100273187ed1480a70"_hex;
            auto r = true;// Result = P
            auto d = eosio::sha512( (const char*)m.data(), m.size() );
            auto l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267"_hex;
            m = "ca69f73a1e17310789a65561639b2b054aaed69622c4fb345b1d255172cf68c0bb73450f5d1ece179e930ad161b69b6cec449e9cefc2d334c2b3fef7ef0e8dabf0ef7a703a8d73507a6c39171ed446651781b201dd9c5770b4ea34c72f440fbdf2475e04bb4c68daa49aa8dba2db721952cdd96ef53acf11b82a8e683a57371d"_hex;
            s = "b8459c62f5dc848a47e73837c3fb1b5b96c6cedc1cd0e08d5bccb8a0fe4e43ee03180a9457a8db53c16ab994e959bc59d29d3b15749a8e9cf43cbe81d13c3b2e0d55198e0776ddd2915e25f59b17e914888e10809016afa90fe24d6bf9aef635f291f6df2a80b777db31783ffd7148d078ee82ff15b4b83298c728fcfe80f58b"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267"_hex;
            m = "aaa280f51dfd88d1e7c7f08834ca69d75e4743996295858e950b3c5c922013d377d1247551430e36d4aa48805069b57ae07b788ae5110919b27c8896894e52bdc7bcd3195b479bc77c9cb37e9cb831cc974f0aa2316f2813bf61bc5924d0d619ff2c33e82351550d4864d98800fe0654ec8da2ea2ff70906238080ad4bedc66f"_hex;
            s = "570c0eecf611c34433df2f79b602ab96459bfd22a27b4acd07584dad4957af8c322ae98c376312c6b9330e50546a148734219636dd44de74106663e576ea85f8e02d9d03818f42134fc90c78fe94f06c4367e5a6c11357bc3abfd313c40a25986c083210a066985da3653eaf4581912f5396e5bd15eedc2d7fb9bb076ef85c14"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267"_hex;
            m = "512dcdc30e9ae2b6e44a773eaffe62b10050dd2a12de22d100aa385d36c10cd7251bc3a03cc34fb513374032e912dd1550e874452772eed3c9eba67f84b97c7e4d50257ab154c5db0ffdbf4505c0cb61282c4ae1f812d7be13e81fc4a86ff2512f949a5a57946bae40649b7feb50541eefe208066d05051c456a49358a2b97d9"_hex;
            s = "b19f58f4374cc02135eb3aae5303dfd5e54b68ca90daf44e2ffb4dcb65ad49eba624688b7c18987177573ad4299c8cae53fd2ce2aae3515d033673155f1e5849b874f6bb28f691a0b920aadc7cfd5218fa2bbe60513df35f50bf8afa968c7f3a821ed9f185f23d020598d745be5dfa74b4ab25029bd47000637a2868438a6cb6"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267"_hex;
            m = "aae7e01a6e1a1070fb04dbaf97684bd0252aff01eb0715f899844d8887246a723fdedc7d3bce9dc9f02b59600b79d10efa008173ae7c80569f16a93c1193f83996cc3607d55ed95589a22661cde098c996bf859f8100ffbbcf6cf955ad0baad3b99737dfc3308cbdd0518adb650368aa025153adecfb58d02f6f84fae4f44ae5"_hex;
            s = "2935b15fc9d8f8dacf912f828cad15c50e66745e08107bb23c419d7b177940716c04774898be1db3b175daa1cd1014900e7ec64705a1a145789bc3a7a5d2bb5a5956cf66a55b258913193aa44d29a731c33f1b7f04cb9dbc55f351a12ad77796502876fdfe47330d501c52fc87c5fc9d114756ba496a3742d5eb38f8835367c9"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054128d"_hex;
            m = "0c5f5fa28397254fc62d7e2cb124b769873cdfe37f66713d7f7a3432272c6029113d020a57eea15156ba2261b244e91a9b8f41ad4e6dfeafde3a616d34c93b80549f55a1e35f10bee686494dcd587fe0b01b38f9d882a020816c7434decf1eff5eee220c2ed3b8bdfff9ba980949c1e250478c6f268ea1b8f17a362e2e2451ce"_hex;
            s = "2596aabc2978bd62da57c486172a2cf433eb145835059fc035bd42886500156eca00554a989d19b6bcc4f640eb7cb5cb634dae38f59b015a01ffea0504847c643d525b910f61c2718f4cbb076e8af82183661d6c7e06dddfe1579ca2d6dc7e3e056b0ff6e6806fdf419e984018e2a1126820fbe966c52f9d8295a2a9cc9d0e0e"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            n = "881b4401521ea4b72e57a9e3ad152536b2cc0375c5930e9699b8bfc3d16b8c1c3b37de3847438203b6664ee1b00fc7bcd03ec3c240a2cef3f367d8269bdb65cdf4bfbfc56e8fd82cc93ff90c91ce78c402da1c59037997baf56d27abfbfe9d0731b8def029501df0d83bf0fd2234344ec4daee7759969ceb5e24cc00bc12a437"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34d"_hex;
            m = "541b21710c8956949458f4daac99d96f59886119deb5ee78e861c88c092b287767ec8f84b6df5c6963059ec912c727fd4bdee21470706618f37bca93c577bb521237cd692b110f78c43ee22c5f830b080811066543ab9db74306ba135c757aeebbc68228556696491dcc680a7a15ad17f8ec76133eadbedc40ca3f11b56d8bd2"_hex;
            s = "286dafd4c04495f875456be6adcc9109def4903bdf2972abdef455aac0f814bd71144a0cdc87406d4b08de70aeed47073b70b8cc9332b7965d586af2ac4112bc07680aa9641beaea7f5e1e7e6cda80e5958ce7487e388aad7d3027e769ac6be260deb48f7eaea1f30e411088c684d5291618421212ba18461f87371fd171b25b"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34d"_hex;
            m = "de1bc34f15b473167a95e1d754f43d94e8109d9c9fc341ba64561bac4e9a8ed67f3477384c396a9e9efb3e169722cba779fef240c41bdeef9f168a5379b08354f021f011f2afcf1a227e81e07daa896a3d939149fd78adcd1f48e4796bb4edb5f88936c3503d2bf4cfc7b41c4cb4ff43fc78819d920237bdab9332056acf5261"_hex;
            s = "1c6399bf074dab80478afd8cd35b217b9f4f7d10f871dcace4bc47c7afdd37da23b9475c7990f883e95db6e4d0254306ba9e95ca847ef6dec86c6084ae78440c2308f2061a8111bc4df3ee133fcc00dedcf8a30bf5adc7979d37dacba566c22996c06ab107f2bc7a0c05bda7eef7742b4abaebb442c11eb41a9f32f57f1698ff"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34d"_hex;
            m = "810fcfc108d1c958f62f7a243aaa72420befba69dbfb68278682716dd092bf4e0e74830423d3cd34ae1f5a738234ac08573760f3bfc1bd2f5b4089354e9a20c1f213c7d8ca703d0ab85c93f5700c3e0a2d1f6b94a3c892f5342e4e3366136cb495b44146e5f141637baeceb2ed794ed0f66d80516f5610027a1669710147cab0"_hex;
            s = "525206937a5a77259ef4249350f89d92c1c63137e4b191812a35b53a7cb5cca52b5f697fd302e39a9024b009ff6357d998b2416993cb72c5c836b5ba7de736bc8d07020cf9360f7655443a0282c93beb40bb46a4f5ef7b76590433dbde9914d9b9c455f9353da45cd4192feb8cdce2cd46741682162955ac6db834a42d2f92b5"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34d"_hex;
            m = "56f35f42516bfca0dc1d2d727a4fb6bb2bcfba68417c2beb6f07852723fbbc8c15fb7283204b6e0c52934aa53fdf6b6f9ae9378c069b81cb29d04887025ba2cc7d4af3bc456c6231da108ea4e3107c4ec50ed58c74fe4e888ae4671696df58dcb66748b668d3c1599d1e61360fead2a1d5c5fc3234ac786bb9cd489c8491c604"_hex;
            s = "2ce4a58678ab5a9def663e03397756e4e6e345199657e2526c8515ef5c705d3db2775a28c2c65599dd786682170e36d502242837e688fc6020a4239ec7380765724645e97f4795fd0e50c257eb5c5b2f4332f6219231b44b3f5bb4605f45b901dae7af47300bb29478ff22b7405a383b20874564def9f3b470ce46ac6e560d83"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34d"_hex;
            m = "44faf422f16b794a9763181c52dbf3066e43ca91d724142ed0044e33e88a93212ae26d289563ebedcc6ff38a0e9bdad6671032e82832e3d6967f7ec2dfb9cd185247af11ced9227c7b4ba2bdb9ccb216563fb82504e10dae0a2c559b39fc0c4122f162e58614497f0ebdccbd3cb4a24ba2960352527aba3f95d57cc5e09b7825"_hex;
            s = "13db3ff9ab38305903f54095045fd95e687a79e764311af09b3c6a265176099c3547187832a0b0d318b0ce9c58b20b67fbf0a8fdb05a656edb46128aa45e1caff3c60a920c2a500ea0c8cf5eb4bcd9a0fcb5acf7ee33268d351aec6551a73b9f9b10f3c9c0214ab549a71a7e248840b09257be2fe15dcbf5766d13f2ef762c97"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007afd43"_hex;
            m = "83c53e873e548de19a44fa2d46d1db3377b21c0196fb92eb35428cd14800aba0923bf41b5d6224dc6e79439538757c9c50ea2ca721e339d4e111a5ecc42963e86f8769b4af1706346b757685d753b485eb1c8f9514d6009d294dbb51a06e04b302f1c4d99c3bdcf17882b9828b3228f5308f6c53d59c8f50f43cf5894698370a"_hex;
            s = "3c0a78c3f98cf8ec68834879eef97b990a69c670b3cf987d2836263e0b5c33d9207e7521c6794258500a586e309aeadd641ff98f4c55a8d9c925e4bdffce15a31c31a0751db6f99c8945beebb259207e4ddcea646e96c57f565f08e87cf83a6e7c1e54dfb4eba57193b8c066a2c5085874446df40e401def7cbab9390c130c52"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            n = "b0ec8da8b8d87c94443202a94262afd545d9187d5c45111e7b246da630b1aab516133d6d9c8dbc98ac27d09843f452063f2f577c997e56da01f3861e123c842ace49ec71622c3d6cf54d13bb542d9a55a0be0fd79a65c4f72f1539026cae2e48026e3282e24a8c31e3e699deabd41d31461f6a7bd59978dc189077d46f9ee27b"_hex;
            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1eb"_hex;
            m = "537427fc226d46bebf3264621d7aa97b5686a277ee579f745c1e5955c6f4d8150dcb945c09a4db50160372aecfa07f191960a6b2648373e82d1ff892c7cdb73b5ca2c2bc2f61201123ee73658106d86ff62e0f01dbe9dcdeb92eaccd0d197ceb48e1f7451a0adea6f0dcadaebc137c24f4d8238dddf0a1fe0934bf2e1e41f0cf"_hex;
            s = "4ac98f889b20bec85506523c1f6603ef0acea62d294e4f769b3a4be02091c246b186d23e5f22cfee7c3864f19f414c2760b30a725de04ed2bcc93cf871adfc94ac9a1282cca0d3670ea27a7ebc146d3981c6a705fbc7738f96adadf5411b44eb1c41ac19fac996a35a79ad34ec1d6d10ab062bb59d92bd9cdad7500864c6721c"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1eb"_hex;
            m = "3151fcca24364d0fe8733e86e2a6806c6c935a3c27249dcf92aedac8dc76d22ff7742e5cee57711778c92afdcdf36e26b8448504ee6ee48e9eb25b9e495e9098d494ac4ddc4c541f499cdb652638b611b0353090ac125ff1fef8564a78419c57f038dd65951fe06e8377b986947b407579eec1a60a16f540db0931921027deb4"_hex;
            s = "9875f7bb194c63b53a38a06524b2d1300f1b3db33bcbbc6fafed33ed7f49ab2bfb0a4a085bd4e43e43515519aec4f05578bfd9639eeed5c57f4eff0f0fcb4bc1d21ff0d18a671b39808b72b26651c93515ce97358b850840a7fe4c513a05476ee447e464183793f92aeb1a34b8560f590e541c7ebb504f6fa839db5b59a92faf"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1eb"_hex;
            m = "390fb4adb6b1b14c59872d1584b5d1e2378fae4a3efe1923a725b9457944de91a3dc14323314f923c85b4bf14a4f45c3d8dd2c9702aa25ce39b249eb8330fb9874bd79ea59bbb2e5b6f45843f37f357152e4c2db247ff6693d2a5c49a51668f090fa0b5b9070859b0a9b7b90e70e49f58be9999c0b4535fb9ad319e845bfcda1"_hex;
            s = "5df6894b07078bda9a4b3da89c7e92d98d66d3e67381adfb8e1a2ce8cf572069a42d1ebd39cef5bceb399c8e0823d25b594dfaa8bcb270a9281384b62341e91bcd9b25252dec25aee0c71085fc21cad423f65e144eec0d3e9a700b8bf7e92ac06e33ccc70f2bbec5f7e355fe444abb0acef58cf978e10a4a953a6ef0d48214c5"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1eb"_hex;
            m = "5b546a186eb7af3e5c1270c3b97904efbd1189b79b17d9e10f24ba6936af5524a3d3eaa3af52c15a10db6401ae880b3bb2ab5876dfca441225e85ac57306233eceeae108a01f7fb2523dc92d1c6bd9751c21d173a633d023dc0b1ef27e35aa6a0322b710e825d28d48c2070dad2854e526fc5e789958635b5b1470b7fe44d4ef"_hex;
            s = "52119892d0cf2f9d556c9119979ed9d9e49cfcb4d634b951e7dbea750f97c1bcd2b713cde92ae5cb91979711aff3891aed1f514265d0ee7273630fdcde3818cd5ce63494604a89dcc9745d0fff9bfcfdada043ba2e669c9a51121fdc0a7adeaf132476815afb47440f3e47d6508f021938596e61be6a982561855c29447f89ab"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1ddcd"_hex;
            m = "83d4b9b338fda00d34270963c6f35c854ed58ea8fcc7ffb8da3fa3f00d5e61a7586ab86de17ea8563880d0969554d44e614f01a6f8ef341caec9f71c10c2eed06c82723993267b7fdd35c3856ed628c1b840524b41719733a6231b18e1fc3cf6c7052d40d45de02f2b2f2a59d9e122855a8ecabe5eb7f1a6cd35570d087213c2"_hex;
            s = "02908246b1501dba9daf82750fddb095f66ef66e8b26fea97ccdb120a7c9f5ae0faec977b37d2a7c3c4873fe98139d85e2daa02bc9df1213f78c5417552cddf3844952a4295a6babd59822a824fd3404296532a2e8dd004244bf95ad2282319ac07e31afabc092c25bebd23d29d748e60cd6f8c5fc0f365390169b3a8da1e38e"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1eb"_hex;
            m = "3150fcd0fee48e6e623e34a588a99cb5c202bd0ad8bfc863a0305b33ce05f8470e11b7aa504d37c66320dacbc6dd3255bb8eb6499cf0baff72be9ea7c43245e5adcac8bf31486cb9d1fcd23e5d456e420a563a26c536acdcc60ae54b67972bf5370399d74adb1590d45b83c6f6e938c6d8e2b26af8998640c29d99e8603b93be"_hex;
            s = "73e59071308a443d194c43ba89bc5700e0932699b8923a2a8491db20433d90c80289265cfce1cf419b83873bc5adadf42dd26d367819ddfd5110c31e7c1fc7b86f94e782c55023e21694cf05eb08eee9838cb35081847c7472840ece7252c2404d66f173f6c6c74db5f9d247d93f1ed077f37e574804a7dce99c03f393149fb4"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 20;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })


            // [mod = 2048]
            n = "a677525e1a69546a96dc7b112350d5e4864f0f82e999a714fa9f43ac681517d3975910c2d806bb3ee6dbf5dba1d969b38889e113c2da76eef4412a60cbd89faf35b2bdcb0de36a2cb762cd8f2f29aed9982a9ab60886cc8fbfee9b2ae09c88161e9159d4fc833adc4f80e4bf629d5a9551acce7a3938630c2bf9956097642e3bc60ac6522017841b65c7a25197865e697753b08169853681911443a2b25f1b7c4696f946155b2664b67b40878d3b45c3e0d7034d5b5ee6f5ba8fb3cae7797e85789902cf8f9f86ed3ef25ae0736178aae260fe875bfef5bcde9ec05f11e18fc7375edcd4a5533618e6f991dd48aa3062e6031e291dfcdc6e7fc14ec60e539fcb"_hex;
            eeac839"_hex;
            m = "9c3d5d23d2746d15d616bebf3cf720c6e6012a71cae22002f5021a47d0b8636ca3bd201357e132a680fc5dec9b28a9db932d08ae8b3d3a37d7e2ee754b342a69b94fec26b50412289bcf77e6d4095faa545f15a16783d22eae21e18464150174e6db0b837347d440307655d56f0409db307f9773e81cb19282a93c9ca4c3b135"_hex;
            s = "98657fd8163967fa7d263bd45bb890035adbcdd1645fd48b28febfb9b4e15172540e38b7c2f673c40a205fd40b08b60b4b81ed6e236cdf08f0d6b11f50dc74c60dc466ac372e0f467883aa9a398f4aeef87b040e14a51502dd467e8e8dd89812dfaf6b1dc1c2f6c28448af084590c05aec499dd3b148e66f3d71cf75e239db6d21f4074b8bd9a6bde5ca668634bd47953276ff2d0ebbe01afcfe0e381903736d6a6c672a45fba4ee326e342dc5925169517c5f57e9290724576a225ba89cb4dd091f4e6513be10dd4181855bb4045d6ef6437c16d3b5589ef9d6836682711c7d66025ae37b525580f0dfcf3db7fe57d7c6b15777cc41600307e58a1721b6f7bc"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008d8853"_hex;
            m = "7759420c8d1a39ba0e3e1681d9b757fcf30cb40d844f4a71224ff998520e0bb44c761611ff4723a455540fe6b8ef32e3d5a23f8da0206b57987ad2ff4c9616ab1ede493847350dcf1b2ff9b98e813f74f8b68c0615243091501f7f28416c77e174f8a32b6cca3e62e7379ca16455c6d8e3b2651eec45e148d2a4c9ba3978767d"_hex;
            s = "91ce8e921f85de845b9bf7503dc65a328224d15b23e8ea65dc3da6d804fbef196c305e0fba059a7d842c8c0f580860cce77652d4dc779073d6a3b0a92bf2dd3ec6c0618da1485036fd594bd962f7b5a1c61d53f1626912c7e312aa83eb4326288a52437c7387916bcb11084a40c219c84cab2ff66e83143f858647f2dc914da0c7858ba39aa8ad8147ea5c9c52069eb2b2ca941d8a5023748dc401e7664500846c85cadf0287e39b8b8b46794a82bfffa752960ab3b9eaa02530b5903c24aefa108f10aee35b6a8a3cdf8795a182e5c04ed36bb68c18785623b42f0979fff319112e1514cee51db437ee32289f61ded61186c6ed44ad722d18d556821f888221"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ed8853"_hex;
            m = "864f4f5890a03653d08daa83d9e2992fab3393b7ee152d6f7b8ea3ad1ec9c1219a0e0365eef2fbd5d7cbf3a19667d421f3fe46688264191b2583e484d209ebe2975e4603dbd94015e633febaa43c615aa5cc2cbd69fd6ad9db970ae81bcccdbe8026625adebdcfbb04ad12f589c70883c9878fdf2a46e750a4b15f03807a2d5e"_hex;
            s = "245fda2e66d2bab102d0da4098d751650f5ef4738d14dabe866c782009ead9d6d05d43ac0a3014a382d62ac971ee19798f3b8ef49f9bc247fa07b368ac2d0e8a4fb210af5acd87b6b512e135861b30103403304732a10b75c9a149552d1ccf0f9912968c6431398b7d48dff48cc7cb7184e76a0ab94ac9a6b0035b91b3eeb2d1326ebddfc13250224538c143fc0dfa3995926415a658db8e6691504050a1a30e34b21af8d12707bc4454f174385cd84c729e2ddfc5cc9178812059b5da4a1a605a2a81642ccc1bc5cf953965f705673b12c5b46ac8c1a03c1001ae4df1c39cc83cb54b10cb7d33cd5108033c268ceeebba6c6ada92882f46562dc658d3525574"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ed8853"_hex;
            m = "71abf895e56ba8f6ae8d0e9e6690c09c759270a73db8c1aa95d05980793537fbfff3472c8d2c34de4abb7e64d216cc952e798314034197d50996a2dcbf4c33485e0b68910baebf0e50ea29bacd3060372bd47b13526ec04bdc81b90dc95a8ac2743b814cc5b9ef8ca9633628bfa4248b55eb7f2d9208e114f4dac69bfe27e472"_hex;
            s = "243c570cd1bd85522e64817361cbb949c83876d7a3609513aebf506fc06750ba38e820232c98acbe00ffa50b36c538560069fd13992ca0df7d9f6d956b883334f1c3af8a74adeed5be15b033d85b207be2fe600a9902d699ccef1f4a8d588672c446401eb390d174d572b918f9b349e2e704775300023850a534cd14e0046e385181d345a01dbd230c7965fffd71d4e9f9bd274d2ef46c556c7332121362e71706c39f08919efa3a4f2f142150c8cef4b30ef788f6fffc2ed2aca0262eba873a251795845da526b78e2b24d66f21d40d5fcbe5542a7553a9178be5a9805bb53579bd108cff733b37640789318db620a6a94444e9203923ae325500b676b14798"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ed8853"_hex;
            m = "4b648de2e390677ce1727191498b76d2d2438d0ceddf3db502ade5c5fd815bc70965d42f9b8d04eeb38986445fbe7dd580177c00d0f8a36c24740be3efbf656408e6dd73adbd45b4c7196fb86f40da17b29e91bf91ba518b4c68ea18e13fe7d4cf4d71571f0a71f7a58bf59684f8d5bff04096f2380b8e3b03f14909d9e92c3e"_hex;
            s = "277fe81a1540341c9c04fb5d3c8f70c1e72f87fa7d04b93ee54d56d1184c141ec4e125e2e5cfd0acff1055c76697a1c3079c371cce0bd84ee4437bfa1806aa76df2955935331915fff879d87c7372e75e5e8fecc906f9d34a5adc0b75409a87fb6411e2990cd237ac8223f7223444f5d527a115c85b9ba10287f3e825e1dc58eb37c8a9ca055155ff6a5aaa6565690dceef6f647729d071cdd9f0688c7fee8f9293abe658d0e1ef855c86a28d8d0f8f82f72173186353080b84f142f965907377178fc1ea00819d81afc2474becf79e1e3b70c7c2a8407d50795c3131bb6df78720c31b2f8c43f705464d8982043c45f04e339aa1c6f4e26aa7092b3e6261299"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ed8853"_hex;
            m = "7811a407fe653ad2343d83c0499fc11e2951ef0a4791a3cd9a06396be5f72e783cbbca2cc47002babaf09cdeb70194b532ccbfd24691ae8eb598d59f2e6becedcb4296a1debf417eeddb4d74fb217072091a597ddd0893ff02d6ad61105098db2e90508bd4b8bec5d6e7deab9e651dfdb8210532955e1bc788a908d7150ef8ec"_hex;
            s = "3ad1f0faa9a36586154a382a1f2c10e819dc318a68be35f54f95401b0ef2ba5cc895f0d6bde28c8d3b364f60de03ce75a7af29e5807c1eec4cd70624756e2631eb46af010ca8cf93ee7d86a4af3ced5dd2a8a41c1feee6b4572070873939ae7a2ce75193945937461d0064eeba07760c495c5c70bdb04d89951de3f96525f8e44612493d490731e7ef7679a24b0b1e2b24c8003c2f94114e4193d6e54c0af9e870530b008530210ac0b0e4c7c79f379384e1bb319b5f2a0b622517ae5d27f0eaaf7958cb0b41849126075092e86e7e7be5eeacef9a8e3ec595432ef619858fe0d0517871b8b495c01af6f18d4e6d250dbd19280ef4f8a37d1b59a48fa41b831d"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            n = "a93cbcd5c69a8e24b6be4f078652e6c8bf6d516b1316e842d5c8e757e387243c4905b37a66a30967ebc6ed6da56f690f60bec090652ee1926526a78317d41cdff392111fba8a6a91109953fe102c8a51e56b3b6f8087dc53e38d57ac31cd7bbc46f6d14bdf488852db296de27200d11dcd067d776af73c10cd044636aa4d9ea5609c75691aa164eb8abe0f187c0286dfa4d1f5f4332e7664c3c572671b757667e221cc2f0a3944926331ef73bcfc58d1ef8595a2bffd240f2397c4bcb69826ec26fadb3a154e58e86fea883d516d21cde6c162ab55fad9c52df547ef0e6b946d368daa97585084e43a32e029908910c6f99b4131c3961d0543fd583608e8a3e3"_hex;
            eb3f"_hex;
            m = "bdd8719841159aba3f353440ef98efa92cc503da8d00745bd12094c3809bc971cfe3907dc4f5c2ee9c2e172e6a61e8bb0028391e1277f62199777d3d76915d5258c85d9bdf4dc1e0024dc8edae0e7944af3a9f0fd47b13584e47397c5afecddd2032e0d8da451df7383a516703c52bac02a440931a325168b83ad16a7409a27c"_hex;
            s = "2e7b28803bbf9d58be8219ace68c020a42a4b42e59c2c2e0faf56ca17f7c6f3a427688f124481308e249e4d579f576dae5743bae68b349f4d04bfc21d60a969b965827a67025bd8220603763cde90a42b4308f2c84bc2c4c8fd5de0efda349e9cad1f47140d01fd27021ddfe16873067213636ad961cc85d79a87231e1019ac4bedf9630e2c31f4b413d98ffeee53fd46ca6d62449e86fe7692b59feb18bd9296291d1bda77bb9c7cbf15bce21aff1c6f1ed9cc95a87378b13eed54d7b54835160f88f7ec710c87eec07c2239b7001bcd4a8428a1a274d1c78d89c2153c46f4ec997df9a19838813cef1381dcaf97bccac39739a3142aad21a966da1be5c471c"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f"_hex;
            m = "3858011a054c52e3b659066f55f219dd58464bfb22b8c55dcc90ffac24f0e141f60929f28b8e0c2c7069204378ae790504cd1295820b6f77343381e73388ca6fb3ffc2b888ab78a1ea797c8e751dfd02734c2f715e2cef4fa109aa6d9f497b85f6a29314058ade67acefe4f95229edfc2d2d6836bd038d0e9a7a42e7701a3bac"_hex;
            s = "311e1025e0a8820a5ddc4f632628bac218baa94fb32c709ff70db3ecb3a1957e31513fdbcf15d83927f5840584af5ed90b350833f50cbeb718b12c56fc260b41ef627776bf1c0a67f39be26cb0045e6c2b60216338a085cd867bc5d9e744a27ff77baea199eeb669a2e0096256d081b2313f3b79ed180712ef56a0b549eb299b96029fd93e4f68bee5a0e6c8ee44ddbb06b8843fd4365cbabb229d2f8f2a9881974adb406e6ffb39eba8f20da38b558d0069f45f91c85debf6872a4ff36d5a79284050faf42b78b1770b176c88b7fabaca9111e511dc73a2bacb30abc3a841bb5b0f0b844e756dbfd3f5db458c47861df00b085a06e07ab4e788a080483ccbe4"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f"_hex;
            m = "6883a018b48af70d2875a7f5cbb5a303d7338b6d76f988c3cd2f787f394a4bddd880aced4c7fe4e6bb5efcbd1ad422f6aca84fbbc568262bd45e1ef4a0c0e324d227fa3cb442a48638cc06a93cbb867b0cbb781629dafa2e49851ca29eb345505b60d22e753dff97a6a60be2b8d49739005450a829b7cd75338cbab0ba8b370a"_hex;
            s = "15be3fb200858d24ddb7586470ffe706eb299da157880a68aae79ff20aa92eca298eec75ac4ada285ecabb10479fa593ee72c585aba707f45599de0dc792c6e3390da5729ae5506100b31c617ee12445093a7593bbcd0e5a155fb9a41cf332c9d65b0d8f077fb417f027eaf728c5c326bddd7be7bf3e69a165c57759337105b94623ee203641ed2bf58f1907e3413b00e08d54a10bb645175449f02da9366b11952364c0328fff018723c30625836a0cdc7a13c220428d03efd625fce63f022b59508fc68ed4d16294111fc391052705ec115da4ead8caf5c50af586ba4dbe1b29d04452f947b5fe9e16a798f5d00094dfe2ba910e6449bd52d3f938c045ca9b"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eddb5"_hex;
            m = "20075fe0b26832c234a861a77078a8e9a42be3862ac4d0d058541566a68385620e6c9fd4b9ae5770d7bf1a83cf840c2c981f94c866091aae8a600f1d93822e72bada029e7dfaa9d889ead78fddc01ea32d716cd484e7d57b2e549278d5c54a6beafa91274775af6312d1a2b3e45566b72ac97392cc88889e0dd7a75fb37560b5"_hex;
            s = "9166e91b18c8518760131ea0eeecc443023b61148a1d42030ed09d509d4c02cd0068142fdbc6e56073a68f5a942c0c93a7f90882f160522ea005f4afd34453c8c1b1d3a4e5204d0f9b797bc00b84d0dd96e311394f089567e45ecd0c795be010e7fb24e46a2842e8c7dae9d2c760fa09e20a29a623e6c53e3c436d809032b99ac4a81e63ba95a356f86a62dd6abbb0aac1d0759e44ccbfe225f5d206aba8dc7261daa9451ee1ba04de1172ad80c08f0709d2012ad8ffc8c5152508bc1e18ab53cde79ca50da9eee9b3b5229d38015f7e18f03612ad6270727be16fec06a5d9230ece777ff6936a3ae8f3a631e3e13f930256c3903d963ece49c5a10b5a6da47a"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f"_hex;
            m = "46c4bea2eae66ba40f3a6223a28a9756d7c980ea6e4976e2342e5fa1cc238a45af4bda37727a270048a6e15fc798f698efe7f60e682776140b5eb201a4b77682f67b3e35003c9c737f54da6db48ee07a672259af2ce712b1e5c4a2c788675033233a31c31d9391a3be2c9475f1d21da34961eff443ef135ecb48791c019be200"_hex;
            s = "85f33d22d92f3e4f31c5fc0f17df916ec770903445f73536bef61966918efd0b380b9933d2864dfa10f5613d8a232412e5b3db44717eb576fc180891800c5d11597d2d09e477d0392740d700408f3482da6f8d9bac4da6faa220ca3cfd2287f5ed8654bb8dc8ac45e09e52e93bc78d8cb4e08d76e15cfa78c51852c93d31d64417c29aa7e22411746c280e3e275f71c4742faa0cece8e540d1b8bc393db120fc14244a2577650b514c73dd1e5391da76aaad375f56a3cb4e0ca942bbbb542213b5a38445cde0dd9eed4f7515c6c58251dc94c25f7dd929d714b2060da252584af84b82013f924fa91700d92523d69c96e0b0f68203a977affa92574cb241c0c4"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000452b3f"_hex;
            m = "25e9e6c39ee6f5c455d81f868713362929cd68ae87300aac2bae94440095ec56b7e3e7f56a5b0d197fd89c94d0e2d048087f6296504b4e1a2ccbda959fffd42a96361bce842661fa493c2ea25831286b19de93198c5114463020ba5a23fd3eb78a8b8a34337179cd79acde996829c7fc2293031d816ae19afe553b7bd2b9b365"_hex;
            s = "2e0b30ae35777c9f951b22740fccb88fdfa94e7d139c9eb105be1a1ce542f6efdf4eb3d1ab0b2342f8e354a0878e31f0bdec1eb67ed19491a086065af7e5188ed0b95e0dc88812f66d6c726fd672e03652432f85a9fe4766a7c315c0c695fc37c45ff5441d3177c4181f01c243ad3c9614e4c6f4f8b879ca8167a7790aca6b34c74936cba58e64cc4e32ffc8ad6c09c48ac59f1eb18dd11871ffccae98c465abd5885bddf59dcec5ddb31ce4ecd86bf6af207373a912b2717e726ce9ff555f3502e8cb83e287cf0f7c938cd4b26f075fd50e4127555ade94c974a4cf604ea5c5d9e94ce91fcb9a2bfc8743c06e69ca41ef029881c3d64078cc6311c694dee627"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            n = "9d19bc62c9c1989df660e259e9c3b1fb805cff7546d2ea5a479d29ccc4e18f1ffc4f78a9af924e04001850d3c56a91c8738f047ae12c89fab3dec2ed1dd7a207ae635f587c101fbd2c542e86726f7f72aa47497162dffad87eb321426e8929afaedf4a94c132ffb2966c22aaca737550feada9f92c07c2095739c3ee524be18c1a34dfbd2e210868c7c25a2fa222c65353dd28008ceb10a570206a59d2a23b22cfd9f38daa0db78c4843bfe1ed1a366dc128ab4d5dd45a28586ca4c8b0ffdd90759028ae29eab9c56cb0da94ec13d3d9fa69333c6065f3ec4c6392259e1c2f761eed8f8aca57354c76c2a0aa6b9045e5182a95ebd332494d642ef07c1e3617d7"_hex;
            eaf8e8f"_hex;
            m = "e74ded82964ff874c9e10540c9f1dedaccb376b882e61f33eb5afd316bafbb01205f7c8673ff1598edc179a74d3e74a1d7729d16ee08869be5d8356c13afd855254eb4d2b8b55f7528a12f88a253f2f48193df61d7f5cd9f495ba34421bb10979e227cad8ef93ed21f880f2bf3b8be99721d26df64335e08bfe82f03bd5bcb91"_hex;
            s = "23cfae518dad78ff6540e64f54ecb571ae4fa33fcc57732d8555cd25b44b46f46eeb109f91af7d08c89e16f4cf6aa119cd9633515c55ab3fad64c8932417ca945be3e26028b752bca8851567da6408e211df8fa215a8ec07fb6faac5cff26d174a1b5b7fec9ab12c128489c4ccaea60c1347b8451bce07ccc9c21e90c2e5dcbea4a292c16d60ba66ca4e5ffd6c9cc3b8ce4ebe39df418573e0e9f42ae09875a11050a434538790c5c700b5adbbf700db2a93f3e5ac4c570f8543f0a1c1d664f29d161b064a0892db495b68da2454eb983db0fb3defb0f688b67c8506c20dc7997e0bb51854a85af613a3b9a0ca3e746f3d8393b62106c58f8ececb502824c478"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eaf8e8f"_hex;
            m = "19dc8b8a9da18dcb3cdcd54fe19fb766a8635ede3904bf27550dcfb5ae36f4a6fc2bbaa54d8fc80e9c411252a6de509ef987aeb74ee4c5291868caa05dd70596c506852ef1e313600db46457a9a49317c47bce632aad4fde01968d709e04b4eb9df653ef30a3550bb7be332491f9681b32c824aa7667448f351e82ed18c4e9ef"_hex;
            s = "694678413019405b4650f73897387df0a9a0744c345e52c02dbbc7d0083c71e0304d0d8cb47e08ac78ca34bcac209679671a036e1262285bddcf8d65082d8f49db6637bc2711f2ffcbebc84b0a96f581bd2de0e53ca24c715e416cb4f4da2eb4a4d0df893895910cfa4c346ee002f35792cfc066f25f048934b911dc748ecc88f709ba96f320b3f4ac84b740d7ecd32af63a833612a6b153e06f082e25b195fb0498e57c0e284ae03fdb27124f3af34b468ec03c8f9e2e4182a8d0d18f10221f79c13715be8ca77ce322f81f7555a57fe2e759f280d2a095d33ccc89ae1629b6386014df1215bc21cd8385548b1a149f57f2cf8487a6867a1bce842240050763"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            eaf8e8f"_hex;
            m = "d122c9b539021a26f4e66a823f29791780a879da291b1858dea5baf0daa906408fe0a5dd8ca84647a49fe61c4d714e8b46eedd0c7d60874e2f1b1e715155d0762f38f2f45336fc0ca89dd49edf6b4fbd1263f561a760045c78eab8903007ca5ef85336625453425d4707bc72bebe83962c2e494271c4966a003910b34166fbe1"_hex;
            s = "57619bb864865b005fae1cb334fc5e60a23cb148e722a781b1da7e822b849b93fc502927ce9d72bf8d2f809ca6afaaf268133a7820ccb1e6c5e8a7252f67f41c8c67f97d19c718b15c32a2fd4a98c69ea535b37d6a1c884409603c80e1aac8ca32c48ad5481ab56a02526a8f37b884f15585a4989f0a7c7f3afb20718f143c4d49fdafdd33944445d39bf857f8c03e4132b1a00d52064f60172b44b67919610f2b69fdb7a51b69087915f76a2a0896fe53103c81c27d00b8c805b42d2adbd31b21d1773bc1f96b3d5f9352f224cf1ab93c18cef97134fb3cafbda7b8e4c301981ac4027486d74d1308c234f84a13cdf0e505d02c3f1f2b8e9984d6b2fdbe0400"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eaf8e8f"_hex;
            m = "fa0e2ee8d953ee3589be814638512966d3d5e1b4ca874079170f9fb87db17e070dc7249eef6f86ae5f816af4f6c4cc8d2b61810c19971aca83b10b7d15350d0cec5fc0a259cd9502e27ceb1a8af378da53beeb46001ecfca1fffb3ce472a888b9fbc4a1d9fd7e3d91b974ce07d48f5f452d6678b08842822f5e1ded49cf9b82b"_hex;
            s = "2fba3258af60a9c026bacaaba33076b21789358f63d709e4b2374c7e010a3f13d77d71aa6a70a116eda22a652706ede6234e71bb688c32697087a0c12c422e98cd6ea530ad7adf9e293c5eda311578cf0cd6b2cb32c9342f5e2e2f3fd8b27fd8b9bd7beffac03adf6148e72d9775c27ef90aa232f49bed02af05a0d1567817116a9abc0b81ffb02816ec6bac841e559fbdd7c2e41df9e4b66f76729fefc844d6dd6a879441fb212d4c065ebe6af9365fb2ff053433aca778d3a667c901dfd7dc35bc2518640a79aaeca1270646464ca55b872017a51cff49b56b53f70324168da72b0b5a297b790c89b1f71fa7937eb1e514d77f33284765b66608010c324013"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eaf8e8f"_hex;
            m = "e25750b83c69e4e14cd31a1f366d7f97134201535b3601fe9deca9e874e68051b6ee3be3eeb5d7800dbbe43e5c6e24b0b5965468f3f04ab9a71940c20dae70a73eb2e122a630803bb9217253e28fa967bcfbb59385fdddd5d02a6f14793a5461de6be77c4c20089ab8ce6b65b01836459139ccdef9a3e3da7fe5dde8a2d25504"_hex;
            s = "5c3ff26414d2af68f316f7646fe4740d571d7d08a4553c250b6abf0187c2ccf16ede3ba33acf57e28b20ecfcd0c77815d280c08ef4bc76aeba9012939bb53a5c932ccada6323d8de5b00439032b0fb57c77e64423a50d480d9364356e0b3b841cc8a61bbff8f235aa8247c4df7ac1a31faa85a855c76109cc0a8baff6b46feffa65ad576eb2ecf1713baef88cbf8a9d939558f95677e749045a06b8da3fddca07b8c6e25499c8d2dc6f2e152b75a9a85af85db7c84152291bb03a6ecd65a1a0209d8291cca9db5648acebeae1faeaf488c49183b0433d74833812ddd35ca6b483a9f24845f10c11a18152c9d3c8ce5209ec4d8c10c5960cc5889950428e557e3"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            efd7a0b"_hex;
            m = "2288961b2d0b66e75dfe4079804a7f99cd9735db1bb50721513a3f611e6d1ca8ea636c5f0c685dce3da191de4cef70231415c219ac1e7daeddf9db01d967b06a2917fbbae80ebbc42f4d041cd0ae511e47101c32edb3ac4f6fe52fbe7fdf0821c9ea6ab329c626d11b4bc1ba7351ca934ece6aae483e3d0bef48601f789eccd5"_hex;
            s = "394ecbdd1159193f00fcabfe13f1ebad7d74c0fa954dfe2fcea5203b54c93e02960490f51c155da452cb451aa012f15f27c9ed603014eb88b714cd3232b0b08caad1e18f80cfb81345a18c4419b88a429a4f69c72149e96acb7f4463deca7105938d51f2a9169297e2462dcf4eac45208bc509cc3e85feac0e51b3bb32974ee82fbd23b3e2dc06da6e7f64f917d00befb181b264101de55cd90a86e0fdb27b3e9e8ffb458b39b1718e20da779408de3abc05f98e196f5f92f4dc22b34a39c28aaed5d44ba5fc8a50fbcc355bbeada239bb664f2d8e32fd53a0f8a0ca081276c32cb61c74fa9523b1d3f6a795dacab8363680ef62a2a964f66e3f5c0ef5d663d0"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 64;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })


            // [mod = 3072]
            n = "99a5c8d094a5f917034667a0408b7ecfcaacc3f9784444e21773c3461ec355f0d0f52a5db0568a71d388696788ef66ae7340c6b28dbf925fe83557986575f79cca69217221397ed5808a26f7e7e714c93235f914d45c4a9af4619b20f511ad644bd3412dfdf0ff717f7aac746f310bfa9a141ac3dbf01c1fc74febd197938419c262293505c35f402f9053ad13c51a5960ecde55ec829e953f941af733e58705913767e7a7200d1d09e7e7e2d269fa29a558bb16304b059f13f4ca560a8101fe3720b4a779ec126427326caa132a3d3611d7dbc50336fac789ec406b397e1e36d7daf9b624bf639c82b859288747690c730c980b2f5a239dd95ad5389a2ec90c5778604713710383ae55d4d28c06d4ac26f0d1231f1d6762c8e0d918118156bc637760daea184746b8dcf6f61db274a7ddceaa074937ababad4549b97ab992494a807208abd789823f5d75c4b994089c8072cfc254e0d8202fd896476e96ad9d309a0e8e7301282f07eb2ae8edefb7dbbe13b96e8b4024c6b84de0a05e150285"_hex;
            ea649"_hex;
            m = "4d44665e0e2987cf7dd1e9d6200151f500ea3b85a24f72fb38e5dd6919ff9c486f6a54742f96c6784ff7a70c33ababdc685de48b94694af8ad419bc06a0f6504f79c606ced70026b813b4ec5fc73ed4f6b3f7ff697943303379d959e6561a8904fa0354d2ffd62317d63860a62a13cd77157b7cf921655a53ec3760bf23c8e75"_hex;
            s = "4f48e51a041e40a029d586cb7afd7ec11031f86d7bee58fc13a9227dd209f1d7becf3209cd43055e93165f04f23276d46b0b64669b88c2ba54ad6bcb5e9da81810014e140ed0a14234b1fc0fa4cfa4f258a7b5cf73a336534f37580a3830875f3119092e4854fa80d87833f7e9627ab51e056a8deff3a451e8aad78335816b53ae0d899b0607403bf08e8c32e1cf0baa8fe0d78d1b8d72f85f17c1c5b8870cec499497b42de982408fbadbe3b45a13b4b5371ce2a4d9600b7d14011625cbe73a79313954f4f3ec0b3bf6dc945297325e3aaf5bc89a27670f5b2536a54caea3bc6641ae628a9a4da61de749661a93b6ae68722d10d7902b391f9e9ebf3ab9c186017b52eac6fd442a256fe7c9500165e3c7a402aa0174e6b6f35e4e12e35a9d429b21f6cc98eba73c80ed8ac33acd79488e620b274923e78ce5d91a6196ca59054fa77cd67e0d3fc04d71b94b0cda5478f1b3d69150f40927c1ab392036583609d8efda3fe48643ef2f75f1164ea7f25589b5bbb560c9a042408f85944ca08f92"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ea649"_hex;
            m = "1abca8d81cc98a5d5020e95080b5fce59ffe70dcff544802c49de7fa99286b3da1d83d60b085e696bc9f25758e143efdbd7494d6dd547ad9f4f047d22d14a884d13c3bee72fa59cd6a98336284fe2075f8d7359a9df017b35ae00db6ddee59b1902fc90bc9ef890c42523b9fc83b4957376d7ab1a5f1c499deb7622f118026ca"_hex;
            s = "85e15765a401c10d86acf3a05fab14e05487b793569ae680f77d20c25b1763d184634fa0b01d979dce9d803670d7f9f6adcd59476fb1c8c3aae512f94a9ccf6e573aee6a28c0dcfd2dae8522685f03ecec8c045036d1cb054a086454a28326d5319bc7004bc87c7566a56852558f583a38a4e7e7be7981dcf3ec41c12345f845409792ed87b3f1b8fc89c288a2968e73273a36f2b67258fc67e888608566a23a6a5645328f1edd8c105993b486eb3335232212a1dcfd5da40fb3902fd2cfa86e8588eb3c40df8d9edf3c41934ce91b50c0d5ca1a3840ca40e3c841b39520cb5e5654af3961ec9408d22edb345027eea7119dd552656342e316c60c5f5da028308b031bacc74d1fdd6907bc6944fb856082cb14f12cb509ca4efb516ed0c60896771b478442026913e61a32611dde1a8807f2e1cb76d0c0c69c705beb8fe713e848cc03b1ef8965267cfc3ebd43f0001b33b9e9ad418ee0d592f184d202331d4b51a96a17b014d47138f28caa39d9dfbda60894956d0c043e4292877f044b55a2"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ea649"_hex;
            m = "2085e8b946d2059752f8f0fee528e7c4cc0ac1fa24532c1ec29a3a92d2681c4dbd8e2dd151bb325d1c4ddf6318689e3c8e458d1b34cdc5409867e26ec20ec09e15a682f57790d9f4b27c83ef197e11c06e65eebc03489de620614263a51e642ef076f10d017a82c4dc2ce1882f93c9b6350fecc5daeb3a7a2031615ac1c29065"_hex;
            s = "65bd57d4a37495d54eec7f6321f7101a4643d9432a2afc8eaa147fb29e7ab1106eb31a6ea7ae3b48e40de63cc368e7a6df4c998259c59ce40b8ac2f8763bee9192417d2020cbe179bba8aee9be8971466f5e53b3f82004ab6aa529d08545bd894435d8dceeb3a8e905916bbdb015bff65e9e792a88e1c8449f411edacba504cd0730605dc83fee64f8dd17f577075694402f1862790d9629f9fa8ac3ab4ee341dd3979eb1715c4f742fbd89ba3b90565ea4587438562493f611d5ac9989fd405a01d23b13469a2a7a85b0047483a665ce3899a412107cacc11087cb2607ba9d04091c418247242cd8d819ae17e49a21bc4f966ac3d37d2a61a8bfeede0f2ef2da3aa32bc38abb6a16a4475e9672c4aaa31d2e8277f3dd9663f3960f16c01998d50a99bcc681ea02b137555af2cdd28ea43281588066bc55c8f7aab45dedfa2f6befb5b13911cb9cec2b3fb07bc00b2dacaff8237201d3ebeac575083011624b4be018379514dec97209faa29b1f93fda75f0770f3c73e700a2e48453067c909e"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ea649"_hex;
            m = "cc21593a6a0f737e2970b7c07984b070d761726296a07e24e056e68ff846b29cc1548179843d74dcee86479858b2c16e4cb84f2544b4ecdcb4dd43a04bb7183a768ae44a2712bf9ad47883acc2812f958306890ebea408c92eb4f001ed7dbf55f3a9c8d6d9f61e5fe32eb3253e59c18e863169478cd69b9155c335db66016f96"_hex;
            s = "0aa572a6845b870b8909a683bb7e6e7616f77beff28746116d8bc4b7335546b51e8006ed0fc9a0d66f63ce0b9ebf792d7efd4305d7624d545400a5fd6a06b78f174b86803f7cd1cc93e3a97286f0ea590e40ff26195aa219fe1510a016785223606d9311a16c59a8fe4a6da6ecd0c1d7775039290c2aaa17ed1eb1b54374f7e572db13cca3a638575f8004aa54a2fa98422fc07e43ad3a20dd93001493442677d883914dc74ec1cbebbbd3d2b6bad4666d91457b69b46a1a61f21298f1a67942ec86c876322dd366ed167814e9c8fc9040c5b4b7a859bbd880cb6bc241b9e327ce779e0783b1cf445e0b2f5771b3f5822a1364391c154dc506fff1fb9d9a35f80199a6b30b4b92b92619a40e21aea19284015863c44866c61ed904a7ad19ee04d966c0aae390636243565581ff20bd6e3cfb6e31f5afba964b311dc2d023a21998c8dd50ca453699190bd467429e2f88ace29c4d1da4da61aac1eda2380230aa8dbb63c75a3c1ec04da3a1f880c9c747acdb74a8395af58f5f044015ccaf6e94"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a45b6b"_hex;
            m = "a589c8788c959961fef98694bbfeffce5d69071899ad969ac25f3cb48eea084b1d84a8613761d1e9d626e2d9e4a0c48045b6141a189c84a23a4a7ee70c2d0be2771cf4472d8d275a31095b0499ddf7269313302da6a072e73adf02955b3ee141ba38f351f483605d178a3b3e631d62674d67a579ca212a11c9060fe40187520f"_hex;
            s = "062418750845d3291e633e47406480e32fa2980275f2e4ac79d284ad83ed11190e7b85bfd6ed9bcff63345582fccd88a578941abb987d2dcb549a0ac2ed5fe7ce8257bb1e6288155fff3dc9bc1140f2777a84575986360d076605e655c9d73f9bf010a437eb7b280d6108374ce8da4c702f66a9d1d01b141c6a698729d0fcdb0631b21578dded721ef5c490812266cf6f01270a8c6c2f08466c9b3c626c0f1edeb5b4fb32e958a4a388c6c6e73b53a506137354358bd00bbd2058c9c12790410a45f4348754844b357c4e17fb38c8cac87a6be3cd06a08943db0e8b867d473e7d3581ed2a32d25d7b45eecf8fea10d0ade1c888591c71fc86abd1446fadca2881de87a6d05566c5000c1e075b0c1c5481ffb6e982a3f8f44fa8ad0b6a92f1cdedd9c38d326a6efad9d0359a69af42034b7a4ac388f9c7d356edf4d6e4550addecc7192242b3b1fc4164602919d3411ed43e2b394867bf840ea61750bac4f1b72d28af35eb0b3aaf6eed654d1de883240c0e2234ea2ddf6f8934cdcacea802e26"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ea649"_hex;
            m = "70a4a898028568699ccd8a53288a747851884db2971ab17aa116a909d422dabc242efcbd2a428ee0777ac8cb294fd25abc17334222cf8cf4151986c4ac81094a2c04af0821d3784eae54bf5b226a6cc5cbf66c1b0f9e5ec8b8cd8f3a90fa29442e2ea7c10fc08c7be963554b3b64ac81292cde85870c8fbf343aadb5a916a273"_hex;
            s = "078843b04c9855e60b0965970e3485a8517033efb57b773150483e7d79a549d217159fc194c78d1d7eb872ade231d1c95dafcb7d5292d7b113a99567f492cd846f88cdc1d035a04ae6a5ef28a8673387a2479c3e0c5a1204bf13602b49097fd4bec16284566c36e45ea3963567f36daee1ee86697137cb258258b5c318926fed505cd6784ccc95de4edc2034e64521276f9055824479b4abd51a7315e81e204dc00f4b077f26ea0a7256bcfb0edf88624c4e3a059914b75ddfcf945c5620eb6b06b3011e4babc26857bdd9bb065dfde515c37eaa6ad83590537566680ad1d776067827288c80497b76c489cb39762dc1997faa41086b1e377d3c9cb29e4599dea3b123d850463ed20087fa744a5481a4537a6252aea0bc18b2bc962deb589ae53a88239eac7e7906f4b16e68c0e7de2478c4e4da869008a65455c691547b16a9d964fe0faaac4abb22309e0753408e22a8668c0e96681f0fedf3adebd7c3c6ea0b452e07a6d94d9437e8b03e7b26203aff7c1706b58a20568642a8719b9838f0"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            n = "b43d4a446de45aa8f336b93a4c5923f3a5386ef8dd1e94c42300de0880e9bd0828fb32e36e4c50cbf666037a8f2e05f45773896c10aea975b3dbf4c4cdfc24a038c5c06d361baf84c38fc22c03a36b9dce38e090111d9c1323d7a77d3e04b713faf740965a9e1883ee3775489ab514ce480786f9eb741c60ab896a9d6eae3a53ed9268768c21f79e30759e0b01ab7fa224ea8229c293780058f258e9226d7374ac425ef1d2b6e06e5b263df0c6d66c00ed26cbf246a5af0a0163336886ef8d929b37749a08f0ec1db05973a8afc81778b6cc9106f92b1453f1528697b1dc8dd0b255e801060fe179b2d10a9c4c3e13f3c56fa6d55166f6461af4aaf4f4168fd5ea6dadedaa3f9f1de4de993d8844357c0af79a090ecc80570c641545beb42a1248a52de612f2e0f8834496331a7354f7eb91a1943b5cb3b6cf198451735fb554922f04f009a52a15d99369adc2e46b09bb871f4f3ec1905acd792b8c81a3d74b316ff9d20b93f48817ae618677dc9451f582ec9995f44552f4244953cde83f11"_hex;
            effb"_hex;
            m = "aafe2e086cd97ad052b192e43eb18861ed6e2a27cf6e7d7f16e767020dc8acb6acfd1c7969ef0aa3504bffe75605b07aeb9c2e77ce9f5d832570a7adcd48f197ef7bcedbd4fef3a8fa26ecac67b20d373d0caa9d8fcc8bdc737e9a7e58a5dfc19a00aef6540b1f2776c9bffc17c185df0c46085fb9fceed22798a83f57e75d7b"_hex;
            s = "2b6dcd7b7b261f67e950ce9ccafa8675e2cb70f971917d557bfe8fe87f81f4370a04e0b05bcb96e599483c18c3a4ab39dbd1b74098461fcd050139fc8ed16a62ab95c3aba51e23e03ad615990450bbc60bab43c1b8f4b965b0d6ba86b0600cb360acde39b9958e12700ae7a9236efff9ac5f43a44f7ba0110b4ea1dd9993a5b6fc5e748ea2e4085db6fd486061a56925d705f3ab1340149d7133c02075330f9e8ba591b361da737a69c5a5ff7267eedd23c1a5cd450c339dc93f72c6fdba6dba2efd896f1436b8840422c15b932ab9699296596250097aba06f69e6c5a3e4337e9c7a52cc3d80ad07eec1591d5270f32e6cbf633cbc37924c041696c2ee60463087d0d29346e2c3f8eb86021dd8b37b5bc3fa3078afb5105aa6b648fd6b73a3defbd4f35e14276891b5c6f9fa1394b9a0ef14cc1a6227c7bf682bda835f8b6b6d8e9c8ea7c0d5ca3213427f8dd8c91c0096d5c64df2f8e0484bbee604d41b009fe43262083edd5479df5a491034452df9f5111623d87413b50ddbe7c5b0e948f"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098ffb"_hex;
            m = "32aabc83e58c61f89b6812528be8e61b9e9d381526e6fa36cd144bf1cbcb4cb75dab30be72309301a7d70d88758306e9a91ecc0f1583e23a869c9c47f6c7e832027f6fd99e38dd02078a7ca0f99208522396bf2dd8e7b7bb070c74436d1cba4b096ca05cd06ae605a3c988227edf935ff24b38f7d5da1fc238acfe6e9992690c"_hex;
            s = "61a6f61268a512a0304fc5bd13cb236d7415793cc35593f0d523296c9d7ecdb8209165757ec37db671cbd2de9ffb35aa24262a8cd7d60f52975ea64162beb6a14b0c6379fd11c246098f01b32fd46cf5f23356fddb33a7ca2690d92c70f5dc87dff321bb0b33b5e3fa7254954d45ec8deab369807683f07c6e03853c3482841aec307e53eb798b23c31f2570cee10340becae99e980d12f5d95298a09e3c4d3e9d557e3811a125aa41e8c9051aa0930441a5ceec751e1d73a37373b15cfd142b65164fb923b05b55f8d643a38648d54186b5c21fb785ab7f899b3615c8a003d4a37651238ff0e4a598661a79739005f7755ffea700a70bae33b0ec8c3b63064aca6ba4ac029e2d7964193f187ea84f964900acb3700e72ae6e40ab2af3886bc5a1b935959e95c338f9948a749c8e2d8abb91deef6b89fb21877b4a84a27402d98718e32ee051655e78533e928ad45f9adaaf3b12d9bf987955cb68ce67ffc7abb8670b80abb91d7e41ed85672fb8ee2aa54cf1e642839c7199b251bc1a887e06"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            effb"_hex;
            m = "1a943837eb6a0bfc1f7ff310c143ef836d6c2ddf59eb2bb9941e1c8590478dafdf3d48e73a6178bcc7d40f6c9ce765fa7fd32182efab5dca698e0519e421804c9e3c93261ae482e8697a7821aa3128c8cdc6b5889c6bcf5bfb04205a6e95e6d4ddfbe19d94db6fa88ed9f6d8f30a8214dfabaf9a6513ca95d4e633f1388c056e"_hex;
            s = "1f105915ef819f8a2464f76f02f389a2a299dc8a0a5ed7028681a6414e3b75efb80c06d8a64cbd843afa275e49b57b320ea1c65b776db4bb41dce07dd7f4afb653e3e0b814d678c481a83e74e18ec1f6b2933470c98e7e5b12ba594a9412a52393165cc2d570724b9280d20795b0a4eea2025bbb02bee259b842d1f8e315dd94857855b37dfd498c64035de39435a17235d45233e4637b7b6d3fdf295ccfb82133ef2d97d8b1edf12e4ab4ec12950180e80f2f2e43acc2942e34b15bf70515be21004e2f5b4f2e272cafe84cdef2941036a23ee99fb141f6fb70d8c09b461b503632bafe36a9a61ce7a148e4d3e29468c1a47b174c2befdf47b00d2a271699cb723fb0833ca94fae4d1b5c3633f4ab1277f16ff4ebededba2eae21f1b545ae74384d85d0cd5567e3d8e7cd89d03df9834ff544b21dd0b99d9dc35cfdfc9c116903316225e303198f18bcba8b8480a586f452bfa4d57ae7d6768dd72ccb96849805291bf9d03052895cc6367ce97fef83363e8e8e6123b14a9be0698ff42e6222"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            effb"_hex;
            m = "dddb05cb9bf10c14e7dd1e9f3b3d2b329a17f31676281011d2783794a432bb347db3525e6be11c471fbee1234b3d9b974e543470135290953673ce3a69b1cb5717dee85947f00e17c29cef0778268eb2207701651f70752aab7e74f6306e6324f2834f22f5c6e96b1a9eceb58aa00c6b57a8e25d6129c8b777c1af2fbf118a83"_hex;
            s = "11107c6da7a76dba8ce8de3d5c90c6bccaf33fb9a7ec4d40a97fbcdebaf6e65c095b67dfa171c54a3364a6ded718e1bebbb497d15f1de133b58297e08c1b200f8466579cb8e9c3dbe5f724282e5bb28570a41d8d35ad6e131eb2a1d329d8b08d10faf76fdbe74217a276936b1593b1d3a11891d18641c0bee0c37e68bf75add9e7dcf3b9b4413fa3ec90676038161f68fe3af64d69a16fc22c8ea7c06f86bcbba6679b6fa45858c87ec2da8896920dfd77fd16d953e984624203cc2178d220fa47ba9a6ddbe759db3dc4224c7ccb09b29e200722a745d3329209323a082a3f7a2c624b4053fa42183dd22b7f49c4569f8c3d49515753b993ef8122c36985e96a3289af8d6e22934bbcf7551b1570923158d1b554c13f4fe08faff4898be92f6e66ff74a80b13703e0d2665db715c559e68bead6f6b7593f02efbd68c676256ae8695a51dab90e32986697f4ede076628176ca6b651918d749fd01a16a87adaad4aae93b8c05d92565ec68217aaab967623da3e5a5095642cc17d730a6d959cfa"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            effb"_hex;
            m = "0b03b1950e6974afd60ed2ef4d40b3274e825b24c327a4df0a208af79e13ed5ff3ad9354a1386d93c5701bc8a492b14992b7bc04136080b73f52845f6ba451f205167650c0a4cf77f15b07f7396c5ca7657fa29592498b43956125109a4fa4f40ae66270b3d524c523789f6554f43ba78f8216be8a0b4cecd4f676f3723e70cd"_hex;
            s = "5cfef1fe1cb83d283a0f55ff2a3005b5c0b6626696de1b2e4033b6fbd69ab4990bd5d696d82b4418d7a996ff4c47dda4031bea00bc24d7cf866295668b340664c0479b9084001ed293cfa845cc4c7f57b0279c47fbc9f8702ae11e1cf6daa9e2c73e80b4fd14987b08ae56d77ab30a1a223d9220b7e1a43d3d2a5bd83833167074756f9513a2b74c6458c5e74c25ca56165a10eccaee5443e1e370c44714c3d9a3bfe653d8222dd633c3128eceead38f36f4141657f5edbd469a5ff0733828e6c4cd35d50c8903ff5d70136a83e7186135069d962ebafc9d0280553ac62d221e116f77734e20914536dc5e367d8d3188f3f4e45d80970c606461321a4136ea0365324d989a1beb81600afe219cd18429a0931e15475e6d35e04b1dfa2aa605fd3dd98345f57109528d45d60239e50442889fb8fbdc3c61c9c6c40ea0e531ea1e09a20216ea87d4c5d7f16669b46be9665308532328e62d2c50028c0ebba52b14d66a4bd0849a5413a0a7fbd770015ec0e38215898c1662a0d1a5eddfafe67c0e"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            ebe93"_hex;
            m = "cfecd702ac5ea7606bd75b26b2746b7b5db330e92085a40e6ea56a949a270e633d548d14d7b518a9b96e157c22ce6776a823ef81d9d3524023a8fdfdf16c67e317b6966d7003e51ec5080473f147401643e1055424aba1d1fa834a7a4ce563bc26b9fbf3bf6f9726594e31f1690980c2f8947a4949351829bcde59f4f2ba8956"_hex;
            s = "1b94c923251a32c3cfe4dbfbc78e577aa9953d6f47e38a8d3e844a985d60eabd69696f968d5a9f476baf15b2d1b1febc95a2dd133a870b14d67a3cae49b3d473afc3ace7f0b2884da88494c426b9adcd1b40d5efc409622788faec52a6825a1325e922bde9d1be6de33e1ac05ad9ac5d222980696226fbbe191581b030a82219c951c25114ea4412b53aa411a107927c03084b986ecacc7c2f36df1817228060737c58bfc3823f7d16630949b186c195cc34f1bc829dcafdc6c735affc008412b96e9f279474e515fbfc598886fbf622e5367235c4617daca77f2cd1d5644ce32cd2a7104501391685ad7cd82e0d21bf085f58dd3cb1d11005f2adb0e9f962b65526cb39fe1f34acc2d1932bea55bded8690826c8fe817511a850e7aa8fedb9b1a83cb2b05b58b302c0b9feadf2621c1412c789d2ca5dec04d028797781843c19c4b8e7ecfaf14dd46fe4c4375a9138fb058e47bcfdcf18c563a0d54170283c8bb2f0ed2b801e28afebebcce9e1f9b707bd1fd67a534db9d9ac61087415d2b1d"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            n = "a3f2235ad2053b4c83fa38f8284ed805421621fe98845fb01b689f5b82b32511b6d16173e7b40a66a3a999c189beb9e06822150ac8be677186370c823b5277d909de07564e281cca2f13873d9d07b7bd85a2b9ac66f4ce4f5e38b8e9eebec04c8caf311e375d69e80851d559b8e90e85ba6b96476790f727c25aa8163062ec8543fcc7759be62c7768ecc37f340bb06102762bf0441ca1aa2c7a81bf37dc8b27439d3abba93812c9bb44fe4d6a94baae709379f5ce5d0c8f81d00086b9caa3026819588f491b525807899cdab33d8e992150d2b105d3aab615217c6a3d740831c7dc76faabd9c9b9817ead0b494566de1433fff5ba4604c6b8446f6fc35e746aff84ff8bd7500410d10e82bf4c9036489de47dee9a327a5c4510d8561321b91d55559a4cba85e0c361767084b25217e8a63c4e151a1e88689feecffd16fa0a65ae41d2babca99cf1b959c3c076c0f75974146f2cc494126fbecad4217b9aaa00f169fa512527ff5a0b50da46d6be870ecef2af7a1e6c4556f6f7a0a00b9f47cb"_hex;
            e = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3f57f"_hex;
            m = "31e3e05d7a984db4da8696db9bdefba791358c70fdd8330db060f4ff748674eda738b85129ec30707934f48f1a924d643c8e77cb9807a5ba9cc74677c85a8708581f19ec239f3408c31edce4f6706317440e2f00e269bdb7d77ee6435dab610e8ac18a962f5a6164016dd642f61f44a9f2dc3b79a3a782eca9ae5ccdfb220be5"_hex;
            s = "4fc3232b033b22a8406ab979cf0bb66175b523285eb8425d2e80113b2bd28f8f364a6487304650789c3ec0f2e1ecbd0c919ae8d46c604534aee503dda653ed94582c93abf67417412080871e193faca2ab5be8944663415475f3fcf6086592418b6b845d5f6281943b19dd68c0a3526b39d8d225a97c5705b7b9d2afffdc2351dd95dee2eace1aaa8bd9643fab8e764d6a7c66499f74c944f10afbfdbd901b385388696d536fc9ca5b68b933784f646773e99ec2bf312883fdeb9ecc3d6e46094d87802cf11deb8e8293ec1ba76711a4b49db5d2a443324783cd4fa001b92a46f7aae084bddb30af4d23c6ec6faa9003def5dd59d00c225ba1212ad0b58fec5b251200ae135345ef141106d3265d9e8019a426f652b91ec32c8658869aa10044997f22f24fa101d088379d60d64830f7948a0bfe1c348b90b28dee91bc501556cc1dac0d050fbdd2efef2538fa4f182d7908ff754ab84c238d16a9b10b0140e7298b026b4830ce14f3caf9e72daf32a6a785360816c70989834691133c7a918a"_hex;
            r = false;// Result = F (4 - Format of the EM is incorrect - hash moved to left )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f57f"_hex;
            m = "691c263b523e54312dad47dddcce9bfb7275a61a9ab5fd0736f73a89454afd4e0afa31266b64916f97086ad0ebe0a22b17f1f9cc7c1f8fe7d945a7412785aa2dc1dd6fbac8fbb92bc65301a7916e7632738543dc874e10386616cb100310a857d4ed665f33acd54d03b495c9962020face5a0ab183eb88e42591305fa392ffb6"_hex;
            s = "0c42f7dfb0a5b5d439d505310f148a0721670d81c806bb50bec20d941dbdfa12980b2326984169ca4a3943ececd9b1527dccedcaefeb5cf739e0112ab9410396e3692163fe2a74fb8d530c8d805575e101b4ddfcfd7f14a8ed95074a516a1ccb0190345a79ae0e83934cf09cd1617ca471e10de6bf512ccb5cbf9a87ffb65f032422dece63dfc0247f54c9752b2e966c904cc203362d3f680fda66b17f761571b2984cece2f4575064b47d78afe8d683554da1f132e8bf707f850f97310cafafdf374835188983bcdb3493ec1479aa26fe12b504a32a8e9b31a1fc821fdcc8b7a2c6405d189cf7f644e5f47bed54c0f1b03ceac14b19f13a25ccf4c779a052989a9e966dcacf29ee5efe93e1dcd5fee4521faac968652353e5ad9e0ff2d4622e98cf7fde4800ef00981d76dfdb953ea9c599a1c07611876d11ce94e9a421cfef3aec08145703c2e6a878112959696ea54effd9c3819d0f6fc6d722a26ba044d16cc93359e4b6df565b43c354abd105a638aa1e1d6cc7fc9300165c57b41cdbe2"_hex;
            r = false;// Result = F (1 - Message changed)
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f57f"_hex;
            m = "be2f3e1dc8a3711570401bd535185426944d094e8481a12a438de07d54760c88c99d4fdbbe355d6a26fa56e3ca20ee3f8e8acb98f63d2f3aea14d6fcb6b522d155c3759aef56de3ea0a8f9fd7b111001cf358636a87c765c99c2975bb95063d6ec0b780264ec3eb967b0caca52d10294deb402d3a224bfb9d9ffea41662f18c0"_hex;
            s = "787cdd6e1d4fdf9a0d9f965eb85725232a9efcc12abfa1ef25a81e0983111d9000d494fc7d3201eb3bba327302727f7086147a755b4827030c7276536f425593ab2e9127a149e754de7ad77f8c2043267db49f8a35031d83f13d140d5df4d424b47454041a23b92ff6818e749d65d01fc50bebf69152f3f5fcb4873b1036219e22b1e74f8368c8c501ce65f2c929d90a8ec899630e802547a7ca6ef18ab3cb3eb4a691ee68aebeaf1b9c055ad12218039cf480cd8d294332c5e16ebbe6af11f8f4bf49f9b4ed2f511126ae780a3b784be8f4426abd17f8600074483f2af3b71a8964c6e0fa00049a1d940d34cc08839e0c59253d99e90d17871d489674695663626166d36ff91d8c2299a2f051eae2d60e8ed0bc3fac1e490b470c12f3d697f6fbfd880de2e90e9fcbd485fa3393198372fb01e4cec5c15917ecdd42e57c43ecf55a8c0ecbdcef1bce4e36d96d46b112570b53f82f3d2064b08ac78613670a28ea69d79c717eb1c294090dbd561fa6e504d09d265724e37a2dc6f445f6f528c9"_hex;
            r = true;// Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

            eb3f57f"_hex;
            m = "be0f5c666c1d2c480ab93ab82e2c7d5d347ab87e9937ff72a59b77574dd95d0757ad4a48bf34b5435a01b938b96d186f502e8172d72c0e79f19011260c1d107288c30ee81b710c11742cd02f1e5ee52da870e3d7039af1472bfa879f09e479fe997a31ac487c3b98a061080526a6eb8083666815e32baec29b04622c0ed79e91"_hex;
            s = "64e703378e5e73cbe26a01ea4b21e926501266d634a83b2542985d3405202f38504917cd42363969d5f65bc7a1db79dd1f91c49407be518aa77843d14fbe7ee49715ef4457c32eec47f03020209b761ef1be6a12f489030ae585214a7a9429e60618eedf82eab01e3d7b39de7e220540812e1b6d0b88d200699c17387c1deb893c3012f4a340bb86fb353825f772efc4afa625784aeba437d2cf4a09e1dccb7e224385b03a40be52557005ed9023c0aec390f551de23d590cacb7c3b5efeb6c878b44524613bf5293fd5cce9e486c2552be609993dd15582df09aff677813ff5d2c2a8c55460912107818b29ed76601ad999902a461b06c85da91376893b9dfbcd8d50e135ba39a4c1daf2c610f0efc8717842d40caf59bd2f51fef7962d1a936a3a31705febaaedf94083748f2f3cf3fd2ed498490b8e6b20823f7ab78c8fbf518945d426cdca11e4b3e6a8e5c15bb3f932d60e0eceea2c3e6bc72255a4ff248203b02e268794b09cbfe4891b3383ff7e845c26a01fc9c4ecacd267ab186a4c"_hex;
            r = false;// Result = F (3 - Signature changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eaad"_hex;
            m = "dd1ac9357850544f391febbba214bc7b034f30e99b2229ee00db8974c1ddf31e49f6d53606eca6e7cb596cac73b98208c8c29878a3f4fba6547017df430d3ac7d8a99a4b99bd9ad8923449cafa7e2b2813e03d8e520e336ac0fb046ba0f0a83752dc205d77ebb88a565989ff7f894142ad512714f19859a40d2458021eadc7d6"_hex;
            s = "087210ce149329791f3509b67df8ce6fd0f75b86500780f9b16f451b8179d8aa69bf64416ac5c7cfc0695a775fa30aa6183fac051642e4e8383e8a2dfd8a93523e1de54478489caf0b35efab456123b771db81c734ddd3545c971b5a85663c9dae8970fc15752b843e3ab11d1a660cb8d4f63ba5a0c8ad3e7e2f21f7d70c5cf9753607698022e7f379dcd5fa5c4d7c66a71efd3f845567c360f704bd3679633310066a20050c056c8ac025f7721573a94dc91dab73c4f9b4d74ec24114d35b806562ccab94d598e46d2e915282a6b84eb9d545304dbc72f67957b6391a3b4e779a8db79d2f69316b28046b41c6f7a3fa1756d85e6c74f45a86aa17b2ba0d57d5548fdeafd33c9b8308d12c49ba913fa1d01178b83b7c99abcba31b3b92a014343ee67dbbb15d63f165495973fbd7769346f4b4a82a573a0ad36a8ba55de22bf595d368c3807d22828bc5da051a5ae469729e0d3f1fc9ce94d1d754703ee90fc9a7683ad88a2392241cf508fb6dc485652b8d8bf6dbdea987ecdf71948345d771"_hex;
            r = false;// Result = F (2 - Public Key e changed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            eb3f57f"_hex;
            m = "bf8cec246224e055e794d2f3f3fb3b1f77982a3f8f2544f4aa66094dec01593ad090364312f5cb79ccedadaddfe962e1941920fc83c9d6c2b4f0710205065811cb173878bc1607ea0d734379d7ef7b09bfb01104d6903e4fbebb567d0f794e43f8487b2c2a2e9c8ef14d1bbda4b8907e408587bf5024838510ef4325d10143b7"_hex;
            s = "92579093d53403c964f045fb794065964cf98f2dc9236347bf5a757342a546443ec4e7c885f930e1d4691073a50bfbfaf7fb71ee7c8f7981ab009924c1573f6b92bfd66f36e22d5de5e707d87247ef2422270b772474699ae77d771c4a94caaca81d123380aa09e447f1384af3d8ee076ba0592a9b0d5e550a16a9a63482a09ca95425a05eb7c02d3727f2eb64e7f74b03668209e1a32b722d36e8b4614451b22576b4645f23ad95392a01d36f30e55958648bc6f7245479f949821985d66936c173fa5a9f0d772ccfffad1610f8247a2e598f5f7ccc258579ae46beadb94e7b8f558594f2f546aa3177247ebefcfc99f306fce40066b3d72900cb312be0a58062c36d1b2d6a47673b8599b4fae469865059b6e38e1d6f0c069df61268d38d885dfa42d0dfc9659bad6637fe76865f509cd3b2abab37d571aedc5068be59af0f7678ffa1406ee263e76265723fd4db14acf7ec1bef3bdce0db1a976e30f5f4a36e65a2e8b3ce8bc9e6df970af5b149a1d30958c7ef79802a6728ef1b0ad47d79"_hex;
            r = false;// Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
            d = eosio::sha512( (const char*)m.data(), m.size() );
            l = 0;
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })

            // Test verification fails when salt len is not provided
            REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e), d, s,
                    "RSA PSS MGF1 SHA512 signature verification failed"
                );
            })
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_4096_sha512_mgf1_32_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_4096_sha512_mgf1_32_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9rc5
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(32U);
            {
                auto m = ""_hex;
                auto s = "8d4444ab233739c9d1441e99cb4f71581ed78fb996ba1257fffcd9e3c74ff60d6be352f002f959ff66bc6ed0c987a070097e5d57d8bd89b4452a9d2ca121eb6a283e8d0ef6f5f67875b6cbb8f04e6d242900d73d5bd7b59de4b9466ccbe53874ed422610e411fe3e026f47e47b8686b9c891c7226b4ca560a840e1734eb4f6fe877e559c9a9299dbbcaeebaf7eecfce6fe43ffbc483514fa3aabd6959e5aaa3977e23a9f97edf406d396e96c3c830164b10abc680bbaa6d99d19765d7c7e77946ef6ae240b5fef0249e7062792b15c8f9157da95971afb315c9c015c74a2e79ea2d0cc46992704872c340781f052b4b2cb5ded8f5cadd9b5e3edce128ef2354bd0411074d6515251f5231453bd530222f730ec736a86f721744267ba52652289ff6a207a5a7c45c20ec451948d6bd7b10f1af7282afed9f5df43e4a0d0f2e8fc6d3dd3130d4ff6fbc11f0ea460089856df29d1b7b111095754a7de9bc03029c6c397b6994674775fd29cd22ffb03dcd90c51096b18a6c174f2b48d50e94856f5a22adae64915d69c5528dac0345017c24e8aba401c6e9a0a268057a0fea237dbf0c88906796eea0d1bc3c2347cfcd812217e26015825e9f0fac404c22c26272443ccaf30b294c7c467497ee561a2a5f6d219973cffde9aed8e4486faa3de3d17405445e2f78a768dcac1efd01596486c2495f5bb1f830a4984041e03a7bcd77a"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "3a58fc64a234dbd7be958d7c34abcba7d780ca636c4f2b2bb7fd3d4e4faaea0e17226c85debf8dc9b1a79e152a3bd83b13f43b1e92be81b37e908d04b717251e32a2d49e2cb5f2e7dc18e74cf9fcf0c0e246d473f76c79c3d50e878a2f89bc4eb6ecdda96c166d6a825a1df569d11384a78d7052782ace5878c41361f148c54528288088716f935d3e5b5d556a0fc9b62c0de31d9ddf4893f82365111043ad7fca010d1fe9187bde48f78cf465657e184857451d64564a16a166743870033e64125ca3f20ba80c065b259666871fcfcf71e711aa34cb70ad9a2ac6051fc02c96149d4e3c1741c4d44663ee0b49e1ba60a80b4c2d389ce3ba953d68bec835432bfe170429951f82ff51f408aff052c934d51526117b3d57ed1f2a912b37cacdb5a980d30d223d79faee7948c5f4986c1df5ed42923a3f4342da02a41872db49aa09d2d48c3b3e1cca7114a9a34e76b747ae6c99141c9f856e41d98456b3fde7d26bf842d6a421b3d4cceda4da1aa4d1298b624159a1c83b6fe5cb89982eba5e7d6005489d39233f156817c00c04511b98463696f8b6b3962ca3f4ef76b37300dda1d368c237250baa057e38658882f482d024c26163dc1fdac29904bc6424130837b8928f764bc939f006913ab1e968c85016dd812dba264520e6380872587265d827557eeac6498db8137dd2ae029fd83250ab7dcd764d018ca05ac9db8f95e2"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "54657374"_hex;
                s = "7c838ba65f923660aa4ac47465eb1df4df51d6fa2be26389757de8c6dfc7746aa5164d909b69b7c04758d256e13e3520e77e75b4094d8b0d60da0030b9c991969f6e892ff03ffba9b9f95ca991a279e7cded611a2879e6e6602f411a122c8d11cd333de5d2f7f367e38ee0491380e8796e113487ec7bc05ec1b1261aff871ef82cdd12f4e3d8f239cd49b2f53d57255dfe6ef29038831cdebe9cb1a76dc9ed79578e129b063724ccb3c7b3269f5dd3d9669a405582255cb56b1efe6d61a376df3a141014c3d660b66f9d1b266b5fd3c5472534df778e6e022a8f5a6cab501dde611e07c0c8eb5718962692e8e3773bfd25f1d3b63a20a251ef0c296f01f4a17814e18dfc029f2ed0ce073e83777cff44471f9348434fcc12b0420bf2de1c9018f0282ee21f09302b178f8c772c8f8962f6a29291c63532e1ae9301e7ac55781876965f425619a92559f33737d5e11b282f9434e27d9b27eb2fb0fce4e3e90ca9eaafef170644b00e512537bd779fd2207ee73020aaec07e6cd44103a14940c9499b013c42440d2f27a3def34f3509cd8631db1cc8633ac15180272c824369e1d3c8a6cdca511748361cb60e022173f95ad06e7c79d59e03934854a9f9827f3593d87c34d3fc44beec58e107d454ce04b55c96effce612aef0e5d55c31e367c9fc0166f2c9d450e86d79323d4da8fb409f97adc7af2ec6772ab290f622fe1fa61"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "4a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea144143"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "4d657373616765"_hex;
                s = "3d90ff4e36188b451116227e189a71734571b72cc6fe53dec4eec59e67e98111e96fcd906509fade9922f2de6a13a4faa23c7efaadde6dfd0acf150541eca973c7e38a49c597d741e99ef7575b6e2c8de0974bc868a5567f0890052c4df54d12198ea09a12bdb2b6ffc14a1d874e165ed12caab58b28aee171fa7f1839e36e23ecdee2633616791179084eaf98cc23d2f6ff479df0ba46ed933beedf07cc0cad4dea0f0b48f4a063488ac67519e1fb83c7b7e86e3644b0846383ecbb1b1189743036b271fbf121e2199601a3ffa8e8cab00a6b9b5527d62dc2a398e4a42c1e5a62f8aae35b629755119c54cba5e860b421845f9b4422f20d896abfa962ece5d116f7d4170db8dd0784b7625ab2a384c7d424c69901f59d03b144241f8f6556da8e3bfe07c17eae91c50ef2c53e71072c3ff16e642cf126feab904e09a2febebd282a2540389bb60b145cb332658d6a69e03a0a8419eec0f204d6e592e04df01b92f58236989b6b92eb0344255914c25dcd0a611c9fb77e435e2ef9bbe3c74efe144171ca95d1bb7de814f76be54cdd8c11db8af8d20af4451a4dd3b62387bac37cb79755afe91d0d9a2163d299ff61ee4fc4d5267eb8c5252371b0a83dea738f6383e085e992b3567ae170780f3b83e15d895ad4ea668a6304f10f0914ca3b2900fab1364c8b352dfa8d5a3993d5628f4d2264c412210798c18aa2ed6aee516c"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "61"_hex;
                s = "07440a61252a8906a9264ff58cebad6217ad710833105369b7a858216f1d5a5f5dedbe3eb8128b34dc0f0243faacb64034d21b656a278abb26ced174f76a22637b755b768564db6ed4e4fba0d5784a22be30d088fa965307430982f84476907d55435ca3d4abdbf689e76f2d4b78d99bcc742e0b757b897c4fdb13d15c5057e6816e32c3e294a947374c998550173cc657ce33f9fcc18b2d14e1b448acaaef683ff84b086f545a05414589b1c23210290ed5ebbc25af614129212d3853ff728ec01128d37c4268975ef870a1e4fa00c3c98b39c3110c2c11af10333e25db027448fa8f219a7dca7c8bfb490912bd5040f1f348b2fb437a8a9f407ab7e8af1c6e29594f557f2e03fe74e4fbfd2f935e68ed824a510fc39bb4be0a2e091feb265fd2d7a33d2f238e70b153700f5bd5046aad7a6fc02a5e23dc36f67278fdb904d05f2efd0cabe9e4baf4e16af0f7ba9edad706d67c67221ca0630238d6f688174d66c1b152f8f921e2c6c08a19e870eab76a77371b42458dff1c36b0ae97b811e900f6c09e792c89644448f1d0b97b53b9818d1d8f3d7a37bcb1bd3e3a5bc022039f00a0ef7de19657c4c9e06daa2ecec2de30db3b7b84107bb74e164956eb26edc9bcc57e5e1c4ed875b02f0545383602faf9525f094c72f682995d4e2d71d03e11134495f637a3b1b022153689751b63521b1a16b3c3e269a2499a4be1aff9b8"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "2686029fb11cd033724e57dc1835da4f9321eef330747c3500a4893586429ebf02cb4424ee5a0b91a70eb35cb05ef60cf6b3635d4f2ef5eb647f398fd44f67fcd2969b629a7c54f1094f9827f9f27457509730f50c9ecd2dc83bd13f1268d93f0f61c29c5c27eb821c68edcdf1b01f79d1f261dd7f2f283db197ab56cae0ea3b3c1cfaf3fbd4c1ed1f6d313f0b919e5fddcb97b23f0bf64e36bdb6f7cce8ad9cf362953e66c644f8b8b64bddff1e850298f5531f121e6821a393f9658237280c2a53c7c658319bc7d38f93f2d7723ef6728008843f89f61f7ecf5949a2cce6a9fd9dbbc501ef25a53ca02486b61a5de0130149d9d246925f26e1a9a74287439592a4554a872ceca53e54d1c1f4c4e18a4977939a6c37eeaab5c8d0cb5686b44d84c86d736ee8e0d97421f4c8935e926419dd68fd4e5fe9999eef75d0d0f9494cbb0297fa066b3aaca55cc229a36659be310c1e328d0b52f7747c62b1102a2d0a4acbadf0acf621a45e5695ce1393b3eb05a69ca5318e6f6b7ae5c4ed3f6072f8ae99db9af66da6a98d675a35acfe0a7612e9d5f29690870d81114279010bf7bb3d458f630f10f81a785f671e6735d7bdddf4da375d2e6d48ceecaee741a33ec1e8f9e0ce0755bec28315c6f9df363c800ee147bd412c5ea7aeb89e7a354fcd3a2c8474aed04f9a2a5fd2983380f3c00a4558c46ca472a4c15887c07d4bc8a698"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33393439313934313732"_hex;
                s = "69b292ceb8e8eb52e374140501389ae251d8451b64b9efbeeaa16ab24126f38f2a7d4e21981aee6b672df3afec1a9e167686b6238b2d3617c659ca1331470e95234e2c04c308cd6bdcef7631b74c36a752eb4187bee2dd33c59f3fed55bee29ebef7ea61d26e6c052a2b519702282de7652a500fc50956091b35f9ef03fc9bfcc72f02dd55b25f88b60bf22aa785f674791e4dc02f9f2f7f04a577f860ea1761d0d8d3a0082350551786c62789b48fb21e85ab6b05f56ba504f7f0ecf8625aedee4de0c95c4f97fda57929c399b6d4865b78eb2d1da433f2488b4134fa043aa26386b47f551d7778bba8b6f379cad3b4894e106fae90a2b391e859fe8bef5e545ca3d0d908133285273fec3616798b83a6f7136faed77ac31e13a3745de44bab641f559ef5487890261ea80cd9bc67c58c7e14e9821867ecfb473b47e95bdb0003cce856f9192e39b86f551b0e3b7342598cb34d8905e117cf85b828ce0aeeb55407785e27a9687b59b8c5fe011c95638c8f1549e95658de4ec73199e3bce9a14860a0ac64ebf20ce5f0083594f40d6c2a12a07a512a191072487d8741766af953365f240335db17d4fc57390ee0562e4f8dad03dabb113a665b5b9174c1c128190c335cb748469ba2bfcaee5bcd25c845bdec81508fbc519a8837c059427cb3e0d1ba0bbb6e79849fb6a2e7f29c7d778f957a7e26fb28534ddd85ae59498996"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333637363431383737"_hex;
                s = "28dea73d9efb0b7893b1493264c30a72708c1a28f10fa9b8c7af7e0f52fc5f533012c7b87c7005857f9c55386e81ec54a94f71364798a5d31297a13dfadab5b032052ed34124191d2a94023e27a7e6cd948e21ccd33bedd37769024e97ff90db92225b6b5c0643357d80ca155a69b3173755b88fa83a4367355f1921474f97fd2e1337ae93e2f535d81423177725404acb230144a9d86b74ba3c1a6e724a5420a12f2a19b4ad6984c043ff63eb14a0cd494c0072c40f54f4d931804fe63d9bfb97ee7de83e943e12693bdda14325de9d7ad605e7efa7f42b14657fdc2a2e8fa3de31bfe2560a034aaa6de4b4ba00b056ee9d060982ff77b5e2acabbee33f3df9e58b2782e2f99a6d8f1c6b827862b5b04a02641bd1331c73804e1322dd2edb621508aed4f997458a3f52380d2ef83e8c289a996dc2407f16f6c848074d12bcda0b5050140051301371b51e808f374685f728e24ae3e937ca9d5ef890e0727375e4832c8c07cfadc05b098fd50014d6be7a0aa2a35ac990026f5550427db3b2345866d72d3085594e2161871a4ece9c55bbfbccf854a7bae0631ff101d887681006388a37228dab83350e5a15c96f7d0397cc62c388e8ce6e13b6ac727df4b1dba0691b7b96574d0d024cdb0e329e94a128924772ebed4eedb41138e7dd99d347ba50b83d1547d80b85f98ea544aa63dd725f4ec61b1b3b522409a1369b5a9d4b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363731343831303935"_hex;
                s = "19085093b94a6bbc8f27edfc375a736a9e086f98b1d6e4280e6a6f6e8dce1f878b4007ef9c55d3e4bbfce9a6fde2c6e07ba94c55bbe8053a3a3c08c5fb981960e82221fb66a95553448a4d2f8a1cc588bd1e9c4064e9b6346bf48b153262035db57ee6cc5453483501af3668a645a930332738782f55f4524b1de5787b4cf94c2042b43f47989295c8dc1e0bb9df8a28fa321c16637e20fb409f55a21ea3e29e515f833e18485b501442269ce5426a20b77bc3a797a8fe461b1e02ab4d2fdeccc84ab2b9a2f0f5fc68218dcaf140dfacc70a990b2157f71815049d86e43c094b956e6a1915ddcd3023e6805f9267e96318c466985fcc3eb84db972dca08c84a347aba687053871956edc2bee98207fa1e984b1bd05ff115e24bbfc706ca9fbc916565a3984533a281e665dfb6c8ef40852059993aa6d87d5d1faabab4e0143f1080a4ae9c8afd4886aa21ab3a487e316fa95dbcb0b67ad4dc8992c2beaa48cd274f3506b863b33d761d8369ee1e1ca85f5c86adc826d9adca6ac77fb586423eba20ccae5976f9feea127c720ecd881bdfec17ab1c6f539195838ea99d4b8e612933cbf8c7daf928e99c603e0f633e5d89bec797eb33d782769e03c75d04c6f64f90ae54a47f9fd3835a263ebe8c61df8987443ad8ad327aa2b9facf647409828fc9716da00f9ac1d932555c9138b6b9d23d9c6d1726d63c1e42527bfae0354bb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131323037313732393039"_hex;
                s = "882a00befcdf655539171cfc51083a011e676653b03498c5f05a4894cc3ee7963997cb440e279acc5ba37f0f675b7de685d3f29aafa58fddd4feca007c1e96d0891f9e7407030fe288ea91d579d3d6e5062f9ce14aaf9b507b7405000a0a4ae6f207f756677276ab25352699fc3beb4892ee2c4fd416e59379732e1fc2af9e37bb6c49d4a9538f9cecbddb571a5e3f28d266a1a2eb3d477bb3f13ccf776101a5bb37ce0dab135f4a5976647ee50fb8c8fd829812c5f686012a48a6ef6af6a88c5e805cc95b5d0c90ce568b596b2ae2e5934d1c2dfd7b2966e52fa145ecc3d94cb7cfe3dfa4cd8b3b42b780a212678299a2ad2c920f386fee15085cfe225798f9ea233b5528915d8a4d530f80dfe6b20fd4fae2a80ad0ac3c3f45d99313801c1a06cfcd311fff3cc409ef375f0c2486cb5331a6f56f693f48596edaac25c10fd3f985b565e657570cac4ab291cc963ed196455f7285368f6877cf8c74ee7fb784ff192638415e4519abf74d82daf72cd6794b9e82258bc1b73f08c01941bf304385a3a80085898b0ef5ec929da0cb2f27fc75153c11d0699bad1fe8b1d357ee601d5de2489166447ece43d84212a88ee665c0890347e361f362f68a195184b224f3c2f0228350e326216b043a56efb4779aece7d5bb512e3113d611db9767639934778e442f838e9bcf2455f3aa66f5c038ba28a3a8838d2302384ffff1cb6131"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131323938303334323336"_hex;
                s = "ba12cba0e650918ffed25cfa35075c29f2704a11d2698311965905bafa47ac53f0cd688647e298e3bd3cd380558b6d42e1ec16dc58f6175ad2341f93700703f9dc8617e321e5246c15d371845d4e67cf04f7e51b5328ed5a86464ab669330eb97749a10ed6ca4e052a21fda6ef70de6b49fccd8d6db530beb55588d85fa05f1643a79d5ad09003ae2e5413a06a189df2633b742bf43a8ab4a473bced22e6ff46a687b5a43d6d1e1d1b2d1fd96cc99e967b83c9841f4e2934a7e044606a73f8217455beef7926f0c65714cf50d2b5e06f59abbb95a489e8dd1725b9ba6d5b6092fd660091eb0c4f47e8a9844dec0e10cc1a61d50792e1f931071188af1e800784d202f99edf2b7fbe28a120b692ba476aa431765208cf493253d73763d36c795359c7146b2c82b635b4d6ca0c1a007cddc0385ede1c589cef90f02178e302bd731b37f66fde283777b7e02b77803edf808af7c1c71d0a321b7d090e299917aa21be4a9a82ece8bca006917fc0d126cea0e7e64f6073e10c589aaf3ea25211417f2c3d12d7066aefe4c2675d8022fac6506d12e8eb19af5a2c82829bf64abc4b52846191cd6dc555585c17aee1d50d82ab3a580d616d988de71bc7ed965a6cb90702ee4ea29af392e4dcabb97f7dd7148b811a93724b40bf40a40ecd3729b99af580484958e1884e4947cfeddd5b3df5b810f65dff9d460ce273987f58ca57a03a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39383736303239363833"_hex;
                s = "39de8c150be0071d220697d5ec83166e42d608d83841cd01eecb5b63ef1a6638befb87269077ac7ebbedd0e368e3e3a87c63163ff84ba38e51cd346a4d0617704c1ce5780e1e1ca4d2fbe72b82429ba00f9311d2ee26075e8c045ba3f4f4e11c5454819353b951e684c829756be54da216d8d0585d23573720516ae900a197ba2ddd95c76a660726780213060c0a527e4e1e70eb4a377f7766237925fff87ce798349b4ba0fd3a0c89a7403b9e8ad657078166aa427ca530afae4b66233b1c601bf043c1358a73bb85fb5b4b7f2fe24fe532400a99f778f27a81352ae27d2ca9f3af99da7c9156871b7b4f0f649a3bbec0156e638f270af6e2e3730fee4500be694b0eb4e3066d2b5fe29fd91f1bf55747e6ef9cf106eb3bbc3772a8b181d6a4878531586022415f6be2541cba38f7b950f805b4b8d673355797ef0b5e58cb9e3dcb97d6cfc182ab493c5e04f239caf2c925ec2391700d501e5d4a7a7ea08b6fc9ed56c27460e7d717aa9f8100d76b57b4fe485fddbf8e81dee4b1616e0e0ce2eae4134ac6a96c1853cd3975f770f05f077eb4781ca935e58f7dfb618d855010cfccb3a5f3243853ee413ab695753329948e772aab3c1799b8ade5f9f4b0d041815842f7745d71d6ead2c83bdd2e654f445b469e5fee1f091e708cc50e8441eb38e0a035d58aa4bb9310468b38a8342d9ba9a346d64b25b4fb6143bb72155ff3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3230323034323936353139"_hex;
                s = "67f05d7cfb5ebb3fa6f34a32e859395de916efc318bb58cee0d5dee9457e458cfbb97fbda6909ebf85394095732353b221a1bcf502b9b2cfabb4d67eac73a6720733d5d76224fc6835fcd8937c259d7ed7bb1ebcc7517c3b6b0fb67a4998838f529b8be2abcc8c2cf10b60a19b9fd4139756b766827bc3cae375709ebd821abcd97bb4d2e5f42f56888d67cc159b9d54910316042a4acdda5c507c66a055f55281f1eb4b0a1fced99560878109be3c04eb62633bf069d86f1a7496b5008e7009eeb225d1d4d0b377ccd4029717fc7e55a26575059e4b90fc735f8dcc45fce928ebd5c116afdb631f6c302a213a71aa75d427cc805ef5c9cfed95a1e3470dfc1897860e459f50f98958bc4ba630aa855dbf5799dd564c7dc8c67797dc1eaf51396e4984e345b847bde407541c68c13fd29af83eb6e15bfd092641c46da3dc7537d07d83c343cc8bc8c6064f8e4f61915c555bb86b37ba73dece8f9a0203da68ca9ce7c874c2c1fe516952acf953b61b70c5424b17123020fcc64bbfd7b5ed9c4740971fefc1743beab357e466a35a14bc5b928a625c607799206c76a0aec7df6d9988f2dd266d41cfcc654fa23343d39196b3a10f651d8f9cbbdb410a629fa10efd840b85da03839d96e5744a0ba785d5f90e0e797a053b8762dd7ecf805abc99d648e97d603fc4890119942d3b9b9ad4e9391fe453002ea2059dd01ad7edbb73"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343531363639313830"_hex;
                s = "5b382b1f8b912347b40629ee86f870ef85da6ba37f8fe661b6a6af3e4ce714e2be967f149e1bd52224315c87e184a62537ba262072879a4c8f13c8534aefd892c074bd214c7b915e87fdba67287bc0e3737a13f69ea9c18fb9329ae08fd35b692eb7721d2816568f5fbeed25da9df0ccc0ed69a9cf2e299245b4be49ef11c956f182587062c75cc87a3befb1882386ed503b658756300adce5268270959fb270add0a61421c066aa8ffaef45428885176a466792ccd4af9b4ac03381b4e368eebb4a75ba4507e61137dabe41aab8239cdd9759766db0ba6420c967f008dccfd4537528c51dd7b9e95135fce34664ca0556a30e9bbb531f39bae4f6e15ae266efb39dbd7d9894c3022e8e5cec3808d8f465115f85b411f0b6e276dc5c6f2b676d6ffe8427112b3af2cd99137d25b109839c7661d8376e3252e1f8bf9c5baa524c1bd82eabe0228b2c8f2b186898a151d25192fa6266bbaeece357117b46dbbcbf4818de758c5892ac548a47c8631d4754d4ff1d13cfa3a707edb5dd8fc405545a84f2a860f4f59d587658dd5ef20681fd590c91245740d575d127a1173ca8969c4f69ab10bc67cdc3ef5718fc317cc7915bda8e97a5d674ae63da735abf9e119869fd76e816b2d9eb868cbcdcecfb7d3a22db60e686033227483de816fb80dbc3d0abeda3d3169f298aa72fc20e305d2c6df1092c8b406e48143a3a6211020bc6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303933363835393531"_hex;
                s = "3d85ed8630bf31cdadca8fa4ec06e69ca8e9edca84ef2b5a9d689fc77ac3819fe5f1ce370a060e294425ac97c4ee2abd4c45e8566d5467ad19c2eae4ec85f3e25d0888ca4f739ab93cfe16c034295e075083702baa6f283428deca6d24c8083935c80c08e68a1c622697ac1989a6bdb26bf88403ec06685eee11976108c3abfa602b64e6dc62d53241600b71c85c0c9d5f30a1379b312c2cdd6051febe6e343ca99fccfdb53f0852730d2bb5585d3c344d9091cbffdc529f780ee7aa8d807e54c0a49fdfce3b2cf659c6cc214e2f3a8329bcc4156408db4a49071bc36a4e018872c6d8f138da58e0877307fde9650a94b98882e5686fcea8524ea07d9d67ccc6f17d914da6ce80f0ca32757cd5cb4357f419a1726006a2b8e5a3a5a2d93e3af8a8af38d12e409ed8cc118ddbf7028a4baaca589a5b937997097189160f36b9e38bc29723d2f8f3844963de7f0742dc6c7f3a183d0729efc785d280cde8c1879eb75a53556f2c064eb114a24bd36e498216e43f60f16dc231130f5a393ee13048c1e7830e2c9453381c238b730db88b186447174bccd5f297bd2b3343309df6ad047e6734980aac77ee15122e887d4109735a932401a9be4b02423171f26cc3c0c59ae1870a5d3561df937e344dce45ff2c03bd8ed634e61cb0a6655d8e5945d77e119f955103c7b121105e993389f44ae306d901ad9a568a90eaf0b6eb503fc8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36323139353630323031"_hex;
                s = "3ebc127c8ce530268e26be059e0db2f580109f0179c7694d384ad01f257effa13dd90dd760e011546e8f8185fa754d7f8f89718675c818d8b22d94f4410ba577778ff90207602e19dd66f7296548600ed4fd03ca80e706624b715c52dda105df29661759c39c3844a469f52cb187a4f51640c2feedeb9411d96bc9f79700fa5ffbdcb87183d5652718a7dc63f0fa5885f2b2a95e0a79294289caf3b998a747590bfd2f0054e844f79c57807cad58bc664d6c4daa96a6262f4d110e3bc456948ac157f067f7a999d789e1462af0c59bff7e6fd128ad3b04d3bc0863e7343ecd43c01b16e549a4d684f1ae5c069f5f48eb63d64b8c4e53decf1caeb545a7e3f7b62de1ea5cde0c77bfd03ed690c15b9ea122255d34252b5a59a3464d5c4e4187caa9143506088b62778d614a01cfeb6ae07cbb91ac1ce5e63769afd6d3746ca90bf387d86780e1bf86c6653112a0dd193ec8bfe26a2824694f28dab211e28262a45c54ba8e1e94e21e61cc282a3b9131709e0fe5132e27f3d8bb20e69ea99c972bc780da5c58448844635090da5aecef1683a663a7d8c3f65ed98568dcb3c5199c5a10ab41ae60a5ae31968f5ffddbdc30a475b02f18d97b0d0ea03ece8c9f06be97b3b76418cb57427b988cbc2f8c13607c8fb97f30f209683c2b25b1582b7fa99619fd62f36481147f4b1296b1e19c4e867d2f240671475d730c7c6e19b5b5a9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363832343734333033"_hex;
                s = "2484f823b830036277b6c888a551a134afc4456e0f11c90c7de87443f115615a2c3b5cadfab075aeb8d5b044420b8b2a98a58b1601d4a179bdd2c28299386bfa8bfa23db3c0a32214a8f99d2d2bbd202ebd5d6a7ef645fb823ea7e07f1f0f8123099386a011d78b8f7d74391cc4c1e82d5f5e448e44b62d091d0c923aeaeb3dc0ebfacfab71956d6d05ebfb6b384a5ca850b4efbed24bc02410b68f72218bb57ef7d3831c777cf48e5ae455bd0fbff0533399708c02a3813413e877bd0d1f0ffc21489800bfc70f6d3f8e77dd2f3bed5d298a1677e75bcd2886e84b5eb2884642a560826269e0445c80d695ff1ff72496dbb5853f72affad202a780978d5bc18f87bf2562021016f6d6a6b94dc7161ba220088f1e9a6000b2424716ca33d3e0e68e332778e19297934634803cfd5ec4aec3de2f6c8606b217717cfc296bea23fdd61827508643cb5fe505ea14c2e6a61544362d4d541fc41912ba7dce58ddd928ce8b8ce465cfffb97904a3e961711a24a019d25f2bba8d65413b3de82cbb04f2975b87a95502c76921b550f545e6a659afc83c1731dd8bda533b154129883d9aea6af532adf3625712aa44ded67ffe6d90bc95357d446a673cb32487195ad20ae184250abdc7d3a08d3051044fd9eb1049272b89a2e98f1a35b2e0505793a8fcb7448c03c8f46aeec03d1cbc3eca5a27880c8b43a2d255132703c40413b2446"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33373336353331373836"_hex;
                s = "76d929733914162395018b1641129388337fe075f1ef22857bf1fca62902ded0a7f6ea25a0b33196b1a51145dcafd1545c09daf6d4d453660c79b61993df7b3c3207b828920ee1fd030a29233e35fda6d8f96990acf3cb5715b769b4f8d1bcbe3d686527fed6ad66343012e8c9ca8217c7c3dd8a8efdd052652f7c9a89090e598a6a60753b2c8d9ab67eedb3b3ccf8fd755d116eb1b089b108f85ce2b3be6ce8b11340e57dbd8c9b3acdceddfb53e6ec145f7622e184dbfb35ae46d75ff43a197703b183196d8778bd06d5d245e79f6c2e0afaf9771babb9a88ff06d0300be38a6f4dd00a627df186147c91be1d2ee4dd1096985e37cd2754002c776223ec0aadb08a3279b0839c67e9e2053344bd45d487f65ddc1a526900e909cf1ab63908375a5e0811a084e481c1f149e58078a3fe8abc9ca195587bad6bfbda20beea9c87b122b55cac6f6f65635e655cc0187d63aff5a026915232490b43f35ae2b96d7a73747d958aead23b60784eacc6a7e6bc471f850adecf8e2b53f5f93c4b8a40a27420466abbcf5e554a35d40a2f0ce4447c23580193df8aba421fdafbea91a92f74f2f9d8a565251dccbf07133225b40ae28c33ecf8cf6ebd2703a135cc6420628304d13e5b65bfbf7aacec056664694126dbcfb2ec2334f04bf4e4d9227444b07737a4d7d7ef4762b53973b900320e589a08d0e6563086534b6fc6d939e0dfa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373935393033373932"_hex;
                s = "757959f7d8edcc8d2b843027b0e7be51ef30769b79e7393a550ce13ff36088c49e062c19646b68a82fbff82d8f54efdef5e4a412faa075936fe83bab9d5ba4c16be9b50a45a8196769c899a4fda1351e0bfbc0d3778ba2f3cad6853e9b59fe1d5c2b6ccd3ea320300e55337991ecea2623f2fd2088c1a152acc9930b57aded1bcbc7d615e43b3f03f2568248b11fd0a7c8706acda54ed825a8a26dc5b745f26dcf0f6c6f6185170c7bcc94e0917160346a54b6f16596bc5b53d19824b77440ffeff03114ed36fb50fc7539781924364995c9efbe5c18550f2259c07b913e40df859c3bd81eb9c0ba9429bec118f2ad0dbb45ce430084d2b394edefb230a192e4f6700b294e8debb3b26a66ea5a4c02d2f1682e4229f8b3bae2f0d02faf45c8a9ba7b34f8635d9c0b02315856d61a977150de765081f3fdffdb446fb5246c5d678496acbb4062aea2674e5867679e194c13ef1987b4ee11019c27c6b15d23202d699cd57a2476aa25126011b336bbdac882b901cbe748ddd58681d75b2d25242b75266f013a681a88614fa6dd3d42d507f621d77948e32eac5dc71f0138e0175f75be9d75656a1a04aa035fd85c44e899b4e10c3ae954af578603e6c0bae9f52d2af1d283c848f0c5f7a7c41105c8cfa83be5d611ce309c7d7697e23fe4be041107b3fc96ea29d2e50e25873fe1025187f534e89e56b3ac7008ae1716e97764fb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39333939363131303037"_hex;
                s = "aced2477dc9a544a6380c5904bafd0c3ec8a98956c74a7f5550200b989ed8d6983e2117faf75ab0e7df1bdc3eb162930c0de770f3ed9faeab701425982cbb5a32cd515887f5c24de6e093b4f03f49902fa9c5ce7d4f3cace1d6da9125a1441ef78e15052ae753de4ad63cc05cdb8d75053d3f9fb74ae99b80bc4f754f0efdbf2959021cf80eb1a74ce9b1f3268818ac382c88fe6b542c3befafdb921ebe7e7a80def249b27fec84d5f2a8d7ad99e1319f39be3472e4915638a3c4b79c7328134c3d88a29041519729c66348b35f4dc07011c644abb6f49d093cb289dbb31fe94dbf22ba9743743902319f4ba119de877ef70606ef09c142e0e119850f0d5e6fa085d2ea1743e02d2c88d423840c5da409a1e686a986b08efbd422f8b0f3c1414a1db0f2f8cede003dbf3207ba7ba63f5e5d736d6be66b3df096048debf5d36de53adc916d6b90636c4a93e6064eaad5868bd4f1193fc1978963b07a7e6d07fdd4e0c65e4ad755cd6a81d069f31db15e89d6b5927d917695b2a9bab9c274d6bf21ab7a6e08b99d4055de8fea592b5190732633eaa719fbfd6e8dafa022cc89c408e57885031a9203baadc4665f3bba12cb120948c73f8cf8dca4bab83dd085b2f60b914c8646f4199121e453a4863813fb06574cb8637deed5e951dff9ae3b6c23c4133428db9f9a2dfbc5ae6ffafb89195164a8edeb2ef7c8c39d16ef337360a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303837343931313835"_hex;
                s = "3215a7229e9aa9674d10ce9fa2a604976b737f6128a9c9ea76de8ec44f283641142c44432416ef7dff5b30afd778964d320972071a67c80d20262c6b1988efed0a82d82dc085e8d45a5a53e07771a014a116467c3c24e61e37499f8cb917d3f73e4f69857327966c577de6ae117a2d48d0a225b29374d3f6cfb5a2a69860a9b428fdd453e5003286e2727b8404adb2ee897bd2b10c7cba9071be535566b65637a055ea73481fada4f3d1279d8636695c5eb3f300e2b8d13b054f6ccc542c4b627f694329fb79613e28cd982a12514f1b5120d8cc2ed39d918a98b279f86248a02aaabec7eff9f84746df8b960c27c18d96c57a79d368de98f5d800a9b45d07fba6ef3562f4cf92870f41dd3b2d24171075dabd3b743373043892fe6533d3305a23bb84c4972d450e54d7068e1762ae1a445397d81defecca71a8637b88011bd3632301a41416fbae53bc2bdaeed34431dcf2b321a22cba5ca40ce8caae5e3e65661df75b21976c7bf3a4e59331cd22a1fb9d6ac5b1f7a15d4f9c3b4a061dba9b401c4e2f113757602635ee52142565f99814ae0322c402014fc9f06657da3b946c6d9a46f8c16073d5ec878d7e4478f6cbb01f3f8e3a0465d0cf5f1c0eaea00feaafae050b58b8ce2400af131357c7a2bc1b01aaa749907bed5ff4f43de8f9353b09b4edcc09f6733e901b678ee8d229d1df64e53544e9ed85bb85cabfbaf8ed"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323336363738353030"_hex;
                s = "333d93bd98848eb0a6bf8702996022ce3adb8afcc5f00812a0ef9693a44362f92e3a6d6e3526bbe3042ac11f42f0d64c0e40543c8f29b771923fde7d7af07b5fffd537742c57cbcc313231acd123f95a6407749335b7e0f6487bc00cada59b3b4265d79bcb7e830d33c1849106c01de1db87b00bdd68ce9ef55e3bb00e3ccb79ca900975f4d57d9dbdc105755e8d0e9ba1d953c6de3651eb1c2f0da3a9a2012039fed133b04103cbd1fb2baf08139e9bc0b486e43a2a159e4f2847379f6df72ef0697f7b801c774546e262a3e787065b564d81dd403e2784d350d322e3bcab396e4202964345b7d247620a9d10cf5ccc14bc2d092e715ee354438591edebfb75f1e2e503a2b46a7660b1a9b94bb6c2786257f3af0d254333ebdb7aa979e1bd56882a896ccc5c876e48cadf117b5c2889be5d9c76f31fc07ee410e1bbff8294e86c98db68a4f7a9da8d9959bb1e03180e609e553b11855634b7f2c8732f5da03027b958e7e6341054d4dc8899d588823ad31c5357d1dfa5784f3cac8783eb7a41c9a9655745cfba09893eb6280e479893abda38af66e72290439f1309642f955ad73b9a053c46dce15a85d96820b574be79aa2cace5d9b8cc74bdcb6df69af1e803549a2fd61c9087c594c4e1413fc8a9ca227e85d409ec595efff6be9b9f258ed38704cfa36f3a8523fdf2a512219deecb0db5110283eb126d2157f5056b48ae"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343438393937373033"_hex;
                s = "27fdf556c2cf943d81e8fb9eaa7954a530e639f3fad8937759ef1ebf4a0fa8538f184badb3c707542c2c677b4deeeeeb74d0d8b2284d26208bebaa2cf3c6ab89ac6adbfe30ab21f2c4a22efeb08bc025b5b8aaa009a4fe10a18a8bf3cb3f64f071b5940a8424690b2f86f9fa0a2ec34b3189a4e64de24dcea69511ec7b42c261ddf80c2d3931644a70c0a25870ad12e72c3bc9f0ebb89a81b8bc64300fe4f57b82bd90990dc33dad3f026bb3350ddc86661d1dae27a1811331b6ea363601d8665077070076d710af3599c838d4c5b90787c1ab61fdb20ee9f9a9a5242575677ea4e12189156aa32f7a474be1a361f49ae1542d80226406264ab4ecb5e58277166cccaaa2029c14ca8ba4b48b96d4bb75017d8de050f2bd2a9230adfa263a17c93d00e6539b884374ba8ef4479a59a510692efb9a3a3861ee2f7c23951bf60be04cf309c23f220581a8041321f73ce14c4c88a123312f603b17a6794be50287495849b6e4513fca78222f7890931fc91363a2d61919383920226fc8d7a6e35c6be94da6cf98ab3a8610e6d332c8b7c8f33f7d88a51afb91b94f1ec91d6f91b889d160e568410577faa0fdd5cc06370fe0d599a5b80e626cebeeb21a2d43e5b983217adfc2374209dba27f1edfec6a898d7583cfdbbfb0919ac3683a644261d4b4ffa67d1e4b0bfc9ca618dc884fdc3dfcae04d6cb0fdca523637c731dbc0b77bf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35373134363332383037"_hex;
                s = "84044d4d09140944e3fe1e5aec8146478182e2f13df2f27aab9fb4a8323dc3e25ddb80847bbbed2357713f8f11ee4167681814b7241c066e76332a0a87ab2e644277d7b3c9e247785ccc0e199c918aa90904f826fec797ee985e9dc86f1785f5973adfd3b2dd891894496b5d48bda3150224cbe8ad0e812b704612b864d3c9c1b0355b6d411e113769180af4a6a06b5c3886cac06dcb14be1cbbba68b5ab2ad85f830b19ed059581ac18a06d6c68608a0d95c679624f02966ee21a16f045ad6dddecfe52458e94c3e841640bcfae3738305666ab128ceb9651725a2725c275ef3e1dc2fe95b291aca73b843cc9024deac370eb4b1de1f5300a8353cf5e56b4cf23369f08d82bb099ebc588a0612c0b855270888a3edd2fd73081e54600c9a7a85d51bc9f6236620886fca318a632cbd7df6d1a677727b0db2713529d7e49c2c6c528b615e11188e9b0078e20d7f4edeeeb466c1baf6853696c57947f98cdcf2e96d7de82cb920008000f67eb112e3b662eab4ee5b5b528abf3604cbd5161e5aaf618356315e1e828425e6f053c3b0791d4cc9e09b9f3ec5fb6117a5e59ccddbfbc959b1fc504915b571bf625187831d5e1e31b6d547cda5a9bdf794120bb7e2aaa10f0a7d6ab3430784718321b8a3904e556da6de418561f4ce4197db67220cdec2d62271b404b9f8b235f93a104707331eff0e08feae6ebe36c6bdc02fbe6da"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "323236343837343932"_hex;
                s = "124928ff9607318486e427cfc88c6077f2b078c9e96abc1a6320fd44c166abb404d44de0953e550dbb83f696cfdd7263d3e7dbb9f0858213ef6ef884253729d38666398866c114bdcffade0540fa5c4a5d23ee78f3f26d275da487ec6053f869533640a023807559d1ebb6d7c860758567e40477585a761b2d0a29bb60badfccef9261aca3e8ade198ca3c661faba96d9a0d8c294de861e088c3329635e81af685f53f76de07236e2bf3645d42728bf5c64a1acfc00d0169fe6a5e68e06c579a7e801ca6cd97799f6b640512616069b074c7a9bd747473f236c071101c5c7026d4f2efbb50d2d869660c8b144bc8fb0861f38f06415ad7a2dbb24d942e13f7ec8382225c9de487fd3e14c0a2639e480965241b40b2eb9cde50abb3ccb4eb2ffa95299423ee9ef56332425464c5eefde29eff02c14878f8810329dde78c2dcfea52bc58cbf27358528b5d0957b1e7dd10efc31859b1f9d2b12e1a471f11702814f614d145eda9f2b49dbf67529b1f16acc3e511deabb5812e83a6b379342c17a391bcae1e80315904ece5a1790875c024f0dd139d0bcb23b05a6eed70cfd0c02e9ce96f2adccc7272d97289c838e52c3dc4ebdc3a7b6d2b12392fa12e23d0978c9763f3b0be72c436ce14fbf1caa5898c0e674036a677eed11cffdd425c52c61c37758c62a4e1ac6f59255f61a11515f0afaaf7a4e36e0052002a941b1d2e07de"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333533343439343739"_hex;
                s = "a30ece337ac8a19be31d065ef3127ce6e996e8bdf57d752d11246b41cd911698198b05552a0b74370b9f5a001a56017fb79620405feedc40c817ef5b78b9b225002ce17b30f3668fb431928665bdf7f741137aadbd7f342643c58a1583e4d5db94887dbd693aa6d0c6b9caf5d17e0f673a52b75eab455ed273f93f32708cd3fb40df9866ae3c4a9c6d7fd8e0f0ac65da2019a4374b39ff9508d692eb3b7783d82dae287b1098489956b85ba5fc52f4c28d88ce6e8a899a9ee0ddf0aeede50ed0d8fa022ed97d34db3f98c949f6447c780142e47e3bc5c7c5716a22dab37275cab5fe3139ab822fc567d2958018e13e08b30cfa4194baebcc49ca707699f407861ffd8e0d12096a8e3c1318ea28501229093902ddba5ef7fc5d872396d0bc1062f088cc0901dd2c8893d80174826a13be0966c61b51bc2c3503d6e9d856511d34ddfe8b6bb4f47263617107f6cea82a95cb018845c6b4e7ce3a289db8d3421060a08fee5d9b821b19b01b7de26f0f2b0b5c437c54da03bae5774c08e14d9800da9f2b6d96c2b1ddaa2cbc95dcef3431e9a0f0b048812635062389c717badea01b05ceaa20069d3e2467da799aacb9c3001db84d6028e3ef513c2085dd14053673270abb139c4a2021a1a0e6349b4cdea13d63dfb2ceef45a18082c7cf3caa837b839056a28a911f98b5c2fd9f700647ad1d0a9b3879d40ed0ab0ef8a437e8abdf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373837333033383830"_hex;
                s = "b8795f4caeeeb583357b81fefc816d41212e240bea508ff8dc3b7f668d016a82dc6e47766d0f0cf858f321284d27b2e04053623d71bf81e0dc2a2234367bcda3f4f3d337dbf0f29dcb459575884b57828bb0b268a3503edac4dc158ffb8c6ab47349d0b9eb491499e848d891aaae659397948bc54c09bf9522169915393cbe84cb8488e81236405c9d88911652b899fe8d9a84c4e12277fa752c6ec8652d536ed48cb726032409afa48150e819a9d2583e80c70fc380c5608f5617abd76fb50a967c86a7e8b965bfd9bdcc0657ca9fee1cf99b185b284e1cf996e8b1c2e312aa9ee732960bb9f56f882fcb89a1269cd89a6606c3a0907e9ee4672075ed53ae0adc7d95e0420c04a37b07721aeadf42d2536a23f99cd1bd4b64aed6b86b9c6767d12d845c04b5a24ae85f63f8e85ff15a03442fca308d854dfa1ea621d6259e39e49238b3a92bcb5a2223fd3d949e0c6333a80f16200a58521d66a9aef1a9843cd4e514e45b2e33072307e6a66560294cad1d61a103cbe4242b5877d4d5726498397043188a2b8043bd7d3dfab57bd598923a3f1dfdf42f74235bfc64cc3c8b813a2fd93bac3456a5d599ef7df1c53ead4d45245c92a1c26e9230109fbbfaffcb618f7ee758bb1d50275b58dd52c53b0469910095a803cf88ad8129c511aea159b2b7e0641e1be32c4eccd1ed17f76e88751fc2962d3b33946542976b1758eab8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323332313935383233"_hex;
                s = "bc9778eb784cbd743ed12e8fb75b84f7e3bfc1ed385ea432582429d85988686e462574959ae4279fbc950f1f3e90086f6997eba6eed80768195a94ee7bbcda5d07aa52ca456c0942e3651ed6465e39466184c348c2f66f12fd60d470ee706434eeb619119f7ac373e73614bd13956afcfb2bcbc7713850985f975cca0a422f26d05280934307ed1af6bc6544caa502b2f4cb489e818b6ae692f7f8419211a5a4c389b6e12ffa140390ab991ba045d2cc5203a18cb032180e5bac282ba40bd46cf0afd3304dfc881b96c7231cf9fba8066a9eefcb8fc1df383c8b9a6fd53ed75b9cc1b3f95b175617ddb81429636570599eeeefecbcf1e1d5ac87d40ff36bd6ce3929883c54970347e4c63e37b90d3492f31de90f085acfe77c26daf59ced624468b6da78cf74e06df42f5ea75f2508a790fe6ff19764c724a68a2f41eca820b8f5c3f991b101443429a1859fede52e418a4990e5a26b0cf9a0fd72bdc26555b026812e34ca880aa4c6a7efb10dfbcb906a16e9fc45b42d80bfeb87d46293ea01f4c190975d31378f810a53bcdca25f26f7ac3c1ca5347e39d58775b409099e4b4676ecc9f639f696e8e408cb0d98d9c9f28e12e1d257716fddfef42b41d7b16ffdac7b097c4bda1f1005b6732c00d1a70167ef2e8e5fca31715e3ffebe81e48fd74d62e7b857b523b093f7b742cd03cfc3a256df6e12cf1eb3e40365b21ab433"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130373339333931393137"_hex;
                s = "41e786bab9130ad3d4b39b783ba231ad3744be0ea0ea7813080ffb328922a8fc36fa9de54e63a5c852a5269cb72d00fb6e8c73a29b4c5cee801f5e033c300bfe9739f961e6e2f39a1974d7d6a31cc49651ffc837584077b612f9c5e3a2bb948eb467c7fa5ed0259a47d3f9c2047485beb178dcb49c429c1bd40665d4aa19a9b968550af7965ffe517b9fb62ffe03dda88971d0a6e7603420c0bd33a979f725ab91b3df1d6dbb5ca0585800190a1c1526023863666414567c4f3557776c940bc2fe9c1a82257c81179b20f356a02adf7004d2ee20f7968de988d3991d0db4d751edaced0748cb14e5a63e7907698fb11fe1a851ea8c1d8ebca09aedad67251093dbedba1db2aa38d7f6fec7d70e4db66fc87e05c6bce596d11a6d93f03f6b3d3fd23d6eaa7fea0a98fc87bd1f6a835a760148b2128c0ddbe181dedf21df24d22e9543269a2d990b249445ef7b59574e127ba8410289ca8e54d84c6bf2adbe2229ed980e9e7d67f600b34feef90f81296f6e42c4c1e0ae8649553545a5b857196ce7fc9b6c8d623890b133bfc921e3be2ff7b05364bc378f5c4b76fdc32c4bb95af2bca343ad4ecf16c8369dbe8771d7571fc1aa3090a2ef25783401239401bc260159b85fe1bb895a62f7a4774192f9c21aadf501e43db1eb1aab59d4814bc071d910bc171fa27466b6f85b44d218154ae9825f6ce3bdeccc3d00a427f40530b4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31383831303237333135"_hex;
                s = "357a46fa9ced5c078abfdc7c3df2450f869f52e78cbc3eedb1aac8200c6e88a7f40a3c125c5145b71c2454b800684bb0badd1aaa7fa88603fe6f0c0049072128f1f64b12dce27c535c010f62896ef16c7bc942d51b58aef102279c0fc13c2cf873d5f7324c8b66343f42e0099530d0137741925468221d5cc67ce7fa088be8ff91180039a751faf6ac2b7d1b077c61d894f5fdaaa229a3b6cc0bdb665ad53779468519b02e9bcaadf7cd6dfa9f851260603d5ac2cd83d7751cf0e0f3a548b17c8128d5d2341af8da4a1d0434112a011825d031607522b88ad1c68e5f2c3faa466d3ccdfa0b42a34882abc5e3b365200c8fa5fe5b567438b438554c5edd052774729b497e3153a1e0626081f09da04e553f44ee723e79b07552edff4d5e0219226a47e710fc185ec664536964eadc2b315c44511e00586384316c07434e6732b9a58930428dd25beb134554adb2526687080451ef3bd526a4f8ef4ea5b03416e15b522cecf411ef301db756f6421881d2eb178a916f2a519aec536568e58acc618be791e90dc7eefa8b7dc5ecd9f5f1b9d6c0395b5405c0dec6f18e5a1405ddfb17eb7dfe98ddfc88076ebf6a213a27f92c4eed913ac4bca710edcba06c12a1a12ce2a95b4591c89faee02c01445d3233f68ce52c6c37492930f03fb701082f2c3bc999a4f70be3b77e45c097779d62caa54b405d7b92728f0ed1724e4657e417"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36303631363933393037"_hex;
                s = "2625de9bd8a16394d1cb210d7b8a6da3c0a4ae0ce93c9d806070b51e37dd10efb2026b38bc8114c1f9641e1e7048d41dedc298d20b46cf58f9b078d4fb2101081c4747c39d8277b5012256cd91794c1fdbd1b4c712f861613c9b5f1ed16bdaa5812cd386738669bc19de21935bd2633916ade87a0c030940767d7b40c9d604958e93efbfb6e926c925870785221320a4fc7d7cbdeecc4a68f2ee65b4256b9bcbf41ae409c3dfb1facc57fac69e7eaaf5a05a0d6f4d03b47fd6a743f54cde2f1e897a6906f474185068ef558673bfffb0c854dff1557272a4f445a0ef00aaec400da03cc63caa4d8e6ed8ecc0d13855ae0a4d27a7a6711bf8aa5d270077f7a6c4227a7ea5b6a85f99bf370538f6b42d8d50a2182704e813acfe984fb6328be30ecd7a0f9c41b93b1c3b2ed60ccff9d3e26fbabc06d526c40cd2f9afef43430424309d66704f25f780152c82851171caeff6bde11c0f6c95ab22c49364505649031e3104f1431b6f460d5346b9ab2f7d027f7a79a07871359e1141b7a1f4707033a99422528d76267c35891222c4ed239dde2235231a33771ae9c776492946f4ddf61c4729b840e2dcb69e6ba61cf1f418cd2420d68c4f59350438468e79bc8e64e16410b3559d661efe55f2144ab70d242964b69830332f284157ad178e2f6c13d8cfb17333b172820b4fdc59dc6012799ab84609f6ae3546f30b75572cbe9b94"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38383935323237303934"_hex;
                s = "480b74783aebb8bdaaaca7a38de15dcec5399b1cde57e17738284be15f78c4e43cc88fc47d03b36c4d5679455293eb7b4d460d7972dcc8f0910a18393b1921fe21db99656a5268b373f06ebd17701fb56e59ca4ecccdd3541d4e3ddbcc9900cab7f5dcdae2db330bf22daf88c14fb6c1163ded71915c98c0bd62854474ab4fd4d8eddfbed4e1b9839b72b604b2d92d50192e92c194d6217fac1335905423fb67c69a9783f10e328c8bed496460af84900f5a4a09b2353506f5d3b8541eac68070f2f689b61ff37b639681cde00223bcb18ee684728c1711241b66ce0c82c0cc31b930b8bb38b4c77d1487e7607694b50732dbe5274b79669126fbd2b36c8a45acbfab7859bc85f1b015331e5a2530bb97d834eaa6425906246a0e431f607d726eaba2f60e1b02546c74390179a1ff90051feec8a1bb480971219c798e4a3fd3331aac9f872ac1132e553c0fbe0386d8af74959494f40b8cbe0aa43d38cfdc3e4c395d281b994de9f817a67ebac6f823c7fd100f95916143956b8c914533f0085d9da4870bda3fd2674e4e77ad21fae38d66b457d822b8a298d6dae06747f4bc22e0a64e5f6d7042dffb495be06a467fdf1516bbde2da1644b55eb8a830e3d1ea6b944426b30533415d0cca18d553d9a9cfd6aa010fd2cf02b90c794616bdf88aeea69d6eba50feff4f59418092b1c2a5a5cad600e5ecc18d2d50cd72105ee6e4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353830323334303934"_hex;
                s = "3230da5932377b776053fbaa963aa0e3b697539bb8dc58e30c43ab8c949d69771faa15efdc5fdc33f2b521b03d4ddd33eda1f6674c7b53daa1a0e58f1c280a406e65201ecc9cb79d0af18fd1e99519d4b6cd627b925c1d7fadc23c1f87478642892fc1ed76716193b42b4d4f5119d8b46a9e6e1770f8ac8498e87f1fc9229b6f0f3c78394bc569adbfeb4ce1351029806ba1d0d09732e339ff0846cb4e7585e41e7c68232f0129a8ae8032d3915050a70ac2ee89e4b16d51efbcd9b7e79dd49ada2496a2a6fa6e7f3c62974531469036739f37f5c21647eb398e83f2be9fe5151ae23e9fc59745336d85b9b36cbbbba664a8ac743cc6d9f382acd4642cb9c62e8a313418bc3fa39d4568c040d14362556b66b04899c2106ee68ffd6f745121f5e59529a6a427f2b493d64c6953285c45912c2ab4dcffa55974605bd58f5b586502322fb4def479ff3dd62029bd2d87c120ef05b5d2f0bbca39fe9ed5fdc621149fc3146f8e10c6b8323f1847ebf0ccdfa6af44b20e2e775e7508dd9cfabc3edd5526848ccff9eb3a42f2cae2782f4037f712ed7d2d929b1d3e7824975463e0e16169f4e9d121235ae126615f22ca0444c7ff5eda1725efa3e19f1e587c3200cffeef61b36877f806942ee488b5e297900618abacd9ac6e13d8e4f3054242f1a0caba211c437db7836f016270d2eebf84a393c0a8839abc3322af0b95434c5300"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33393635393931353132"_hex;
                s = "5341acc50c3e51e660fb0d7e7557f9d4ae6ba9fd3f4d924d1bf8e31b3d86fc5e9b7923a7a7d13fa965c99aeb6393cd4b51010fc8f87e91b647e15e5fdd3d04ebf537145537ee3a749cd9314d38ccac0597ae394b8eb7ae2d8dedc626410f61b68ed893171d234bb739daf06650d6aab569ea43ae15049cfc0bb4cb0edeef0a74393801a3ef4c84ee11631adde15f19584297e63ce8368b1465151d392f2e541db4da52b34541a2a1f56176d5128ac16fa86fe28dc54dc0468e2baa6b60105aa08f72ff18833cb2f62a00d8f168c8f8ceaf453d2a519c69751c449482845ffe7666fb07e9a14ba1136da78ce353f5a487b4a4a2d14b2cbc3e85131950871846a17fabe16538f61b560faf5889dfa5b6c357c83bc95abc559824e4842a3e1adc208121d1f2723fb9e19cd22f7ee67d82a6766ccd6ef71046e2e5813f16046091d542e908d839df3ba318af995d8fbfca0969956557a50c4b2918e34ae651741c2fd2093fd935701a4e4bd55884043f88a711a86596812064f636fc5b19aed055da9588f13b73f5ef87038a20ba96783b36921ea108eff766fad83fffae99bd420c2ff54fb1220e2f8a93cb800475ea8cdb68e956cfb986f4c109ff7f90365c02d9db65a5f3f925c3a5dcffbc83e65eef0d6cffa0934b08465e9bfb47c55372de4d5255adb4fd66d3d349615e55267e8698dfc1cefbf14908d737b56ea96e3a95e2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323838373332313938"_hex;
                s = "37a64cc1a6add0bec1b0f8ddd09a18cd97ef622e90d3146abd8f22fb2aeba3ec8f310a71509be78b63e20e4e90d604207b3c1fe8c666f0c655061bba49220755c08d43354c19d81c21c344f0d91150bca3c737d75f3bf74cadf80561fb30b2b07ba70530aad6586e4ad305db2682af5462cd3e0a1fd0f24913a70c275a42f858e8f6e3a4d5226a8ea7ca456a9902ae7855243432d1ec69118f6b806cf59d171356c638ab19f840d0069d34870fac0c15ab04312232b6d1f6921a1346d56b49cf57b1640cdd3aaf9853f5c90a80363f8dc561d4408bbafda390c8f101c3348ae62353c0631e02eeeeb64f57f544b929290658b8c41eb282c12f89c4c0f9985f7b1860234fda19d8e89e99afea57665ccee286dccd45725aa720389bad1be364717e6e3c6786a68600cd89b0feb59746c9121558c7dc852480b24aab1fd9df39f4fa523e0928c6e37445d06428ae403118078237125f8ae37104bf906357dadfa1ca8bdbd8c97584ca8ffd24975392bf63738ecf94500ef0a45793469bf71b22f7b4f85054fd349bf1ddaa9b3f074f8aae07805e225dff34b51653c0f15ad1ec25d4c8056d6798c651d59c74090c204dec1127a3bfc0447ed9d62d74d42e145e6ec8157fdb35282f1c9e0b76e46849db528c0bdedb37c8b9179e0d0743b2619e5cf192cb7b107e17545589f750e6dd7843f94625ce29f45e1519ef8225bad19033"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323330383837333139"_hex;
                s = "9144b6b031bcc2e5f3dd39370addf3bee26f9280b0c10ee13f022953b230be29dbfe562dd83d9e770c0670d074139bfe57f46b7c21d2d1b6e8087fcffdee8886546729d77bde5bfe6180f61f2c64b2d4923c5f18dd0fb839a6313020a7a885a75af0722c680a30b5e3d9cf19375bbf71b46db989afddb9e7a69fa5936d80250448ea1aeb369e33f1bbbb23bfccb25ef8f77ed87f76090eca682e2b7d32db813556f245fe6c23ac7dfe3cb370eee8b6bf1c02efbd98847ba8da6b175e6c2e8f7dc17a0cc21d776bb24c4150a439a2d9eda4466f23329b3abba8d892b18faacc85c8721d825aee636083ded2d5246b57fe4fa902923e38ecca5671a3c6aa26d316b195d9e1722c419d8c6d8c0f8dea9bf5317ef53293aaaba09bf22dafbea463dc527d80f483bb06652ee5eb160d5f51d6eb48444982725205eb96cdf9deb3e5e96e7c338237f83a794b0cab81a46afcaf986311c34bf7f5a8e9b43b97061aeda0ca2b13c5b3554e6f93cbf5843812d98c6b1972e2afa436ff3ef0ba36a469b7c586b1d5ecc52f6fdce79acb8c39ef673254b9b565819cde45569a60603e8c9f583f9e9790c6700188a6b3db41776729038ca8d8f1a8318832a91c964b74465cf3595c7c9972d2bb4b530e21da75882cf01e55f0fca4954ce1b7ca5d73f1da6d2b2dadb26a280ea201bc1e9a40da15f9d9ad78a5fbc50a5016741789d624fb3887"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313239303536393337"_hex;
                s = "100622187bcc898e87f6f272932a6b46756a0984294ac6acabbe7dcbc91b5a917c8e66bb1b215923887b2f2a5a4ed73aae181b9bd93bb7044e1a4b4ad7f83c14614b9eb1bb33d372fc7af70867868c973dc937060e7ec6464141a0ede77d25d602aabc2a7498b20c6e8866f88f01baa39d22047d21f403b79dd325e08deadedac1d0663a6997e61ebd34bc0facc1ab6be2e885b53a76b34081d9f816542afdcfbbce026fa8621e15e88c3829789f0aaef787bed709ae709dc8e950b2a7c6246532d7c80d5213f0f3963fc6e4576c0be0111e491fb6e07a3d7726ce78b8016c4cb84b043f672291574605dc3cd06f65195cdcfeff14851437a04a25e77cdfea8249a8025c90e3ec56ca54973e96870c444850989ef28a20227d459d9de8c76000cc0d5bc1cf8bce85730d3a01a68f4c5392fca2b2180781d27f6a23e5e571307a4ff3747af226c1da1e9594c68049cd888cfad31d854ee695cec86fa234856ef129236f9ec7525aba54b353b4e1b6bb8632e4ed786d63c9ba3e8de333ddfce5fd97758692c0079482c0fc6b52951af966f38554732a1aafdfa04a77a7b76419fa9ea60dc108d5de7895d562e78d9115c498f0ecd8bb68861a22f8cd8b47cac1210d4362c404210763df395e159db96897279664d84770382c2014dbe19726664ed36f61d2e8e4e1e7e0621bb5215302fadca96db6f0d79e908050805990b77101"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32373438363536343338"_hex;
                s = "2bbc4d767cc945bf2c29d98091370cc283b6c0a0385f2308fa22b6c87be478574a82397fedd9f12a68e57d8a8694c46762d989f3ea4148da77e220ce007ef53415755149030f175edad2ad35dc1c16c163c79aeb5e5406bd9262c286e27bc723106c8c2ff48acf0194b11308b700493d0e3d3caefe743e6b23d9a9150680b962ddd1a98e308c4b6ebc21af02a37fb451831ae8e22173ec8b78b9d6d8a85a4ed13b9546faf1fafae08888202e01c737cf8d50b2f8e197db72262bb0fd7a5677ff8934dc20e6f8778bf78c29c0381ab8ccea24f98dbc32ae4255185e817f27d235c1d954b8da4fe6c04ea6530ee543b60e1db17bf43ccd3abfd70f0ba183ae065f6464bb590d6f2c459455e91a90b23c46f30231a00546d236c9a8d0a495c322a73dbc59aca82895993bcb21167ed5ef11c36c6f8a7db09d80f827e36d5d31f71feec8c862d3caf837a940ee3cd98a29887959b02b62111ccd6cd13d7d569077fcde4f6a48ca07d0efe80473508c1b2b10aa98eb00b409126fcb8b8c172c0ffe4465211e31d8af6ebec91a6a2f720bc17f064dd3782b0ee6f0a64e711a7c7f3a20ec5c8a1658d75f48c36a6a158fa7400171de91e3149e5c09d0bdb86f34b98bec418f31d982da52cb995c2e3c7c6d15fe14487e033074069f7d4e9728ba85558efb48017e4d4f8353055d6a4612655c5171dbbb1839acdaaad7988c1a9aa2e967"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37353833353032363034"_hex;
                s = "b9f142c4d82978b6d25446a8d7633fbdc1cf4fe41de210de3784c9f0030e07858d992ddd8e21b289a4094e6f612cfedcdd1ef2cc9c10ddf78230f0ed2dfeee1987d47b45811c2a44a0a1a1155d8e2877100797e6710b222d1402e7e4cdeb09b09953ca4f5a9e49eeabb79cc4175c33f667665fa2713bb589fa54d284f544fad0dc09a3decfcae813c1e48d0ae5c63889d00905f8183bba916bfdb9de548ae807593319c866b28d19c5f09c32f50cdf782439a1781f9c1dd26074c48bfb44b4b42d7dde4997cdbebd74533aa2bed5649d0176a1d56286fd492048e44b180d8374a9f5e0291edcff5ca6f4b6ee7648f7720320b4bec6c08ba6eafa55da7a4d176cf4c1764328d7a4dd33a5130687ac9a00395cd3c5f6bc6ef1dd14301252752a37414f98d476018654e280657e14d9d9db6785497b1d666bc22062c274da2cd0858e29c6d1ded2d59ff8a1f71404e117050f19f07bd58e98e082d2eab41d3313db4a7aa04e4cf572c8cfa1b41826eb2965d8bf8994715974f80d810deb67288edbc5d9c8ffc5e43d500681324300c55cc056a89d5303abefca46933570267b25583c676ea2d05c5768cdc47f1f45e2b4ce5ad06a1f59d1a13d07e44a38ccfeecc4e86ab76b3f12227efd81bedb5a4899c2541313912a91e907c09122be5a41c54cd4d2e51f32c2a333ea66bb3e91f7a30c2bdfc6282fcb3593176e818586d28e1a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333237373534323739"_hex;
                s = "4e4d0945b118bdbc1f7e01904a5e99dfe7b83489a07ba0a626032e5b86ad6fd3516b1455fbb67869d2b4ed1e85a5387bd2a430432b4e6c5073b81c241352cc1baed970d05f68459d9b3899b9e171455b19d9fb83828644f913ecfc403172c2f615be8751ac083d906d2b7f62b8894ec786afa3594df67ac4f3ae9647fe712a20a13ea5e980e0cc1d57bfbfee2c54cb8ee7f5c73424760e1c7819ae47e1527d0eb326f6f00ae38a16a19f1b2abb4c6e0b107c1bb0b4252f4bcf6d354975af40e5eddc537ffb6a64570edbaffc3694b6c92d8e82148dfe9a54ecb101b130a5f9fc6d10f20d402aa9964308416a2cc35d45676ed8279af31b0cf720245378d7608830340a1c2704ae2168358bbd748cf0b4b4a474cae2c88af8d7b709f668c3dcb42868aa44d69efa33b5b9e313086a65facbb60699918f2fba7c333a10082497f563084e8b5247837f46ddfca0489788a813749ac96455b849f8f46682fbc43a995d66b61f089027a4dfd758aa7bb35569379151736097488315871a665910b90c67a46c4b3a7c9f9e6822d8727418952037bc8299397b62f3464b14005f966ff7e562b967adb4ce685bed3ae3fe9cf21de851e1463214446c1e7d2dca710354533ad03c99478f3e199412b45e18cf0e8ccf75d5cb3ee2e8df5eb7c9989fde7942df9ab44db43795e5b969a31724d0ba80dea62adc63c190448435699e2106ba99"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "373735353038353834"_hex;
                s = "a31aa9ee1f5a0304ad55384b6d2dc8f36e834b191d11af3161b94a030b13d854c67d775ba612c6aaf8d2be1390ea278babc8409a4ffaa8ba2a921a39344b7868ec9edb1e7f5f268a4ac487a76f3fb72e48d17116d69ba5146988056c864843d84202879c2bad3b7d4692e42a82b631c19f26e6ed7c8d893ba18dfb92438e02be12a4ff40e57c174686c6739c7f8444b9c5313fa9686ca3a189ca70f9920ced387a97d7eedd6e4236ebc259b0681bf2b7d72d7cc22e3d8e93dbc8a6a28485f2777563f92755cdd9be8508c8a79115f7a3d3b6ff68120981830b409fc61d23a347ec14ecf157e34bea26d11a4c1d9236c6ecbbda28271d1051720db1b794b050cfe94c047ee5bed34dbabf1d13ec9918f20413da37adcb66384f6f553137742bdd3f8037c7b7f50083242616f94513aedd9f8f7d4437aefb684c5ef02121548f7522017588818a819abe5dce74dee7910ccc80cb99efc2c99ddc6b07f7aa17524b8a1f3b51712d0ef8faff38371b13e24aa4a93abc44996c29557c4c0f9316d5a61653d6917ba3fe8c3ecb87d900357e3bcae5c67b93e5441e8fffab1f4065e8e31ee3b7f5f5c137db32789913cdb4a716282909bf71ff4664c1cf893784832ba0881616f6a2d9ddc462ea630774774a4e2ea624404a71c5bfb727309504c970ac60b1ac551943cdcdd2af2e439f7720a37ca106e693ea7a18ecaf481194d15fda"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3137393832363438333832"_hex;
                s = "b243ae322497a9009b709fd8b4db0945cf655958d3201a4989279bcd06f0b9e879ff7545c9019752200856750ada1bfb023d492eb3b13aa9d4fa4de753e7cb3c261f742ccb79a23076068b53ff91c4f1a5cec0fe26adb4df0d28b2c9c700eb6a8b1410ae14b12030a7fea4bfded54f2fb10769e29596485f14fa0b58e440d4b03a3da9cc390d51da7f23ff05159a1378b81bf0816884b47ddd98608763b1554d15a05c535b4e2d862d236e58c47369337285fec82ddecd5040f3d4423050b08c6eb1250ea7dceef1d0f76934adefaf85e9e403777c5a3c1dc7d25b61c78e6e9dc7fe28fe3231156d058ee4d77248d31f061b87ff63c958e34c3a7db880a9e7f7f8607f5e18f9aa7420a36aed27e341f6202aa308e625db2c66a354433f8c0d50df1bec0147481780e0c19c2192ab6547c3bfaf237994621ca2e2a5def1813e9f5a31db8eda86a6b78ac298d6a468126a372939de76679fccfd7e70e4815f4cafaa4292fae6be941c9c6fe114d3256fcbf27359b8230c07767416c9920a39893d6f39b9523d87a963cbaa5424907a9cd2a6d2f2a8a0cce52eaec6ff4ddd2abe1df1ca7ebdf77407964fe113106e23e65d2fa8203f4fcebe291677a9262480a7a2f9ac24fee57813ca0a4cb6e76cec07c54115769ad3db2a2acf0697e1c00c431528d26ffe9a4af263b5b7c0505d2e3c014ad2483caa61592b98f3d616a665b8a8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333936373737333635"_hex;
                s = "c29ab02b78baac0eff29c99492b90af4401377140b9ef11e7b5f8f260835619c52b2d8ddbf532133f6051b1dd7768a3c46f4608ebb216d39437a94992db3d689f32ab82d225f5ce8d5c8cb9d55dfaf9ae17635335bed9cc8e315010796fb6b824cbd54d0441d9209fb5aa07a294a068cc7876a7caee05344436c0ddb49e75882f10239ea75a73122f7799eed71c8d13dc9fe72942d152c9226d66dcda67342d7740d342dc82b6e56f1c291822c06bd4803d27bfb56f453f8e3ab06c816f6238b1ab9494d00bb62785b709b7619c8e601e56a38db74e868ab0f3106cc8f529f12393742ea02eb8db7314a98fcfec71ce630a77841c4e6110015d5dc373e3498b9594ad0ff92e0e54e5dcd3c3070ea56c13a096618dfa1f1cc2015029d45b67049f6d13eaa4caf45521c4b43a2f54b552a8ba9488bfbf6df72b94dc5298ead25ef281f3fca75d2d7af966d41fec178870a9fba1c82919919b8323b405c1d5c8c57a659aa516f76f0764f68c8d38a19c4991890da00679cc306bd93c37c56593ddcf205a97e03f8721e393e0410196a96734f791dd3ede165c51bfbf6213fab3d0e7e3df377f271b1f75539d9eab4e05d1ee01a8b976b821564760d6342ae9524b4d7130f901756ee14f43c0f04f334f12c74375c9ce4f71d6de8cdd1d8fa5bf5c8786219dc043728f03dee4379ed4d53ea42cb8eca8cf9cc8c3fad34bb1a009da9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35393938313035383031"_hex;
                s = "679e642c924ed01bd07e7edd845994703b3fc010271ccdec98af34e982d34349cb0694332a679c27c26319b72c47aad6042756fbc80126c56a61642d4b2b3e517d2a2f11887c519b154687b0258e38c9517b7cc8753653b917de00d1c24b49e379aaaa8d3fcc22a34c61ea943c2cc89d5d8f4f26723e0c6bc9f6a4fffee8235b27404705b4a3b2a05fdd7dea72bed71221d258b54ead589b1a4c817412537eae62da565f256c2887845b2a5e8a0b5cb262a5ee75b912ed92db592d6793bdfcaeb6f13a6eff91c34d4532d5a82ab4a1612500450ae86db3d779b39ca62754f8ebb6006cbdac9509300c1e08c37063a00f74bd3072c5e40245bb3504c838b5c5850796125dd6bf80f5c6c31a44a8ff0f752591dc380c2d64f45c0f6b1743ec2a5bb11b73c2d44a407f640251d205144506c475060d7a38d27cb59a15f117a85acea81c24604bf1b52fe5cf59af11ac190ded3cd5ca872e498e3b2cb79cfadc0353852c0a990b2b8f9bbe5ed889947893f98fc11ca7e0108a8da721cc824b148bdb9d389552f8f877e64e5fd3c002cf63f1daf4494fe296dce6c0f92d8851bf5624e9c5eb3d3c00a9b15a7f6f7044462e2c9e49d282e506819f611d531883d3e2b450433ce253c1ec62af3eb47bcbe810598dfce8186a6e3eb1e9abf982a7f688b7241abed0d772bf435f79b77cd07eba9bb17d85a76a5db0be4f8b97e508639cb6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3136363737383237303537"_hex;
                s = "afd9f21fdfdb2d13cc4c0d15892295645f14fcf7cb079f3ea2f5f5a6429fbea3fb218c2b173fa1b565258733b7c8ec5315afdce931b6a7b7411811847bf4b8031a6e780a25bbc568a491700f19d6980efdd44cbd6b421cd696117e150fed70de59c145a3091a835e8dcf086f9c8ce38f43e30149917fc4564ebe408a933323cbfb911dc06e9b489a79451355b7a4016c4327eaac7f4099c3ca502152dce7c807dbdbcf4d988df3bb722d8fa6babde785f6a45fd05ae72240d4f674a3cec4dac1c8c7faedb88ed10a2776769f217572fe06e258a4cfa208706deecdc86b1ea62a823bf9ceb0a65f5ebcbbeb92b273259969175f375d4377dfbf92668acf72c10bb3f2f2220d253147f4ed0f25c4a6eab394c07f5831796522c44c3457427c47c40219ccd6bc0492a694af6b520e41c6d4832c9ce9e4efdfbae33daa4c1f2c7f3a78019143b2f01f5ca343304930981bcadd2d526e79b5623901033bbdc58f6ba5937a8d7eeabe47b889b5b0d10a85b3789ee1f1716c3f6a59552d9c0760100ff598c3709dda142443908509716205fd97c7e417636ee522de791b4ad39ff58bf6dc2e7212c93790034ed6494f1e6f293cf60dec30d9b13fc331912a7a1765cfb74cad7c67f21197a274a8f75ab817857b8cbdf4b5d0ed9c0938ea0c539f81dcc3d7315fe415b562d0afdbbdce1e1eb8ee6a01c8042d8eff1aa4bb3b0d319ca8f7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "323036323134333632"_hex;
                s = "75687fdc305d3dd6278c0cef3bdf1d62d7b5b047557170547d3021d546c86fa682e86def5d5ae432586704bd3652b2394563ae2a1bda25f3d490ecd4fe56117e963741a8cffb6bb81b99a3aea3924c05fb957bbd19fc76a076ab78fd6819c981d2ad2ca8c19b5a2a2bb2acbd864cf072f5d7929e6a02a14538c76442302cdd7c91e9fea5b650bf9eda222820471cf35a1af32415151996bca17802249b3a0884eecf58289695f1ed11a7e83e84641f1a218002ee292262a5fa48bca7e64c692d614590f76b4d08e7751d3ffa1b57bfd8708decb244e63b0f99abbb2c8c47ecfaaadb2a52c760add96d84332d0b995b7771775a926e4f4ebb2c7fd0676eacdcb261c5e47add0ab63c0eecd5cf9e24ca6d0264b131492da76f583e77dfabe06d87e2dcb97f6a089f1c41b594063af185dd3e8d07ec8c1ed03b4c91393cabd425cb1c220efb5d500ada045185b585189b2f33e7821ab9fa338f00c57c0963d0a7821554ad0c7d425e636c163f98cf329c1a458508e5174008e1db2095e9ac5f24d18ef1455ec40e8554bcc37289e55d98710e4ed764142c86e0a9e18666f39ad9afef55c623b7eb25c2599ffa25529a83f33808bff9ecfd2eb2b73a4941101b5bd61db7a48ddeb1e3dc77b8860234c0d14ff6109bb50b21baca14e3fa29ba2df7c9677192e833f71bc389e936d6de09caa718c9fd5d66fbc49000ace60000c1f2b9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36383432343936303435"_hex;
                s = "146174ae8e45facdd9de77c544fdfd8762f027a3bfbf551d1262e20e253ca2a2023d541a306bd077f1b0f261bc4333edd14154c6b13f80e1ba5a348b681e93f43f49d3910849777d244f941a060f218348e1f546afaf88bfcf5c9a2eaeaa3c459321c95e93cb461a043ab3f842c3fc5b0a94a057a053ff8da132aad03ed317d89632daf6890be864abb01a26ceddc1491e50041d274518719c6337c643c1a8403a0dcd785c8fb3f0487fa3736bcf7930a725ea01d99bcef4bb1eb606ccbbd847ce3e757417a64998478e22171293c684ea4b697dd9c0ef148c0fefeeb43adeb4b853c8ed9980157f6a688c7c43e0afebf189b3e28df1d23808f566a49eef5a40a5e34e6583f136a66a86028cc58ec2078aad28845c095305547a4f96fa3fd3836723d2d3b9e01cb224ccb3556e5a1b79ff1794bce2e23c921bf7fe40781f213e8359ffb3be12fe05f1d238d3283fb9b8f9997e2f1baf6acbc5102c193557eff82f27e46b4b7a11fc865148587fff8def4dd6d3a1643a1929175b0c9bcd9300f6fdc65c3546d36365cadd0733a9463b98d6dc2b1c2dccaac42b9136eef10c2e863a36337fa107c5533d07d46c6870a3e0cfe398df26f0c42f9c7b49567316dd04c811232b4345d5f069872a09a5abf5d8bc69a0a2cee79973abbed56ba05bd7d741b57bb521184e32efc10fa0549abb2dd7b731b38e2839212ae6e7fa9d0c9ca2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323639383937333231"_hex;
                s = "5a466d26dc77549bab3eef2f1b8a8a35ca7701c346555f8724cc8a3f878178328b5760be49fb386f74c9adc32ce591249fd49f4bff33020f607b1dfd9d928538c886d546a7fa21f3813589079512813a9e3453ccce1e7a11e153dcbdfb5048dc946a1ada3e6ac0c196e029563fdd953cf8b70e241cf884ac2a84e2044c0aea5acacab6aeb884ad8494232366bf2060d21848f3f94bf8273af10632ccfd3694c2486719f0dc25f7c561ec8a0fe32d74b5f914ce3b90662adb057561400f625cac5e8277aa691b6f43e696c044ef2890877e89725686ffd4122698673341c8afcc9ef0402ac9c5702de6ae205a16c6b13486a4958ed202a6ffa855c2394b1759b3266d5abe9e87c5c4a2e2a9fe7f000e2d95b0d6e7bbbbd70a27a8f7b10c8b90f07cb5e56ab65d4741308e76bfa1d3e5e2f87e6de199cce249138609b4b839151bbe32876c0d32c777e173613be161f5f9aecdfca9877cff6a4b067a253bd4a71435d6413fc5b8f9913beba7b90d140ef54babd942eb89ad5224413b7f4c3fac78a8c20d4c430deee9124467287f77b4634bb745902b352b7d3488044fa1cba59cdb0e68c44aaa3a07d5ae846f6880bc65194a7df3aef0bfdaa92313a23ba7f28c78ac68212dad80beb562a70bf8aae3a0efa51c653dd5031c40554dc96276be9e0ad8ff0a4cfdec5a0e4211bd161dab69df483427980f3ca1a3e12d56ece7a5ef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31333837333234363932"_hex;
                s = "3b08c38ba55aeb6803801c01f89df79d7aa3efb698ca66b5a9f55b9e52ef7258c23959924e2798c07bd3f0fd6fbf5e1ca3e9f6f9d792179c35f1f7108912ebfa23548668948a196f5a02201aa1e02099ccaad7a14b7f4c0988dd5592f9a2e8cf60471eaaff689b25399819a59ae2df374fc8e448d59bb494717b3f95bbc9b23021e0a34b77d3b9050059999a079911935a5c6706d55c3432cb6f709e4eb68b6d40caac07e1b2daea7a206e5b7a5c81656013c1212ba1eb319edf48bbb49c2377559fea90d9548e64c0bec9aeaa217f2a3296e68ef11bd5de9a4c3fcad76a77ebbfaa286ba64a7d547cedb032d35156b4f642263084c74e6429b6afbaba99d5a3e5c950b434390efe4c6b5f207413a3136dcb76c11d35bc403cebb0c163ba623cadc2a8616ab7e64d315138e8d6f2baee4722cd42022ab35d178bc589d8757409b3cb87291d69f2efdeb9ebf033a06390a8c94131b55dcf83266610b417d9d6f3dffd6670f5a1162f93fa42c644968c57ec53505c7f1f04054db9b4c7079f6a62b75180502b344d3e961c9679e9c4cd5b99e890f5de3a3da56e522fcc9fe5384430871fe8425cacd0bb5f2ab2a4ad12c734bc104dad03086dcdd7531e83a41da218d04f4d2e1bd690edb6d8aad35f0bf935edfa9aba16f17a0b0155fbd1170d2b1aad6b7333657dd77406c0fc7448726e1a3ec6a1f9c1992766ae64fb0c59f9a7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34313138383837353336"_hex;
                s = "32dbfb19fac38e2401a0f86fae82b3a2ce6393aa7ef84559ccbd9fe9577ff2b505a238d267207b6746544a0a455328d34f0128c51e347abee033cd5830b8e8d8587f43c99ba3145a7b24d60295e2f481fadb03c13a9055a8ee0aa207cbe183a4116c087fd0cce2680a5629b82e1168ee0ebc1ff3f2f32d22063458db9e72f0307ad7a4cf6570f400e5af4c8296db10642439fa224fe739d454c3d7e1f14149c20752bfd6ea6e4a1aaaf8814397c17458bc9d592bf8e31562640c8a687cba5258b5c28517bc84659f6f7712874d933f5d72bd0cc48244e45f60c217562a22688ac3324d4b3f3d06812b3779c7d5107fd841a0bd397d6316918232b30be3fe605f459463e7c4a4d3ee58a164d9e8b3b2182bef5310a3a9adf6355cb7c089e9e0e3067691f340b4fbe99bf43d88cdadaada66f908b5032030d7a2dd8c62cde7378b57f77250e051398b96bae267c039d09c9a64a1a1aa86f47244e5c50bcef9ce9f280b6564cb12eedd6e25cb14a17c5ab2fece54bfb7a8e279553819796b9f54db9d856df8e2a63903eb4b2afc56118e9ca08d2fcbb51e48cfa2c13c0d3dd3f9aa88eb44d5f234e85bede5ee4ec0f00b390937afb846adacf6413a39b69cd178429a900a889ae9d6baa9954acc39e07eb50043b0d2da2afc476c563fbb341993d2709a3f0b4f4730256be509966a2eb388be5e19c3ac002369065c5dafb0215ef9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "393838363036353435"_hex;
                s = "3be0f335507b49da7afd6dcbe2b06624c120d9a0bc932f0005c2120cf7e8679046769bda85afea28a2ac9c3f2f84c44536e1b2548920e4cd9cdb649c0667887e9d2c22f89ad31ea98595e7007670bd07230552c9ece060b6e81ca9ec1b658acc9e4e67bc4529d236166f8db1b04975a979ea03dce8f8b27cbc7488ba29f7c721ad2591652bd61f8ee79756f7b224a7e6d3715ccf03b1ceebae35f86122a2d29e9562bce3acf2251071bc85427cbc194be3ab003264dca3ac125d42336e1788695c30163369e76a062b1132a83953239a7eafaf6ac878ec664c3c880c5826184cafad97f2e56e37fd99148e7f49979079ab66881ca4a4de81c93ce478920c18fa4d8a13f8f4476728f654ae64d1e47aca5312f16f3c21a8713cc7edf0574fb31faf924e6437d7711e856761bb63cad0378f492326216509f89911d1417bb229eb1b80295405d823369313c7db586ee093b73102306f274fd30dfe0f43dbd10ff4d6e56249b1b4e94030b341126499c6bdc4c8d9ce576f4b67a8d63309eae7bd610abaed353431b99cb01369cac1ab65cc225ece172797c15e4f8c196513feb06411a69da6390f5085411f3d7698faa6f27d9b42fd3cca1325f60581997f59a595bba4838951dfd4c914922a1cd4d4dcd790329898d98320167493227bdc5f99283c1578b0b3759602ec756082087db4cd80168e86596b9e79c352398e315511e3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32343739313135383435"_hex;
                s = "73b8803ad08e4c6a3cd9dac9258f5605e401257226e742aa2a99cf037f6f709bec97035ff2f05068dec614386d748711d14d5d197116e6740db4fd2a683f44060b75170db4a4feec7722dd58e2b1de7f6463993db74fb3443d4f8a95637cd03cd440892b0786aad6e990e27931e241ad0133aea2c3c3627962f1de5e84f51073db29b3a7b0a78543a5d516de42190d2976359d545640bda31a7c7edbc4306a981a82c82408263401f0d3150739b477575e39292869ec3095c6fb19361f9e595548165004c172f29cbd2c64b9766c60c50d37ca10272a5464d2e5bc5cfe4aa00e3a7096ab13f1f4c9a3617739d084733aa721b8b4671fb05292a58bc04cad75594a9bace87b7c39adc4ed41d45047561d4d3ed4768dc5cea98b163c0901cb33ed38ccdc3057a220feab057bb838f632f571a859af40e50289f48927c71999c1ebfe523f354f282cf52d5c4d9822409405ba83f1a043f61655b310fad872a529b95af93beb44f6184c1a4e5a03ae0965cff663d0f86fd2a80aaa73ffaaa14fe0e9a9333f4035e19984bc8f70f2eb55dd1f9047786792847213326c63403164b98ba6699aa78ca2a8bc01a8f61f72df508244093989e7f42dbf798cfd39615193f53979180adbef6f9c9b3021bbc930f2cfdbd2ec9693b58c48fe1bcae2eee85c217d356396aaaabaf623da6ec9e571cdc1ea303ea46f92ff6a1506373f06d4c966"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35303736383837333637"_hex;
                s = "878c929a51f3b16991dfcbe548023dd6f04071f12af272ba218dee01e7a9ef03954b96944844b74cfce6efd117eccae30a08616ed3e861c8008a62e657d7fc742aa501193f5422fa72a191d0d0c35d291135b2b4d5ef3b7c48ca24aeb1bb5ae5af7ffdfeea547b665360f0b8454a8b6176e7472b6f5bc83751bd2026a7b2389974df5f1fa6ac6b723125cddb2c20877b20d7811131b6a55d3897c6fe6f51184ce4fc81a7e1a27cf68ea7d09165756133b816661df4e0cf0d75725ba43e8cc1217c0c9f36dfcc48b3170c0cdd9b501f9a0d56028a97fd64e046422c0ffbec7418bc862319c97e3fbd76982c883ff51fdcb1989f6b1142602469da7b233d43f4bd4ec6469f31cd9dc4e88ab5b79ab2859127d56f3056dd4c8f874fafa22c3384fcfe4917cb025234eaa045aa04f71cd8822510e7c9aac87fcd5eefe96692c340719a943e7800da9b110efad869ddeab00049114dda9234322530253a51c8158aa33b3cbb4f627fbf22e51defd2ae5b0fd1cd3b381ef34666b2143f95539b643adf0d4d80fc0102c2eefee7f32afae7b56b1055ddb4d4d107a6772c7fbba366a0ed279b86c446123e93e59dd0a28b9f577dfdac73ffa3a15620519aade4e820a9f96f139925bc2d28b2fb4626e20a3740d14be4204af99b7c96f9b58e7420b23596035614b328cc24906fdbec7920b3a5ec970dc8967151d66d74cf086687f08cf8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "393838353036393637"_hex;
                s = "56027ac715f84d90625b9328686db3cc420b10895abdfc268a79c28419e04cdad32c43d2b03eef1c668184a5f86cd3e2d19ec2eab6a9a7c939bb196ee561b78424aad717aefc088ccad4c16dcfe5ba3b077cc975842d25ce978da5b928f150612b48ecea8c3c6d2e9b66764fe546d8679b9457a612fd54866f01162d55c24f17dcaac2deb33d574b845367cdec01cf5493c413ed9fe39b57337ba66552089fa29d89ece7459c95ec78f867a05ba630948338e0f62766772e2c33d833b6cfd2bfc745f633f4090df27af41e0fc7104f50c0273459e192af9bab5ee32421508ee52d951ed93676df9a0fb5078d79ca8093b432216a2ed1e72e28bc9c8bf0e797dbe39563808add3e976ef8dc0060a25db2e812e89a857092d62908aa9a6754c4451a86e522749512cb6d022bc9507acc6a1a31651f84396ef912eb7d33093df401ce8d78aa4c4cb69dd31665f3204fe3b271a678d39555864036d268f2f5cd50d1d313a2488a7b191d702e2c38cc53ae01ca644922631ce517445f3b6089e7bc94a6c5a901ccc47cd61ef992cbdd97db1b01c0080db2d2f0349afe357ac85dc8e2adfd5aaa65135e5e3da45292c5f2cf8fbb290a0cb4ceafa552dab048c30f10711538b961ce3a0a6fe9df52703e9ea1774d39aab0e1456d8d7e61b8012d88f6e93ff5628a4b5ee47900d3a0bc634a0848b1691c544956f73ae060529dc80a3740"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32373231333036313331"_hex;
                s = "61f6c2fc861a3fa3ed57f70c7757b93557c8c5ddebee568d776efbd6ee929473bb3a497b26bc401f7a95cddf419cb315b8ea4c0186dc1931be231e5ac93909c984a37be5a490a5aaf024de3a3a1823dc8ab25c63986f0b1fa9e8d32b34145fd06ba84f58d4ce4278a52cf2b6e5e141398122a0a1856f37e1c52a6c12e4045af214bc761a3d1b03d6387cf5c3fea781790956d70a60fe23355c02585e75df56876d0235753590afd93d0807d088bcf0d7c006c2ac8b0a9e69abc3b53ebdca6adf9bfee6103ae75d7f745d926646477461cbe18a5debe311a2eb03815ccefe6f9c2ef1922839201e8b89eb11829823557916e8c1072a4f8018f18ffb4172d76250943c5f39a3c1829b3a75c9c19fdf266732dfb5402a7ac125a45ccc90cdd3bcaf4b1fd1e93e8745e571b4721807bcdfb9cd95a79f0177fdce0ab84a24761ea59c7993fb48795b28dca8031226f2cac62e9d90f76040cdab04ed48ceb64e24da7deb5e16b255fcb5e464b1241de5f3b0c294373e8b57c32cd12015987c6df7ff2189614db810bab871e455fe935cd8cd2b282c686131b1b0ee4331a4d28fab974287198af800ca065eed9382f071630c0df89924864fe84ebbd1a990c51a2e217689c3a9dcab990455345ac785459348b5a1d9f6269cbf03ea1c00a474c81d48eaad11a5c12bd1252d9ab50d31f723727381f063f68c9d9158db3f112114d3f04f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323034313031363535"_hex;
                s = "c24f1342517ce4f4827846d7c372d284baa9e3caa72f9eb3fc0f938eb111779982dd37cbe90dfb3164d782839d1623be04f03026536279c1ba0cb2da868c8fbe52ae5d775e4a1b66a78d83aa228593df11651bf22e95ba9bc1e2a15916ef6df3a6a3387f9577200d46d585bd69176afc63e8861b612c232420a03f1276c589e7ef56c5627352988963643e7fb8094890b6b5678a741cb10716848abb4fa3624750f61cd2f1d5a072d471b93a3d243cc0a4cab1079aa5c68ed1c8767fbe8669bf513b953e421ccebd17341f8689f649db6f47b411e8390c7158d5dfffe034c5d6e95f01afdd524305bf1295ddec2f367677b0a842120c4c9a1428ffcd21e6d313c3ad876545547ec53cb84a63d628b68cde87965daf0fe55f0973bdf270d4144f5bbf29ae0187742d5f0c83fe22ba9972fa7806d235204ba099f5a3ddc8c14478fbaf794c098edf02f06960375c5c11b177933bf20527bb9ecf307cc058c07999893a9de62dad1b97dc342df7a6d236b8df152c17e356a29f21f14e62735849ceafb16466b488b04aef85b27250498c45da327798aa12fe42077b6b29d9de566fc18e2917bad20b28240526f53665f2aa56ca49228641bed4d6e6c55ecc0794d50fae088a2a44383b1e7a151d85bc31406b43896f72f66921d925ef3e0abdaaa7e76196f384954a257c1c2a71a1068e6e40e5b3ea23a6a5c66ebf304c73aa14ec"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33313530363830393530"_hex;
                s = "546262fd614b171c287d1228ee8f502010ddb5e44fba513c40a6bb246d9ceb12b4446d989b7d33c80135ae0150e9c02338112529d4e50abe2b9f7cbebb4dfbe48226cfcb4383d6baaeb3d85bf517c5f65892a2676d266c1f94aa8e8fc3a73b049d2d9b5281d3d5df7673e466c21f8adb85e765ddabbd28b8e853a9f12cfedddf2de8c2e3354a3b657aadb840156fb99f33392fe249e48bea33239005e44d6557d0211530c52b783edf96a46e1d4b0dcc9a49c0229601a3e4e77d61d393a0c4074011a324e614c407bb913ad20cd8622b120045a4233514076f01b89d3dd83f0e3650b95c53c99c8d09fa05a6dd8ca169b7ca05109421f088274d9f51fbf41a23074423c8a2f842c1fe816d34c11c407f3c7517bb80f5a791d6d1cee09cd28ae5b0ef93fe0493557a80ef3c325fd740903c42bccd4647623bf207f0070059e342432d45bf304875743363803d480821e19567f748bd7dd34f7a90c4173d31d9f520c2e5c3a207478ab88332fffb0214d930035ae51458e8368fc3bd5de531742f4192bcf1abf861be81e4fd6c24169917fc691369b18159ffcf8455c7d2ff1cb2f891d26d016e26a8b1211803533a58fba27604a0661a4c296fb511d2307fad366be047d46508b193699369c742d0a1c9ad5a8f46dbe758604fe36df86628b41ada0ed102f2e1517584ee4d3b946c6c6d821749372a196f63733ec9126c8b29dc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31373237343630313033"_hex;
                s = "4c8a28cf3e3b7a64df8edada86372b445756f109bce23280869e8bb206446553a75ec99f774a02d2d316d6d19b7338921fa983c6da3bf7942995ec36d86728b400e3b5c8b6a80952bea599be2367b155baee9d99500692febc3da9eb83426797eb99673cb36ea4c39debdede3f699b55e6e5700d4b86d2ef49145c311e61925e625f8d2d415d9ae8a188a097757c6b91b5c224a940e811176db36fd6d4fa7713bd12cff54fd90328e142105e7804e45f533679ea8cbe4d62fa460719469dbcfea282ecb2bb90ff69170d7cc7f7e5d4ade10f6aaa0b6f960aaf573b68cd0d14141231642ce11639cdf33320c2f93b7c0dba677f10d11accc12f5f4117da89cb5f7eec2ff644fcedb69bdbf10875ccbb90ad374a53527ff23928a20c048c670e28884e7ed5f68e4e170a7adcc7ef085a3648bd3861b6abeabd115a1c08d4b88dd9cb7ba85250321fd5f700325f88968d64353674919eebdd9b96303fa2abd1009e14154c362912b5b866f345d727a6e16b3a74661f0ce3b603dd9d86f46e8e095dc9675d9284cd6373a432e730c392d726f68c4a9ef1e4f1da45c9223f54cb1ca795020c0ceb1f995b3c15ddb221bceae5ec4cebccac147514d60153055a7046df63fc4f1b7a23ca6eb0c68f2f1be865f403ac491ec230856fc9afef556c79422000bbf39bc95cba10ba1973d0c3890a43b9202521951d9f7005aa2354e3cc88a8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134353731343631323235"_hex;
                s = "4eafe90c9fdf472f002015535a5846345ece6d2c5990b0873669e5dfc4712f20a2a8583493dc12f0f1f922aa77ca414a6f739491fce3e886ce78febabfaf7b0fb143bf480409cea53de810070b95ef6f06c2e51fdb611ca99d16ecac3a6489de8dc8dbe603daaa12a8c528a40852f3b37d7daa86c7cfe2a51101c677daaab41dc2476c0caaef7f911bbe6d2251d3c3410279daf6a9d26844b22096f68b1c6baea9fd8513a4b81f74333c77e1a6f39056831d053df081a15cfdc8077ff6e4c4966174e88eee40d6762db816f497ac86fdbcd5e05f230b547ca06b657baf7ada083fe8cda5040ee7024cd87a38d418dd6138c2ac7c07c224f236c4cb8cc0b0754d22ddcbc9e7b1ad448dcd99931f5f5070fec57379cf83dfe6a9974f294ee06bfb5f7d5e1d345446c55b86c574ec5e6c87a84e1cde3826027a807a1351d674f0ae93407a23fc1f472bbf0dbc9a91781265d866d93c54be194d6daf3a748a40ee5cddc99f31d3bf7f198a529dc8918ec52e2c49516ca478683abff92d7c37462008e9051f8933b7278ba4e592cf9ecdd0e3f15cec8c4a76612180a22014e40c5e67b22c244183a714d879b4e5dd621bceb6f72fb7a2c9a70fb5c8aab42c9ae529018cba12e8214ba229c25de3d20e4ad03d67b531064f73da9c7956a714f4e01b7ec5b7bf400fbab6084c6f6e1956016f3cb322ce079dd2550f2d009f96e2a87c5a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34313739353136303930"_hex;
                s = "5deb38abec0f77f86d8e685082f334affae9bed923fd2ef6fbcad26c569f9f0dc9acd9a91a454202ac2160f3a48036460448dd2ce487149b52eb1f7a6ce4466894568dd18a40ab135f304f0a1ecef475d04d8623fa2a54466813e899d92e6dbd93025672b94382db4ae46e31be85b0310e00c38c7d59a798ac9a26b3499b88bd19d22aa00b2d4d1b33c9d6e1f9aaa5863087d9ff0d52c5a1a094e0da0af5a3a0e5a3b9d81d71a7020141580a63d8c95f2705fde7081820531577cc48dcea1a4db2a76c409f9783f37cfbe5e69f63ec9535de1982e07eadf0191faed3fb6c389bc263838cdc006be48299abef7a760e4c1b5f200a92282eecba8a0b2c1765435f9d5b098f93d3da779816c86f15d6d0af8037646c2825e90df0e95100f2b8f03b2717372d224d3cb5037564acfb56f8d3d9f3f79aecac877947818fae068196369592418cd3cd04fe80d69035a04050f3cecb57266475256020281f8dfbab0670cc60f03ae585fecd86e881cdf957970ebdcfd384bdf224d299b4de2f4373e2269be156ec6db947606496523b4dbe7d7520609f82cff421b99318742b3cab24179c563a84e631ead75d79b5eed30617c8fef57563d2170c612baeda07ae87734f12f43585b28306900c5ac461aabf9d32bc5ba8a4f517cd4f698a6b1899bfa0751a798c56b485748e0e53e27fbdda39b5c57b7a15060b025eb1e36664b48c1968"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35383932373133303534"_hex;
                s = "89bd513aef05a92a16771282e95d28f3f2df41bf3e0eb85f052205fb68ad813f1e52f26db9e133e0915d6e6cfe088f759895966e4ffc603f08a1385ace354de81fa1b65f7d4fcbdee4e7a2e783e8be44d283060537930194b5f3afe7e8705ba07e8ed1e6cf3c8d3cf9433c3a450e9fc6a8ca8e0979f0db12e4a1a64d2c5565f96e8e328ac1125263ee441cebf493e7cd8d74746cee96498870b06c920887a7ed1bd4e6bf0102dc2a027024bb5e13dbd8c136667f30a78371bda03feefe109bd933716d1c26e6f04dc1558492735aeb0a4e556e985641f889185351ae326d9312ccedbac133da0e9b68c5e86cebb706d15ff9fbbe0b7f1cb8d60a2e47c59c313a5b3e1755546bbe08160d18be779d62a0d0e5f16dd260e42fcd62747c7129873b08ef58f816587e775f0c8d766e9b9cc02422bc6ab67c013dac244bc8969b17c12edf59453ac3da8d0e8d45d9c62dc27fe1ea6ef961bda589199baf3cb8908e464050e5b6f419ba216ef557758b357a2c8cb04810f9b478d44b00ce058d07f88a123eaef9368769ea92cceb52cab03fbb4dbdd4b7b8bc0c02058491d997aee22c5c04a57a079fc184f7769ec790b13d8db444fd0a29a07f2ca2144cd239d532c4d747eb1aab83e1451572c01bc828895fbddddbe59b42975f77cc766269b32b23ed1075c91357ac5d82fbe5c2781f48056849b41335dcd60427c02ae66552797b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33383936313832323937"_hex;
                s = "b7c445e132cfd2f4bcc008c38a390230d95c141753588b85361b3b3d44c55fb07c248abd17212332e90e2dfed056ca72fa97769a503d074fab3bd81778e0115c30f799f1ae22e62903b3e9d528459441f128e0b9b7c57112abb2989a9e0441e8c328e12b2d6b7304e618eba1bb61ca84cbe8658f84798f3d5f54fa6a6ac0b389d12a14a2dcbdb54142aa8b571d5718f1523c05e12a46c065c74315eee0727a9be3833e13b03f637528cbd4b97b93eda3532fa461ed04ae542900e41e595996f45c9f083e1755a1ba56b5e48e4eb18f02d0e77083bccad8f37d432ce1e6cffcb3ce3254a128e8d2724fee750129875d3355529f8bfdd212efe10d804de30ad3d47f655eaaec3209b33bc87cfd13a2b81b81210b7b3442ca1a1a25963e9389979a5a75ba5468a2e077806df89d2305e1ac923ccb09e2491a24014e3ba22d7c141dd0a5642f9c7d1925d9d993270aed328c22d29936b0522330f3cf7c470e0d29e552618a5a9471410b3200bf967d9f27572ed52cb00d6a7cebaff85c939608d570d03f03f886d1c0c5a3c0a449add38cddd9e7492baa0d5207dc9d8a21a549be4c642e3573396f334c7680e5ad6c2b25d78e68730a61565874952a106e697be6eb832766d0672045979dd0633bbfb40c63034c845d47d9f20afab0a0ab5f6e0062a842d4dc84e9722aeae2e28656074187028b0463bea2b57f3bd9e11c4ebd1c26"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38323833333436373332"_hex;
                s = "c66f4a3475e8085140018aa928b82f998379e1f560bebd179132537cda3d94d033ebd1bbbee040c0f8729032c68c3c89e9061ee08f81cc1782738e55090af4a930d3305f7d94b54ea202360dbe2b222c488d066a063367ec0518ce4f107cc4ee227e1c4a033768be7914470128442aba0d628da691de2ee304ce40624d07a1343bb24caf641b1a44568c7e1b432a6ad393fd28be0458a65459f278a9561441104ddcde38155c14e684f7cf3c7f1a6b23724bd005192f4d1191029377902f385664c5e515624e694a2070d83893aafb88dbf55eddca32d9ad8de6213c977a1e69711dc67d384a9cb9145d177670894c353b8e24b8e3b0f152c2b0c1232045734ef61c24f4fe994a2e99876335e3c700b322e63b86b6a347e2dea67818d3d623e34bb458f2e92872224b4181eb91dd7bb3ef1fa4c8f58e682c8c148aa902655a7cc74bc525c2bad13530c95dfad47c3b04c5262c4cab47c37d7a011bde04b380c91e2876cf052cf294c39a9368aaeb7fe006ab6db8930ffb4f347b6f8d668606ba1542a010b4e7680291f423511c2cd56070f9df21dfd1428cec2083fa2c87ebd112156e47c758abf4aa5f1d2ff80d9f0959d4bba4955d793445cafcc32719e1c07f134696d9e176f8a5e8ea7230b733e4bf8d92beeff9c16e2a938240ca83aaccbd38a7beb6668eeba6d38afa6ed892825af57b15c03d936d8715bca54823b091"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33333636393734383931"_hex;
                s = "4eb8a9a99f29927e600ff325421379cbbe06016552e6444d8b232327d2674feae72a9744b9bf461b237405c98a512faed8dafb29454e5011e9d7429401cb94a2c96bf3c464cf386ab971d7f0be6f62c59071a6384f1681f5a036d3e5af60a634ef3917ffd9595e77ae6084cd26799d93557a8dae375fad0b28417321e1143eace66500d045fede420a9144da6ba040050940d9809d8ce5aee62d52e08b9a1fd24c081a405491285289fae5c1bc9c89e9f700224e27f2564560e511ce1488cd6b7f124ac55f2fe54563d1d2e9c8ba3cff29bd8c91dfa9c000ce709414874da1f4640cddda3df74ae9367f6e2680be16a7aff5b1e1229c4195f9db88030b28c16cc6acc9a75ceea46fab7bb9687b2e95f9414092a9be0599ec1660fd7b2dc16ec2f0f460ce6579970d1a04c1a7fc2181b893b76367f18bc11aafc6aac1c40abd4f87cd8b6a7fc3516f71edcdb794accda2d2f4e8b5b41f8bc80a34aa5ae3acc52e64aa1f1e8faa67a3d0676e67f904de98cb68ef9364920f2ea6e50fd918ee0a8dfc0c22f0a70034ec5620488212df59fb93e133198cb5e49c2a0c4c472ae4a7a9266290deabf8bf338eef0ece757f4864509e6c0f21f445c650d2f763d1ac47ff07da2630c01cad83eb09cf8aafcbc238f155bf511d60a3af710bc02b14640524986b00f0347ed17fd0dd0b05535580af9e0bb41fde72a907c042a09a0c310bf0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32313939313533323239"_hex;
                s = "707a88ab82f22de019e4843235bc3c5915483066040f11fa7dc7386d7e63c438eb82bba17d17d9b057a5a1438a84e181181e7266547774e9c5acd3845653e7e17847859c7c19f92c3feb8beb295e5af0bc300c1ef068aa1f9539bddf60bce8c42bc2e9cf261d074d6ffb444caf8f647d4fdd7bff2dab6144670bdc43fa7a02da09b800ed71dce9a931f1c47d9ca7a05896111fa4fbe99e96cd90b5432d686741fc63cf0e3b792f6370ff2572290673cb3afe10bf0cab5b9a6c971705236668927ac75087af78711bdac541b51497015aa482fecf5b111f1172c5922939efdd243fef2fe50f2340d56ce64a8131eac3d34149e4b09f10e1276394fa14228a16641a598f24f56327b04f33f47ff46715fefd02e6ff226ff0d6153019a1d337ebf5647d24614918513ec3b5dce5c19b9f1edb20abd38de41a6946bc96df81a4e1ceda56797b6f57b2e8abad8d938624a1d7bfd0c2b923603d85b71a59d041bbd7cdf03b02442822a8cc102268adf66cab432cd9a9838ccc3d9f0f39b71524045d8304a0af701426c5f911e6ec93657a9112a2d820e46807b43d7e6f12123d3ed9e12b273eb8da06149fb56460a2bffa1c1dc549c1e16eac373d9db0b35a965556acc1fe107a79825001ca189c7a171f9211fbb23be36c8c4eff4e3d972b7bcf682554fa5b54ec03187c008f31e51452410eb1dd28610414d7c06c41df1415e3ff2c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363030333136383232"_hex;
                s = "0f19053e699b1db95d91a30c53aff8a73acff1f08556ae2584655d006f44047ef8f609f26fada69446e133a972a2d66533532a025a4432e0bab8fd35cd82d47a3843e972e8575908c8c795b11c809087d18b39fcc70458bb61264833b16e2594e37a979d8af83632d6c276b2ef74ca57e451f1388fb9584def70ebee7fe7c06613241608af0c050182a2d21be699536f7d848ec75b37931bf5658054e40782fe5d371c66cd0b6fc23ef4f875700dba54a5b6b46842a4d9f10e35c0a7c7de671e7231f3171b1053c2f4b0a126b95a16be815d6b1a7944505d0ff8f99a310d6ad81e8d4b34e0af7f49a0247c654a1a05f85e91585bccc42e9a76d3742d0c1fd228fce9cdb83a086cbc2178e9df246179710d8519bcdd2679cbb4309a3ad2651f11af7a601d8f4636eb21aa405557405c0d8afd82c59c8b04a1863ff2e2a715cbeb36ff386e3cc372a15c1a2ae3c8c37b5bfc6a87fdc5f3092c0847fda8eb7962e5245288479f8a4f4c207d9410dfc0649d0a3d19d7ee9684e005c3f442b6be54496d721f860195939ddfc48a960c65e803d30b827581ffb714c1c0e69d065ad5ee649d7b081ea1c44b8c332cc85a9c8d06ff45076e4490454162c6eaf8950cbda55de43f09253756a53fabde5638b23353bbe5dfb30bfafd7a638a1f28c6f3d950562329849303faee555dfc585ecb7c25e738e28480ae628a9f201d5fcc6b0ac0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "383639363531363935"_hex;
                s = "2dd04c48f29bf2a05e6cce6c30f63cefbbcac6237c3c834d63e6a5b420a35dfa38a73a7c1c1bfd409d18d0723753f6b52d92d1d9bc0af73bd64b8f2e18095bd21324fe56b7732c767983390af0e1a530c9901f0fb9cbb8795ddd3ecfee57fe6df362ad953731cca8f67f155ff3d4f472f6e7d9baf8cbd753a1d2d608e97e727b0255461546caad684eb7efcb3b905e54f9a44bb29a1326a284885e78e1903e08202edb7b85ced6858fc65af6fcdcc660e0813f0cf6e2e0df30e92f5665032124c83338e4a45acf380cbe67fc02cea48e8581bb085e5f3e4b859161a21250ca678e8d4f0f948bd29656ed44a99b930b7c58a1423307ea653927572c197d0e953b568e340b04eefdc050a0d6a21007bc3155b38555897713fa39aeda9c1ce4145faf33698ef43325caf93ea0aa4581f02a317540ea66be2d3aa085e0777bca863f435673d7189ba73fee305625496e724c491d538df5356c09015dface1e971ad70e3ed35724a54c4fa0e615e67552d214cd97f5ef99611f0cec06263ec56ac45373ea28a01b831aa34dde5174422db8a70ea2c16a63212182ec5a85460cf1b23c58049a99fca24796bd9ef269476a20de0b91417743b0210882cf671d514214110ba341e47b91d55ca7a5a5f0452b10f38f33327c8943cfe3ec4c6f49a4da6ac0493f3c95d73c6a7d16848d009f0090034c50ef5f57843bc766228c5666e25f32"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36353833393236333732"_hex;
                s = "a32ce1738badd84ba6c3dbcf44dd182a7dd3e6e6dabf8e7057e50483da7c89791304093693f9fda47a6ff3bfcd42adaa727e7b8e74a4cf488f8111beb6187afd65665debf6b01bd90f3833112a7ad09a3916763994d182c1e1acc5a221b5aa0d3da01ac1b2ff8db99710d48dfdc1421f19e5f333b70d6dda638a35142582b485cb1f9cd60747953fa9bd7785302c16eba26d67f958281b5c91e33b53e7a506d30e1e06353c96ba71375ff7b628c03413692bce1433889202814ffc429c8179ddaf07fb9e1e70810e64ce91005f83f79142a8074894ea49f313bbbe25435e6814d472ff531bff2e00ac4b64097bc2bcad0f360674aaa2ce9882ab2fe29e5e7f5692864df11b4cd422e36cb9028f5feee93edd580d6dee12f09a8de6fb6ef9ead2b586f40b435643c770fdcc54d1eaaa4bd37f76ec8a65c7e49bccc5ac3dc9b17f470a7a5e9886fa669e9b8e5ba042b867789d0f448553c2f46f8b8c40eedc10d9d11110be68071befe123f254346433cee23fbc82c9b6c120e70970e596731fd459bdaab0113d9361207af5a4bdfac6fb839abf3b8cbae27330297e257bf124e11153b70a9b038dea270c99cf427acba886667edf4b8c2b97d0fd34b81749c02de9f049e414f12ac744184d45793e18d5bf318b159634dfd0dd7f94c226fd819745ae8bfa9bf50902bd0628c76344b84e99b5850832b309dce569c7f37d1645eb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3133323035303135373235"_hex;
                s = "7bd33b4d073dce391cb89a818f1c950e3954d3dca71e6b616eb35737beba12d945e066edda0694d54f8b2f39e4743f73466ba960029398c5a348d1f58222a74760d559c7e5f631fd0b895af5838783721829fbc235d7abfd36b8a92e520cb6cafc1a17ba8c6486aa046b9b63de8ed1dfcd99cd776e2fc8613b7e0c7c50b077f748b1e7bd2a992663a2d01dca15d4d967da12b0bac5596fd89112e4363db1d492573eba1349aa8445a5dfc3148929d5edc3b642241e8412de04ee83239c07022a632f2a86c036909a64c2a62a78225e6ac169d3cb43a51e1af9da892b7b7488b25c821741f08536072b97f193642f59801132a54139c5bcc73b17db7f67bb7ffec3da1bbd92a48fa742b1131404f8ccb035b69d195ec509a282fd9c421b5577e881e6eac717e22b14b1c599130fe1698aaa324b82790b633dbf1d4c30fca3bf1333da9ab65a94aed87b48bf6cca3d24ef453bd2e4abdb7e323961bfdcd8c30d442536280cbf93165993cc829ac58ce8f052bc70980d0ba906b3f57ed83bab45ac6615e839428bc2e8af9b444019f60a3029470ce1db83085b98aae6010998dc5622221691bb1779cb69d31230df4291759494e8afc2a038cc820bfe57b3ea548ee21e15830e26c2852161f21411cd3b6b9d48e65a4eeb174d353692f29e6194491653019cd662fcfeabcb291360e9c7444d96527f0bd666c9547fcdd0a7422dc7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35303835333330373931"_hex;
                s = "0f4c980c365422d74abf4a1b171986c575e7662e5822a0807986948322d33378b85dc7865e563c627ba4dddac9c65613329150c096938848feac13543943f58a9c1c0f46a0c40a041d37f300b83dd90bfad373e13bc70f74a7e4d18dd6be8c8cce0b5aac1844287e6aeb1c465ca75e2c7712707c2d371b0deda5171648b2d718b078be21cf10dc8d428e39001f5b30753d9ed40add27e98fa817c2fc3534c618d6755297d1918c2ae78271bbaab738c08c49ffede617c000820419dec9853430f5332e57f80ad71113bb492d7d24d32111949c8690741ea46172a568dfadf545b760d56279d4c47152b0c6c9db506efa762d2be29e224b87c805e65f2402a92c8a5d521bbb49540da40a2aaeaf4c6dfeb8c2080cf9602e320b0ed922f6847b5334144a3536257f56266f46d38695f7e46f254991c3d2af3827b0d790aa74fb08a5bc0a9d798ae09d33da65f8cf3a599e32454fa16a6508efc421e19f5b66a29ea60f10722040726db820180670211337e2d5b4f4bdf16e7d158f39c2aae75dc800b495531d8166e046b0458e84b409b5b4b193c824bca186719dfb0c886ee7970924178e0e53a75ba59b7e72718015918e8f015dd3d10ab3bc74f2447ab23e8e0606b8cdde9b5e70df77f8da313dd14fd95cf320a48a2828f870c39fb1dbed3e5c6136b893d68fab2665b560d6c15962f76666e0554be0b9ec7f0c151a3ccaee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37383636383133313139"_hex;
                s = "92b1d5d367f8b615fcf87cab3f88ed66b30837ddacdf47b7dc9bc405ccfa16546c11292447c68e0f26bc41a0c8f003fba59f96f3975d2ac7a63fa34d7dd1d8f4bae839060070330a5c911c0ddd9674d843960ff056b3fb2d6721a8fbb9fbb0b1ea8213b0293389bf611730b48f672945f5ff3ff356c9e5d254cef47f2c5662f4887536b30e2b54ae36428d13b551cf9258cd0c03702e8faeb8fe5b5fbf120b10552887ffa6384f84df39e94cee859b038bd6eeb2b0e0718065e1d3f526b33d4765cd5e7cc67bf6f97505337b62f1102ad113b722337e245db4e8e6e43529a6c4719a23b9d42b788abf3105285cceedda43847129ae39737094644f7d82e74f1271dcd430e1122ad127b99c7b95a16c46442a6c306248a3a6bf839acf6452a96eb3d28aba37ff342c0314fc0c34e38adcc8597a4c2606cb31939f628275cf6edc4886c75e42d8a4c32bdcd63c534f8c4d21b8d308e58d5843aebae8b3c35eaefd3836fc6a80bfd16441aaccfadf45bbdf993e46fd831443339cf5840cedef60519d3c7d92c39d7609f9a4841e3e5f682e71b8fdc3d7d9c7e622e73b754e870d76b111ba761508609fa41ee82ac02f4519ee3c46c9c3d8402f1cd0efdbc4417765cba31bf791988f2c9e7241d157796c6f7b679be52ed6c6164354f041ba09b20f7b0372bfc7a7159724dd02a74d20f82810b623055920094292d17aa411a3208f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32303832353339343239"_hex;
                s = "86fef6519b92d28a49a39235cc8454e416c42349aba7bd9a67a84b0012458b8b9af93349879f676787d5dd7bdf0323c02ca35533924b35978c8ea315d4d3a7436bb4f11a02d6fa8d9d32192f6f11ae969d8edd4f9bc12bef787e834db6e4cfd9fd93fb9c9cd51b0813c3aedca7f432034c15638af52acd222b875676245d104c8d5e87bfa64e86e528d1e88e4ebe885d53d8b99a50609a59b2be30754169f3d0db72a054108d57d79c08c28765594b4738443125f4a68f64eb90e1d8d2ff6baeec6d3f12bf8c76d1c817713626bd58081f6bb03093d6729b3ed4006820a89224ed58d733432b06f5e6e42f74891251b9ad590c78b5da4278e789e7775d18b2fd0d3b9fdd303df7cd949fb20874d8ab219d8be8ca961e83b814c59a813bd284b01400e8d98795d2f7c9a7eca02120ebd7b2b8d53f945ae84bec14ebe2816501a2be3c9c81b2e8b0027dff16390d0686a7654b39271ec2c0ceeb2b57871c38f94ed43d50a764ebce272ca3a8fe45d59db2dcebc78f6e0ba97f3fc5c3eeec3fbf71e7ba91c0e2274110d1da924008d414a54270e2b3ff700eb255065459d00e8f6e1a7613d30db749215774df6d19873c06a2f6f5f8baa95891ded9c91201784da571a394e59ab309f23a3c745a8f73e370a58a5ebd34731d865c414f55810a08c36b5b35a5fa23ae3142db21c24783145269b035f1764b79d26ab76df32e99a1ff"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130303635393536363937"_hex;
                s = "86683bd48599e9708f70d81be57ee072e158360bab02205e15443c010792cdb4ee7087bb2d099f630cbf9a5d9672fbba62f9495449e6c9f5ce1d6e975c7bcf505faac0d73b9fffe90dccbf3b55e278f58dd541c235c920b385466aaa064c7bfabe8b9c467ade9a06ccfa7bdbb74d1f1ed6865f41b4d3a8045520251c5efbb8149ee7aef4d701d0937621202fa5a81487dd262a6aa98270ce385ecafe73a72356741251ddfab8db00920f31c30c47517804e6411dd78d496ed5554b337d335102961612f2affe9e41fa2b5c63c58cf12b20d79d6da28dd3648f6881856fae1c17620e2bbfb15e5077934f8f55757d9d84172839812581fc41a337ca65e115d216f32ae63f833a91b67e5eca5ad72d65339b30442a313a47ebae22f18bec47191ea8054bf7a6f22db95e82f0759d35effd1ac4b375885daddf77befd1da13e3331702323e11f75c68fea368647439bf7e8f99f4b676c1917b445c7da14b259e054129c9051515040571832466c182da562139d0703c15e17f9c22d8393a5cfa1c9c2cbe35bda59bf17693f24128633a3e223ea551b5ba1a7947761e939e7bbe9e80c0d3def2da56df1e1639af2048c9ffafa69fb60b5a4dd54708936673c431abc12dc69d248f7f87730269c2bca079c13c68665004af0d8e44dc0c6f10fe604700e0cd7473dd8e57b1b72bcf684cabe434167b346b29ffd521488de977776fc57"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33303234313831363034"_hex;
                s = "31869b48fcb2506c54902cd80e2f1221266ec977226893a91ce6a3cf2bea43680de52c9c2fc455c44e98ef3735d9578e3a98abe63872b9a723780917520ddebe1d02e0f00be09ad77e210ab5518ee93a3a967c0a47f05b8b2c2aefd7215f8d8e7f203388e7b7b145da98b6c829b26439c9be1dc8c3f98125419ea2f816aa749fed0a914ad46bfe27219bc088d1c1a05c50efc7d7d0392d8d4fa6ca82f5784fb27111b137ebf4cbdee3b40243490461c8c7f18b226370ae10689787adadbf563b1fe25a7b361dfafaafe13cb7511c0c5c2beeded1f0c2ba51252c42dc293fba13cac292f50670b45b06c71ce55fc8b457174c784d788d38b0d2dac185f9f175938d6f305b028d70b694f02cf927fb5c42740988607d79206df03923f22fca671333ea89b72f41316088c53af5f3c7f118fc7aff190d17f5a8bd087dbb60fcc82a8f99208c481dee4e437b4e9f73eb51fa6036e230844ae950331526d0228600cb5b158e705db7ad0c7e713e639e219877b08a14964758ff7faae16510eba2c3f087ebc94702d0facd22416a4e36499bbabb06631eb92e6bb513c67fd12a44f5c1975a47f708b8470c2e5d9c3aeaddc9c809d334cd7771b3ad68f2c4bafa0480395ae9d30ad32a909d7e7f138ecc3dc102bad80451c17e91a1a8ac49c95b8e9606e994ff1cea2b6353499fb52b015ac1df859a358c2d6dc7d2bad22bf6c6ac6028"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37373637383532383734"_hex;
                s = "12a3dd69efdc002c419e4a6cadc5c1d336fdfffc17981fad74c3625e5d0b7113b3ba52afbe03b53cd028c1166fab3d3e71911284e015a8abc67ae434f22fc59afadbf785923060110bb14b73f17b1905ae3255e7925d9be121a4f677071c1318ca13a221b20127da64dd0ce65b384107302cab9dfd3643b1845fcc08b91014c85ab595615c2f2a32a74430926055b09923bd2eb9cc059dced7535ad82c7a4937989330870990b6767312147c77e5a858ef0f8dfe60bac462a5cc4ec172f9743773cc91496aa310505bcf5694989a6b5d518126bfde43d16a69dfb8352f93e6c9c002fd2dc12dd86ba59f7c071942c44420577705135f13e5bd28ca79c220b7f4e88f4179b2da6b06fbce4f3b33f5fe3d026be18bb49e992dd84d4df11addbabb61b126c1ffdc8b538c8bd0b0ca6d0fe972cc3535097e49259e11910843fdfde151dcddc2497786e76ef5306dd475ecef667affe0fbbf2b1b6705f0c49dd9f242aa1c2662acf7215081aa0a1f31257665c28a94cea59bbf1dd57777fba987b452319c1df22af92065600754db7994d3f02ce6717e74d19c74ea4f6afdc093c6fb349602886acc867b909a8fa63ee4281ffb1764e6599bb0d40ee45bdb67387103962168fc593f74f5b8a94e77a92fe4d2076098415d95912c4f647eccb532fe7ae7ea62c8e98036112c01285c51256d7afb8930d6d6482c3a57f1bb26388784ef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "353434313939393734"_hex;
                s = "0c02aa5c01eb5623a2b794b6f3cd3a01ddeceac03e85bba8f67f4a915de6671405dc98a4e7edb5832738b29d6539814197ca38a47bbc92e83724937192724e15eddb1243829991bc50457833d182998a6aa413bf1341ae55e8f82993f47199011028196196a87c232c23db06fcd7e00de8666686528e8eb44abaea96cc7ea556d5e488a043adeb7ac63b485b100107bcc77abbea5801aa58b633eb529b612592874a3b2620dbf9490f399108ef50ae042225758619030853b9df315af34245bff846eccbd9de2784ed85e8437187084755af7e541c27549eb7eb9ef4a620a44c67695441cb7c827a4b3a03913497092e277e3983dd8fa366962608075ebaf2b28f0e8bbdd54c226f91702546b7f015dc0ffb30f72b436e74db11338d3c8140f9d9c70f77e4b69564cf2ac68ee81df2d4bc0217c01c7ab5a5ff6d8f0aa08a5e27a1430936a2ca88827da86e75158381ec51b455f302d446ccfa1642238f281c576325bfddf3cd5c08fadc303a390cf10d98638f40d4792a591e4895dacc7f4cf7875c77d0e63514178dddc5a45ca0fa43dc6606e61ef4afa029214f6b7e2633259da1e9ae8733741f1a8fd8c1398c98dd0c0483aad6604b7e42b6dffd3ba30f8b05bb63e73a17659a7ba24d37d300e9196d831aef7549c6b2627b4c11a84b574f25b3d94a274ac17d8c959b613b86cfc0b7a210fc3bc7ae9e0106bd646fe5d720"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35383433343830333931"_hex;
                s = "10389345200066e0b6e90c80be8dca0e9b91adc4f8fc7a7e4efe26b9a3c768875ddfa11ab6cd8ce9fefa8dda884753cc87d4b2d94493d1c5924ef6a817c153cc5bb1df29d7ebc47d622d4b313670d073cb7c70c75e32477c69488770213779c3d60da678d00a6fba7e5f2108bae0d64dd0157f5450fe787fbdf6598f1902b6ad1b529749c6065b8d4711f014d8e07c8b87e0a7cc78d0c4385eef5c1690f204bc5438b029398c9e0cffc3aab497e2c61e09a7cdbd9911f590ce8d820e88212602f754f56054e08d57721bb8020c7654c4df5ac63fb90121ec2cc2fbd55166eacd9dc04fcf880a16e05719a40f3e1de6c5b917f5d59ff1c71a0d1f63c01107e5a17d8972fe29e6290b27c843a7a1436b07c3bdd16f589772b7a66938a8cd059960bf08a801b28ecdfde56b18cd22ae0ecb7cbcbbe682b0cf264b13a29eab77f393bfba597b9425d84b2517eb53a34747cfcf51830b8275ae26559ef6ffd8a519f383ee5e2a55897d4e897db08fb2a8ff6e52d53326c41e45c9e57db34c43fc9412fa7dc8e154c9126a03aaa3ca50e897899637c30ebbfcb19b9331b0731cbe073a37a5a5957466d09494b0435715722c0ccce2ad2d04a66932c8e80608943c1ebd8bc1405ec193490bbbc3fb68cefe8783f9091eff7295720f05713e08415433fff0d0a6c1e01a7ce5d136320c0707d3a8828a463df807dfb08fe2c8c7fe71febb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "373138383932363239"_hex;
                s = "70a554c5d1b9dc8fed39dc0ea4ef3e288c6f3ceb6aaa9a5295849957b0b46c0f1d74c548a78d882fe7c729bc63d4eedcb164a74b3c253e89751f204e3f3b24e93df00fa8a82694449f4c94b67c239275a07254d34a5974af9d0551fe9e13016a5787ab9b36233377c6d4f69e945ae2c6211681dc3e9a895c6151b4acdd9dcbff01623c71dd0981af667b341da79cb9e7f7ccdc1633872c70fe9adac7df4b1ad748671a24aacf42678e8d384c55fafc85f405dc7be424519f0602c4f535993ee88d17dff6650a7e1a93808339e90d662c37ba014ae76afd6193de7fb617131288b52e7924ad3df10e0738801b5be4ae94be3971e68715152826c02297718b29ff543a6ff8bd61ccd3c551b8f983878d66c6bacf8d50c0b4b3eb7de10fcc4c3a56a97d0e7918f260f95eee130d8aef132019fa44ac571375369052c62fd816ecb99a7ef7e53b201e5a43ca403fe403e9d12bac179e885d44a7e167eb3685dab4232d92c67c67751435ba7ddc0d4ef48397f1c80372e25e95c9f6599b3c1a1d1641676559eaf50f5cd4d3c9e7d56c54ec232e4f4a1722b0f940c3d72014c9465fa9a13587c95039ead91d231f7c3db8699f6320dda84d4e46298bd450337e553c163b17e4c1ff00701e2e97e0fb195661c7109f87646d116f4a571386a274b2557f587fd3221a100d6ddbd2daf04747254602e65ec860a5df38e0d35c21ca5b94fd"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31373433323233343433"_hex;
                s = "7cc77f32ae5028bd8b53edc2f667a027499331fe42d2fb1750a22320d55213899a3139f4d498d5f6981a8d467f1448d6506c71977001f8a3b38f98748550f592453b99b0bdc5003cbb8854f858725b619bc151816046303ebbc11b40de50bc1a316afaff18fb940d0a15324fe6fc506d1def66955aade2402b8d2d006ebc5fec9d32e044322e2128f2f03badc92524f5ccb3c31f1e358396ab9a3688e7788aebbe995e003cc5cf586f88fb4005889778dcfef2a74427b294119dcacf857460333df2e1c4095fac8ac458627f7f0e98150db66def13015741ba1a7d916d9c05b2227b5cd6c66b06ced61272166e4e1b7d0f22aef180622059b4878c50773f0385426e096014e4467b646692df1e374a6732e91561342c769c9ab8fc8597088c7d84b8bc812cd96fa43f54c782f7ada22109359e312537addcbdb63f4840d41db450988708f364cdb78b612b5f06f765ca6ffd6daeb2a462a9a27450dafac35e41140c08fe122de8d97d92467ab7a76503ff9c79d02d0eb9c089e352da101cb3e5389080830a8909e5a1547489e4764a66aa1b20e19a5e0a111688b799321d71c6178834f99f595b55a404eb44ec0ad9a95e2ada052950473ed5e0c29da9d1e198656a8543a901eceadea8afbe38f57a640c0df7dae7b969540615c8f2a432a8d8240bc4d166994755776fd95fe048f43de33c4bd6a18c9c383f68b9c3782ab45d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32343036303035393336"_hex;
                s = "6bcdf417bf2366c3847747dfa84b6e54f064c737dff1288e703db76c8e1f97760af50c5f4d3caf2a7387c920572b7bf7bfe5f1eec0c36edf00e1ffbca6fecec1013200fd4ec227ed15fd30a680131d837f6ebeb9f5840ba056d462a786f8ad327137d1be8f9bc376f61f7b00759ced58478eb2a7806c24eb0205ff7f8ef714d242922c404c1a84bb0cffc47a4c90f7c921ed9f1890de4122ad5b5b8ad83cf9a953e5f69c31392ee79e87eea174054c4a776ff3c8abb4d28790cfc5a8ba7a9e2a2c4e8552f823b676e24e24fd93549c1b994444ad6252d55a6edd1acff7d948d369b563bdcdd8590738abb508227c88ba4eb3f40deb70f94ae64715af4af9f57d714dd7513d4b0f74f99df341802d106f3b056136d56a8b4b8964d29acc3cba3448e804cf76ec32f30057d375d36e2b66eae61166a1daf8a044702dfb0fc5b0d8933fca2cd692a18d4f7d985b459a96746a5529e753cdd0dc8e1e71062b6b4f0c31cba6bf790a030b738a45b618ac37d7780ff7149a0c7c1818e610dca25fba39002e1b88b020a18ad33e20ed826e1ec34d20e8e7ee628156335e18345fcf2c17c6fde7fb0c61d09d7132f61eff5e1d3a78ff2768f379969ccab3eaa6d541fea8a9baadd27eb2b560276e0dd4093fb34a716def844af797e7cea0eb6347e7fd3703835040829b34c980c92915ccba3215a71bfb74f023da059241e6db516a1569"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363134303336393838"_hex;
                s = "9860ef00957ec620ae34e71078f3a70e2ca669ff30e378d33f5e26eeaae717b4d46e6a1b290f1123145e178e3e3100fea3fa3d58c3bd2fcc0a6f25a283af88fe6575c42774633d0f5e485a5a9260c85171438bec68b660384577b3671c5dd60e70530b5928aa68ec21c67fd2ef8b24805d672a90d92796bf1ed6d28385469bdda0531eec555881e7870b0b74f74f0743082ecb1bdc7d57ff69c8b233981a774f3461f134c610134c51c0882509e4157b78b3e5f45a8834428dd6582a5408679279cd3d02fa5a58c51e21839098c1b1c3d2be73950d60e239150bd4cdc9a22545fdb79d0467f9a92f6e8fae836483876ddc1454f7aeed71eceaa8d9a14f7d4a0728c1f256fbab4ec6154f4ff49800a184d7ed5351151d79e66d3579592f994f02ef43b7f04c34597271a2b1cb9a2d600b75ae5fd2a63fa26c0570c9dcffa0dcf27e9d06d30488f95e4f5683eacfdac0a52ee3edab4c663030ad837337f61e47ad84beab6801f04fbcc346ffc0b7a73249fcbcca81e60e575666dac7c8949d831f57043c3d68a839fea2b4478e0dc7ac2811acb301e1c0c4b890236fd7097d9f88b9c3a7ba13e492b935944d713ded44e82344e0e1e87a59d87bdfef71814fe50e5f95011f45bea6c88dd3cc33a8c8671f455b1ed9df2beae279f89e2ed2a7488ae93b668228ee2c3e29e3b672da9445dc080001854bf9a5fc032d5cea31b7f8d3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32303935343235363835"_hex;
                s = "2adf561bfd2a97fdc7dcf891883c4b8cbbb378677857b069b17f38099a5baad12550f77efdb240ad13ed7f620bc61f417b8215affff9ba248296c36ed087a12390b6e22e84e4603ba7b0624abc940eb720215cc64ea766acb1798aa369d2fa215b1086c2e74710d207873e362d8dc104f6159ee261ded7df09f0dc9d9121606f1e339a4434aadce76ee114a2946647340856a0ba664a699c239f2536c85c3e5b05e18abc9c993035c0b0f52eb7abaaa5edfbb9aeba4d804a9580146f3ccfb1df96ffd13a854398c4d485fafead4c591644cabe40c724885b3105ae7c524108f6523c8081ac512afb8eec7e9b070e9d66042a9edc504d0b4131b3967ce1b1e70034b193ae6ca4cea0d533cee724a49aa23887bf3186962f4aa5ad4190d99b026e95d53bff8dbf60fbb73baa763c2b0f558cb0d552637def253571b34dbe64bd974142c5af4273942b7ab5da6dc42c0f1890984c31539aca67c39fb3ff2161da5594cacc6199dfc9fc09acab2eddc4e30da3bde28329984d8afcec915b8868a60a9f5bb72fb82a04092ff43a954d84afbeb760c1ede208732185f8014f737363ef181c0db4d1cf8b3ec4f45f3f7f6baa1ae587b9ec3e218c0474cb38c338a1c4f8863ea24cf1f14a46d1ec76ff07257808fb3859277a4385b73a7a66f6b024ae9896e36f449603d5ac68fbc5db5120cb59837a6e61eaec24f9784856b8a92f1695"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303038303938393833"_hex;
                s = "4e7ff3036442ad1ae790ffa6451f14650c035ac1d8becef32cc592543052ae338165f4aa5e7022bd221457d71de81ca59386c3bbe78211784f13efc4ac571f56f090fe05d833f45d8de6af081c00e9e1628f34c394a857c5d098454680fbe3b30e8d8d83d29525a1d7fc6107eb90e81f840154d8f2677119cfb6fde8d77df676356422cdfff18ad1b64620403ebddc665b6c34bcca9f86d1aa7ee4844208d4cbdf634d8ea95ef425564f388a2f2deb0b0592c04d1bf3938d89b063bc679153200b27a935d7db9dbb8f4d94c4e7b5784a44b0b6239eeb82bdb4a615a7c3cd4f12cedb0931cb1ea588171a4fbaf0bbd97fb46d6070dce77bf3990ae6f5deb3752fadc87a85ee7740c4f47a3c738bc87af9df729782dd925541300e9b19bca6e202b4d48240374b2742592528c519caf5872bb066c7f896804882ab471ab4f68aa31a8a03a040875d668e8fb69e732acae745d568c08b1a14ac1e80eceed4de3103c59b582b255899734649b8de89a6e247f2d9313dea59f6f870e42e6cd859fa4a2ca6a76e7545297bdb2cff5aa419d9867e02e4a414f469ea3d55fc0c5f98618f6001ed87c5be0def6a9ff7950a14104d9d75f06ca9d8fbe3a43f4e29205022daff387829e49c8302d2629f15892f8c92aa265247702c07d090d70f6c5d6ebf654a6f0ad08fba0dc727f5e9123b2b5c25b12ac71d52edf7644c715b38b7d8c11e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353734313437393237"_hex;
                s = "1253a3896ee6cb61e6b7400aee5ffd767bca705c0236e1cbb3d7712fcad7b504e739371ceff0774458a5dd27b342a8a496affb76c1c5bee23c0b76dfc37e959bfd81bedc226218aeb9d160f41c1e568180b36500f41c9642588c18d7b92a8132df4fec831cb89f399711cb28520cd974736f9dc460e06769bf71d9cb388a06f86e16bcda1903797d7bfc0262d298fca5fb888d2f7cd6deb07f994326288519df647e9da70c69f4967ade38195ff4e3916eb9ff22c28d691898c7d61e7ce8d587d9b7b4c3eed7d5367f3d11f9ca9a44cb760b9956abefa8495021339ca89bbeed56fb896b717ad4a2523f34f6c23528878c62782bbded8d17d75741d0ed235ae515bc704bb2b520cef951019b382d8e949f96bda73cafd2fbc1f52c182aa6455617a78ff88bb60aa0ee583551753e8edf8b3dcecbee77668b55131cfd5087ec3814d9874ca142ebb139461b43a96a9269f0d3e80bdaf70024417b862fec325f2f303f6e8819e05d39e8ea8ceff9e25d312c305bc2f1dd60ec69b6354f56167db73a96fe31bdbfe65fb4777c2846201fbc295907668a3cb36aff8d19fa035abc2a1131eed540ba28c0ddf74c1f0781fe1049e4c86db5bc907ddd7130f81827990d0c0e6beaa81a9886199666bf11fdb1ff3603ac04c1bb5d74556ec20e8f3ee9a7d81bd3aafb7b00fa645cd8f4f858b997bb4d727c24b9fbf305ec698b11ed37aa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32383636373731353232"_hex;
                s = "19f604db890b3b7abba8d6487ced0b7dca67817d457cda87f8bbdd24191f8ac02dfe215849b607e8877768f3b1feb7d0736051569660ecfc42563a7ca2da82edc83f7971ffe1cbb1e195f21cff262db58401c41112acf214bcb5612b8d28f57eeaf9cffdcc99dd68a5bc4fcef57ad875c9f0d9bb4835702a43ab9f81ce06dc832a7b016dd33e9cabcfe701542546956ba013465cb72c952371055da1e4d6f51c0946962c6be3844c60b5a59e0e84bbb144ae038b33a7ed73db3254386001a63882e958e460b558e173729cb8da60ae37676d4b6309ad89e8431043667bdb98701070ffbc20f21d2e0d7bec6cfb4f928d8b482fbfb3d7c8fb0b757c71cddf9cf180f40bc115536011b0f7ba401f1f20a53bea096b71c62d238a31dcc7067124f04e1115e17175d870ac6873650bbb778149ba0a5518d60032fa18b0340907668754816740f958ec162d3e632723a09f18c238e0e58b13fc188f43539087c198c122e9f33fdb0991ef6ac58e244e76a849acb0d0023f94a51d138a56b696dbf068741e6468d00f8f5f4dc01b350d93e9ccf605b5805a2a3a4bdef6b60d8b54b374ed0b6eefd292d773cad2caed827ea2b0cc41abafafbacc4fea63ec0087abf666445db08d0ccc5a1060e1e02d323fcb76f826a636e81d3b5cdb10443fbac9d41e00d236e7edec11daf382dc1776171a9d31333989f2752ddb60af0b5e1b8b844f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363934323830373837"_hex;
                s = "b6fee9ca84912c78f5c2acab8ed83917055012cee80ff3ff36c72c6ee84e36c606a1d1c2f649cc5bcb62c87b6e75ec027d51d998f28ba15a701f66ef092774318a83c14111fb489202a481bce14eb3b8b78ae16aa283edbe63ad243e3ed7747bcac9d343ad77a246ac1a1b03040ac6be71c1bd1a707714bfc2b0a7495ea212b6ffa70d1c8f4af9ae24db6b4619598853b721a24481197bd386f6f6c16e8eff5eff55644f36c61e96af061351e405e023be00cf23c6d31b298557291a1646922a1ce52929a8994d4e1307f4a05adb1fdd43c20672edeaaf388b5d5f32b6b3b7dc3869ab56551c01cd8c641cc22632ec16f84533389c0c5bb1c17064396473c9aa50d38f0cc619f51ca41efd7c1a8a8b6c9258f360ba97845c87ff8b7b30dfbb5982ab6f643c0f1dd7c4957bb1347a14e61798e526e57ef4ff7269d784361943e59a681d09b786f24d1776bc1fa20c3f6f56b75860da67667a9a7c2aa80bf098bcf342694d46fdaeab6cf426a4dbef89a9c9bc1d78839f5a04e411423ec6b41113068ae47c5d5d82c2d2f81b0fe8b1ab21beba616deaef41b55a8b09a256d8a94d105bcf7a131d7cc630a80b23af1c4a863d30e7bf19bd4a592f6c8c6f31dbb7c1075985e61d34cb0a91697c645ee2448f47270d3e912f0e65c263880fc738e5d966c43dff728d5a7e434bf7966f02dca3d0a0ed0bcbc79daca929e19732e746b7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39393231363932353638"_hex;
                s = "7be81373fda33342ec2f1a0ea8f9cc7a2c0c69ee5cd86e01c29dcedc165e9dfedc87dea23ad871337add303da73b184821f2613bed6e3042e5ed2b7f65b54d6596bdc2307feab05a87b35eb499cd92e9644873586aff5831f7e2e7ccdbbfb31324d4940e95d462fc1e0e0a4ff7a36709b64c2abfebce497ade1976e1c9a571628c8f08e950278f39a429f24c124f5d447dc0d2685395fa7d7fabea7a855fd92d8e479fd7fbbca318ae055ba0f88e3b1c4ac6fa51cc8d58d34f268f8643a76f49f76525169cbdceffe817fd749bea12421829b1782e5b11ad176b90040e61b7b0339de282f3661bd0946b3179e79dc455069b0359fe270df03be8c8e79396e81e2a4ec090cb62a73d99994c560ae209edc6647997647c415bf537360ed4fb2b051387b58a8ba8b82642f7e65e405e63c8696f7fc949a5329431c51a41bd1d8af94a00e4e3af16c0d1c60783e170e3a3f6e50995736f0fabd8f3c449b2cb382bbe4f98691e327e479347cfce2ec1ac08d50a87e2a43b56eb9afab446bd49e27ea18211056bac8a4004cdf06993578de929b04e70af941dad8b9f5da8549dc5bf67e67bb452559b9b7171780e90399652e8223afa6a7b6ff6554eeb681cf5bf50249ff5462d6876539ddc4b07dfcfd0b3b6cdae959fec46f5c5a36f976afbe23c11cb5d7dd1c0712fb2988c1c31bab4b1929e83c79fb2258adf8f92a8e0529f7ff1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131363039343339373938"_hex;
                s = "7f6812a65af684a3400a5e828520b9b078ac39b7b3d2016f5757216da4c581be2acfd36c99f2d927a8b9f5ea071f517f197df54eda08c9798aae5816b66d821bf569d7d6df174eeae62287bc824a3da2c539b4ac35245ba44992218283f0cc51ebb2e8053dd216f0b031424aee2d0f1a064a912bf7e7d04185b794f8fddca2a0c87f5efebc34af850b5c50089ffed87dd1b719d962f694e97e9d9bec5443e031554534e00675743ced13871ea891ae89cb18920c65c3aa36b0a2eabe8c13afe7f08a299be54b07d05405021c3eba10137266b7edc83415798d856590ff1a063cd3141fb1dacf08bb757e75f1f73c4696fb2f02453cac0dbc7f3a75e1b6d80b7f1817d6b0914ee79e8c3ddabbc7ce80d21c0d71aaa9715e2d963393763b60ce28d2f5f7dd13fdd79a30e7b38aa2f3ccb08be80ac67ef762a7da1a20ac02c28b5bb4e0609de320cf1234fd493258929319ed2a11f68f221c17bae806191d6f6167a5a75391643beda9b21fed620c012af963f81fdf670eb6d0ff54fef8b233e7e422154b8b0ed56aa3511987aaf714fc8ca203991321ae3875020d3a6109c8c9234df4010c58aa70228d262d3f120b82c0491348c66dfeac1baaab2d9f4affb034a5cb3adfea8d40c46844f0897c86a799d719617cd5ad3b21b97944c6398ab8d8b4a23eb1836a0675daf7a37db327b5e8ad15feb4dc74ec16afd4edd7e723273f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37313836313632313030"_hex;
                s = "876ecd8c4569d57b46d06f02af46c52c1f01f30798fb78aea5b894d9bb63c02d7c5cc5ea665b05ac1a7149cd55a40dbd60081c59c4d7a3b3ae2ed317a27597119337ed5a4ec092e41bfcc23de055bae01818beb126463c07297a08b3579b35a386dde533ee33d9b6e06a16df6b4258f012aed53377e409506d61e2721a18eba10c6d0166b86475c82eeb10791ef2cced9ee15a6530a55262aaca105fdc9b3012df1af7c798bf5da5982223bdafe1b0fbfa080ac68957fac4ad75eb2ae754057cfd64068f395e9aacf2c9b2f6f28306f779cad7d62af86c20b5f9feb5763c6ea00a6c6ec7ca1fa74d814f878c587edfe20d8e9db78d9b7c5ad7c9cadbb4b176b40c0421566da81fb3cd05e397423f80e4a89f3098cf82c68eefed48a3945cbc7f3625e8806899501d320695ed3e36ba18103434246caf542eb807f7516bc2773dbec092d3e7370e3556b041e9a59ab3569c2d0418b2cd6a87958ad58158bf9d2168632866c4b926b0333e30e2f1f8f36caaf27316d3eba7684b34fc76680490b1a8a7e7ba312f2f3ee38d82e8e8caa535f2464e2c1b6ea3047542fa29decb975f5fcdee17ad47aac690d78b2860e7d2cd34b4cdfcd75f8bf2e2a8f15ee9ad150029bd7a9da6f237474deb25702be8720df2edc4a2bc271bdefe19a2fe5828ee6d806d06923cc239f53644fd75dd362464a0baa9e9fcc2af96e6341d01d48d2d69"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323934333437313737"_hex;
                s = "3b5fca402733714b12031ef7054e160b00f7a0f6c00fcc40a2cee4b790fdd69e9a47ab4212ab220afee5d2d045effc16ed1d3e0c7a5e4ce4770e16cc407658154325dd4e9c5ed3b91bc89366c15b72270a20b8cf0e10b3a58bb9c9becfc881f3d4a620227c2c5ea1a7ad85dd8b9d3cfaed0a199e369e8add4d3732687c5268ec4dadebd20995d15351b083d874603462ce9d19c507ab5aa0561f794622597eead040fa11547e833addf39fd7062c2f3bbe5795463386beefe519ebcea039e6611dd0424b34156e522cc014158853465f337f47acf55bcb91437622935f318e5a03c47113e12ef1b85df46a4c6a5bcd478969d1998cb599435979b513d062c01f5b37bddbf77b106cec3a221ee959c481d42a0247f97e7e67ecbb8978ca5de63491ff05834f59e6f5000e4f59fa2fbca217cf6a1d68e0998c83c1495ceb3cfa61d0b834c99deedf767240d8229e6e6ddc4ffa0acf9c2c45c3b06767e38e4a4dbc2d1061ee41435469d785edda24f71ee3440243b122f388a1d89b3714d46fe75512a43834dc5453d77b7e44b23144606d3b81d86acde3827992722df5829c002889be8596b3e13c895d71d73fb359f917138637bd48f5d6b958726685b83dca672f848769fcd77da2e63251736b82cb740cc0e137c176dd29d155a4c9fc2803139c070e19d6e66b3e68f7f870628a389c5fb847e61f4e8d9fffdc34202d9c8979"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3138353134343535313230"_hex;
                s = "172fb6c2df3b8b411813e913f633e98c3316d983654d13e3eb108b6af6629a954a2a0990bcb2041bebaf3a6584d1e2ea6cf2e3242778ac5566d943b5fc0ecc2c1bf97a60fd1132b4c1655fc3642ac2f9cddc0406abc272333612176c27c560ae2bbad3119d6ec1472611989a06f508ae9df23b7a807bb2319cea0a81e2458df2116b14d985bf0440440c02e98c2ea654c8bc03b12c5f03d8a5537955f2d7baefdf6e00c8d6c9adbe52742ffc3cb2c60d8d9dfc7a8fd758ec7ac002d78f25b4f58e9234c0a622db9c416998186c72de2a8449e552d52bfed674187cc512736bfcb8bfeaf392b44dae2beb432dbc4916cf03e2e4f2e1376d994c4dd79e0d8dbd9f337082188dcff0f803a658bd904efcc380376a68753abf158cb466ca01863dde78c983cd239d128569e495acaed2fdd09dc3385e927cc45e815f33026c62eeac4adc9bd9261db0eb34c67481d8dce3b7ea783a72d7d4b2325c26ce99310e0ab309e9bb3b680e815a2d979dd42b7f9b94bedd2ea5607ad78b786037cf3cd37db20201a6a7a598b1ab379a24d07eb9b53c600d9fcaff40e4767f87ebdd8bddf2284a1fc98a17339812ec63624b2d5a414e03e4397546a44ddd6e70939815e42781ab9db8d2cdecabb5fbfadf8258b20ce5b47624bab002c64d6a6c1c9750c14e42fb7a513631d65f4cc2215732f09024e6fbd1188197518630b2156306e81a1feb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "343736303433393330"_hex;
                s = "6014e0ce22b92e4015ada297ececdfb61a5337eecfbd0c83aa738e556ab0b408de54f5fad6e0d53d41d7faa24255374a63859e973bad13f1eca3fed5b2a95b54a57c880e8432fef66c9b64609d922dd66e4d1679cfa6cc29739c3bede05bbddddb3e43acf59b42ef4fb1b19f1c08d88ca74f2657aa88a38ec403bc0c5c37cc7e7d15608fe3f9a4a4775c5cf1c51de01010d3ddf256d7567ffeebef5a513ca175e659f7aa87b53f4462883a8daef1c667f1c99e55c3ad9178ddd7089c3ddfbba8a4a398d575e3fcae5e910db4f0372b2fac13aac7b3e13bcdae76842c63b226308b5dd6ac16667b627207a34ada42eed4206142274f36eaaca309631a1f9a6de30e450d156eb956daa3d303434def0a9216efa83b64def5e42e5a418eca2fe1a3df99ea5becfd978fb9ce75f0d601e72b755ba24967e51b500b2fe57077ba61ad4030c8e1ec965ed85176559cf8808a53d0438f43bba060933cd87e1f7ecfe4de028e68f5eed9c36cf2b8dbcc92ab86f143b11eccb0948957e496b6c4779e332edbc3c3663497591e44903256d90d0824654d2270800959ed43e2a137a5c14a8c1baa9b58c1dda4a6511eec06a6959d3e9f6459dec78ae0091dc82fa8232b08ee07f975edcbdab88dbc278cd74766a1688a6841c99147fd5a64de755318095f84313cadea7f047fc4a90682b21a088bfd357d18b2f83fbb5cf5f7c0f16e4c3548"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32353637333738373431"_hex;
                s = "5499b7ad83cba2dfab7485b6a116d92b17206226ed20e21736c497afc55ffb136a3bc5793e588f430ce4548297b2f1d8ba7deda9a070fd5aeada9a87450cc0bda52170d174bf14e14f980a79e44e331656762e6c8fd4fce2a7ca3a168d6a7cf8b36aa86e67baf2fd641a51899f3e90a6e2c13a978dea643364af6ddd9d2d1bc6ecbf1283e01f253198ff908759e669d45920691f297f2ea3a9c40928db1f225afaf8f33b4af5ed38a18ad7d7b040c4af580f49d7199552f684e5db2c308d697ae01fdb2bd0092fd4bc3a0b88c68f6afa57ff1069e5e79a1717982b22b200439ea1f6ba04a7d42e9571a1811f190872d8a01f916aa914492301121efadba8915669b44d2a5efbe4209388b2d5b5ea4b0a3a92d0088c1c55ef50ed6435bc7e6cf35c2c7dfc9d3e92734afc8100ec7cdfeeaa5703818338702939312a59a48f4c441c36c67efe1f4b2cc95cc9a8d6c8a61a43e9823819fdba526a69cdcb2a2e840d71f4a9f735fe8fcae86e485efcc653600a175ad75bb956d8cf875f05428c583011b8f21d34e8f9dd4fd706297b92ebcea342102415ee4d14d0c472c0f952834e021b31f70a85f72119946d39051b1302a26d2df0cd5b1d5e0e1180a136932181171de3a656f650ade2c480da199bd3e2297d8ab2f2d0345d60063fd6f09b6ce9f12a81feaebe74c906739d3ed0ff0f0bc37d527c1f4dba695f8d9a09e3764646"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35373339393334393935"_hex;
                s = "7ccfb9cd2560754d74c8d6271d30ae72a8c8552bdb575cb13b9dcedfd2c46fa6fd1d2f6dd7162878077f07382d4707eb925f9c25fbbcbaeb3c368d855b25efc033939b70beb83340460334838f6644df7f6efa40e69a231e7ed33ad10b26c684e5f2fc495b62333557859c374e54d10853f8c96da26c0213d3ed08ae3b7abe8727aaa0e1c7eb86c0958a383c703dc6671a0a9990d0e48e65ff83d6339a84d0502ab3cb28cc080e158ebb6bcd99584b8bf237877dd90936bf5c79003dbb820f5b36fcb9b704cc4d1f37bf212035d7f3244ee26b3230ed810d23bbd889de0434c02e4522002ab548899e8ae3957311666ee6c9a8da6cccc2550888859e84a9d419f8cf4f312a8ff23b2fe27c5f5df89b013c13292bf91ac84d85d646fbe5d9e793da20f32f1f54b4687985d6776b86983e2d181b16e927941823409fd4ceec8a945e10bb05100f05a602b7f7d7ad150ce3ca2bdb035fa3d983da3c98015282022436a146346ebcac6d23279338c4812c7660a53ea60fec8b4db4fc4bae47a42de679589e4a3a44d2f3d65c8d73e7eb75d411db2a15e14cb5f209d5d4fe0f6da9615a0745558f1930f7ddede0b0bfeda7530aedc8a025cc84aa7068abfb106cd57e21c5aa5e5fe314b3051e6adf6ba67a46e4a25efd49fe65f515ea70a5dcf354a41f0208b3e7e71119ee0b429a15a50e1c77a794ccccb84a2e22072ed2849b8ef4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33343738333636313339"_hex;
                s = "4bcb1f8cee9da35275f0c66f20a65bfa92482c8c000111179b4d0fbc080f237d217ce357767759bfe36998158248e342ef17ea6161202ff038617ac33992b40cf054a65181983a84844bddf6e6338ba8700f580f3f248fc4c9aa0dfdcdfb344ef9689e02d526b2565c99911a37f336aaa294641f5a62c1a83adc46959ab45d02c180f4f602a7cf3c7011b1b94a1355708313f75e5dfed9ac9e9e740334fba7404d3b46f42315f0c369ef0b96e9c65ff17ffe5da6b543295048a27fdba75daeeafa466ab22039887114bc68b603bfc1e11599dda99bb048468e717fd05fffc681f8506d34a97dd876e0fe8ddf9be3a33e6718ccddc7fc71661d7008d9a7ae8266af3745c28f35d3ca300b4768dc3b71702f2bf810d34d907abca3f3edf751d941fd552371ac2802649a3bd93e8e21dd7a0bb96466737ec3df0495bd95a4a830b717b128c08e71ea2c0e2b20ad1853bf8eaa33ff814724b1d2103c63d629cbd38d5389e93d2c29fc17051fa332d86959923ef4c3df53d24ff2f0fadac33785291078044c1de7dce3102a8d0d4cda5d560db06d81a502fb25e3541b0dd1b410eae3a5c3f5e265e709d3b9a7452e7ae9e7a290d31d3e51e3f8807b25f92969ec3d57a171b65e3949b12a7aac1d61bb96eba198149fa8a71397823a316f37f539bb3b6f663ac8a8443b65f0eb930546683f31f6fab6ae954ee0926835b750a99c63ee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "363439303532363032"_hex;
                s = "62a30b6890e6a50bd8d50ee952cf46af4f3f6771cb70e82cc0c37c4e67caf929abd23d1ea4f6aaddcda1b888baaac23fce87a3fd691ff61f27f01a1ef56d62bca712353f2cb3ee4066390e4cef5f1e4a0710de4dda0c7719205a7de1402bb3d865363e32b2db3333cea9f54b6388a8d6e5f69d244a42eef7a2fc68344aa94243ce74e059241c5f63382b2ddc11325bd696e6a93b40a02ac8b951706100058cebd07e53002aaf70ea658e44b369e07fa9189659308719486c8004f00fa1b720b88153246e3dbf973f7be69c9cb80c1101c77ce7645d9a787de260dda80a6bf18e504f5b93191bb1024b7c5223e4840a3e9cb56832db722c3ba80df79ca619f3fee613152ccf847b35a508b0b515cb0696af0144b3fca9e621c2c5f2b64de3372994da70ecb82afe95fd5de28f3aa3a1df1a910816b9e69954d7599765066a34a7c3ca95ee6a90069bbb5fcee2248e90eded32e717b062564b717bad68650467fbeb174b2a688e526e8414e2defc7879e07b927d7bbb5f09d1b28215e05d15a8ad9281edb50f3a246ee08d2787eb3b8ec242c3d2d33abc26fcf27d4cf6bde79635db8cfd7e0235d280a735b2fba72f24bc265c493d9f0c3d5eec3599be4a90d9b56281a7962cb68817597747c3115a4610ca5bd65acc6763d3c4b337ff5db78e87c267a92feb9652c0eb131908214ee01c49590293ab34b3485edc94aaca4c7491"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373633383837343936"_hex;
                s = "c7049f15d0ca1724e66c5efc64b782b418cc153a57cf5327d9be95d0f639c732113a0c806ffdc7baf14787393a9cc635cd2ea5f166e48885c55f39ad6c60f817b4ee013198d986b307f333b5950429dad0d3582a78ef3619d46d5f944a442edfecd0bc1dcd74429e59c98fa0b532fa7e3439e67fad54bb1013adcd92dd1aa7d2b1ed66f2582c6b1c83cbfcf7d168a8522a1ef63508d07b647c4ab0b867abf9da2e1a20c69428bdd932af73a34ac7897675a8b030c11e4de9febc426a7731cf2077cd2435d943c6452dd11e0ab25157b922bd78ffa9fa1f36a3116ed3906e6696cbf66a5719593e54e7159a6c732fe079c2d270586f0509c90fa034ceaa3098016c6ff82242e20a69c6e6ee318c24501bb74968fcb47cbf58a7f97081ec71f7a94ea062f6e3fa7d930d065ddee3ee3f8310a81da9a1ce310d6bfb46cc01561b98508326f9cda672d8c35c0b9ce29fceb3fd4af9723f1883cff3f9ee7ce3fee2f0d376481843bd906578f6603e8dbcb5b195390bb7d429915360e1546a65a9bed0dae431b59b72c8932779ea46c1e2fe320614ff0060511d75ed1c556953b1f5d86d4ad97ba45a3f75b2c557b1f5b084a3aef4edff0d6a20fc3eebc9afec028902814d12e1a103d997c4e978fc8f3818c789b663aad989728258645c3536c38e085e25d6a8c37eeeece54c6848b284441176c2e9ef57a65dd1b8fc3da2db693e77"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "353739303230303830"_hex;
                s = "2cdc8ecfb86bbc04919dd77370f863b23ce1602ec660fe45b599d81f12ad66cd357ac90ec638bc9bbecf7ea21a85e01b18be148f00ed98c91339f03212171a157b721f9a22295fb7128b053f7ea1924ef5418b13859049c1732126c734dba42b2048aba6162d7ea612fc0d7fc9061382766b804957731709a6dad989b69445879ca594d9e9b8faf222ceb9ab52ef9d068ccc6228a31e0e042c7b27593b6ca00336cdb24a618938da2b8a187308de5ee1ac5c74e0f3b2e34dd2665616055f6696f685a5cd133b62d813366bc4460290254b8229679aa7e0cbb868b19c4313fb22d23106754d44f6edbdc983801a6270e29905ee8d6ddccadc4654d29b464a474ef5d6eb821c26c1703ee13ed9475c70e0a49b44f4fba9278ea591d45d34f07448a6ab755d23422d8009b57328ad7b389aaad305f2af0891ca197c2bed87ac950a3254b037b1b13b2e14ce09e543f3b96265b081ddd07557d1315561d69090ff6db42fdee6ae64cd71d42fda5357757e7a1bfbb518df017ae3ad018d3ad5f853d4007edd0a72d3bf560111fe95372599fa92fe90844d7e0cc3fa469393e0a0bbdcb35ec4133f1e2a538ffe77e59cd71dbd0557a711dc3e0e40460038cb0bccbc596bf466221f45f60c8535a9c968384c248b9ea555552e0072a5e5a334089f46ecdd5295b35c1e00579627bf63815b84379ca4a87978806be1fc067c043968bcc9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333434373837383438"_hex;
                s = "4e2cca534e403b3165d9cb4ccfb3c60a725872564f22e5cb2823efa3f881053260e54a5423a2bc481b02aa9f42292dc3aa6d3b493196fc0c7e1684cd598cfa7f1fba1b3a34f88db964d104c92304dd2501bcf4ee2837bc2c831f1796ea494977ef5f90eacadf5854c64e34c43c8c5841a0425c7642e55c5a05cf01c6504574ef32e6a66e90481575aeafb66f1fc15d791c0b0148540e6f5aeca5a455020edf049a946f5ca25193d43b69144ba0d8ce4c68a0ba70a0eb8ca695bedb599e8d6e07272d0f585f85b5bfddd7f8bee4a683359873f4ae43b15d632b9456e9c586d4472f9ba623a2f26d63f01a89c25b12652f97ca6a9eda2d6800abceafa8719649ff284cdc26ec64d9db59f0e7b814d04c6cfb64c82c243d290f9b3ed52e4b7d7cb1203e7245e36337033d250d3a568afebbb544a9724bb0dbea80e225777ad4b1fcd895d931775ef929a0f7205c34b381722f0c4c6e38d347ac9158ec5afeb20265397c4a38212c4a97f1227b5e039ae029ff9e71d3e87219a16097e41ec68e83f9db0826c507e9e39d329fef5e918a113754695e1087d59f817088e1726e3c95f1bceff8c721576e3abcd1b4cf6bbf23eb7d80e85431eb0c711c65f33922855293d1ab9d48216436e22832f379aa2daa216333fbde75249c93d73587063b4e7581ad114b9de83737df4816548d95dfd2de6c4741c334fc7577c6a9c658b4b51451"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3139323636343130393230"_hex;
                s = "aea92af7c6c66127d15e871ca199643932c50e97718864c5344952664aa4927b76be66e4ded635dc1ca324c4e3845fe664f4bda1565464b1e7d34eea3693d87f6fa456eba509d51a9742a72b39b731d09fca3bbd442c8da77d762a11dbe85c476ac1423d8cc12cb563b431b120c0f6aa7cf21cd9cae0783a9b2625e7f0d84810e2936602a56ff5945f85d1ad242cea95045017efee2c6859c00c5821d93118c1a6c45922878e84289f8d5902aa5fca52d526145c6d89d8d61145959e3e53f61f5c2cd0a0fecdcbbff789b2d00ec1b902343664fb5aed7dbbaa6cd065ee41f03f61bbbb72f60312085551ed1a2389ffbb5a008a4febac81ac505a63164c84dc3dd9df7add84d9b0a0b230b973b36a1ee27936e38f887cf1caf9661e087b7c41956004503ecd4492ece4601681f4998bdb5cbe6c94d6ae107f41a8b127f572ab3a5bb30aa6fd59b75f1eca9218ace61d832b9184c3fdacb1cc7e7477733972a6d08dad800ded3b0fd784ab90d071dd7a089e896d3390c2bd3306039175e70b4a0a02f29059cb168aa37d0c34005656481658cc5eb36776d33dcfd3ad6bb0b182b409d4013d4fd1a11577dc75a23d08da904f3aa0a9382b6bc1f504350d50ce0de78b0e9e0ddf0cfcfd0d0af941a3e303502036311927f832c19a9ec0e6d748a1a8be1c1d9ef4d3f110f4742452107b2cb56dde7a9a32c3c9b2c864076e64d16a58"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33373033393135373035"_hex;
                s = "86b7a675432634c266615b5491599f0f77fe0b0dc9ef8dc46d791de8dac6f4af90f56d0af7f717a9f88c1c7288e6d97f791828d0f66218d29cfa12260fba406ec22dd0d5be5ff579b5ff2682011f10a24b0c4062d89c851cee27458d5e79cf6a2b8d8399d9efa15d78514aa92c80415d1671060585ff2526a3e9aca3d9c99d37f9d3e1b42e91cb8b90cb0ae465ebb44beb7360950036f976f24f4d5fb577b75198c29081ae573c4e44bf136c18e9b71e3ccc1a54d118ec43de423c14457982e35f725cac9d75956df0b5f397516a0d560c19f18a2beb3be5ea9fb1259c03cf825d47ad80e610a097ce35bde8e649ab5d2c9388b525d73a47c473107206ed255d37329bf9bf0a4f96179f5f6085559c0a2c0475fdf725addca0ef24056b2a2c9573bc8f7ba13b5574c1c590c47b7accaeb26cb35f426b7fa8050854ebdd58fd051d650f7ea8ff246d69f6db2fafb5300eea601a3b0925b54292f29724f11717d830e943b114369343c2eba7435ad4048f23fde0d38d9882787e69de116bc1f9cc9ce71b8301b1e539e7fab269dde8a882b999a1e9bcca0ff37f99172ea82e8166227ed7227e73e8df5cbb434034d09f236162e893ad0cab4c0e4268c0f9ab58a3e4c8c72031175c5ebc70df900c294d278750c45234d98506eee70b827f2b9d13af09197e6ebb9666f85f9f91ef0bd306dfd677255936e768549927b635616bf8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3831353435373730"_hex;
                s = "91527ce9c6d98c091a7a8203c20d43486391f7fdf76dc39f1959c7578fc38aa779e1d10d3953b073fec8afaf352588357c771527e89bc40b1fd1f2da3a9b2b4809793f0fc8a6324aa81f00d834143717dc41e38fe3da1a0ba359d146625ca23e7df6ccb20041422d6d44f4ceac397bb6a149b1e17c2c43eec5b21c6ae5163c910b3984ecb6537aaa81b525669f5b2feda8cd6a6a0a580ef5fbad677a650644afbe7622fac366e52d08233ec2a6c9c5e76a64fe450c5c65673145b65f680529fb3664befeb57f946b40f780278293620350229416321479419421120d7ace900834bda75e8bf1a99f9d189b9aa14fb99d64042c96d7edb091896bfa536e7194900d806bc0763f4d87946c9b6f11bc85d78f63785e5b19678eaa63279937e08bac06b9a69a1baad68546918324d7e1b5f6eeb4d6d1bd8e1cc0ad851119fd8051a0b303c87f91d7a13b3fd6cb0cdc5c7d0df73a082470389fc8e024584da5e6ef61fb36c1ed10fc4eb721c81abcce51a0c285e77e59f38266f600f054c786779296ac16dd3bbbb58e90da3800ecb50ac893df2d05005a64778bf79c064474b9d9ac8533fd4f0565637cbff6a505e2b4b3ebe3d5469fffbb36a075ef91ad849871ddeb78fae761cdaf454ac2fa43af60dab5f614adbe74997354858a98660529912c1db7175374c053270f8e3ccab4b712fbe0d84269becc04ebbd95985b5429ff0e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313935353330333737"_hex;
                s = "53f4dbd17a75ebf198206f2c459b6a064da0a0bcb5d8e4e35212fb90b9315dd8eb86326b8e3701f51dd02cd0630e452763dd53ed018cce9292b2eadd6b21593f8e3e2d5a271b391b97058966df504463f073906a46edeb88b20d4e34f74fa9f1ee4ce25c251033588dbeee7a75447028fb99a72da3725d5d87b9d09fd37359656d259e78871af9f426a62468a0ed17cf83251ae06289f9ebf00bfa61e7f72bba8972f4fc6a57c666048ec3b2c2cbbf96fa892d026848089f62f8abf1e2c1c6d4149356c6b61af710fa7d8ed69b3bdeb222c9daf3eff495a7aaf28d4c8e7992ef6c2ff19c497978f739405eb395753981578cfda2fdf59965166d25f0a3bd6e411cd14588ae4f26d7582fd68f8c0a5001d6a6f559f2c84801ab7e5f1008829d81f475ffa9a24cec4e5864645c6828bd638ba88bc6d04cd9f9ef41e9f4c7f3ac01bfb5f88a0828833cbca8d5d8f840f4ac6a5515bb551f69c3f6a8d3ebda5a93233aeefcea320e63a5c2448f56458f613fe182161a319ef9ba6fd2ef28f5c16df844ea4a6ecb15ed38635d148b33ed331540073d19ed672f87231bc220197c7d3ace87f9b362378e90642d3a349e27290d1f32e004e18b8cad7ff9eb92a3d980a7ea8d2e274e86d3d3ba8f64f94f893c5fe8e8de4fddcac3b3d50b02814b30174ee7439f44421f6c6b6a7b3ee0d7dafc9e9aeb405c5498e83c69f45a8da96ad94c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31323637383130393033"_hex;
                s = "9f8703178debff5b6b29e524907057688874d51276546f18ce440bf97b410af7694fcd41922b5630ef3017f4fd654a07da29cbf8b73515be0ba254fea595d97b57d1c69208955b536bf6caeac9e20a983e644fa3a883c9003927274f7de0decc291ce40cb847e1ad9196842a2504cf066b8d53c7a70fb23295877bca466ef79a5aca5a92ab391ec0ce4c6f2cbc323d9e4ce6ef235f81343e2299e2526a444d19c7d54e64bd7c8cc81764ad3eab924a26c4bce31eb384aa7cfd2cc9e0532a2e7862ed5b44afb1c90b8fdc2b8e27f41dab3eed9f48af050c36ac2774bb354ae1fa1f69bc74946c39a43192dab67d2490ab1db2c2ca2f8a9abf3fc1b80588f40264e8d286425fd2693cea3c1280db21be051b9198f5e6bf580e7ce2600f4ecd72c3132424f35add136120d5fcb1307ec150a218c26e35abdfba4c36ceace0b91b80049569ca4a3f32523756893d41df2f0294037855d1e43973eec61dcbb1843c8325069ffdace065b2ae138706723f2be7c669f967829cc5e1df07be0033a6e65e9e6b777005879f78905162ed2576205315fc755c958a74f73bdc5ca041e9da74c3a40e2cdd4be9c3b3cf4a4144b33874bbfd1249b43865358be607b30e5ef0ce3fc98c4553b184651e7ecee13c9603f330c83d21ec91127de3f5226d42af696607bc0a43faeb84db77032336aff7cb27f19232dc69a692dca704e6e2d2cbb54f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131313830373230383135"_hex;
                s = "b64da0cd7cae92cd20fe78f19dab400786c120a77733b1a6e2c16033de50c19fee526d3dc3d2df18ea24c3b0fba088d2876f116187125169e22c33386e8e44113c7971349e534df32d20f6069035c7fb70ed55db3731b3e968885754f1019127ae0db74e8abdaf173c6ca94017dd612d4738161eb9ac09aca3f990c5ef56de50c0501164c0bde47361323ac86ecee299d9aa2325ae160790ae53421ac16c1e812e8b7ef25fc2ed08849e2c8889abf15a485c210105273677d502cb1ba549ebe73ab91e0aa2a148a966258f574786b93fb256370c3ecff5714a3e1371bd3ab2211fae69350a83dd9fbc14e1086c4dbb8523c4e0a3685082198ba9d7c92503deb57a78c981f69bf80b38cb948850aaa9c4ce3440eec6eaec5d071ad583ac881a9647dd56d62b1b2cb5099c274b2c66e54215a392f0eecfe7b6cf832aa6a2eba41f6b0ec3b9dfcacaa8f1d82ae17485670499587d0cd3345dac6e95479fea7f644c04850cae7c32454318ad29b5319a20c4d704161df62c41267512bcbeb269b0ed816eb4f27bdedf0c30f87a58c89cf619f9cfd5c8e00e25973a7475bedcd5c1fd06f1086b238c145e8a4185c4fb93527c9a6520ca58ac0c09019a3199ea0cec468da463f88b96c5c9c0f5750f48e5313a008a4d5a0cefa9dcc2a477b02cbb9e27d958d0badc24e2ba3182d336578191d70bfb6e0886135e9fc7a63f1fc840f2a8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38333831383639323930"_hex;
                s = "aba69e866abb3da412a1b5f0284b8bb940dbc7ebb24cb458a325e6399904080212b8612dad9616fb0b92ab057edbe5e6f5d68263cdefbb7209bef4fc507e440c52667b6ebc34f9ff29bbc7c0359d78a8f0df6b3071e871d623536c882b287c17f5f280f77f134f97e6701d3344864e76b70c0b208a2ce74afeafd9bde901ece504e1bde17570b1d0d2d114f7112e0334c8a5ac691962c6ab31f8a238bc65cdb8f01ee526471085807c95b02db797304bd33f5c4c300dd119e200f00200b463be612bb4b88406d03a89821d66257031ec9a57f5f33e3d62b3d18c25aaffd43b5e88e6fdc201fd9602b6f8b7354db3c9bf5466980c331dd6af695cdf00dbba0afac38af5bb78d37994c0d12e9acf1d76b7b4ca3214c5d703789a63301f2f480825de03e272bf791e497a8b122d846540ff1f369d8855a6e5942e5e2095d97ea923dbf22af1b3a14d9ea955b925c791c88f74df0b90d578e24b894738e16d70d1108405d2ebd2401520945208624e760c65f6833a73ffb4bc32224ca3bc78d83ca3b2021e349e051450caceb4caf5e4cc9fd906f91d575c6796eeb69955a634c324c9ec830cefd0c83063f3876e135991500acf8ddb8fefc55b839253ea2a18c40473b02842b36c2e40cfa9740ce5e0818e891be8fb484c9121128d454b41aefd4d4e5ac4fa93236ff05ab02b9feb9fe43bda2dfc3e63bfe9d9d8dc9d804d9fa312"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33313331323837323737"_hex;
                s = "4d5d13eca863400fa4c0d6da1351b5dc47aaded17042b40f5f4018d87a77429b382f1691429c434530be31c338b262bee9ceb43d74045398c97b8573de9bf2df5a84c2cf8ae05b1210f17afeba8a076e91743cbcdaee74369228b7a0969e1af16a0bbb6c93ff09a425495a6b67415b015a5a362f852646185e0bd44552cc8602c3cad2d41f688696d37d11ef76f4f5180264d81906e7366793cb87915f4a58d024998d11ca0206d73220078036e100f267a9608384d574096c811d2bea5c724251c7e48e2eda2e35792edd97c886428d2e8e2d24436397783c7c56e508e558a331b1257026ad459a0a10a0c566be9e4090fc99b7e62ae91af626fd2c7518230b9b0e97896f059b5a216010bde5c17e7dd9585ffd241e7a3290d3a5d0d480ce9a17a2cc775e237651ff7817b669a9e4b2dccb214b4dad622b269994f28e04e538c7b087a3339a7326988eb80df70023d71a813ea53422ac995f99a5c2cd96e8a3efb78fd1532d382f4b9b4fdaa1c4863f5ee80716a6a088fadac29f97103590d74f5854f98b963bcb59028fd2dc924b012c3744dc9a28b1e8f0dba159e3151989dbf3e7ad09c7d9a8971890ca7658f126761992b7ac9a548201c8d72db7063605d7c8d49e6c58eb790b651115d11927b869f8ec1812f8248d937b55911a2198624a373ef20848253a104722f5a717081949590e5da904832ef926cdab7e29d64c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134333331393236353338"_hex;
                s = "314ea243b2bea8afe0c6c66279426f82e7a7bc8614f2729b002bf5775576e51efdc5a1f69e6ae5fc15b06771e45aefb21b650366a0369ab495b0a9492a4e5b5fae2af3f398253aaf829e815a6025454f337a0a530f753d3323fe9b90f36f60e127f9c7d968503cae117a098c3f04dc9fe9f8ec32e8dc1c1b00a4b627016b831387a0458ab707641a5a4ed2e7630edd85b567a856f5eb35984199aa90ff13ca7f7b856bf35379c59919e76d630840c547e5cb726dedfadb22d323d508e1aaa73cc0b1640158be6dbe72f16d7134a9eda78ad55e859b7d320a5005ff15b4dcbfaf372d72ecea1656bd50d18fb4f0ca79bdab376637f0a2dc3820b7b72a33436d0bfc4b34ea7e816fce69dd81409284325cd404864de6fdadbdfac4d74949b39080c01d0b723359c4884e356a875f1ee7a07582ed7d2426e554818fa89ad1c73f2465dc429db9d70a3b9191d1166f938ea0218fbb881d89852397edef4db544942dc8dc14752a49b8f8db93f36d39f4debf1ce3c454113dab80afb348544e964eb747181ff3884a703787e5032d0f80c3710849ab38886b958fbeae8963c209b0a076f9238ed9d467af5c9a6434eb55782b6abc0436ce177a493afb146299f61bf1784b26bb2c49bc7b3fe88e1fe44c8b04d9f24ef6acb89985ef11116e0b518502289ba29cdbd9620783022d30e186649199523760169f28f0c6969c8172ffb4ae"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "333434393038323336"_hex;
                s = "130818f75641ab704b30830a81e3d991e0ba571cb9a86a2e0abcb13fd013e8f550f4c7fe7b3a90a0ab6e4e5b478c496338dc6e0fbc09a80c8d39d7105a353c8f9b5fcf47c889d40e3a824e7b938b7d61a8374563dc57f7ced417d67f8d3bbdbd6980bb093042d6fabed95fbead272fd256ce88f0d11c076c03300d3fa318242c4a66f1c96141f7a030d4d1ed195a386c0cc379e84ec4cc965269c9d944cce6fee92bfac0005100d9461dbb204dbc94340287677c0493b2d6fe3a15bfa282711b9ca5773084c9dd83f2ca96748a3ccb6e8a080b6f26535a38cc9e816c5b0b2109b830145b3b54296a395638f459459a546fc0deddba9e092e004e765f5b67192e148d2e04e48efea90a5a6aabd7eefe592fa49989f6c1e80cf9e122bcbeb78c5dd34ecdebfed4bd9d84decc94b421b16b5458198e6e554fb647f28eea3a0031f45a36233dc4895e03324296939aaff35e0ecb541025fffe1b90ea1f4d7149e34ff849326356dcb118f4b43026fad0a3b1796ad7bc9c4bb27dabd35f858be584721ce053038378943b4d8f9b70984944ffea1f63cf85ccd1b33e92d7af9b0c868daf606332f75d4287200cb035eb574ea843c075b3cd66a581acb6da950d07615efec26e0819f96250c7e85ffd443f570787c609faf5cca0d3ea5d8ded6d656fcba70d9fd02ea2b7dd282fbbd08185aafbed0b52139552d5d420b8200d36c3e95b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36383239383335393239"_hex;
                s = "24294dc6e8bd6ddb2a5248f77cb57d515a34ac41332ed20098921ce0fd939853a102b928e67b1619666149719511abc255111375754f5e6bf4188c585693cdb1148a11f187b454d9180baf16384b3522074ffd7f511e08a526facc0a9b8ffb19c530e01c8f4f71b6a60151c474349c6e2b958800cb83a1494e4f6ba0a1586a00e85a8a7974f8cfafb28d090fef9483298fc72266c6083112082c136a3fec28c629714f8b4267a6194a196e803b53e20496cf45e81c3055086eab1f6c4929e726c158ae39cc73985cfb8c584d149ce9d265d26d58a955b4c2abd291ada7b7f9ce4fb35f684abfc569a757e4676c388b3b6417a780528d0b04e5f1497b37206549d469b0a774997baac4309d00a467d895b06781f2adf0b2d3969c8c77692ff6c241737cfcb87357549e91b680e97fad60ec2e3998f14e4d18a601336d3147ed6a948b63e8ff7cd41cda81229d525b69a6cfa44fbddea1d10cd70c0a8596c79f796ca193341771d14b35708c2eb3e23692816bd92c8009034c25c617ba422b60c5d9b3d3302a9e2bf63b8dd1e683ffe4d0942c5941caa1220f00a6f41c3eaf6443c36547fcfdba62e42de84da1062d8a24af1e5cfa1bfea69eb62517195044aeb350a9e3b6c92401f5d97611371b920b47199fc67f3fdeb731c22a335b5ad427397cf634f97b7a29430c2f063f1f018a8b1e46e3e67330b05aaa8d371a705b4cae"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33343435313538303233"_hex;
                s = "53412f1014e986c56b334e266ef55a6a60f12d30c05a2cbecf2b5bccb3791baf04e888bd32b0898cfc63d598f5e3297366fe2ab25b343fe204cf3dac1f568747594c71a246d42ba68fe9736bef05b1d4861844126af1f911e105efe198c6227550067571d611fd709238d707503906577313e6789e7ab1c8a4aac8d83a628aa19f4a136c5844cc1cc3c4e41faa6f2434eb871a7c9b9f2e52d666ea9043cdc1afd442627ba661a449e4e0e4c16f9b84130c50ae536b698d4c4facf6642d91f23d2eae36f0e4083997478dc7aa9772d8226f0904aa8120c686baaf864449d5bfdae22fed5d034605311cc0af9513889e57eed6b24561546969d1df1a110d2815ef8005baa21af1615fb6cb45d8256dda3e6a15fc764c8246d0df238302f69f36473153c841f1c5363c51724ac82d582f04b29245200f34d3be1a3c653cf9a3e0072ba592c098019f10aae25804d16ff23ea9539e6288ba4196e557b838a2074d33b6849778b5bbb04ac677690d67d7c491c928a16f69b0a2e8feb41e5c620c6e206498d0ef27df23a327b3006c822dd41f16f8ee2a3c6a905d97381270bc4ea0f4457006a31f142a1ef5fc9bf1bca535c2f7d6a1630dd20a9de675be86d1c45e93456bf06fbb8fc55343f40ab4a044092abbac0832cb1ad8d35b480e7092446fe3b5c5699977fc53f01255ea60b86948a7a71c95100ff73b266a103f0b2ed46f04"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3132363937393837363434"_hex;
                s = "116caf06ba69683664a2002ff12b6ca45e82f41e9da874ee12bcb5b670db0f6228dfc5ce4d5c05f44515c4d572974b0538fa0ba7539e99cde314be5d1d9edece531930f8cf2d5745a119601082c30edba59c2943c1675334645c53c958c951213834d1d2d54c119b454e6af03e7845eaf6444665e1c838866579d1d7b167ccfe9af44ecc89cb89817df2bf3defa1dd75fac7187b68b4d9f9750001ed5f6d766f7a3fb4c4a5b01c738b514f0393dd5bffd8363c952533d933eb8234b65973bffe4d12a6e76346bdcb4d1dd061a690c853f6acf144ff68c31789d3e7dc1d2c54bc5f949323ec77ff3e1ab2e64c006e67e6703e6adcdf2ac14c4008a876421b6052d2dc9c275f592a460acb9465ac2c0aedc31a846f8f3ba6d32be20d3d3aff1eb83dbd3cf2bc0487fd1d3a6522c5accb8a1c386095a52ab42a445d41efd1202b9b61a7f1d801215ba334a88381bb13d556255d344a561ede748e63b3e701b24ca95db4eb7ea3e9662eaf75cc949aa576ae25be5b6c4e9fdffed557ce1f4abd11745a9ad1085d2c4ea900153574b560415b2ab473ef2c9676d15d315944d4a9d2f56c3ef95532b065c490b7b09c1d4c7704f8e0812623f32d87c3b1513164851cde8c25c9f42f9b6e325c20996213c199fd6943dee8d6d064fc04e88096ac8f5ea7dfd92ba0be045745910cb5f93c91c8b01940a8276b8bab766231166239cce7ce"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "333939323432353533"_hex;
                s = "04c799ab9a7e3676be869e977af0f6d266eee7e4f8104126be32c26e20c5ed855082bd4216edbbe1d9b55dfed7d93a0d490a425b34eb023fa6ea0058268d7ffeb25c5372c35cda0853c8529dc1634bdfddb0ee40b436af9d77954b513ef315e147b86a5ba58400a877247e2d72dd7217538233a46e368824d28b55819cbee39b1eadbedf0ee7d5f38add5810f34898344d40904beefe6d7824bda9990370bc74800175c15bbc63b9d650e2ab7820cc09d8a281e3d962dc13ffd18685446633229d474aada724ff004f0d3269a45dd3d29902a0fbcb02cdfa7001f3b4857c33c9ee691481368bc1e9435772648e31df5fb8039cdf77614cc0d14f39b988e7f989f2d8c4b36c506761d237da1d829e6e92dc41f5fb2e7d067839fb7d46a6f3c06c1f3090a3695f4c8e4f7b4419b076ed3b09b1db9e741e07ac9ca609a7b45299c34f3555a158aec1ddbbe7747782efa6b0b944a73e876db823bb5802d747bad412ec7794bc73c0c2854db87fffb27a470f7944bf559a20fd24eee589f6c4b627bd30874eae2a7397b1b4d6d9e54dac16e191d6e405cae45f43aee6a09e1baf0b3eca2a3829efe82fe13c1c969c64b0f2a03540ff43a3b0118afc84ddb1993e97a3b324f4d39af3889db9edfcf8755255aa9303891f67446bce6b7029056d7b367d2ff49607144a435cd647c0d317e3577f03f223f81bdb2426f12e73311f4e1928"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363031393737393737"_hex;
                s = "2941cae270952b08ec58d60af84fee4b1d82c21d48356bb8aad78011bac54580919ecead7a20914adee8d385ccd75307ae2f86f0e901116c59901967806bf76b284b46cb84c9bfaa3ceeea211365d5c9b713f714c4e360b1d128101850157b44c2986478f97605b70d92afbacee2dd0040c204dfa1816fe8b39306a4281668a88e276d96279b96381ef32c672a7f4b9cdaf165d7489f9424b8ee82998aec7f561f490d07b4aab4c2b2607a2efe2f89de9bb8133966dd0d3087259ceb0d7cf8296c302208439f21ebc252c532b18f36ce9f292eb8a4f423607cd03a09412557d622f38eec9fb3cfef4e317da96541ecaa82108c88f8fbccaf5449650f2ea6aef18de8fdf98b47a940f16ac0ee4d8c2980ad0ea353cb6a2d0ba96549144856667316f036c3a40ea1fbe14b9906c8149eacf8ec23df1c563c4460c70544918fde2bfa1d76dab1b8103645fcbab882f544c53077a2f940c2240c0d97f0e5b29dab4be96bd44aabeefdd0bcd431975059585740b751aff012839ef3a331f506716b822d5b9dc0339de7e0dc7d554784fca7bebab2d7f714709f11cbc5f40700ee184f95fe0c7f91953c31a0c580b8bed69dd15f45e7825552a75d875bf8bc87b145d83b9f70e8b74b07397d83907c6e8e0be888cf2e6ea5dddde1f3327144a869cab0680d4e90e92e85f661d5bdc0f29c0a6f710bb485c3af3fba73cca9b719476b1e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130383738373535313435"_hex;
                s = "c711f7b56aa4df24a29458f2e0bc31ef6e2c424d71ad243effaae03322bed2c075e49c0f1f49dd5596481613813fce93b838932bdb499a5e1626852c8d3b56b26996b21abdeb0041da3f8b2b9581455ea7abdeb643ccbc774139964e1bab443ed33f0b18f4b09965ed1598988c9aa8e9b0b44e2a13eb57aa46a7dde4262aa0ce6e62a1ae3f352ee59c3cfa53400a96051a5b7e9aafd0899a9d5d362cd8850f3b28f690726c6b931aebedc0f98ce596f2f922308f57575dcfd3e7eff33e4876c6254638637cef68804f06efb2add925e44b17813b790970bd54667d7216c7375432c652e4d4c0bd996394e357eae12a654a8058848b8bc1ca6cf1ca41ba32f01be0fe6d52e463889dae1c7cd44ff5517058ffbd2f812e5ba411bc45417141b02c10491355716f51502ea57dcb9c39aee4636dfabb0bbd9e3a9fc71c2dde9b9464b0bcc7fc94c03acd98c256cb2131c503be1aae2ac7b3b68bda68865bd785727d1500e7075a9f39766567f8985f29cdfaecca04cb27932273a5f2fad2579b0c8cb7c780e147a3d47d6785fc8d28a0e7b1b3ea9cf02f691d7b4e1b6255c0ae1c059a62b5348d2b0a8f2c4673492cfad87a31b57b325e97b8a6a40814753539d80408ee15fa077863762c9678ff3c407ed9875e61021cb1cd4e2709477fb788f96288450bc7da2c425549a9724004bc2d62ceba27835071971b04b35397f8787e51"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37303034323532393939"_hex;
                s = "c135093dc0ebcd24faebc840005cd04f71faf9d5d78c30e1c5a094dcf60316092f3458956c1e2bdd44d784ef65d8082a3e2da0c0a61acc81cb123b9605d5e0f75b9e943892c4b22877def8c9a7e44a461ab93aa317c772c66b643d017a2de1e0e5a4a355b0d800b7564a12c29ac1c82d12bfc0d4ddee202c6f040692976da4469459d2c4a0776789d089323d980f9d54e58fbcd391486d35609fa56269364b212cf1e240469a70c65d3920b28751e551f5e5b87b57650848b389846e6702aad12a39946cfb1c654710b1b6b0ce1abde5bcb2817e93f88f0fd18f2db0a776d09764bd806efca57bf66bafa315e02a7296c31794ec38526fa0daa1b88508d0356103dfe7cc51c073e01be33ab7f75ec84dcbb57de5a907ecf91e8e8d7b37193690cbea186e7e7851a0e6ca37334cf029c7c4ab9f2870ba1e4e02dfa380d9b8350519b9e38c0c5b6c0843edf7193828dd9d07f0145b11ad7386d429b1c139197a7cd1e8e98f99db185e9b78784854c8219e0b5c67d56704f7b5aa48463ee7f86965b9894ec4d89dcb6614ec60e658b684eb1c2c5a89a25e7c681f7a3815c176f909dc4e80feb3ddf5054c7f4f5f9b4dc626ad5462e0d5bda10cb4a900e6326e2ed5ee00f027c54992ff863d61e28adab795e2be6abb960840d7db65a3d0cdc7cfcd708666abc6041d847dd737990dbcdb9c5faaf6d704a39b18fc011a151896b5e3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353635333235323833"_hex;
                s = "5e9ca7f867190be1e78669db4885c089e50d5b999cb459ef6645a7b52ccc71fc75018f8fa931edacce6299b1fdcdf89936dd3bb4222d7c9db69bbb911c5e1548066d0221749f88c29bd85d29ac833764f56d6190a3ab2f6e3253ad7cd35402bd8fec117f669785cd36e6afc8accc66022ff577a401c7a48a38d18e77d8a38ae7f2e74b8390b874653721ad8d2d1ee7bd82a33d62c5bfcd58db90798dea5de494586f73dc942828d90574cf5bfdacdee7adb227ec74f5c6a0644264ad114b7cc9c9856d81f94ece42fc64f93a2159c621cf86cb49049eb853fd37697c13810179efc40c58f601b6ccf4ea755bb142daa62afe151bf48aecc8350926368215504edabc5c1229e77c2b041fdd2295370325c3566361a2be54c411b94e78c928aeb4733b0205d8de21db5674f646e26d220987ed543331b4d4a46c9cf5163e972bba6f20ffc2f119899b06ca79c187e36e0dc921fefc5380420feee972982b01fb2ab7d51110ae0644ea411a5fd69b45fe0afdad222b4ec55346e2e56b900c74e7396241f86395b58bd1a6993e029a936b15b2f63e53997c224bd7e56239e6b248b7037cf48d7fdc6b85510cdbfe48afd4a62341806777015a87b503f8ebce55811664b4ff0db608a16474334505ef5ce9c67327c1bf1542e8970352a3589311cc48b317af87fa85fcbb3bea930a0cd2bef7062d83ac3a3c1547d48476fdbdd0c2d4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3233383236333432333530"_hex;
                s = "499ae8311f47244b6018a653264ca8bbbd1ca51a9bb49b8b46ec0e6903cd4b3582baca0fe3579b1d5143fa1c826897a4b48227e85926fe330011dfefc948984b17e8674a4756edd773e00575a51955bcf31a9a87c676a703155a00be004c02e6068377d11fd9942bf2060bb6c171373b043ff1d3ea46ebb14c5ecfddab08330e87dba194c7059e3519d5efeb32b212c89a70d5defb0e0b52b21ed04aaf643f7cdb738c33aacc0be843514782a3d5933f2a0ea2085e3bd9d1a5c8fe0389bffbbac5d8f5a3f05e2b202849f2a9e4ec37ffc2a3f08684b13e1e9d312a0b968aa49c43a6c65c0a2fe3b5d3a8ada64bcb3ee09b34942165eece5bd0d0b73cad7e87fb214699d27a705759aab1c8a000d3ae58c390f7d801fdcaef2d328daff7bb6f7b60010cc8dbcc648fa6865a0dcdbc9efbe6b5ff474d84bcd339005253caea87e62d2912f4e8d00a693c5227723231b05ddf6fdd6b3c61870d67fb6d231726aad59ab4d9bc13f0bb3c451c29c47d1ce56487afa173259d37792d481a8c23ef0cb437e46ce46c2bdb898ebf416fc9cebd1e7f0fdf5bcacc0b57f369474cac2218c1785ad4949397d2026e88ab1949c48d3a02806f2e4ae3059e3bdbd104ba33c907700eb585e2de830a5cc25de164e65d52ea5ac4bf78a73da733b86723fe82c3f6eeaff5d7c634a48dce217e82fa31357c937a0521e05a7a3b21597c4ee1ac93e9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343437383437303635"_hex;
                s = "38321114c70b1f98560b78bdd0618c27110d256053bb11cc03b655b9ccf158fa512bf7b3552788366643525cef8732b6db74da92598c5a134c27d4ee46920134ca478b04335bfd952960666f6d4e758fe3cf8b0766e94c6b27ca42d4b7b5df4c3c33a17d2a4db7e476bdf8a5c220fcb1f6bf799c3961df5dd5ef86372e3caaaee42f15f9c70be9dd2961f0ae935858851297b86dcbac9888045b51521cee7053af2764eace38274b68b443439c91011a668f4082811b6841d46322ab4b3a9aa97e9be04fa01208a7ec431e00937d52073b5a98f6600188d5635b010deb199923189ac0072ef08f1b2eb788f09e776080fad9ff4d8032d9eaddc6bb2317bd16e87af522647375b3b891985b662c2f47193dba28c864118b0f80945c4afd9b9662707e86d28dfde942bfb4e45de9717247b4740db3948c5cabc5b6ff3facb277524aab1416815224209dad8b693ddbe05f1daa24e31ba254adc03bcc964caba08142b6d3d8c06751358a216d111b069e0a6215399535e5580e8f4a2bfb3fd5d89d0a66c36ce970b464973b2dacc14c8a978a944b83485f9faccae78473b244ea94a27ffad3e5624a8c7913467a85e2f419a7c51be3d616186d85de2bd28d1aee156e3b5034dc69753b9abfa8b439d86d68e40e3558f8fa6158ad0e17b6cd0b899fe22b98ed5b2b94fd31620e7e315eab3492f88c53f95f501b63b8a0367f38e8a1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134323630323035353434"_hex;
                s = "56d7404eb298793a2e78db00408ad9b7a8ee1baf7c009cf1ce95ed7daa558d31464ade5a4175aaa3ff4f7f3919bf668ef5dda59991f9ad77c0bb85e3f4bf3dbcc7250a462510e5a5ddd0917512c6c116a6f730796a14790951ceda3f744e290048e9d394df827420454880dd756a483803d816d4883231b7651125ca2f950c4c248b3c508d50b36c0a105e0188da888acee4a3b40ba935939b78f11b8d00011b6206869c7fc459d62c10d649ca05aa2aaf9a30f9adc5b4fb648cc0565a24c87fc27eeaae0b7728c5d2ac66fc554dc16148c8f8d976207d4a973c32b3aad2cfaa3a2cf758abb1b86c5dfb83a847e65428da2e8b59c3c0789731683b1b60d5ff01e93d58e04ef6b67a526bf067f2fa6bc97951f53b91c6aff3c45f027b90e72da5fc86aed0606ec43d8b0d789d774734e5b3384f04a8f99e01e4585fa0bf3e444200991bb7a3fe96587ba39e05aa5d527a63785f7db70fce6725cbd4b6f5c7f4f095976f298f72e106f797197df2ef03ec84501e5b292ef27c13c822bad32bf217829febf1bb2da00dbbb6f3a955044e5c381c210285a889c2aabd09adbce1a52b67b0c27f6077cc155c1d78f8f94b621f14fd4225ba71c16d548572930ef1249de5b88bac8a89bd4fad55a8bfb0c34a9a2637ad771dec76edf992dee5be30048a44726dc0ee9a8d152ee3ac80e202a5a0627409751bf6440eaa95ded99b9ec097"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31393933383335323835"_hex;
                s = "5382860479fc7283b786c208c6895fa30cc878867b0d0c08036cb4d1c77b60c33b4b384697161046308d07d6ebb0f914291eb7bf206e773793ff338d400d9b6a74ec390b7c5f9d9a59c5d8b10e7097e6a3a9e03f50aa660053a7ad8b32fb5c86bb56346647479869433acbcbac4cf0c5b6237d0e318a2a6af73017fb2c722b7872256e382f27cb637d15938aca0e90fc73e2f481fce70c7ee265a843df3abb17288e0841c28d9b3e93d0c0a9342999e767cd48c740f4be7297db5dfbb19f14ecca19c76f019dc37648a6369a3e7ebd3f75911521c3c667bc67e829e580a6361d5f246d8fc4ef35d66ec9322f8a9ff8ff9961aba614941c033f92ea7fadccba129d607dac5363e408fa272cefe3e1738b5152b395f77f869053e60c0e60d8a16d65c1b78dbf273fc9a3e312584138fb622895bf44a8073d25d4ab7cec1c92ae2dcafaeed22668ae3bef2b7474ce147f5dc4434b928270761ac94eb3f751a5ca69dd008cf7df0ee845b567c027aece0a8335b412101aa22901973d166b67e1e01224d5ccbc6506840cafc6bbbe339e50b7dc920acc045f19b9df3dc936abe9dd9b49e5c332c2521d77cffcb47b57de8acb5ec3b77ba05cc6cff7d47d086f12e90744a084c216d30f663519e69bd84e4ad716d8e9fde4eb47e85ace5854d88d4f33ac5db9f4658dad283286c1ec6cd4c0fe15c232cdfe6f5b92b12264bd0988b3a3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34323932313533353233"_hex;
                s = "2d3c115bcc6341e879de32a9b07966b2a124dbf9805a9c1c84d56cd952dfba4e11503c08b2f5dffc42be3fdb92e52144de775f2e8d8be3e547da427830d3cbbdb1a6afef4e21e845186c0ea990c859b6005410404029e2907ad6913af4c93c168be96a4857efc729ae4a323fa052a8ff432a0521ddd2ed31d7b8d917aa592ec7d9082b85783a27870aa30361d8c7d5e20a2b97fea2d42c328676a9e79d0c25e3ce1df4c561adf63436fce1b2f1c6b2a0362709f86f6f5214b7c0666d99e010a384ea2aa8de2fc0fb94f88f769c083605c531eeee4cc877917c6e7bd400c9b3d4dae27a0527262ce3b19f4fbd56213634ed4ef8bbbfa19d226646c7106fd869f9a1b4fd567b6f4c584a4fd30658722132e16d2dfe8f455421effc59fb5df6d7806c9a3e06811e4307bea0b2e1dd48e514761642b4e0ec045afba3082eb967755f74186a232d067ad227860385d2274f557f4577b4c25077c0bf189f3b0142d5f3a975f8808dad8035f5a6f7462f97b65c7355685f0419e9e0112d4c00735f7f2b5ff84617f2417d5ddb530f885aa82ede90cde871b7ee04774907af4bf6086cb2c0adaf0383755d01f58fe8923204fa204baebecce83f65e625a598fab75c13cc00bfe0210e2683516421531b40e6292a12b1a5d16c9efcfc97d8b2fbacbce3dadedb3dba59a0fdf3fd119ad6b23d6bd12541f611dc1c3750a483a1acb5e8a710"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34343539393031343936"_hex;
                s = "582b2358aef4ca3976f61d4e3b3336757baa2360fc037caa9f45234997c5ca59f4cfdbc3828170f4084c94aaaa4dee12df987c936b5db6c6765c70d6f5261cc1713e100e3592d052685f20a26abaf96534301570fe2e3e3ded1659af624a4c3b0ed460661e198a35544c6a7241036093ecab414248bc799dc9d3e6146b76e821165571d9802bc6314e2f6b2ad81a94e7aae429b8183c60c5c1963e847acf11321da8ed07c7e013320c49a62a1d62474735d6dc4ef4a2083f2769e2867acae904ad2d0f5fa65ec517045fb8d25efa9aa8ca46f581ec4a7c11b1e4b6831332bc119d86229ae14b4ac0b29f41b78d4d7359e9cb063cbd066a955449d11e936e5073612e3e04cbf0e4432b79dda9e3e14dd06c38721f2e6ce128af51ba6141939ce6a35c2b4b0ade9ef0138ddac979f9a24afb69f9d1d8be664abd24c382647d3045f584ddfacc55889e8994358936c8377f97f626ecc188ba2c97291b074004a363128bf85c5949ed72c7687d8b9865487d8051b07cf0546cdaf5774b70e0ccbccbbfea3a9061651d00ea6bbf45961c848b21945213ca52670da488434be2efd0a5af6367767540011b350251c4f4ea4dfe480d1c0bcba80b14e35566460e57ccd7c762e2ce04991989961aa498fd0f12a3b392c45e129720c4e67dd57ca865bb7c3c7395c1e2a78aa03cfc04d1933b3ab57fb2e74c3bd45dba43ef688fac5c1167"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31333933393731313731"_hex;
                s = "63e32b219ae9da909f1db41d569fe3790e906e47067491f0c4b43caca58aa9d956eb127c3ab50e4b72694aefe29113e9506ecabed0bc52f9012d9456dcc2f229a3739e6e7b5bfa9ee8af0d303abd928d1429ca52fd0a49c5eb166c968e33f39af16a4c522155f470aeed6a93408dbb0f278a22b0f65822c8cc9bc718318d3b48c1da839b897f69efcb94539db53d49fcc06e98deb7fc1dadce1221dd4840fb8f2e280ac326e211a1f158d87ab1d473b0cf1c8692a56f8da0db28653701b2b12f18d765c59008d461fc63a92e812db87d4b7f0101d7df8174feb32cb30cf98342687ca71ce7724cbcbeb9178a57de6f07024b3d00d47c50a962e4f71b31075a576757dcb6bd2dc7c8b441c7371bf5f34f878ee5d031ba412a379e4e649fa674213a018552144f1b01a2440d2145e3752c7825c209e625920480428b2623e1616ebce39ee9d4353b1f3be1e9c86b1d5b7f8aa5d65c3260031971c1117d0aeec7bd4eeaed1d456d1ad5b99d84dc6e42835c6ce3322b71f30668ce6ceb7f6fcd8760e67c88a8bb6a810bb442a0aee6d4f42accdf2f7c18c3ea0e1a8e5ac0d2a70c31e1bf421bcf53238acb24ace9e68cc9eea3dd7813116814b06058270a1055fb2820cc3b206b39346fc76bce7e284fbd29df84f9fc4320f5afacaa6c97efb33b01f3faf73d69fce443f6ada2f1981664778dd58a1d9b7e631502ef5cc9b350e649"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333930363936343935"_hex;
                s = "43b42fd492f25deabc9f653464f86affe4ab5fb9ac8c9038730a69d13311c7c36dd97c14721102d33c15c38e3671e2c233d14edd4551bf369a80e89cd7b42d91d631501332415844d71452dbddfa2f4bcc4406f8864b260dfbfaef89f782ce5f014a6c406adcc4028b31dcc67590ed04bbdbb601b28c2e674e48ffddaf1b4c95cccdd2c2293b7b728b0475fe7b2cebb154367d2ebc7d5fe61c7dac606b509a193089c311ffe30cd04e438c826ee2e56b95c43754ed89b06ba000ba0d25b34ff20350ae4672c76d003748301bde42871c08fbc81017caf76b20c6c98ce5ccaae81818a6429cb8cf04ab3f26244098480210a9dd956b99c6aa9f4dcf45b755b306724b28743b03d699efd13b9008b33c3e2e5367551147b25439b87718996f03b2ec16e1cd7007a9a711b03ec1454a769021feb9c05f327502ffb2189d6c2a0ab4e74bfb01994a3f084f9658068057b9f635300e855350fcb2b569a526c739e76a6d0939854481332dd98fcaf60e154daef7af7d4379be774be82c247eb0d52e3bdc4a79c9be154035835d402cc5953799567499644188902f2c4dda86d04598ca2e9c4cdad781baa2b7bb3cee2e44c512fed31e024ba314197d8e864f067bf12f24e029c3a8dfd6e3bd7dfd222cabe9aa9e06b0c1a4293d10360803e5732a610e9c26e190b7493c055f1695a44ce8c4f8982578708a3ee2979734765d6196273b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131343436303536323634"_hex;
                s = "a70928e1809c7057b458a1ec4e4b3834bb6d24ae874ba3d19ad52a4d839a9ecae8f41df5e539fc4453841e470a4a751dda5e7bb3e9e2f3c19d3ede54f231ff34c499cb0c2b907003ecb1bdde486444d6c8467523ffdb2d54c7a51992ffd8cc7c5cf86b1255b2f96b3887ce9454a2a9b601e1ba18e1a06deebc566fd8229db2297c46a3e8122a413e5d3a203645ded323a59a5be8e4d1d59d425e3975e13f644e382955e497ee34d17e9f886d2b5ed849812ea325fcd65fd3743ca99dbeb8bbc5e91d82e72e94a82127baa8c385cc3af73d39a7d40ff2c403df50fd69c777b92039a7cc1ecc3af13521565b17f169077998a1667d9cc1e36c60a69b38458e1bb472a41bc796e1833fc7eb38a4156e6628d5c72b5807c5c7e040917c4232b3e9a3fb7a74eee6cfb48f9850e8b61eed38a2e6149f6d5036446f71aec83d84d1164205e1465f4f1e818ce24a92c194eb3dd8a87e3369769b16417c3c1d2cb41bf3f9c08e2aaa8ed941dcc35ccc550e7fddaa2de43a7d0e02db74b398047e02c23786ab7b3b9d8e3c2a0ebcbda5a2eaeca41b74e7c69b1a48a809fbb56b353640bf46dd13268682eed38424ec36e7392c5b4efb17d75ed23235c00c1f3ac7cdc2935f8c2b8d9b466b1f8a2e393af64f54e3ba00227e7600a5800d8c3fbec9c276f9e9b89dc18161fe440ef6b235adefdd62f22682a4fec3e1b117e4db1325263fd80c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "363835303034373530"_hex;
                s = "2ecb207c24e560bf8c27bbc98004114f7cb9d5814f52c43ba2dcdddb82043063ef6f45b97fb26d8602f304857fdecf66876267833a452dd4d89327b95ba4162add93d697368bd17aaf982506be95ab2ed6f0b46019fcc9dbc15dad63c156c31db2340418f39da0d2c644a88853cfbe26c6f059bab4cd0b031a880da36d298c352ff1cdcb146a8425abbcf2d0e651d1870734686b57d306e91694955b7cb10e856556054322f93a9d45d86c9e905dae977916417e5ec86d0a0b2f7cd8ab8ce18a35b02bbaa977a02646e8c6d870db4a816ddd484a1b9314c7be412bf131f9df5c3cd529da82d584d85485a44013fecd7e820339b67b2fe9634974da873bb4284fdcb7a671df530c529c2d151be9247e77fc30e36f9e14250b76b68ae931914239fa8dd5b8c293a325d043cb300f20326eb563af224572b345bc4e069c3db920f7d222ba9d268a52c6fd5680481fc6f2e1c93dde845c821e158d971b09583ee10187c44fc9e4ca5b0c9a312ae5240534c03c4eb8ec375614f0e9ecc2ca89d99b375d6812a3a58dfb354875dc5c2eca6883beaa26af80c2c40cda9efc4edf4f63fd1d4a34140c7b37df98144a0cbe4dd5e2ae25b8cfbd072bfac0a4faf62915bfa851351c73215cf5823044be6551b1ad48a71c0b354c472d9175ea5f7819c3268d18452fe12f1d0e895caea537b3da3c035929d290e64dc38038fd0657cdb514b2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3232323035333630363139"_hex;
                s = "b49a149864b4ada746da07d3dc55b95b46bc2dde52263b5ece4a68ac521615e9de66d35260a0f1569b6826f387d79c68c1930a8a7cd41b98d060689fa21fd85776d970a55e3606238b4c42a2f5552cffc1a95f0cab6fc6b87f40eabeb83cd9a7271be57589aa9603d535e5d8b6b101a7ee20f3e1810a5a96e57341722904c7f8af6f01180cebec2ca12259d409c1c8ed15f4df40948fe47e296d82c2aa3f60f4f4aec2edfc3109c148f8bf5c55f8c22b6bec51485dcf10e323ad99ae09c85e749824de11f150cabe54f2ec9e95750281c399bfcce82cd5ee3a7848fd18dfb42065ae134acae6ca6c08cefc954c54690a197f0d9ef61594d2c1fd4dfb6cf99262ad749f83b0b143e4ec1ec35aa12b6b0d279692c4e0332a6de12ff1f88d716a1f54a182927d184c22da277c0be29eafb313446bf45c76b08f13a583cf445ffe75c852e51293bb6a64432b6a75ec933726150a8e4b3f52514b3dda2ae8bca409b4193cd741e16773200cd1ed526cebbcfe24613476684ed66963a699ac90ab84274664f807e4918f24908b42758e2399bcaa5ab4f3363f0c72563dfa10a15c16fb708e06acdcb88d35ee79b468e64cd383b8c8133e16e0618a2a1e56180bc92ac4c766e13ac357dcb0e2003bf3960b72ce0cb7c5482ac0f9fc7e629068bbcc92e46e849bdd39be373ecbf737a82941e11917cf70c1a9e1afd6602e285cd6fef1db"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36323135363635313234"_hex;
                s = "643670133c6c1e953ff28a10ff3833c6c0933916d4c0fc368d9bc4e6cc35bb1901b1acd067e4436470dbbcea8e2e8912d85d49ee99fa140ae1a3ee6663c8980a852c96af8686f4ef5409d98e0d0b68bebf7673752a6bf61e0476597bef490f65dcf9703f49774c42421f74280be8259c9b192b06a0b52751526aaafb0a276cbc588ff5ff80dec98816e169327d57a581817accf2ec4f2d056f1bd4fb7252543bb95b436a665eb1badc87d05dede7f91f03d0b66cdb6264671254c2aa82392a73e55cae710350f69908615902128f1d96dce93031e6a532edf534831284d94a4f2e1fdb319dcfc62e4637c101f21a0d784ec7d6a1ccb743bf5c9994e5ddd34e7e76a0fb2f7f7eca216e69c3a1e068fe391262a97fa009977318284f162c4fa3fb2a6cd154ffa8cd4306e65babd405bdf8d879d14c0c0503b66078bf8c84c947389ef71fbe53dac758151bf415e6d82575319464cb9ab221d2fe36600d8c2dcdb7f5ea1848d49f7cbab8620e2ec2a220a74d332464d95414d11605791f25f304893553ac99577690851b36f89708f74d5802ae6e0cdb69b651e9ef66a6e1a66cc2aab10ae05b58149e4ae2962b7afc0c1df8f8d51267d1cbe8b0ff225a693546daa46f2a7e65cc7099d1aafdb1e794f0f0a9b40571d184085ae873e1ae799aff76d901e798d484bc0aaf9f3f498731b60a6553a74c32656345f687c529abcb849b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "9d1925a05f0e28592ed69d6951ff5417b240bc327ded41b460de2fc3a0101bb89d6badc5bd50e2d1432a57b7bd620646e923405253e93c7f2550c0740ab9657752863739fcf89d492ab1cd8ab2088f4ccd8848c4eaf95cd5e7240872472f35cb702341c6965c0fb7b113bc45d991cf9616b7e200f2cfe79201babba3455a60cd628678725c49958282a2c751e0861f20d49a4294d59c3cd33c6ab0b6d02121f6f2c9322b6f9505694de40f9a98f628edddf18b9dcad1cf586ef22e7000cf09582f80f0c377955e110c93dbf9d7938c59a0b7fa283c2f3b186c21e070da5bb800ec622036906306229f8f965133df82521f454d900a01bbee1aefce262b1d8d9219ca809c699e523c5c7204ce45c91fab1cbfcbc1930c661b8a3da04e29d63794a65b1a656a7870c7974bb785fe49dde68118feff1dc6374032e9225325c3e3d312850d0ebba0a5aecea061b5d61c8f13f9f82e6cecf6667278da4ac38ec4424bcc0fa6181ba1d63966e473157c76c7d007f2a0f01eb4efb54cfbcdd1254a871775339354695618d791ffa8d57fedffbbe568a5b848b7fe037f8002d96c478a21313ccf42e5819478aed99f6ba834520ac2460a5aed186a96dd9c90754f9d21bdfcd2635bbd11e956341d0284b51e352c79a7adf1748f2deb2921dfe6ce8d36aafa35cdcfe5917113d0c29cf29478f9000a0c78396cd891dea0056042711c0e54"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f19362834eb20e169132d1ba73bfe32b50faaf9c413d0b2ad578e263cad266a3144835b129648471fbbbd4bedd9668d6e96d4c0d0b95504a8beefcda6b9bae162c2c1bf53ba91d9e1771f46e60c0c1d356fa166a331d51ea85bf270e7cec459908f1fc29bb6b5f216eb9f5f453d29fbd486a03355cdfffd6d131f4a027c9b179ef91257272d5a383898b864732edcde78e5cdf2a9ec9640e9500ac7bb06a7b1f1e947ebd468815a56a86a6f747e806cdbfb81d3fec3ff66af0fe5a472f559ac05b2613ada9e40587d75d98c1368776c696ded9c0b34100eaaa80f2016a2797ff0c0090e4e3b042943436336c8fe72fb5ba9c4b5264d97421582e0e859b8a46a083aa75d7b8f1137fc7d1703812f681f615804385d8f533f0f4f8c21ef3921f42be0f2ee863480d72dd8a4d78256cd4f44ffd62526abd67d2b4393328d41e45f569235f091bed9e2c72b559dff4af790401c18b4af71613ab53f1d362f3ff2e6b0d4c181ca051f88087ecfcecfe8a4844f7f99f624aa43a070bf023d28eac88368e7e8f7c2357ce63728820422a48ec0970566ac96ea714422d5f67a28f5b67ea9008dc95bef728c51c8b5d83d59f92c4169dfaf232b4926c9b59c5385fab598bc6df7ef58b88a60462f2692a8abb9f8699169094b1971c9dd6e90517582721f6e49f5af1e94d9bb0efd5a0313968322d86a2e2aa2e91ddc9d4fde0a6b612740"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "88a4b39c219e6d7a7155a5e38eb2bf76715c540c817f5f7c3ac827fa34ac202c7d904aef8d59bf449154fdec535b45e1d0a5e9d31d4ea75ce4e6a07e2b7b5ad61181a2172f220e4a0679857eb2152a3e2aee3c5c0fbe8e518f6ae410cab5ce861c66ccc7f72494b9b0f0a06cb8122f16776ba7098139884006a08a6f752948b677f1bec1e867afab783f03507c5a4a528ba2a2e0a118630bd93ebaaa96ce378bac92a9f02eaf0838636685cdb7be2da6bc6438cc84b907b4c927eb1df22a3242e4886bd74ef7133e37708d3d2528ebe39e9c051a217c6c7deb2e6a87b905abf4ad4326d6a830ccbf2c3044befbb9100a364ab897a684b472104a1f1484e39c2f9ff3f5b8ead0fb813e3d54673713f1909af085359c881bdc7b82ca9f2f3c1ddf3b17f796496d29b62e1bdc7eeff0c65b78b4ae81fe7b397d02fd0e74463b3cb68064aac87dd0aeb36248c50974b066b7864924f36084e7bcf462f08fdfb387c803afffeebc9f0c317c9882713a50800e1250776720d1dba53e5c1dd3e8b176c6abd051bcdc9851e7107417f06c5cd9e8853f75718dc6386a7f4747ffaa87994462fbd9ceac6b5da79f9dc5c5363116a308b4c20e673acc5a4aad3fe7f427ee1c08ade6eeb048cbaa0120eaa3a74ee39e5f9e39dac10d5019f1d115dfbe051090037503a63229c216a6cd4b6b4723340debcd812c13edd4e77e66380bac99dfb0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39a5d241a8c6648f4f3ffc5224dc31585e22a58d343cf227b405466ff8f8d5bf553affe12198e6f8515b05d4f6bda0fd645874676d7bff6dd67345f4a1aeb21adb43abab63c3cd53f186b62a1d44d2cd9425cdf163bd2f90cd190329718c18e7faccd7c0f5f8547d74bb9df9890cc8c5a84c6f8fde84f4c8e3409703196a7d7466afa6c0edc728f1e513fabb7df97172545ae8c865ce95dfa81ff35870e71b1067762836a8dcaf186c9fc7e0a633f98f7d32ae10b2a6d962f720d6784e64c04e08f8dfd688746daa69bc70f652d1d6f806b0df297f655162809fbed4cf0e07d5ceb66fc5b2fb89abc4c2abafe325eb4617a2d244783f70002056961b26f0c2dc5a7df3e883bfe36310ac3ec92b71687d6b6bb3d11378f0ff85d98c6584bf2d2c317bf287e95537d0314519bc6b01798c26b3d942d08194dc34a884d62160919db67df95fb9bd4d917d4cee73f88914572db84ddb3804984c2da20eaac9bed684a0bbc224dd623e527255fd27ebcf6435292997fec51b55b73dd83decd002c348b2025776f2031672a15fc62ff857938e0cfe4da61f5f9e0442d4452a1f7c2687c632bfcb143a544120017e26854ff6a3e8d597ba4fca595984fe1d38a9199327d12fcdd38663dcc7d1fc7ac6d7845022de5336f9e570a6700f0c5eba0ee68c4e75295f69b76de1455406cc6b285ef5b86729230ef8781fbe63e0bd9c82a1064d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ba629ef8d7cb5798b51fef0959cc00b4ed788f6f37b70cfb16d68b864ed1a33ebccf4890c78970695825e78b3f219811e928d27af0d389e4b75624a06c7cf2174e2a9de6e87394f617b8fa0361a490dd45b9cfaff13b8b807e5ecb0c1b6464228f1fd968b9af8f7a63fad9a7fa53bcbc633331d33b4d7c2bac330354324365c0616bbf22bb9de6a5df5570150186f517ed1b75433ac186ce41ea4f330ccb6fdac5f8db5f63e37fd3340631f7e4c0365b75a0b2a9d790bdc6a0ebf828c84a426fa9a7154cfea1bb9450a8261e0cdfacafc10ce08b64f941c3bc23732a4c3c43c6126736d84033365bb57b3587ed98c031a85325a15ec6642a99cdb186156993ccae8e36640419c15287e7b7c0518376589b93106c434d67b5a5c1fd34fbc569a4e4edfe06b621fe3bb86efb0fb15475db5477f6f9a85d385dd49f0cf3c5d4f853d0574991d1a508d5767df9219f8f15e4760f049c84938d4dca1445df3d15f9f42191e34bdeb15742050812b30a509d4a2444dce219f05d0faf11342bae72dc3f5ab1fd2f25b507d7d7e30a9d4c619ff587ea03d471c8d0306ce89ff3a8c1b2d650eee83308a9236dec87e0af54c74f402f9cb84379aa6c9586db66aefc94fbde391330fc108569a0b9d0b63c974f333c34e881494e02047b19102772a61f89f19622e0b8d92dba4acb19d395d6170dd5d22220b5e678d2c9c9cc7c843a195be"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e591980e9ec3d62e2edc3163ac8206fc09fe026a2f7e622dc5a6d02976d30ecf141295335008d91a223ee98a143541494ccf7cb06a1aa61de524fb5bb4b379a67ed2ced447c7b395c57a625f835dec6844c3b67a85aaae10e273d3902f5f30539711f98d73f86beccd798b98541a84a03ccb3379e8eff88c19c88aac7b7ea99758194ffa6660153d4f22c1252dd1b7b574e19b3492f28cc097d3ee3f30f6b88576bc6299512f9f8749e0b297295bc275ca59f8056decfca9f3980e6f8d6e07b73e1a8ae8b3847556cd67ab77b96618979ed37744be2d6bc9f2b671615f1d4c4c1b419f05036148182ad4c6375f9e3c7cb37bb75d16c4486e97c0ac5685995cd8e5d76452934b26105be9074b2f8daeb1add13c9b127dca2858e5c80e686791a6f98cd98e540bdf27d21b2dc9fc84e09561df968d73c190b3081293d666be7d991761f4722450ac249a6eb4bcdf190c214630c85243a6c5970184e257c00c5a2a18bcd20195fd041887f001e06d4a6049e210cce62356f99853f3da2522d3d63739fbb2ff315e68ab4a05ba1e29e5b93808df51aeaced52539d7b956db2f229999ac09a6d4c2ef8714ef9d4783f538559f29af9d850bf71b001f231270874fb8dc60f1d1554f60fa69cd657112530e22563fcde26c3c86137e476a2fc1d8ba4a15dda42d4d8a20fbbad7586f472b716d6ea2ee30f1c111bdbb3db8e5e2d933a8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8ecb841b89759a769d8b3e423edac171ac5cee5e86aad6dd9dd4cac5dde628a1f265ba4f5c9bfb7fcb4b2cd7663c3f58da7e78486acf34b123cb870a6c2b73eaca03d4b11500b49d9320790c8f87e057c0065223d3be81c01b00fcbcf0a74acf0940b31ebac9131a431fc6a8a1966f87fcf445ef724e59b1d015abf5361c13a2b779c725bc9f8d4c945fc932a9fb94d91004fb59cf5544ba67deedbade270cb0d6f5481d0f5f16fcb3b75188b52ce86d665d5a04ba3ea097a72f9cb4ec2da1d7ae72d8781f167b444294ad0310075dd395b06b51c60b3201e81c8cf2f89a2517e2bbe8e0dc52dfa913e17fe0dc0682eba64e784cfbf73a87254bbd54158e125a8640301bbbe3365b8ec6315af04a549ff0a903a10c6e9113fd4023bcd8596b7a0a9ffef8b4d64ea3143a825ea3c719a55be17444c97f5f73b7627cb467bc76361ef349cc79811e32b6a419bcaa4f38ca3392fc9d3deaef7049a9afafafa861707b73a5d36cf686874877b2065360c176d0e20080e2f73ebafa6b637d7c8f90666915cdfb3c0745e2a7907b125fa5d7d35b7127c3bfccccb925460c7cda80fd49cc9cdee5c3b2408a5eb34875a7f11edc1ff1784bd379b3520f6bd410ec469c97454f18b8bd2a7e16ec2414f01d65739a104a83d968b765b233a1555ad90e6b9e837cdcb6c23ae274e5172955d9bf3434ad97e102bbc37fc21b1dab1da7889868"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "23e198d582d048874ce4e6e69f5a81234ca08be1fc9cf0f7be05454997fad87da8f05c2faf7285a7a9ca7aa50f772b8175479b7bec85919162b8a7eb7cd4c1b8f0aaa64a8f371e23ec2c3428d7d83411f24bbd4b80762a75fa0e5de468a71dbe9bac382b4072241e3c7085ed2b9e72ec3779c1f70bbd0f246834f3e81ebffee13312d133e1ddaeb58b84d1ac1b441f311ee1e2c9693e300862cdf5b4a5d820dfde870da22746be0b12dfb943780c0ba928c657c54bea0d84db37fe50f0965ceab905f2ec3ff177421b11c30e846ad93212485e7f6e52d7d51af1c96f31fef174ab38cfb1b1fb5961cfadac518a6a4991ff2d561a7d8dadc5ad430c94b40c04a297012f81e6e84ca02879fd82b73744c4372ec02f141ae6c4ce75595559f3f4cc9e4b7a7a6d93636487e34938082b3fd5f09366a062484d1820586a720a9618ec18d980c969a28d74c81fe4fe7bb61986769a89716c965a7f056aff60e9175527778210eae23e53e244b973b2452f40ab375222621a89e1f5f2abfe5039708f2a659553582f760f0d264f854840d069e8c4db0246738af1697b05980c1f53a1ba4eef8e08583781c13a93d03eb19db75e71bdd0602b91908a885b41f0b8d9588d6e05796c8a6f8d220922ef9bcdb026af9bb328ac7d96d4078205ba1abf00eea45b9c260e3b55da036864bf5bc0cc2d3944fdbcc7e64539a45238bb2061210514"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b14b4e3a093c81a6411fa973fc113a8dbde16b3dfee36ce7b6191f7595bd8ea27cb4729535e6e8d777579d8bd6a0243a30240beeba0130365bd21913160b4f11e2f0c50a05814baabf348e12bad2308dce76654dd2a8c8bc8c542687cab542fda40118ca3ceb428df5b2889d541d27c999119a77bc98dc3ebe772ff4ac6eb7d2bf826bff0e4df68e2344afd7abf9517dd5127b5695027f4c8f5b16f5d9d59450ab5bd8bbbeaba13646be416c99b7b2e701f17b008f6546f0aeb932f9aa9811fbd779a9861764ccf52ac7cf8c1defb94e34ef868e17959aa0fcde5ee65d87708019e9d1b4b43f429281b4b8a473148213e3c804ccbd3e5ad70b2c1b97708f3396f0ac6a288b8aa92f2e512a9f0d020b0eefa124bb7c6b471b6eb2e99bf95ff59d903800cb6a505d8ce60b76c726c600e1d9873c54ea3371252cbcb16ce682fec53bbb4d550c73eedbfe5dace3f7f6c07f556368d5dc83240d2f587c10d181a0e8b82d8756c580dd754e726f8525ff96a85b30b07771249f571e63d23286893d8721a5362c3751f59e2d9ef53a1372dc5b9c5bb494f47c1d20863e053a9db90453b99cd571294e8d70d03f0abbd8a527b982c1491d99e1d50ffdaef538b374d78861ef661dbc9175ae77e06272bf4b06d9ac7f02b7792f81fab47528ae29c464d19fdff1896a83b0ee139e9cb54a480310a3792c27acd9623c7e9dd566bb4d10b7"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0b99eb61866d3905a621bdbae892b6d889047d699bd5bb52313264e8eacf363ebaccab83f65a7aa3f0e6a67099094fecb0bf09e04368d2e8353a531c71c18f9dd2fa84cf4983a2038a9a9ba00e2016cbde87712fbd273d3e54ec030ef1fda1d0bab1af86b4451e7d81c52774bc1422c8cf4042036b16bed75ce5412fcbd82943524e9dcb44fd7412565e525e58a9d5827ca1df8bce9307c77cb0940a24579e637a287c0f619fd1188f09783f0d2b728e96fc7b1a5d1788eb912e5f56ade9b373e882bfa6a65f1b8771993afa759560a0117c98a1b1571356cc4e7cbe3de465ceb5e288a4d3da2e8e87fefc39fa4a389f8e45a656656df0faec1914cb2d76faf8d37cb58316728396e00599c860f6de0621c275d5ed7ac03534c8e8da6fb971caab57de9c6a7896ea0a04e1a2f9cca657102c1913bfe113f12584902fe278e6cbde92b7aacd6ff973e39c5a8e8ab7810ca216daf6842e5cb7ac7235ee8f5f594c4eeab5a3aa7f9ce73aab921883084a321fe67e310bc2a7fb0f08d57d5c2c340b71e1e1104f6abf25d7883c8895747258d878467a63d3ff34fb7cd8b2b5a40817955bb6182e5e92f92d83437020c68f4547b72b296e1663c7bc99f7f6c004e08c8429037102f775a8a74f0f4bb3da25174dbe6ab54e392e6dfbe179a7ea302980720dfeeffab8dc22036430c4d31d66f4372c8cd00c8a611d09dc0e45f5981061"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "12d508fd025c4d8a042dc6397f41f341d5498eea7eb1509c2edd8c3905abe87833fd75a7ef3721a8d6fecd2adc07240385556f21b7ccc0ddf96886b4d2310fac0ac82ebc351b608fe580f64148ac58e5473e3e03956cae13c4cdb77cbce3b132401d638655bc94e7057f4c389bcb08a354a7fd526be421e7382163a826de12a13f40c3abeb57ae86d9ac941c5b952ef32c09783895bdd83df2073be1884a8857bcf3442b628205a422b92582812bb96950c85ae9ba9c4a393a64163c51318dd55008abeeec978414fa038ec76366267640a4940a2e1b3212e0fc0f506b035e242805b61b87b6da954a4726414834de317504b81892161f6b22fda4e04618fcd91103d2abc022ba3e2b51cbaf8288c8000a436986063e97e11c4dbbb1374cf6a5ba40db5e035280b018bacc0a60ef89fae03c51a4648435db80d6018ed29c48ed9a131dbe098b709aac4bb6002cbb082dc7e18f2e1dae7896ba99fd574f235b67d523e4cf380e054bf200497004e55549af78a1178b1516be0215708bcd0c34a84cd2a3717ce534da5cdfeda6b0be74be7245b4a83c48bd73ae84eb1c82444c9181cbfdaa92132adf10316ca5d1cddcf6ddbeac45a14aea7d85794f0ee941462d7c0c4bd36967aa61424ba9a8195c70e6022a0da0f00641da2a2ad1b2023d54fa3819f76d0cdd8851aece1995c23844ce34288038cd767ffd6fb5ab70990ac11c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0147dc7e2712616f76c84caaa47f17f267954a0924bcd846fb3389202c059062f30b786dafab71fd7464caaec5a968f75b20fda1a4c074c89b2732baee615c6e88d1e2e2fad16bda01db395df1103e0d1796da2fdf9d9c8c1c776578e8acde7d97808deb83d0c4e5115de538b3f5a48ead7ac6b5076b12baf7db4aa68a091174020e5e4adf275702020e6eeb9d8c4500170dc5e2171ac370763f7b1000f805d924bbd80cec120446e9be5669181a8e4eb033ceac5278e7b80ddf97d1a58737f072957a221fc27cdd18aa0514b0811e967d5f0eca4f2553dea4760299c4db6347c9070759809247c48d035cfa06caeba20db6122cc70f81647e93f5fe63c4861f637c3623354f9c2f8bd2f9906b0860d0c81c05a0033d966323c8319c5633f537b9180166a2f15502b5e06dee09616f2589606e7229a0e6fc770261abd737c02cfeb833379d0d5b850a39d4587566dab90ca7a8331654532b589ab7aa20376f355aecc03c2b06149f2f9b4290d0ed304eea6947d235341455ccc04e91e3c56db5d1b74928c3451b5a9d3ab246ffaf7773b0d86f35400ad2ae02ec761ae675ba70d1a8dfceef2a8a70caa3e4aee8c98578bb8ef5a8e2570646d1e62ec2fcbef115ceed2c16cf944b4f175ab0899dca124683f3bf00dd0dee74c25dc4cc82e80d10e9a941845d9e174dbc9844941738eb22076a9f6253cf604d62346c14663bdbaf"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "315a9a4ed7b0ea4db96b233c62a0e7bdd725da924ba2ab8e2f20ccadb2b5256bca0308cddcf739d1e6b33a859f03c550d65c78958f0eeabff625bce6c8ffe38b60afff13cf33866c35ebbfa85b70a3c592f74e47fd97b07f3a7c4f14e26e7be666ff64cfbd873cc06dff82da222dc135ff47f875ccd695ca8c64572a97b76ee7c772d9d07e4476fd4e945ab0146ace3f0c2fb98c34a066f053d93480d1c7725f858e459b0cba699093e8c315bbd6d1347b608b51906d44d49f106ed866e230785afb2a2002b82305bcdb9927ca266ae641a570d0b58f344b5e077501d6ec2fd69b3ebc80d7dce55590f4504fa809178d92b45aa69ec1b28fb69197991ef33dc9f4cd661fd6ae74eb99dfdd1ef122f12d04f7c7e624659fbcb2b987fd5fd25a104d735acf50f3ad070333e9cd4e659aaeb5dd28c86ef0680d0a6b526523e3e5a04cde0fa997c2a4a4744cd87170971ae3d903e0c085b6e62f8b715df76c7779a729c5d92382419804eb32b23fe4fcbaafc58ffe9475710e789a09cd9c3b8737032222d92d0a4cdbe53902d167d49f41e60c94ba8ba119499a5bcdd3eab544cc6226389c732d782c69c97b56c4b701a6bc032079150ae1af8a7ce5e0ac540781e84723e076911f4cc238e95689ac12d05676cc6da9219c491e2efa2af317407b5846fa852261181ccad659911c19931fae0f7e70e44d2b056a2f63d2f6983c9502"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "07c9a0c4ec1ec530aff99c7add866e0d065ad0d4b8c04b1937fbd821a204d11f47f61d934105028abd2f4630c5460d68ce33a02a95866f6b58bf6b3cd06a82e543620cef0e4261083c672f2289f3779bd085368d75a0ca002427b0997e1b13f0ae4e2a32d475c0ab3c7088219708c1b774577db73ddae7dd22d32741cc3815029596c0f654c45d6795d47b4c1007d25e026536124c121b5c1ad7ba59b8cc5ac7c288ebee89df9a7385676f4c928da96b2216505c164f527b0c85e4465809a2bb834d47e1f8221d62f4bcf86e92fe10b11dec6b0d8aa34cbe1a8fc43619f99971c85dc3eb4aa091a76055c41151964b5d65f593efa0dd6a82f076b60a71e11d88b40c5c5643e9fde6c05341d2e32bddba6050af72e8583f8ccc2605e7596f7206ef7b9b59829d911a9b5199d4438f642d2367d28b5d4be12cfc5280402d86712b6eed2ce2ebf37f62bcdeebf989256a1e19dde38f32e3980b8fac73ad9153ccc0f140c96413bf7899d8fda510d8315e7139e8f749f8ecea99afb63af081534cc9847d81e520b926b8f0bf1de4976c5f6de8b7cbbde644158bbd3807bb9fce36339a06d930c137230f52fbe546066bf6064ecdc76568d36ae706252dd4a9bddd3b2567ccdeb3bab11bbab3560507b5557a9c66aabf9e2cf3e42e3691ef77a3b29889a1b7e7287b908f1c281cbe2212a3d980bc3d312819fab824504167ac01c418"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22e1bb23c2bef81ad373284aebaa714bd1a9aef8bc6730b66e73ff0f6649a17b2a57b3b14ee4dd0362f659b69c1528907ca7ac8a9e5017152073b06491b255a7d5b8f6909c18583d8d118ee32d3c31d7845c30c419b518575b47b6c632f2102c4fbc73c2ae5920d97587ddcb63eb922cdb68c00ad477e028049cac752e4101c364e11c61926bbbe731a7a09cd30c376ced8084bd1e9e7532793300f5d063faacd167f014e66f424a50e2329091a63861539327b664b019124fc3f3131c567426036b55ccd7a5e37c3cea52ed02ab9dfef0d4c08735d04aa32f11938c18c7ec8c126e90793f6f5462366c869c7178701e3ac87e68d7b8aab57e5750b798c89bd528edc2474627aa5f087682b9b652bd6d61455a2b7181e0c2eff78b89fbac1a63691a3c94c873d8ff6969c754d62e1d135e1a69276f978169ffb5495c6c26f77c9a9e9229d436abeb0f635ceb786e5ac52cb5b57bf6f0778b62021c5ebe358099a995197712ce187cfcf60da15c04382d2828b6422e1959445be219e9aad957e050bc5214e8b18e916eb5d1d6f7a7bcf64291f51922c5c41d053d50ae98ff3c3942fbd55168bb2c439835f79d1fcacb3b8f1e40bcb2d3eb1db774b07822a4e6ffd021a49fd9eeed2060a79c3674c7ba5f7ef6c909325bf53739da9b58c775edd9ef54d625f00b99bcbc5b2ff2934769a497597862c818428eada5058e5e988f41"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "960e2cc16879708c9ae7329f118b3d9c8c7512f54411c7912c18e1b52fc9b644e72ab9f467c78069e2fd0156241b82b6677e34b782b7fb0094c67adb4827e050b0b3fcd1a050a6fc4e7045b3766dbc9a3f59116226ce2a2e4135e21697bf4560a32b385eb438e78b9adea06a5bd2fe268a1cfe763be160d0c5628fa009c870deb70787d514a78da0b505897afbf0905c3d9c2d849f8bdedbac1ad26f6fc34f74fada027f49972b33d03e9d82b04834a6500599d12d524473b4e8a8d1bc8e4402cc1e5224f62911cb0cc922513aeedae57de13c037b527e36771d555c27ad4c92359dad0f4617b22fe672f01f8967ee1d602f22fd40b6328ecd7698fa1bd8fd5358b5f430ff37904d607ddb45ceec4e66f8a4a12fe24221db24624457589b81159869c26088d426fad0a853cdbac650f4d1fafa913f98069a669e2f0c79ec84ee727dcbcaf233c7908955b98d6b5aeefbe8158b8e8e9ba60afdec7556f4278a78a84c6af3ff4c4bdc7ee06bea762db57e996e81d05ae3ec62e8d99a419c1ede6934ad1b6829d580643e16392d53d268ebb1f225c8011fabd908ce7e0c7b865f1e75290935b27a236a51f32ab43c827e249321cab4b202e02c09a747fd06468dd97906dababc0ce4e05863110945233e2138f5f8a3e4b994ac57424d9a3c1c7075836103ede5b63e2645be30c640c66cfc4ed4b26e76efd8e02f4de24699161c01"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "492af926baf970e1cafe0062596f226f8b8c38bc1903a3754f83745cb321b86671411b9a96ff88ef68119ca39c8fe4599b703f6776151ef7844a9afa23ca63afa99b64721c1904329eed182a3b61f6e267b6d80f7af5b8a9a40e32e5ba6c029133c73e24c07e64a9343ea8f9b7f6658ace44645ae2a0c18ead4969f73f6b3acafe5b64d285d8fd38269c14c266c1a67f9ab1fb83793352a29ec39d847f02e1903595c88d8c64965507516309b77185a31971dd47ac47f9d7cd04ca1a33e5f61a0302c1dca998723310e0bf8af8bbb42128d3c2d0c4f90139a78bdf3ed4250c2092cf927ca137ecfce6994a6b6c12f840e69ab6855383ef93c33b93b984f5455eca3060b22712c6e82e05eb204bfb77932d7f1f7f0e9954268d801523b1649839cd6b4e04c5c9ed37b56d843aa4f9d546bebe4f2b56093987c715e784c15e6be25e8af454755e4fda56b2b8bc006946dd55469bdd9e5d5843094f78a9d74b192be98dc072da23ffab3e8fe603f7e467792948b158e84c98e8b600c97f0310241310955ce99c65f4910107f4ac96f354fb6005eab9c9f1bceaff68167bb6f39004d37df3b5de71ca13d0bbe1a2420843ece44bd3f5fca845563834eacff00fe6a16972ba647323d637fe8da1e2cd3eb1db2158efd395ec65ed315aa229a7733dd70b741c6e2857334af80f392460c1a5563086f0190e15238cf41e74b76eeee525"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94987f1aa4dc1f0a782ff78af1da6495309e247f184b683ecb3ac5f2319ac6cb324f6e081c69ae33d2e8bec90862739187336d1133856d6ff47fd00296e96d9be845a4d606b9974edca34e36cdd19fb0e61ffd526521228f38c2874e99ca8e03f59269337b761c822df212425b38fc853d998a0d411d05a675f7d6aabf64c8068177ba8fb8b36e18df86e7f6e91368f364d7eb91c4b5878a1e4b610d089bb4fe2c4308a3a0610cc3070656b5d2b2fd636fb2ccf7731fc7c850b4cd196ca68992c5b6f2fd87d94d3c7e212fb914362657011ea8aa90baca2fbdc62e51245b88fd59a4f708da72c19202fde546a5f994fda930b9625324846e05bedf4a68d97209dec7e6c4cce36aaaa738876bab824c6a6b7d3bc80befd646fb6e08234cc60d038c510776962ffe26d4edb8ec8e047331ad7c3c9d2d0c8844169ae715a04cc53cb75c2bad8e6163ac43ce4be7c57411eed9b2c986b729af33285a8e487e26ca3254570202bb3bf4f19133ed4ce076c06af6867489c983cd579a705af7ab6818f7667ee0abcf222db7e2e956e26bb6865e7ecb2b25894ee4d27ce782c98a3dcb896ab27aa5d939f5dfc72441d45d384387bc2a162d6240eeb6d0d58eb039f439992d782c7743dfcd3a2427c24197656931b772cdfa9479e72b542b56ee393e3fd63d3552c798e49c67a6777e62fa2bf7bc41440b560f9bae3dde2f3df1da81b9a8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "445e1dc7a54c43c7aa5de88c92e5ad7dd0895513c042c3a76f4cb12231e35ed524ac846373c7ba5075518577c07063f0634734c8d5fe0ca3a870d1eaac6c8762796d310c5cc9f95aaefd1ee1f1d9adfa511ae4b3ff022eb7224f2d0b4a70915c8ae5fa3510fcfcf05290c9bf5218c39985df21a35f2f971f57f52e493a17817b2a683f82448db330c179fec67640607b4e4d8baae3a86c33a33b8f9f3fd558ac20f841a4d0b58f07c52fc25b98d5713b90bba6db7ba1aab130c7fd988ed81e56280ac4cc48ac165779a5d51ee976a28df0b29b9d5ae9a8fe790b779b9cf7cf4c8060f07e3fdafd120814788bc83952394f6a71ce3b280f065cf219aace434c345541486f05c4744b31fe747b85fe46484171ad66d81ff228dda873c49677c5785a2eeb4534d90113b2d4442af909577420de6a732905636972a334f3670109aac0d26aec70351312930258e688b8b191d2dbb9969494d1004f6747ccf63e8534abbffb0aa643dc50ae60eae61c701c89034ab3125929011420f1d95eff52189908c2ab1e9de77ce15444f5f1cdf9b6a70b5d4adac1a371ad2398f2781a0a5bb6d1c8bec564960050796ebe0ed50faa1d353e6ec959aec8fdae8b3ddd428c93c86d431af7ff53afa539a87e0c07db906692784feaff4a3c20c0f71486b25ef22a16fbe4b3cdd9de5c6c72cd02d1f041787f5052efa621bd89cef96bf48b0023f8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7dc31d29d09e8a858c07924152b0f90f1b575fa9d77ee816acf6aa6c1bf3156bc25e0bae5ed6d9721604115c467f0bea762ddcfa0fbb45a1a9c97c58ce54963aeb35e63a9a26898ae3b08c56f24cc9d9fe2b3f80092cb18581867e4941eb1d1d5899c896327806bcc45ce51a6d5c117917f8ac50445140d48cfc1bd4d37e129607b3949f93463a72ff3dd085559913b73d734c406cb4d8ec5befec27cd8b43a5cacc5afdcddf48b0c3f99a761a74a249e23884aa5092bf201089abfc2b4e705a992a106254b94afa6946f6e43ac533209ccec7bcb2097f242ed4fe8448b6729aac6209b88ada4885e3131782401ccea29b45f35729c5eb810b35239d65696b761785ffd712118c2d1d2d858f7b1cb13fa9f0575b6156f330d8de9dc9431b1a48472e62cfddff6e3dc992a0d2cc4c25671f7e72b3b31d9c4a79187d0336933a6750d8a6d6d4e63332f6158d645b6b94b32f5e3eb23446e62fad0aec1a12b6e1e3e3a735beb31629305dca8ab9ef72b462ad5a04b13a3aa0737273b21fd94ac322dd2b01321f860dc0bb4daec423e3b824f76ba0955e1bf3c2b17bf4275bb91f3204c476a4dbeea928181f5038bb6e78d8b2d5bd1179726bb622694b162fd36e337eff3d41cc4d231869b3f4a49afbf1318732e5644bc32f9ee0f3990cad875d7c09b3b2661a902bca01169943728f0a3a3dfaf5f4aab9a8c9459bd19a6427a8fa"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c30b3f70a397dd8657bfc7dd49bfa7606a0c91fedc39f8b2b2bdf07dcbf8e236edba3df876d58ad90734e045ec3bb10eb6f4f0d04a6ea2b6a29c446d4be3dd5b9c7caf51cd8a591d5238ae252fc0eeeab8543572a7ed61ea77f5d619f696740b1315f2ec6a4ae9efb5a44e4028f6ec977a7439f1847b6a5341aa44b3a495b411fd9883b0f3c782bd4f416ddecc89c6ccb4faae810b961045d7dbd1d605a17ef5378928b1f4d2fdcde8bffdf6dd56bbc2bc9fe26d3f95794a6dc94f2b06521541f8d9e63c81eac921b90f171ac2a178924c45d9005c62b1134d3af85b11b961457c29878fb2442c1b48f71968a83d8630b14c32e9cb5a35c27e8ad6f075d42429721dd3ca7ef4b6daba6e1927aef2e3b8cea49c34020cf9769268e83cf098562fb7f70b158828d94fe4aa84ca5deebc7ffc8c8c8a4af42c556f50e3752740ec955b7020c3b9a6b406fd18689b62719340c68a7b63924af27044aef6879b725c97b4be9bfa794eb3572bbb48cfbc8bf6695f50f5a18b0f35968a0849bfff7b230595338e3c1f69bdb08dd5c05e8d15cc0aa1311fd726185b659cdafb4ba9b904532fa38c77cec9719de9b98f73524b4e9aa282a855f6932f547bec21c691cc2cba9e96da35b6d808b7f5fed29747fb1570fbe0c02674b1722a38434e47d7e4aa48267775e9a3e076b7575bc55b6dfcbf721a2a3e7a7905b0b486468150295e1269"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8d91bcb5e22a56e39266ad5dd457fadb75626a69454d8606f52d11dbf016ab2d1a1758f0fc3bc95e9e6df808dd0a26f62ba25bcc90c756857adf66e9ab3d8e6af77c86921f63c7da72614ecb521e382126ea8a226c1eb33384d134561e835024eaaa54cdf7f5f4d751871fb2c61e4386120e688650be35c871dad4b7d055c12ef534aab68bb562afbaed8c47ac823792db900a5546c957571504cc4165648f586457623334c3b357b688cf82242373c5a7e48bbf92426e4d33c035a6de4e1d806577c54ad6874d04c5f48994875f41f7cc3f266cc896ae2ef5e875ff08da0b411a66be3e7a3cfc740b9855de42b3913101be2e18284997afb36832d62c8a4b6898b36150bdd24124adc8bd47ae722c2c2d479e13982c9c225616100305019a3d609887222e01c815108988507fbba1cf288703d47b36fe1e54c9f15838e765d95d46155061a10b055b47352670df7b0fcd7b7f89c5d98b5f2ba99f4ca11bbe1194998136c942905db13290e265a594fddb5f4ec3f7734f384bcbaffb70bd78c21faa0e439aa0b3d3ab70893a447337061243de88e13cafd02b53143330900bc009c3d173476081d7948829407502480c905254f8fa36a87eaa8f1265f5c49e6a57c9ea50f1888e64781f4ee821dcff7650636d6bf41772382ca9672f10c599cf90293e39bc80ff4910cd2712cc3ce4c7833cad1a671e9ada9898e9845997f59a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a71ca7bb56501b24e9152f7c08e2002d2b0b59c0a00e20e5ae030820caef502e0069eff23bc65449e13603241b3e06ca71dc0fa46cd7b4fe128486267872315ce4230ef9c4dbb9131d83caaa5eb80c98dd1f4458e71d2d6cc450f43d4049cbbb97bdd97e7d7ec22a2146907469efae344e94eee8b56b44fe5f86e81074c0efee8296875c95c6a780ad7a301428df907901b03cf58a69b3f7404b4af276ec5bcbcdb345b587bbb7b84f9b7c6304b59e9dda1fb313e2810e7e514c80a702f2dceb6553ac0942ecc2a9c508333df5b2fb36cf50ca7df780bba3b1668730e5fe829758d5f22743bb6b110fbad6aeda879084d9f3a519db5e2e4af0dd6edbd779856bd0556b9cdc93e3d0849e76cccc7cfccaa42d925c04ab6c75b58bbd513189b3b61238eb7b412454966a46920d78c20d7a13841190ebcb2d778c5c59ddaedb6c7fdf2dbf0ef244ff96a73ebb4028c1a3d89f57e1a05983aab15f49543cacb7424bd3f48f117db2ad0f27a1f07a65d4cbc43edeca39b88ff35d910bfd87f295f0234bbb1f8efd5b0b3aacb251b7bbb628bdf43cf8276d26e0b0e21bea693c778aeb1c9a2a9b9f7c82c6b0600685a70f881b4354176971e872507d916806a410fe43d9612cc258afd639a59c89ff7f62d5e795b1a3c8817e0859d497806433c2b8e00a20ea05a68af90967a11074ab0866f253f79de4dddb4e721ead959f1f74e385"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "97c75e05bfb1cf41d40d9459475c4ddeeb2d83dc91942fdfd50f3bc3e61fecec0a7333caf6788f5ee93e9eb71df0edf5e181fa2c7276c9123ce13b7d7fcfedac4d10e351f20fc2bf06e340c1fc58b5330793f9e79ab60d550b4cd692dbb1247bede9299f506eba27bb87567f68b3e6b9934e4f1b94dfe33c834b6b6847278e285d92c0a1c507796218bfd6ad072a1af33154f70094da064bb9cfae5cdabcbca727e1ca9d9cc2c6895270aca78842740042475d5f3af07233aed83c93ef2519fa293341bb3643f7206c0b64b6bb69dbbffb8330c122a236e572381f91980b4542449671b199926cac2f1851bcd0fdd6d1235ee1428e6032945a953ba101fd62a14a4d55596b8af8f8c16266f94863ed3a466e20c36e66cb59529eac17b738dcc7be76de25c8ad8933f19cc02d9a459ac3edc29503a8f46d4e27b2fb2d397be467f32e028b722dc7bc0908a366a6786f9c287aa8819c3caad01118551bdcfd072505b659db197d6191d441d9eeaad0d78403d8c1cb2945e6ce911c69d9f2d59fb86717a83b535c4b714365a055963c7a04a6a5edd711b0e01e6ffb082fb77933550b72adcdcdbeef8d26cf30ed6227a6396b3c2c8d3675d15bb7c03b5c84c3b8184a2b7eb8ed4e43057a299062452ece02ff8a91240245c2dd67041a214b06bf5457812cd91e1cbff12c9d92df3f2f4621271e356b7a630387317e2f2d517b2035"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a658b821e9f496bfc4d0773bca57118363c0cf6e520d4d1c0e5e4cd92f41f3e68bf29fc2605b98adcc37ddf1460d53a3ccc714c8dd29c5c5f30f234dfd0c2ff4cb88f998adc6801d87f2d3bbcdcde263058d38612d2c476d899297ff5b04448e4b36be9869fdf301f2aba98004eb6456ce5a277ee6408908cccc9fd10948903d6724a32211341bb4f17ef82b58d58d2519304eef3d7df172a317657285fdc3ea170951e5e0d672d50cde0f9502d6ee2d28684deecddfdcb65a3c6bfd4a213ffff97f291d707b2fd214ff207d538b40c4b07dafe059e96690578a86daa08878addd8e4cb422d7cc1ade303d3f3f43b3faf54d6a9316fa862a209d5f324763cd4c9aa4e1766ce52b688e7f32e3680bda51fa1f93404fb77f1e1ff14ffcbc6111f085501dc7d53c7b106d651b562f6357ebe217dc3d6040b57b2df4d811c9f82f2665c18b17497827a1789d9c8b26178ece684c9954a1d5880a0da8b338f111ded5a34f3d4854e39c8a49ba28a89b057a69911110854f247fc1f6b77fae7c454e2f6990e194bd43241724331669d41e6a2b5a9de2d29efbcccd9ae9fd912de728a3a8bf86b79f991b024648c6309feb0641134bb60724ccc59b02b3d629b2ff0b54964d4932bc8953a2da75f8b2fc74c046db96b03738d57d99f061301fa9d2549f9bbe990c8cd7e0b6a0a94e00f30cac6400120abbad679c761c7ba07f54098223"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aaeb65102cbed1c602e4544cf08a44fd282abc4cf6981d8d43cf33004bddf16cfc5488a200ef3935bc42dc6b46a60975a9f1d2e2e41824e1199ccf371b79c91b8fddd43084d1d1a8e8915d5efbf1fa1cdb4759aaad092efbf21f8bef084da1d654f801f8f80051c8d2d8b79fa9ea1578bb54f1d9397597fb164a0316d0d3c7be4be714d0fd1bfaad27325ecef7573b77609c6430c8b1cd648ae574c58b232078da0b5521f376f13b34635a573bfc298cb010f663db67756a9d109b0cf42caf35345ca8cf1ccd15b98a66574c8c6d119ec26d08eecd92fa61c609c302c902a2cf9d78f644e9db3d99d5ebfb4561fb72c33e47bc1f5385362bba51972c1fd9c94c839a6c4a3c6169a711afeb4d020ac6029445a5275a72ffbc3dde7e1f93f5f4eb00492ace4f45feb7b15a882f26e36146a2f55e18a51e8ab329403d19cf8466bae7baf449b84b842e3d2e355ad81fead994b711a3565c9f416c8523c0b26300a53e2add01f4bdaad160bca5bacce95d7b69f1086fca551bb2616818d267a2f3351d17e6f64a896d53265314548c8ceb5f29829e7e2314c5ffacf3caabbb4067441f2cce5693c4c996d887326267cee4e7545535feb7e7cc8e3f36f202ae3210999d2b5df472e0cd5e811336c19db898b6217cbb3f102169fdab8629174cbf04a53690ee4d395f064c03acd7bfd054381198031885b99f51117108f8c04f2eef57"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "184964ce5d2c22bd587ef648cc499b007badea08387a646ab544ba57562444667d8d0dc09baf2ea98fd096eaff5dfefdf16e0fe09c88fd895804ed977fce48cf9cc963434dd29d0c612f7dc0cdab2b992ea298393dd3dccf5498100d149bb3b29f7be67397513d532bc30dd964f661726672f6064b657e42f49f6d5e9b9170a8bfd8c2b89a6a0cd1a1691b38efb719f955b478f468092425077d490ea067d72a975df78cbd91708394bf6c703e92995bc79a071023960e0c29de8dc115890b3b250c69242fcfb76bea21b1a72acfde90adb34ca92068a2fa2dbc5431f48b5864a20a6227d521f9ae0be92c4be7cbde99157c3d5d767993176997baba3c2a3254230b8947178640f87372184df010227c3a04e85a4a4c012fb3ddcf335f18a131a864b84dabd75fadea39236e81b15241b8bb220383c6c134de6bf5824240c7b884bf41b1819aa04df77c02fa920bef52c7083eaad216bf628b0f0f08e5b995a9a4b49d9b28b1c3636c9c1ef9cbd7f537d4e3026e869941edd77759bf254945bb095884fee365b34eb9f7fac3c496df866dfed6b07a35721c8248000147677e0960ba2ad077d5022382d9f8415368d79b4ccc28882bd8dfae86bfc73274448cbd0a96ee70650a48931cc16354ad69d3b68d821abc548e3d3c0a7e8808c88d7ac0dc792ba2236e092b994b9d5a7501f347716c3e1e17cbbf8bb9a3ab15c39b2428"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "36f38c26e0a23f6cd5c816bd3d3e57688c4f58126b4dc24d5ec659e76c1f97a7369317ddea841a3d90a00b69ddbc6fcca2768c85250cb64c5e10452c2569126c9cf5fbb66c6a98849eddd51c6fe6f87737554f1ebc99cfd161f727bdf9da0738af5dc076c27baef7b4b2af498137475c5100bbea7cd6ad83de7c6916a9cdd3609199de4e2f65d655adfd603b4ddc507d7364fd67940c293d84ac969bbd64e63a57f62a87f5fb3c100b0b3286a1c9d2dcd263c3009534ae05272815c6d9ff82d0fa59fdd91f6a06fdacbeb6806ab71556b4bcb72fce2bc74aa0e12f0a831e103fb248bf1dda7b6eae1d9f2197dcbda37c343bd679d66433d14eff97905d2220c2672d01f69c07600428d47284b1b1d0305ebbb78bd29180d5f54344877e741401fe9cbfb671b62a254811d21f7595f841c2be876104abbf10c2a06949500f7cd883268a1b46207de28ac102b58ec99e0fbc57c99449015ff2dabd9479b3ac796946d602d4cddd9569e38e406b3b3d47027ace498dbd47bfcff785976d4ce4fb0d74b3f780fbe8c6d8a6baa50ebf53111869128ec354ed4dc0719f3cca55f610c5f82b97a1fa443ba73066236610bb6bca882d46dcd613b0f29d4272773456fb35fcdb056ca053a838abf65ceba0ac0d0742bd633351c3909a9289de1f0539fa19c1823aac286e88bc8041edcdbd4b62612b1f1610a0d519e161b2a305cd33eec1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c8ef89f800577cdcfa788084cbd57f070d634ed7ea5aa8c1286b22e9ab33f44519d6776de6b3eeb6d7663194b3097f428e8c52462549b64d3adc26beddf3283fe9af81c46f54fa5513b8df69ca951cfaf2eede4df6eefd39b68d2e5d40867a517567dcb0a4b954c99a194ac448d38cb792782bf07072baee13928a708521d35d97babb3c59095d3026e8371a8067e62bace0a6b42405a4f0e1b242a7ceb8b193d9e0584e4e231def3c1c727a999ab03ad6cc7a33d6cb147c7eab81e73948f58d550750f4d5de507f9a95c5f1a99cdb38215f4b2f22aba9a313b33edfe66473c20d3b3a109ae1ac618418fb655da69c78c56d0d8ee95ae8d569d49ba395473af9e76402a9f4b071b14ede2c28fe5666c7d6302b0914334c420274a77629d835149cd1ad045dce4aec198810ce4167df8123a2b124c7f5fb6d5bd653ca55eb88a8ca2d51f9c42df365cfd8287fcc1dce58f6051e33fb0f1219f02518cbd01d86b51132b32ac0c1a6ef7ae0edcaaeb4fb190817c3c7b6b865bd85995499aaa7d87652fc1b44d9dd49a545a5de0f5f58a4798cf022e97fc8ab28319ed713c3a11d42bab6e2af1280139e03b27926812e5c67e5526c2b9e0ca318fbd48fe951717b7a5e901b782a81253d859820383a1cdf1fb20841fad390e53841b236df9cc7bb665207689e51b7d3948cf924f92d05d2af4c04a8173f46407b1f4d1b1706d27ec5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "83706cf470ac7e2ff571ae2f2fd618b5eca1a794be64eab576aa63e0195ddf9e6e5c44381e3a811387ec948eb2e9006d991a66dc80471f1b4875e014187e0eb1a7a497f06402f390f44b8a5beb2521ec90da193169eb86e44bef92d2bc11150cbfefe31fd9f7c6fe09f6cabde4797bcb861fc6686a0dfb38a51b80631fb25d7bd84c30d2779cb5cc6223b2e0ee8a7343db8c03015a3885b6f66057d9e9281826eb026824f0cc9059c1b21a1b7cc48b80a41713a3d07f85584cfa0cca6f65018713cdaf3ba6acf5102e0c22b2b839c8875f12db8d22c73a153923033e61a4e7c4031006194f3dbe8661428c810f5d1e93e815dce86200a3fe45525c308c5659e0d022dc0640df0591ccc5e704c8ba261fcc53d2c53eddb47f139dfc8f19b5fbbd4b498ca7b22b5ff6016b4c8f6b98e4fd4ec3bd3b4d90592a72d57968a21e912f597440ec068c7c27e7f57347d16644d78e7733634f4ef71635a1c2ad55a2448b85f1eab0feb92bfd3139b66726c77b78d5778fab114eab3d72d3c924112dfb0eb5d19958b1a60cb8f7379d53a6719b3d3a4c9ee2c2acd76cc1e5f3adde590c3e157229b9051b6d62ae4469ca3e55c184060862488160ad35c12d86e8d379c4524cead0d7b0268c5088e31717536f99cfaa7459fecc0247233d6fc890dc2f98b21f4e6008b8f89fcb119cc94a6eb96f87f057305549d18d05af0964f5285088f8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "99d2525d1b4ca3ea27d97237c9edd75d44e8cff850e8f3fc8643c95609db33aab1e39bbc94b00e21cba5e9b1d19b5554ff4df42d7bf1a0dd979c9699e9183bfed23c958ea7799aec3585de698d08147acc84366cff33dc45a94feb6f42de9f75927fc74ad3992aecdc100ca6c04a83753930175a85c49821420919bcc392d50e4e290d5a466e92fce5a189b9c87cb10b764c9e476427bc2719f34c1266c446c2bceb10907f730734c0706ca9de348aa5cf7f67cf00a73aad4ab2a1a8b7ccf4af5e326a0aa6df096410855271069991728f367f3569a00b9f7a97151e0c1a5898aad3ae2c9cc20e06f01013b5e4221c65d8fece68e4bd72e57a5762733d3481a721f53041e843ba06e3dbe0407c99d1897bc3b20301e469091c2fa1ec464caa650953e78007dc60750a7a72f61b2c370af195906c831b9f648e633a5c129fd70608cb132f25d51261b62bd3a56ce9c9565422653300355c7d6550b05c7c579b6378a46f57fb2fe57f2a56943640166945530cfe2410bd6cad823c73dc0ab4ad3c3ceae4e2e15225134e47f375641346d36d94e87ef6e5fd31dc88455bf70107fe8bdf9a4009c2d7782f0668739afd9d090b44f599fc1d4da05483cfdd17a9ac55b959d3af20e55a421c7a5d7e6d4200202267219b62db2f92e59bd260383b944e89a1c1beb6d5d28a9d48f235f3bbc4f172a7497c3ca8cbd5bb3418edeef02896"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "121fc93905d9fb187962eb95f6f6c5871720195c624f11a552b6ff644d1eb11bdca770228afa766033cfce705effa5b081d125212bb93956b0d42cc67898be4b617405874f86847c793a4a8019eb1a1193d518f59fe85a7f1a491e68ef7b1c0845cd10419db3fc9a5cccb045e31137ed0fb2180239057f207329b1b60f04bd1111b8a9f7f5179ebf98d991fb1eef76753011eafe090583a32be5010898f24b7154eb10d8dc3fda6828782268a0495e3c0c1ffe8eae51d1106c316dac5a0f07a9748f8be0c639ff12f00af0f0fbf4f651f26298822e08d65b34db6d15fea7ee280f1262ef47338716f3ddd64ec7d7109e97f54a299f07e3e71e229c4bc0f587bfc6c9d3a9e67c16aa79359cbda18f70b21bff5d6f112cfb3a188786c26f54435063c86ff1f867ff8e9e74fc9ff849c657edd17153e71d78c175fbed9d69865faedcd5b1a5392beb932dfca613c54edc8e2be963eb0e7ff47e1bf972a403fb2e257be4bb2d1dfffc84179be8061f37477829155168b25d907c3bbebe2e7492d3950730e227d1faaf7cdbe0fec3f2f19e9f98842bb29cfa60b87d3dd02e51b43468715ec388583656eb50b93ce501daaab974eb191840044a204ab039c09c092ae02dc54330fb65048e7ae8aa8117593ababf695b9fd2704f31d12071d76f8c2bcd2aa14bde65a7ac1c785843c2391462ebae10812a6bb735bfb1f2ac3d74ea5da9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "290567b67c0a8c1c756f6f0c4b5157e1ab1c921af2d02d0ced12472404694c6a56549bb0cd3227c7f04e769c75b46569640f2504e2892ea270ad8bb102a001f7af1d1011d92e01c9bcbf284236151fda13a6072bf4da11f9263773967fdf3122a401e11511a04b633251516e8aed8de669a20223e0dd39a6b841bff40ba6af6934e9c9ca3fa2a3d277801e3483879640e16fbc5b8a5240e54d50b07c081f84d63b9ff9b24d703327a997f1a74098ae3e5a5a0c380d68b4a3437c7d5f33da1187e7b6ed5d9eadd1e1c2d60d6df0a0910e9f93e17f01bb2e643f451f36178a13193d057c0c8648a55002df72d1166771e1d9ae36dda2c6058bd9d2ab0a350be60b15a021a016f06dd6e6b9fc8834db10190b89bb880aa38e5dfb03bd122ea9b68ac13057c9f1aec75e90cef05602dbf4bc70d94ce7231265b3e846a2e2d00b53e8d6c04470125d07e782cf559c41d82f1e10113131d48f4ae091204ee81388af98722b17114a396764ea8a3852c1ad727de9742220cb3d111e0fe4de9a27c636e57f8343fc287d74cfa9e811762b4f9ff3715aea0a258baf4cedb89a22e1593eac18f34e83f9a34ed139158b6ad8d4b292a7e4d933b58bd6cd9277d93f67bda8f67be72fe32d1805fb33ac89ae2aa2864aa402ecbca8430bcd6d42b17fda76d13ee659a23a629bf4d0e49d5ff5e327ffd55584b254c90140269b226fe561516fbe"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c7a3f33ebacd1b82e186709375be80d2eb75086bebffab34dce599b3e97f59903f04443b1062a6884a4360d92dd8646e1455e95b33dad16854f744c4acf3e9e36f85f830d3a8b75e583a828e253c2d62df5c5ad4374110d6dd85426d86894f35833f37a7433f234ef966f830249dbdbabde11602976c1afeb321dbc46e6c481290108e97cc7cec2f9d62a9a1d0f00a26afbc74d45f6f137880909fb5167da8b842894dd4c933eb1f7db3402179bf130595679e260f38c4a33e0b3e9f73191756f4463b6cd159ccb0b41c75f9f405244de0aa6592563b6f0d3e519582acb1edcca9cf89b91589911e9be178cc29d429721ae373a49addc23d72057c6709eb0eee81a60de406444ce5f00783884caaceb1e07a91de1fc6e2b88a0c9e28d6eeb6c965d4e7964b24b09130b1a2536e117ba1ad3e4eab1bfb84918382739d3a0ad75f271ac343b37224c8b1b86ad1a62250072f68212e0bf1c9a3715e1449d44ae471db4696310d9fc7a4148bdbc29d264ce4c4696f758d4df5543f71ca182b0f4ca36ce1c2df8b574ae3a08e59d0c014fdb44c24d7bbd9d59b39ea7fc269c2d2b2163188d6339209726471fe297548b27cd3b6e3c58ac7bdbe3a792d858268275c12029c28148c2e0563c52061ae83749819e61dddebbe5dbf07e9e2e07503799cbac3c879d8508cefc172bb997d1a3b109d737fbc1c52975704b6f1edb2ba044fab"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "29d54fda4344d689e54fd3a4625660b994352159a0c045d2b7345e0a6fe4bac788d54d0cd63a13f2374b6f064ccbb379fcbc771126a6d6cf51ad1aa80584046f6b33e9f0eba434d08531f091e314fe8e4075f184b156a267abc3909ba90d5c3e96ea7b3f191e38c631251176334319479a275439a633b61d7197aa45f07837fde18f5e2c639863c1a7689e6f56fa0131ab50c8021ef24ae6d936fb3da4b7c4993de4de3d0da0da8a19f1787f3c2ffecb11e505a60e2716090f2081831ac778a11a4b26db77f7659ed66f00f0c57e478dfe34663496eec5434d8872d16a65f5efe12107ce39225773488dbb8847bfc144672615f8ba18daaf9b4ff0bb36d731e1306e1bc7644ed3aa5820642f7a15fc253ec9fad79ce7d811fbb1959cbe124ebcfbb9d30127f0761585a49c772e9181d47ef4488e6288d17d49e759d39adff61debaaac8bf8e1c5149e9160a40078eb8f8ce47bcc0aa5517db7bcdfa4e8e2fc9825e18824839a2c30fd1cdcef0779b0f7a5da9af8cd315deaa40187a5c4b5a6fa009e1d9e288552be9f6cce448fcca2f011557ea101d41267c5df8331f585315cf6e83f3081ce149ea4813dfd11b217f3924324f34975b275bad2c8b8cfc670e2a8345e28fe3c1f955d88f83422ffe6ce28d5273adc1b30f26b7c558ae7688cba8ab24971baa979de2480f31812b990e14d8859bcce323437c8290bb9b89aeb8c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5905112430194b195a3698730332de7ee44cad62157ffb95f99aaa4ca39d972712ff27302a960d5dd5fcbfc3eb48d196697fd57aa83123d62030d27dcb7f481914aa20dcee0bde8dd070e4b5939c359f3b01e40a42b6c4c4f02ad64fb15da070e68f63cda98db297cd535b2ebd0404d02df3036ddc8add1f545a6b09c1dc1d9519854f258a478ae034d3416997ce939bc72206fdcf5d18bb46be8a3dd5f55dad95e1067dedfd7ebb4c05fd57bce7148bf374cad3af3af327878d27782659695459987838dfafc00d898743bba43db494894246366fae5d377c2e5d150c2cb061678147f3d2bd24641cb078f074f503f2bee7231283709dee766609b76fabc0d3d14c5db3543c12cc481972d9d01950c60d4de5f7c01e7b4b81763467f1b6a1bed4f06311defc24453053ade5a50c3dea0117456eb6adef4bbe8afd49d2c1f5152f80f7f76e72b2e2269d3080c1545cd8c7afb7981b60d63ad0c6b1f4deb6cfaa4e0db62684470ed4013581e497c3441c4e9b481d148c89b1872b7d8631b37520bdd900ffc13348c647a71cf52933e46184c5278e6752d9c2e97aadf29d57820eb99de2b050698932b5dfd50a581b3f80a2d39df9290cad87baab094e17c9ec340255ab855b15ce69aeda9080195be03d00a827b6f5f863c16558a407a49862c535bd24a911c4dbbaf2996b680b42ee562dd2f519123fefccbac1d2a343f254e8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25503c79aca1a7f8d1bc309ea47fe75a2d9d4aade452902a3b6ca6cfdd6cc6eabb56a0b047dbfeeee39b8afb467ec9bc5a25d2fa29c44b46ea6e62015ba041c360fe6bac1b5429fa2f99e714777aa1a1573950f5d9e3fc41a0eb9a881c5a44f9daa46eb034ee0ae798858be5e98da362b574730ea912d43e3ba10ad82ec7ac893cf9122f8af042f0535d9981d6fbdf4a82543d7b5f2cba4262f09a66acd5225286802c129a157a6887fb0f5c364cbf7e267899a983d5a811bce505f2a2856daad92f48fd197ed97481c2afdca4245a9948f612b8849684b94f1e171f5e6381cc6b973bdc0fabb82301b846f578ebe5e81760cbdc40c6a36b9342812164702ba827cc8196f3b509d43cd2b73bd01efbd7a15f7488e4a65df8200e273f7c2fea4aaaa586713991461323983efa1e4613855d9b0b8a498ef77a410d152342089b3d838433303058e1fc34842db32299f85ea375d30d0411dc66fa6dafc2309814b692f4b485f599ab1ceac8bb924e63ac2d858a0968f1e560ecab975a5733a2f6a333b2f5baa7ae69aa159214d68568458074b331836ce49216d6158adc88a2c9ac6d635a5ea3d78022d7265904354f7a7c37958cd8bea04cded5e548199faf9e169a9d5cce59732362ad81c32e92d32d990cc8440d33ef3f04dd1a62533c45d384ae2525ada65c8cd6903020cd433298531f51450303627ce96cc75f79df78b17100"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00004a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea144143"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea1441430000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00004a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea14"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8682d5bac51bb32bf283b8cab1172d6e8054dbfc672de6f35f33a9f7b3f0662fe19ec01a74d5cbe6d90351843e2b129d0ce30884fdbdcfc962d2721fec5b3b7f6a9db4a95b13def111c737cfae72d13aef4d0ea9c29181891505a0d28c5c8853ce5c37476654703ea2e7c68ed52591c182bc051b5d837ef3be064901be454967be52f9c7d406b7409e93308b74a826d3d1e6aedd8aba3f5f971824784167df53d042781b7c2d3cac29428c7da1fbc451680cc211517f9175ff1b2c00f819916d6d25581542c8f05479aacfc245e5894763db8e79849d3e2dd8d7178a38cd4cb7b03436c150c467540dfcdd001d6c8994b2f8b332705b2b5ae0c841708c83dadc7d647ae15e547403d689a00a6bd4de8602633443e0b7edf060bb7b529e0afeb1b4171f70a943a14f69c59720b4b5ae59313325685c102d992645fd23af12f3b8f8de79399cc6c80f9a0c006c316ff7a6963a1f8ef58a67d107e5b49fd8d7079bd45f23ef67f6a83127da157f54fef9dc01415a6cf7a957f5ffa15457a1a8bf831273f48f927ba8bde79da623a8a2784e7d8950c5fcbeef5868311acbb793cdfa54c702209073ad8599c4c74b31ce3b662399789febb36d922d77cddf63c1de3a6aba21d6d8ed54a1b48f48955602d0f6a4f5eb5546131561809236f0c71b8374290106b893ab70f6fec1fbc3bb6ef5e6c0263a7c8cd90c289968671744e853d7"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "12813153b37fa6c0fd755a1c7c409bb8169c5a39d045dff2da02b2f8e8897b0cdc6c2d40e6945b97006f18e1b26983f77b70bf2961b5e5f2759241daee8c56fca7c53c81f69d3a0341720d9761a4f7be8c068464e881c85a2c39e0ac6f74f6f5cb42df8c3713f66a282d7fba85b7a09a6af83a068b78bfe83ab25841e4bc67c9e40cf2a0974f8875fb81cc6a115b91f922419c44ea82b33187521a7e1f46c0ab9459b4e97a3f4a1d9e92403a37168826fa0ee914232afb6c4d7dd082d0c58885e356d0efb8aa9ae33d045f24b4b3182d5c54556f5838c449d31a49a3ac4ba568c248ed72c111b5ffabd991ebf5c48efbca33cb38996d584992c4abdcc7b93700ca03619412a355b41b000a32f6cc4935f942209b56a23cfb7b788dceb692343995f77daffa25e44d672f8bc451f776560b415d0d1bfe9925af1c2567a8e9bd15b8554d93377c62b0addabd27e8d9e0859f498ba8e03094e1d86d41e69f7606d9f1fac04744c3b7b8fc4942a846e2a3649bd9416d500b9895455fb6741ed8ed4f426f20ab40d8ab2e6cf6c63f5c290fc011768b317bde49753efbdfd12583f1ca79287225f9c3d3ed0c4530815e4f5e7ed78d14aec0d04142d0ac0fa3bb5d73b4bfda2fe7103a2ab40672abf08ef4d9e537b9f856d32450e2e41d9277be62ad0675d1a530709f2747f51f17aba10381fdc70c626bab45d51166b6f6ad978d2dee"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_4096_sha512_mgf1_32_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_4096_sha512_mgf1_64_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/b2cc2fdbeb3cf802811da0082a9f8324dc334c3b/testvectors_v1/rsa_pss_4096_sha512_mgf1_64_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.9
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   ModifiedSignature - {'bugType': 'CAN_OF_WORMS', 'description': 'The test vector contains an invalid signature. This signature was obtained by modifying the padding before signing it.', 'effect': 'Accepting modified paddings may indicate that the verification is implemented by decoding the encoded message EM instead of encoding the hash as described in Section 8.2.2 of RFC 8017. A carelessly implemented decoding operation can lead to signature forgeries.'}
        //   Normal - {'bugType': 'BASIC', 'description': 'The test vector contains a pseudorandomly generated, valid test case. Implementations are expected to pass this test.'}
        //   SpecialCaseHash - {'bugType': 'EDGE_CASE', 'description': 'The test vector contains a signature where the hash of the message is a special case, e.g., contains a long run of 0 or 1 bits.'}
        //   WrongPrimitive - {'bugType': 'WRONG_PRIMITIVE', 'description': 'The signature is a valid PKCS #1 v1.5 signature. Expected was an RSASSA-PSS signature. Implementations should not accept multiple signature schemes.'}
        {
            auto n = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(64U);
            {
                auto m = ""_hex;
                auto s = "bbb7dab2ab26bb86660f02822cac2ce6317872ed07b83022e693c9ad38ca746437cb3601e26a39ed4ee528e023a9f418d16c88bf0096e5e83aae2365ea8aae415f7012f5a303ad2bc37f9749d307ef9a1e4b6a48e49770f46dec1b3a29c96d14bad91a441413012cc4a032f8b31d110fc1df22d0ad173be06ab6b81f557d85115b62cc5c557744048771d10ba187f39b28b6166c7560145192ad1e9f3b61a6bf9bbfc61ea567ed5c95a807716644ecce8f33de35cccc7813a57605d5754db66a38c744ca7a468bba3a0dac4046e472bcd98757383c5fe1c227763b3b1597f17e69f11599c16e7175d70cca60b719c008e0629288679644015352c169cac298259cf5724671e316f4c914b522bb507d7f5afb3e9599901aa77ce431102a925cf3a66bd1708a8ed1f3428aa9aafe41fc433ea3ea0e5326efa65b42ffe1bc3b7eafd1c52302ecf7d3aa326067b6ed892af9ccb0ca0ca8dc1fa111bae768fed2213de448f8aef2497de83a2d046b7d9a4c1c487bf3892022a243dff3e3c3ba713032c5f6bc63d1f206d1831aaab55129787ffcb18b164edecc6fbfb90284b3dfa6a28557b72864b1b8a63d8ad406339badab7b724dec46e4cfaac2b545537aeb3ec2b72d6266172eabd22dc276a626663940201bb08a6c91d59fcee8205667a54cb7be5770cf6eb5fdbf4a6b76fcc5a7b34b6a56f1bf89ea8ff25ec364dbdfd5159e"_hex;
                auto r = true; // result = valid - flags: ['Normal']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "04a2259529e5888fd870d7e0517aa5b1bc05e19da400d6de1b8e676f44d6cffdb5c3be40474f143985730b9f17eefad25be136c4e4294a06b6a2a1d7c4d6ba2b43227149a62e2828d8c7771d3fddc0aef36187e3722079480aca9f1c42fc35a4193121635b1832f2b9fdb1dd150929a85a35ff12dfb86725c82c1d8fd71cc2f5dec3f7373e8732891e3a978e4c15a4e75eb49f1c99bb732ce587d39ad4bdde62f4b6dbffcf6952114d3bf33ad58a74e3c12b222238b51016932908aa80016f87fef465c9c512ff709be093e34ed47140df34fb15a4f8f629de00c383c6599fb51e0f8c2ab5d4d3faf526a749f34291dabbfe15df9deba84d88972436906035b3d0e8dc6a8ab9d9002df3aa105f6e3a595bc66d0f64c760d7c152b8cdbb8e0a9afe87c36d6bad63fa017f540ff1e67d5d89deab1413016ec259a4bc19d8c2502576fbcb49b1ea1aa84163ea1e3f8bb9b159acbcdeb2395d6531497889917c1c822456019f71818dc498b9e3517cd68f4eea6b24364ee651bdbf3282ab1f55e67bef8f8b61f749e30b3dcebbcaa21531ecc7729b8c93f03732f81367bf545f1d53717aa056aaa08a0434e29ddad76956a5a641b45b9946bc756106fca8e76e3885da15aaae065deba95c1e503c996fff8400e286ea3a3b40e0d7b03652729cea3562d8a90c9ea9c65b4de3dcc013282e3da8c7de2188c3c4c9b9e42145165292fc"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "54657374"_hex;
                s = "0f74856dae37f6bab27af25a8773ffe42690665ca130a710998e6f9f741d30dd66bbbcdcbb490b1fa69e39af6b169b28038fc4addc95aa92e2b67a76569bd3acc76ca48437c7552ca7dfd379fab037d54df496b05b431bb925416cd4dc2402faa060996d57578519c34de2386c9d0ddbeb708453e50c08a8ec182c75549e9dea0bf75fd3347b228e2f977b81c1be11c738d23ee2e58f15e803f5539e82155ba6327ab807ad6e0ea36b9a19ef68fbe7e3b55b7910f68aafc719e2106b4a3cc8adb62e38cdf43f7ab295846a56b26ed8087b2c0e9cd9c2d6cd8302aa0c26254b1db330bcac520afb932eaac07ec0604ff56f081af44994492c176298127a94d9eaccf23732ea95700ebb4b657fcdbc52ebc6bc404795f63b4f0fd2a1d6787d698d2506b7b37c1f49f8ec1563320fc017fdd76269fe61bff0089900d146e2000113ab6d8aae248344d19bf0549e8320de0f226fe46ee4c03250770d8701b7eb0e63b816f566411c55f7724c0e8d94b0b752bbe9f445c78ae4b780781c9bcfc5141b1e46c767a51990af256391fbac9f4302aaab11928a2ed36ea775c0c953d0d5a4d739c37ffef8863cc1b70481410e29cb7ac99a3c4c6d47c322af8de1b39a17da4ea432d62249b6c35f50c8fade0dc96cb8e946a8008db7a72dfe5e4ce4392d4160cf75c46956e66887d82d7e31649075a86c3ecb4a936dc331e78337d5648318"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "727f107d20a02c2a2e530a78fdcc8ee88816badea1204d4c6a3b116776217f86f6fce6612cacb44aa288991146675cc0907094b5f90a06f0e940c886c07b5157605102c670aa9927fd0f2222b737890d1cb905f0fe4b47e67d254e6fef0f2004be64c94ba630839199b3656abe2c6eb59e84584bb652a181a64895d52d46aaebcb46bdd5eca4655eee4c340649a49a5eed60a2d3c95762bf825f622bc48d05fd6813393d39021c0db5b2104186f5cd00b203b43ca839c192755b40a8d946d1db6b0d2d7df6ec6929e5655396d935ce9d45bd7364b1e8e2bbc316918d33caf6a08ff1c8404fb66cc679f03f9ed6c5997f72e52da5df41af58893129bccf2fe3f2ab7173fa227f24c30438e064c0c1e99d3ab9bcc929391893187b9683cc1026546b6d21c02fed28fe1c43bf1eb679faa560375d445af434fdc2794ea44fea6445a8e89ed6c14379f756070227b20cc2c0add3a6709be39680eee5efac9697f45d2122a51ee64f9ae310c6a9b85d0b300528b858581d59e59c7755a0764c59cb81d355396042cf8150c91376660bc737d33144fa7b6d7231fbd43c16a79d06de0fd18a53415acb352065cf169e82abf94a3337e6b525ddc3d25eb6516208e9f832168faf3c3a224612c9791369ba2ab85a701e8332b738bf2942cd20975d2edac2ece8568d101ab8602d58fbdf652580b5008b499aa06062bb99697c41ce8e34bb"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "4d657373616765"_hex;
                s = "a3e219c8706b8e18bba5cccd0ccfdba726424f90afa595fe4407873b2cb2880d08e7924907dbcbe4531f9196298ab428540cb81b6872c1a4a70a63076c9346635fe2396cb525eaa732ca8e087890fcced73b7d7101b493424c6cdd4a97943d4e2144008702ee12d41b449d276fe00bc4958f007aaa8a98af48ee3b43386312732af8c260a30c13ce2fa6e7a9d8427a94e47b8eb81e4eb11d18fedcc48ba86d0c4b4b1a4c8b8568b7a641c5a967a61109ea3b937fc0c32005313f9663b1fcab1d8a0b18f479548b84bcce391c33986ea773cd78ffd99a823065cdeea436a562d876f23781cd0cbfc188ae4750e84c0760af7947a09138669154213050bf4375e469fd7ebafce5d0a915617a4308e915e02e7b23e61e2edb307cc94b4d53f7ca9b3687603a22476f5081b1390d5153cbb2196a88fa30efae477f3bbe3ad20863e71a377d479922ed6486cd133b851c7f028e85b8137ea8bd1b188a7b799f2bf2979fdb0e67cd04a6e0eced1927c098a36c524055c3f4c8c4c27fd26376db9ed78de52b0f706009ce071469faad89e6237da11519ae9292c81474ed5c4c6cf5a2e2aa7a01bc7bc3c054b32092ae52331c6c8ebd83a6b4715a7db6df1beead2e84dafaf4b54f23920df3bb611f91a0d3302a0f8cc286f6eaa03acbcce6e0b5157c014865e87bd5477d24bef7330fb58e3643921b249a05aa94ad59c4d70d6dda11bf"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "61"_hex;
                s = "709cc403fec4e9cdca1acb9d3b3451fdf6f3d5c1a9606b031931e93c4b9a9cc75f16299d3428d43634185ab568a0025747e2cf21b29b09809e85c839d5b02e5322a622a338cea98ae56ef125c52287882de25ae60c4ad390a3d24344282b37ddb5bba5f9bcca909b62f1b46fc10e95eb78cdd520bda58901bd62dbf62e09a11ee768b0fa79a4f8077db9cdef414a9dd69872c71c48d7031d5174ef4ab07a8d14e20b0d9aa583c14f32ab8fd86e45d7b0aff6fd84bc775dcc1e458d6916be4e8c0258b14f14ef22ff879da849a7b520bc13986d8feb9ff9ad2f03c08015b05e999e560851197e3a006f69f0821ee2c57dc3dd8137a335c4241335c813b46b74ac7a33074e5131323b3d9eb5fb46ba1e62ab1dc43256e328362501902a0f3bcb348510d42c119e37d857326b4dbdc924243750ce17dd755192e1f8542e26bd9fb58b323fa522d9bc188b64aae9c650a886706e7289677c4c764a4e5add01c9be344b0726357c534edb55dc00e386711423e33d2cdf1d149bf8c1ce57000fc515224774cb0b1cd1a57552910d02bd8d4872142eff899404979349375dd947e670d1b38c379bd1edb09d055e3c0670aaf4e034ab0259eb71e99f83ae2e181fc75c18295a26f95ae7622d1142884d1cc2079d1a98c5c9176762cc7a47ac18939e0478b2e011390acc13b3d27de205c197d14b6cab554adef56b482784bc8c34cf36ab"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "3e4f9014473052f1e3f7d6c4acec1ffd63415592718e3fee4aab6d9d6c9a15fefc35671092c5c2da63d925ce1f25a581ee4789023beb793db28bd991f510325e42308a8ac7b4355e8b0aeccd24932b1ecb3f0f558f31f06e498a1644a58c35aa20d7f27933257f5bcc32c4647fdf6678a0c565abdc84841c55ef0178b8b05798b63be7a178e642657540a726eb105cd61deae2820cd6546552d30574883410b426bf93316eea2004fe6b1e3b21c3d0f02be2e4208633fdf1c704a6faa941d98d61b977b2a0bb096881d12c899ea1bf8a3fd411df97635957a8c0ec5d02d3e47520ac3b9ffa324eaf0e2626cb91e684f1ab8650887de6e4083bcd7d63683ef21c985a1f75a9e327506668cefd9bd76f389720400297e3f70f78a43b05853c0bbec7ae24d211b32a01854a71074f8dcb1b6c83693c98a425c9d71110d4f7f0321ea5dc127d28c26a78eb42f8e8eb7e549baffaa7b10c7514389870d2f7b24cb1b5bd95adec421c4b02c81af4bef7704276270a5e45cf515dca95f02c517a9d77be79210aa9488133b27f6f71486dfce34b8188ddb826d317674cd2bfc0002c7d2bd4862adc4aaa598e40c96875e3b5a3f73299586bfeee698065839f8c8250e9ca356ac40f697c53d37aaefe17ae896cad2c9504cc0b660f5ba5eb314ae0f8ebeff1d9153170390dd1044fa035e5af635cfc1b7cbb473c8b96de44e980a330d5dc"_hex;
                r = true; // result = valid - flags: ['Normal']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33393439313934313732"_hex;
                s = "24b27a1263d43159989f7503711e682b475c81cb07ddae673d815106f6cae25a74ea19aa102a15ef8d8c011df29ed17a1f7df504c87566a08b22fad956b7f24e6e7541bed10ee3e627fe228fc5c1ba2d95fea48c4a0ded2d7703035cf8fa6f3c70ae8d431eda4f790faca0ed34d0719473cb5b2ea1018170bc69a705486d94e6a909a395071d450da3e5b4a2067356e6589c38ef12f5c7c4d484bd8c1767d2acb3ba238ecdce5579582908225ede5a34d5b07aa22e2720f0e6c16a2dbb49e344a78518e9ffd12663e80928c78cf3f2d022522c79b3684ad9af31fe18b45bf3341de84a112f9a96108c2cb79471cf370e0feb25752ec08e1d04df67199891a26eb2bed82577dd041ff9c44c624250a5ff6b2195fdc92523b8d51f8c5530d991039ff010988c38ae78c8df7d3f3c71578592822dbc4f6cb40cdacffdd78c4cda125aeaa894c082261ee913d03b48a4b1ed321bf388440b5387f6e30d6848f5be93fa16c6a13b9f871adcaae83e66247b48bde4d6ed60b3085173c8e7eadc6efc8784d54eb58175539700903438446cd76a0dd0c34bb52e966104a675b3d531576ce04351f0b11da6e1f6ef7bd8091eda232235b44955db57f0e495e334b8883990d73b4e51549bd9983d265777ffd4342b3ef1f3394379bf0cc58ee4e6242ebf07d4f1ee220539f2dbb927f2a8cd824288e138b59109a9c06e3b1c178d94170c5e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333637363431383737"_hex;
                s = "33c1d6c0572e357f4d4793220485c20be7616b7799cd3fef487cfbe92845d4866c21e1e73c4639e6d057a06c1430175a76a4063fbb13b5861790c4d1cee6fd1870becae31e869607417452977ea0be094b052d39258b74ed43859baa62f50d62b099fcaf70336e7eb41e787e74b1048e77605130fc92c5cc1319a21f90a3812a9437a18aa815fd41b8a013db1f7fc53d1555c00f1664ecd1e4f62fb03078825dd608dd394d5809f359175aba16ed48c6c83833cd4529878509c7a2aa9bf7cba27d51a63748dc2a59db37490f09b9109d8f93b25a9d1059a713b8d10d1aa112b6783c4cbc2827d4feb71976f5f6db6ce9f2c8f46aaa44665e2add6f970bd47586be70ed28b4874e05e3379619fe448577978ce91d5d064347da975fb0b1095b43a6a1540ef8992f5d676206cf9aa99fc6d5b20dad2055769b004c9ec72ed3a3116f8ba8600f8c8a1e5fe61622b0fde3308a44bf4de6a18ff473cd207e21a2a59a1d872344dac2b6a818b6c213965d25fa43804278297d3df68078ad6f5a160bcff932277b9229f9770ffec809771a2be61680bd5cfc4f7fc275d5a14ff7883a88dc52655d73839cc2c648a18a0fb2f226b9e2222843ee43d2b6f189e151d0d729ed5b2facb1584d56ac95fd84a6db46cf07f3eefa5349e1c1f03560d686c3cc2d5113a65a0c94a4fd674202f93c82ffef896dd5af7703b6c0e35093ab2aba2193"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363731343831303935"_hex;
                s = "56477b0e0cf5abb7443cd070cf08a36bf5de1374d77cce548785e55b2cfd4e5610e3b85db9370fed57a615271a1aeebd4d4fab5be6c9353e0841149a2009eaf5bde005a7976f0e6c742d5ac34e5199d45fc8e6f6362bc363ab9d5a3781d545fe9e9a3e1b2946a19dcf4a892f90bcdde4854706b7581e9f8fbe4e3019fe54f674cfbba2273e7bd7ca69918b0137c7998bc750c032653102842a5b6ba008c51063ca45bafb716035aa337c5d33a41d86fca122f4bd58a1f77fb59574f6c0bf5e138917ab0880196f7dc341a8c82223a439e6549785cbdc3cd9f262b815134b73fbb729be787bcb401f4dca3cb0103578b031dc31f33b766efa17531ebe6e71589025c24401d399e46e6f156e5f32aff1c51373bb5c3e5c596350fc3396b6c120a2a91d6b70ceaa8aa25bb66fa07b2854faf81c948078201faf27bfa063a7252a75e761c63a2d2a07c37284297262cc37fc9d482463682294c728adce15cf52fc8d42342160c6d56743b33e8fba4aab814c60735304dd3ce3919ba331c2f92493153969a3be87bce70cacf0df597b30e93b7ec8f5415ed4447d135176f0c8409d0d30288369178049518f36c04cbe84cca865e63ba1901d29373bd64e84387329baf284cd6e3ab8ddd2238a70b91234c8ec4fcf3026337ad7256c18f4141c7df365f5a18c86a453503c534c30b4e9530469befdb944052764d490efc76ebb40423f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131323037313732393039"_hex;
                s = "657df854d7dee94808a0260d4570fdbdae2027cfe1e8bf59acffb0867dc67fce38b51e0189d5e8f2311e48b2b0108d7f8fc672a2ff427d3347f0aa8c29e8c90b09c75fc9c379e21011cbdd1cbbee0ebc17042340f561a1e4a6fdc68d0c948188672768bc09bb99fd226eb7f49353f56c76b29659614d214d711cd55d34df153b13cbabe479a072cff65d55e43c81d8b8a66f1b7fdfdb322e93a3826e1d3ddb2aadea13720b3f35deae86122ff124ac7b3495717a320fabf3009921cf65bc911236e893fe9da3472c68a953adb1b877ab486b74a6c41c4113df71e91408be59fb39db295ee5aa7942b7fa3de13fe46bb7b1efcaf9e7c187f205294b622d2f4c67b52c6a9ea8a0e485b71572d6f20d1c388c040283a1cc039c6c253517a64f6b51c92539bbd6c9cfb27e6c7fc3396cd98fb55d7cc0095f76002b23ab29299b53fb08d57c31f5d9a4921c5cb5c2c049f554a4cde98d01ef108378ebbe94bf7e50316b77d11fec8ed28484d75b5d2541b21e82e51a35cf55ac666716eb9fce2b33bc9c7b0fa3ef7555dcb642830baa2a942908d11192e65327abe1c3430a45bc462e76abf59cf8da10988436d587eedf68ddb269257bbfa5da1a93adf8f485f48f3376446d83daa69997312934925175311a05bd069199a97803a95bd07e19fbd1985e1f35a112150a724358f3c004a0d451c28ac13b6bcc722318ecaac81eafc25e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131323938303334323336"_hex;
                s = "7303321400fbb742ad073016a5a0b0b877270ef28842a50be42eb3ccf15b542cfb640da01d561be46addc639ab32a8b59478fddf9138e2550e9930897ad62cebd1d9b43557873137b885e443de108d0ee1533f7ff0e3a66a5716c54da0677bc852778c5cd101ddfdcd75d3b2a35bf6459e68143d30353ad84ac83eb7e0f0291f0ac6f87b300b1eb01fd21a842161978010ca39beccebfd70e183deb440416ee22b1538ea487af19cbe86ce485cfe3d8f1958498decd11103e39b7213f1b07dd0f765a323f708d465fb25e75fa8b59c029b4ef81c964e0f0bf661d2883daf1ff9c58a7741056e09a4aee8129de252b378bbe3002d739c9ea323b6fda03c34a0904ba56943dfa46738a5ee14f6131cf4059d926d368b4092685c960e8bf6f97db0a9f514f37f7cac7d9346e3e8e8da31765d989f8227df9983bb43cb6be562fcf062539012087fd54beb533663372d9f146955b423873fe5cc9b643ebd6594cea40cf6963a8e371e8e4ef6ffc0bf7750b8c3da825a40ae52b09b3022568cf54c8b24600b2e30b0b53c7654ad41b77a11c847ee132d0d7d50268a71f9832be9abbe8cd99a649b86e59ae23682c902756f272651e1811aefc3deabadd433261d96083565307373e630ca593d1324780ca5cbc9e404c197393bd3e8b97edbc4a8d85531161ca415f4c67dffb9341f63302a4a2c4ce884f1f64425925bddac891781e3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39383736303239363833"_hex;
                s = "1db84f2cbac8233fb83bac363e66a8ee1326e5c5f5775db4e8fd5ce45b39520ab6c44b8a16f46ca97d925c4a661187ba00d36a8e639c78c822308dd2fbda919d2520bac50ef7d815116d225cb40e5c8f7e244350f52ec33e79f7cd8b67bfab49305510c0fbf29cb8b73f64c18fa207948e6bb994400f985bae02420332c753fe5816e67af94ef84f0fe71bbfc824f709dab76f999062792ad5c6325f709507478802ee6dde41d537d46b13bd33447cbcdae8d7b52fe91d4feb9fea371fb771bb5be045b9dfe70200194eba7c8b62cdaf3732c73858ad4c98d9c2ec189870be21eebdea031823fe36d90a5900ff82d67f5abf5b627ee64fc729bcf9556a839feebc08997832962c372c32bcdeeb074d621df95fc7f6e177df31bdd052830261c121a77c17867b898769daf8563fd456b3c07a582eabcc98af5ba9cf873958ebd20177d36ad5fdc85a40c64eb604a3f8ba0bcd68a950019ef5d3d500c71062743c99914e90dfdc5fb74bf11df4c6d60452468bd1aa924bdee49db173917de5f572d55f9e5d0ed7a1d4437b3143593cc3d968bfc5f8fa18b68acd681ae47f955c3ff101b88363a9da35196e1acfcb41c12395427bfe615e3fe2e9554a12f8823bbff1d4ca5ce984b2e014dcd2f6b98d1cf91d5f11e0541933fc9b6a3086eab77d56359c468c79be37b480da81a2a04cda39eee76ff23f673aafc10b39c5e948caee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3230323034323936353139"_hex;
                s = "470e6719fe2edd5c549e1058fa285525952d98f5242b5e60fe7b34e4258f5609afc472e8ee30dab16a25a36258f3eae979ea8d79a852767ad5807fa7535dadb7207c3a32504165c0bca9e557ec00071eed88cccaa21ab1bf9b34b523267412133234d7e27e08c6f548f4accb01a76c4c8a80af3101c943a194977f01101f65f9777b2c77a7f4efb861d08369c4c34b5119ea83e0bcd6f2d1d44b18e23198c6cce1410f5c22a95959690521c1aa765f0d339cf436b2a5cde190dd12b0d669c004fda232373c65373560bcc7a7b65a6bbc0f88acc21a34ef2df5dca412422971a6fae47a1f56c5fa3b0531276d47d5fd7441c893c8019f6853057a3474282a0ffe8de78acdbd25e052f107e328fbe1ae29b40f4396ca9744bc3df9fc1de4999590dd8a1f60a14e2b6b56410b103de1a77cc71fdebd5f9ce68fef4ef64f31093b02b0d2e9e4c2539c9f9253a971355c618085ee44ad028fd55148ec7297b60e9f34dc78cb2707f92767a2b810cc71e3e34a4a14e1882f7cbe62d1faa80eff5a33737a6644913397ffbc0136b2c2c1601ce60a6a7e2a13aa254cb021fd652067110cbb617aa61a34448a8139e69f0f947e4085560cfec759e5b328eba878f9eb6c19a59317112f267e7dae3c814d10ded0786874f5e08d4e5a41c7460cf1c519fa9c76525d38cab8278dc2c53e848ec7a2ae979373104684738dfdb452ebabaecc88"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343531363639313830"_hex;
                s = "60c84606c1c70a37335a5c5fc481a060c596fed6a6db21fb90165afd1503fd7015f0660ab878800f0bbe7134d2f9bfddde3b0d46486a409c189d08b5cf4aed7665090466558bdfc2038abedd53490fca70cb84a0c45d3a583c3083f07eeff1909378093e72d3dd1f7ce6867f333ca3ea7afcc3728d19bc73e453fa16b7bdf9bd2cd90d218d5dd9c1deddfb95f7d02d87927ccc52ab5cd28a1eb91238498ae7d9848e676b5e57c503bd940a47499ac6afff324c48d08b36e855af1f4f0a74e076f61729c8b259347a8cc8ba791227dc6f636c9288ef66ffd87d5062dd4a0944afab9626885b4cc813ef130d2dd719c4ca1a417e19ef20854e22f8a035278446acf3a40b73c6fb3931ef82569752b7840008a2f5d300820f1cf59d39f43cf07cd1172c371d48f6ccdf5c672fbac90982ececc63dcefdd506ad0a4e55443c033984b76c76126acf5d7bee2f1bc31b9bcdd8447d4365983b3f00bec4e4f6b75770be7c59a19e1def0bdb196b65cfc5bc9a67f68620d263c8b1c15cb8a5ad229426f79187d9c5b62e48686130e27cb01a819f96f80a06955387ebcdd5f89f2f459c2778aeccdfafc2105fbe26c97cb5386e73a0bde48db0907ca8c9e4785360598c87a8482e6e2a68687a28beb7ca8239ffd884d172c82fe47d12e82a076329f5215c39486c438b93488f6b1583689ef994970ce3bdc29a98b2a392c03ecf811ce3a9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303933363835393531"_hex;
                s = "8bc9e13dc57ef1e9d64502dc209920a30f60aa9c10cec59cd31e647b64e9e3d45414c12341faba9fb23a36d4dcf19a433a718f26c40206ea0c1ddaced6ad2edf4120b60cb4a8204421591085aee2b3a196b6647d62cb9e4ebbc1953a0e1b34e55019d2c8d91bc8806e2a39d71dc66569e4d1a76b3d02cec04cb66d6c3c0c96bda1b4c4bd767267c2f182a1e59bd8489cd57e33751bcf57d2d0b453e0a26e956e65dfcc35bffca42db0d6c8e7b733449d0eb465ff1a459feaf3d06e1e437e154e8b28e069958a9f1f4747b8e553515f7b24305108234c6401b6dc5e2b50b6746703f04e5c3a1a0351279a40cb5821848d8ed080b73f77b9d7f46455304b65430679655107a43f63eb5ec97d9eefaf414f1a7c2fbed36c53436de8e662813d9c3e97d7dc3e6498212a8b25843d5d56ae994130de6318bc16e44d92d45f3ee976550dc67ea3b040a008fe187fd5109c51b4d6bed4f46595ac68fa8dae54974d3c38e3384954f6d6967b3024892d4154d18f6fa9456a0e04a7cd5310eedc6fe271eb95ebb46bb6d2d3343fdcc456abd8697e444d3e908136bebd89d6971fc6a2834d19ffe7c5825868ed810ecca9233a24759d00dc4cbd59135b384f1f51d81a342f0ed1debdf3afcd7fc44ed110c0341f9d27c3be3ecf9fb6b0fc886e11c9c0586896be28f8e2e85155c0e47d505dbd288cad4dfefe22bb953dbb2adda33f17ba62"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36323139353630323031"_hex;
                s = "1caaf76b82f86f68ff2f6922fe54bb1e81421194fb262d4e8010d529a46c89bb8875c24ec3e24cd3ff9c7d857f37b89c185f05b2a9751aba770abcf61eafa65fc03d06ec6fbcb09264d2388f346d1481caaff220369d11c736c9fc217f58ccb4c856b7fa6f8a1cb6880b8232c9948b1108786586314cdf3afb45f3adde91888571f5ccb227035fe214330843fb30f80c1d916327f3fffcc591ee80aed47b27445e6e818dd79aabbfc7e8b41ccddb72ad081e6f50e757bb4697cb57c624fb0bb68e4dea76f10f5e9959e38b54598a11422ff23d543e4f5036ccbfd47511ca41d3937827c8a0d5f9270da481d4029379e4e77a6c3ae78015af7b6e4e537372f1cde28dbbc40a03447df1cb9c2a066fd39ac818e24ccf6300c20defe2343c25782ce72c0a807dc2734965dceca442be847f9b2e0893859e3b361ef72395b5e90c27e6e47a26997583a044fd59f7f67719bc34504faa29720124e69d8a642c21dda05f36cdaca198f6878fc8fb3161b4b797178dfd9aa2ad3af13a807c659233de651c250ca7579717bede4bdd5c7dfc59761be957cd18a1f8d765668fe664ca127466bcfcb882a2e2e5b97072458855004f83fa07baff056816ed2bf23284bd2265438091dabbd61094016545d7a339eb44c590b69992d9697f96a331a287b57e00727d3b5f9ecefc842a8403768173c94c89751310dfb953dadb0e8fdd69bd4277"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363832343734333033"_hex;
                s = "162bf3485814b305896c41c6ca4ea281addf674955bffaf4313faa3d53b9e182651a005d0048dfe51565d167ed3c8e5463933aba86a0e486154162563236d995a7f0011d1ecac0785dc8a079922c1d9601cdcd64f8bb749881b9c35ca9090972bba9360f6e6fb73d20e0d7b8f7d722ce5bfaf7b96e3f93f1915ece0e2c9fd65af1b8b59e383c89af6d74d082e9e6fbc62d611dddece8e12b5a1607c0881e60443becbff5677ff58c3d8c26746dbbb4c73f53acc749ffc716c1da6a1ab8befeccdfd8117ea4886bc4cf342150887e10bc696a4a5e92ba6b6813e218a7b175662b3f853c3f7407cda7dc4ea23a50142ff3b76836bd99dd2cbda0c6589eff6a42b232830694f3891d8ed56a75cc5e01cf3434f8b685e2a955280bbe209afe6daa8f2d7fc43c7c3c0b4e53947795dee76b8b4014095b9c04fc6761c8e625f5b00d379c8e8d15347bd0eb96f8f655b809df3f163446ec24cea88b37e17230b1d61db6b140e924fbf21cfdc97f78868d0dad753a41a4a2340824446ce1b9ae0a504c7c6ac1fd6cea35fafc15609ebbc531f11b5c5fbd322af3f8f42bf6a96dee0c3b4b48af79090a22415380080802a1b60f8338063b97161a7857949b8f8a0a9c7b74978943e56dae464cc2d8a54ee6f520da98e345901a98a7b7c3070f3be74df5c0cf23a74492bf29fd320691024f16d3be2bf78634d13510949e56765feee588c7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33373336353331373836"_hex;
                s = "a919fa3d09c1db6cc497e3431b7ea055c1024b3d832251c6137411bf95a8e5d24dd2d3d1ba278abad39679726ab5c042e1d629ffad0ca707f8923a0c5912cf1b4d8c3302fe7f25f2711ea29374c26090be6a2cd2a9ea936072cc879711d26f4383627123ec530908b51e6ca7456df535c4bbd35672c8129ec790016f19f01d5cc0aed786ba27c3d399c273ef8da42b2b13b557875079d2eace5a4ca56c1286c40f804f504a7480643be9bf6b435ad00526e6586a9e3ea051396b6f64001bffca8b1c4ea6fbb1ac8b5d45d3d8b9a1503d004bd76f80ee6616af8abb37462de29971ac2560e6df960314c1516fbc7a765c3e333be901a34028a1a1af6c325e4c98de925d65975834da96fe17b5971168d4861e4ee6e203ac809e3e89d73317778d99a1193f080db7252a8e330b81bc820a6d2dac4ec28c9942506c81492d9342ab423ae660f1660d1b59d6a2810a2f5ec212d59300e35c2910b128033d128aab255d73fed32ac53bdd8a3fecd9cc6773ed87055e72241146fdb9ae9abdbe3550ce1a637216f1e6e1a54ab7012bb4339615b4ea383fa289f127f65da53a1af67050ddab9ff449b24dec5ea624275ea31ec922d87c700ea0decd01ff7e04f4f5a089ae7741399ee005f5003a145022a29f0a3a382d9918d6974ec67701e702b40801290de328243dc3c2811af4988330fd19742a4dccef50babffcffb0d91d28b9cc"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373935393033373932"_hex;
                s = "143dc4ae1c9c82e32f6066ecc670c7c57bf0106b46c03d5caee82ee4a00e147959be60573cd15bdc1700b14f9b8c2ac0ca85ec4d769ba0ab4fc811f14c8c3fb58950ce837190b7ddc9798809606edd4ef3c8086d69a7964ccc19b2aed68eeb0822ebb91cf406877b893acd5dc2f68f45d0f7a9c429ebb74243c4a3fb7e246d747f84e61430893b733cb81720722d088f2672c07de6215584627982b7214b6904d910c94f52bbba448b4c83051abd1a2ee2286ea0aea5f46a47e3ccb55219f70f8dd81af31151fcd87df3c9996bda96dbc53c1ec1aefa47bbec4c99a0c2179625e36a996e27cc21cce4c7f99df4a3d3bdfe95f5f18f3e901698d68ff8494688551b1569c6c2e6363edc05a011e72366529a3f75a629064f6ef811ddb67ce08f567edccfd2ace108b95f724b8f783634f1bb52e3c5ba726ad5783520e3463805f2e545e7ad471f174433889389884af07ba168b759e0e0e705daea877b84925b8b0f295c35c456ef5fc8cf8e7c2b1e443d49c4f8b2ffbac0bf43a09d2a9c0101c90d630ab45b600d06800c5ac8f86adc9809daf946d4b1d1243d08128ddbc4570885869b17eb54ea05274932eb181cbd7c9c36af94f7b8c7ddc82ff95e9e948c061233eb46ad80dbb336f2170b926249bf26ce9ab3427aad5ea42b7ed84c5b818443f76301fa61609ef6764b150f68d3da0ac41a5da6a538b9472de7ebaddd4ac2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39333939363131303037"_hex;
                s = "b55d59536daf07f43126a74b56eae43cb12c59b56de4c3a3465df103401ada81519b9c4d0350cb41cbb5548fd3ffcef5fbac24a663af841ae31dbd4d28007f42d2c2dbadb4eb34f24d1e8320aa5d4837466b86f70eb1abd3b9a78a7a54087523d8d54d471f49018199f8af166c5cc854d9ea4720218f6e21e4b69f0d08b7780d6e76bd4c8e92170e141f75860c30b98c30c5f4cdb28d3027e722de0c749dab2b18ab447a0a6a08717a0940262b8b7174d45653dbf89a9e74441a187daa56fae4a4630d824da2f5a2eb4b4e83f3cd664051893e8611da4267bc138d23b3a163fb155e9bed60b3fba0e2327834b3cadeb5bde36eb96602b510c3fb9b88bcd5435292f20ec7155fa75b52dcfbe21dc861539da4dcbd0b880a8039ae3d2494a67b0410e7deedc154a217f3297299dd98a5183854bef906aa25f307426daf76fd0e6a4c607cb8dcaa0b9153d9c844494e8233d1368533b80e42caf292dec4e1f07b47b43a01cba025ba717bb56f426d0227a0205ecbbdd6ed03c8e4d817b890c696380222f939499c1cd30fadbb1482d0f99b0d03a22c7040bac376de03ee28ab59c39ffee25d51fd50308f639c13027ccf3ee74aae506d8361fffbf4b744cf3fcf9574394a4514cd1d0fb1c1e43dae44148b5073d9fd6e1dfa1a9d8e81b7a05ff6120502da1cc748d06fa8994d91006643a5f22aacae67b6604543390560c683eef3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303837343931313835"_hex;
                s = "7eb83605f33c8fd64ffef23fa8ac57d9a32189ccd4b1985ebdcca75756ead7c5760245115857285fe268fcb14ec5e344d6a92d00716e192d5329a68a6e715ee73b5f1047105167102e13f70f7bcbd01985c7f312a340cd0fe0442cf49c73a5072e1f2eab21df212caf6568bcde9017de6d83b2dae3b6c2e767772900a200ee89be77c430b9474191478b43086169bf08333cb6b4c08b6b21e9bafe072820089b72691754c24390d06bc5c3b015e18beca4a35992d28da9380d00796a72d8dd1f93ad9e4270f360b2d56204850d392649053055d62c9f6c9c9dc53670759c4a39fb3cfbebea2996595c58f4a2ae1141a44a1554d6a9a0a2c3e677c3fb004875edf19d4b5e2ede49097f67dd6003b16c41f9d9d5958ed08edcbc466990f349963fdd3f4618d24b2c6b09ad903e1c91b090f39054a3ed0861dba894aa644ace8581a90612493d983433eec6e8d2e7a61faee36814ef9581a2f5dae36206eacd1256abe44aeb3accd59249955693a18f2ddac237450c11dfdcb6701e3106fd6e960e63c0fdc4ceba48761028f93124e6ac654fe1a6585bfc85122d4888eac530d8536aaeaf303640db28f9f34e3a16cb55ac595923f32172ee65844f4c5dc354f978f9d6bb70627f55886cab2e659da2789601f5128d14ddfe3c42ac66d2ea89ccc8a60be45cb23b138292e8f5b4cd7f8173d018a7a4805c5a1cacb4e417e6d5ac49"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323336363738353030"_hex;
                s = "b8dadededda33d1bee9f54b8d77815c0e8cc7973643b36b039f3de6d55fc82d221a338c08668eb21835b599c4b5cea6a107b58ccd15c5c8abb7c260fec829647664b44962021eadb141232d153421150e6356045f8c287086f2ab76622df192971145290330c804f116ce686640107afa3b52be1a88a7ae91d89c26c7a1bc86e266387a10d76fb8d555c62790a1939be05bb89e78b0d134af3254d4438fe80e5ffdf3647b7f77be8b041922775b859a87ee18060670e21bb2ccbf8305f7c804da2f358211719c2573a70f1bb03a4135351f2f7eb6ad28b2e729cfe2dce9ac897ee22e55c9fd60a30a0534a092031163c1cc38e42d59cfd13624fc538c82b879ed34f2f131652381e07e53f68d192e5cbb0b4101eec2809b22a3c1840159707eca82ac966e451b2db675edde100a82bedc10335d6adb1dd371121626878a7b76940419f61096ffdece045f61fcdf76bd12a62ac9162e2dca7f200e1ae27de76a2747966d925f07801054fef086f0786c4259af08afe94b568849a590a895479a56e6b8c48d6adc2624fee75307f1d5c6c6669f1b369b24f6105fb7c2c3b2aa9d9169eabc16a114230fbd6ac0850ff161a29c37a8d4645b63bb25959f70968594a419088c365460ab9cc9e0a13b50ec6626031dac481274843b68523297a66acf3b8dff766cac46692be046e0f1ee855a8426e38eb3b477ee693aad8f8ed286c01"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343438393937373033"_hex;
                s = "af7da0237ce8ef9b64169ef1a3b62124882c98636a533db9342420296c05b8dfaa48cb4be92b2641ec97bf4b852688f050b9ea03bfa25672032503930c379a82da45a21760ab711b297a408af0aab728fb099d2e425e870c828c57019164dd2e7d550bbe8b62ffd12f1d98a5f3e3acd35a5a9fb045ce2ee2743815c6c5f1ae43dfd4f46dbc72e22a6e55799c186a3ca1d7edd09164cbefeb69dd705b60d9c6e877fcf00652eca7f7cf607cd004e1f3e7429dad9404a904714f85ef25916fe37a061da963971c30d7e7dd1868dcabce916400346e70f06c918856176cb9879a826a0b8d8e3b9680f1525a9ef8df7e1d3a849475b2eed9726333c89551dedfbce7fc8e289b9441ef16d27491ed8bb1c8d652fa4dc1b4d8b056352302561a67dfaa2f44e8205a5f48277b9bcfae99c34ca2b9455f7db1d4d47b7877117608368928ccc62a3d713ed48944a9f5289ee971eaaed0b3fb61261158870b6d11f6ad805ddf1e8c63c2363f7fa8a797aed1387643e7bf2a41140d5b0a34dd8c845af836c6d04b05578d0518e48d62cbde4acbb9cce3a030ee78506a1e5fb3b6442f7b27390aaddfc5c6bfa375cb288c0bbae37acc2e655f9d057823a8c26479f3971b9510985b2851fc1e834d979ef1d3344a103576ab7f827254967ee13b82e87ba8c7ede07985429d8a4bcdd801b2bbf882f7bba318ebd6bc9ab006c9f4b949786a4138"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35373134363332383037"_hex;
                s = "8ad24ffffc885222aabff0fc473822d05b29ebfbb49caef415a8d2233c81962888c61c6f94366412fd1b59f26b4b48540367861ced4cd1a5a829bc6e5155245af096dde7b107ac0c61368f85ae08a079b5b7cf95427097a9019af3b7e0700f78398d40a476b026c5abea52a883ee12a763d472f608e6eebe85f4c13ff609f0f02c3cf29b854ff5008f18b5ad3520c930fbf014a9c397df265381f20b9bf51fc6daed746ddfd91b06075b91d3272a58833f5eccd09dbca9e0f2e0aa496a411cf5023bca9b1ca0a10c94c9dae57a651f73eca6ad806356e432e0d74a050f337856c9c984871775c52b4252dd48fa828314a80206f6815ecac4f1353d1c6cdfc990363f20aad78c316c4b2bdb9575f038cc030f61137034791cce14b7cc0f00d851ddbe2c1cc520a3a109c91c8fd0755fc12990cbf6d968ea7f8040c9010d4c1cf0f8c7584437d7dd313b5d86b7a7e6e05c74252eeb5ecb4a78679f5cf9a5e7aad31b032320caf6fdba4150165d946d885324d60d80253d157ae556a73dd6d59a72dee2bc6d0bc8646ddbd3b101a2d5a2d2b1d3eee0fbb223e92ae28a44f6234a556cec9224e1a1f68b270b12a6c482c65cad4a25fad15e648c5e76821e03ddbc833047a5259e5f54d0f7d00540af93c62c019ca312f681fdbf80e4868f2edd5f3e11630bea6aa55d733f9263ac2dfb361c834ca3b34fcd4bc2ede09d4c180a7e83"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "323236343837343932"_hex;
                s = "5fe1842b0b8ca8745cb1237cc7b226e52374fed05d4c99b0efc906b67976e8d4b09dc1385b849d918964b66531ff35b1351f35b76a3391d879fcfee3fe2469d5f2cef30f9620c4032a6f739cebccabc0407bb8ca628360f098e4e66017add1a65d6508fc646e81b536b9a77a2dc296bb23323d06c42af9594dd36db329ae51d5f5fee63b15219923c018668022b18f1a327f11a61352921de0e9b96431c99c0874289fb2083295e54afd122aef44e28cbbb1a180fbc6715a56a3947e3e06fa7a0dc0caad4e101b6c6843f2b19f85334ac1549fa971ae7adf8eb2785b16e20180923f7cd436a3581be0b5b2546dd3bd2cc819475e5c52822cada02df77019bc8a3f04809ca49e89045cb8a6a734e0729958964a545e6aa36cd348121519ba035d9f2ec16e37dc1b94b5a6fa5e2263f3d0a0297c6fb4ca1d42e6cdfdf8f378139673bedce8842121f312bbb8d4d42a4a8aac146ba232efb42e57741063e05de21fe31af67b309a708dcdb9efc46d9f797855aada57b194b2045183aed35f2f901ebf934210c1b960bc0e5fc976d48ff0425214452a67bf692d253f73e0208db557572718c933bc60e782e44acacb53aad2ea3948916972443b2a67e4ae0c0e0c01fdce18ea30950ec06085fdadef2d10a29b21187514d70a344338a1897759cfa546f5caff915e3c112f581b9916bdd6b213d7a0f53063bfa5b06be357786b9899"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333533343439343739"_hex;
                s = "64e6a1db350ea5888e192d9c614c58180634dc734eb490741f3c01ad844d1fc071366f6a311039834d3cc050ba283a8a84eed3dd1202e0dea212894ab697740160def647bfdd6ef073711d2be9d81fffd3a127850e2134b23e21ce43ae820e01125856694c7a081f585771c646e1570ba183c409109504898c755491f8cbd8aae14e82cc88df46fc87eab687cd4ed6d721ec549784569e89061c94e3294c366a5fd25971ba86b22ee622fef00ee8323e5b7e9a96631994f7bb56c7b59598506ca62964cb91f00c35114c7b3a66cabef81378649b0a4d45f4a2d79ef562b03a51b6396354c47bcdaff62eb1a39ce2e309e20fd1c251f5d78a7004715de6ec2f4890803dd63cb3769e90f6ee39248bf321aad917dd0f3f14bca343c7eb9881eff127361d5e1282960645af3b57ff0baed5dd18682b0ed2a2aed1b95e9721a7d2b7ef9b73fbc01f9d80502d6a2aa6292e7c3b44ccc882cbc112c2fcd467d07feaa75e503e05a0e81b375f7d929926e7ef920f163065fd78e87a9cc20b201987f255454b5863c6bf537e66db0589a576dad9fcee34e432541fa77e7f87494432501bdc660e9aa7d7eb4638246ff7a7e7dbee7fafea30832ab2040442c9be621dd62b6b0e0cafdb8487e5d1109667c84b4e3278111c3ea1e01c715995939916602e599e3898f5f4c063b02a2579707591d4a3241e81d3b96db3a558582ffd88f06de4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373837333033383830"_hex;
                s = "4a576976075b7e1b3226a2e23598163672942f96a49e1153684dc7fcf9ddcfd1db10d206a11d43ac0ca15347f7ef1ae49a6c433090648a0c1b3c226f43bc07816abb0a2881834e3fffb7b3f8f57d47f07e4b2e9cb3eb3b6b3749eb5d0516e471bd6a120a079056dbbba408da5d409872506d96898a7be84b9289bf23f77160088be455b3a9f9fddd5bbcecc0a211a8ed983b30af1262c514ce9cb87fb9076f67c815a2bb5c1bec5c924b7133e7d6365c0c3576d9341f938faf12e2a30b06e6f5d98a72911a47647ee94abfaaf066614c2c8ff1b3eeb42dcb84a08a665f97cc82c6b9ff84538adec09a7bc4bc47b41072e47382411485e413878b22f71f35473be54bd3f551501ce378f01fbd7ce01794ef19ef913f35c6c794a1de1387b34dcb3656dc9a0fa8ad107b79e97b5bc3654de31d6378055a7e56e82dd12ead712234608d3b16e57675e2b7fd7accce16ae995eb14d74c68e0ee4034d0423796db7ebf4cf134a4f2896051d96791d61620b14eb52a7bf573f04d2d7c2857dff67bd8d12f3ed80d03b5051d24597f16adad050ed5a1afaf848ecb21c38354df7c8bce5317dc3b84ac6154443082b603c86dd17b5b69bbf7c917afc0d33480ce8d582b6afaaea7a016b35dea2abe488f7afe4f69caae895e3ebd6c13ebe262fc0ef407e8166273432a7f9c39965f8d327e67806ff75936da32b0444cc80166abd489d12"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323332313935383233"_hex;
                s = "2f72ba2e0c00e53617f56c125ea00f69644ec046e11ab403e704fe7cf56fdd1c31c4095b5c1312fd6f3be62391123309b76d2eec0255b20b3e0ad3372dab151e0ddc5486cebaab691c2a8a86bae128c048552f64e7dd62ae07c78c4b612b3c4ac315dda657bb3c3eb5c140c31cc79f9449594bda3d0fd7320147fc5459e74c7f576a22d281d544a168d49ad2afbd0d9244e24bf2c4d4f5545c32430c983a1a27472162b73d11a9af12612cbaad7a52a56b4f1757b0f87101d4bdf607effc1486756c1c29984e54a1e09b6c5895f647383fe713e616f6fa03f7632e984f0aee389f68b8f2a1da2137b6a52ff531b3631188b24f4034049dcd21dfaed7a9660f62420451c44fb9b9e81c232f8b40866e5c3a73084c23f472fc79c7852e0344d914cb60bba35c406044c3a889dc4045fb2d5e2eff6b5c3aa92e8c496e5b6c9c792c2151050b9255bb3c790bcb9a005cc0fb9b5602989cdc8b65b1310c76fa45909ff828a9aaf7ad4381917c03f288fb6cc8eacdfb80054ed307f10de14fb68a930b89ef10dd45cb820fc3dfb2294a8ca7b0a28f0dd8165e7320e60be68fefe98694a9b97cb75f7857053f2d357e292a478a44c4a6acaa5dce6c6478fecc99e0b92fd475116c8085521693b91014f5096ee602a67f3ffaf16d1658cbc7eee5c91168d32c9858fc184bd4df7520d189ace28fb69dfd99cb64ad08e39808267836b468"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130373339333931393137"_hex;
                s = "b9436ac68d1fdf44e0d6b0d3faabd34a8ee5803160250d82bb140202a78ff85129b361c4acf02f3bbb30cfc00fc7ff8b558a361a1801ea17f84a4b93141a8e6de7e5aeefa9a5c21e90111565af0e557795cf8bbe718a5ce357dc3436939ae957899c3a34231b579ce8ed291190d5bd8ba21d4603f2950b3125fbdee1589ee4b17b23e52e736decfe3fc520131480e445de12dd7c6dff612e1bd8605b2837736965a12612d0e0d036f15cf8da7b0de0e673d78f83c61aae05774dc86e972e30d5aec49b99ee6655b45af54ea5b6b731bafbdfebbadd70f9794532461ed65938c820354fc9c68177d1b6f69d817200483c32068660b06568a997510e7d87cef41ca0b2ab2f00c1ca77b58291d932892ee636b2e92ee207083e13bd9dacdc5aa9787a4f05279efa062408cd4ebd9fb2f15e214b17a6cbe8250096ef73aafa67eff20b0bc5b2becd8843623f749c06e8e58799c8bc9649368eb7815eae120a2f09a1eef51484c8944cb29c821e85841d2a934890efbe8bdb6836e412be31e9295c7a07e4751294a02731aae226d947b4bdd885c376e6632d5110b2e3f543fdcec9e4bee8053f78c45e8dc1dd8c25faf62ba59ef091b95573321ae77b8eaa244f8133b2522184156255551c48757618b8337003e4c8ef0f5564adebd8491680f83307b0b09cb2216e3aeb1155fc4d424c1c443dd94ad5453a21a6a8c322c21f5139ea"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31383831303237333135"_hex;
                s = "103a661a725a8ce84e686508d00713e64341dd7b023f5003a60057deabddc96e8056a12c340ad22507d0739b58932c312ade508af6e9a7c0dab7105c0062697a35c01bcd347aa22057d29e10e106b77854a3053d10313f3145cd3b20068a473c0b3099381b5a65e41382035f607dc074a4a7d1e2b7f6b1d88fb55b4653745ceba4b2845a565ffa3c152af9d900cada7bab0bbc8830fc80a25a1161f8abbaf5733a6d9236ee60caca97cec89add83df62daa929894794b3b1ffb2a972e6ab3cde028da7e1907ce1d6024453cbe121eb5bd6c2d0a1a8a8ea269bec3d7714e811ad4cba272c3980666faca70ef513286fac5127a12e3f7f42b490ea7e50e988e8d3b12f66d32a874ea30ea4a20f6aab3ea8085edce92a04139663320f8ff3a8c2884f4d6e6324b598822a37044963dcaab1e79c7739cab025736c6c72ea0880b7c01c1d7e68e5db5638ca35e57ba8423bb85d068711f8f1e5d76041e19556053a7d3b5ce2fce900ae2c5d6a8606439f72efc88fff46c7022de662ea634d16b6ef3577f9c8346137701dfa031af80d963d8e7a8f5e80b5d200efb4e0cfaf2f5191e0ad8de5d4d1138efb41cb15fdba5d239c64ea7be1d9394c0207c77e84f6d859f674c353761f38add79f5d1b8199e16aeae45591ac8f1beb69354405e799ab43c643c022737b2bdf5716095b365f65fc2cd8cc68260053262d8bf6fe215a5032c2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36303631363933393037"_hex;
                s = "354c15966122267e5f85736048c39f4081ce8b747da22531e74f0d17193d506498201e111b62d21040c0485494fd4edb58ff99fd1cbbcd33c8903b70bbd3d07a60bcecc16f9c05b2687823094739b990f155eceba8436fe6680a04f3367df9c96730f76633d11a3a5877e889889220f036e2edea8cfd6bbb12d882783ca24fb73d096b7d1d2ba2e6ab683e06c05e05b5bf66757d7fe5c97d5bb3b403549d43373199639ba0fdd8b20fe391bb9bcc0dc36ffc0b154caa953a6ab403d7968888a11c7bc22fac424cc6b4275865af0d6c8912123c87eb187a36fc9eb33663f6924a95a47c945070049b579c3bc5e87b500882006e65b7e37bcf80cb6469ade996beda9df082ac796f4bbbbcf8da4b99c6fe715da6a985f8079faf41e8daca8000f8f496f01d358af80f7f26e28e290f54d46d0f61c554f79544e1cc65bc355e39310653a176e80f880597c389233dfc11afceb5e3c623c02ac3cbd92d05910da2d8290a8123de8de759583531608c327d9e87c714a334ff6f07b48b12149d23c2efba30d4261968eac390ed32b279683fd70709b632f00e3aabe22c624063c0c3502128a812579f8365e1b85a453ef3c8a42f71a2619cbf1f51b55908ea9dbea7334eab02beb840f59c67eb2b56bb063240d5b2e0674b72f610062dfccf2d10d755b3dfffd2d09f53d3eeb05c5c360411af1479a83309011686b4c5cdbf4528b65b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38383935323237303934"_hex;
                s = "0578004863389ffa6027e06a2647c369ecc6bf9f7804857766c12d399c305086f2cc1a4f580777d90ef71e5e1c84e4aab470a538ba4bc87358b1aaa6ce508b4965ae78faacdf01277ecbdaa5ba9cb613f1c282feae884c649c6259f06f01e1d73f5fc008522ef64985449475894e53b33edce7661b3d873d52ed79a8f0796189aeb7a012399fe2146693b75d67e5b80e1ca7254aa85a8cb818974af13a1cc5892dca34b5d8857e1f5b06907fd5b75bd9fcbc30279b033c82f0ac74ec4711f79c8362dcf021c3273cd044736a8aea52497bd6bfd4411e63e7a2afb1e5f30b39c1587b78caae358dc90b8ca7b2287b9c82f663f566e8751239014b00b707333a695eec262b07095d40a58cc4d7676d57ed7c9e012b226b69cadafa28d469dd01fb73fef1d09ddf8853ceb37a4f8c5ef5fbf367af4565aa85b0a8aaae97db228f4d8c2ca1b9c0ab98a6108d86be78239a042a32725d741537b02e53e1225bcfba9b2a7328a429752dbd002eb3818b5a2274dff573c23464b4c86f4f98e3f12b933e86e76a39f1cfb473008c3e20d70f9b5315f29179477c5148d908668c8cb3acc258374b046290679db2df109369c7fed07544875900788af0135bd92b696fa7c131d114a4f36a2d78bd4b872d4086ce56346dfaf443e8cf2f9a70b1e86f86de29de09855b717201ddc4b2904cfd74ab6eef1abd8a449b8edd9fcb1bdf817b22e2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353830323334303934"_hex;
                s = "4d0f02a6dc07aaecaf51f2422056c2920443da9bd291c7c4cfe96174407527172e5429d2aed8244cabcb46045096b789a611e7cb323c97a04afcb266ea51ab25c9c559e77601c44d796867b8e78a95e0790869b24d563cc792d5ea27794d43a029c3a6dea660657c9eb17a5745c2dc2cb47edcc9cdb2fa7b82973505899271204345ef1fd4a3b5687d5c3e0700a95e8786426eba5c6a4421e0c9cb6f8e3aace9d82b7f9a5084d205ba263eab385f257c57d86cc4223fca4763408030240983935eca5fcc8181a640dc67e47923320d92ac2218c3dfa99815a6ce9d6fc1f81ef92ac016aae8c23f5847e966cd00926ba213c77b2916c844a7be029b545dc65adb840999ecdbe984ef0fc82f3ce1b6bdd3d3f908813ee4cb4f19accb2fcc14d916f7a2dc2bd72e3f14c4694150cbbf7934138561ccfddbf39d0d9eb30cc47cb0d8cbea3ae723ac66c3ffcd25b69cb561aeb6dc18d6a62d843cf5d9dea0e51d2787851be752cb7e503b06f3f888ba68cf20d839142e7667c6fa9720789fec7d382ef0c5f1326b6b09ea4a5d59d0faacec8b50efe1c21944794bf4641dfbba8cc3b59f73efe2e54125cd7ee2ff7f6eea2fb37bf1c8b0867cbd5b56f2d3427cdcd25414fb4ea2c8f7464112368ece5a7f91730bc2537ca03a894a890cae644db40734ae3aa5543723dd5e26beeabe129a84814c79e3b64b92709ae2503063b25c3cd5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33393635393931353132"_hex;
                s = "aff2fc2e80190a28393a1f330bd2b4876e951d017fe8c1f3fcf01d37ceb00cd50f714a914de7c38b01b22b286f0a4b97cfb133d677c29844153c091701efdb340e3e440c5dd4ccb8b839a6c359a7843e75ad8cb181cd785582b3648946bf09976df3ddd9db98d0154b9b14afc7f611b8d457c520f3c234ca75860f05864348d07b0a802017488a384dc2157a5a1506ce60e945b413ab74392e4b3292aa0cff61e19bde8a65959de5e9d12f4177d890a1d444d9a96213a5952f87dbcc8cfde72e3155aedea17ac525ec71b3edc3e5ae463ff211558497d058eb01e14544bbf00032fbf5d36685b5af1ccc30494ebb4f8c87c65e42e2941683762b09627660b259f512cf77a2cbd3dd207344436e6b17818cc6e6d1965348e41013cb313c02590a895a91bbf5957a0de0711f9080394ce2c2a424617a38c0c2c4cc2d685c219f701fe995bd207528e4bf33f97c120adb07043eeb8cb62913089ce8fdef412aa26f7b88b59b62cfdf6f00edd8d15720afe5843010c27abe24dc027cc02c433e130a35f169c34bb53ef4fe1c0dc662b42289c82a175a4094cf4a7a816221a9825fee36f3afdc6758858b63d6596c8ae8264174ca20428102f8c9399685c7c6458971ead77ff660f3b44a9d3bc2beb8d9d22a1962af0e8dcab4c747ed53a5b33c3d73980b216468681c5a4ffe9d91dfedb253a57a11fbfac4a5093961ff96b7b558da"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323838373332313938"_hex;
                s = "936e17fb0af109fbdbcf5bf8397894e2fe03072cd67f0b4827d3ba8fc953797b135f7e4bcfe2f3635c26909e1c66a1afb2f48cc42c54e22272af2dff4a0f945ca3db1dc7024a34ce80f0a1025576f9ebc3f199e77feb168c91f5b6926efa2fd0136863648e21b0c9adf5a7793eac999bc543c8f1714fc08d220d6403f8e940c39934c779b75753b1c12dd01061cb739fc4dc8d14482f62f1af87d07bcb80ce78df60d8d55997278da47b6cd97b25baeeb90e19c037ca82d737e7613b6569c17a29d10fe68536071d5b01e179c827a31a7d633af65f2cc5cc06ff919016436ef6a9b1788ad16ee8d1b2bb4edb9249075c0383f9f63054475919dc5889d60ca0e3ae52a1fbf38c443101e037eda18e48bdb43e6a6bb77fc4fb68e689d263f56724d2e053fb38f19a23daed26fd056b32edb23889389ee7bb05fd44fc61257986869bfc956f4907f63c511ad61d29261aac691e3aee02134a0df45960e3e97dda82159ba76ec7a173570d2177d10d5da5158b1d25b19ef45c313084d23b966008b545e43c096f439cca0c18dd3b59e20aa4477bef4937666d605e94e92b526c29880f28da86ac596a5264c36c1a14119ca7aad32f53d49d8ce0bffe15f526c430563e491be8138c1ddcd6b7c18e281843964220f76dee1e171da6fe0a515c886ecbda8e684b926494ffbbf446aff7162ad0a7b4f22221e373542321d53dc6c023f4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32323330383837333139"_hex;
                s = "4c5602ee4139b2188a19a3b0cc9811c1ce09e0c3358c05397fff97dc94209c66fdd9bdf3b8d5a56965ed628114bede00d9ef82633c05142a120120993352513fd15615bd2975cfe00cabb0762d8414a5a19ba09d11f54c5069727690a6e1fa971a3a80511b99d889dcd35fb009485f5e29f6276450c8b2bb23b1157191a9f28b3737242853e5bc324953fbad6968293629248170240281ea680b3d7480388c22f99d3d421bed954f7f9737432397438ef915ef7b0fc1ef76edb35da0fea71051acbe37702b5e5de9cb6b375d23b11c1cfc09748b1382384804b872ddb40cad950dd4decc31ef7faab02dc4e9dea66913a862489fd7d8219736978c296db3d2449470424c3cfe4be3d640f4bbcc619772c9f75ec84b1c468c2e7b0547a12246773375c92ed4795783a39b383b02218701dba6f8ec7fe6f5830b7b302f8431903774cc4111758980e953bccd5ed6a53b779c91353b4087afd2a21343268fddf1dd7fb15b74fdc86f6dace0deb17af642272105ab418feaeee67df161d94ded340f38063dbef8131862595c16891c08599e3dd4941ca7824a022f338399d32462c0deaa5cd2ec6b04ecbfff3373567f81e1aa61e25e873163d281647176a806505bf809b4309e9616af0904308a60be4d87aeeea47aa79d7bad84b8fcdbc537357061b5a378413feedf2db65aacf1bcee11d603faa143f3e92947e5e54d48c64b9f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313239303536393337"_hex;
                s = "8d380dd014fc7e1d516851b792109f5c27aa5bdd3651ace138c07f6973aeb23e875de5ad89d430f23c9293cb163d5cd0db8abf2a31cfe9a6c27eb00a8872eae95e68e979fbb539a8a7a9a97c07d9dde6c5dc1d88679ad4cb29fc779c1b754fbb4ec89f30b2044f267ff3926ddc6fc15d9450adaada8cad2f28ea8004953d63e526d22ebf0aaf4a434ece0a99af251e8c75eabb4a946ac40d9203767c17a39fed60f842ccff22a609e761b7462e682dde08b70c8e6ce01c3596435c231053ab2990a09b671abe175f2d6e25859e462fa319179eac7479fa8b2273202c0f8608063860f63b76c84dfdb05e62b1c9f65451c8f6025d8799e67c905691a9120a5cdb0f044bcfa9217cd25f983d414ef0c9737ee7886b85ffc7843f867abbf8a137c19a210242c52bfed62fbff3a424a8ea23480c5487ebf28228cb6061c40bb60eb301a1fbb40b1fa77cd4a082ff4021573084b9180fdc19067f56fdd71ce88b9b6c7a7d1bb7b30ad3d9d2635e3e2c0c2e719be99f2e890515d47f3083b9a25eb60008a790b62d75d7125b7a9a156dee6dbc3964d207a045edad3bb31d8ce97619a9bdd31f87a2447d31071abb3adbf2047e642c856517fa666336f05256d125eff42d3b5a68692428dff2f8d35028f09919d86dfc6c4cb0ab76c7f24326c4fe8fab49df3d6eddeda317649f618592fb08753882afe69662f482c055bf2a89ecd2cf"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32373438363536343338"_hex;
                s = "37055f8a563418d9ab608bb266c46058b07baa694dc4d2f6130c4c663b5024cfc0a28b37116d425d53c4931dbf84dd8d275e4135c294cf08aa9fa8007253514090f04780dbe4ce6e4acc16d80cb9144a3a4477ce3480940ba4f528a962916c90271aba68d787b966f0d433590c9e3bf912ea59cc11247f4eb6cb8151154896815cb0b3855895babcefd031ec3b240013b0e1dfedf5a9e56d02d1925f03c8f8f5e4cbe3fafdbfa02e0eecc77ac75e7a40eeb42218fc685bb045d08a3a9c8b2b52fdbcf0764ae5435f671c9366c8ba5a76326477077a44c17b3a3152ca308dd20cf5cb618fa5af7313bbf3bee9ef2b1fc9189a56a340771c9ef1235a2f0fa0caf1ef20383e295691bf2f9fec6b51117e89653165d71fca54fadaafb7aad82e8db470955d65b916eb68ff132d97847ccc76dde81a7b627599ec3ff0b42577d5ac91d7d751bb12b286b74d61cee7a9a67f90ae458828353f23ccaa0527a235a64f3a2338c0ef29a5dc42998d8529459450118ec33bf0e8ea8ef597e3db25a974b18e817232bd9822deec34779e7a282a71f682dc6ec690f040ac45b69dccfc1fcd06fc84b582c47a7c4810b9d1e8abfd8e42be404d01213916d5ae67949a21783694c20a82ce6c6467fd7f5f78e8555dd056393f9bdc3465f65e3dd542bc58a87113245d8b31449b08c4898b62fa95629cdc040b4a065b13cb16cdcd5702e9e26bfb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37353833353032363034"_hex;
                s = "6e4665f39d7cec4e36a83785295baca6c56794ca32c5162272217310370c6642f50866e3b3f3c04d5bdf873897355c8672e7bfcc3e993a33a99d676cc706c2b65d47ab9a9b6a3b408a9471e5148880e20ae2aa75764800d3c4d344f2e16a0543caba766a447e812f0f08aaea9bf6757d57c4b99530524f6fca3077564ec9a2bea71173c7ab52048bda2b767aa112167c78b9ab4508128bb47c57e877599352460f77e869451487360cc15a296e2fbbb28fd23d098678c70f56af216f9dac698a420c0f797bde171c80989d7f73ab45981b4bbdbd827846df2b823aeeb36fa47ab43480b8da833ba46b16f26f4300769bdffcbe71ff48178866b0e26ef84d7e30635f2063815e291c4afc6095bcf03d831afde4b492fd32800364962292ee5d5db36c25d3d95c90222a613f8090885353ffffed7781fc6b9cefd71fdc16ef82d47ac193c88a19d2aac299c5a25c30efe33d992e7e68340cbb3c8749f1bc9880bb3429da78185ebfaf8b35315a6d93b9846a8b77e3027711a7717779f3fa939400ef32428f83149792276c1f873661ac15f248d3a563a8901b83add6a160c3db1948a3bc7b08463fd0cd39f49b82b4a7bb4ab8e004be84fca22adae51eeeebcf71186eaa3425a9838ca7d7edc21290f7454dbdfce7e8f8b5b8cdb10d20b20f9bf99fecf57b5020ccd1f633e5c362a202a53981102ab08e910902761f8f00f32496"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333237373534323739"_hex;
                s = "25006179b6a95fbeaaeb60894836a98c5016fd757291a763f624597f1ec42931cd12be1331680ee48fd765d36d53f3726a91183418701636c70d2a161a52ed35d7a8eb60f343fd2b044c9647b4b85fd42949ad4c8702e55eafd484979654a067571890901701cfa7cfd410e469c5337ddee8dbe0aad74731e53ceff87381018ddc6bcc92c220c10b3b85cfe3eacf11a55e287e424d51b37acd97f8e908aadf2b6d1cee38af5cfcf3ac7fb06bddb4a1f0e2c0ac41e5677ce682ff972e9d60ba696a15a39f404a840755aa3075401d4c80643edeb391972b7d9562238808e80567c2a9251ba9d2c2e5b8dfc65a89d284d75830daf3169ee202e94162b78465c0500f2bbb6bc85846f1d4e23d8d6bd8e1e04a8e37b1947a1785df4fbb77b2b87e30b263b85e388cc7bf9b43f40110b209e781e1d7c281d65727a923c270687064135aebd87f0db5374cd7a0096d3ed48c7684530f87ed6153a1bde18ea9cb5e83da63d021ee31573fed46a193a764de24e5be8138b6f1bd323e59455c32b84481f9471aec37508fe288c39cd4db7835d4c9401072c13613475c8191d1636255de451255c08eb9ebc40195165b91973cd46ba160feeeaf76a05a8d501adf8ea14ec2008a3002343d1ea49b7fce0a16de3722cce05c1131a31b1449be93d854f8f288330429c9b30d73e1c93145456e0c59a6cc8e17bcca5adb9ab061e5297b0eba4e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "373735353038353834"_hex;
                s = "1bf5a27744841b822e3ba8b6ae1a55f4873a2afa234dc951eb9d76b6d7934aee141a42fbda8ff8b968faa21a4b03a4b36969d3563f28b0a8dae459e632047af11fcf5ae05f3253f0563bd860d99d1d640a878b4262ee53463c1798701cd5a7a21fe5216a49b6b80a8d992cef790e95ffcabc22efd3ff74a395ed409fa686ab40f7cd4c54ddeaa0fb0c7427ba66c2875a99839232ce60517e941ba7cc1338d1b97899f3eea7d3b0e002d1ff8012c4cd8a75476a8e0b28a77b37ffec39a556c04f96f7a0e4bf38365496aae8e88be9ebe57c21228c541ec17e7fd69e52976a1e278e3d452ff1ac7f0992f232f9d9b91c7c884cc94fa0722e295a39e3492866fb201fda49f87a7188bf3a2e167f1aeb00e81a7d59e0e0951111f123a725cdab05c0f1c45b2f27523422498343f134c9b5c602e06bfdb29b85f88a1a4e3756093922f62822675a52b211539593330162df4eb03256a14bdf72c60ddc45e7391c78d70a39539821037cf82fd4967bc6671a1d98699780b86da0211104466673da5abe763e7b23213b67324ac388e5bd58d708754441fc80e943b19964972ccc4c827429a6d9e7ec87ac606f0f6bfb0f5de9f59d92e5187d662318486299ed7eb86081ef0ba4c0b004e8cb5886baaac6abd47a01f59e8e9912cc3fe0f47fc4c5339d6ba17145c9f667d69e5e519c2108ed9a082071fc174e27c3083b6fb766e9f549d9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3137393832363438333832"_hex;
                s = "9b963532d230782ed0bff2e9f880ee82e60325de53650478ca7f014dbb18c49b84e0f832236de873cb12e0aec12f1bc143abb78114dd2e130d96c9e8a6340892f53232532ba08da616ca4886976b62953508b2f8e2bb2fa64d9aa10c73bf986965dc433502e8f43a956d35df6694e9417fb277f5c1666e326a658aef2a298c54954005c2c3fb9300a7bc0c4668e2e0d7b94e7a9ff79833d2693f344c079b32f7bb18967a18f7217fb4cd710d55351b66acce25521764de8584a522d7c2478f286e5d26d36b2218fc76e8ca1392be2c9babddfab40a456ce98a76cf4d8abff6b0ecc52d0e4c14b7b8db50b2b1d78742a1a009cde965fda423365920b23d09fdce1a6b08d5f3de58e07a57099a1c1e4e9c004a7ecdfbaa8e341331dda90e3860bf57d7444703e5b72e1399e74d4e3a32a4707bad8ab8a1213f3b543ef1c5c48cdc70c68c18bbbf3e6575f5b588c55dc492441e5b59a4b579cd5a276b27cc0eeb61406684e4b610be8271584a9b8f135f252c689c6efe4d311a86d2e5d4527173d3fca0afd91af7327e668e2ceb63b260a27d7ee321faa7f675de5a2a81bf7426d45e664b0c17a50da24a0dea9aaf1aca3575ba0fa7e4c349348a2ada981060b1165ff6935143b5f5a067dff7829e42575b80ffcc72dd42420d972394216db2a04da490c74dbdf6e0e6a9dc8bebe36b6527b914599a0e118a534ffc2ac27133c3b4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333936373737333635"_hex;
                s = "abd35d3681239f0ea7bb78e597d4e96115e43eb9990f6c4e70544fe2fc6dd37640381fffda0557a70d0558905427adc6bf1f7eceece9f87625481bd3f01991a8094479ca425802d91a997af9a340aaea17276d71feeb353cbf67dfdb51d5dc1411b6b014b5b92471f3131ac4498e627c32e1b13b8805b49e41926a06948c5a4f055a96366410fa351df087e3512b120396050813e0dbedb4c9d83756fa8e33dd9865af73198b4792db8f8f810221b1b2f3124de4340742743e0a34cf88950048fa7213e0fbb44af6465638f0fcb8cc5edd898ed1f077b82658097930bfa076e20ed63719647df07da0853b0ceb293eee22026d9ae5ea35376e1c823b067261893fea36d8439907b616f43cd90117bab7d13448a36654d2a02dbaffa100f98fd81d59c9d3f7711ec54aea208767b59f3eaec9ef1eeea017f7a2557c5e92ba78620f5786f25d3002b5edf60026ea31fd97fda8064d2a654250988d07692d142c120b122d1c378a009f559c820184d0191460f47a71987fb375e95df0e9cb6539ccda8f5431eb2ac2d4bbf7ce5cc264ba96172d73fe77a22dd96de7ccea9b3edad73e0b5d8831e03512c9e501d9f1e5812523ebcf42de82b5d4986525c01442f64a84a4831028e51b68970b33b1a4dc2f9db8bc2f3c145eea34bc1cf5653ff1ee36ea49fb2b39bfffba4e9de100a903f6817caa2117d1fe827b44c8bd0ccef15ef1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35393938313035383031"_hex;
                s = "6be03f5c1347e6b19587d6d9b19b3cf962bd49e805a6d682db09e10d348e0dbb3828eba7f2da18c5676e2d279d70fbf085793ef2e1e0a76177c443f585c57c55e6142e50169906c4e33ac20ba35350fa21171a4512ecc90e45dffceaa9bef17836cb6cba699fd092f224b30022d49f637ca2287e8992a85dde7067c45efca845a5b51e3f0d2d17fb230595ae5b6a8ff906b45405b57301b99e0f14dc0453a1c034e824e6097d8c9722a2375b74466d674f44d17a7c635bd8991e03fc86f308be81322a6820943a4a8bfdcf4c64542897f8641e68bb6fe75565a68b8f3ea157237b2edcd83094bf969709dd7a311f81cec31694f3f13a064bbd5ce590f854c8458350de1eabd0717caeb3abcc7259b4d131c09ce2e8fe968a94d54483fca29e5ad55ef841352e70554158969ae3e50d9a86921791da1a6492d2db4d785b39145d20c2afdc7e648cfb909254012e995ad1b7de7db8af2b4e911b51949a40cbdd315af0e82ba749ea3bb38ed15f6f3075a8571c3d2d7780b548138cce273269b0d0cc9a94ab3bcf76bb36d9d590d1f3a482d9d9a57ab98ee044ac548b51cb8ef6f00ae987468b58f03cfe94a9dfc620021baafece9158bc004478fbb63d420d56148a3424c7ddcabb178758c2ecea654a668f0a32b173c7bb851c8062f63bb1452c4baa5c28c913fc7d21e4a5d2d67cb74dc7940d4d40835c7188ff47a097f3f992"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3136363737383237303537"_hex;
                s = "8c44ea9fa8e57154046c38f6c1e0f4b5973d68289d7ea1ae8d17194569201d5d5b2bc52026ce7c925459a6a58d916b69f085134afa8b711ca2e0b6bad7e18e316a287a1b074afe093cb4983166dffa84d72353c060a5fbd0231e0b4b8881f98363e892cc40dc3ce700c95bb1f12eaffa227cfad06e3beedbcb57c1d1c6521bda7c2c373c7b93cfa032e0b2021b153ccba0802499eb7f7d9ac865ac75545c7e79b1f0ca36ae8598fca528f313f43f44cd60725f4c6a6113ef0abd95a49de07c87b0df31dbb3081ccd6a3137e97659478276a463573a4f452da37ebec6d48216ed019a353a5c7c8e1e7c7504494627978e364a272252dac4e6e4bc8e782d5f64ec2501d7e776d9942f60bcab3e25fce2e8d489155b074fad4a3ebba0b5b43811656a7da525cfe657ab4c6cf6cd45c3670177a04deca5ae80b41465d1b40461215f0a2aa330be5d1749c7782350933e0885707d119a01081a8f70641db4a7dab880565cbba557b49ff1343bbbc24375beebeaab0199ba0e13bc7b6261b53a706881dddffcb9d61c66ba31fc7798f37a19d89f6f4da9330901fa557b559d05ae281e342e689a05726b7c838562d881acff67b943ffde57675a31317302a7cdc4c8a40e9fe82d27786bbfbfbdb7176a6a366b7cf14fae44238cf2855f3e7602fd242cd4f9b7cb6f0adc37eadcfced112e2f1bb90837cac78be3a81cce58d317839391"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "323036323134333632"_hex;
                s = "3367cad7e88854f020ac94e30ed641018d39ffa293abd46209b4a60af6939132edbb8b3e461ad773e50a309c88f2b5a291fd57344421c1834db651740e8996faf4b29fbeb23282f849b9112267809c97e55130444fe90f520ea9570811304a5d5497aaf343e00bee36bb1252a0c93a8cb520cdd6009cadbbcffe0f98e20e66dc80b172fb4478f3c740784c10e2f75cdfe60884dc365c7011693de3413cfc8bfe4cd1d8cde45f4b913bdaf41936195c6414141d717f5f18197c59703772e2079b2d0ed125c51dcf84d965d74c581ebe353b75e0e2a12db04a16a5c829fd8c973dd66713fd477ab5c2ee6b6fe9d3c8f2d1cb1e8fb801cf8d20921f160dcd367eb1a2a0be6f01b5206293590d404acbdbe1f33a414ab44151078ae404800107dd8b1e8f79e30068995e8bc9a28b31bdf07d0e18648e50cf6ecd9c98e1b61c00d143ec1281c88a707555c46719e3a66c06754467c9142ac674800d327d20e6a56d6846e717e491e5db708916047e1b60c4993b74dd5cc6ebc7627b6bc74a7b9e62a051b45d473325bb041fbfb60f380964d275e23b26f88a89d35e9f92905366f3920e4ba838a7f87cd9eb6505fcd4b1eb29f486b87e0df99f3754930b05d5d2e467f5fc36bb111c0c1ba6c3c47f054b077b5bd8cdbdd8ab6ecf2578866ffe3b577c2360bc9958bf3bf0f877bc45ba327481d212e177b61a5415b7efa33efa287c10"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36383432343936303435"_hex;
                s = "7d17d8b13b53ed9456d978078ab56b2daf14b7996efe11699ef566ac1857bcc7977349eb87f527729b96a8638370ef28eebaa94726edded8685f70f787e086eca81f2df2b154fad4af506b7b106e56a6e0f55f97d745120af1abce681ededb26e619590f910ed888946ae6ca9ac3f7f9b711c6f323ae58c96eca46dcfb99c32b946a17f6191c5dbd21805f3d87ab17b8147329bf3a012b68907f146736ec2d65b9fcdffcbcb1b43ccd254794018c2a93ceb8ac4f903a22ed5126995c55a1bbbce55fcd4ecfe0e0e9a00308fcac0f3370a996ca9307a6855948461bff191d2e0c8a284fcc88624519c96911eabb75570d78965748c7aa2f0c36a5725e7ab38fd220f2dbb72e915c35aefca8754b1b67f1e4e59b4cdef25ac969e25885903632cc565e65fd28012a4eb6b09ae560d3976073f60303391d24305456f71a4327b657b4559ad9008ea1f4fbd28c22468a92561a8826e07c15fc4f5a9ac7acbe36e8f54e23ec2e73b4ab1b94c4349dc997de328a60df00a9fed04238e9c706730f75754c438b3b8d3ed99bec3f7b07a992ae621aeddfa85c79c65d8c66dea3e85cd9103dbcda5b03e737442bb9ed047b2e2ee375065f34bc29a3861f5c0cae9c3505d5c11b50ad0c92e6fb68ae3f7c332126ad1ef99e456a70f6988cee1897b6155128e243d0d34c9e32bf5c83534c6e3510381014bf5f56c882e25f6446f3bc932223"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323639383937333231"_hex;
                s = "69db7ed0e765fba57682f292da0d7fdd03f0a9f37a97f8668e9ca4954fe0b9aa73991ffa4d6239302c04b8aca256d425f4cd44d46454ccb6b7b54677dc571150f54fb295968d1dcfc44fe79f09398369f50ff315c7e99ea2387b831ec41846db449848e1d2bbf69f1f81bae9f09392625ed4f6dcb8b8b20e47ebec16ee7d14671baa8c2df8dcfb7b4f339afb52c356052a4d925cfbba9e1aa9e9230443cef3efb635ccf7c3fefafe94db466205cca93aab1f1b1d5199517bff21902518551f796b9fe1db99ce32f1cbb33109fc18fcccbbeac483453a385ca9848267fce858cf54e49614ab15a1fe86974113bf6d0ff82e3362f4aea548d4fc0ca30ac2069431027bbf3979897043b01254454d94b29ae6fb51c28166a5ade66f7b64920c11ef471b3491c988c21afccaaf47b0778a8961327c5dba4360aa2cbc6d878235062d5131fc4a0d175118f28b4cea5ee2eb7b578ae0a937cebae1cef7d69a7bc6f5c602d746ac5698c7e1eb9f185e0e1b8ae40800c136900dd2a8e21c5f7322410d1f550ff72dca832858cf1f88b0f62d53c89aabde406638801d2b2cc9e6fc5508e78bc9e74a8580721e2f20c13e571df5800f670fc5e2991b5e8ebe88d76152d7ecfe82eaa7f174786f9b0899d298ffca8792ba441d805c33b2dc5faefb0c75565b2360c982b133a8e95f7798fd38ac5917ae51f65692e67a7407f2ee3ca523e0b5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31333837333234363932"_hex;
                s = "75b5af5d51af5dc910c54e93707590de5c0000ccef4532407c90d1c592f4ca5f728071e5feefbf8fed30ad703e996f80ca7af5abf182a65f9aaf26f695094741b777b7f94042b612b6a2614c5b2fe08dc62964fb55486648536facbede89786a39ff6b72b920561a762535fe217d610a1df5fde919857dfdc5e5081050eb44924eaff28b1873aaf02313b23a6042f8d3fe7c92b9e7691d426b6ec0a6e9dc7415825d84bd76e9d85ed5cf8d65b8f0a955208aa509d17a327f30d093ee3c556d90dc8b0012cef8f697326a7d94bc0ceb50e629e2ddb9649ba30295a7264e83726016242d087b9fee91f6173f6205e14a7c54e54e8b0074e7633afe048b6167ad16b6c7e69101d7ae098879bb320986b7627a113755c9e1fd49d817589f2f9fc6cda9ad4231dcacd22c8b47397e449cd0ac3243d3511cf4f2aef5ca6f992d297b915804a36f6f2523a5fcea1a38564431514f97b5508de3eea751c5ad741ab015fdd811bda48ed9f33fa3104b5ead50c3f1ab00cb7d213ba128431c0bc28db4aa1810b24e2aa9ed18511b3ec041c97b8a8004707e7b0e7de8c98b1d9100d3d6a6a2c3abdb443afdea848470e74aff33596b0b7e7f3d338b2e4585ea7124ca790b3617197fb898457070b76fa9e1671d72356da085516bb5dbbdba9f804179e465c39f20fb5ac728d0a337d1096ad54e066988286b26ff1a65c13456d0861d0b4db0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34313138383837353336"_hex;
                s = "044cd4576e68c8c2052d2fc67ef5b07f1f89b65f775ce81fb61264896c91301b087f9d0b7bd98c769141507e59df80c778edcbe27a1dfd92c6cb7f195595a7d10fa0c00a043c9fc474aa7a1a5171959c5cb7a5538cbb8c834e1df06f8b6fca53d3419cf18cd0f55ce9a54c2c429eb7a9ee539d0821ed166ebf650ffcb505e13b5a3545a6d9a02fd49750af76270d8259978e040aa4e07b53f716f712d39c152ad551d24de04aaa3fd090d6da618258f7502458d521e85be2c2199f520196dcf11be99571b064ca06806a3af86b4c024182990af901607b4d9239fe07286239d793e79149d40214534f1ff8667c2e4a5b36fc3242e9766706815d89dea43170102bb14cce9b25e4826623a16a599a3ce41c903cb1e8267dedc8846f71b51898e759f5d19ceddb3721dbbd570c5ad5808cb795310cd1ec1e740c3465d255434f516c437649c52730c2a1ef5ed53f8bad99df24f6f2165726d31cb63b07bc97a5eec82fd78a27face02895b67ed0067edfaaf20564e47f653fe834fb0f2b441b44bab3d3789fdd2f260d06b8208ec098182c4aeb21486f150b042f5105adea2254df09109f4dd2e9b713d8b4f66d60dd6748acf9dd1f7abbde164650021f61483ec0612b6d21001f64ebdecc9062a4fc422a0501256da94192fa55a0df58bcba8fbb90326fb429f74f18890169e3b7e53498cf8f478dd158fe0f88d0b2f53c59a5a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "393838363036353435"_hex;
                s = "0d41a0ff7b8f2a544c128e0ec357a7c3824556a000206e951f8489368dbf6861721f59fadb61ccb36bb5f4b861778f18cbadac3666f337e71b05ec593c1bb3b36f06cf79192d7b988fa1e4d48932bf3e992d758541dbf7953147a3523f583f8e290c7c818672a74972b696cf0120106afd2b8b4c9b49ae4a081d7abfbe8b856a18c4fafef30b96912d5faab1ed4ef0903bd2fd04fec39169268cca714692ed92fd9a051ccff3d7cfed3164f46c6385af4e1775e205d6edc0433b94b5e638f402ceb274e28fae4919cc1b73b8e6afce9e9d79da5df45ce2f7653fe810eef064db9830b8eb2899f2a4ab220dc1324c18e62670754847c1ed29b7519819175aa7faaadc6b947d74e7ff3f6115a5f314f1ed3250d8cbfacefd7fb1bd9e7d76bce7fba98fe5a0c0282570e3c8d4063005d5d29308aad305b2eb9cc20b671634bbaba2e983eea6c3ef30712bbdef6914a74971b37a54a76f1c96f62858487549b6deab695749d042c459ad3e9ca9fe48a2e6869c9ade9bcd4445149dfab25c049f10234accf83e837291d089f2af314d319534e983ab58096c60eea3de1ea519880da204f45dea3238c4c15731d89da3dfb84ade63b041941e4af23759a72ea082f5d53e18d6ea524998ba388125f5fae66e3360fb7d99d2251c96532f92c0d45988e69fba34fbf94e03ff6a8046a7aa789ea277dc9a52de1db7909e206ba80f738b1f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32343739313135383435"_hex;
                s = "430d779be040eb5686f147f930e0e65c878de1a4aae3f574fd2e4f0bdd1549be8c04000f38006f3c8b7288dc7960274161d3bf1b3f2f0a377d5009d7625f1dd6153559009ed277e0db67c8ec0d07fb90e6ce99773de1e64e8719bc567ee7c7f986370ed61b1b83eb8513d93151ec5c01fa16a25506b77aad74f62b181c9455af80afb2db96586fcfb0b13095f1d325ae31f06c667fd8adf487bdcd62948334d3d43a8bb6da383bea0d6545afe121fb508492046c1d400af04722a2834bdae08b7b885d708ee87f76de65243cf2cddbe622c07e2d4721fe221da82b99bb8a3d6039318edbb113da2d027287da9d2d16c63ac3d27b12c3c446caa7841370764e007d765b1f7e61d06053f0090a18ce1bf337396fae0af22dc65c1ffe77ea2b6fb358185a90ae4b05a98b9684d64a2db999edef9656d0f5d8289d64c15f28facb70275b7582fbf1810916a49d42feebc849f081308416e121ec132d59330d65937008ae2cc612eedf5ec92cfca275fc7c88b554e9bd8bbcaec4d2036b00aebc53499305aae38fc672e16396033646df5af53a6bfa7f7fa3fe8d6d2deb0973a5b4960aad866c3e3be3475325e2452fea5bcb814f62d666fbca45a03c49d2ef6190095355a0c03416c9a2d54719099a977ad467539309d615198c8bf93ce96e6c6ca69d85ae740da14a1adbd330e6a3d56cf06d51c53f17181bb3cc5a66cdb58cf838"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35303736383837333637"_hex;
                s = "8ababb9a13d866b88c5a4e9023eeddf31149f9fb2d6a7ecbef6cea5042e4a21a19c1147905680cd41e1d831625f9232e5b5650333057eba1073fc62d356ad753bdd157d30df228ac6c91fe6caf7a7778098d7e6e7312cd72ea659a5174933be6529c6eb48099179f5be98a2dbe2af34d0560b367f010052dda1b9632d253294c63a345ef6aa4b7459cf2b4f53321cac562573cf22451fc1e071dfb83a7e1a44a763177f88b22775b69e5cbaa0ed0917ad5ea4285b2e9995cdae3d7180836c56db355c9faed6d8599bde1016b088b8879cf62b6b00cbd3253cfaa9ab78cf3e2eee12eb496339789b8404ac7afeeee7c48ebff110cda5d837f63c8b39c6bb0750e6633792ba79a245aa8df0ca54319fa80742f1e5796ae5992563a1aeebd77eeabb3c7e5a23803241be4f07fa575387400be98d6d5f1ec311d27987f4ef553898c94c7d54748d49097854a75222df3394742da5f39b5bff6881729c5ed4b68eaf5a165def61426c7c3a14d82f81cf6dbe5157039abf79c22a082e9272911117bd280ed7b14558e04e19c41ce994e9a66db0ae6f1fa7c06671dc983f5a4a39feb9192bfdfd2763c3fcf2b478bc0bc97e059b92b10544189b0350f3582b0ba1ff2958e26d707e39931dec092c776521df9683c2dadb135a8b2861bb828d0c0c8cc32436b2c0cbb40dd22801209b56231a511c8c3b469b6fc98dd8fcdbd0b5c86cd0f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "393838353036393637"_hex;
                s = "493640bf521252287b6b7d451a66a8fe1fc2b0e48368044e1fd0afa7786399dc7a14134205ee7eeda0adfff3433d94f9af83d8bddf81f59f9a61e27c59ebb6144e7c52fe6d5976cb04a443406fa20974cc16ffae54c4bfc48f7fdd8031b9f3a09e4412c7d2c4e3a8373ce79648596fa16e346ffe0a8bc3c8378ed497c343b78aa12a9777efbbdd39a29cecc475a37ad1f8ce671d23e66b47596277f2a574ffbaea78d2520b16c3ebe9cbf88c608ae81a862257e3167c624cbf84093c30c898b9b98fde44d9255c866c5fbac98ae824398bbe5adeeaeb87a9695fe43138f3e7a977779f4c44d653ccb173ea55d4a72716808fb44139d52cfeb3c160f55332b0684ab0cd6d8723d3409af68f685f8b8b07469f7bde7df6b1a8d913fdaf5aeaf58e935488b66cd1c8558c6714853473fe523e3183fc6232a2d9f760a478a0ce88c08cd42bafa5591ed6360e0f5690611c9b91736e7b2e5b53002502a06c4c2eb45a3648e21358636fecafbc0240fe6d21d749e7166e8ee854c547597c3344667d371015596a5654834bc726aa65d18c03c787f4e2fb9fc876fd066fe7de7db9b92f6d0727e5a0bccf3099e24a61fd256ea8fc9981a9f807b8b178788a96c8f6888627995b4550d0a97816eca7511bc455fdbfbe56f59ae56e86eda71b299daa02953d4093cdf2c2ee9495fa26a46c333e4fe31edcd66453a8f214a9990badebacbb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32373231333036313331"_hex;
                s = "95b3b3bb2eed3f61ac890b9f3f1452aa1e8fbb67b25a36c8f3162c64b74aaaafa420e729b0dbe46a0f1fafd5cd1c105a8cc6d35433cdd23e6f0ccbc5b86117f447a1ef45d73e608affc03757aa0efc8737e3d99e54567c73a614ebf3513336ef7c4781b414101ad9fd288f3e2e840cde0faa196454c426c7d831f8297f0d02aabc935c5cf769293676f4fcfb88b99d398e45c609234829b1b24fa5352fbacd34101842f4ea7897cc19b816098f27d93724a175170aaa1e660aa178e1a7f3ba67e520e7269555fa60febb1e117f5638dcbc8673cdd982a9e144a428a5c1a6a538098b8de6d3b00ea9e0b779d42612e3d3b70fd52ea0c91b0119522b9b1a0558037d1b97d076a162568acc7502aef6dbdb46269ac9723aacc3ac1f5511251347702e24498e97ff25ecf8448ac5d5ee01ffcc112860141305cb59db2ab0adadc35c6caf3ab9e0a460c80441b840b33302c89aa88645686a3845c0584f283910a92c710e1998e6b04b5e8802c53527a06e46b011052b1080b62d67d6378c03d3875cf57b179cec120b4d445d2d1e6c7a6fb1c04ddc97fb2c6cc122d8cdd70935b3f3b82b5a493c57328d205c9ce44153b0332f2bfc2fbcbfed4719d172dfe42657a0a9e29d82c05efc0cdf4b5dfada1b9ac11469b4fed8cf140385194e67c2628fa8d3a74e1c87d62d279cb6db8a3c1e7b1dd946f821b771de87f9ca010d0e8d9ab4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323034313031363535"_hex;
                s = "52fe4ace34e161ffa95c7a2a94554dfe064face69c7fad7efb170d2c6470fce7f6eee9270b8e6b4e276d43daeb3b74f3bbe9c3a84ea5c56982afcbadfcace397c9e5d25cb29ed5aaa79e4d7710cb575b4ddd6f870e80c073bb0c0ba343bd7e72f151f7629a9278e6a0af2645cad0e0f981772cf461d73a88d12a35e8bc687ce7042dc9160293ee77342d7a7814d2e8461bd6112801bbcb54a8454dc2dfe7d327a4b29d240a3e3a90e0260f13b0b512f8833e0a0fa99c1c31ff5afef697763f377e35cf72e2692a52dbe62283ea3e80da9c366b3e31ebedc6b344fd7d7c81992c593be0ed9b2457297ce78cbe9c1151d7f4cede3f7ff8f6706072f4fbae4dbcbd38bec4867cf9f17d64bc4783a0f0465daa2aaa76226cb2d6e2445dcec1c96c1f92aea7b690a7270ca500238f542fd064bbb9a8661ddd5f9f5ae8b5d47c40b7ca0600c1540f240b714da4d73d7f80f0251249349dbae5e83b5263a7c207896a030aff55e8fa6d83a5775b826affebfe932f89b128dee71b008e64aae9f1c7a5a683adcbcd0101d9036eb32be8ddb3f5b4ea0182135863ef53c33a01d4c8b2f39502eb7c75c8016f2a4244895762afd998eef18fd7c382bc7cd65be8244817a27d3dc89731fdf573d380f46429d802c1656deed241ea4d29b915f7459ef28b018723b904ea935e58cc896b8feba6d72bdd8fbe8207bd3adc8cfdc3ac84c00f2300"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33313530363830393530"_hex;
                s = "6b7b6029babf6ebdbb54afebfa2c9c3f4675d38c3042fe049ac3c49e8c55f82c943d81091366dc153afb72254ed4499361bb4b0761e0dda99c94ba76750687c392ab698a4ba0bbc6f0096c48ff2950a03d8c150a823189ad22583cef6a9e2158231392228e12ba6790c8825cd145b27f981e0f2b3e01fcd4c83134063fdd444ec61fbf22e485b8c5ee4c385433fc636a1df76c287fed2bfe6efa1aaa5880973b30ab91877db361250934048c8b674d0f9c246189c21863b9ff9740c9da65185ecce0002b5b4e58c4545dd500fa98da21771d3a1e4127c33bc4d03a3f7d46ed96e3f044428a5bb431dbe916215979dd552d09bb06de179909f6eb535db1886304fbbb7d065f27cf53214ddcc8b58ade2f2d2953f1660363edc73a9061d32e087e49838acad0b95f62a47a534eb124160f996c526e08e366eb0d80ce46428fb4f7d6326e2409aada68685e8d30b64e69233d0829f997bc38feda1a3fbe05e9385632806c67ac000d749543dafbfedff9a6e442385e30050b520b09ba00019fd22cbe206c9aaf60fa83c47d88f73a00792327d7e9a495eae56edce7358dfcfe2b1b57cff95ec6f25cd494fab50eb1cc23ffc2e09753dbbb18ad6c2aa486becac7db536b9e1a9727abce052c58dde59cfec74054f60d94a4a62d7d99ade5877552fff7a58a480b7c07f90a59b1a5b5e48c5630602021e9e9844328d271a64d1efd95"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31373237343630313033"_hex;
                s = "6bbd547d424150c27dc38059191d8a48b9b86273ae77b960254a419c678db3f1db09bf7b9f6fadbfa8eae1959ac798c8612228e162e29527c5771a9cc68b8a3b9d04bdfd8ee747d2149f25d5ce9eb84557346ffbad24f942d3ce19ce716021588ec4435daa20eb8694ee3c72e67c77c10a6a43d0640c8cd4b91f7fc0c3c8f11298c58a9fe575ac3fe941067de05214ea0627524e2f040d34a8e3f66d136f92fa93ff73c2ff691d763cdfac8098ced7363e2e2ce31e32e9b469aaf6b7911845428c6c928daac13aca52c29ed31c72fbecae495c90a7548899b00929bf6c1a4e94501abed91fca573043f764d58e431e7478c368e2f00f4deeec5c470222e92d47af17c1b66dbcb4237ba3a528bdeffe2d3bc706852293fe990decbfa39e8e3b6843ea770ef7afe4996c3e9d4911dc7e1a9d91ce5e905278ae84178a10ecd80b45435c5083e086dde0a76c3972595c015124130164ef8b8e607d6e79f55d6a9a427414b22aafd3b612e20cd68bc64946a94c89782e1d1f8198446a7c566bf6ef10a1dfa936e8d5ae038fd342d4f201f57a75c1c80a646dbac68b69b7cc4cf5105f462b9c7d79c14da765c9e44b39264fe6549af49b25b2662d492bf1d03239a95412a4c9bc67a9696fd090fe2ecc1016d9896cbc377a1f60943689bd857e8f01903864929f2230f48790f1b151a6aac0d4cc2ff3cae199f9843f667a2bf0a41a2d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134353731343631323235"_hex;
                s = "70caa5161bd0e75a57e6a90f3ab293bdcfb892be766a2f8849ecce6fe01d3e879a796b09f7f3543ade42167de0f5f54e1090956de3bfcf205326228a1c91de927b1e46e45e766a16d4ee41f666e9dfc5f54a4bca9177cf0b231d1a6fa566ca49158538bda7d396c308442bdd0eb0337716011fdd235dcdc974c3c601648ceef0c822d9b99e796c9501f252a2d8e5136c4e3ccfaffcf8e8c0d0eeeab472d9a47600f7352659927a6635c12170464609c7223c749318c5f2039378e47f78b36e78a18f2a66e4b96f6ec4ff7687f071af9722a80c40ee94f94aefbb0e13432b5a77896cf5eed380ea3e600b4506fe4664cf725a6a42658c1135c6b220687454fd0f5d42757735c0165ab3080c9067069cdf5525c814f6b80782a7bf993c5cd4f99f52985fbbe3bc36d4b8b1f130b181703d9de3f8e8ed0e68b5b38edaba507f7326d2ee8a245c16390d68259275bf780c52b1ba8da918a422d0fe81d317d51fe137bfbcc33673ddd7563ac99518e87869366d47fd279b8bec39acdb67a612bf04248d0b897ded76dea17dbbe100f9118349b075d49de863dfc80671a2dcbad5c17b7f39ce5c3f63a7fbfedcf7b3c6d65d681a39f2fa0bbc42237cc66fb85d344fd55c4c1601048e18aaec77fcc8521b4e8cd98d145959b5b80a4e28502e98cd0bb1cd8a5f18f38f9d6d8ed597abf3542e8b658f537ed5618002db963df093faa6ba"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34313739353136303930"_hex;
                s = "0f7459e3cf5c03e649528a1ff76471603bf7eaefe17c4e549ada2001e6f8f1150d435eef219f3460af805b74935f7d98465c3f465a0cf2d8d851020c3ac709a9cd64860b26505333182b9617553c4ec108e5b45743d6677217dc36df2b2d21686f5c3aa323bbdc88bbccf398b2a4936b490c261bae52bb31ecfe0f29376ca34bafaa0faa8a350607fa371d7c6e2ffd15eef593eb7fe0627c3c6f1af38662ab92b333577b5f0cdac3f82c48fa2a6247d8cadce99773b6b3a86512fa38b561efb91026641754d32eabd9af9c82078827ad3dbf921be24d1029a250dc9fd646f5e86b4f29ea693865c7257480bd1767e8bb051a580f24e1e04a387af5342aff5a8c216e4d52d84d712d1e0f535b4d8e161e488da9db6fb7351f6a572909bd463c36cdd10a990a91c1357d171d36b9ad5bb51058a0639797ffee0526a4b1a3991de1c6adb577c2aa05224b7e74282b5183a3f56ea7a350ebadeef1fab28db3604a0b8f02bbae754f5d755bc7711d1e75cee5a892fc5d1e1df960106a723b821515f03e5a381476818f0d6011d5f242f0d793f6fd5e53c7dd97b0e4799c3e9892f20fcb0c446660c298824d9dbc88112e06797c134c76f70818b9a55d014cedac9beb2a4bef7df6c4daadaff79b8f0b7fdd92899a8988714f8e4dee4035acb3b7df14945ad91b22902faa5bd22f76a9af01b5f941d15522788b3e00f4cd5768c67240"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35383932373133303534"_hex;
                s = "6792bfac82ff68a0f85221bfaa33ec5464e621016e229a43de0a9f4ce16fbd3f935591556114f92d810a0962e533622800c641f8689a26bf8a41e0101979f5c334ed1b333e458c468580aeb66095cd11bc315b8372183da899cb4075e50d893c31725f58bf8b0183ab7b3981a8c8e46f61d07cbfcf8eedf6cf302871559ed0b99d922f1f754fac8c8e3332962a804db4287fab826fca90f6e8b35c07aae6feb52255dde1d75d3288398c8f5fee28a960c5135fed7011cb797d1c72f471e462311d0475253b69e954353595ba6ae6f2039f3fe1e5e56cdeb05958fbf56a967503bf9296575f82d088a5b8f1400aee55b6fe942b5a223894bb75699d406eb96b991bc31df1edb92255a945d1b6edc71f2c98be34a425adb7d91028f3cb18b4953901bd13cad2d7d1a9a37a4743bc06f3275268b46d108fac2fab89d99ce465993a8f4c4c51471290845af3f0287ba907206f5c8ee099fc6a5bbfbb014f3ce72f9f240ef0dbc79c89d71f4208516f94673ea7d55365f8f3b956b29f2285841ca3c77e2452a928e1f7d82c7699d9b6b2fe6f93e1ae217d071605154a7547816fdf4ee0fbf88d6e8b94a6cedf07ed893ea734779ae0bfb1744b05be6d8e672813cea3614fb4eddd5ec6e013999988d8cc338d6658eeb8ee2dae367d0acd2bd277ac7616dbf60ad41500e2ba6de0e6b18044324a8c53892686fa9e9f60b45cdb972c34"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33383936313832323937"_hex;
                s = "309bd5cf258cb067b9b5452da3e72baaa0e23c105b08da64f23459cfe8582f9208310de54e3e30d5585f9299480688e6969967c9e1876d39a1dc38c103654b0c111e4879d2c6ee6e73b5a4fb1aae995da97a5d9fc79c43ddafd42fa559ce14aca60e170ecad6f1a3073cfa7fa52ef6c1b483f3afd43b7e7bc9f118e81a3e09c1adfac88585f115fbd72eef1bac0c612e2689646def4e1e364bcc5996f607047cfdacf23d36b436d1a797b59fb17afad86ebddbae396622edac2f89ad5dd329135bdfaacf17cea570893624d3d97a92a990c0f30d8ad87e476d1ae922ba89acae61d544eec6a848ea526aeac090c1c925d4967341d6760e4032af0514ba62a77a543e757f88759fd4c2997bcff9eed8aecf4b3d1e2c83de88383ac17090962a6d80ca1c809520e924021f6fd151128b598ae4fd2616e48ebdccd74f9cda6693b2654ee5bb352defe6e5a97e76979d013ddac80a59ba9bb0715c2611bd927d98c05f1f1cf287c778bd9574255366798cb68c2da5a145f79400bf14074659863c0241571f765a0ea83a7557eed77ca18d3bd2c3838569c15a8db49e47f4737a5f7ea29ef64c041acbbbce6ec7f87b2560f7eee7e5d70d71a188534d7d2f6fef835a2089bf98aef46a2008eda6928ba734730e79bb2a779a68bb107ac8766c6faf6cbcb0e4d7302e8334132f6de2d13b9b93b0bc0ef65c4443e7a292b57b8a759f3d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38323833333436373332"_hex;
                s = "5fc0f9085d2e31c4ed617af8ee6467eb95d393e262ba047d62fa385ee1f355b60a17a9db858b0af217380fa21a44601d1a1fad943772e93d9d07f13848ff5f239b2b3e31be31ffe1007c5433bae26cff6d82009a6ef86bfc1818b408f2e162774a398b1d3d0306a80eb957704507b70364cb6d906046bf17d4b4e562c279f71e7486e44ed11d5e75139e62f6b10f059403f13859f5a2ab227fbd360c83639d9b06f9b897707f85f82098321a943e6f6b2e1f199d5dca0e865c81b661d133fc6112bdc4779856b9db260067b3ae3142bf69f43677f09ff463e37fd3fea02ae2d9a66eca7fb4189bf61b192d1c46271f4a4ca12d107413e7b1f7fb50320221a00107c2160760b389e8bfea7922296eb9f928955ea43b3c1b731322f02b8443b11b4336d69c19396e6850d41db85f063d8adc0792faf537a6fa5cb8b4bddca1361f462361df2a5b7e0cdde117fe0b9746d1941678eefa4c338abf3ad77549e9484d155f2c4c76176b666eee8527fd3ee86c04b3d8e91b187066b4c6804305238f06fda0f3db8d9db7d479c768014025ad9fa0a7092bb9c08fadbeb45faa39893951edb43dd32ceb9c51bed349167bd5596408959d3ccf75b0e7e71e24158f15a2f6b22342e149070650f4982c484f63fb95b840c8833f9cc4a3f298029a334f8331e7893696ee65f9fd59abbbf48943bbb584bdce174953796b2d97eeb7010c1939"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33333636393734383931"_hex;
                s = "a5c609d560e3bfbd29def542f2284fb956dfc16b26a24197473b5a46cdb1c9347e6982a4a607fcfe888c013b7559bb8e8376a5666cf49217c34b2017d66244fb99a7b09f9d245bb77010c3d0804faad57cc270fe38af31b4d55215bcb771409a86d71e2f60345448c6d01b0450c8da55d1c8d6b6219587398104c7ef477da5d7bd3c5dc12d78fecb1e2bd669b1c360b82206cd0fd1700eadf05db95a7ded4b192c2aaa5429b221cb49a73db116e79e17e2dbc4af55af286bf93d964a244ce780d6a47ea78c906cdcec6b84ad2e241ab778f5610b9912a3e47f7d632feed6b166b42561789ef1a9869ae90ea670cafa05f6e81bd1c1369fbbfed191f8e5e81a8bea9db4248a49c9a0c4d0eadaf2d1bc9554d935b7685113fab1788af7210e0206808051fb6fd509ba2208b612ed63f7b73e36d16ce53ff35f227a1e32d639e0f0ebe4953266ff5e90053efa9e323f44bfcf0ab17b2a6afc48080ec991612c987206f16664ff73faf2d1abc06f0bd6054575d627fe721d22bfd27c971848c686b2f6435be5a0eba94ae6dc7547324423be48c5e9a35fb5667c76195172f5e76710b695e70916aaf50a06e870b66bd58692153ad18e28b5584fbb8c7d14d3476f034a6e4bc109fa53b1c61f958c35ed31265a90279fc7b44afe624df0fd2a7ac097c991ae7a2607c255f001f64ecca44c1129649062956acb399b13bd77a2dff2a6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32313939313533323239"_hex;
                s = "2eb01d3d929ebbaa0abbd304a72b71fcbedbb804d9a118bd4592991d426e5ee991668ad4b3d01d5a36178dd34864b0f52be856b73ac7beadde29de3d73659eb9b6d3476c6c6c106f57ad309708d8c6dad3a9e40472e0d87c0f267e5112e3764abcc34f00240ce6def57e1cb60168e134f1c2b26faba3a27eae03cdb46e3fc7a06abeef2502a2be2309ddfbd28fa5f2901de6300e683755940dead5afaeb2ee2461074c3f05d2a104f2903c186a86b0fd3da35df737032b7573a2f40ef80b18b09ce0be84280c2e51eaa47a06033d7683eaa36c73d1fc69a66a649cd5a96e9093f7a4a3eb18b83b921ae43436169a2c41c2a12a9f1b0fe2dd63751810e2159f4d369ef47266de76fd7b21891d44bbe2b9078922c2341a4f511602dad8d6b9e00e74051e07e3c678ade8b61929d802110a0b1902f52c3ceeb1116618cd5bb439a643733001ef5d4f55ebcbcf8df8f2225a999169565fc8e26609f3a242c9aef47daa91bc2d4cad6174b833a24598b339b05b0b466f31055ad2e2690856e0d0c65a769f757da3bb5294e822e36728673463d851c1fe999231a8a2273c399c210a907648fd5f962a2f9022f3b8e9f63fac8d61377209b8185af4d10e78039f56badfa09179db42b3e01e14c0a792b6645e03f05a01ef04936c62e52ca49a6e006082a71346abdf62dae43620baac5924bfd83a826e96c3b480b4cfb3e44778c21bee"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35363030333136383232"_hex;
                s = "208653b3aeddbcf1a8e940acc3042081130c48d5a2ba72520641edb00cc9dd9771170aa6914c3e9348d5368d6d179cf9e8287bda3fa82a10f4c6f22ddfdf92dba0c9f94416da4a743a2ea54468f30e11080a1102d0e066ec2543afecc86ba766db23ffb9a70594bf4f7cbc8819fcf1b9f191893214cb159d0d9feb7473f88215659588a2d0a41c76dffd9e652abdd3ce12eab11d0bd8ff6e23bcef1ed3be837443799e74ecbf04d13a46b4b24372c9e4c8dbf19d026d41347464ba0daca66b0c7e27df5cf529e14fdf851040d864fab956ab3368aad2947c75ece66cc8f541c86a4ef62416ad6c14df73d5e14447639a06352928da99581765948762f268a3f936b96c7c2349a1f60c0a50081ed4a644b2e9c6237d652b210e8b02edb1fe4512bd36da816b1fbc93b22ad1f1e595c241d32e1cb0cfd88f807cf26a6e37b180c26ae34d4deacf97a31c1437238b9e3af83b09a8778598ffc9ecc8d5dedb0872a4285b312d1c796ec0cb60156f72474caa6748f4134c321a69236b5b97a794c25ebe5b5fd49874fadaaae0971810f8b1b7ed9ed5ddb767dd605fd1cf92b61b477d76a1ff190a1becb0c84b77b93857f57246535b6b85afb1b0b91a07f1c6a20fe1a9b0ed0c9f1ad1b0a1def4c56ab60f9d06f229243bf3697847bc1360d2a4686f998e4cd6db0d274816d9b602b26960092609620007daf4cb3dff6a6ba1528911"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "383639363531363935"_hex;
                s = "3033d003c62f2603b89d1fcbda8164afd0c980f2616aa87fa7a93643f106003cddd8fea570e4472ec13407b632616fe9a49711237666e351912b90a69fecdfe83947731b73d0765a4b170f8a150fa5b09851854735a265d1687215386298dcbf417f62995d4e255327a5eb429c3db0dcb6599bb3c4ef5308ce0ece1d33d5a4beb6fde42ef0d0c72eabc92499a4f53570acb1e3ba91bfdf0e24628b2e7495f218cce788633e35df50861a7fb888ef040b9f3a6d2d25431dca8cd9d2528573257a193c8d84ad585d157009d6f9b7abd14d28e32158d7c506d39244b7196456a17ecae68b52f9da623b4c4741ab5a28849d0c6095ed4e45252b3570b92e5db5281d8707c9068c2989428aa08ac2dd453a5299d3490839fb062c9939446834d5ce20ecde5db66bb9e132638b5d6ed09120c42a2b214fbb0f26976e6b81ccce0c4375b3d9ec5230048f649dceff3629a84471a9e0f9a85ddc5133e2780f653c7f6ff338db1a21236bc6905972cea7956ae1908fc06c4c05b01661b98d7bb885f7cb4e345e82724cb0466d16878f60148a445cbc3c2c1d698b22db3de4d3ec43c270c74d05325f231716ee9fc6951a0ed1bd1e3664b2188b4b2fcb1b7f85fac3290bb5ac9f7046c5462ee2f3df0bbc6f325f2989efb0552a3104072d9aee4686e802736e237dd8e1d1420de70fa0ab018f4215d1ae7cb5a5dfae4b2c38fd1f6b268f0b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36353833393236333732"_hex;
                s = "6282e8dd7c6a89743556a1dd4d2b3a8ac0d419bfe9790764d8f02d497894c3a25b448b8021ad05bc219e692e357945759132feec325fadef425716cdcacc75e5deadfeeaaaa1a51196db1f547a6c630a7f3df6ae89df29f0ac89c25b48f816dac267ea84f81ab389d1bcf3d8730e177b65066d8e29933e6be6a4e4589a61dec0ef77b782097e484cc4ae31ab36831a137317319e6a090fc197056183c66eaca5b068218306ee72a78772989ee7918cf3e45f60b307aa97fdb8b33feea0f3ae5fff10a3798dd6f429d22e226abd4c6e3a0a21a91e908c373c8a76ced9205f3077cc375122e48f9f4dbb489c4bfa06de912d32d14b00efb6a595d473e97365a6b485879fb9d101d0992509a1b5b4a89e60f0d3721b6d4153b2e83e89cabe7a3c98acc56935c162c24313d58e84960617e9d63f4e1fe730174d465a79c48d107613ab3fd2cb5ec6f496c88735eae6e0893e11ae3c5c02b9dd7b232a9cdefceba9cc2b9fc421b556f04da902cf9f3679adfec4980cbd76501e54f1e0ad14276105b420c15dd1c47e26618421ffafdef0020d5caa5afaacb25bbcd05a817780dae1718280bece468de78c7392dd071564b5e63ff23eacc134cb2d58fe7dc4a442c28d40c14cc48b105bafff810525566dbf0b9bd6717b22c06f18df50a097bb6510bd2dc56316aafdeed0dbee165c9bc60139ac7bcc5f9c2e8fc6ba503bebd7475eb2"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3133323035303135373235"_hex;
                s = "5f8c2677fae0a4e6098e41f4f78e6a7538db39255fcccbf118aee6276745c9ebcea27509e8cf4c14d4387ca6e6d57f0c7ef66bd9a73b243d1de5137cdf2a98ce1a830d76856d22fa772ca4c3cbc7c92d2146872aac9a54916c89cf46887b8146678f81d2f014d201f9f5fd5393979a7d2d2f79e78df9964a942ba54d582a8addf490e3877b01c3b440a94eadb6a71db97c1b4280c899bc1b6b86aa1924c1f4394c23b353c489a833b87cdaf7faab87d70fb2f9628762539ed906dd3d91b39f25ce10850a47bf68c3084eb370ce437152e13bb71cad1b5da132966ca91ce8825d3f5d42f04249045d033bfba679cf546c3300a9c319eb56dbbe96adbf2e09f3e3fe332e104877a4ff5806c54976b698d6fa68247c9310c9f1fad54de7b91a368a554d55e55827d508fbb5fca71e86eeb1fd6ef4bd3c06d482a7173ebadf8961be7d5ea8c88f904538dda00c87fe7804364c81568a593997f15c759c0befa9d164f75299f1f254ddfb680dc0e3dd0f60347882eb61f1c1c5c17e0ace99d45707489082ee2aed55db728014e43ed6a6c1ddd1a9d8a0a6af4f5c63c5c93d6682ce643cb9033d31f10009158f446e85cbe1b4f39ca83d436eeee5c62b0aad7668125b74a8391eee164e5d251c10784f1bf29c3154b040142159acedceeb03137e37c42561f2ac767582e4ed07654f8d284571f604fdb879895b0d3b8236ed4f952952"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35303835333330373931"_hex;
                s = "9d503050ef02c0652bd1f6b79baeaa4bc1e1eb417b6dd8870c67302a96fc0d3e1fc9bee5c8b354864428152a88c46f063e4352f91190538899d1b8560968c3d7b9f57eac4cd467b156423549150be783d9e992170ca660ebfee39af59967bfbc7704545c79d949a34b86cb8562d157b42c30b4d07e8397d24d21937fb76389bdc3d59b2a441067c650365a467385223e33530896a593d1c818452ff04581fbe2bb37b4ef9b6b7554d928d62cd1f2b5450ece76843778a2fa4bf4af6ace449a8ba2759169d2909b5f18484f9eb99a95624ba8dacd49cc8e3396be4705901f6990c9b704dc13cf6e3fb0f46b134c489f9104f11805d480c3647678466d1a4729046d8850e58b9623c64bfe2dedabd5e8e5b6ed585896f3ad929475bad0b03e901e2201b947332f381bc99e20d9628350915bf4562601224d84f9a1d1d283122952eaeab8492ebec31baaa003e6c99729d04c0022af34921883737f6c86bfac81c116d15eb74fdcbf8e6b103117a282c927b2d1c722ba0dc20b930405552a6f9762dc4eb2c9bfc1b6017f5ae7f7cfd105df4e062adcc03df3f117c784247f862fe11dc1ae4f95d8ec61138c9752032a1156bedb345c5b5d1fa01a867c3cc11620b2a31532a668e3e2ee5773dc1ccebb2b8b8742022889e3bf96c32b77db661c65fbbc0e14032674850da549ae43ee8460e46edc6954817e3a8369585317e6f3cf68"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37383636383133313139"_hex;
                s = "36c292545a129861e7fc59a0e85ee426c6aad926b59b81cf8b67968e875b6e6e2cdd3a36d63d8cfba8951400b5f0b89e9aa80e681d4a43ea42ad4ad79d92cc39f8cbec8fb7b6e284c9baa05a32c2727774797077468386db4c13b955251c72a7822cb8088913350479ada2f4a5a967cdf338931675bc5ac58722a26f00bcebaa8b07eb8162620da4367a137202a923551b5efb8748f10bc005db1ee6d65faad970335982d9774794a0ef275a0c0c26e1ecc22507a692950cfa19751c8543113daa4b6efc25dcb66a8a3c008e3b7ca444f04aa0cfe0de1ae36da9f18ea10ec7b31ac66bcf0f48c77f691166e7a50cd325c54717968c48686f8b89d2ec770f2aa037b6dd22f8434d8669efa619a90074cd5726b25ed86f40bae7dd132b9b8417f1374235328d4aa2f96e04c55e2b28ccd0ca1acd45d72cd60d9426ad651d525d535b5126e48edec20c87067a329aea282c98d5ac28807328e8db66b1aea6b10840ade575dca445a016b02beb2342eeb1a99b42cf7124ef694d90534e5c698d9ed536c14223915bc5cb99f1947ed283d3901a675aba54b56f4bbfcc93beefdc99b888f1cdb6c01e66230982addc19d42a61c9347d7af34970bc0fd929627ef279309877d9319ed95c6967490fb81c6807f0de1581f88beb6a74c4f541870868059ff0e46188901bf819c972ea198df33c50be2acc3edc4395cdda73f6a3b934cb4f"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32303832353339343239"_hex;
                s = "023988b21a2c953b622a97f1044a0291cc899aa681883e2bc5d41c8b45921bfbe04a3d44350377230a7c4171e1f8cea37cb6e4d6a781864a7ca4f232403c93c7de85e42c7c3c65ac0e63a21f374394d4c2553220560840835d5c581ecd3129ff5a4bdabc2be2610d9f6b2b1bb99a2bf8ef28503bba798d39fafe9792a6792fd08ef0a3facd8bc7575e43865e4db71e563c6b4e51802abbfe775a1fdbbed5f738ee3dde34fa0377811b5e07d3fc9df50466329afb0d2d6325f3fa981e56eb50e02350b8ee29f008e7ebca8be246fba259833bb98618122858b1988ade283a5e7a79b07bf06985e277b8b36316d7875a16269e9b32646ff195be01189b9b74d73a0847912bef6ff6a7e701685fb8b9bdad0c1ad024925230e3929ad0e3dc61fc3845e768df8da698f1e77f53bf12a9240e6ff0e741414746b2f79f575391d3141383dd4745236b245e1c21642d5b860aa23d25394e614ac11442574b0027008fe1b2d5c64b66a3cd529d2726e1933b11b4ac567679462c2ef8b8932a342f743f52418d7b314955730bcb94cc16b275d3a5e99e795d57141c9b8f223c0db5c8ba8d314979bbe375754e6c11fa3325ccb82fe209685de8991bc81e87fd009603ed4d68dde0e0fb2f583b2ce20188c974c266831904dea7d382456e90cabb0612c9ee054cff87325ac69b7b55c0c79edfe5012f3fa444528a6cf0797998a202c55992"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130303635393536363937"_hex;
                s = "41a7af8250ab676043c245cc3024a2fd6ee8ac73009c3627503e857257d27c38d40283e4aae2e0a6c45f72feaa7a8db5a01abaac7ced20a418711c1378a725174c0e471e278248abcf3f519a4842bdc56b485b0160666d73d4c178c4f5ee5f9fa0bbfadf4d09cd2a356e4fbe2585a2ce09a2d5b160df939640267534646d179088180c883a1a3e1893440173e5c7998d34d20bc8a76dc484b1540e528842d6936ae7f0605941074e19bc176d5a504d91babcd87ea6a2599c51a66d600c7d8a262ba2786bef3cbd2e3e060c7641cc53f67cba4d7c3f350157294beafd4c205439082e4460b0f7c25f73cc9fcba23fe388f3c7c963cc4d133852c6808a68c7090850b68a1352c9810d21fa30258ea2589617654f8c9699e88cbd68b81dbd912775851360246adc19a28de2c771b47e52acfd9729cf3c75eb9cf1a655f1da36915f1ae3df25cb8851fbb2d56ab88d2b1b9f027567e37438d68dc39dd7b6a222f53c63b91ee86acbd6773438f67e6dc19f32d4e1dce2ae25a107801906efe08fd9a08e7c5f29e0df00e8499a05a448bfc3fbd4cb8b5849cdb8d7778ce999830923b4d8f7d08ce2f3100f4f623558e8bba872e050a89e580cf4a953b00055e1d0be10a1dd596c39c0c3243b9fa93bdfd6fd32e8945dc1d184ccf8de587f02a86c9c2950a15ce8a231d1f61747439c5884a22f1d91d5111d0087f6cebf14c85113cb9a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33303234313831363034"_hex;
                s = "2629c352d1c6379bbe2e1d3865020ed0cd0b2f3d0904d4fb336e8f9c60b304a1678ef8034cdb14f1ebf9adfcef8535372928feb215d38804b6ffae10cc6db8c0d7c8fd26def475ae31bfb59d43c461c35b7f0effb84d4ce377236e5a1edf38806853f7a30c421fea02c5f6bb70ed43939bcdb14ae53a356e88534227df9c9c72958e3f34a0a1cf5269ae213faadd4732858c92d397fc6aac958ae0feec277d995ebac7cb3c4cfde48ecf80ac480e7040b31310e00c9f72a7b2289b50d45d2d517a4d674d866d4c17b928dbbf90515bd843dedab2e2914f872d55f4df0a4b72f8fcfb99ef6cbd588dd56374439d645daf8d37148314e8fce9159865fafa5e89c7dbc98b4c1896c75db178c60f6813aa598726b983fa435964ffa10f62b79ca85e656748716b9fab7a1ba5fae509d97ab3c17f69d324cc610ccce95adcc1ea35a68a99f4ca3452da71e1d908db41cd2dd71dcd630a3e2fb65732b742bdd1c79f7df08354d65a0e9e94fb4d80388f3169d81c3bc4a2fb6522e6def754a0f2a83af1d27b118c973cb214ddc7b8e45c771e09f8eb46be3bfd0c645be8bdbd732d2481786728ac612b4897c2854f6a46340a49c0c5bf7205d5803be2f952c4438ea76ef3badb3c3f430e1502b32727cb39d1344c949c5f6343525d79bdeb363632067c1df1f1042d376dd94f403cb3db71966315147a8ce6d08cc5d6c8a907dc686f49"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37373637383532383734"_hex;
                s = "26b80cc1e6b79cc0860932ba661e8a482e712bb54dee696f8f58527756625784fb91dcd59e0abc2cdb830c4ae16ded13cd08e25e66630dbbe57be937e78824bab5801f350d16d40fdebbd71816ec2331dbd189c83ece249d3b44bc74ef85af77bcf8bb14e5df7609753727c965b778a4831d2b145e910d3e048ff8a35ed3051570f415dc028aa3edaa4c6fb8c24565490f14e21b82dcfbe6b59f7b4e2f511cd66804f18d9b66a7acd1c5fcff8fb3269ec396592084f49bf1e007e0926af32ab17f07dd4b35fa9c4509f4ff66d9d59540ec9aeb508d72a4c3ea4f1badc8277b88a65d4d03a01f9fd8d14c2467a83129e58549b56ae2fef9aa8aefb9265fc09cd432f79ec4de1b19bdfc8bdcaf3799e2c448dc5b23ab45fb65d069cb4a5810fd23483e31eed48028487e5dc3984988ac2973ed679e8555d227575b90d218e05fe83411b3f8909ad7369a20e5032042d64ac1a44afa5375e2116f2db0735fd7b1c2e99c6cde6c9e2c6694d11e8a77446430bd6f45e75097f2ceac4235a120724c8c14ac40924b66f5cf5f226ae202cfc6eaaf80e2b7a79fa290c316e52c92c60489bb1f5f02685b72f60a599b910f95cf7eb5153529bce8f074a41d0de6cd85ba5c88f0e5bfb714f52daa1c29f7ca99c916b020753c474b226c6ae0f4c58f508b7718e78f8e5f1b40b9f54061d243b09858a457a6f254f6db14faf34ccb4bdf84f9"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "353434313939393734"_hex;
                s = "4bbb32574996c6f3d6766eb5bd4311dbb8fa88c08c56e46b91727c2a2707fc91c56a5d9f40bc44315544cd68e8e2cdc7f78d397839110b62f8c101df3128e99ec82d7e6db893cace143cc4e2c6e4e74f756a641ae420824e70d4cf44310508c5d9771f1b4559bb346a16440d8778abc011d265538688642615ea91b6abd8f967da926c1c79c7e83ed9ab4016141c223152c19bad0d6e0dfa9889c42e1fafed10c1f20729a0bbcc090020da1c036a58222ac8a4828461dcd0d9ed84e1779379f0145c5556d13f8f4772af2720c1561139668446a6dbef27d6d3d3c84b5ee10454d9051803d0008c038e58cb7df5d2b36ed1c769c1983dcb9533239ab805a0b08e434a60ca2838b7fb86ca9af8ca7a2799eb208c5af2548f9bd894eb3a537825af472844017cb92dbe788c12e32f5adae3cc2332468e2102a426a9ba642c026e27b2d46279a45ddd1a142bf6de120eee6ea52a5428a9666c7b3e931573d991f2b824feddf0827095c2c9be5ff14d029249d43fc6fe1d2ef1bb41eb8a8110d5508a0608090946c57b79a2df9c5184dd8c8df60399565db31e23532c67d4307b92350e49b93f9ecd61b32abfa94d4a6210c95e8130f8bf6197b9de277b26b8514b1d888bbe021478876dae36ecaeaefb9597fc602520a60ffc069711dda252eb6724a3cfd0a8b4c82df7070e7a24f6f9efcab494e4b9383eddb85bd1b3ad0ab0d7ea"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35383433343830333931"_hex;
                s = "894e93741d5ed145b7569fa6a8097bc7bf34bba86559cf68decf692512886fbf04f0b5dc9c4aab7a8506ad31b21b20502fec9224bf7d3d25fc6646bd610a2d525b457adc4c826c523a95f9777daeba3ffdb1329a8a741c5259a62852920af1b4d098330be1a8430f77b76ab971a5b1fa4cf886acd5e13666e894824dea14094b54a5ddd501065c543e391a2959580203eda0509400c5ac25dcb26a2d735c5cc3ed95adf911cebc145927f3d3ec230612a1d151e778ec7bcfdf19717f98366bbf3bfad468afd5eb36ce5c67cea5dc87521ef91cae1dcc8923d7f9567289e2142c53ad04be07c455ceeefd99568ef437d4bcae322a3ce5210ccb8a973dbe70028a6662430a18ef6715ce4c856ba20a6a02db33727a2dc0db11941dc52df1ede1dc22da859f3561dbb779d808d3174b8c40b676bd86572256c328de1525a01f89e9321f95ed09e024283d8c2f22cff20f7e6c564c50b21a5b8df19e1dc92f78547a4cd1257db5b4c187286420fc0e6160ea7c11fdadcaa3c4db723083c079e6f7c70bcee4eef19516d9fbdda4c77328932adbc99ff0604b7d3c92cafba3acb0d719da2403791199042aa6b58dfdd38424e7758912c6264a03b60124e8988d90504f9e4259f8b30bc07efeee492f4991297e79108a065c19e7d89b572a50cc54b08becd584d13adce94c3087f2726d0bfda5ccb47a31b3777ae6cacb31cb8af82b2b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "373138383932363239"_hex;
                s = "48231f95a233fa0178f86b688e5869c05876aa3f581765726738c22d370eaf36c657be95f055f950c1ea863ac71414c2c5c77fa0bd478dca5bd998b364a8d476b82f31efec1e95ec8f38307b55c7d2fc2bbc3ac636d86a83e77f997d6e993f9f5927d04872e20b00e64b29fc74945ef0087512fdb3f96e3a5b23226d6f2facb3143c9adfe4d0c3283419a542fd76c248900b263b09185b6b5a420b2f5a524e694f637f51465b17f9e153fb2b49acb84b0b3ffddfdea7986c759e813e960930721b2dcbf5a38296c0ad426b8072eae368e7e6d023db85fcd6fafe8da528d4acd091974a8a21e752caf6126ac5c0560ec17af073b9820eac5c768625b39c8ddce5b06255037d6f65839e19fa5c724e06e8ca2cffb24bbc54edfde45abefd14f70743b26da6a7a07cd8be39fa69bbd773db0eec5089d457544b089c84ccc80fe0b89a2bce3cb618591e9bc8ebf57ce141a13761722416896d97d6883637e0452039cdcc2f6d8bb39eae3755e38cf63b8684221f038e90d6901c0b1811168b1855d3e7993e1cfa54777ae5ebeaa0c1d28ab5633bc866c900b927ba0c3b203a9ce76d09f41885e04ebbee6f0fe17c10d8c391e94f5d85c6cc48eaec38828a788ac8d8f72ddeb4ea939f6b6bf5e1c264765d6bc574e572eda181a09bcec25952056f6c6900c74dab91ffdabd70fa57ce6019945e50989ab00cf8ea70a3f32e100464a5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31373433323233343433"_hex;
                s = "153dfd04e1fa8bf0545d981f26964a6753064f78441f8c917849e1dc9bd383db7146f2ab12c3cc1ae0f27fc042177dce86c24430097cb22d019293735b16b59457d30bc11231184bc04aed8ec5054aca1abbd818ca2faf74a8b987d9def187b113ea8b6038733867ad672934ce4a3f66689c8e0be8da8110520dc6727313c0d5cfb2c156fa95b0ac0cee5431e6f006c71da2a532cf5c1802d1b6950509132d9eec937dacc4a30bdd812d5dbd70e66a5e8b182bb907dc8eb467b937d750a74efc8c1987002e23ea1aef23f0f5c440cc70d4acc001a1448d8d1ce3ebacca325adfca5e2021fc923e9d3e2df2450ad785a2dad11732d165ed721c3eee1b492b376553e9a9274868154a39c5cfce93a49c5ccfde4ffcbb8472c7791269da382c018e6eb6c98c29a5780ee3232bd290617c05609e176b9e4061c2e924dc95e86f88141e7f5c07296a9a7372008df035e049968b225cf200253edd121ac2932eae0bcd817390afc7e862cf18c99c0f9d82b3a603f378be97d09c6a2dff5908b76ee33f7ecf4ef430289c7ac6e50577986946656368147ba5cf1e1f56dac5ea1b0d49f30c3fd19fd0440e86a1a0b212867cfb8b89d3566a97704d461d86049a847113f4767f8c0675f1fcdb061e2d2987976c3b01b058198f5c160ddceeab66f64afea8b03ad44c1ab03d75ccbb1f853c1793a06751d79e8acfdedf1eaa63ed64a04b8e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32343036303035393336"_hex;
                s = "131d1b59b001133d593f040250c19fcc40a3c91aca50a7ff76ac0ca1ac19514493b7b1981f0d7f516288dc9c425b8b8d85bfb4d49de6a0009850d6d383dd924420ef599dce94a23e6c665b675615144103f145281a043bde54835b8055b098703f6e2245687c9c87ec4ad2ebe2d3a84a1c254c4552941d9aa6f87df8f13b3a47a528be14f3f5b70911105fe190abd6882ed99a661d16d3ce4cd009a9113b0327c13cc6f46ce24fe06836cb24564819250df83acb257408c9899e9bf22f5cf34cb7f556539d67c92ff510522e74b3057a48b3bed388113c3316c9ca87c2a6694deaa8a49588ac0db7ac4d38f527c08bb71efbedb09eea030add2ed0569e4d905bdf18a59ff8359a72191835861fe8c6700064fbcb948fb7558e255de7162d8347c9d2e7008cc78deba4ca3f57a8853842eeaa12763e10b75bfc517d30cbdcf08b166797b88eee3004dcc4bfa831d7d4cf598822c49f3a15d115a9498a90c9a7182d8be574606fec463c95317932c6d15ed65c2dd37be933cf7271cf2d4c5713b2d2c55aa9d6c5c8b398de0a888ca706b590e77a9b484080f95400bc76cb615220a11b2c7e8e103ca5f40205d2a11bccf53ceec8c15058b8f89e8558fc596db6daf4d43703e6155b92c214ebec090eb051762e09d0c6f313ff119555cd8ab9dd7c0cd00f28c3afb70f93dc3c4ebfcea22905948bc12179493c6ba618591290fdde"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363134303336393838"_hex;
                s = "1c9069c4fa78e99878f0f4f339d37235f34ea69e01b4fe786535ae58ef7f7423b5a04edbd337e68d3c88783ea7ba9b1a976e0f8bd9b9b84e6cec82a2343176d972e245cf930f28f0cbbbfc2f06ba5f85cf4e87ce0d5a69efde730f2a065a6ad41cf234767fbe724b90bf2f6346beeec3b576395d2af128606a5e5ac8e85129fd97d74b04cf375fe72d3a04269b31cd61d897418f4759abf3afaed4d63c55632d0b7875cb8b79009b3a5e6673f1964bf9d26812103f4cc68bf5ad0660b58f4e8cad25a43001980928429241d75c2eb8c696c2c83848500a6bc009089bbbb4cfd725fc63e81f6c28fbb12f97dd6bac074d0fae11873a336199aaa373492b9f58385e6df3faa0f55cec5429cfe6519f4c91f57003e9f3c9b2fe9798419aa2ff6f11622f6d878f29737e9f1834bbb9f749d002705165035f72d87619cd21516c037c3f74a7f42b07b63c1b528813f2574b6bb53eed3a6b7349beef78a7776de0fed07edfdcea00ddb5987aa16dd89b666d6b601913e458eb011886af745742f204a8260a6feebcbfc5e5c32ced0b10d4b7d530911755613a0a6929c7b900bb6c38176b16089318a627180bc00f6fcb99a884fbacb061176c4f8d57c79b198f83d38f30faa976852baa85959821f393597294ec8dfdeb8a9af9beada8ab476422b29240cc2b5acbca89e504b149ad64113adbb7625a411f19d856299cf2bcac6603f6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32303935343235363835"_hex;
                s = "11a5ec09054c60a3bb3d9c1a0b7f5684923c56051d65b232602a797c930d948759b93799611c66dee93b9eabed472562960b77efe7e9c18f71d793b54065aad9420be6f46185fe8d1beaeb9393a10e3142bde575896f0f4b3d9723a73e4acb5a320a5eca239e309dcafbc30439589b90fac84552703a266b5085e0327ff9c21789a399a61b17c99125bf819d2c9d576e922bf67274bc3efaf266de3982a67d87f96280a31132838aa1fde3e795efb5b5ca25cee9b0098b8966509588782d1776df8c9a2892ad2a562067ade3b49829212420aeabc4dc57f3f07bad3af5b6ee20d58e8ba6fdea25bcbb8fec76b04a42b68ddf0d2f9aefb46e7509dea5a677daa603958ffb310587f348e4e245bf377459e9cf61454db50e7678a4fc560556fc25478679bd4f61053026b52f77c92343b4ca36e18bad2d8c2d82e646a3e4e1b17f5179e8ded99f2fca4a8de8e57d549665cfdba4b3c99a82fb944074b4c82a63fe461b944d6073b2ba458f5decadfb6b4e4f3244a9b8677f2f87f7f9fe5e5611a50d9b251023d566cf8fe5de3a44e17f4bc8c3ea41b0e0bd07d150420618c3852e307a7668504dcf922683132142d3e5b093e071088dffa533b78fd2ede4f65fd867b9ef68ccdec8bcc70795ecb6c4d21a4b8ca9aaedc3be878a91d1655fe83323a78ac62567ad701c2a966213dd15854847b82587d4cacbc0a64cfccd9bd2a7fa"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31303038303938393833"_hex;
                s = "ba48d2ba0f103782489a00db06fe7937c1f302197b05d4044474856dae4ade198850135af0df5456465d2b9f5acd7fa09c67a8992d4dd0b28bcc36dd34aa09f6b6e93e54e8d9cffef59bb41dead164f457515011c3f1e55f265431a7d14e87183fb698b3bbf17cff80b718d1cb8f3a8a3f380390fd1a0efcfca05f4623d816dd6be150ffec9176c922f24d18ad7120eb2b7ca868d28b1620fb3ea6b02705715239f3805d14317651073ebd557c6cb03255f3e64000ef85955d6483fe3cd359533e942dddd68858c09e9ae9cb93600387758dd846132ecb7ded6fba87e7c04f25512631b134a2c7742820aa83cb30eef72cbdfb0f39a43454f3002105d8d736031d6804e5cf73e8add3e44bedf056b0f80136eca003b52379973d5104c4281b3789ae2ad15b1fed4001b714bd2079580c6d2dd613a9e643bfc52d2402d206d6bfd8575b7ef7813f41000dc6434855c042728c6a59f9b24f6e4126c36b8be7d4d1fb965d916be905cd8821d01138a7a0186e4906850736d9ecc672f1307005080c2225b7cdabc80eb9ea6e1f3d055b2ea42688bc17dcaf6889fc653a4e6d491243d48eb2d82561a7212ff87e38de46f5c9754523fa62bb398dfa230c189e5d832efd9bc9a9453db24c19e4ec3283962cd7abe3755fd42676594b4a41a63d7e31427306ef7098a6f36db2c87c191f5702510cc80635bd3e0e29ee84709d06037dd3"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353734313437393237"_hex;
                s = "53e58416a003fa7d3100912eea39350bf03935e50333d0297a5f98311d32c641b7e80e08b3c0e1f5ffc36ffe9f66f88d7c093727f82e2f05c9287382d8d24219acd3b428576965a894a9e62faae11bf080c5e2c3a1d6f5b55d22203b2f642dd204bc05b18645d39bbfeb23081e9dfc9a383e7cbc5e930ae6a1eb0b665a5dbe4911f2c8508601902b6dd971cd3375184110e45418011a93399f43b2fbcc5a8d3c743f2616c9d4e5d0830d3814be957e07036c018739ca1bc324bc77ae7879c37f39469a6f3822da1cf7dc3878c7fe11e47d08854f3ced79c0fd2b32f914d8c82447a5503407770752894a36555e9686fb6ca7a58eb76f05589d229ada9256eff67ba71b46b98340aaf5cbc8add06859cb9129c23e850fdd8effc79b65a54c7d73b09461314154cdf04bb6acc8d5afe52d4d1fdef06257d3f0fda0934f4b95b62add3eea83af95907c0356add4da1cd0032f1c4727346ac4d58a7cb5239dec4eb83cebfdf86ec1d45e44a6bf8366d42883d73281758934421ce7cdffe9cce53518faac57a1e19c719c3dbc3f9b0bddf94de07e93ea84189a8525a1d00b4d68037bb0cc2fa9d093bd84a7561c640aaa62d7bc58b3e57a89909036e53eeb43f550eff3f05911abb1e4688bf4c9c5fe713935957d939de65ea25c2cc9760fc912c32aa36dee558dbc06b9ebd0cf65ce1c3cab522d76aa58310f2902c0276976f3bda0"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32383636373731353232"_hex;
                s = "c01749647b38bd30cee75bab01cb367dfaceb8969e952d6e41d5e4e6d600c54a49575737b71c2f3c748f0b8218bd5eacacb9e7b1466eb350c743cfe2534cc0558d24e936fbec1484a3fd4ad2ba1e8e2496495f8d05de0c34663be6ba5ff9543ab0404a6b49b6466b30c2ec0442e42a5b116b5ba29006accbb53a44ae207bd5ca42cfc01d73139c8c110ffbb0c0e8ec9852943ba93e60f4dad743c8aec62ee64b9ba5ef5c033b319cc2b5901f59575253df2e0f47b50f92b0055fad2f7a2c52317a6a2b0b9fb38e2f01b6a6aee0d8e392ebd7cee81787bba4f9bee12d8469a17515b5048c56a27892763d663e1396b6a5b7527c2b73c76bea64d83dfb374d2ad16547fc87b95f4a5b64d6b1012896594efe53448ed5909a0708ccccc447f56dee5d98b942e177c37267c24c4dd4a41a8e4e822df7ebb89c7d124036c1159854767869913d278db3f4ad23611369379e46d740aaec122fa40695569a61f148c73e0d6964dbe94cdeacc6d2476381a77caa0449debd976205780b3f4a6c035811676878ff080cb0b673fe54ca5fa84f1f28cdd2952dffd050aa64a82616018b969ed974c6ec1eeeda4b16a5976d9576922abee6aadf4ab782761d0ac83d8a2580c49fcd28fc178fea061e126afadca56cf7e760853a8f6abfffb554e0bcacb3962b6d02551cb45f00ac23b7b9e97f1903f21a85a6f3b5021444f3d29d6a528370fe"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363934323830373837"_hex;
                s = "2435c755dd9abf5c9cd60f0f1f2dc283900168449cd1476f4820196533cb6e84991541083aff8d067662c4c0ea072b1637c85ff62be62754ac34f9861e98a80f738fc4cf6c77cf3797cd72108a3849f67d04b0ad43a13010d5c6496e03136a52f3c66a5ac16aee9c166f20deadd448e2427b304e7cdc666dedc6fed79edf99b337222914c6cec80ba5a9c33adad5e6d344a4800e1671d6c2259bd0e607210df6bd2302aaa2b3e1f2a2cca3458726671dd2240b664b5742fc603c6058898451905fd2298f60f7a2eebf15aa0c740409676f42950f38cf1d708a3064086e22054a439f35740d48b08faa8ba8ce33ab30c36cfc22d058b3fcd00b7af502f29ccdfaff00113e08c33a7a01315a114fbd6fbde05ba2d2dd12c2cf7331f0c5b342683854c28d6844fad2f4841388fa2d6542b60002383f0a0c907cdf05e165629dd8dde6a00750ea3b04d1172cebbc583a0ebc1ff5e10d64113b40ec55b979099db43aa801b3f1a2bd692db50a27a2dd9eeb9c7ab8a07ea4a4a43363a87ad98ca3f7a9756cd66aec6662ddcd0f34b32131ea282aa13fe9f2eb526644dbe3f170f2135c8e660299f5f239258171221e4ca371c0d2d1c1324c92f792a3969b1aa634b9327c7be8c3d7fae6a0b9569c006fec1ab1825a046e7c64ed745d6166f7144e13ebc7b1356efe0fd0aa17eaad1df98c0c85b5729bcb743fadc0e0f8e18e85daeed6"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "39393231363932353638"_hex;
                s = "3e6e9fca53bd3ce8c068c8076b1ee32799ad2ec15cc9d6c0552164929c1f4d18421061fced2b8e555f974675bae75f9cdafd1e679ff0f344ec72f2041f6fd4c2f7bc9d5fce33562e6d4a8cf906e84f8f2c75dfe006cfa45d547e5b75bbb1c7934e1130896c3a89a6fe44286488b292d2af478e17353321729bae48402a6d80d375a74326598dd677ea9e5b49983783ca4995b67d0541271f9c07f76e4f9e99a786f2cabfb38d8bcb1d8491a14ca862cfc23c1b9533881c7637538d5b25d3d8446388c7ca42997938964cf91a31ce95125926a32ef54bc7cfc625ba41d8c3b3751100b5c5a5e33c4da0e246771098c38f745683dbcfb7fe355fdd4036b60ce9dda0dd570e88d96e168c48df750ccdd866fef98535d0687cc4c5099d6a4533b168bdd3361c9b53a0538df0b558d5e81d451d5bfad5b9452b30242ab46db1412370341756744651136467abcd4be1d6653e6cb4318f50cafacb486bbf41441de8fd3966f1c633b49ac396b14d11b0863dd1458d92bf6adf61f7682c13175e518001f74e46cfb710a2bcfd2a9c2ff7e588ccadb0ab404d9614a4035ddb0a5ded64cc4dc212772a9c6d825d5aab6ae9d198e0660756c6bb93afa263438f7834c0ff8e80561e30f8ba7ccfaf871c85f4a0792359dee31706ca5a0cc4580a5038d8cfbea2c6fcc9925af79646d3af5cf7801b6b2a56dc720d9febeaa1709f6dcb96d2e4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131363039343339373938"_hex;
                s = "4ff50465b1a84fb01e75a0d9998dba4db9eeca6e448c378cf78a4d2db287f3913696078e35041b535c658dfe48eb85c9f75a1c816d2326876329bdb3e071031906faa958bd3560d3ef702efe9584f09e8152454e04f9ed8e1be6c5616053088e1cee2990f1d20cd9791875186eb3bde2d9df3efdd83745c3849ce96a0c7546342e537d8bb68bcfff54367a9ee1f2d8c615d18cd6d5759531b496f7d9d0216146d1da1c058c31c7db24a356cf721f6525a8a09bfb3037d2e57f1daec00134f0162eca6af7912d30c744ca49a2d2afff75ce83121fc2135698c743093280e43d046b54fdd736bce6679ac4e0e25007fbd5894227d0a63b81629be33a170b9fd623590daffc9872de85f26a7b432c82862c2d3646d9816193531886f933491df2814863eab1020f5d25265c262b9bcb305f07308c96b452b5acd4f827dc16f276d93efdc38be8cf35374301e41eade05286e220b7389aa89d8f05e8cb5053bd0de1ed471079192f01fa2a452183e59d4015316e304d647a562b7e876479777387bdbb599d20ff34050911bf98cf1e5c3702c1e5a37729b56f2df092b7dc345c66466a4495c4b1269dfbccb2bd03e95f9d71a957af450b22c5aa7ab0b09c05e1e65c031bb6cac42bdbd97a87cf68f209b953fa50108220d26cab0edfebdfff9639d1b7e05dc7a87680fbf4349fed5b614fb2cd04dc678ad59911e2e9e4bf0200c041"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37313836313632313030"_hex;
                s = "ad7228b2b70d5a0867ec9ac6776a0952530afefe7b2aaa259513128473f13bbc2c7808c6639d4db8f0e3de2f352323d703d21ac763a4b7c67dd8dc0edac6806d0eb3b719194e99b5f3b6a2cee7af44698df1c3a169a53891bf0db07de341e90db37756bbf400c63955b6dd5d11607224ced9db410e3fe56de071bb8784dac75881de47344f7d09afae728948835c99bf258359a0d2068a2c544cbeb9c6ab6fc4d3e825374135fd715ac8a21077674a00b3f39199818b354b69d0ee13739ca910ca06fa1a18c57b31846e776bd163a3a1bf11c8339d6d5394a29e85bf1cf251f1bb30274c321609511367bc549945877904a86bc8105fc10caf945e68ff08c5add3d11f042636b6d0c3b3cf6a34c1a734d87a3aa6d3c0b2a7be8dc612b079c845166fd970bb492f6db17947217b2c552dae14ffc91791d70a17778448764ecfc11833964f42da680f63b14f4c75048f6c15f9417545b99f7300c2af255205d7d695ee2b79ac03076afa7b316955c093b9c403153f7fe429f9c69e0e590a24c4b39f2856762db203073c6932934d6bfa0110344c09cd17726f8c2ddc3f7678b3ce55c798e6b8f964aef5b6943456eeffd8540895e01485a700d5f781aee6b1175a0275782245b73e11dcd0e7a0f504eb9297f29032d3850f9927e5437bb65af0c331df33b01ec1f720602e130f0dab0e12e8922d00cb968f1646cb986b080fb80c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33323934333437313737"_hex;
                s = "8f4b1684e04a3566f85a536278d644ee1a165975133c48149c6c3dff3dcfc5b24b9c79f0132631fdbe098441c8c1250b2ebff96bcc913e11ce1ba1edf7c2a6f386dee47fc71bdaaefef50cd6e2e6d37321c5d2a0e653e89f4e574e72c32ffa25de6254019c9f44db899bef75933f0dc22c635936cae031b7a20a64a80b496e8f6c70bfb5811fba86c696ba457b5c6b2b9b622dd718027ea0565e312117ee4a980b819db637865683a91fc9aac6f64897a17515ef392e99d44c62856898f3da4ac49617b75c5f8a9f58ebc318e2309414fc3f2017435094b968ca4e582ccb269e8e3a94665b1cf172d197bfdf407a91be177b8a1946009ddbf86ddc260a4605f500df614496e84fb7ab9c1fd3039d31a3a8c7459110fbdd3dbd5161269e9d607a85433e4e5e3c70ce8ea9315adc57c966c8b55ef9ab779f654518d9749247acdff35bd31b365249ff5e4c7a2a8c69de945fcaa87bc893a7c814687dacbc6a4851e34325fa8f325d32ff2808ac993fe71c30e9a6f9525ff881e915537f704516d4978f5b12c77e0746b03a6a50e4fc2e5848d85e8fe3aa155394302985801b8c0edc89b066a8b683d7f1224c17b207a424e710ad4e6f5c0ed6ab20f67d493019d24fc6355bd48714aeb89f286b56d62bdcf99a3d6e251aaa6f1638cfe9b1f996e99f2a0f372e43d98b64a331d0ca57fb71a61a7b325cd2926915e398c000438955"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3138353134343535313230"_hex;
                s = "508927b927009f6badfc5b65659d21a4069e147f279a86db81760208fe2c70c6654ec4926b6c3a419ac2b2e9e5dd091452e04bae8620db4adc864a36a00171302ee4349c9239bcdc7405e6d5667a357f9642422eb3a69c4601dfb79969ad00ee121110471210446cc1a8351b51c5b27b2d1ff6a4eb9ebb50f100efeeb4f821f61e5519f3540bab19865197eccea44acccbc612a6685ae86f0d75c240884e7bd6dd2a263123715563d099e44cd95ebe8e667f8b779ccdead25328b83869a5506fc4ff3b70963cbe636e94cd446c952a3751b39f3791ece994b0689910df57a685d8f98d72dcea5b91ac276e80448d19c8388af4993be73cf0a42ce55396511d91e201c17bcc5c2839e5f654f9b731caf87041df2db64a0bc61b9fed4c1f822b4bd6ea5ec176071225359fe5738e740496987ea5297407dbbfe9bf141a7aa76da404c0a90304e7c4feca2fe91d942f06716fe199bc225c1489752c9405ec6ba06814dfa9764d9573a40f925cd839f8be5238abce353de2bc6db23c9e82a0f5a7768dfeac83664317c8e509787eaf64a291453b544a6647958c70d6f0de69aed8f97e2db5fa8d5b7285cfbbce8d11800708ec3cf632917752d3b98a35c9ec233a9f8c45eacfdf4a1e47c9dc5b04dcaa65ebb9c98207cf5e9b1f7f25ba807231a6e05b91dbdbd9bda785fa2b213098659db71b065cbaa721ca151f61a30989792e95"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "343736303433393330"_hex;
                s = "07461915843d98a604e78b1c207e10d8932d1c16523aab5f37495d321002587b191157217ce6f5f7e8a494335bb7c609e37eab4d626c292a44e313864e451b81fc229a36be1954bb7a29faeacda1f3a08bc8589ca4cf3fd81493e93f5241df7df7a93376cde0e5aec0bd725eb2e84b5aa87ebb0ee782490fc7cdd4fa585363bbda23c13d8b86c05fc492e3e47c2739fc00d11f58c72d67db7aa058a43f1bc02320c062b9a846bf4715730dc7156bab9b58a33102f507b571e568e4967cb701528e92efb2bde3342bcdf32f16113fcd6a27d8859a81cdd53e231af0fd731778d0c09a915e5386aa07b204002b6d13ba340c32fe95b2359b48b1d2bc8a0daa70a3b10793abb35b093e43db0fadf4c9fa2c41907299185161ab2ef9f2808f599f2f9a7c869cdc151e73063c4fc2c9265da981bbee09b8ef6120999559ccc859d4a70498c866072a16f86cb80a5db9898c79e82c146fc3eb7cf38bd47329ea21916d25ccf88a706be9b461db6a3b187ba052e063282fe22aa3d22d9112eeb165c023d166a1f79f9986d35aa3bf2a36985dd11b854cd09fcaa8f85af4596486c1734082a0a48b85f4b07c84b6f879c6faf3068427f0cd56b730a09407b4bb55a46f8abb162d6cfd9d92d92548f184827302b6dffe985e2e8a0196d445b554084ac9d848f4c7a785af618aa46eddcfcfd59a447e1953f5ef8b88c4097186c47b2a680a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32353637333738373431"_hex;
                s = "42fe0bd5f3283f3b07e9ad6fb6d8f1b3b601c1572abb09e63c1b368c31528b32452152fec1d1843095d95a92ae621af8902d094e8c9f1119a3febbc789840c14ab145771904b079c0ada38aa299061cc515fa1916d91a61274c65c77451068d308282f5b33bdf200da2f59047b178975d90eca8ba259858643966b9484d00afcd88d244f0c499843558bbf55f05afa3877229e8b5ef8996a9dcbf2def7e90b8f2dbc75b530024ceed64e95958832fd042140badf951f38c6948d6bb7c8998b43df191eae8f4c1e8e8be21892e8ffe25f5813857f7dd7baeab3ea0aec461da68cce303d8fd23c64594696322a864e0e52df6392cbae2bdfaf33fd3b3712242dd0aed4a979978c6ded9d0d3a263ca2aab6e05764c41c2ae11932bb056404d9503792a593630f442a753c4684d38c136e8d895f53c4800729d49c7a24f9ebf7df6c64f311338cd6ecf54feb74485eecb6fbb902173763f3510698cb01446cf1f202535501327ae3fb0f12d62fd5e22f134a70e6e14c4ecd50ab21e4f01e0b580309a3f786c29a8e9198373185406218ddabf16bd7131957c4eaafa6a2a2c4f600e7b8fe9d4e92a83277a1aeed12f883602d2110a21aecc5e8881bf6ff8f3d632c1403e256a19abd001ca1f0fd56f0119905e70078d34fba95e970a63d0835d727f29254b4698d34e4396b5d036f5119ff737ddced2e78886d633408c961a630dcd1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35373339393334393935"_hex;
                s = "0cb592d3de19b3fa9bac51baed8d8647b5ba18ed98c9a2574387313af52590c7b5fc8503971a08884cf6dc6de30bb53e0bb4da258bad852450ea2784a0335d8c1dffa2c3b5e6e3f91099f2af565a7d07b1450fc7ec4a200e181ee91588956e98c363ed3795f47771daec05411350246e9f565081192ddf50ddf9fb76edd64a251dca7c8ef23d9b0d4d062b21c0d75fafde24662773a9c159e18ce4ce0f6edbf79ae95c9586f7c23810af643e8d6871e84d6b6a228e5afb6a6522ca84acb0059b5e654be63cedb2e16891570c90edb516865cbe210cc1e48eabb6d8fda409a4d52c86df45c2b5f738787f423e4ca2653ae9c68632eceb469f472dc7140a4418959632b99c3020bf235a1c305accd6da3053b35eb0a942fe958cc2ce7b36cafcb55217eed9de361b7d5e5b8bd8188d99c3edf908a58b09562a621355cd3c819aa4bfdb562227fc15a2102040730cba99566db8c405d0f3cb48c9f33865ef1dcf2b1c91cf0cd92b515009470a59b7771bb60bccf3e585cef5cdd2e6919e8f3b65dc25e9c323bd39167f3d4d012acb7469bda9d14b31a888177c27a369e3209150a418144108eb72692533de561fea176546e85f95dfbb221f346a02dde6b3967a0ff8449fcf83f9be2d8c45860ec4da21501cd167260299334af4b50938fba8b9e67937d7432e5b577a581bb02bb85cd88ec27121670dd2037d76a25be1b43723be"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33343738333636313339"_hex;
                s = "5e2db6b9297e7ef8c0a22686f441585394c12c73aa96a98c29803c030c4fe32de110aabd8009611b9dca36e4daba5f45083778b7b317052821aefb0a16bef9a263bbec7191fbfe58a2a338b1ec6f2c602e1fadda7390e8cd63d1d68368948c1095fc21649c0c4e13b8c3de53193e337db92e4c63078320e1a2351f3904fdbb6e3c57f5428ab4c19f6ee91fa6c46a4d2019804d2ad65946ebaa2871f635963fd4bfcf8d1072c3dd4aaa013ba7283f6751044c0ae565efc9d4d5bf2ad7cbb49c89d8a3a6c08785c5381d69751d05059bacbbc4e14e46f38f9f0e3d7a8f911e3b284919f0738ecb385f4de2e873bb18eac3c31d6332afd39c4b891da4aaed195ae56733f765370141e6d4aecaa5ac4f46364506f980e9873460b61847df8562c200d0f30a2e1dc45585ba8efb838a4a266c198f7b1e31905d662292ac6ba9c028011fcc6150046c0045cb5b7fa334bdc0a6c26299abc7362622d32b3afeafe514c3a70ac06ed3e9e1fe0ad7253aa7ffb513be6e0efb90d4d7d87f94ce70db838b476531cc2090fa164684fbd70ed3cf5c40c8d7c3c35bb467332412503be09a5692aeda0a61e170d4b86ab6bf7f05177cf0c436b6c7dd035279506b1604657ba803784e3dae7b096f3a8c116ccd18481cee0dc1706aca5c48110f266efeec0bea3b8063b22b0808adf600260c40f4c0063f5b71991823f935b11420ea40fc507e43"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "363439303532363032"_hex;
                s = "9d21488fce938964c3dc1982ec5925600f23e938b3ca7124c19bd356b11f83c982fcac916240fe429f97e6a3ce2f4d65f778809666ffa345ed36b0062b439355256e5ac76d38c0fac3af8b42c1ce2ed769695dbe4f17290e8b6085e4925c5e1e277e8ccb5b48e80d9c8e2b86eb4323c45242f06f641123d437961fdd140149aea850657bec8fd3f9cdc647c39f63465e8375ee5240d0f05ae943115585cb8924194098f6b0af6179c38323dc899e3374e402fc712c95e74de44ff52727d03a255c05b996020f3127c0ba62474c9ca6778c9569e3b464704f577b3dca779ded42e059c89913e837b7430fea85aa2fe8f2e0a788ff7d75df070f8690de0a45bcff7c92e7eb6c4e77dfa82ff2095c81593f8c5c0f56f182ccc210154c8fa7d7ba03781fe1ac02b495d4888cc2962b45008d297e0ed2f05e265936c128217c673191389f6663c7413de5487643bf50d03c7cfca62013f05b54da9fa2c6bf49c7b5d503f07ad8e39cc846940833b37894c49e89f10d0531d491c8681b25f1f73f0a4d7676872bc7f72e809604a6e64e4a67fcc3a73444f8ccc1783f144e4f1e8ab99954d211e23870b131efcb41554542df2af6973b6cdfe9c55297e80eae91ab9ffa02e910023c6a1b4ab635ff84276c415fd48f338129f350484d6b7c7eaeba488b731e0089ad9a2d1e1a83419b2214d84b55e08836e31201d1cda665671314877e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34373633383837343936"_hex;
                s = "268e9a6177043931bc09e7aea8da7e475ac64501fc6af29029e422d71598a068e0c39f378446e728d666680401adef4a61ce5e21f4c9584b966ae038d825f91f1c726e951c551112e46ad6dd77c28ee9e972b7644aa93554bbc50054eeef8c331d77f062a23018ff44ab668c5ab2dd451d80bdda0689e240b8529a04219e178a848cc9286fff2c598a20a81c990187faf8e8c2775e453e90b0fbb0bf7a49b26dba72ba9565c558f104d5c4279fbc92ff443397eb88b4e21f03ac835e18828eb2a7f11d1f32b2b4bb79fd4317ee50fd1d99d5be80f3919ddcd56bb6eb4ec51747ab73a0d537dc5dd9865ee46264a460349ea7b5c0c4fbc9bf0efc988f2ab5b071cb85420e475d5a9304575e016b69d232dc91f8a02790ff9a960843860e4c9ca79800aaa4be456ab6e466571cf4b729a999bc6527c95a12e9aa70168efab537a36d66c00ff5987e29039f5a8a569369ff8aa81c459bc1f549ceea250f55957adfdc78262350aba6e5aac11e150212facada142a76cd1998daa761aefb963e017a91e950464e01137e769c69348460efdf7a0628fdb43dd3cbbe592946fd940438b029349202e5cf07a02fbb0125c0227b9faa8e083eaa6bc7692bfc1021730c03bf3bd228d6de58fc8f6423c05a8abf21e68b726071709289e6a3ffa03ea892d6e16d5cb65a3af93dfeca837bf5bcd454192e31b3a000d8516fdec86e4b010416"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "353739303230303830"_hex;
                s = "75347ec220190c82e6e76f780e1e5d6a0e206a210a6880e28444a08362d49acefdcec81e9aafd760c33f9a2f3464daf17e470fe7314027432f63df8690bdc1d5df0167d90ffae7e1be36f67365b82224540b4edff0ba5adfbefe9a71646fd3a3e67ef916a4a770c9acc7d7dc2b95b38dea8df8fdd0d296dfa581600e438cff7715a519e1292707f7a9a1c6f4022c9a82cb7d18ba00cf2bc031acd8c8bc9d67517e5bc71cbc00087a6ac1576d37f526cc23a5443664b67c830d0ddaa702bb1df568dde1d846bf2188f48648e2a33fd094c6ed5ffbe2c28e06477dece02b6337028c0705001dd32865eb3a4c9700dc36e0bece4f421e7d270b616d47ceddf6d273aceaf62a6a87f68f4050c2baecdab418989f37c6e378a0539f3996e53cb6107e0f8cb6316b06cc8efd96764d0b5b55c8a70b93d75f8ee62a0f0b8d3f0403bbdbeaba4010194e6a6a6bb26708b10b41a618d766f2defde7b8dfb7db333aab4be130bc3bb02f33fc438de3a26604cf6e19889de7cce52ba4fe7de6ac093e4e1d145e680b790c452930f5022ec58ae7c9084afb93d34e19be6afdd04b91fd9f25353f0a206990ccc2aa97a2c991236a58eed23b6cc4b45647e0bc42af22ec0919525f9e9ba87d2bfbc87b0e521c929f481d8e6231adbfb3c77c5662235aad5c85859e78d4d91d9b2b80f1fb1bd6b621407b5e46f744973a8ac104db67742709cecb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "35333434373837383438"_hex;
                s = "bd4a2bc1709e723e82899a8af3694b6e21eabbd27d020e32f6b7573b805cc3d6352d6880332c67f652507a1ad85437abd3b08e7de81ac1ae5a37806cb59104cb00831e852a4ea56615c78e3d7731de68029926806127248f0ccd898e84a1d525e03c0a070b62349dd5005a472bf45eaaa6b2af1df503a0d31a6817b5e41ec6187b866792c0038ead93100b560436856282b1183623c69031dd18ea53c26b957bd1db3d24377503f0559ff6617436467cfcb687e4fe625e0ece91fea8f7527de2646c5d7b1a6344ff46bdaaf4b80ba2af39907a52c4c4a0778cea2bbd9836b87e24a1770b0d17b09d9a8ba2671603104c9d9a1122b16913b308ee6de0700eef7d95ea41e038d7af222f5a8cdcc19afc84a0b546fab7940102e677d93f5ce9dd6020a2fef67e84d0a6c07ca7ecc122744bf03ef35104f218a0134cd0f300a7ebd8e4023891c1f7ed1147585a4693fc0a1628c3f09f2467dd2e8400aa98384e4bbf49e395cc2a93486eef047498b53ca6b3b863c7b20830f5ed19f31020c39ffb7aefa44aad34f182816044d040ddbf291125eb295c3cfaa4c03fe8188fa02f86dff67dd028ea55a9c456212f293ec255340f70a0d2363118fb0df2486234430801c5449be35b285d69f95248c58cfb9f60243d22deb0a47b8cf10d4bae93eed2af59ff473e93b35430522bb1aaff74f56f1447ac74e3acccbd4af0da37bc2f5263"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3139323636343130393230"_hex;
                s = "0b71cca8baa3f4d9d6969a7d4b76bb05a08b358d185d6e920ead7768a06cdbc9fceb714d782201ec97389d9fb599fa25594540966e008d9bbc36031bd782fb8dcfd01128abbcc5efe25ad4ad7706d78ea56611c91527a9b975a5e06b8a6c40588ee156b7cf82e6b92b20d9bb23e5af5f833213a48def1e3a5c8586c8bd8c514fdc6302c7d4c2c989f8bef19fdd3b2fbb0a7b542c4d0c4458e1e6b4ffa82870a7b830b43826efdcf36ab744f698b41a39b71692abc07f7d62bfdd6ffdfa0e4e56af1adee7c162e64527554cecfa990e33a6f280635c371b65915a07103b36cfb129a3e274bd30e6baf9b88063d396821aefaf8afc4dc40c3fc761aeb08bfd31ddc0abf380130d7e0b6b61c4072acb8f91401772b8f77054968d1cb56437176513bbeb071ca1d03a50c7a38e81fb80c0cdf032da2b84d36b27262d5490a2ccbd6835f8d91783b56354c7a7da67f4e121588bf5648e2d7db81028919ad3278959fe0ce46885a255dda2047a877a8e723775ef1647ec27a024cd8efbcab12145f4ce9f9722a5525adda36eba77a470c147e23c8499c38dea7d103c3d67b5522653be621e6fef5bcecc5964a264e7384ad9b7c1892052deed391a97af0721a47969ac2d04f00ce2b3f2b1adc6e32c61870ccf99c6a1f61b616ce8cad37700c00c944d3cb53815f5a56ef9834ff5348ee8c001fd64ae8856f8f33c79dd0178095aa740"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33373033393135373035"_hex;
                s = "1c6582020b428d7e0334022cbe5246ff3ae89c9ca92c25d6c42da5b9f401602627485ffed19ac5576506ebb029bf0da286af484b547e2b083db8a32f459f0812bed19351d03a96775973af9ec21ffe99d549f0e12015049b5d3a753bddf97e529d2c9b0045d4f615863c7fd84a84337921050c5dc8e4764bb04db85d4b46acd36a3ab118bf72974f60e541d92695ca1e451041d4ebf3df701f01a9549cc136785a16ef39467e5c14e01318864a357f9ff72b20200da6439b0b202811aa01623deee2233145bc5b04c2c85dc09c283ac0ac9e4e7fc9c81dfaa1531e71cf17a9b2e93b6fd7a41abe93c96c0b6dda18b21242a54993343cff1a1ab739ab8c758731efff9636bb21609d33300ac711c4b533ad9198bdab9b745bf38e26ce04364a3aabfbcb1f571253defae421f261bb81cd49861e452f9fa2e0f19ff2b778724754a93f27b7dbcffa7d7953f84db161b0c4b859f60285d44edcbdc394f80ed4065b951ae2e1f7677608bf0bce5d952320f30da1e1fbff03338d2bf723b5e0dcf5127f2a7a7c831d4b061989cae01ca9c43ff6108531f113b9ad0d50e13e592b2e89ce002175119be9f07c1ce5ace58b0a931e36994a5acf03936d8859289986b8c5caeee47f4cc888c73744cd3328cc53195401ab118bbec04d37f841082ff87d781544bb6c62cc6d67a724bd3fb9b3cd9403032b895d17602494e66cb6e4dc442d"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3831353435373730"_hex;
                s = "16b3bc6649ee9e939bd7821ffc48cf407b6e946a7c2820fee37e69aa154872ca7570f40595c1bdad39fe3bae15b6f93e34f0021d87ddea8d55059c30ab91e59b976acb4af9b1d0860621e302f7f47b44a38f31391a259cc8ba35d771d913b92641d8b300144f492a1ed6b36c2e5f96460999c84b37a3c855a970eaec0b7c1180630932bb98c0f5249d2447f70c5b63a2c5a6b36d8598b76b28f6fc25ef60b9e79028b1fe6da10504272328d2602d6c0fab8cbfca4fd66d1bf94bb731b8534db2fda04646161c2ddc2ef017b5a739e3e277e41a9e086b7692c394c2e0513ad6124e26a784c3849eb39e8253b3f36d53b97311787597337de597efbbce794ec84f6f09feec2b879dfbd1c1a43d4cb972f219fd088a7db8afc008cf6e058eedc05590a39e981d051daff1fa7d9ddcbc1d2b6fdc4bb0c9851fc97e285a7b109601205e7dddb8145949806d8ef8e0f6279f9d31e7a493901c839bfa526ae4dba08d1cb819fade281155c64ba90fdec672d1bf1d0844bb684b19cb5fc11e6e23ae2205ac29e02caeff7a4288e0c81ab54cf5a99f00650585c36d665ee10147201af17809e7a789baaace44b51ba991ea0e3b851645ea047273ded53950e7138cfcd0100e4449134de268ede0b5ab4aeeb81d78d24c08842e1fdc69ab8566fbc8f6ae898d7276307fd5b42ecf529baf9f0ab296eb6e4a4cd032aca22258697739e6af81"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313935353330333737"_hex;
                s = "0e521c0a20fafd341be64e4cedc45987ada9fd777395fbd3fd08d504192f10845a9be4c38e695e03136d2fc9ae94ec6a31d2a48c0af71ec9b6cd1661f258418df61e6f92eabf59dab43d2a0ceafdd40f319d91340946e35d8092c6dd17af4a72d0be721aa3b10eb10c6322f9c4330ccda906249740da6deb0b4c2186a13ba1e3ec6c55f36706c31625a831f9dd1e43914e4fb5f8a5f8235c56ea107f61308104f8fbff0718874c2db508115c630156ea5fbdecdadba4f29043dfd6cabbb69858cf9ec6c86b808956c4639b921aaa7c50e2886b4abff4070958d0e50aaac4ed73e95aaab5288031b7fd34d116c0f30775e32d99caa2fa8b345f722ebd0c77651fb972b21750174e2cbe6e886d5a936989b6cf732f3400a4eb96a1d2e8f16c4711bd4ce01d951e225a226313dd5833dc57ba86a3303613d0198d6d4c808591063ca837c517f00b35ca75ad53f9c03369f298244b7b66a1ce7033636d6a52a1191fdbf857a92629c0c807653ab0fc41d6826ffbf3bcd7089219d5c43276650e10d40227023e4397d7281beb2e903dfd245c46b49a87a01d1b61168b8b7ab43abba986a033d768678838107eca2e5f8f2f82d5b265b25c224190a1e251453a92ef46ed9b94b0996d451577b861bc7eb012171eab8593d088344b94b6782d97ffb91e9548b19bc74b063a5c4dea322ed30cdb9d260db735102d39832ce910b96bd189"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31323637383130393033"_hex;
                s = "b82f980d01c4838b0ddc3abff3de44ead593305a56d8b3ecfed9667a1f0899ec14cf3f8d25ecab6b1616fd9c8add9ce1e3d1c7278dcfe31b6eb85619081e879c1273ba614f311c061016d07379818363acacc7c881f50d70a83c5872d64d021c7ef5318e50a8842d5be73d65099bd205813e6b13542370d8d1c82b11794539531cbd71e1a8b7b52f544edebdc8cb6e1ddbccfb0351c07d23c0e19d505e64c1c2909168dfa16e27d340968ca083f984a735059b56bb49bfdc7e249567b5ea02e72532a73b55d9667c803e8bb6c0f72e0df03890273ad540f70dd585fcc288f416140444c13e1543eb66dec4e95881ca51e7d2d819011eaef76e44edb938be1243bc6842fc3b6cbda15bbd81106e42c865a4438162e1e6259585e10b283ea2c974c9c4493e0762eb0319d5609c6b139647e81edf088b65f9bb54e8bd6e5d4c63bd3cece99504fc5549be72801d2dfe826d27e48fa2d02ca1e4088af234dde529ccb3d4fe07d3a9de4abf539741674155425786d279174aea6238f4d8aa6d671e1ac8a51a05668b075d7b25cf715731033eef779ce61c71406b3f1bb33a9f52eeaf26bb76b88d34d93f6d54716451e898f35ad53e99254280da0a4a3c95c1a054f1e3a971510dc464bf9a5407e6b817ffe12482992bb72181fd7d3585cb8e3a390fd1ee7068ccbaf90999a55d82576b54e77751b40de29ca87c2f4d5fc7291ca8b7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131313830373230383135"_hex;
                s = "a92dc753a8a3027b8800203e725267529b0e46e5aef5dabd2661d2f1d4f8331817f40a578e0965955c897a6c43d6a09a45f0e569a26838d9a6b04576c39b017367e47972f63882ef3b703dfdddf862c326065994c7506dca4d4bc53db804390a83dc63ed64510cc2ac4d2bf43a45269b7072710979e0994d3aa6672b2330aded0518c4c1bbb4fc4c7844703ec45ddf68a031b386fc80402c675cc87d78cf12e87ac291bf6f49a22616c6b866135405771df1c4313c592745dafc274fcad9882d515a07dc3bb60795787f485bd0ef9a88b77554684abb868641aa5717921122ed500f7a61ba9505411acc863ef3e63fb184585d41ddb33a541a0652d90c1252397cdde0750d44b5037263a0a8e1db4f4642297ebfc9d7576bf0359718b16e7c349236857ceef45537220d6d0f0d12c56b578900ee85fcac3f07a14ac0b3372e7c7bff7f8815cb92d1ab7a064c4c740bf7481e7cb38285f7b51c8755b876503e7708f760a48ba7faa78d84d661e3d8c3b696ac51cef34a8229e69c823406f02c08e75a831a3c613177261ade9547c35724ab2f9ba2c7658dc672dcf0cb036622c0710cff5c8511669c89db1b87aec69254e24602acbefa84335cfeabda4908bc5ff975b9aadd6b1552e4f158637cbfdbd4280430e840f6839b090afbe2c18d8c3cb576997fec472e87c823d61ffa4dd8ddec2ad03894adeda28dea664f2f61b264"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "38333831383639323930"_hex;
                s = "80d981e74bf8d1e4a65db6094a4cd38c55472c2a2773475b2fff46259659c680f8581462bbd73422399438179b1aff61188fadd03c04dab70c57471283d7ed45cf35709111fd1f1db2b437a8ebe634059947fabbf42bff939105896066fb06845517b103d8fdcc2d1a8d11e276cfd5eb85f4d7718747d8f651bf574d55869cbe81dac21cbd995c3f86fef3eb0a98203980d77f3b3565640de51f1d94111b16be864efc4bb1c6f4f092eb2ed06bb38ef8627afe14bd575f70a12da50a7e6903a214d2c335cedc20301fd23cd1ac5e4c0d632361d443fad85cdca107196ad2963f259104eec4170867fddacd24a568e28add2148116bf316be52485e2b8eb13c028554f352781537651b5548d3c44242d35326ff465834505b8a4adb1187f65c8213779ac1d58ce90bba4d035d36e703230dacdbadc9e1901079ab1c44fc52a9a5ca07cbce77dbee11fbd41e5a2bf86b84db05a369ae772da010b57130a9a844f902a361512feba2a637f6f85e80fd584a9a8b54d76143ad617c98d3bfdc281f2696b65f9e5fe8268717d3c1b0157bdfd1b11db9195904f3185b4e28f7f941425a3068618012ebe9ed0d13401f89709ee6009cf21593ba998af83fa93a4f0eb462ade0c408e3ea08ab638b7e0b48964e561101a6d2fb9b6606d47cdadcb9e4593bc1ea134042657d99b44207118bb4c08c7f5b6666119df11c79a41c08b0718f69"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33313331323837323737"_hex;
                s = "a121be015c822a0cd1cea08cb0bb75a7b6c52a2355409cc7ddc9c557530fa7675ea3114600f71e2155dd8eb450a39a3babaab56fc466b09467be94c3c36af45ae37434b70bcfaa4c4df0bf7633a090ed9e789b7a6e0d7f01ebca49cd891ab214a635b918b2fee07acf631e37ce0b97da0aa9f15c7399d350a2b6e865555526e8630bbbe7a4fb59b8fda75a7cf123ff7d9774a058b1ced380d7c42f781945eba0d14f1edc2bfbb18dbc14f3ba87f237e05c66bb155eb72772b404420073eb430908fb7b563f88cc5faa60f4edde60f91fc1aa2e4cb21ea43e9f7e372651f3ab60dfbfad06304aec34411f04102559fcb93501c9f5cb5e2c5af0243eb485eea219b8a868f36024765d4c644d255051fd62367e04656f8ca21dbaae535c4a8c424c5591705f2d8ecd2502ed574b8d8bbb38a3d148366d10f3a81410a0765ab7834f57c4557043014764de76285a0ef579b8f8d7c091aee8e0a5b98f203c95017c15c0c8d79df6ffb5f84eb49b4162774bdaef9555e8e0cab279acc70d920d00be1bf2574753a04e8d2eb909524115e1c088d0c555964d56afff2eb5615eb360c17469233f1285653569288dd056d62c8f8f031cca2d0238a8216887d042ac80337121e7065c65f416011666630038ac95c07e0bf0e08d86bff57ec9121bed7f8b336c69ba639f7e841cf80d176b5c3d6322c5a5f0ef08c12429a8348163bd77e881"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134333331393236353338"_hex;
                s = "59e133951970e56a90f1319f0851fbfc3014b8388afe2b0508bfae368d110a01cfe82ca39cb91b615a9301eb4aed2256a00a0e6c5d4ee9a485c57f744720e188335fcd147629171d9c984dda4f25414c61a30fbaf3fd3c51f8a3eccaa1a13de7fe19777f6d37fde41c071b10d61eb7bef9e0cea5eb6bff66b4db993894093b830e1684ee37cb2989b174caa51f18405d38d81b47bf7dd7e0501933d3f73e6cfb2dd8d472a564c64443890590cb296e309d29d02e583b3322c4227ebbaa97eb264914b68e0489d09d61989baa304148dd52246352c11dfbf0273cc96cc0269434600c28596db8a87a1e2253e431ce3780a30382f62f90bf8f11b840e0c41fb881ca17b76bf05bf066b28cad3bf247be63e310ebb0a258283441317899a30f97c42b266938a5950d00202cf293ec7fb605beb077487b7d668cd85ea2b1347a9c169007a8b06136abd475ecf28b3d45b235da6176827b8cc948fa7f881836975245f0f7e75ca3181524592faebbd2adddcf731240b1b3b8df2d5a5df213c7b5b938462331a3a64c402ee3359960777bfae03249ccb3988007bb3ccb4e2f34bc0d0f14c11f6b8a919f77a94303af28a234236f7a3a1df10a3dbea508ded432591aa878bcabee234dc684c4bdbcf3ab87497ff9b3c15b9f3f7a58ae4e657b8455f4e7f06ba68d71036dd35e381414e8d986cd2b7b5b7429d8d26711604c25c2053c9b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "333434393038323336"_hex;
                s = "3ba14e7b3370ef4c285c82b6321b689f30820c3b31772beed07f97a0d5938e96f2546158963332592580ed1eb450713fd5cfce201531d305bbe31ef58976e2dc906b4b628efcdb4fc7259db51632f83c1169c16b146bb0f5701880eaf9a215c24cd5ec0fb9b14d40ce09198040ae4df7fb26d961e73364a6f493ddd1eb1c851af1e9d0f5db8711d92166c870ba9fcec3557d13033395f328781111b258023e102b45a76f4999993cda2d3fc03a8dd88a36c6e53c1d418a33aae34aa49fcc54f3994f5bcad626e05179b14bd7d719fd28b0f3183bb0fba3a7642df6790ed00c2ced1885b405bbc160f2ef09f6c47b3a178602237ba5a1dd179f78a443852c808ab988272d53c3843047b1224f9fb9b4d85f1d7fec16930560ab7b939705e037327ebfb2881a19b60e79c3ccdae8e9bf6f4a4c96b5d8af149a4e447b2f87780bde973de6c8da483c3e3543875722f99d8a959e128fd184266db210cc5c66b7873b6aaff08966f970bb5f749ac4c81f5152bf85a76fafc6610d48f9579140615727b1a5847d436894b9465157a49524d77373ab8797974f31c32754c1d1b47eaf4824ea169cef67e4ec1da6a6911587ee9522dec13289c92c4bd582a681700c512789ea77842ef4e7213bb5a425b6f312b42b1de25edd53c4d554fa31ae5643d607f652e38de4af64619874e2cde8497752afa0735f85dc0e306fa5ed032efba964"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36383239383335393239"_hex;
                s = "beed80ee2de1761b9965a136a085533fc346bd9f9ff39cbc25009e17955f3464cd7be769839857878e30c98e342aff44f9d9989b5ffd4de4137968ed391a23aa77019e2e243c65a30d41e650cad6f51214d17f9f8bab256f7b00693740451dcdeaaf87ac3211ff176b0ad06711858f3c92679e51bdf0e7a8e52b56b61b25efef99bb6c3033960889729f26adc8c730c1d649900090738ff8439d2a6d955049ecbb40fd354953163af8e4974f8441ba8390fcebe3c39ca11d3424678036435b035ff64e6cc52f66b36ca28959d9610e1b1852480b646e339bf1e55719dbf117ab3604aa391578c1ad40780fcbe607ebfd1dc723fe8f1904351a819973fa871320d3365d1cd4ad0a0cd4d432e0ee72a3b72ba35770c7b3fdf0dfc712c0b72cf0bfd2d2b71ddde03f8b15659cd777df1b94d2ca74dd57892a1078904c14c3633c1cee93d42ec63cda1612f8d0f0a0275b82870a693100679af84051eabe0240cd34e3146eff3d22824b764c9b43ab75420532da5036d83992678822420600e075fe47e617399807f5998d100f79c287cb524a91a4a9822877358e8b46e98fc0ca3581ee1129a3e85146926bc8a6ddd4d8ba0073cb641e82d883037e8d7106b5d5b78267a9377ed2cf8b680447e367d1a64f91e7aa691a895b824921e081908485a8c65ebce971148b7da0775ebf56bf1c68c0fef6dc9b2391c3b31683ec3a73f111"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "33343435313538303233"_hex;
                s = "65aa21276d8809ebe4fb06e149ef9b108c0c9c12e6f9a3b8a0da7f3ae602d20e4914a7523a2af545d38c4ab9e0c0a86f46402317577333395bdb3159da8663f30c2db08274425e85f5633d2821c4aad1980447024ac4e0bd843552a02b3e545c1248a606a2ed7ec10acb0076844b2bd3186a035c7cc9b9963a5c9fe6f74d94ec9be075d8f0bb5eb2d9ee8c1151e9480a9f106b8e31b10f8bbe4972dadc5eeac425f2e857a1d1be4f60d64a5d50925b8ac848aa1600e7cff51f6586f5d412f740607bc436b851692107c2d3e4243b68057e0708ff2b91cafc0902c947192c309c5c7d6801a15a08d5fed89018b2cce5f485f3fc7817103fddd52e8c32ed33fd1ee6c5bb851bc88b99012d507399ea266d91417d801631536634f8c1d139a41f4879eecdf475d89139de0f14a094ad78d6eb30b19895532845d2a2c200b3a8ed2492489f92a9e20772158a14979b0ac2a5b6d894a04758a80bfae129b8aed03f19af5371493ec4df8634722e914a549bfe598fee4486f87f379b99abf16e84cb1b6e44f46b84d14652e5df56157b1877fa7f0cf7c920ad8605a0586db1819a7d57d89f1dcb8b96fc97d1f21f1c614842ce8a2421dc5baa4572803ac80c8f7ed65a60a513f5d70864a34087bf988ad291455a0de1146ffe54b9690817e585e4ecb64032fadbefbc6eada5a10ddb910034efe66bb4e5408f0f2436ff3585dac27689"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3132363937393837363434"_hex;
                s = "992af79c7dc3b15dd16a05ad9ad5c2603ccd9fe5a434b1ed31848488d7bfbf10e6d981e96c28ebdc6fdad27db03f3506454dc69ed9b0c24c89e8875237c219c2cf58f30d5944a4c238b21bcf73f40b853c5826221f5bb2e0d1d8e4eaf34856efdc1334e8ce118853a493cd171f1a4ba0c20561c62018d0f6e2784758c506bb33d9a952f967f70b24296aa48e106de6214ae20a4d14d878a3875345cb1e98f9766d99cc21c0f7d83a0ab5202ec39a962b48180acf69e440abf68ea521ad3ca4f16686f2ee5c205a771ecb8d1330b5f923cfa457012311ac5baa6e2db63e300a93aa0b062a8f78b09aeb5fcc0adefac7070dcc0517372bac0ba8709e53c2a72bbf8148795488adc4988bca0d2ec15e67651e8195e8b493e3320d6de009d7b49b66db84953f80ab584db388bf2e83283425baf0e4b534c14eb00ee2fd3010fd19a1cda2a6c4da67ee9746b7e37a94f0342c49921e8602301f11002a9f13f840e364eef7d42cc20acd85f2c863e97a8f14ae0d604fdf7040f874d17dcca8248bb02eaddf593bc3cd41adf034d4c7675ca4f73bb23786a65162a07337fd92140fb09c697b27d9c301287c6e37c822c613635f0816f0b53f9c99e51289a0fc2ecb2d9dcc54a8c291b0040d719cf4d1dd8e670126226a43444aa5bcb70b0ae30a3784f4a6b52786a1b60aab874abbc03d7143e446ecd602fbb684be8aba4d40dd5a4ffb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "333939323432353533"_hex;
                s = "35bb33ba1c6c656296330eb5d805878c1ae4dfbdf6b95a5ab40c77abeb79ee56c4dae5ffe68fb8267c2ea3ad6023325d19d5ea14348b4926d6fa37eada9c8235f2374e10a5bbed2b7c9984ff8fcc73205e11bb946d0600bdff00ca9bf092e80a62931a7cd2aa8d8b4560553075a0adcc4fc030fc7be3b5364b47d8246930eff7314c6dd715bcac3d913ad94e6e84620d0324a49ca6dc24976b1a0febc57a3d21635d4a67a14b6ff73d0742c46266b8d87149cce808ebb1cc5bf886aacc9ac008dba921ba9bb932422a0e178b61fe4f27fa2c32f5b34a6607a24ae2b9026a817505d3233a1664f6a78be7a10979b369a908047c9cb34d52c297d13fdae896d11723cd40aa71f0515441be9105705f6d992998db8aed5996a1cea428570761b5df47086585bdae114859cb341d1608585d3ac16bd028645b2a723a8dc09e32cc89d8d5f003e3dc38dc78b23b3e5b1c0656f16c16f06578a176b716d39eddd3d0ff98a3269db4ace89321a3310ebcff7e1690c749a1137ceb3e4f02d926377d38e4e123792cb8b26f0c4c9884058e9b2db5a6b139deaa17090027828c7c273ec306a649127ecddcfb3bd2b29470b5226835df1ef24fef5fd3656473b82b3cb61ceaf9a5a01f62d25f9e01fcbac693b64263642c68f2f0241efdfa89712190bd07d9d8240d00f76f42c1d5be72914d0f4da8b749a0a78e21f5f912ca73fde785cbbb"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31363031393737393737"_hex;
                s = "5447055dcfeb00b6649f376c97bdd94a5a183898a3170b888b9eaedce00382df8704bf7f87208d308857f5673dee59808ca23c83d2b7709984280fba9c871cee7862f88e839c945d75ea82583bfa32a1554c9504073dc140d869715bb2b916a38cad7f55cbb8897597c2a2afb96e738b4fd66be893e353cc209b1d8f0aaf625f13c27ff36f854fb8b9e496e8f0145bf5799b7afdc5fca3108ea69fd27de4a33891a25de996b3ecc1e8984b6179bfd77c1406a44ccc06c43313677d873126d72115f4de04cfdc7a538c489535fafa9ebed76a951bb6bdaabb8e5319da4e91e550eac2d60314d1e023fe17e64d9700215f5680a6d68c80edfac34afb42f0d4d922ad13f8aa3be1edf28aebab477e5de5fdb14d2851cb7b2411193156dbb50c91eb180d39576dd8ca42db70193c0c674bab5d193c6211d52ab84bbb512f74e2edf62e0d3ab452a5867c358f7545f3a17cfcfb56fc28bf5c5badc6bee8e0dce1b22b414acd284e51a27cdbdad72eee89eb85b5541e78c6f7a89815c1036d0abec8ef023f272fc55ccacf3b5bd13ef634405a473d3109ff3e03a275db26d0194fd6f15410051e0f2fe8ce46b6c8b94e13b3d706e3587f151c6e3763c48902bedb51ec6e47f02cb440376903554e373fbe29b9dcfa89fbed8061b4c4b7fae5c84857a912d883a161bc9213ff0d31c611c5a2594c101df7c5e00391dd1c72b4764146d7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3130383738373535313435"_hex;
                s = "653a02cec7287923c5e170b0596031778cd7549876c0c0e471efea189783a7d3ea953221c49bc03c680b4937dc9e338fb6e43562c52cc2b39a95a1f14434a36dea727cad6717d2228fddb9cb5e65e2a9fac4310cea089fa4042528264ee7ba9ebd4a1a5f84a3c259ebd9ad0a09ca16317926a1bdc4dffff9c26b9f670405de846594c15b25edfe2215f8661e23624c651e077f88327a546f9abef158d3005a69bd689bf89cbda9d26db35be3d40fad3437529dc3881fed75e3784a74491ab529df9131c0d251067ebddd8072613f732322e79c54e63d2f97e2fb2838e0ceab79f035c523105127f9961f680378a575996fe92eaeb561fbd978d6a91e4d5b2e6b17ade7995f114d0a0a051df068f1539f034930647b08952ab45d5dddd30347ff57a673ad001fbef271e5d0b43f60dc428ca03ba9d2878aa31d5053d64ad07c7963fca764df07049917a072aefb63ad2f0abdfb5a959780a907daf5142896e731ad4ee2078697aa58eb267878a5de3a305a21ea3d07113e1620ad5597b981c0c363c23edae8af2ff83c25878469006fe721ffac5aeac1c7f7133c835013b9372649c4465c5ee6bfa2ace8b66cc0670c69ac0742f78e9b00e73db10218aeb78710b70d2952ff857109c2e5f1a4d50b409eb87ca4d0ea724afaecbe260f5495dc14f8a5be9bb5e31f3f8ddf25aff6298ea72b8cbc03c9b1495bec7cb84ba3fd1b5b"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "37303034323532393939"_hex;
                s = "864da34f66238c768bba4f20d869e1e68f382593cd4eb87c1c6beaf00aa275183e0ac031dc90fabd345e70087dd258f9dc55b23ba5a8c6dc54b44bef445d660192308eba4ba3ea7bad94e8ceca570329557bcc3808cedff7809692484aa0a92762a327a20485f855ec09f1c6f93da97843b942ce73e50b5fe86df049ed422d247e27b00fd85efc5b6d8b6f99cd7ecb332d3eeb9e0da21b7a95afe8c57395c7393ad30067b9f9a6d47e6c4c4384d441f5986607fc9d36c9273caba73ba6f2d58a376aad3845f310648485776dd39a0198727e51f1c54303cc5acfdddbd976e7e01dba22f3b5ee0dace811a0f4b5c4f01c1937172cef939b9a09631b11246b472e94d83b4e55b55951b3976842e0dff85d565fef01b261863c10e858c0a41342226ccc9ed816950f43f28c4a931a4bd1953f2c23d51abad0b2663d1d1b12cc891cba8d0a9eed87943070fb73ccee16ea85a1947f4844ffc2b1ea8aeb5227ba35fe1cd3b388854a665f00ce6d6f6f646592d9348a251b43e0ac36060cab4055b12a57387748801d0308ba63bf37200edc4a6585008b6e571f49f8045c5d72e2edf01147d206f4dab35ce51a378c0259d3b10b80f09040cc7918e21f3c43e2d48d21c873c7cb45cd514ae817f4c5bbc5e2ccc6b3d028531933672d5eee931952f18012cdc3a3a9f7d35db0d3be1757e5f687a718d1a91a87e6c79b1aa34d3eb39f3c"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31353635333235323833"_hex;
                s = "c56c6b5e960f2db134628e4fc453d29a0b97b39be0050c733c2bb2c7c3b03eae76bf55b9dd988b32e989fd9ce1b66f03976722067dfe5d6af97e719f3006be53a78d1b7ed78bb2ed4b196ad63952b403eafca528a72c611cb99a8048671a0bf2aac72a721198f65bdf9041a980c9a1eb64f889db668182ae825bc17bab6f948cfebb09f13bfb1070c64e535afc20e50efc066849e8b9bf41f8d70b75582d3f0a3de33c7a77f2b82eaa793056f5ff19e83bd2a5bc19627c99b74e9c754f5393f5382ca5b84d5ebc580c80bd87f1d68df81a538904ceaa8a4b1e988f9362ffa61fe7042f78bddf8369660ce2f860fb00e53f77f4da00f942b979cffe13e1d61364760457feeee5efe9fe7b90057786be5eb50ece7f5b9150255ae97e374e37033e7250958f5821698f79f80401dde453fb43470a9c078f1fa2d0e1767ec3c4c369e4ce9f8c4baa242642b1ebbad681f0267efde4ec3f4ff269513e547b75982c94788c61262468d823f781e99c6a2bc0c6e4801374ef52cc8735b9395740807319087933803fdc7e10b96946c1d862e1460ce5c7a9197996c781c3c8d87afc96be2ddb71e785767a66913ea6e587d9ca56535a6a17db247038defc82d38af663cfbb2fb24f8a98b57122a0d20e64527781c3bafc1210b64488e445ca5903ae4f5ba4cb3795852850f4b3790690819981c3c6cd92a19f3b5abb14699d7490e292e8"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3233383236333432333530"_hex;
                s = "4acc4e144c375734f32d786a866babd377c8c8bf3318b64d0725a0b2cb0dcc1b70efb9dd42fb3b45f0060db82eb94bc098d145c01ce84c809434d79624005c650a764208a2837dc34439c2baa6a320db74faf718ecbb5f90650cbe4f6445bcd6adc10bf4ff1f88f379b61789af1ea16dff8df726ee4302ce8e0efe0552c8e64dbb6b75eac704a0da5599e4808961c19cbf9304f89d19d14e45632a9e496b5b2f0729fdfebdb209f24d1b6a95ef9e70bfaf1aab113ce07d2e81e6641e0ddc56f7e2c37719ae01f6119e1cb1208991e08ae6b16ad7d2080e247d01e3efb2291daa4990daf4cafcc63bd4fca4c9d7441429d4dc7bdd90c47a4f79ca6f3c86b0329512441b3e5fdc73986717703d2d0ae4acd2da7083f8b0a815041d02fb3f18d3c243516dcbc4a7609c39d4cba3d338c20831c3a06fdb4ac25a38c90be85b7645d084f2ff39387eed76822e1443f834e164f41540b2b0e1ea6da52c7156398a3bd57c077c438ddaf5fa36240ce7e44ec84b56b4d4571aa8ed635edb32715884119c5e9e519e434a8ac271b7977462a2da6197ddde4aad99aac482c4de29b53c35b6bcdc0374fe15ce02670baa1789dc023be26e07ee9beb4f227be3d78e8908a67ae20d90850681d246ea2d955f7af9ccc74244a61c53192b50bd90497b01daaf0c07334e76526e2a88d80aa2eeab0b9026ea2ba26f3e6370432ec232b23e4555c7"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31343437383437303635"_hex;
                s = "c434c52ae202619ef8cd640bc153efb96680caa0e80c4afb07bfb4891bdb4580bd5ccf72f323dacc037a7c4d8c502e96441ef91d55c3c1511017f72ee313b953f2a365cc8ad316255e89ff791cfad0133408c6b0b46e0c60c2ac15b0ac5276ae27e50ebe30b12a39f91ae409c8de97459d341414c7fa49e004e45997d5db277acd2e1b2a6cdc7ad19d4e6d74c78afaa183affcbbba7b8a135a9f539f143f36c02fd80c48ad846b6bca7dc835c3391a2d3df499f83b114fb714da6f95b20fc79494e17db38bcf153a55fcd95e4ead11e6f74a7c8bb5824db645b3d733b29f80ff30a378f3872a82a075f8e89854942635a8041a58c08ef1045fa038efbf929554fa1d5ce24c353611853bb3c3366ac04480bf0818bb7e2652ac395f9510d8047063551166be843a896f83e5423bbc8afd91874b6a5d19ec1379232715dcadced3b20e316aab64397548cd296c301623e1c92d3255e15bc1d1b9baf2faa6141523cb8fd6589336e34e7c49b99c2c70fe089451511aa12f217ac8f7a9fed29e58c0c871b6cee869ba3fba8ed73a43bca24c19ac20c10a77d0f48ae23db84f7968dc8f554519354ad69704751f46e0b8ab8b1b34676bbed3920897fa1d2a2385edc3bff815f80c7f80e02528b5b636446de2ed92eb660e304bf53199a5904adb51d544813c8c3e96aae5e35c0a18f3a7c648553f03681ab3ca1e056ae1b2facd423e"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3134323630323035353434"_hex;
                s = "1c441ac7cda11e1784098a7536d681253107e59b638b551356c73a1712c2646ffb8cf1243a9e70ad787f16faaa7f2f39540ff98dcd764df49d7411d52d752f2fe86412815aa11be9734b589de43f3730fce4c6a45e8b2ef7527b49cd098cfd3555031717ec131391b15f059abc4221893b5824d1648f7bb66fb9cf64e922c2b4df2b4b16da030ccae39b35be92ec4fb3b8e6e944aefa2fdd876868df36e0246b1634636f07b67240d66888c4847c4ea9e7a458717156822c4026e798b2c7707aa9ebd8a4ec2dbe432c2223703a4cd633f931bb0fbf97a9369c640ee0e1ee196ce553801eab48723435532cebfbfe5f53f7425d2884b3c3aab7e91a3bda44a9f98f34c2ccdba9e9c183f012bbe01d7ceeacfe9a8eeb7a007e2b2d733f4cd7d6da789959e9d706f2c2c3643e669b1893df3f0f97f35a9bf46f70038b16a57ab79a41fe6eac7b48262f4991c2de71f50619de73b8373aea7dada968058811e8941be11cdf6f3dd2c6816ddcb0d71dc92695ca3b0adbb338ec84aa0bbe9e9976658b4a952d7d1aa6b4fb8f4ecaf59003b0b3288189c224068883b4b1df63b060a462b31e94dea3fb37f04cdcf9af4849a4d7f8c945e680bcc20e99a1f61f185e15b6abb3093c16444e1e8e8148bce5507c3f93fd257fb58b69181a8345838b3b13f60105cdaccea4f1393140625ffd2af91a92aa450ce471f441eb4c7b34a9cbeb28"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31393933383335323835"_hex;
                s = "6f952b554b7fab999a7bad498bac378a905e8bb06616961013a9e060ef2eeea123001a71c30fc4297ac2a55bbc93e21dda8b256270c4c0dafbce25e436d7eafe54de4d08d3937f9503fe24d2659bc357656cd1c3a4cde5cb045e0323a913ae351499ad875cd91f3f79ddfaa082a7b42948c23b247d46de5e55a49c24fa87802885e2532ffcfcf78a021eec2f2960eff2d943ee3a78ab2217ad654d92b89d1d09d944029bacf682472089528bd3ba85c9676e67aed6664643a4dd7e321156e0fb8486945fd55f41cb730aa79c362c9371cc8ade4262d18e15cb543bf140e0d6f5440da6e1d85046b8403b51635de873e54dcc34b843a841483263346d250048fffe7a7e26edea79c180314c2d302dd2461e2b841bc171ad951723c7c1862bc100e32db2979fe0b770cbf70b31dbf1f914874582d6db42da44ee2382e3211ad51d8db5779eeb7342992f8c6d6ce784bab147ad3264db79f759dc90a653291263f3ae273592b9dd53e5a497cdce7fa168f0f4a4381f32151673c82588f759ce19c880eb769e6864e37e91365443b928a55638826e00777296de6effd7db92bf540ceba49645ec06e2b3832bc6e7ca19865f236efb5205ff22359aa68d57cba7f30d83b7e3526b7b334ed49cb0898917da5d6b2e2387d8b4d9588bb9ebfb95dc11511d5c71768eb0ee1c7db0bdc1193e623c4442c8fbb41f586fd3a28995a1694cc1"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34323932313533353233"_hex;
                s = "2545e8586a1bac1a5735f4c6223613f0b9290fe2309a66783964bd29a2f91a250351a71261b928db33846edcc42cac3780f8a0199f50100c47b7195a7b3e5f9563798b4fda2d9f4cdd3c59235e1d81220ce3bd33a50ae555bd8eb7f2083f0bd9f8fa666f41f4fce51ab5f64f94af0a18f335c9c152f9512c48daa466557334179d14d6f578fbd2b281b7bf2b2f5d989280b7c6cf3901758dcab499362be0b0fe25c4da46b010e3b60071cac95e1c631c0af0f41522db471d7790767aa3ab1e872e84480df9b9d8c116f2e3d857dea0f0a48ffee5749629acfc66b43ddff7d75071d7c809bdcebd3cb3ea94046e0375253b9b24f31d9095a10de51cc76c20fd8308dd2ce4e1090fe0e4e73c5e49cc79164509ce9efcd66f007899582d6b60860bbc14207500edccc840d7eb285341697629ac662d2bcaaf8cf814987b1e9ac37deccc62ceb804ea37747c3d2672751cd336be51e0c9cccc065f097bdc237719525cfd383175225b59c293a0e3ec8a9a5cee0dff97d1078905363336ded6c4ef84dafb69ed5a94f99944ae2ca6669798bb384ad92ed15885688c0c790275c9636cd9228d9016308016d60eb72db2543a61f520ade73fe63ec07cd4f37051fc2bcf51dd149b9aeea7f3a13b44f264f119ef3e48f77c0b2f23948e5924dae8302555049dd761c1d28db9768b9d213224deb4cc23799352eed18fb5b807daf0cdf28a"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "34343539393031343936"_hex;
                s = "64fa669640145b904f911edd8cbd0980374581f26e19bb6316bdbcf0ad4d895fc10549ee29f1af3d4a07f2ec955db3cdc20cb5d6a9c491b64b71370b3d86816bd58a42a4781035effed3e3d78c3b709e71e35a3712c09e437aafd86c91661c01beca444aadeb1b32b57200f858fe4107bd6ed17af90a5c8a1433c103a04caafd8070e43fd1284da1d0077f7bbd0a7d502760f31a0afe27b523ff4c83ef51ec1be8f608106c2688b6e74e409f6842aa8a1ae4300a129befe6dfa7eab65abcdd6f62e00dc6c62901ed1a2f3c0d6ede3107d5486fe1af2bcbbef0436379fdff1fd297bc96a46b8de644d628d494a7811f38328ccaef22110499c8652249b62fd06ef1fbbe02afc31f5dddb878a9cf1bd1b42e5962c223e780a9e2f23d3dbf0635691a055d987ee41b232c2c56be451775ea697688127cf7aad44fd3f0302b43fb02e6f0a3fde03742fc74e6d893687cd52940a8b73d83acdbdace8454fd279350df9b6339c6aa472d3c059a0cce0d9eeb1035d115817abcfab1f27ed9ae26ddc9351ce7e3973ad70cc801f88d957b32a6f5936dcb453459f7fe6bf17683216faec08dd74eb7b9bb0ea9c032d7785fa93fdc8f5db7c44a6f6898a14da9aa65c58d2cd7a0ae52370456d4d5cca299584f84953ab04738c9503179ef7e14f8c95cdef4051b13fe7fcdb5342c7923f3bcef2ce238bbcd88c048f146c8e685a27d849e07"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "31333933393731313731"_hex;
                s = "17864bb81b53d484cc0947dd87c50ca3dc161c5ff27074698cc76913c4c25269785f67a7cfd8634629e713ac8f1ebb9ac8f8f202699a0681d8eb7274078c06552998789500fa952936d5e687b8c3afeaa53d16a0bba2fb73e19ed075f79aa9746c764b715c16362e4c505e52ddd09c1a2a19f5cf1b0a48909026959e4d1ff4f7229e6350bc80e05a700231b8c9caf9c8929f9c88e39b7aa9bcc934858577d93d97cfaf9ffb2ca9b81cdc888db2f02b58b34ff8c73fd7705ca2ed46a6ab8ce6dcd8084a35341fa62206ab24557a94db6776a6814255f2b7f34e91ca653d82c2f282a8a662fe3aa7bed1948519f4264379ff0c5c2fadef058f4f1f20a44f73c64c548947d8fcf0c6a6e7a06a25e73c392861b3ace9684294c43dac84ea8d37ffc6f4111b29f6dcc3fedb23a23535ef86c8e416b610a2a138c4aa5d58f29570d7453727796dc003434154c431da989ba57f22794e464ad847a929ef8101b9b275256ebbf17d1b6700eb47f2791027acfb7d5197da889a15896108f2bccd0c3d302ff393151e963e26bea724e9f9ee561e81e816dfa7a1dce56c6fb864a8cdc273fb7c13dbbc754a8c468ce51bbf95751972033f592cd96b53228a84286a07f784a1e111baf6b837b15fe15266b1a0218427e404fa715827ad86379c29be7270af67610ac60265e62982d009ce46e7fbf562543f17a2181c7449bed88f60f9efa6f5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "32333930363936343935"_hex;
                s = "7408315526277fd210d27d4fe1bc36c028d5ec1457ae61f1f1e3c9b33054bc5fc4d590181a8cae8a5375f0b54ca67bdf63a6bbb9c7222131a84eeba07e94cf5316a1c7e2a0016cace5a9c5cbc14f5df74855a756706acb2468602dd4416588f77ae0d2285d80cb956f521b8151654c6c5c9cbecd66839fa27a98fe943592cb9b134baef2fb509057d38fc7acb9daa8ca97e57f523f3d78b068f4abe1a7ca3dcbe7db2bfea7014550ca78fdb8d0127e245d60c148d0475c309367ed5dfd2eb4b72c788001ab0e0ccae4922c023677fdace749ac16888d4d7c1c41ad2c16eca265eda54e50558a9ca182103f26814cb978c14a4fea8f99e4246731363a69a3438234461e65797080202438cc98bfc43140fc48adaf0d7ec473659abc0e63f62b2c3ea683fb67e4b46edeac81ab043475a2a9ab0493872dc059de57ed19974d4938fdd4469a9769077669f743d02dac43f9f420a7d154a457a1e86167f022970eb95a72cb5f0e45a8624114a7a76e2e1c1983bd093a85752e750228c5c12d9a25c490539f1f6ee5ce2cd23e61d57a9e8ea4b5c0d8d01cb6eef577fbd64f09db81cfbdf71d33407d68746932ec87f0d81fec7878f77dd7cd0a0641111d8c10de5fe24cb430ecf5a85956653c90a56ee51b65f3a4b00bb909a33b0392ebe174b981742d88ef98daee289e3499565f87f54e3973ee84ffacc2f01f32bf4367536097e5"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3131343436303536323634"_hex;
                s = "4090940653a18d2d477d668c51ae0df6b855a99e6ef893da6e47d08a93286e82701ecc8356c790732dcd9f72590547879ec49db0bd2e3a7a5c1df4c94e0198b3eef83b1292d330748ad05b5adf1c110bd00ff06dba768650758dc93e58ac5303d846fcd573e17823d76cc8949d9bdf062e95c2328a76eb537f975accf875f36a0d2920e0b3d10744c723108269124b42aa652d818c8443a88cb9870bb460c8825be1ccab7e1c0c24dba46584529aa1941884b5151ff44c06b3ec8cbc81775af88ac8c1ad68ca42d4a88121258d05b7517590a90f2e140875ea81dea03186f716d252a4c418333d10083959688a8a792a7b2197f02a108e5005472967ffa822c103ca16aedbed0bbadd7a5ba07faef3a87585a3986ba9b35b2e8a0091f7c3608a34df0cdd4d725325151c63722bd69143b71541fa77409d2d2799de5296734c9fc705dc446c1b11c004c3db8977773d6540c5677ca6c28edeaddf3a549c278bfdb714b11c801b267252a807b8fbf16efcd99c879d55cc600af1279bd6e7b7d496a9c3ed5b6085dbfb922f19da179143b875e7191b10b1921903314c0c0dc58c926395b3d0e6c95d39cdc9c4e91ea50c86260f6ba3bff31b57616c39b5143861651e9c2019b3a1e5dc3140bbbda6a2aee5ddd079cef03892da2318c0cced9b8dbd22ba9582de021e402469cb05d52ca14d937c8f9808b9c3465b7fd7c517c1d593"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "363835303034373530"_hex;
                s = "6a18d6762fc5bd0632061001bb694fd43b69be7939d61e388a9aac8e86ad8b217da342e9239218542ba775a8dfbbd0271bc6bebbf35ee73d6571e64dc4661b236dc067e2fc6a980cc1dd99423f1c8879320002e217d6f4e3d1f316bb2659d30390d23898af1f35f345c9d98e84a6322551793ebfd05418b567ba857cc9470eec945328662655d9421b2abfcbf5ac2a79c227eb285dbf5b8a1cfaaaf845a96dbc6f7174d3b2a396a114baf50cdbc2d493c7189a9fa1cc8f7ce5ff626f8048abf6a5f4878ac73f0b307a95cea1a3b501ff62a1a180c4a3a9ef1e6df7d3814d26c6095833b4f7241458d0c80a7aa3463a7f236c165d6e553ffbfbfbba7eecb9ae8edbea4a7428d42ca216806500acdd44452fa6e6b6b0cff62ff87407120a57527d1f88ffe3e01ebdd2d52544b88e30af07e125cef4d82205d4ea849729947adb1695fa2c9c3a269e18e00aa5c9b0b0639f0f582b457e6e7f0537e4ccfc3d0a161eaa0c2395daf50c8aa0491af4c79e08144c4aefc7b9b2e1ebdea994bc9b04dfddcfbd8c29b8c3b11b999abe0acb9fb8ee5d0996c5369a405f7760c971c2452fb9f9412096794d55f043a19d4fa9a6db1b96fc6fc751dd13695534ea7387c8963b6e0c6caf83a319d73ba69214e9e0a263bf2bbf4319cc39e14223566813b9357a1eab8841676a5e6451c634f1dc64d3f8614b5b3bd4da7c9a4b56342e043d6fef"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "3232323035333630363139"_hex;
                s = "9b233bd1d582c65d8527309cceb5f60a32aae24a818fbcde1ae34f0bebb25939ea81692bbdf8fe7be455ab6f44c67b3db6d36b8a5c8be809dc4e9b21160ad8dc1b365b139c0ffb0f77756c6e6fffc1b4c9fe1cb673f2d285686c066e401eb7407d406629c5182f2cb57f15d3dd1b05f4aee492d03d1fc437758961edfbdcf0327a6adfd7d17d42d9ba3aa586e5f66f107245a1a69c01ec6641f12828480a4e055b68b10e0d43ccd8fb8b0c880690a831dca1484a6c8eae27fda1e0f7ead3650dd5d918ef06b735298b14e6979e2e3ed5120169b0043154eca3ae36d3f037e975a4888ceb3d24ebff28736eb98600d7e8f66f40fdacff41235e3d1d34e22314772f29aac75fadc8af9e22a8f685819072966d59ae8ed8daac990f57ea005ecbca21c2d43ae11ec9cf14dd295527ceea2c9d4cfb5477655e6e4dbf7c1f969009b9d8acbeb18dd719c3fa431108a3250daaee38d41823afd6343c43d7aad5a95864889fd64e093eeee9762324159af3777e3003379c2085b209e36d73b5cef3369469d1137e0b45d817fe04d41a9f2f96f42d1cac21e6ae5c6e66cfabffc1c71cfc6ca08d89137d99c7d4426a5daf0a65c442920c7d9f03c56da5fe9ba98ba4b18039050a1265505e774c74a51071911bae1a44e14936e6e0b9b2f9601b67d9ddd9ca6f53c29ebcc7544682ab63e8f5985061dc129da6e32300217dd0b4a0a982f4"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "36323135363635313234"_hex;
                s = "7ba153d352d2854fd43a1dfba768201bd384d9b28e77883b1266aec17badc6cd7774bfba008ee6b308211ffb3ee5e0ffe69cea87103391acb4c6a36e93595fc6021f5a7d97fafd8f9e36f1e83d852ab81df3bacadefc7ac5828a631e24e58b9c764a3ad05fe74270b5c8fd3f215d7a82f712ca051ab3017ea97d04d9bfeeb16783dc44c62a1f551317c3d74e883aa952cd4794b7c00dd8346437e05281fa997ae7c7ebade2ed98d11775742b8ce06d75b8496ef1daa8ac5900581267309feecb81ecddf63696bc0412196113b143a727c37c5a7f3e04c6c003afbaf64a9f37a7fec1c63180763e2da76b90b70f7d9ba951e528a0c168a502b251da4c9ef9f80b6a1cc301e1af71573fb15b4d3e6c02f83c5378d70f6c80ac41c033ff018451bb35aca3043d616f7642c5f5d03c3594059fda75096116294b5db4bb1cf1f545be0b127822833088fc7a49d83993e2027fd67077047de76a33262f9cea412b099d86c956e7c0c632f09fe26572ed7babe12d5a9fdb119179a30fdcc8bac9b8c1c22723658c931dfe967760d71baa9dcff17aa1d6b2fbc36bbea3e70f38f1d893218243321da71030d25a5da89956afdf539a60f9b861fe2a667ff870eb8a6c8065191e6d1710120fcafebb14db71082551a409f9b19bf55cf7b6504025f7cb09bbdc9f197231e9076def9aaae10574ada560d95fce709ab6463926c731280e3dec"_hex;
                r = true; // result = valid - flags: ['SpecialCaseHash']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "587b5619eaf818a1eafbc475ffe48009874aa959d9989f51b5e4241f9eccdc0c081d7a0c0b4cae9657f0c1307b4b1d78a56859b81d75a3eb45a599f4ba695608909da05ac0bfca62832bf944738ce66962455875ab4af87284abd40caf7751fd70fdff9adb834a6e8a502c2eec37785de104c5de5849e37c0fe25b95fecf86dd0ecf1fe077072d13ee8c3dbfe9843aed1ae693a52f2270a497a5bcc2532117211ba87993a2f808bf69fe20a959457b5869bb3c4234ca5edc43810774498017552b2472cd66db323726eeedb94325dd44cd387b2ce98e780d2da8b4898e5d417750ed918b652f16aebb8fcf3a333923cc1c9275257cf870423eb88e715fc3acc3bef4c3437250b07acb31f4c5be53e94015bc93fc82b0faa6e721999bb43926a7dd2405701cf648a54fbbd314840a0f2e9f4be069027c7cbaba97f0e39131ff61bb9d4d12b092061435b924fa44cee843f702311299b0681e0fea42ae31a3dc3cb343be9b3e174d457515bd06ab5e1f5d1345fab7c3a12c82dd6c527e39e3fcc417c191d16dd7baf36925f1e041611557610effc81e0dde0abeefbfde4ab546d4309baf668375b5187a2e8a8b85f6136511108829bc3eb06cc0eb1448cf246cf4a38eca8508b73ed7c232165f5b5afe911df589216fd97a543d0d0adb47928875daeaea26c7bc3542e3117f091fb45e12f12d51620c877d731552fc5b7248331b"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "48d5b367e7e7591f138e7fb92ff57ae1b51521f776e5056833c67a54168b1a1b92c8329fe27aa487caf88862c3cf4c6e4ea16be15baff2259f1611f4c461f4592e15836deb4bfc49e19bbc41066a7d1f78cbbc72d61ca863c83e1ffd865246da65c4fa54622316bbefb225b01f3f4abe16b04719b1fcc9d992f0cf8379f70cdfd16113b4ae515185affc4d52f6bc7e589483d5f8a941d8e666a1e8444afa7fbfa4a2476200364fbc6b83b909f7545399f7d7c54ea9864d48c21d9ae81a0f25a2def1e5de478ef2f03b066c44d3d92abd6de0dd107ecdfd2db945ad22e31a316cd16e7f2a65e142548487e7a8fd85260ef91198de8951a2e9c6d9d66e0b44bf0dbdfca270abedcaf09764d3a8a49d5d700ec871bd1379c449c06a67349aee3c86ae353880f678112f3bb73a757c29b3d0e2f2d45387a83f4cc6349e731d5754e143eed079e2262b518ac3d6b5243cb996fef6857f09a4b057b3f3723c00968c3b6bb05101859ba5197a4cb707408ffc55cd467bcc2383594bd389b4b491244d16107713e040dc0b37cdc31bbabe319cdb3757ff43ca46db04a9c6c69466787795764e70bcc3aa212bab926d191991bb030d75da3a2dd296720e0d3d3ca58f7aa16612909217f33f108a763ad322f202f6ac45d7f37cd49e835be97b519d998914266a897241683ea97337d49a89d2db14470f8b7c736d422f99e03e63a03e2be2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04ad8b56da236e67c98fd41983876d40fb098e90caf4eef827b0a7d1b6fa7a52db6f26f45411747ba58b4a41fac94866bb5d21c4020f6e0d25e9e3d529690492a705063898af1ce2a05b6beb33854dbc4685ab737743e819c90eb6276edd5fdef33ff1a96d4c0fb17e6d8d0453d4fd54d9cfecc4ecd4e6a18050d9086be17c82f63825534824aa569eccfd2d2eb3eafcc6f2498bfcda676e728534d417b2b0781f067be52389d56e5bf6fd656360e0ced60e53dcfab0c3b34c1df00f30e9af8fe680e9b6f3d1ca1cdc2a239d258b29ed1248e190b029f8fbca5141a942f7303b8084454341e942dfcf8cccfccab6adeac174c5e863824484c2afed751950b62f88ea128c60efef87c5f391ffd6ba6165673d5073532391fc6118c30e573382acdc4b5bec3ade54ffec355e0be8fbd203ca36c6a6c39f6b28911fc0b1d65556f00132d907fb31cd8fbb3189fa9e3e875a50e14cbea8ac4684c06d89fd35abb1379dbde94a1c224edb52e77cdb0c28a8e22105d003b69a734a12c1f4c7fd85cd0ea3a13ebe7804197d270c889be30d8fc84bba006abbf5824f5574f11400ffbc2e859879dbc5945321bf3cdf5237ba5f0b093a0fe4672d1de081ab23c1409b1e9c849daa1ebdd9f7dff8314f6788ababa44a1c663d5f2a567dcaf0aaf6adaa79036c38c5b76d899f6eef55276e33027927e063dd69dd789fdb7754d8d4ae6b39f5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "33270de38f27f5a16d4fc0e1d90d4223f6e3d059f40a431b0871c9330b1131c9e140209599966c61c7b81307ccfe7c078cc7b6baaebc3893c9ca69f097175198712c429385c22524b0e969492081c5a2909ea564082144b329acee6e3ce3c1cc828c197578db69de9a18bff535fbc56cbf57672cc39731dc6e28ccadf81942e4d3ce07f7b4d025dedfd41fac0fd9b189661e710841f4b79422672126ad5aad10a5e7bf0c94eddc73bd9a3bbc6e2fa1a0a6f8ae5848579c8680f86c968decd16559c97f25bcb8071e0a5c99c3e27e6cf5c22b5a77c5ed8aa33b8e0c84bdda3389f2683b0e265f002c14a3451ba3bb6bc8dfbbbbbd743f3ddc7ffd6626d216fc4750fc4d74e1d16e2fa55e30fc1d8db076fb6171ae64d1ea9593a76017e90a6de52da4d31515aeb72614016761b9b70106f16e294b627e1ba69d76a3eb6cb2f04959f47f11506ec5740b46e88d017816dc62de75b9cd8eee7f93556d1285c5feb72568fbd3bcdc55c811e81d6c2dad9e8690a0dd94b3d8b40c8da55b8e79408ea3c2461417d0859ba2fc537bef6ba46b8c1679abb6aabb8d89f5753669cf518bb9efcbd250d39ced5f8451115fd4381fd87a9b1267f88af4fb2dc6698731841f612660b5c3c191bb4f0ffa3cd9f3044a0d2a955436e48512db19af56ad3bc56999b0ab4b29c7e6e75ce5c4f5b62d2b97de7d6b76d11e0bbce9a4c0722235a43974"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5926393882fd250f82b2ff4581437cad1cbcf2efbca75722045bba8422e6388af7c6c32345553b7f6045cf6cf5f71e6a5bd4317224dc9b37d2108862fd97ff6978a2558c291918814c50b2e07f4aa0dd524759994ca099005b03a00a58262612c78852027afe76b889dace27c810c4865ed9e776523730ba23c243d4d0e4432ff597f5a033079689eed6ad5ed82d841db1ff6676223e19e852a36a29b709afbf789539fb51d6c320624c143c3f02374bec9e7fe7969508e269c2c231d18081595c6e5d0ca34231fd1225e1b24a25839bb5f327e9c016299c57cd66a6a6d080076c35f5cdec882ac3ba572aebec6527f1e5ad76e8cda0c887374be3a78f79832894e27cc4a7d20a7f6583e0fd30264a9308e68e85ea3b93c51b2f337e3d77718568a057837941f5b439a5ced6bf44e920eedb706a1545fec0a66a7c6b02b0f15cbec96357f7103bd699de33bc02534797a1ffdf5bc2561b7e6caedf650e4e875c0bf52fc949249e5fe970ce6e01a2b14e4cde072b12f1521f022754d93a77f53cf18726eae5f2d9d37498b22dfceeee608fad303fb36dcab817ff632bf24ad645be4d6a896d7523bc9e700d070ae710562a165e388f15ce0c37615afd687d8e9b39380032c4b799e9a4091aa23c507888e53c964b49f8f5fb49c6573781257bed221433a975cddd1c73b8dc104bbdc0ed5486e45bd2d9c5d5b97199f8b035d51d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e591980e9ec3d62e2edc3163ac8206fc09fe026a2f7e622dc5a6d02976d30ecf141295335008d91a223ee98a143541494ccf7cb06a1aa61de524fb5bb4b379a67ed2ced447c7b395c57a625f835dec6844c3b67a85aaae10e273d3902f5f30539711f98d73f86beccd798b98541a84a03ccb3379e8eff88c19c88aac7b7ea99758194ffa6660153d4f22c1252dd1b7b574e19b3492f28cc097d3ee3f30f6b88576bc6299512f9f8749e0b297295bc275ca59f8056decfca9f3980e6f8d6e07b73e1a8ae8b3847556cd67ab77b96618979ed37744be2d6bc9f2b671615f1d4c4c1b419f05036148182ad4c6375f9e3c7cb37bb75d16c4486e97c0ac5685995cd8e5d76452934b26105be9074b2f8daeb1add13c9b127dca2858e5c80e686791a6f98cd98e540bdf27d21b2dc9fc84e09561df968d73c190b3081293d666be7d991761f4722450ac249a6eb4bcdf190c214630c85243a6c5970184e257c00c5a2a18bcd20195fd041887f001e06d4a6049e210cce62356f99853f3da2522d3d63739fbb2ff315e68ab4a05ba1e29e5b93808df51aeaced52539d7b956db2f229999ac09a6d4c2ef8714ef9d4783f538559f29af9d850bf71b001f231270874fb8dc60f1d1554f60fa69cd657112530e22563fcde26c3c86137e476a2fc1d8ba4a15dda42d4d8a20fbbad7586f472b716d6ea2ee30f1c111bdbb3db8e5e2d933a8"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8ecb841b89759a769d8b3e423edac171ac5cee5e86aad6dd9dd4cac5dde628a1f265ba4f5c9bfb7fcb4b2cd7663c3f58da7e78486acf34b123cb870a6c2b73eaca03d4b11500b49d9320790c8f87e057c0065223d3be81c01b00fcbcf0a74acf0940b31ebac9131a431fc6a8a1966f87fcf445ef724e59b1d015abf5361c13a2b779c725bc9f8d4c945fc932a9fb94d91004fb59cf5544ba67deedbade270cb0d6f5481d0f5f16fcb3b75188b52ce86d665d5a04ba3ea097a72f9cb4ec2da1d7ae72d8781f167b444294ad0310075dd395b06b51c60b3201e81c8cf2f89a2517e2bbe8e0dc52dfa913e17fe0dc0682eba64e784cfbf73a87254bbd54158e125a8640301bbbe3365b8ec6315af04a549ff0a903a10c6e9113fd4023bcd8596b7a0a9ffef8b4d64ea3143a825ea3c719a55be17444c97f5f73b7627cb467bc76361ef349cc79811e32b6a419bcaa4f38ca3392fc9d3deaef7049a9afafafa861707b73a5d36cf686874877b2065360c176d0e20080e2f73ebafa6b637d7c8f90666915cdfb3c0745e2a7907b125fa5d7d35b7127c3bfccccb925460c7cda80fd49cc9cdee5c3b2408a5eb34875a7f11edc1ff1784bd379b3520f6bd410ec469c97454f18b8bd2a7e16ec2414f01d65739a104a83d968b765b233a1555ad90e6b9e837cdcb6c23ae274e5172955d9bf3434ad97e102bbc37fc21b1dab1da7889868"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "23e198d582d048874ce4e6e69f5a81234ca08be1fc9cf0f7be05454997fad87da8f05c2faf7285a7a9ca7aa50f772b8175479b7bec85919162b8a7eb7cd4c1b8f0aaa64a8f371e23ec2c3428d7d83411f24bbd4b80762a75fa0e5de468a71dbe9bac382b4072241e3c7085ed2b9e72ec3779c1f70bbd0f246834f3e81ebffee13312d133e1ddaeb58b84d1ac1b441f311ee1e2c9693e300862cdf5b4a5d820dfde870da22746be0b12dfb943780c0ba928c657c54bea0d84db37fe50f0965ceab905f2ec3ff177421b11c30e846ad93212485e7f6e52d7d51af1c96f31fef174ab38cfb1b1fb5961cfadac518a6a4991ff2d561a7d8dadc5ad430c94b40c04a297012f81e6e84ca02879fd82b73744c4372ec02f141ae6c4ce75595559f3f4cc9e4b7a7a6d93636487e34938082b3fd5f09366a062484d1820586a720a9618ec18d980c969a28d74c81fe4fe7bb61986769a89716c965a7f056aff60e9175527778210eae23e53e244b973b2452f40ab375222621a89e1f5f2abfe5039708f2a659553582f760f0d264f854840d069e8c4db0246738af1697b05980c1f53a1ba4eef8e08583781c13a93d03eb19db75e71bdd0602b91908a885b41f0b8d9588d6e05796c8a6f8d220922ef9bcdb026af9bb328ac7d96d4078205ba1abf00eea45b9c260e3b55da036864bf5bc0cc2d3944fdbcc7e64539a45238bb2061210514"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea144143"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bae43db604ba72b356561ce15b432d34c692263105762b92ba065fa291460640711aae8abad8d9d4d3e7d6fa3811a07949d48c9a7bb7a94b26609eceeb708925e6c656e883e6598d721f6d1b2a9d6494d47f3ab45083286ced42f86a764378cd2ad3a6eb1afe0411a5f22c7aed75fd067f81645ecfb57680b9d53a2913c1e34ef3dd61b90f9bd66143ea87fd0f3166f60aa7c199ed0a5ed5fee1d8295b8d11516e628bfdb6855491d774f8b55afd825ccf56858aa04f5fb76ed000ebcbf37369ffc8b49c1701e7b74569b18a6c150bf44043a417122d006bb3d759bfb002f91b51b1fbbf92b380cd1e3146decfe79c391372fb97bd68556036eabc9ff52f4e8baa780c6d593d26661ca74053d2b86a90af9e24ba311c0857523713028d439ee80e475f6401b2a95630e8ce68c761829b86aeb67cb1f4c16da32e452f8028e4dca1311cc58b0b10be874cd9ee6753e60cd44f682340bd4f015e82d4496e43312cba32dcd057a7fad093056c7b8c3137fe688e91f04ffdfade07357e3a36441c73a85af13de6e74cc56acd0edaa5a53b7fc348b78dfb2af21197b4a6f57e71133b811748a1bd09522438b3f23e95f8091a91ba2d51a41537b99fb6ef5ab9397eb1ac25c8d11042f8b97d40a9913a0ae4ed431141bf7c1e6336fe722a85d4be8b2937144833a1426d3ec59daa8094dfbfaebb7938eb3c0ee5c9ccfbcd99118d4f85"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6887d9de411ebdc55243c342ae1ad6cf083e096259d4c86372d04790ec149ca3f84c2b27a54515eeb5ca81e41cc95aad525a5adae6e130486aa6cdfd4310874a33371a1df78675795e1e8b8c3818f5a08a7f92ce4750b68310f14de685ba7ae431cafbe86030952f9963866a7376692d8a8d1e2336579f13c21012ae488bb053038d2ecc34e60531fb0aa569c91e845aa470aef4eaf0b5f3ea1bd78422512027a9166e19f3e0d3c210a6c5108974f75b4518dd04ea45c8852cabdc4ab2c862bf7bbd738a7fef4210dd41c123334665a2dcb3469a1e4fe25dc4bcbbfd3d2c1db8970ada55022eab784fca634e90b8a731982635dc558a61ac5214fbff12672f2874aa493a895ab0983e23e75375f3022f4335d2b2c6cbed6d293af208574f59fc6d50c193e4232070657525735edc29a390796778e7ea4855330260a4f0c0dd91213eb1bfe0130e13069a379ceff653b6715076b770ac6313c64b5fe41cd85a2191ba634e953284f0b6a28537b215ba29c874b52ccb3e877fe73186a53f1ffcc0d13b2418bfaa6373b251d5fe780922335e826d7951587a0f3f71d74409c91d3c13a151d0b1a405ec45f931eb23698d37d37bdef73817503bb105d101ecbe9f341980b5c05be81cb570cebfcd7515902554271c081aab2ecd5e8ef7ba60b4e567b1dbf2891f9c40a50900f2d4f53fab0fa1da337feffc54bce36c92da47cf173e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "12d508fd025c4d8a042dc6397f41f341d5498eea7eb1509c2edd8c3905abe87833fd75a7ef3721a8d6fecd2adc07240385556f21b7ccc0ddf96886b4d2310fac0ac82ebc351b608fe580f64148ac58e5473e3e03956cae13c4cdb77cbce3b132401d638655bc94e7057f4c389bcb08a354a7fd526be421e7382163a826de12a13f40c3abeb57ae86d9ac941c5b952ef32c09783895bdd83df2073be1884a8857bcf3442b628205a422b92582812bb96950c85ae9ba9c4a393a64163c51318dd55008abeeec978414fa038ec76366267640a4940a2e1b3212e0fc0f506b035e242805b61b87b6da954a4726414834de317504b81892161f6b22fda4e04618fcd91103d2abc022ba3e2b51cbaf8288c8000a436986063e97e11c4dbbb1374cf6a5ba40db5e035280b018bacc0a60ef89fae03c51a4648435db80d6018ed29c48ed9a131dbe098b709aac4bb6002cbb082dc7e18f2e1dae7896ba99fd574f235b67d523e4cf380e054bf200497004e55549af78a1178b1516be0215708bcd0c34a84cd2a3717ce534da5cdfeda6b0be74be7245b4a83c48bd73ae84eb1c82444c9181cbfdaa92132adf10316ca5d1cddcf6ddbeac45a14aea7d85794f0ee941462d7c0c4bd36967aa61424ba9a8195c70e6022a0da0f00641da2a2ad1b2023d54fa3819f76d0cdd8851aece1995c23844ce34288038cd767ffd6fb5ab70990ac11c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e609d312a5531c94abd76d5fa3d87ae06e5f42d1db49fc230af7cb4a58fe35fc0deb7db60a331877c76c002ddd2fc5f3453a609ae595b3dc4a4c7a7bd5f98d0e7645704667875d0d38f85371876655f171a1fe7baf245b7561b0bcea73ed926896d5950c28ed4076145d7c88d97aa0e9f58a04ca44315c7150811338e03e7cd3f400590a688d43e6728605e4ae861268ab98307d95c09d89a1db3e3b6fe0126a547df8d7e8f26dbeef383b1acc5b2270ec956247f18524f45f3edf6d6d4b3172d3f72589369d38d89d95b8675564a3591bbadc7fdb1d0fdbe35d45ccbcdee24da26db2e6a60aac2d729a28190f66bb273ac9f993d938aa62c733f52a4488a485e4c85462609071b681b2dfa16d826a66a725c826cce7fc760b056974b80a9f6363f28af84a0c6a1c791fa1766768e3e01ce480beedc240748ea505c3d99850947d18bb86e9507525ef1f6d0c275f5da33fed4526b5cd73afbf9c01a951f8a44803a1c640c1600b64e88d145205ae5d1584250b5b65eddca90b384243442f11e8e240cca632057592f618fdf733620444539b735f4ca1d2c73bc3325fde00bdc7d6c760a23587efe9bbc1b2397147b779c77ae72e6ab7e931a391429a9444709f41c526f01557cbace97198e72a4621d8a36bb5ba12d28d05af6f43148e5cb477745edad22731472a4f08bdb9174305efebdcc7a0874efe91fb298f53d18846c"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "7139077e9389743a8b17bee13719cd67b4c3bd62842357c54a7bd575275bbd89b3078f373e2a0e9257fa131d76ae2208bf5de8b162f05c562c6ef7857f5bafdea23f32303e6103c1427cc7b7890f1d1bd28339ecbd0a3ad983294cd6ad2a952511827c2d02c6df29a733b10f9aaa9cc1411ae8ec64e20d1a120845cbd1c2a9574f905fbafe1187ae36e071cfb7e85a8b8c73a9053feb93892a533b68c04d5d1725b0de1d5e6aaec5e5952eb2abe03020a5fbd72633743897d1ad0d4fbcadd13e985a84da6bd924bfcf779689544c46f3a09709cb72291a4b1bcc7fb855f36c8cf69f67ee468a98413aa2dd979152abb1831f7a8c6fa453f44e5f06d724cd53b4e99440ab1464c43a21a9fed3e931122d5af90842d3d7bed61889c041f9cbad2d84234129ee1284aeaa1767ebc209ca6a923b1b5fef538a8762283761d32d7b580c4a48bc2499bc6a5af15838727c90c3e1a46c62a237393fa095de5173563ba12fe63a32a068e83af4076201a92a8decf427ea856491b41a5ce04a8ed96fb101af022235ad0517405c6a5d0b4c1d5e3454becce8dd9aaeceb54bd1816da0b75c407fa52b5680892811b79a3d0d1836364b5d0f465b1129d270a4347000252137872812509d62ef17f882d32f4cfdf74f0b0fe47d09b1a1219ed85f01a1b1c012055c3a2db72925cbcd8ff9af41fcf37a3dad1c916529fd3b261ddcfcec485305"_hex;
                r = true; // result = valid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );

                m = "313233343030"_hex;
                s = "7cbe7babcfef730be41a32307638f9ae0b13c91da29ff86844eafa84bbbdbb6ac1ad082d4d69756914a5f715c82f933157f8b5ed47f710ff6b54934b64072fc39ff4be7074f1398ce6d64b98dad935cbc4d79c18758659fd332717936057b2b6476521d1a6283ab2389ac5536a0e71adb2c5399e22cda05d288b0877a6c90fb5ac7ccdb4ad30333b09f5a4edf04c351e0c6ed9ba6c62b4c1631e9d9e8629b9dd229f07a7396a0c8cb69213b8ac16aa9eab7b587bfb30526d5b5716643c7aab8078088064de6666a7afa89d091149e2c0065e52fc9968606101a522ed80f2572057e829864fcebfaaa4c432e6a0613cbc16df5c7eadf7082369a1d04e16f61710ca9ae5b502570e0971133057fac61cf4b706f43652aa31fad592a76637e8ba7dd57e05062ef2643b9405af42ca18033e0408eb89799af3ed02f3034b0497358b5325254b9fc629144e3040d855ff0c2b1f380579bd4bf3ba4f5281ded88458a8af6217dc357efd4f2b75b7e853f5075f99895e5eccfb648776b27ccd414631af7a55ed1e35e0f909d98210477bc072233c982d8ad74574cfd37e4b585fe3c8ae6a87bc99f2c2846b5a962d06757ba550151698e697b01371feb272aaafd7a71d23173b0c25fa9c2aeab7f6e154f808ddb70b0d24586076899ab15870e21f4eea581d9575bee0081683bb052f22e9b1747016e4f7b07b44d99a749e3e24d6c847"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "82e754143a79e0d6e8f32b736fe4bf63a4e1eb80f5de757009a01117287587e67d8e108e4b44b60fe82eb1fd489c58c506b1a62283ba1e09383a544330c84f838d5eafa4efe5f2e57ae73fe70bedca2250b4b86b0c61da9c006cf14afe78a0bea6a0ffadb24077967d32c866c739bb0f86f6fb3a055e6b509ac0053be4ad0f18221536ad5df93a80c7db344152a28be7e7260f3828b33c4df9afd9c6a5e3c34ed34feae8854fea75a8450570ad793b5d35e6a92623a0645841e45ab4546093835c3b9af787c28a62ba5dc63c643c07fbe7f40af9098649d3d8dac8c7bc0938bed08452a170d7c5bcba9d0709fda28d62e62a2713fb1209d85ff4c5a3c385877de0d43b6789834ef3069e41d2b6e7909386ab17a6d7bd81d750478a0525be559f63cced2dc2e4bb66f164e8c4236bad960ace7125c36ffc634fda0bfe507a0bcf8faa8e0b595f7eea3cad883f9c3107dc122cbe4c28fc730d358a1c6041fd6fac5d3b684baded05abf1c570e43effabf541a12944cdf6a49ec2ba0e9a65390e7891300e3fb05f4f17a42df434cc747186d0be93e45468178bb9fc92c293aaa26959604f5961c182fe6c1c532afce8d7ae66cf204eca217ccb16973bc785656b86eef6ec43d7b9b801d376402adfd5dcccdb0cda45b7dc3cd8277b5973f18259bf98b94bca2934518d26fa736951e3d3bd81d527b2efbf5b88bdd5aa7529dd4cbc"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "627143b4f25d5551a64340061bd2d0e3a0d8f9137fbf6c7df0691e94055d4c7e9f4fc2ab2f57848e7c0183acfb5ff9620cb2eb4857cb0cce89acacaeeb20b0c8f986a65d450327e4df87d0ac367a80b13984d93177d32471fb247a42513f2ea0dcea2c17326fda7dfd6b1a95fff878c2710672aae3d88d35d0f90d4b980f73e21b4f5d169f67774d3ed846311b9e15d316e134b516b7cc677c65579f8405b704836280b6fd0a44cf17cf58a7340f8d7a72020ba9301d63e0aa1e1f2b02c66a0eeb6763c4c72077f90a73ec0e837305bb47bd822f6f095747989fcfc6a8a2f6ad1df1edf52b2107d36a27eba0b606e26cc73e46073eecf878d897968441e60fd480b6be22b7ac659b22b80d2b3dc8e59b1ac2cce1b4a31386fa2ae63d0519a16cefb2d8b076b798408ce237ffa91d1e8f4628d69326240d7be66b09f0b88e9d6657cfb229075b84b0eaf05d5d1de8f8540249f0bc6827eec3af333f243a77248f64dbb8cdcbb0a0dd0e65d502f72716d394de5752c6bb33ca0accf84f7cfbd5035703a401e348211cbb8b538af2b974f46e27d986ac32f3ab55f08afe29d759347efe9df8b23983e9c230e65529efa4d83805cee5493940ee5b8752b28b15a241e0bce8a07366d9093f196e8a33d6b268fe18c94595f7c479bb0fdb75b75fbe541ef6ec558d23aa971587d9f7b2febbe898df7f6fc2c43e25fe873d4cbbc0ca22"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64fa5eef59abedabdf9055d3b54e169fc1bcf5411d900ec3cda800fd8e25958a1cbd94a84da254cb0e4d12cc8dbb6fe81fabfb15a09f6e6726d5fc59ad0b7c644bceec3b0d2d94fa33390bf2657224575b4bb8b83225c6d8f223f7db250178f93e2645368cbe7aff0403b8e175c1f42670bcb01024253bbdf57d473cf0eb598a9d03452ff6f10a10da020b42b3428b64b21a948f189050a73e5826ba69e6149a1905497955c0635205b2b1f1455635259122a5e8af25318e9eb3893974afacdbb421d289b09681845acf2ab3ab9ecd4eb116a3f8817ede93d76017c7d59ee367fcc22debad58820dae81c2274945f2dce22c5858f7ba147cfff1a0884872a64e99190eb7d088eba3839df590cb89f98aa7fbc796f3dd368b442a26801332431ee6008ac4eed73070226e681933db87e541cac3eafcd821a505924234afbfe7ed25657400bbc2bc6eb6d2407edce334052e22b2e95022a352d668dd01b9f556fccce2a6e2127fca78bd0849bdd1199a81dc5ae2288b485becd92c821b229e6c36c32277703e8bb16f32793f4e8b97b8961ea825da087a5ed84dd2faff3758580a6f6c8855ff7f7a0a07d0891060962b856f8130096e3f1e88d1acdacbddb12af5648729db74cfbd852f5e079d43884213eab41892ae2e1732d73ae67680785b5b0ea6ba3383fe34bdddccbb423a3013818c3cd7c71b11d4d28d5379cb299ebb48"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c60de053703e498bed356ef07e609b842e54987075edcb28add49807caf05eb6fb203935c2248023ee093fb363afbf34d2a74489a9796cc4d6e24223de9021a6b2900f1c217207bd9b14f9b02968d8342a443f542b93ecac0fb197516b6a12e21d31eeb6a0143a7a1c9130561c504158178c7f1627abcba75b3b70f888aebb39effca04b24721777296d1d4025c288d5cb88f5f5157b3b0da890d6120dc8dcc82832c9ffaac523d8baa0d9fe2fc275077dcfa31a4a04dc8fa1ccba04548005f1f941158babc93b778d6a8a8590a5f8030f259d2de84a02f34de7f8b8e9e78275212adaf23a7c4984634f7281488ecc5fba0122b4fcbc2c4a97a9de9166562e80b49005de0797675751dab8a9c1beb2a3229bc4b40850af8fe21740fd770b32d0889d187625d3c710fa108db6317eb462207d27777ac3dc9d53b6ea5fb3d30ef52e51e05ed4f202d1ee3ebaa4701c39c2c1c1d3c15d52b2d8c5633633ef3b1b35f1b01e0c80012b658088075dd549ddfab8cb7f7b2ec6780aed558f2d6687182af13cb3f975791b9c5e42392312afdc7fed2af935a203e6e2f7b2e4887d100a8d9c0343a45fcb2eee10db2afda064f25f592314c112964bc631684f6f486173654020ede6d3afe13a8715d953b22c61e48b43371f8ce13d3da91770faa476905c893cb679b2ab00c72098c443698ebc64ad9b25bdea179fd746d2216c46d2f8d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "10f53cc3f309ec77547751e25b5c84c751af0afbf51d3ac3a03fdbb0000c027014bc01a9e8072813a03ebb01fdb16647e7702f28f719c57f12426a1679760fe08ad7b5492a9506846c5e90a3a242d4f854180e3827ee083c0d0a3e134f49981ff2bb513c577d4f3721b50e03c7dc05255dbd6139874c36caa38e22ff968c9899418d7fbd71c8efc1c0f55ad5ccdc32f3014710c5338df0b78c32bb3d075eaaa75b5397cfaa885c5c1ec2699731c92f9144c047a11f994a9d569be85fa8d56d7b1f9b7210d037e0a7739b7ad776364c71a60187842aa9e1fe6d2fdb3d584125970c4b2e80cb2bbaaf2747af0242575fa89e97ce042819c126bda142d7697a3e8ffa4dddeb19f14c37ec560fe24e6ffec4e3629dbf6e53f456ab17aef0de4f39fede7fac234ba9a26290eeee42123719ef6ccd32cd6fbbb66bb106d0115a73433b78acd117e97fcaeaa712c70f8889f295434195dfd2f6e0c5ee71b9b87c0253b8224bdc2fa7681a35ddd553adcce3a5fdf08dff712e0b15dd988b9c57c68a80fa878605f15f95ff17374e6c7f32fbc8ecf990d75e37d088aa6643b3eab08a8efd164c08d4472982776ee56715b754b06e840708cc364a620913aca11797729b14ecec8c65253d2def72217c7bbc8075025eba9e4ce430cdcce306fd3c7622b951db0e7daee889f1ffe1687d074e3e9365e1192f7612b007f12764b06951cf3f9e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bfbebafa5289b75ab8ba799c9884b8d7d11c89f1494c69d8289f0224c5bb37ba5256960bc41ed987d6023b15339b2800f88e8987efd9fd41bd2a1020e0ba6fe4bfdc0f47c76ce9b356c3f0007eb368ac7795cce3187e4a39aec899a3cd77cd149190a14566be4cac57681fa50a08fc4dbf9cb748515a3a47b9e26d99e7df74d3cfa6d54bff9f8873f8f1a7aba09f86b399b2729cd5ae28499aa8504e7fc5666d92bdb2790550c27a8a02abb1da62fef15516ae2cbdba6da79971c8c9952403e9d0d259c18080c70577c3bef0bf97ff2f50f4d13ad62591d37eb8d5d834a628fbd883dce1ff52b92af14ccb1f80bdc7ad3a8a7b2c29007523ee1f7d022e830b22da2372e6b4c518b3ddb87c5ba588348dc23e850e69cd3c84bb2a6e7e99918feb4d52c7f7fde05a2341afb37c5e700e6e71b69c6d8bedc62ff0805ea8b7dd9944a3d5519ad9e31677004911a2effa1ea0f067903c9d7bfa8d2201cdb0f4d52171ce2836f88d12c1ce2e1e06f9163705d5bdd554a6fd170be6e40ee9a0409cfbec2436cd671cc5b36c72031b66a9d660782e1f41eefd4276c718d95ae0dec0b465e18bb697fc55a08f045bb6ff0f45ae3bf60ffc6eaf0a7ed4046c5eb500fea608d16edeee6266a97a02d58ffa7ee019bf6b83bcc6bba79cab4235908e357980c3fd6edb1e2b125c8049736a21c8c0555add6fc79a879cda0aced1bf068416eeab"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4296a4d84e2deb7cfee58815ff45fcdc6d1bd34069e0f6886960b589dc0f0a3f6bd2133aad5a7b18e8de88fef2faa5c3376eb73fd68a9a2bebb4e0868be2fc651a1b90990706b5b55a93a5d5eec3fa6219aee648da92da4b3bc5a871b869ff3a0d613d288d6c3ef811c7989af5275de5129d6e8d63f3894b7178f849282cffdd35ae5db457276465caa2977591b4670d760841bfce02c6c2f9dff56d95b809751fab57c88984367c881a49e808d35d198cdd09c7640749c82bb48d3b63290ae180bf112baa4afa4c9a3e73ac836ccfbdff3b1c2a1139d7978033f414f67f96a5115a2a2c1c7f691ca650b7fb09fba3fbfd3725a5da1e6892f77dcad951c8d70665e2ab232c19049228faaeedac53f1f578bd6cfce11d1d76f125d57abed74a2b3f628abd9918517d64ebd73ca1c0367107016871c5afb30eb863b920e6e4e9edaea6b1a0e68c349e3baff164aa832891cc4a1ba813faf36f4324d4446378f677aca6636fea20b3f6e17f67bbb292b4636fb76729140dc24d3dc7ef025a197d41ced64eff999720dc329c93c9bcd25dc8ae679b984475f8ba8f0b37238f7d11096c27a5822ad24df34da8c6937546314d1ac74196f055c8c79fdc904b3fbf7e2eef8cf5c55c0597d7b13e5e4b87abbd32bd2b472e5089185da2046e2cb4337338057591dfdaaede722894f6e97498f6a0ade617a7aa28a564a170b1bb5d65b9d9"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c143a56b675620e3a9e6f28ef05d458bc3dd6413e8f3ac106b2a6ac812cc18c872187a9a9c3d652e60f73865f8ccc9a2b9512db04e8235a5a3eae73e905655165614425012fdb20a767a4b3a9ad8e12b2a6e923124b032c23b82be1780e079f896c5c1e39992a0c19a66752c3173db7ce4dfd505b0e1af44edbc36381f286b2a0761385cc7b3ed5b12acc9eb153e5d5d39e0015c87f04823498bd6c924e8bd2927594106e0aa85d0faab8363c49d68405d569be78f80421cf3f45f65ef9d6c0d3a03fa20ce59e437db3927ebb099aef359348dd1e7f16a24e6f324705b5ea6defd6deda5e170f168c25f3accdd63b28d613983007001900e787315a94314eaa1e27b36774968447cfc8964460813c7ec44cfbb6d02be6cd137e7e64dbf79db9f38c1041f320c23f7c7cc497ae3b52f943128985bf5a1b8e499f2a2e644618b155fc3083339fec535b62489133642376500006e42a83ac64bb8041ff8f30bac504be76d30d52dbabb64e97b737c161f3788b209c80872038a947ce735ad0ebc93faa0504eb297abf35d8efb84272c3da21333933380d8f4d0535a2cb7aec555983899d296743d7b3ad52550698f7477e0d240102aa8b84a353baaed6644ccede335c1563e85d4eda530d9c3ee367a6ff58f30f16e8c8335ea3a9632f17015f23b40a9606d83bdefa8250bb1e12bbb70b85b76d6939186ca469eb7e09ce648386a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c3228099349ab3a9bef90d88a9c72754b861749b8fa71f05c590007c0845a7e326613e760ca9d3d559f7b1ecc69f3d7863c0f20467a7001a5debdcffd23185d337d8ead09bfa1eeefc7eff40a8f3498bfd7af921ee0a824ce8bc457a69bfa9a2d2da42daf0081af186d4519f348f8479850ac9d6f1221a2f05a084beee15886674386c13abe95c6fa14785395ae1b7299fc94ff063284b5f518b5c21e7fa26853613b498d181dda48785881fe69516f5857a6ebc73fa6e635d00694d992720d845f3fcd476d387ab9e9144c3eee1445de9b3ac5c3be3ba4eae3f250501a70fbb9d411915649b67d281065b31274aedd36e738f50a272ef25ff6c266630d6705e05be7b85810e9e3c6777608de497153e42753f0c9eb12a1d00c83e7584d22903d2896b9e04f8e3e199dd00df1ead8b9a3088a39df6e2cdbb05660b3810653dc9ff490d15c90d09e14299f4b2753ecdfe309466e338618ff7e5942a43486c6dfea40af2b2b3b167e0547ae45ad9c6151638b7b2b1f1833bcb7952e8a9b6991c57ddfebd4943551a8c090fdc190259e15f3fba231222794039e5266e980b8d433f479e73b50b490c0cfbfce0f7eff86812aaa2aac4f5a224f52a3c3a001dfde01520e7887e987100d927e7b4a1c34e6fa12cc9d7207f9c5e746e357e41a73d289942ae0eea1e8c7338590809cde50470cef16868b61c407b8be2d423e8efec030d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "23e08f34b0ab119e32d53bcd2e208d22f5343838b3fdec9ca5e2b6740e42d75bedd1bad38e989ae12a3b1cdcb3c911fe745d547fecc9a54e495f7795c3d7d9c68cbcebf1491b7e47d2d0012202d85507d0ff5972e4948e32ffbb5ecbe803b989784fc2f7909b75a8d64db5aac6bb8a65706d36c0e931f30aa0de66395a0bbd3f882be2f98bb0983a167ad1a647d871364bf457d9fbed82e4cb81b468f6e0b4efd979fe8201b3e755e3ae46dd33f095fca2d66b0833f935cc72305ae3f8c8acb31c72a8e2e065c10de705e5e58c294e3c04889ae9b472a8f508862facc4a831633cb2a6e35fd52ce2e6c94bd988bb34cac4bc21e91f6351c3947c2590a6643166749f2ca3390e5a86d6c435acb6933d21fbde0eff220eeb5eaef621cc99ebde6c900a8ecb0febf6f587564ddd68599595901d809e0fdddbc2907ac412e32a1035bd00ab014242d25bd59f3045bfa8e2308a6d2e4328207843a3a5eaf2a43d825c89e88ffa1ff386926efe13603b1056579e3e01b225653773fd883f357ecb76c959f23ad8ea084bf33573b1b8d8f4f3be449be3cd9b5f5a0f46c4a2693102fd0a95a5ea77c97e2d11771ad1e602e1a73635ac79c009b24ee6097151e57376ec4d29215528be0b9b4124d0562abccbc18afa6cb8fad4a40652cceb9eb994c08656e716adaddf466cfa175fcf61fc2a9bc829ad6fb84a6d9093008d50460a6ece2e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f0630145643c3237eb00d056111122625a32c38da618621e55a1e18dad8d55be7f0f44350de88b24e4bd474987a0592798ca0d99cb74f98c44f9b2ae505f5d641a0183cb0871e70627f4df10bc32d7464b60709dde638272c5df0abc9c1a9cfb2f509810593e2c185bcee6b7f43beec39af2eed285d135734e7108213dbf739ab0bb5a3558d60c6862f5db428fcad2dd9b5ce833c59bd5137b05e007b90f3e80fb767a441b18d611ee112a2c3fe57e83372137abdbe1c12e1b17885486c5a456225ac73bc29e07c50c482e7f0cea645661169349ecd3bd7d48ec6c6ae1eb6852829ae07978fe18b06fec691db17b19a2e535de184c8f04bf919b4d8bcbbe0496fb9d06bbbc0cd130e61bfc603e6c53362f1a7625730829d804bf67dd0aced669cb50bb0bcb891b08e20380edc7ca95d4881145606ba71acb59f480abb858d79b3ada922dfcbf84d0bed36c245d3c02631c5cb7f3ded31dd89b22b3b5fc362b16e2acfc82a10a103753258b25b1e19be0c16a44fed0178c977c625114a6f4d0e280b68ab7467688f40bd5b17898a624089985d364657905e1e7f60441b8ea777df69e539dc4cae3d437b83e426b374fbfc3ebff29c347826e57bc9d701a231f1e04c55c04f42328aefacca38a7c597a361dd455469cb219ea5e0cfe3854b006fb592efb5b40947c4cacf6013eb9bcd2850fd3323c51128bd843f8cec5151be8d"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "81865d0367fbfc3614cbeaf7cece0191488f9931de8327f2e95a3d2e81dab35e15351d02e6adeb91221e22d0e16eeb190e99f0cd1ef075f0ac75d537fa259107e40235845b7348f95b6b407afdef614855295c8d2a033a38db210bda2020f313483489687f58277cfaa766bf616a84b44f01aa2f043ffd3315f5e51ef2173827693a54412594d92444ecaa042bbbb1fe7de1df7a66a0b69b4f5576d6883ace79455b55cac8de395ccd32370ccedcc5a143c5ba1c7191e55755d27175e56f4e33dbe9747e12adc910e0ed921c304b531f24c5516c87338044f5f87f2d255a00a654fd5bb187b000419171d69c548757d7d8ed2f75b82ec067f91831004261355a8dfa1228ba7fd9ce8c3d00bceed1397b1dbeb71e9758ab59c83ff10577e4cb9faae06ff81431d8f0362863e08a2ded7b8f6775b6a9f6012fd9ae5ba330874767f65f567e8c4366b519124bc4bc8d42478981e78b235c99b38ddfb5ef36fd4e8810b08b1b4bd996ba609b160286c380bafeb4102d8e1d76b629dba65087f8cff9ffa681631880ec3fd93fd4ee8fcb247be380c5d2e7b80afd5fdfa0969640754e1dd96881df9f2181132da84941a20b99e61704c85b37ad5fbc92d7ef7304482fb30cde13c702873ce0fd97d8a49cbe682102f842775292e0718ea8cd62bb908d2e9bceea6db3db6688e1f64690f125d74dff5b05ec951a1f62258551e7533726"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7ee0be68463d58f64d9f03f855d787b273b87e2eff7f76807d08e092ebb5b2569848fb02ab09e73baf820b3de799656766bc0b11f92290bd716f7ad11e8c5444a8aabf070139ea3202b4ff8e879ac0d54458b78577f565a9473dd4c42cc6c03f7e689b10114081a0691375e98fa9cc5052eaa25a017ea84f2cf0a462fe43f9d7770f611c1eef50f2bc78cc25b122518cb2e01c3c3a08c1bb07b2f18c63fe23b352cce63eebbcf4ed3dee2455c86fc490939b0f5c306b92deea9ba62054e8d9669cd133f55fb1fd260411faf3e4b00e63141612730138ba6c0f39b4f8a731d735a153a81efd2c1236ae7838f537ed8c56ac4464df7cc12db6be8e46613b437682346eb180cf412a366a49ecd7fa98b830956267c5be805935d65dcd716acc3ba7333e0ce90e0910ce96ae92222bd271618beaf2918b19391d8b9759f99eab72997fab76d08fe052c0745c0b94009101a75a639acee8af18dd5a5244582a9af3a56aa7fbfdfcf89e52b74ab9a623347346136b99f8adddf699773eb46c5824dd0c744ac842e87010ff17b412e04f289327c76e5bdf0a9ae0c1c868d2de64e5ff68ba9fac76a2a1293966a660655e2f61dff45f8666d0c72780befe7ac5d5908ca4f84ac56ee2a7a6a77ba6217b702e5ba795406b003a79200e6558bc46c1334e37f338b576725dbb6f3e96c53429bdca6a2de359cc17305529ecdbd49eb6d7181a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4ef30432b31cbe16cbf660549be0a67f468e90468270523ab85129816b545a2c6ef97a4afae91eee8ea383ce6b228b2104f566e935d1f562313be769ab9443a43c987da452d33e499ae3edb7766d9bb0d6aad99afe1f14ca88c972aabe7e7eee7332f62e9b24648322d7bd49a1bc0f4f7e4b4346c0a6c835c91aa797d8e416bf70b043e4b34ed414deefd58c5a0411f44c7693001bb27649ff31b67df7177c81209647c5807514f2c2e28282b69f9e03694259f5d100c6eb6d71328588bfa633069167ab97441805fcc997d60bdc355da1ab6ae2b60e62ffc6d381c9d1e952dd16c28a4d3257cd00cd5edcf13a65c986cc0208476da845e32da8297d9783d40a02d54cacdf3fe0c8babcb870ad3f5ff325cb1a667090d7e7f76dfd36727087a7926f50496ee4fc0a02529910d7d889f49b8f938308b079fa1c50a468ae9914a18ba7dd66ae15468eee6a19c72156211843a0c8a78bbfb16f998a5d038744dbbe0111f95033dc8c9b2fce4048ff909492e81a4fa9f23c6f7d0faa2f05972f141230d9bf85088c5026dcc58566ef611ad400f67cc84c31d92def074eb92a3935d696a28e6e63ca1f05b99e63a0d7296e8e584fea305138df00604f2627ce174862c72d1cd479d7f797b147cdfa79615adc81ca247dc4a0e557d1727dedd8014d9f1b04b2dafa963e2cf8e1a91e5d0b3bc2ca720ac9147a68326d2dedf6c0769359"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7129292371d7b22e9dd90c589b257a05f6b3c1f32cac50804500707660ba1029d13de38865a70668d0a5c15a5a3859ec43736985c882dc120add6d9521939f84791d70552ebac7013dbb0bc6080b965a4a7893aece0ede4fe92607d5618d31c29a2c66666d1ff481afec318d9fa88246d23e96bc3ca206d68076b7b0a0496e705624d3b25719a5ce6768ac0370038bc8497a592195a12f67b837636a643f83baf606d56c4305a1910e277c00adddb17eada9d51137c2b04c084f5adad9545c2b0dbcf64011d6bb0c0b55e4269d61d1fe4b342d3ba89ebd75cc8ae8f907092d5871b1756bb6c987fdb5f17f8d2e59586aade8b13b66ffb251d09be0712e8420395592a0e3689bcdf41c00f5b6aa615e740c29840ec4eafa12be11a86ef257a676694735baef739d4a1829822bb727def16ddece69ab50b21b5320cfdbebe34dd6dc9aef6c02bd711e0782f6239ff3131d26aedb903a02a972ee73e38aa2b9a65cf0ee68b3a99d60acea645095b39c42caa835bf535a828e7dfa9b0b505ec1f1491c5cc4a14f50bd00eb323f77f92c353799acc4d7314a23ae53229426ceed294b2b3fb9d27fb1e2990b7da7b0eb3fb9f19b2fc3ec77bad012cfc14062efaf5a19665db0ac66c6794f12ec361ede11a1567f1d6d88528087d04c09f63bf623724df8f4c50806fb381b6007da6dd196392b97f6dd8bb286921a2f88392722729cf4"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "40395c52664c5c2a5db558477a536eb43f54dcb849872dd8af722a998454a7d4e3e0c750e9e28ce9a5a1aa5a80c5047a4cc1fb6957cc415ed0c35b1ac716c388d4b2ad8b978587748a32ea05e3efe802a0493c23518e2f8f2ae3836f708f7b0e62bf9f6faf2cb8164a003d919f70ae15d6ad29f2162bd6f2fc32744a719fa570c44c06dca5d956f6aa914e3bfea8c55e002fbdf941fceabfb4ef0b9a0e77f5bf2220f8df4f4343df303bc5b64e05c6cc8e52b56a4409801d82045e0394b25bc6eb5a5a4615337ecca71d4f75ee00974e123519ba579d9f22809ab4ca69b43a54b5eaf5f7de66cfbdcbb1966b9dd2a024b110933286a05b35aacac0b13dddbf501e2c6e79b1746a43d446011a93778256955a81d57a3c131cbb3196a245978436bdc5180e223301d80e0bf0790b2c65573824fb3a57854babd6da4e8c745933a30f53f436359d323ca5528db431b743ec54099a83b3a3f4d52e7ada2cf3dc6b9bbcaf82f2f7a5f0374691d3062e2147f71548b37ba30e646585f21e6e29b6a6d18cff02e6d0f8fb8159bc0b5aec1675a10acabdc1fa993b5cacb7128e37db480744493def85c4a7f4da084c21431e54965e55ea25241e3bf2634855f2a4a3e2875487597350bf3ce94da3bce5a8119d4ce2f079b02a93529e2efaaddabe0f7e5167f65a76c51a4b51535d6d3e8fdba90ac3994fb7a423ea61b6a129fefd08042c"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "74d5059316d892a4314bbd5ffb0a008ae5eb12666a16db4c9d4cfab723138b1e07a76734739d79e7bd4543f0cee8e488076a15cb76852f31df882545ff8b63c093f4306aacae3be854c8de5f51efc4525e4ad6ed2b157eb89309975b3f5ca0c51cecd76407f42f14a13830aa318d228c580a431ffe722f81225c6ebef9a9dbc746ba5c10265d1f4226c5979cfcb3d574b4295a60e845c579e1fafe49c69a9d00a598f8d3913d30eb0acc38cf2eff6d29ddc098fe9c5ad8764cf6d9ddd272e52e23b227cf91bc87094fc40670d76b8154264b6677806a27bf47127df5968b7ddf36e11a12125ee2d768638509ca7295ece8ef8e69f60e69a4780cf8b22064cc947b0fd61ee23e785348d95ae6f53fed4f3f2e7752e71f7997c733ca9cfe42cea7e7da8b124c12dc9181e663cccac357017024830bddb6a4d4d66199532d7449c54dc50563fb9264b14ed12309e5446f39210503d63d2674b230d11f35752544716703c0dbc5f034959008c309f1158254ffabd10d4efaf58f9b845280ecb9d763524a644a52ec40158ea69ccfe7503c4f684b09a60e98ca36d9279292e6df58fc4ff3fc760b0c0cb379a5602dfdd39738a4440854960882c9773fdf70772df69554341cf7f5cbec3f04be9bd42f9a05b6618354a8e7eae641ce7cf08a6f0e3b3cb3036a11d54b453bd73ce9ff809966d7118024c16925a4acbc96198fcbbb450a"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "56b844f30222e1d2552aceee4aa4c584217dc2efcfe7630cfeb1913e8e337504d1ab5d9f677bc61db3fe5f1ea43672928c1774b61bfe58acd2dfbcae17244b947eb30447badbac97cfafeb18c4173618359bb0f85b4758426307b2cda8e7285cb1fac572390f07a6ba4ca061be1232d8d375f722b03f658938416c9a6d69de9e2dd8a695c6ab8b2603295af1a50765ba921f04b8bad97a0caaf13cf09d6fc2503b92deee402a50d129749e74bd86032f87c66345624c01d654b06e7f1e40c9a8a7d6f68d63a85bad261ebf41d016fcc3ddc2d7afbc6ded3465a00c837ddc2c7193f84dfe87995013ef97dc14251770727488333cbe51c0938ee888c1f2bc0375f4827c516fa8f8618f78b0065d7b2921c404dc66831d3a4252eecbf39fc6db935e8755c41e0bf6cce022ae831cfc7b1e5bc4eb843159f0a331c34c9e5a0640f5a9606030c9d15eea4ecf2dda1467c73b07cac03a388383cbc9991081835067ce6cfafe4117c15c2162727e1e0862a5692c977e660fe3212903d4ea7701b6a0e9fdfdfdc052e7abfad03e121509ddc4ead4339dd1b7f078627023da57d8e77cd6e27a4a56eafb92bccf4039f072cce7f0a6a808ac3ec43f6c7beea456d578422b756a9301cd1c89b11bf51e7a99663007e40dcc963268b6522f064c8853b763ab8e770cff1562c1a2bca4fbdc7b1f1e83ef0351a3d8848501f72bdf9831510fa1"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b2c87a07a6a575eb4212210b8caeba12ebfc33cc0a94c783e7375f403bf1ae34b7cf025dede3dd4d208c388d994e18990146c7adb976e229740323540881ce0aec558f5ba2f680e06b7e11c8a2fdb9708dbcdbcea0ef29a12c552060ef4c8118da8ca0449827e0f2b9cda78cf898781140b083fecb8e02ce05945dadc2503ffa28f2975636a538d26505ed3ef8acfc33b24ff811dae4e9abe33fc0da2788d8f78d0748b88b277e4d0e2e3aefdca434063eb4be9d250df2e35813f4c090cb0e4a04afa50539e20d23a1c29fd7b0b877d684312728e2f42f244094db59cc2c9b8b5df4e8b0fce1c5cc004a1769ba6c3c6a76fc7c228332a800e39a0a160d71b2688a7d84413b68cac2980425e183252350a8212301b4d7941609265e64c96d52ec5f98b481ada4787f23756972f1cb3ad35543990c540a87a815b7d1056ce14fc929238281d96b07d35c158684b32bac8b7c27f4db51b21b05f21b1f89a33c5f773173d38f875fea3284f31e0c3fad44af5dddb84a197c464a732283074dbf4afd5403d6c6e0a6630bf00a5d80e5ec179b8e499db6124051b5cb4513a80a8046d1a6b4256a844e3ccba200eb8e56747f769fe3e4eca1584560f21e4fff97b7b5ad6e8ddcbef12b807d854971a7a3690803ae5f4b81407358bfd290e8a7dd0296854a66c4992137477fa042f51e8096ee51e331c55c92dba8f93b6b0c2593b36b91"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a825ce93232172ddc415dc6898d15acf6dbb53613bad96635d8b09aa72dedf8ea261edc438e51995734901ba6092ed60f5ffcb08d0723fe33b2e6bf6f8687e302ae90c8e4dc50f61c9c9dbb8dec349d19d9e8c64bbd92a77ba7a435de25e84a9d4e13d42e0c5ddf61eca2ea6d76c0413872719e2607708f65f89e938064e26a59f3ec08561fd85658c22c5b8628421802466e7d52d22968b1cb91b2a175326a2f3c2913da9cbe6735838c30a3648a3847e82b8d7f93cce73130aa7093df9050e5dc9240faf07b6b19a9f91fb8130be22de8f7b093fbf3699a87db8bcec52a094fdc17434bd6ca76fa90be7af6d0d04dbd7817a7e728cd0216265627691d77bd15ab94be97057373065f9a898c626f07198c6c9443c22c0cb6cad072894cb9df392c7ce3971414ad6f575758606b110404726ff64bdd8774a57cbf214f547f9aec87946129ae726fd2380ae34d2c33ceb257f221c2aa54db2190aad5ebe1f88c496f40e69b2588bbd741b86539bb7bfbac8fe0db72232b52c5e2a0d51341c4ff478ef0ae47b02d4f118068d72fbfe501b4669ab12da9d786e03f24344048cdf9eca25e6c4deed913a21f76afffc6a55591dd5827fb675c294bf838a6bea03e432d619a5745c674ba796093c524d73cb6038b3f15b5e173c6280bebfc4cde2cae19ffa5c215e80b3f6a37e6d6ce3f3928ae0135e703754d3de1ddaacbd145f62f5"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3af80a4af73cdef88f02f2618b44f262e2fce871c470402933c037284010d9f3eea0487911f85018f331d4d29140eb98f5c358bea611d250b066cc53b50341ad7630c4e2e643ed02dcf28b0cfedfea43a1d31b864cc1e79dc7a4584c62e9eef6b178992e77d5d86f7f8eee55c264dbfb51320c22ead8e4d08e7ee767c3532a956ea318e698282e236bc9ebfd03268cf3b16ba8f9e83b04cfdf1f6e4a8f1db940a7381d4e855451c119b5b4e46fcd4cb692dc60839ebb7b5c793a36b51d7636ab3bd708bae5364ef1e01e56e5fae2ffcaf90cedf22be5d26882b6d824996396173e3f062a4e5e23f469ee235dd813c20ff68089e21c8b85ea6e55286de49399b3807b7f1a8bcd74cf34619c24f7c93d658177e281eedc5b47357826a8e098470bbd3c9135de8b1f3c813f544744bbe2b620b9f39676b6db0922b56b6ff21c855c08f958702e23cd8e09626fcbecb8aeb24f7660c27d7feda7c276de174a40f6625fac4b089fb4c1ceeab9a9b26516032af9de43e208a7360358adf31eb5488ea962de16f9259c3f68b3c2e2866083d916fc9d281712495a4bb0e0fa75f007549b74a88a8771494a5bc1acd729527b6e0e8da51bd3798205567a68576b3451aff573aa2aff83a045c94fc7a0c1686e7d59c39a7110948e9a6e1562ba5bac8bfd8f7c1ecf02fdb4084024bf16064d5d913c4955f644c719f55e3b41214cc4a98861"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "adf6fdd91d4d036a28c3adf6f5bf0d24fae27ff263cfdb370530d8053c73509a2ad65b391674e39c36ae414b617ebf13a23341104c3c9471f5efc1811773d4e9d86927e459a7f3da02ba5959c011fd88383a65b90d4b6d9d38e8892ff8fe77fa5f4eb8cf11a4560197506adcd0c82e3eeaa6378880c247bffc08b10bae8b4499b016a07f91aacb60b587eca052676a81f0d2e43de70aff5f30b8a91a03f72dd36fdeeea8a1f1a99afeca2206b396a0cd1f626653d9745547340d9bdd1294c29eb81e06cf4370b8bdb6e046781be89e7b2acc506110ed64bef0161b79d6de85574378c3b14886734fafa64493b958f97f680777d4c8b115def9d06ae7aba156febb7ea16a2d5698f7c30e392902e09f7f2668b401c264f9f130c73e043dc17f4f4302cccf57cee9495fc3f8331b9d574df273c3517c9fe067fdd950698b9b4f412e7583ae6ddc9f5494b4ac4e77d6980b2e197dde1913c46d08efc5294749b157f62be7102403b316c2bc6e5abed50c4754ca7cf3040525d7aab239d15ba40feda42fdb5ae8c24627290d8c2adbfd3cc66bad62d91dc3d891f9b158c4edede7396fbe60f2f9dc9224a443c2145a848c74a6ea7d2901ff5b0653f384d9b214c2fddf7dab9adfbbffe6fe5e8e174befdc20285addd12476f8915ae0a3a925e0893c1311274b7eb0e0522e9f9c3086a7ac22876eedde1d12ff306568cf92a70406fc"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "704705050d3aaf34d80b752430cbeab69edb1c57141ee2384f7d71f82a13dd127e8cc5ccefd77b682b27572f9d12e82423f16d83c239d8c2c86c0d4189543f3c023460f1558de2ad7bd2595546f3fc43bcc6dde62469be63798015a42ac362d05a02a58590246dd96d63c48977d7053c7ae2ca6237f96fc85d097e2db5a095ae064128463adf87bb78b6f2311d4001230ae47c751db984eefb39178a8eea961e6cf6ae2bb00c4c1b76784dc3c4f15553b392852bde1b4473aef4af67a08bd326188581fb2b4bafcc5897a7d899b82285b7950048975e7f41f939dfe8e7886b5aebc9ef68507f811351fc5247703e77ff7fb4e9a4e38e53ee282b5065b36a7f2afad7faa549cf3d61e12af21ee05e8e40c11a6ec07ab14b941647af2ec949f73b703db2a557a5cbb6bb8bb6c648d8ef605abc5aa213279eff00ace6867d96641bfeb945622e037a760a19e0fc35128ce6ea56fabdb57a63f5bacea8679b1448c3a505def4c23bc0b9d0f15639f8b563b1add4f56f34c4fe711918b0a0d45578147f39d0a18c3582c679157febc28dda1ba0e6a1a744bed05d1efe68285adcdbb2bca22a1cbb97ef8a297efd59daece1ac12d349fa90830890cb98140317374fb71d3b58c90341a420d99b074136b273bc6ab9a3ad411c72b1a9825c8c4ebd32684c7f8f4f7c91eec18bec66a7d7815c1ef5e1d2198dcd5da56886c6ed01c98bf0"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d2"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6ac9c5ba00f90253c3d79e0a2c65838f7c936aee41000e011ba80a7f7eb2523f155842871105d84c07e9405131e905a72fb630df55a867dd4afb88c86460d32864ebadad906aa72ce8691884ace5d0038f1feee664f92b9a61deacab187af1c2774eff2f6e2c2276b341b619779401f31979ec58efa4dda3cd8475449f140cffae69aeaff3d601ba69df12e5668c9a89a66fa43169d5dbcb1578f8ef57a5df6e9df7b9604242bb8ca3a8fe32c359f24b050d4876b9b23c6ebd71dd1cc6f1653c720f2aae463b719db0b3213f8e3ea5ef72a0c9a3c22bb73751804d23b13a79129add9cfc964a2a64ae3ec7aa2aba10035e6b81c56d6741c23c926a9b863dbbecdd1d3ac471d28c3836a967aeda9c8c760831d54142aef98cf724b12cdfd3d559f91c66327bf93182be6590cd83efaf9cd03cc05473d82359d1243d25aed927429e5cf9d6119577d9962f6593deadca4d3bd942dfc71ec4ca124b1c0531d45688c24f5159ab079b5af9747d3758899dc17dd38fd26293ea0abcc36c4ad34fb060c2be6fcd22d463add4d717286bdbb26340cf0ab4a5f2783b898b142a616dcb26e258e87116525fa06dd76436202f8496458c4fd12a2ad224bbf8b8445454eb9a7f46af4d47a8c2af15815e18a1c967e4b7cb6ccd04f2ba11e789df8fd84ca4bf06cb62d06a4baefe73014bc174a59a11e05ade08c76395df1459ed6e9593c41500"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0000727f107d20a02c2a2e530a78fdcc8ee88816badea1204d4c6a3b116776217f86f6fce6612cacb44aa288991146675cc0907094b5f90a06f0e940c886c07b5157605102c670aa9927fd0f2222b737890d1cb905f0fe4b47e67d254e6fef0f2004be64c94ba630839199b3656abe2c6eb59e84584bb652a181a64895d52d46aaebcb46bdd5eca4655eee4c340649a49a5eed60a2d3c95762bf825f622bc48d05fd6813393d39021c0db5b2104186f5cd00b203b43ca839c192755b40a8d946d1db6b0d2d7df6ec6929e5655396d935ce9d45bd7364b1e8e2bbc316918d33caf6a08ff1c8404fb66cc679f03f9ed6c5997f72e52da5df41af58893129bccf2fe3f2ab7173fa227f24c30438e064c0c1e99d3ab9bcc929391893187b9683cc1026546b6d21c02fed28fe1c43bf1eb679faa560375d445af434fdc2794ea44fea6445a8e89ed6c14379f756070227b20cc2c0add3a6709be39680eee5efac9697f45d2122a51ee64f9ae310c6a9b85d0b300528b858581d59e59c7755a0764c59cb81d355396042cf8150c91376660bc737d33144fa7b6d7231fbd43c16a79d06de0fd18a53415acb352065cf169e82abf94a3337e6b525ddc3d25eb6516208e9f832168faf3c3a224612c9791369ba2ab85a701e8332b738bf2942cd20975d2edac2ece8568d101ab8602d58fbdf652580b5008b499aa06062bb99697c41ce8e34bb"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "727f107d20a02c2a2e530a78fdcc8ee88816badea1204d4c6a3b116776217f86f6fce6612cacb44aa288991146675cc0907094b5f90a06f0e940c886c07b5157605102c670aa9927fd0f2222b737890d1cb905f0fe4b47e67d254e6fef0f2004be64c94ba630839199b3656abe2c6eb59e84584bb652a181a64895d52d46aaebcb46bdd5eca4655eee4c340649a49a5eed60a2d3c95762bf825f622bc48d05fd6813393d39021c0db5b2104186f5cd00b203b43ca839c192755b40a8d946d1db6b0d2d7df6ec6929e5655396d935ce9d45bd7364b1e8e2bbc316918d33caf6a08ff1c8404fb66cc679f03f9ed6c5997f72e52da5df41af58893129bccf2fe3f2ab7173fa227f24c30438e064c0c1e99d3ab9bcc929391893187b9683cc1026546b6d21c02fed28fe1c43bf1eb679faa560375d445af434fdc2794ea44fea6445a8e89ed6c14379f756070227b20cc2c0add3a6709be39680eee5efac9697f45d2122a51ee64f9ae310c6a9b85d0b300528b858581d59e59c7755a0764c59cb81d355396042cf8150c91376660bc737d33144fa7b6d7231fbd43c16a79d06de0fd18a53415acb352065cf169e82abf94a3337e6b525ddc3d25eb6516208e9f832168faf3c3a224612c9791369ba2ab85a701e8332b738bf2942cd20975d2edac2ece8568d101ab8602d58fbdf652580b5008b499aa06062bb99697c41ce8e34bb0000"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0000727f107d20a02c2a2e530a78fdcc8ee88816badea1204d4c6a3b116776217f86f6fce6612cacb44aa288991146675cc0907094b5f90a06f0e940c886c07b5157605102c670aa9927fd0f2222b737890d1cb905f0fe4b47e67d254e6fef0f2004be64c94ba630839199b3656abe2c6eb59e84584bb652a181a64895d52d46aaebcb46bdd5eca4655eee4c340649a49a5eed60a2d3c95762bf825f622bc48d05fd6813393d39021c0db5b2104186f5cd00b203b43ca839c192755b40a8d946d1db6b0d2d7df6ec6929e5655396d935ce9d45bd7364b1e8e2bbc316918d33caf6a08ff1c8404fb66cc679f03f9ed6c5997f72e52da5df41af58893129bccf2fe3f2ab7173fa227f24c30438e064c0c1e99d3ab9bcc929391893187b9683cc1026546b6d21c02fed28fe1c43bf1eb679faa560375d445af434fdc2794ea44fea6445a8e89ed6c14379f756070227b20cc2c0add3a6709be39680eee5efac9697f45d2122a51ee64f9ae310c6a9b85d0b300528b858581d59e59c7755a0764c59cb81d355396042cf8150c91376660bc737d33144fa7b6d7231fbd43c16a79d06de0fd18a53415acb352065cf169e82abf94a3337e6b525ddc3d25eb6516208e9f832168faf3c3a224612c9791369ba2ab85a701e8332b738bf2942cd20975d2edac2ece8568d101ab8602d58fbdf652580b5008b499aa06062bb99697c41ce8e"_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid - flags: ['ModifiedSignature']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8682d5bac51bb32bf283b8cab1172d6e8054dbfc672de6f35f33a9f7b3f0662fe19ec01a74d5cbe6d90351843e2b129d0ce30884fdbdcfc962d2721fec5b3b7f6a9db4a95b13def111c737cfae72d13aef4d0ea9c29181891505a0d28c5c8853ce5c37476654703ea2e7c68ed52591c182bc051b5d837ef3be064901be454967be52f9c7d406b7409e93308b74a826d3d1e6aedd8aba3f5f971824784167df53d042781b7c2d3cac29428c7da1fbc451680cc211517f9175ff1b2c00f819916d6d25581542c8f05479aacfc245e5894763db8e79849d3e2dd8d7178a38cd4cb7b03436c150c467540dfcdd001d6c8994b2f8b332705b2b5ae0c841708c83dadc7d647ae15e547403d689a00a6bd4de8602633443e0b7edf060bb7b529e0afeb1b4171f70a943a14f69c59720b4b5ae59313325685c102d992645fd23af12f3b8f8de79399cc6c80f9a0c006c316ff7a6963a1f8ef58a67d107e5b49fd8d7079bd45f23ef67f6a83127da157f54fef9dc01415a6cf7a957f5ffa15457a1a8bf831273f48f927ba8bde79da623a8a2784e7d8950c5fcbeef5868311acbb793cdfa54c702209073ad8599c4c74b31ce3b662399789febb36d922d77cddf63c1de3a6aba21d6d8ed54a1b48f48955602d0f6a4f5eb5546131561809236f0c71b8374290106b893ab70f6fec1fbc3bb6ef5e6c0263a7c8cd90c289968671744e853d7"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "12813153b37fa6c0fd755a1c7c409bb8169c5a39d045dff2da02b2f8e8897b0cdc6c2d40e6945b97006f18e1b26983f77b70bf2961b5e5f2759241daee8c56fca7c53c81f69d3a0341720d9761a4f7be8c068464e881c85a2c39e0ac6f74f6f5cb42df8c3713f66a282d7fba85b7a09a6af83a068b78bfe83ab25841e4bc67c9e40cf2a0974f8875fb81cc6a115b91f922419c44ea82b33187521a7e1f46c0ab9459b4e97a3f4a1d9e92403a37168826fa0ee914232afb6c4d7dd082d0c58885e356d0efb8aa9ae33d045f24b4b3182d5c54556f5838c449d31a49a3ac4ba568c248ed72c111b5ffabd991ebf5c48efbca33cb38996d584992c4abdcc7b93700ca03619412a355b41b000a32f6cc4935f942209b56a23cfb7b788dceb692343995f77daffa25e44d672f8bc451f776560b415d0d1bfe9925af1c2567a8e9bd15b8554d93377c62b0addabd27e8d9e0859f498ba8e03094e1d86d41e69f7606d9f1fac04744c3b7b8fc4942a846e2a3649bd9416d500b9895455fb6741ed8ed4f426f20ab40d8ab2e6cf6c63f5c290fc011768b317bde49753efbdfd12583f1ca79287225f9c3d3ed0c4530815e4f5e7ed78d14aec0d04142d0ac0fa3bb5d73b4bfda2fe7103a2ab40672abf08ef4d9e537b9f856d32450e2e41d9277be62ad0675d1a530709f2747f51f17aba10381fdc70c626bab45d51166b6f6ad978d2dee"_hex;
                r = false; // result = invalid - flags: ['WrongPrimitive']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                REQUIRE_ASSERT( "RSA PSS MGF1 SHA512 signature verification failed", [&]() {
                    assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s,
                        "RSA PSS MGF1 SHA512 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests rsa_pss_4096_sha512_mgf1_64_test

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_pss_misc_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_pss_misc_test.json'
        //
        // Algorithm: RSASSA-PSS
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPssVerify are intended for checking the verification of RSASSA-PSS signatures.
        // Notes:   WeakHash - The key for this test vector uses a weak hash function.
        {
            auto n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            auto e = "010001"_hex;
            auto l = std::optional(0U);
            {
                auto m = "313233343030"_hex;
                auto s = "a289625f9fe684d186604fa08140f7d522dbec8ae6266ce83fba2b6bc6305e2e27bbfb346165b4e110e1b3e9445ffa8933e5417dbd87e3084835b8677ae439609616f7b755bbbad33ed0257a170a3964b85b3cdfbce43ea3c550354a92ec8e75642b039e2b4d9bc77b84c6bc7f2f2a43a0a403a1992e008786b5e9e43fbe71bee787ecd99501f1204921f61ec0ca83f1a8fb7862efe69b104d822ff5170802d510fd55cba7dcc2b695db905bce4c07a702cdecf24381f49a9b95d4805f1eb51704ea198653f43c3f124a4347ea1becd138cc3fd43e813ed823c373a35eb9060bcbb8fefb1c453c72f1f6198747577aef14ad3fe144b7d8de1bd6a123bd9f3f96"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(20U);
            {
                auto m = "313233343030"_hex;
                auto s = "740cc94a43653655eabe5a2c9f883a3784cbc5b13161e05ac0849cee39b2e8a42a0f53d14b47ff61d143584797ad0889b26de17b0c27c79a69a356e2e3eaee2b8675b0aaf68dfe682df23463b9b780f5b4d6681c00b27277e4e7839a333b022a16e7b75418fae9d5f5b3b996427d518eb1a696ac83ce6c5107efae577859b814100f19c52708481ed03d038a4cf6039f91bf72f4788dba51179e3c95c750a9432af1044f7cc758572ff11c537add14a6618d0fc1064f762485a0ffebfb0cfaceff4602367a231cee6ea2c8407bcc88267f42189c02e3438e62e3825d8667d1ae221494d4e29626caea3a7f5d2284f18862512cdd4cd9cfe1d8d57cedc9960299"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(28U);
            {
                auto m = "313233343030"_hex;
                auto s = "9a8092d3e759eac9374356b3bda80d87c6cd1f1188dc894f48bfcc2d15e99c65ffb6353510998a360f28bd636c61edda93ebb903029feae9b2c3935b2870f9a3f29e044f3ccba9a08357226d48f760158cbe5bfc0d7c0a2eaca0b1b167745bf26ea1e008e7377a085f4bd685fd5ada6602758e27541e6f270adf6d5b1a2b6c65a3757c5b3c4c29284e7cadbd39f4cfcb4253e959945651c60eab57ac0170da7ccb0c8d72e760e603c755a1b1e1356e968989cec1b9e1273ec2c572ed7dd0d0d29c0ad1e77692b0d79ec60657fc21b746168dcdf0d05a3ef1f37a4ebfb199cc167d94cc2c9b75dddf113048326797a6cfd6c9a764a6c71131e5f5654a93fc83a7"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(32U);
            {
                auto m = "313233343030"_hex;
                auto s = "3522943f158039aa68354e3c51eb6d9a496f5c7e7c33bfe9a20cf98caa710b88b18ecb6d73177787479d5064ce3deddc13f98998a7207118de77029e8fd5f012a9e056b972a974cb5b087b6564821af89ce3b64348095accdea8ad7d05cf3d21d6208365a1d2fcce7cd964295c963e5fd495448c0926de0950d12c42e056595295c4376484fd7d0dc6feef3dcb41ec5a0dd21eef375e65523bcf5af70a92331beb0c6b5ac445d6a06cbebeed0083b746b3d667aa366c647313389a2d9b61d41eaed8cf2db8b4938115700967432dcc4f383278b4a397afac04bdb7c2f5f6051854174d85fb96525c2ab7bb58c0ffb481efc29d08e4ad1a86ccfcbdcd98974862"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(48U);
            {
                auto m = "313233343030"_hex;
                auto s = "45d8ed4982ba484e0bcfca14537d607fb6c3f8f444425bca05cf29bd5f92945f0ac211ccbc78d934f6fd24131ae88483547aef01b4e70acd6f84eef74d4a2de40b4d15d38a0807087a54ece36f268a60b70c500b72fe0ff49920c63c0cbde6e0d9100f4e50ea3b5e11a595f3755878bb1e03c295d3e73f1ec32d24d629f2fb469cea48346c057abd64f6bae4cbd0fb89076a1e42bd5260cc5691fee46762136f936aed35cdb6e1579d586fc4e166fe252778a379c134562175e17eecf758c11eca66ad259aa9e51e504d0d317b1715bd224706d65418a4601612e482bf95c1e9e9278e5401bdf1ed24118b908a8e42c562a76896563fe4c04d62b8abdb61e4cb"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }

            n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            e = "010001"_hex;
            l = std::optional(64U);
            {
                auto m = "313233343030"_hex;
                auto s = "63942e89a56b634787dbf074e75b0525e8bd3b7b8172f2c27499272b939a812ce2f501eb95a64603f9bc7c2120ef2f7133c3b2a4bf6445e2257b59e57022c879f8d60667ab8e28dc972846670858fc0d5bdbfa71dff870aac96492214533383d8740d84ddf61d46f852c6bf0bfb2d10c2e4d41ce7eeaee028333dfe77650b53e66cd2c2991b80c32faa33aae27b1c30c0ae2abd759c59eb22e0d0597b6dd63491e0c95048c074b1d64d8f356e637669d90974f4eb29ca184468bc1e2d24cfcd36e395c41cf3703cdb1a5c206fbdd4763154e5569d04d75998e6f425bd42f80e0dcd8deeebc3322aa6f50aa873345d7c9a0522154b6de2387664ae33764ffb2a9"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s ));
                assert_rsa_pss_sha512( rsa_pss_public_key_view(n, e, l), d, s, "Failed verifying RSA PSS MGF1 SHA512 signature" );
            }
        } // End of Google's Wycheproof tests
    EOSIO_TEST_END // rsa_pss_mgf1_sha512_test
}