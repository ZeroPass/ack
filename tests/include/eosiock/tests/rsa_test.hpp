// Copyright Â© 2022 ZeroPass <zeropass@pm.me>
// Author: Crt Vavros
#pragma once
#include <eosio/crypto.hpp>
#include <eosio/tester.hpp>

#include <eosiock/rsa.hpp>
#include <eosiock/utils.hpp>
#include <eosiock/tests/utils.hpp>

namespace eosiock::tests {
    EOSIO_TEST_BEGIN(rsa_pkcs_1_5_sha1_test)
        // NIST FIPS 186-4 test vectors
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.0
        // "SigVer PKCS#1 Ver 1.5" information
        // Combinations selected: Mod Size 1024 with SHA-1; Mod Size 2048 with SHA-1 ; Mod Size 3072 with SHA-1
        {
            //[mod = 1024]
            auto n = "dd07f43534adefb5407cc163aacc7abe9f93cb749643eaec22a3ef16e77813d77df20e84a755088872fde21d3d3192f9a78d726ef3d0daa9d6bc19daf6822eb834fbf837ed03d0f84a7fc7709be382e880e77ba3ce3d91ca1cbf567fc2e62169843489188a128ec853079e7942e6590508ea2faab1cf87b860b21b9546442455"_hex;
            auto e = "fe3fa1"_hex;
            auto m = "98245960c6d4da684d9da2e78cf59d2a63ca53ac39740c9f44e837c9042e0c911115715a17251a0f1fd5f5ff10fec5ec75900c5e80842f3d4f11d59f6f2390df9f09bfefd66db3ef878a10fe23997650e08c6180b9ff4e28b56c20b06d9ec163c8680cc80a96eb2f0d24bc8acdaefa7e2b2819baeacfb188fe5fdfa10687e946"_hex;
            auto s = "1ea751e8c5329879a9003f529eba19514c153ee0bdd8caac9c94fbbf95a41ebdb9ad54a976bc1218a94b53e69cf3362b0472a8781b8df4af3e9aa584099c71f9622a6fcc3fd3935b033f68c1c970676eb6d2184056f1b524acec26c51df6dbe9bf3b4e1fc144b8edf563a03f28ad78d457485b4a57ed0ce81e409245f5ce1014"_hex;
            auto r = false; // Result = F
            auto d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA-1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA-1 signature verification failed"
                );
            })

            e = "fe3fa1"_hex;
            m = "d7eabc57c2803382d1deb56a146767ac80c89183382e01990bb5aa1d3d2391168ad6eaf768fb7d738d014f92b14d7f0595306eb7441622a49800edee0134492d82320707fceba902af2e0c95fe634a85727bde6f022709a09248752db9a71941c7e75cb107b87dd6414d329b830f8fd521932ad3fbc97d36fe778b03eee6c7f7"_hex;
            s = "9dac630d264a6a53cb81a6901ac0baabfb24d73b60ad3a4ed3a0eb98a2118a573c3cfe294178fbee63da7c27c5826fa5e6d1682eb254da53a961ba4473672f57a27aec22d4b205f79819ab4cb18b0f3842684bbdeca71cfcbc30d1866d22c9f1fa9dbe9e1a2f5f6f68fd4fff6909fd2c1a9904204a3cfa30da4c87de35a769a9"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "fe3fa1"_hex;
            m = "73ef115a1dec6d91e1aa51c5e11708ead45b2419fb0313d9565ff39e1928a78f5a662b8c0c91247030f7bc934a5dac9412e99a556d40a6469beb40e7b2ff3c884bfd28537bf7dd8d05f45419cd96bb3e90fac8aad3e04eb6190c0eeb59eccfc5af7ab1b85264be71c66ac25e53085c70b5565620152c32b0388905b3f73689cf"_hex;
            s = "25493b7d70cc07e9269a248632c2c89c8514fe8298ed84319ec664f01db980e24bbb59eea5867316792fec36cbe9ee9d3c69346b992377f35c08d19de0d6dd37482074cf5d3c5cd2b54d09a3ed296187f4ee5b30926a7aa794c88a2c0f9d09f721436e5a9bd4fef62e20e43095faee7f5f1e6ce87705c27aa5cdb08d50bd2cf0"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "fe3fa1"_hex;
            m = "de4dc041a283c488187ef9b75e701ab0a25d6ab6e5cf9cc702ccf02cec05a04e37507acbda58cec933938a8b4b75a4425ce4b82590ebf3c30cb22f982dae5fdf11152ea85a95e32a2e45885a82dc4bbd9921247ac7a2b8b37ba97e157d6c20ae738424ffaaa0cb53137b394f8c0bd7c961fcf6de135cb53e589824cb62a7a963"_hex;
            s = "1cbd45327f5bb1f7a86758ec9125d28cfbcc235fe18269442ea9bb9491241088c20b2652c00dfb08ed0f0002b7c6eabd5299174bcd42f96171cec53d9cee01fb52ebfee08089feaa4fc6e1da5dcf57d123da6a964f6d610e37af8a57ad31857eda5ebbbadafc6e02bf8f326fc4f853734b25cd56fed04ff647d50c3127fa35ed"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "d20835"_hex;
            m = "c2721310ab955a702b78c23fe70032172922593c30ec9fc4cbc55bfb26f54605e36830c56caef1fe8847a3b82d1e0ee696536445943d2f8729b087b1537b88c2263503951d3a7408b2f0345e2c4ff0e2b9a05acdbc841e6a683918788e19c4d0b363f648663ecbd6d1fbdff98d9bc054bb91a39c50c956b5b0e876187fd6e278"_hex;
            s = "4efb676a7f2214898257240803890a42c5b2e746928bcded262af27b68cf38d364ed7d5989ea93bfa8b5194d53708120864bd78367cb14dd76e2f983ee9190fca55468922cb3a7bfea38dffb704e81cb9bfba6a2b1b6c5af6814a812ac53befffa170a1e3f70e969078a9fe9bec58cc4c2d7891171949ce8c7cf20478b4ac1f0"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "fe3fa1"_hex;
            m = "43226431830fd187e5fd0ff94bd3b4d1ab40074e12ac1d3ee96e42cf783f9ba3a8ee09220d564f14238e786fd85f736d4bfb01e2d4ebd1cd444ae82d6e314716e672c80308894a6e3ccf0d9e79f15fc108a1793a8b8ba43c3d8ba0987b1d45d384156b7c7d9008bcb82a982f3571c2f2699a38fe3f73dfb45d9930b8a8ebde03"_hex;
            s = "34ba929fd60fa28dbe9f60c08d6b55cce37e888ac2adc9b714e5796a7a600e95449e70bac5814e3f6826df7b23512d17e343e62881c1a96970b254bf26503b0853ae509e39421c94ff844cb65683f84200acac3e759f191fdee7d65969b72873c77d1e13ffb13153940120ce5cbe2076675e844d6f7588a9ac129cbbcfaff3a3"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            n = "931a92071b310602a55840b8c0aea51e3562513e81010e1b93374cf4bbc50cdd94fa1dcb8d8b609e5dbea182c052e06d2a1c454755d9a279092221dc52d132e55ebe7234728a7692763636845a122e8752a319c5cf5065fb7c576460996bfe1e1b4fd319ed11400df2e6a18461f1a39c83996fe6886ed41be89cbcde6c764fe9"_hex;
            e = "a71a21"_hex;
            m = "85254daa44d5ba337cf350e0679f416ed930168fd179ea484d4cd698633dac5a8ea8e86c46f6e311d31b4a946263cf2f596f1e2ae87a1347e0e22a5ec9e337452fa557f23c7926e48c5f32bf3ccdb03644ab6e2d07a2091f299660bea17148da0f2382844fe7ea734ec7f0a71c624c4b43edeee058783498cf726000137049e2"_hex;
            s = "6f47d4d0ef70bbc71de2d6a88e044c6920dd81b030e8cb2e422a25101997e4186d00ca17bb6520b6d92075c7ab58ab84c7f4658bd955de37327817e18c3142ea6222b240b260489ea4008227de13b0c078f83909dd65852bfaa01bc9dc7e64ce80f35503fa9badde585652c9cd0fab0e73066d83ff9f343d4137778e3c09a58e"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "a71a21"_hex;
            m = "be5e8dae6e3a61370324e23ba572996d4c0d6288d32c21355162b12fa6db1da554e313e091a795259a40f2dd49edf5f3eaa05c7e4bbd8ba0121e82ad535a0d9062473a6be6bd107e2f9d7e4aca1292f65217ecf1883a71d9a69f449cf147f2dd8e92ec9996033b0a6d446fcb4f6ad83e2b79f92bb52b3aa9b7eddd42a72b3352"_hex;
            s = "206f738f2df12a70b0a1f5670be0c9c0341a1931d8fdd9491268a08bb42ca8dee88571f140bb7d4abc60f82fd284319e06b44aa9e384ba4c38b9a427e44013a2eed009e196a840f357cafd47485a978b7050342a46df3c4840ee4c56b2dbe605e555a3e7f6045d163f0641b6dd1da51a48c1e497d24db15f3b1a959438e18fd5"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "a71a21"_hex;
            m = "544c1e697305e865ac0c00da5c17d1d369449101d55c741993581f7799245f0736a41b65a6f58743e4f59b0cbf05c4c6300dd93debc1505e3423b2e1f4494c2b0c612872e9f23b225865e07f9cc3858cbfc0a42c25f9f688677ae3b05e833c857d8c2cd664866cc9b364b77d1cda7eedbd64dc18ac8bcc5fd3649a2efe5997de"_hex;
            s = "73d0492938b07e39e4f611ee7f50d4558537dab9ede3f44b49448d88e447ae07790f969ad8f15c327b540486135cdb6e0a9725eaab5e343b64700233edd13c43cdb25cbc2f5311558152af4b2818be52ccb8cd0ed4ec475e7ff75dc7d56dc999b3d15b319d76c5dc6f690ff977407c1789e9531941062881b6ecfebb6dbfad2b"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "597bdf"_hex;
            m = "c18b5b1847b7e397c39a6f90402aefc1d727f11418f31f17aca308ac3956230286c510c3e01c228fbc091baa9d1236f1382b6b13d688eefdfbb0f99645d3cbad965df12f76cbc49eb2bd33be494dc29289a0d38676ba24ee6b979aaf04773d3c3a7983c5d06bd1abefe13f360d849c8a13adb2d7be33cad1458173603deb8098"_hex;
            s = "0e68bca9c9d1332ece050f6ca2cf697b7b00a3aef4f3925dcc34449be05ea7a732165abfbf808e0431d6266d4d24595b94b3921c877105c6dbea351de2047b8e7373f775958ca0e09a7da0fc0c74638d3d2b42a5fdf557d47039a0d3092304627fd2537f907876180a8ac3b4d6182fc8b515b3a12f3601ba002ec59ea0072115"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "a71a21"_hex;
            m = "992fe15e5f63f165df61ba064f593894c4db4fbc489974682d6fabe4a1a0b13f82637af5739edeca2ff18ff91df64e8e25c75e11c3c13964598883eeca4b3cfa444a39595d95d54f6216e4adebd1e83ab36b8857a7e93de33dbb4f5d07f9004888ec06d446d03fba20d8a168e273705e17ceb3d81f9ae8ad810ff777823165f4"_hex;
            s = "233ae74861a1c0db26a07165eef66954400a4aaf2f12a4f0b66ba5ac0549669c6688d5b35f1e5b1f8ee054dcfb87d3ffcf55ee5c3df6753f1cf838a109370f1709b1c77f6a8a5189c0eed565f930c01a6630dd35130cffd12ec4a02848d77f5a8661f42e087277382a36e504293492dfa8a689ff35d95343effe0baa9a9a090d"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "a71a21"_hex;
            m = "ae004a585df79c01bff18adc7fffb88ff91c020e9e0208119a43eac4b59450c0776cae3a90cec67a77626e8f50cb934213357e48eb2d56bcdcb6e6cca999a1b2f5fce3e6a8367a9194e265455932dbec858790ff003e33f9a8cc3b0a380de30f6ed973c26dd9c22e6098f96760dd99779839c09ba6dca8b045ac70e829991fc1"_hex;
            s = "3d954f484b59c38ef3103aa65ef334c81d8f4619f55148c2d95f5d23730cf6764accdac01405ab16ac53db30c4c00d62b2a34bd6fdb480b05e72ab02fe0bffb2d67d17f99275cb9ff17d87a1a78ee3531cd5221af5052e3e67b01e9c28e52bd99460ff28a40f618f3c7da8452f3c8172886b7350435dfe64e399e5483c540156"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            n = "eb3b1cbf5b0e88bd44b8575e6b40b618103dcb9a51d36e83baf5bf1ab6c0e4261c12664bc1a4d2216820e2dba9ff7c98b23b58ee86e738e0633dc916477e94be2fb8acf19f532842dbb2eb7911f8f7d884ce022395967e4442396e3618f875c856c73f6b89127646df29ff9971c0358fbda0a7673cc08c3f3f26d71411712a53"_hex;
            e = "6ff82f"_hex;
            m = "caa67650963439fbee5e64bb2f5f5a34f7a9d110ddcb2bfe609803fa1e8606d0475404db50f04613ec972347383ecea6353172847cfa815b2d8449102980c8788108c11b2e820f3802c83a09de86484726e3d5f17263664a860bfb2185c7e354610ad49796b43b721838d18989fe6f20b00623de27cf83d1537741b39923006c"_hex;
            s = "dec7ad8721af589e22dda67098a77fc1b5dd0216dfb77caa5d71bfd6ae256b49dcd20066694d6c4f7b20b355d8eabcaa92a8d91e077fb0241a62be5e34bc1e577a5fea84af6903dfe94fef4d626709ce5d7abe4b1ce420312f928e00c0f62a4f99409ee3f11efcdd5e390ff2b69af600c9b5738915beae3b7f6d3cce8af4bad0"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "6ff82f"_hex;
            m = "1ac33b15b4837e06f6be09f4c0e066cf9766f1154cf1988edb99e0399383288677b632c5e52adfdf75223a4424bcb824b2c7bfe248d464c65e9079f2dc51c7977fee98687fd4794f6f563d5f6445450b59c1ff95d24eadc9c02b68eaa5df64edf81475e5cba8d2bfab021a2fc8a294ea56fcbb163287fafec911b40b365587f0"_hex;
            s = "1ea5f7437790531ab98e5bc93bffd187c1d5a25ec93cb35c02ac5f96b188483fb593ccbb27a4bd9c335657aaf4d5bcaac7c10c7943e4bb4aa66776d35bba92307564cfc7709049b7c9b59e4cce3c6c6cddcbd28d14a0d91afe6439cedc65bca893e6d4347100296cf5b37b889eeb0512121dcdc0ccdc8c10d9215260028be3c4"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "6ff82f"_hex;
            m = "0c5b2ceeb622c694a8e3feba0d6a802b19713107f7c2c20b029b8612375680dcea49c10fb9ecf17bbf392ba20a590e784e7c1067da091696ccf7426b817a0c4f50e395b178c1374d564d61aedc05a2f13e9603cdeeff9ad0cbf45ceb96803331a5ef51dcdbebc391d7e549e56cb7651f5187b23f1aee774067597c9b5cb01c0c"_hex;
            s = "cb554ca80e9c492edd709f35092850a63ee94cd42740397a19cbeadc30306169d47db14b8225e0115437b25c2e2194af74636888a6995d4fbd574c3f3e0ac5896e9864c702019d5f19ae4bf1a5dd3d0f23ba9b0a40b7ab49bf95779cbde4533f81469ee9da651e913bdb62e75c1f166a61a45712d2210cf1267444558710c8d2"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "6ff82f"_hex;
            m = "cc8e2868722310fb117ca3a52e1839eb85d308b8aa00ed0bf0b76aec8a70eba4f0d14d2d85c5a0e876ce2c8ee59cb36947def6c40a587aa07b368ca8e8a08367018e45b984de0d7f1aa46b977cc18c0cd9b7bb897cbb2814aa0ce8f8c9843e03c86c19f2ba95dd2ac4a466a93aae4b3b05055ff148517ecf43e286c57744a3e1"_hex;
            s = "44263cea7850a2bd4204388df7a14cabbd0bc9f600c3a166d5ab003fc934963165dcb890c90c59eee6893f89fa98b4e162650ce853724e240ff642b68631fc2372a76dd72babe88954bacb6279fd3c92e63115869fcc6e7b6bd95116f9452878508b441227342d99f108dcb8b3408c0f2c49636ebf96e49d7a5b89ce84565243"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "6ff82f"_hex;
            m = "f2f47bb35772361b88df3595fb27bd1c4bc66da330e8d159afcf332a8e76b4890b749c6dce22ef991b0041214c55ca2a7f16bdf18c09d60f3a2a32fbb24e64d03306c55008c60b29b7471e787c29278cf5dde9ec1fc2549b818e579aa7f0f7afd2749e65eea6b554c47a74a271ebf9ca17e3989cd25b7386eec34a1157a494ae"_hex;
            s = "c57b082915a8946942059dff585c079a5574f665aa7962eb6c51b8abbc78aaabc40904586bababfa5a9e98030f46db40e7b06320cbb924a16e886b963222c7ace2bec5dfce87964f22e07150124166e58f62e53cba5f6466c6e56caa71be4b5039cf16a43d414e40a56007e86ec995d923db42fb9ec1054cc1f1e4deae73ea81"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8aebdf"_hex;
            m = "032daa37ba23c04da51121e7e470f7d21c1c377e0ea0d75f6fb43b93f304f0c5ac339c51922035a9636872f7ad2c7f042814f5584a9309a3166d045b3577f3a7479e9f7c7b2bbf055d466d49f0b8d708fdf537e5aa5905cb4eb26a8984fff9bf7f779afe9dcdc62b3eb3fa24d69d65a641c7e46f5779319fc18a58640b236ad6"_hex;
            s = "cc71562cb955efc4a5bd0239f688e8828d2268278cd8763761b1274386f7520cd54d229e1ca4799d7efcb6c3e908307ea9233198b148c3e4ece724b9a769abdbe26685238c6ee88299b24c52337eb8c4753d0af63d3163d17093e4da9caa4181f22f1ca36063f8aaf82ea2735fb7d9f0ac161a33e64a7fc89f68c29fcd3a8c89"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            //[mod = 2048]
            n = "ddc1676352ca011a235db9b4bb41eab81a9f3447a34c3626a531e3319665edd9c9e269788323ac7f2db36b9106f4b2148b7c7a309a0b7482ff08cc97c792bf8e2319f42aa51078a29a4ff90c0e29563059a8608e8809a04bf45f1334b23631d99253ba230dc640ffc3a70c27ce5fc7ebd1adfe68e4462790007b39f5d5b47dd9bd04d0d08ac3b586fd6cc8e178d52ecbc09434d4b89d83cadef6c53cce17788e87b551aa0b507893f308e23da919a4aa01183ddc831a99a3e3c4e5bffdc7e8c8b6800699abdf11569ba66e5892b2e55c6f8578a12f5e304dc28ffbd5ee2dfd2bafabac77ba67031f588e73cf7ba344396d166f5392ad36187b45e15916aaf5b7"_hex;
            e = "748d77"_hex;
            m = "9e7d8a94561c95facc082974fcdbcb813e1b37fdcbb1013a7d9c7c53d6e6dbbd44d7961fa36a106404fd760ead4ceacd61a0e150e144c95bb239f01a212aa1b585a29024c47d7745189d022b13dee9b9e14b5b70ce92a38607b50638a503ea61e7473e4abf3f15c4914f947437770f6f48836f079a81d7e4057887566a5700e9"_hex;
            s = "cd0a22729f6a2eb4c7bd6c1ebcb9510ba1aa6e8921109d7c1fff6f7cfc36691b69e89656b9d7cead82356efd740faeddb0e3cba5a98656b841f2e98d296b995b758074fbd97af3baa4b28e9df89e9246eed76ae3eca1bd213a81b5d15411dff648b887a8835fa2f7bb2f78be5c4be8dfb1ef0d6b08319685edc437e56da3c8a532ec8c7382f74859530eef7adffa68ede91e3fe4bd29f43bc8ff813fec7d0a15aee6de202e4f32fbce4621807cfab47bc395ac10368d931bd73a86d40a38cfa898668cf76f0f4eff32223c0e452132c36b2c16f228286abe0f3fd4f0eb73e5ad989ca19872097948c6152320daed43bc2a98c3468a610d13ca086bd8ea89bbce"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "748d77"_hex;
            m = "2dc3fc128057e1c291f9b55ace78d9473dcd3560a7ac7d1bfc59b301f3bdee5ff1b9593f2cba7e96108ec5bfe2763728a37c884c370655e1c6acaa526347c76feb4a24643056b2e7570864b67f16ee41a49acda3c2ad87d73d38342980073deae41f6468d452041e30109a27ee8085f907cf0a4f91c99b6728a6596e9326d739"_hex;
            s = "bb75bbdbaea3269a01bd9b5e492178b7ec11abfb59d417cd5cdabb8a4b922b0f21ae69e9da7a9f628c9cf396bfeb75c836bf734561e68e91fbefeaf0f57f261c936bef741527187a5315dbf584f332fe3ed8a44367688e28998675c31f2b1cc3fa87faa4abcadff5fc64025c9589149e41c45a5037fe1c27d320d5a40ab6119b639ba052ad1d8a0339fd3a03f1356bcbc056c4f604862df36b66685feccfe5f93f2fe0c957a02e8d41a574ab0e56d8672d338de761fc9e9a1b801ac5dbd56c1592efa77f782d1dce3531efa5c7f569ddc313f5dce62466ddf269bd5b780f7c7c68b5232e1f77f7b4a8eef8a978eeb56d691c3e4a95965867c61d3c8e7badda1f"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "748d77"_hex;
            m = "02e74a1d1d61bc6c856a20fecdd64c6a011542b3e7629c1c843e2d3ee21de557115ff5e56c8134741d95c1b4e4efeace14224df8de2b3d48d1eb68c5a2dbb6c429fb7472ad0bb1ad61fee8182eace06eb3c7d1168b10c8f8ceca4c90da6f424053a30eeb6866fbbf588ddd523573f5f1e9ec1435767a03d682c423c412435174"_hex;
            s = "7aaab14a1a89468ab4b583a8ad03df515e5d34b0c36eeabff6c4532385d448ce99e4ba35c927751cd499fe3080e004a903afe833667965fbd2d97f8a4b617f805ec88bba1133c5c304e2183797887db331a597d1e5f673264f6fcce750b504ed24fc066af248833d42cee935779bcfa02b73dcd29254b4dcbe831b70c289f6998884bd216f320e4615fec8181d17654b7201b62e8610e69dbd8cbad6de1a5cc1b4619b2680e7ddc27c02a9b8dde6efecf0f6c4551bd38b46f10e78692887bfae9cde1cca4e33733797144c6cded6b58cde54c5b877e5d10d4775200c0f4eff5ccde7a42788ac22f762411da48826b670297f2b07435d61a31e063ec1a2791a32"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "748d77"_hex;
            m = "4b4f319b5c8c53e7a4749c4ee58b0b25365a96da57721b2044af994c0abaa0ffdad106065ccbdc7e4556a03c2c84b46c9a860f7760b7332b2ddc5f165fa905321a887ec89797fd8ebfefc212f92c905c402a60cf780c57510283f6ac8e4d913330fb02a8b7f89e5d3ac7689af38c853f50cef0aa487b6fdbec2cc6d63eab2a49"_hex;
            s = "1ee9549fc8cf651a593e8c4516cb1b3d58099e6334b2b35c5da1e1c549e4a7769e92d51b52f622d5da43f8778c0e0f860f7e3a02268ab7a64523c0eddfd7db7941896a67bb33895d577be6c8c86af72d4e2feb5968eb2f04e462a2ed9e648c36c2d6667832a640d393fc11494a7379fb4fd6f0bff27718d8c9cfe0c9f2dd82472dbb6b751a5398be3f9aa67919461efa7bac3c6d5fc42b2149acdf29f8a30a98ac89a6a48833a3b2658111094372616986479256617247e60d95bf797b503d0dfc61b6336beed318d36e9f3575454cae1df787ff7f163f40598694ac891e09f743e02f442a1ab5ce1148cb66fde982ccb8ec945e59c57cfd5747cd5de5f3bf12"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8ffac3"_hex;
            m = "f62e0e07bb71ca7f93736ce1d2c29a4fe7a5c8769955a364916ab09a19943063238b48648d495e73a376c6ade6249ec20cbcf69447383501ca93b7fc8a7ebbe341557d0cb9519fa247ffcdaf95f1a179a5b3c4121300572b9b369129da08a97b5973f62ac7f355b186f6cb106a916b1cbd727a198616d28a0a3c84489499c1d2"_hex;
            s = "66b378c5fa44c443f0ec885d55dc877612246703342fc8ef38a98c26325e52b9772f30d29f4a23b67153cdab1f84a615208ef809d84be83c57cce32ec9f9dd07a64af14f964c73d5a8f9fbafc07a68dd046cfed8e1c54c6fed3a4bb7c9ec153b64bb6c1591f1f78f834c44153da1dafbaaa9d44b8406108d70577ea8497b33aa09c5f2b63906949f1ac098d34c82a80a37d2f4164ea88bcaa30ead54f3b0391485a8eba084de3be452de37dc52d278d757c70c1b75bc1ce7c1441b0cfed2ec5e045bd77e732715c593e2a3b21ad81f7f92b6eb9ab23f84cfbdadfc89c75dd4474e752bcf479805f2b4fc5b953e2aa82b72044fb865cc93124096c14e0a645947"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "748d77"_hex;
            m = "60c3a8bb6b10b30395cb1a4b8faf39cabe5cc3b79057b769115390bdb9afbdb8883f506d564ffa2164e537ae3647c625a5bd5cb7309899d693733b979bb9925b386834aed414f16fe32e0932bb869de2a60f64ab36e29f16d9864f76ad6fa58496c4ba468d6680353b2df99ec675a649ebd943594d3eb1730c1434229ad8de7a"_hex;
            s = "5d36b5e092060e763963b87b41b027a1356a1d5068c8ddee205f0b012c27d6906e75ec2fa93cb840d69ff3c149653802659ef116c7d740afd3c4050193cb488493a9bf1025ff3918ffdb073e5b2f705eb771e1e7c91dbb9a9e18b1a36951d60671e25e4042776ca265bbba032b1dd5aae000737c49583450e072c4571ece1b5af9403bec0ee4eeb1e14165c8df6d2eeb93f10ba3dbcb9ff92abc2773d044560fa162e9e5b7f6915184e6ff3548df75ef7fdc8f2c869edbcb1b4a6598fd1acaa394f501eefc3fe5e6945f4143509d6cf8b4c8418e4f26f53400fc50d00cc4491ad16b58785fcc6f123d52b482764225f66998b3abc3b3e2d5e8741f3170ecc574"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            n = "8cff9858fa12773ef90c10e8f142f69c0350772f999ff10ba2a5ec71cbee037f3a78a1c46028150a0004fd0198bb8175fa30fd9765a4e2c679124ded055cd37d4102b5e695d91b58bbb44e72c136c5e3da43b4e6d5604edc36774c353a729bb1647f4a33d74ccb70f7b003617bab798887b8f65cbe11aa8349dbfc0f5036042d6cd4c49b10634fdd9d9cbf61d9f85c94ae98cbf77172c61696434ebc2ac6ae8f678f0e4029eacc8fb1699916bdce026cd94780de58a707659ff650dae7599b6b1b6337323832b45a4ede37fba87051658e79248fcebde7c36009954919c87f836a2084d88f5237f72f4d208412e91ff6f3252574df7c00334a0fcf8fcc7ecc2b"_hex;
            e = "0b8f69"_hex;
            m = "3ac87eafcf45920e233638ed4caa54765db4b801dd143ad978130943f5af41bc68f8bc83a9ba2c57045c668232080116880d20776f818c19142a068b619fdbb52baab85eadf1c0f135d5dc801d9b5209fdc99af81fd36dee33f71ec144662dc4eba41a48c33177621c6941eff4a970d623b3cd8dd55404df3d44faec884d6071"_hex;
            s = "80ab1f8e28c9f939a7a15a6f81b41547e8497b5ba2dd08333243352e9d7aa347dcde6200a5e1cfc8136d3c59999ee571347c8a48d91e185d0b08ca31c8ea83d578f0fea6ad38c820d68b10221d493ea93e065fd846340ae09b94c6dcb78cffc79b958540689455734a9adebbbe50bed6e998e957079d11812bc2b4b497f9b9fc1496a639e021337d86c4df2bae4a065fe69e517655a571369a4454a1e29370689f8866375fad63075ef189f0ec3b686b5f3f02ae84c99ea67701d6906ad867d0dabef4f210e533d7daceda12ee0ad2a6826178503ae472f278b7f25d51c1fe8ef4b3d61da0928f4d7315abb27e570ec36fbdfbb4e3158e29b4605e1b082e56ef"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "0b8f69"_hex;
            m = "e88292f68268095c2d1059d6c671ee2cc3bc8734748f97a2896ceb22d56b8ea4512beaf7640e2f9a61a6f9cf526a2df0f4ae230602d20b98b6b989c18e7ca3854c60dd654006a231c9e2e61e1aee0a193aa0005a4e19af3b1b9f994bc74dbb9edf09b4689fb72aca6dac6aeca6664e4c9d7a6456e1cd4c34bf0762e708459e97"_hex;
            s = "4b40e154df4538c2de6fc13cd93522acb23305b40890ae9e9ef33df58d0d1ada511346126fcd55fca4206bf3bf988c2967ade215538b818303596ffc33d4ae05ffb321ff303fa9a2b87b5467723dd1e036633398e15d9abe62d9f7528b1f31f3ad6ab70fd5af6029da4a961d006d7ff0f6b7e2f9181fdc47ed5fe0f74802e9d63249bd394bd6b570187dadb42a1ebb38bf1c78ba5b57c0a97ae29a6c9f8680b493a44c4909790143aaf12152d56df38864a36231f558c624077a00ef3619c58f7ebad4cdf706c4b2a47c6525c76b78f5473b57a0802432dcc67230fce82c87e41282b7e8f9855bf72f0770dd6be3f7fd260a435d51c1f2323257b507f97a7c38"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "d0d14f"_hex;
            m = "3853cd6d1384358712da7c1c583afee73fea00ee4aaf41be5c32d2f827a8280ce6b270454f822206c340d953c9ac6292ba041293be285dcff6fca5edfb0e508b88791d3a7309b8cae29f8cc9bbd7d8465ce905da8dcd37eab2a3222646511f55846e7e55675f1e5dd5bf3c861705898a8d607fcba0e6f497f7eef0aaeebabcf4"_hex;
            s = "55dd7641ead751bc1b160724dd86e89497764119a998d5f800f97defe942aedc5cd2c8413918ac107a705dab99bdb182037f051b61932fd4d41f0a890f6db996cf99d210084536e3711653ab4ee5ce5b066a569306983c2f5b6c00c51fa49774f33c13565b95e832588ad2c004b81887c3df340096920908979e6f168c8818062cb04391f5649869e35efe762628f49d6751b7a3e0b184e9f935f591e4f2a1db158cb78f8e256c74c294ff424bc2efd3145cb234af88c623afa67b3eae68b91dc16a99ca36fca81653aa3ea47338c5a5a2a5b2340cff80672767f6e9549c6adebe6a84a4232560ad431a5f42a3ded809fda302ea7ce944ea3e7be7853704e1ea"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "0b8f69"_hex;
            m = "fefde998a5de015f63b0a75ce7f79f4dc681d18dc298aae64b7cbfa74610b3f70ed35b69b81221d19c5ca6551037acc7771132327b79e0b2968fa689d7b9a170e3983e2b3a3ba160bb9248a96b25ebe87205a7db66035cf0cc21545adc4625648536d805b1c04ab5ca3ad3807d2a2659be4678b00c9fe547f6190f41de1e087c"_hex;
            s = "17a01e1254dc902e8c6d607226175416c17ea28d28696b20706790dbac60f73732c804b6756df87ce6b1baceb22d582a6e24bf3d1754ccf1ca57e06150e6da60bcb8b116b3b8a31a715e0872b6047c6a4d7f6817ef5f12d13356b2b50fd71f5d9a38a0c35072ca38beed29ba541557b0525fd3d6639661037b5b61bee51aaf4e6c6bf5c577f9dee4811319d671911138050c54bc273db9eed5a7bde3281e65942cbddbf909e87587c58c8d40c081c81950f73a33d80bea61a56ee4a8930ac3b954d4a0706aaf3c753efd304946f90f33a20cfde65e388c266bad024cb1aea8879c78fd0d9bfddaceeb84f10ab66cfce1aa4f0651d7b1f0b4ee808a2e1f490ead"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "0b8f69"_hex;
            m = "c0b2621f30115b296d84c7d4e015981a24435e1877a660cc6cd6ec1de088eb1b2efab889a79233993cc211f67e2e7607c911c573bbdcb7e0eb21aa01d8b03ccf20001916f3d01134c60d6e1d4cf784a3a28089f5caf4a7655adf506e752cd2f5fb8a2bcffd141e847430865232b7eb75185753a68a365ae220d8856c9e43d415"_hex;
            s = "368416eab883a2643e5288ad1d97887941e6a42a54a44336f12336cab4038e693f98ebe3df7378fd501ec9c7f267d6f8fafebc5340744a436d99647b19df668169849032b852df30da848e4605015aa0a9ce39c9ae25368c0575e7957273639d957b392e3556742bc5d0214c4cb82e3d342d3a73f72b7184b72b2ae2225ee830b1ddc528460046d83526c6d07b2bb89d4593b459f248eec995442e4aaad368dc0d3a10907ee779eb23c8a60df52fa461ea99e47e8cea7b761a02bdf81d43e4a7a44992d1317211607e099141de07ea034e95995ae52ebbccd38d0964e3fb4756dd6d57fb01dcc44b6d89852bcc605dabe36398e53029f4397dffef3ece22b939"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "0b8f69"_hex;
            m = "84ada4599f0bc0a41db787310f53a1588282b8669ba82e89e7f20fecec974422045d0ac86b5ea366960c4b97c6736e6adebe180771fdad962025da5c2358cb2725679fed559619b0ba9f98a4c6f949942f599b82fa7af38ed91aa219b645142990d5490f863a8948317754a2376d999f1d5c281e5da76838b9d74d69cee385f0"_hex;
            s = "8286a2139ece519ecdf8aebc2db2427c207100212008dd27b1058bf46db2a477ff55bde9f0d02cbc3d93b6a97361bcbb3aad990ee9d255c58a96bd7108311d3d9276247f274d5a0dc9e6e411ff389de34cb693b273b5da7bcaafa101a5fb6ef42fdd6288ff6b6868291ca914f564c75fcad55d7c2ca3bb5da2abe02a3d589686f79c4bbf24876cdba03ffabaab32395245d72051c4aef965c0c18ee7ae1d19d8c179086f6c0495df64c44b618d5e9d07f20e051ac360fd6a84e87f7f7a777059d0ea3eb21a11de8cbc22724944c71cef002b612278ade389530486df058cc5459c20dfd4e9695c04bce91dac8a1ec79f43f80c0d691a1cfd1a7204af2a7a1a96"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            n = "ca1d2f73de2f586157f15beb1ab7c3cf7b8d99ed818cb89eedd10ce20fa3cdf12c41bf04ed06769b7f78fe493a2d17acd5fee9c147d4944c9df3a6a99e5b4cd0d4e6392733806998a05f546a046a6767d79f23e627dbada0404f2b7dff2e17a5bc537bd8efbe0b87e50f5a4645e4a0dea8a2799d48dc110daaeef895db6d6244627d45cb382bfe394d94cd122f8ad73d3c0ec0946669938c1204f940dafc4cbaa95a91d55ae84264390590dbce3b9bf7a6a085444906c774877ae3a67b1a6d19ce37936adb50cc510018dcbe3ecc964583ada6dbd22b0eb4a89571d98238894b1033764b0c4726fe8511f4207568aa4489cf7a57e84b9c5ff26bdab9b660f91d"_hex;
            e = "1e5e25"_hex;
            m = "014bd8a7ccd4c3924208a8a6021bb7df5f238021062ab5e1e18131223c583aa4278c03581bc07516e0af2f92adc0cc8d92dc6448137c553e16064312ff595dc719a6e22f3883e4a69c3a4d0019671fbf75c200891239f5dacc426ef7256f8323a0427d146a4498a83f5107d58c3639ded17e5bcd4a881e1dceddbab7f7c13320"_hex;
            s = "400994dcf90a8391d448059aa51ef3ef10ac64df165d5b6b22fb745bbfec307bfed443dd912414bde19bddff653f6460d6c2e1be6db883132981bc05d66827540a0f5fdb883645511173dc3b3c900daf1c0c2da808ef4a86061777f0c6f3ef738813f3cbce89cc8daddf6d178d1a45c83da92b3cc0cb68be6de5f5d56e5aad6db077f23979648253a8b1758e6478605646981882445f46738c955c900d74c60771528b91a83c69ced1ec3159be138b7d3872aef5ffd2f58c02b50bebb5dc3164bfdab96e6f325f9d4293a6b41d3f9f53535681454051778b98655849174748b1ef1a3841532b5aacc6a4b68a0cf994993643549ca0df2eba94718b11b73d6c9c"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "1e5e25"_hex;
            m = "26dfc6c8d3f37c12edf9b1e176ba99ea602fd989a3453eaa8eddafe95a1760f805d049415e69d7cd5ccae165b3a7ddf7a902543b26f293950ba2a43ec59c7c9f224876fd63af005b9285949c1667ebe984616d52b8b3ebb825d590ea69b8150e244f35430b4e61843832b4cfc481298798530c188011aed9827d5d366df2930e"_hex;
            s = "8b9416808240350eab81f1468367cdb6c2b770b7dd9d88fcca8786db9407179b9401c5f074bf9d7a85c5fe26859e8e3bfd26502175bd1a759d1a6bd79149c043b25d9fa70d80f163696ca4153a3df857c63e709f0c00bfcd47e66467110dc6aa8da6411586101eaf99068585962ff994e8e51b30319561648994f2533bbd8b8adc2dff2126cd753ed8b8abc5913c0cf984e78128e2c18fc1f9d8017c60d2c4dd642633dfd412cc00a0c32569b25e328f242d691d75cd2ae22f8359426548b04e36f15bfb9fd561b1e3f3196296823a3828bb791f19bcb75e172f7c06e30cb2e9576bc83a7b59c67b821fc8c1d4d9775ef0f2b33a44c19d3aad04abfa17b8ac71"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "1e5e25"_hex;
            m = "59e84c0d700305007789dd765f33fc014241ef0fa4b406befcbdfaf27175d3a4e1ce097d27caeaa39eeb3bd3e1ea22b0d5ac445aea712a439d4fe93e42df02d9003687ed1d167f737b668c9963e0cb16820afcba3167e349faeeed8957bb179abc050c86d8508d1919e316f36e7dbfdb5044605603fef878198350fb3972db8e"_hex;
            s = "39daab754cc68ccadaf33a057d76aacccc30ad5341dfad503b33f29243e57636a68453323d81cede8ba0959bb980905f4a464ac21880842cf26eb8e8801c105ebda3a866d0d3e8597d234a21c46adb5dff49174df3c36f7c3deb693362418520af227195d609a548836378f4885af1ef95d2d9373c53ed811884cc534b7d88449281b2155938553205d5b51e39439904757a50d6c877d686b32906dd50049a620c3c3489c9007633a04882ef0186af29c71518ae8ed96f307d68eb33ce40793de205caea711cf9bea7fee8b751cd764f4e4e616c50be2456a868803969d692ff8b8b15a4f0d4ead24f610e231d5012a31247b46a582f1d3fea404a5d29691f7e"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "1e5e25"_hex;
            m = "73e48a5d845d55944fe63aa61db36d80724b2809ecdeaa106dd880827db603e1e91822f1b01861b520db22993d6523f162b249a22b029c1f9174929857d6906ea6bcaee9f4cfbb2d2a68816a055e4954bc1ca2d3e4f65ffb91bddf3ebf9091e0f0f6b6ac162a69e6b2b6dd803e43e790c9b0bc02e161fb8ab5daeedd7b8c0d21"_hex;
            s = "5f566d4ad20bec081e05f610df9b972a69afbb71e2a345f3b4fe8b5e2243cdc6a68044e46996ee9bbdd90e6bc7354238566fd7535e6ef04b7d0ea8eb3cb287b23e2492f1f16c799150bfef616467f1ae535667fe76ad5f6ec16aa0f0491c3ee7afebc6da5d6e4ebcc0194e90fd0bc944b0279c9973e269a7452b87a1a317c3d8131804ba4ab2b7a48a8241fa20506d9dd4d1ad74051d28c32c0e1c7bc4099e25c6056a359132c3f0d8d1f2725fffaec815eb91d9bb902aa8d024b797da8035c024539514ff3346067bd583aae8fe5f2a54be488f053407827445a27faaf635e97a7888246d817e7b291d9ae5939e0ebd0cd4a6cefcdf4bc5a637e294a368ab29"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "60e097"_hex;
            m = "da4c0bf959ae81004fed9e58752e03f486906288f30fd891d7a77e952dbc3bac41b9dc3f64f86610e4e2aa7a3b571bfb8750ddef3ac21e9e13c6a9794df8b8a1161c0aa94208369d41be3f434ed868a0ea294abe89a123ad8b7171c86d70c03941bdc0c05ba69ab04ec9843a177994ed9764d17e477290c527f0fe09f7edf97d"_hex;
            s = "8b31638425af6493fdf969789f33b2f44bb0d84923347cf03cdc72ad9f139fad79096d100e567caa8099ae15c2ff5c74a3ddb8b40f5fa5a23da10b6b39d985d2d2219d129a39587983660fc9d51f43b1cefc1ae1a102c6d9634b4748d3a2688197fd445a635bfe40dba7da006e7016b9f1a77c2be92f1f50181c025b22224785d4c9c7062429506ba2a1b18bd719ef72892029df3098e707bf1858f81dee73827f9e1d1f9fb1055d969ed45a513f39870250c2b8a507605468d75f0d3ddf1dd1ac3a8bd245101dcf1eae32822dd208b0dea4ef5722d22518de07712192178f57c523175fe4ba17fdaf7e604efc6ad5e2215e1f327abe9ec2004bf7b70505e492"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "1e5e25"_hex;
            m = "f0d6d7e7eedfec55dbb2e7506ebad1c99ba7ed0a5b1f9b01afb07cdce20ad7d70f6b3b52e45a6627a598663a7454fe52cf9e4b275a1ea7bcdf06ceee9345404d9bfee62cce38f7f4bdd71dbef0cbd4207387134692b42f45e027fcad7e11355d99761e9c35e16765295554016b861bdc8e498e91894af947bafd4e402bd77faf"_hex;
            s = "c6141f88f387f4250ea16d2bc2b438fdfdaf3f3eff539a4f0573d249502d08c4a57333c511dac0b1d0e85cc3ff3bcd9ede0bddab2e4141157e41003dec0dd494cce39e4e9e4d77e89ab266e74579382fe4c829a090ffe40ae17b53da2653876112acb2b1575613570f4ccb219ae51ddd950078c0554cdb7394906c54ca960fc56bedacf7d62e25b72d5e727d18b9cd378f8131b9de088216929f42420404d75b4e960a257927f82ff353217042b61a45ecb45457a581dd82c57a76f7160273de2be85b594db977a29e92813f74feb1678e35a339c42dc66eaec11c8531869ee64c8f6fdd4bc2d918ac29e8995a35f06edc7fb1ec494a86b04dccadd448620ad2"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            //[mod = 3072]
            n = "d8196d0e7875a3d396365b446f520f6706695a8046976fdf7917157e8747a58e5d30d83620703e743271b17f3c9763514c38c6808b49ea42ed3c9ad2514bfe059e095c2f17624b5bc1aa5060c320ca14da57d65024b7f1c09c1611b56a3d62fb104c4e458b18f6760d85c53cdcf0b83ff25b48b046d46c0110f8093f9b4873e99b81756232ab077c7195f711c86ae44de848011e028e666ce8f264ea34cd82193cce9fb055a09cf7d12d1e3cdc57f7efbf48237722e1f1bf499572a7b942a74e634751a1808f475806aa5233d122f7220f3f694b91990a45740d547b62582390ec43417037b05a82b0f72fcdae476f04128f2a3b3cf769c8e8d441db469f29da612ae4de490787eef11127a38510073a127ddf279e5132dd6db07275efac083104cbfa39acc224ac1755dfa8299ad4be9ec44b57d83837c583bd35ed8e857e6369281c41c0227283f137df0b29aa6940d126bcc46ee37c3774ba88cf60e5af2678adc8e1eb5e9b3b96c9e8ab2f6c7e69a2360df666544c5b266ff09d21b373ed"_hex;
            e = "edc8a7"_hex;
            m = "af09df21babe776fcecbb5c5dfa352c790ab27b9a5e74242bbd23970368dbefd7c3c74d161ae01c7e13c65b415f38aa660f51b69ea1c9a504fe1ad31987cb9b26a4db2c37d7b326c50dbc8c91b13925306ff0e6098532dee7282a99c3ddf99f9e1024301f76e31e58271870bd94b9356e892a6a798d422a48c7fd5b80efe855a"_hex;
            s = "8005d3a1f6bc9e5b25e4bfe751a511b741d622eddab691d10911019f2589475c2432ab9a90627020ab3117042e468f1847a70d8fc392b09092bfca421292c5d4ecc0540957dedf526914490ce8338de9451cbc1c9c25dbba91d8c3d447dc7d044d9654022c8a21c08ecbadac1e44b0fe2ab462037cb409a8e37f617bc723ff4969e4553f46a8532cdc9429c0a03b8c34cb41812816904c98ea31eefb0d9a5a8f0c182e7d889d13704ba616ef1e91df911ea868df5d03b39d30624f310bff100d404fe6e86fe5986abd597babba200a28bc961d6d8054887a2f44ff269129e9b085891840e926244281cc312282e6da6ff5e70fb44cff6b2a2c48951601b1db25b4f70aabbcddb7e1c33e0521442e81df7835dde8a2852d410b45705e8763b5bbdae5dbf4d84dfe782ae862366ccf37adcbc8e51c9769fd516bab1f1572d8ebcd80ae9d052b1b102a2c13a7ed44465d9c535e6cf202c981c302e4117b74475f1b129d719280facc628fec3c28285bfccdccb67d75a71ae7908aacff6adf55d0ff"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "edc8a7"_hex;
            m = "5fa7b357c3630bec6d6e119f4266ff9465391acc638a87a7ad565fa84cd70679d0a8b82f892b64cefa28be108bb690627e5f5030247ff86251ed12270ddd12f18c05e9c161ffd7a4eeef817d1f6543065885c712ab65d7154fb66fe54da717c27d066f95b1a80c75300c826f663bc287d9f2a7fa5f03cbc68ff99f6c75fbbbf5"_hex;
            s = "1e84e79b2c46ca8d7a0e35503e4713f556eeac5b86116ded6c9ae1c14343c4c0c241424fa4ade7f76d93e6f845c62f0f2039e3cfda2d364cda93006199ba774842a7f0a99fc72bb21d583ab440a7ea37c371211c8a99f49772edbf14a18b8c1d112fe78af270c8dd3eafad00c004ba22bd521f3767b2d05a4f4ad87a850c4cd444126c6ecf50487053dab17dd624f9daa9a921d31ccfbe77a56787c13522eec9a7948626e560413cf210e438b61475f0fe3b53c29c038e8962781886eb2bf407b74ef7169a8302113cba712488fb9f2e27743d3a48033ae9b6fb76b768ac7014d73df1f4740721a5da04257c5cd72c0bb3de9e734f800e8db60b5b56e7dd58dbcb02b48e837f0264c2aa8b2543162533081cd579c1651b8ee4cd5981a7b27b7c77450e6d4bf3576e541409c2ebd09975d92ba4c35ffde2a7b2bbfb9628795de7c49805ce553bd632ceeda8e626fef36e5fb118dc0708f785680a5888096046832121d5427d7239e123733ca606fb991cae95f1ffc23ab0457599abf92732a87d"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "9fbb4f"_hex;
            m = "e4bc017c194430d1ae0798c2a122b56aedab0dc4f68cb81c27911fc3dabf040778e8c362e17cd7f20ea29f29f58762c6acf69204d22a4d112be029c18ab03184f49c2b9602ea1d75872f0f9873ad115ef7de8045ea51865c6cb5e0fbc934e4b1a002c27e44350a4262d76e76e439ca1a168b61ee07aa69e53339cbd75ef32476"_hex;
            s = "2e6b315e6ae71c573f396ac918df88f2254b6c29d552dff65d30f37e07fbee166459ad9b21969e19adf0ef493d368ef4e889e002f636eab345a1bcd373904d8137262e7828f50c3a5b0be2d89f5cf0217a5a593bb4b58b93cd59870e3e61e682f8f2778cb907cae1e9650280748011d08cb9b1e437ee26099a876d414e7ed5a1f31aacc632f2503ce38d4a15cdc9b5d8c9a01a379e5cc6315b6d81bf657c4b5d876752e8682177a799c9ae4687b58ca5182d6fcf06c3048b2410285d5d4f98cf94b71d3af8f7328450fb0cd8189a3d354c29b425ab75c33c9a29aacc602bfd0955e57214f1b4def30dc2f06b8abdbd9d609e126699c7994d34312bfdfeda87b23c484a097e614508bbd9f0daf2e0e71ef7c20ae14a943499b82a294ba90787b26df264fd8ce25b88d14b636c6a5b587cff9c80370162859df1ef2bec3a946997f84a5c8c577ea8329f3cdcc97214e6071badf226851ab3b5c7c1c9bfee3feec017393c3a054adf70a58e8596fcd47af32ca062567cdd87c5a53dae3780ba13ee"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "edc8a7"_hex;
            m = "b6ce2cd484adf679c884c35b885757bd48a50241733f215bfd5ae70547e25eb44311a88bd8418bcf88fe2d9c50601bd6cf979061abc8f5953118a4ec3b06f1fe57fd6bb025295fa8018b9e04e248804b824729a3c0fa0b45427cac2f5eddaa183bbafca933107aea7c51a0fb08b88f04a9da546e797f6d5479af8934781090eb"_hex;
            s = "01a0e831fbe4cba0309731c0bff9f3348e919fedca607b59d306e5f691879692ad2eda3a7e911da2dfcc2c1ece81873e8741ebec79dc58cf2884f638f393ad044d18c5147801d3c2238f10bce526f82d8fda18abf635e4c4593b44d4d1b9d390a62a9c3bdb662a0b5346e128c1841bf65780133cbb7ec1efa67f94a2ee8d503fcab70a0d9fa50c0ebbfb94910b0565efc6f0d79f1ea29ffdb0898a21c919ce9aae3d7349b2090a8c09f98e953a4cccfc8b0d19a8cd7a8a34c0dd5adc2f383b7dc2b5bfd7d9aed1a47aaecc54b5998c0c8e735b6f6ae7f737a68ef79d38fdf0756cee89089ceafc9cbefa2a02a0d02a7935c10a7826ecb6aa17a4d34b1c77d6942889457984e8197144907d3ac2a3e65ebe9d974bf522aada84f45bba806ca4b0534cad5b460d1bf5571a1e050e5494138f4c8bfcb4334968b50d9cb50b32c52aba4598fa47603de7d358f85b68e13432fd85b247c3759ff7e24dc1934d01ddd60a0156d4fe9d314681d3fd69f071bdfcc5b3a5b2df626f34eb95043bf160eb0a"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "edc8a7"_hex;
            m = "79d92d0766310a0011b4398c59543062ef8dceec5e5386e64949c028f4337cc007ae39448e1f156743e935c910e36714d009064456711f46b081d1c5ac60fa419caa106157684c8a803f0eb00be77d6cfcdf6d4f725f8777e58fa35facf679fbc2357905c9f5f7924f1e8be85149b893fd79cbb6bc0506a070d9fe9ffadf4219"_hex;
            s = "1fd91927e15056b040794544ad1bd99a077f3151d9d705ced12c9a6c41483dc1e1b94bc549e06c91a35816ce9016a9f56b9b95f8ce2c9e4a33b445f701abae9c6301bc9581ae89ea2e83b725431d01a3ce1e266ad3b8cd29b217b27e1db105887423d25dd5c6e0c02b3800df9fbcb9f306b86ecbca65366542da71b03955d4063512998924a30283592516037e51e24ee8e8c6bba339e5cc6a3b64375a7dd96e7efc00d410fc0a63d0833dfc8ef518c74c2dc13f79cacbafc3fdc2253c50cf7a1f79ffc185a96a1602e5b7416123d874b5e4c4b4b35b3523309895113d7d2aa71cd895feed0eb9174ecb5b8dec252c53890e28648e71c87a8528be9c7b23de20550675b0b5072fe52cb1de14c5e1be13896dac73220726adb1e8102fcdce01b92251497a553d74f938c96fd9e5936392f0f5c5efe15a7574e01342cedc17cf4f750825424c7b939d0328d2c5a0a8f744826ed9f8dd4479a40da051b7924a29e81c13e929e4815474bb4a825d564cee8f22ce451d094c19d9661dc413e070c5a6"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "edc8a7"_hex;
            m = "569b513e3a2f031a0fb2b3a2f3d51c321ffdde7dc9997f8248b2afbc79c3d09961ccb52e14a2aa29d589b5077e041c8723ec275ef2c0272c5d3cb7af7c2d4236ac83c6597da8d7e8cb10e6212a12c32688f661ae0d4fdafa468bb20b83c860127de90a283ce9913f3870cd58bfa41af7964213d4e3ed9dd44ac62837573c3113"_hex;
            s = "0202f80676900c6ebdaad6750b5e0600af5caee8b03480b8acfecf719fb3508b41ebc57e7625ee0303675478f17de92710db1855557ef3ad3e29353a53794df804db4ea20e8cc4a9c9ddb78b4be6f2475833fc13d9810de1bb338bc45bd88e76d8bba7b08beec647f3e084a15848591592b0fa7ccadf033a958ff643e8741fac68e7f8e7f6597ddbfe0e696fb68811d910ae817a017e136d100d50e2de6f9f8569593a5a88b535d44466e97baa7f9270334c299a7684059fdf5dc519ddceb050678501637b48ef27614b042365900a060e438ab6f16e3624795d47f448c0e91661c8aae15e46ceb37aa58ba8c413b6a6a812dedd263f2d8de3cd6f7f3b396334248ecc3f4dc5484a4218e33de1359798dda01affcafe7567633076ae95b847b2afcc1919e296cb77c8b00ed4aba717bd8c79b4320adae92bac470019ea631cc2efde91d5e465394c4c616faab83f5875fbb67b6c6ceca73c891ef4288750b02bbf478d532517bc6f76f0fd48dc2c0971888dc94854017c8e5551f0fda68e681a"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            n = "da3428fb42c2bd8b0a954bb132f3334b804b163913398188d6b7a8433fc66249a300eb5e7ed2b20b7e22e21caef328071993af0200040247c651a57d37160bf41db0af7840aa731be37c3daca590388ab93ca935b9ed94962f3837bf7df344855b2ce7eb4c68485c8455a16bae782d606a246a1a66229be6a4e3fa9b534c5e1c1100b5a15551fb0a70e78612eb2116f1a38fd694028cd2172bc7699105cd6e4c14b5c9da61819048c42b10e31c3019f8c97825f7f70312ee3e6348a38e0b4fe9d567e1a4087cf260944f57cdde56dfd9cd781c846ec73b523bda1539130c1750f24cf0b6d0d160f4492ee38d31bc44d4ca299effb4427e2bd4fff80f7d19042d988713a84d470fdb692a296e6e14c68d561addd58863496aba014ccc423cdaebe43874c90ba0981404398250a062266e372a9ab7f29c236225769f0baea54aa436705f0dad5dce1d608ce27cb34d22ec913c99c5a2d28103b0a88c8cbc3b9b37525ac45bb39d26d0615fb0af055911bcad4d724c208e1cde40259578df24ba3b"_hex;
            e = "8a381f"_hex;
            m = "8bd0e9c0054beaa7d19e08483fa541fa551ee71421af980d4b2b71e2f1117fb8ae5576c3fc63a666bd622a9c14b5639679c8a5a60d092f5b2a3461ee3fd429dcdb07bfd5078192d5d9d3829146ed4f1438e251aae0ec6afd4eb03a7e3fc39106366c2abdceac963c4e7b76ee7e55edbcb9f555e94461313ade26635b98e5a07e"_hex;
            s = "4197ec722775cc065adfcecce1af88d2556161466124f358563c84c52eb4ff711b9afa9a6c0bab52ea08f7a6f434ea5a6b4dabd3554baae2330b1de68e62d83c2d6217781c6e38376f142971e13c8806e0bf467089e3dae47b80f9f93e8677209f29d0b20b474ac815a2e2388b9d34b838373401b72a33e30914cc0ce9e1357d00f55d9736107d3db204bb13d77923566d35715a9c986f199d5d185f02aed6481dbd116e3fbc81c3bd4e3438928d3c93f63d9566b4af39bdc6361783286611a0bee9f326ac1678ffd9ef517ea0a6908cc38d3b153e68ce79bcde3c2f33d240cec3066d8c05af6d38008239979dacc67c2bcc14212909f4e2f92b654f7dea995cf006088be930061798d5fd0e4851c65d5a23b9440a83aacca0837059e85f32d16f390b02a57b910c6a9109f8d69af07d7a8a44beb4ddef724bdc475369ad34510b8edb5c2b36c9f9cfc775d1f1840d2406943048ba339d94f7f226763c17425543fc5d2c4f0d9fb0f4ca98e100be9c2917c13ebeb90a9e4fd235671cfca89769"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8a381f"_hex;
            m = "b8012a53d58a2db0cfa9e680b24a6327a01873cc7493650ea46213f26cea2020291f7d50039a32ffceed5b66323370ac0aebca5b0b066311a63ede782faac7773e8f1baa567a0b10c48bfd04ca14d46ffd63713becdb790b024a5929ae7688bfc0f90c4b174f404d792ed442c21515d641286f565f3b3064812d8eee3077ec61"_hex;
            s = "584351aa09ff6cd9da1771735e122bea891e20c6c3e297966885f7c7768a395c455768a8c6066018cce86d2effd909a719bd7d712072efa0aa530b9ed6a1a24c4c4f589a006c077ffb013f4fd9dc0a9e13b516a3234d09f79ff76e8d46a8c5f1e41f229805d9ffcea507277511b5f8e71d13568574d01759cd851e2b6cdb6a7fca280ee10d7a62ae15db9069c0438ccfdce2b8d83dbc7e5abe6ddb1813ce1b7aafad383455b50da544bdec9dce0d93894927940d17159f1f82bf44dcd8e69631125695b7cbed538ff467d0f53258d815b8a817e79fa238eef0a26e53202ff5e2d57b547831eba68f71ee81b1d4a5af42de2c5c4e9a8e4d3f53d6e9832e71de9590851a5be5e18b381c94536313185db54f9f03d362971b13a8612d3456cd8d3f15644fbeb33f8fb2b9b6b60522f49b6c6bc5d6c3701371f66dd115f95eaf5889893e27df3975ea90ee3e8b9438e7dc26ecee1dd9fdc34843e3188cb020778b4ffb8b52339405f17278be0e6d9a227292363829cce7cc3ac2ba1ff90cf8c09dbc"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8a381f"_hex;
            m = "0803aa22e7bfadb1ae48bdc6dea805f2951c23650d81d2056509c6c2a432d823fbf963254a4aee46e6bc0bdd9a7b7eaceb85a2b8a01a0959826d638d61a0a19157ef5ab3512c6d62ca6be887dafe281870a442e9dbfda2c69041f2c027323ec4a64f5572024b722be3bd1b6ca8194a5babdfcba0c612e57616ec3c02fed0f6e3"_hex;
            s = "bf3adfd66bd872ad41c1b2465bee7befb88bb46c36d1a113ee3df6e0d2547f771fa7e72b7ba22d86673912d70b8ca1bb61e6835da82f6a272ee25b4d603bed423d6febc079a13f9140cfd22fe2aa9994125310b8f4268b3ebd68ec0ec781bd129d921502ee93fad8d96d006996e44d662ddca2932d8c06f088cff205e5826104b7f2860beb589a5161e8c0d5454fa7c522e395e843f025e6b99af27951ce577894adf63516b7fc78a6bebf17c287d199888e5237a17a88a765f929618c53b87a7e4660507dc7fa3e4ffdac8eee8963a960eb34f0f974d83fcac38223f24c79f818fb46e767cb3a807a77d6fdaa4d1b072f9d20ef025329da3f2933ab694b838996b0e6710cee35339f4e1cb7a145e3feac23847049977a6afd55038b8fd9449bee3875ca23708932d693657167ee577fa56d790dbd98537857a5d67bfa5c998c39af621c43c5ebc3976a0de1dc09890929ac3384abcfc22ed1c965254245bb2c6f68399ad3b9c4e6499d1f09ae800a5d6fe871dc7adc98293fd86930aa566523"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "7e024d"_hex;
            m = "66617eec7cb213d31a231ddbd0d4cebf80f32ac36d81bb979559877f416e3fb1da54b9fefe02a0b5d3d66bc59bd98b218945e969d3448fc609fba516a5c7a049e3c6b60ad39a95a2ac69541a6328aaa07c1a5e2d2193fe647102d4bc1a2e16e12ac05d58220258624ce6c2244f4a9104017a71567cf770387477fbbac82c0943"_hex;
            s = "72d24f9b4b3642043b7080ce66d5c2bed95b1a710776ede03cbfef3806760a6ee640def72c6b04477342dc3d1109d06d58a1880bcb8b3ffd8ea15c2e66de6815419c684962f79dd0c0645b2b22cbcea29c7ae85bb5e689ead0f07350a3cc8dd872698daaafea95b014e12132df28b50e63f7c011a9e6a7184376223730119b201e8ac5d61b6bf9e7c2896fff600a119300bfb034a985330de944ffebf67f720a33115fa680e02bca71eed92d0160c83a037be1bc4383c26ada8e1298dd92d0db9d7d918a59baf2c2b2b88e7996f630d5f88675b8cf80be841973e3c1efd0a156ac9f5570eb2797ddd32cd4575fba8c3ed5c39236af3845bfd95020463ffb983b9a0ae24bd244f20a5ada496f58c80fa5b16dd2a8010abc86c7a8474621d4ebee2849ea96e0e94956614ea0818c425c0ccbbff20a62cb7d218573f5aeba6920f75a7fb26ebcf5debc473d4a8daed02e1eab16212ed268caf07c2df497d1ef6700f47287b80c6635edab668c3665ab333617daa98aac9c1f71f749bc1dc2bb2428"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8a381f"_hex;
            m = "1c7965099677664f23eeec41046865633a36ef29f6116ebd5101dbfc3d7edfc1bbd5a0674fcedb89b18c330cc6b4c860ced20c02dff8d24692a8a853fcf3676fe0e3087d2217b9c37fad30f17c65405f9c02aa97d6f4351346350148237118e3f1694652f8992b86f4188ef70ec1f4e90b9071eec44ebfadd6718de19a3e19a5"_hex;
            s = "8b7a7e94dd13ad803b61a100b66075f011b9c52d8d443c49560f99256f0eef53a699d24dbd8aceaf85c2fc0eaedb6e34f1bb4e5a58a171b5f08170ff865cda853e599dd6f7b88c32678733198e1ee4eb586cb360f3ef8aa3c034557c49cc39bf02a5bb8b4f17aaf7a736b83d2965c4ae8bbf9cc81f3f7943dcfb74caf216b745f6fa6b941e6dc5d535feb5862864d4ab4d4258d7bd1f93ae81219f88d3b8790cd40e2c222b074a1d396a92f75bee8e088e0e71daa7120256c5842dc4abaf04d9784d25dc6374c0c33126055c4367d841809fb21f3a3cdbbee5aad204bd89b3b7aa4995154b4f2ff3896c936a1b8f41a95db16ffbb733d6abc23889ea2ddb07498a3bb270e259276d4bfbdccb94683a7860de3786c93b19e285685f4397594d1b18c1dafb09e614e8e59760968e14992f9b1b7bfadd283c3493ad5035b79630846b349e3cd294e93952b40cf4580e4fc24fdfbe77aeb92f8c6afe03624be13862880f1f939c21cc895e62fa4c78a3b95341092a6abe7d21b5bf5528b2383c20e6"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "8a381f"_hex;
            m = "d02569c471a2139f9265920ec395fd1803fe857d1e1063e03a2b0f2bac1ab33010dddf8c98ab7ed1a43709e49333faa3d91284cb52138119d77bacb00e2110bb8630c0530329c9a31627654af16771007a07217d9e0ef397e8ade1aa52c5db3c5ba874e15924dc5d11be0e09853b4a780d65c659a90ba19f964a18e01f0bfcfb"_hex;
            s = "40bb34f18580db4e1af934834953321a7fda886fb8831041909abfc08db1aedaf64115791699180c18b14584457933033e9cd0347b3e25dfde4c77bf5983f8f1635cadecaf7b109f399ef891604d4ef0b8bdc49d24011e7b1e4af79c34d0616aec06da2fe4a88847dca5f739bbd8c4dd6e4b196d8117f666534538ba180f703bd5cd87a9de0a50cdf2ed4b9e542d4ea9c2eba109754c55bd4432f37dba8708bd528a244e2b8aba7e8e56facb218391ca9dd29d8c1a58d7bf749f047829ff52998649f52ac76cf540ced9bc63c5fbb8e470a91fa0aba01bdd1fb899bac38c7b9e6c5f69591f63af213c2b543078ff3e29d02327aad6242511e6c91b37074a94ead1753546d0db25048fe2f3d10dccad0624495a3e1efd1687c9d0854fccbaf13e1e4892ebaecf2d1336681ee4f3888922a75424ee61d229f2f85984d187c9955ae51e6707bda528586b7e373267834dbf5a31332e640b611be64058e79f02fc4fa02e2e238eaa4cb725c471e9c0e5a48bbcd6efb9fb851cac9617a4da16e17166"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            n = "d7a6b5b175afa3bb18fffeaee645a096d8ff28cf96e13dce6d753d3eef4c0cf605dd06f0d25d208da216eba09b3e7e59b304210e63118c5fbc3185f1b845d18bdbf113c4d65ad2880bb2a5eb5b4e7210df30296a4ed6cbc637595318e72e2a6439e4d244d63defad0d2a7d5c06518b0981fef4c916c533f3495c098b40254724fc5a44b0f1d23c3a275466100eb39de3dff6dd48e8322ac2251f3b1f09ae8e6a6136645acbf358e7baa89bc515a12e78cf0f6c9e257b816be1e7a3098b9c1d3b47a4c955b390dc576cca2f9b391b61af5e0eeba21addbe728c58eceb8e018573962ae069f91c538e3161e5765db7e15b352ba3978edbab3071104353d122024e1f3e31f6337dddaae90a2a646074b5691b95b7d82429192c897598a00d67639c326922407002d49432b3cdf84c095c021c4dbe53f7fbe80a497f75991d195122fdb672c67fc973626583202c8230a506f251600ab46435acf51ef6461bd55d0c14a76bb4f1c0b7e3c1affdf21dc8e514c2e8732779e62c3f1fd8626c4b80c683"_hex;
            e = "2fda05"_hex;
            m = "711cb316a158e229d3c4d2f5d6c7e5aa29b4ade40e95a188df2715eea5256946e7c98034c09173be343f8768c4235d9d409c6951dddda5e588ed874b79f1306a0aaee6c4ca4ac456cd52b0bf47028ea559c0b3552be99da93bd0e12ff504648783d2ce0de60b3cb94608364386eae08a1c2674362042ef9ca2d90be341e56e65"_hex;
            s = "d3c03e8891632b8fd169dbd4ef4a51f207ef89b50dffbc23fa2d941491d8e185f3c743684677df40b18b0d8cc712ae61a3027ad5be4725d6a8e7b242b2139494bbc5c59a0122b26e0f9afb8df76db8dfdce8e9d2c38818bb0140a41f9060bf23e6ae364220eb56e3a62eaf966873c14dd82bec57876d43d1e07197da109fc009ab8b45e48ddb7cb1ff34ef3fdb3f4226eea8597c5c59ac573d15183489ee52db3af1c13feddc9357722978e4172a3bb26bf2b2b537f121295c00151e1629e28cbddd7957a595cf5effa365dba30698d8049d4701a4dcf03e9bf53e4ad449a7aed4abb6cf65ebd33cbf763fef760c1fe178f5d748fe37292cef145d61cee1dc02bf1655516a5de3168dfbbf4136e6351d3b8313ece067edbe34b1678ea34387636506192384489556efbd133a9912d51780d7fed8662ced97a6dd49e423da4b0019fac0b83e96862eb302910284ff2eb190ac61dd2159ee24e0b233eb38d383b4ff6633bdba58d85cb81abccb072ad716eda8b33b6c8ea9de43e8bc184f1882b9"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "2fda05"_hex;
            m = "1b51ee87dd2a4715ad8de13b9dd8f46243d37bae04e392d39380232ab4e8c1044615d43e80edf7157bba9e3cf0d9fc2c44b624bcc1f86ef127f81c1763783d109e92d2ed79ee30bb9738a59f5dd15e26f5c588d699feb6090eb783fb6e3378212bae30bc5194b9af0bf13e8d6928e3f760e9f125135d33c250a3a0fd5e8039dd"_hex;
            s = "397e6e6a04b3fcb3f0379fe1f9b9e5cf5c6d433e383b688cced0a6ddebc740b8ec0266aa5c7e89d5ca77c9a020716dbce12dc044c00b3b1b23fe3419630bbd8bde5c9883a6d26232fee11a81ced86ccb338dfe46faa3fd58720b80f305d40f1966c268c56d92af05c4f1bf66e6d1c5c810fedff5b316f3b61089c8ab9a4f2b4d7a46bab1868008ff3c0bba9800634c5781cfd7711a9b51f41b517ea428a9b63eb36609c763cef555df2cfcd25e16b8b3c631fcc12ed78904111188908a21253544a8f9fb0615570b3f2453a3214ecfdbf44f403d1baf0fba84d17527e7cc23e15cfe047f4fffd89bbfecae01cd3ebec787c3dc54d9511af93a3b37924ef9d6d5fc6e147dd9e91a39bfe101e3e55004f096b9b889e95b4f1fcd561ea76ee6b19276e8a26aa3aa3eda99de7ee48ad1b1c907cc302e909e89f5e3dce32657ebcdeef78722b7ac95a87930facd56e9cc976b501edda38b663d98c9993b0139032dc95fdbe4a17a9eb0e82c40402365fb84c1195b039246cd424233c88fef251ff77c"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "6ce901"_hex;
            m = "45d9c631cf0813fe85c7715860bc3a3b38f2a41a8688a12e6ea6030dfdb5e47eafd0458c3475f5d97381b535d05b996faa6fb16b28dee97536732ed5cadad2a46c0c32def50e96b897db58331d9f49f1742550476b935495b7555cd23a57f56b8577d54e9b3abd41f7bda479d1ef11689efec9d6d60faa33f932d72cd495157c"_hex;
            s = "c7958952aae21c256809e83d7f1833e9819d3b4e4cf562ec71bc0effe7a797d62e71d1937a79361d1cdc9cd5726207daaa9def6249a0fd3da6a23683fc8b084871325e07223a3317868efdad20f52a0330f369a0ba51f0fc098afde7d2b72b7f2faab6782cb663c4701fc07bd82fa6d4ea77205a7ee8473a9c8336a781fb64c03632c52e6c1451c3ace7674d5fc9f26e8613c12137977511484487d9a8b928666bbe23cf0eefc849d9e0d0c125cc2ac42f342cb658d164ae57ab3d5606b8096fd4b4c81d54c9db79c5db70106cc474bc64ca73b713385dd9539329260899054bf6f74a45fd5363f78de558484a124a113ac2d2bc6fb8ed19730dc746748b62818e6e62f558d5d9fcbd2c6f4fcc70db6c7fc5c22524a89f04229def949379074e7220cb4717d6407364062095b615464e9ce9c50f53c4358d9f80ffbfe70c15cfd2d9d5f0b451979412f3cdc8f9619e189bf23e71116eb3c620c8f0740b890bfbe961f6cf8854ac6b2dc4fbfd62b6be3bfd1824070cd46b1002b61c1e572437af"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "2fda05"_hex;
            m = "c58629fdf3aaed600121e5a109ec1f62b360ab46abcbaeb1535ab2d0b53a40dabbfeb195a241411bac8c65de157a5fea49190f6a54940c6e9a0ff3ebc8d3ff030aabda877f8db3bbea7d9159aaafe7d8ecec68ed1f361c53a8afb4c8d7b71b581a554ddd71d86cc722be1119aed4e0b4039f5fd8f3fb08e8e5029c6dcb2fbb5e"_hex;
            s = "40ea4940619e7611473537ef5b108f9e1216e2ab9bb7fd45cfffe15e70621af6590eb571f9be970d30e5df0dbe527b9a9ea70e259b964e496735177d417de3291d16e0b055cc9b8f4dd5498bb7a78d8882bfba624580d81ff0b76f6a82f9a15d2c28cbeaa0e6c02807901838500e36cb403acadd6e431196c794c0bbae65fa6b7ef2ab4c58c0fc7f3d27bbc14dd7699d7b0fc42a3dd30504f7c7e71d8504c23fe08a05e76c8061337687241d27a0ba2411619d2befd66a00d894f302bbdc4f3ae7a562307f21cc43c377b084d8521e2f3d27315b5c8b494b5178dab25fb3a8ade194cf3f909e9f29d888f15a75d26d427e7a17edf63f7f5dd814c67433ae7e15f668637579a3b1d59c73f153e094029e74b8966a9a4b72efe0d5d0e7d9c44c63de6d0dbf00e76d459c3ded35165eac8a76883ced93359c34fdfa94ba74bb58464770051537e9b71f16f615d5615a7b8d380b4bb9ec2499b255ec17131d2161d10709c357687728de9758cf5a166e81fbc086a2e20dae9b99c4f4f83c5edc0ad6"_hex;
            r = true; // Result = P
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA1 signature" );

            e = "2fda05"_hex;
            m = "f7653ea73a08384cd5dc0f14daf59160b94ee19eb76b83109f3db3cfb446fb0febfe04a45774adc6e5385a1149798ecf386bbd7ad8eb5b7d7566393b75f711528ecf602136da73885ba0c5ee5569888919a482d9af891a76e6feb30c46b738a446a2f825bf82b51aa1d9f7b5e50ca614c2c2d8c4248de8845accc84b0ed0988c"_hex;
            s = "4ba672add725521df81acde1e1efd18d169ce4e04cb55d39fdb2c6598250e0c7953867dbe189c327f76bb6afeac0e013853e75829eb50635622c26667d55cf3bf81bcbbb94e5c0fffbd853e2d7d536659b1ca9105b777d6fdacf3000c7c287e484933d38e2c52b301e01a3fd196b4960b4d8a983466ec376ec1d70bd26e1d4dc707a87ccb32a4e12f56d00d1a8f9dc20794a59a437e93fe5c79a1ecd16dbc0191589b14c30e5187e626a0038b6f2396bb30c9b4c73a5b21db2128ffe67c6bcf81b0ccbc68a6fafb94296e334cbd28603a4f44da05a4c5d243e30160cd44f08aaaef7135632dd50830010bcf4b5282cc55e070478e51bdc87ed68534b8133876222986d525ec26624ad87e4a6910c6e3caac92e32e2fbf0945f8f1b201de5ef522aa4e84e06633ff3c092f8f095783da7f929013844458e3978f5e7679b633152a94880b6ccb064e5093a126ccd0435381908df6b4c84e47875edf323742429b7428bccdd889d602085d6b40ac2c05c705a91b41a9081586439cd178edfe7f909"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })

            e = "2fda05"_hex;
            m = "0ad50e46eb42d8f201ee505c91168bd00494cc1945b402f86b4491ce98ea559c20bbe42dee081492247bbecf0263c1d4094d49af60d451ff76ba66ace937aed5a7902a0a53ec38bcea645cf1a6593f3c220af8edc0658b85481eaf6dd1ffd5e7e57f6544e0954b5899ceb22b449e0ff197f3623c2c10b9712799f57818ead0b8"_hex;
            s = "d4abfe9247a4fbd27668d0ed8473bb4d40eb5d5ccab3fa2dc7662d52dd613c12335fd0f13bc99c34d6966aeae422a7e3c9a2389d80480c9120eeabacb884ddb2906ea80511641747229e0a07c2ca082b354a0a52debfb93e1ffa19787134c8d7b8f81c0a07be5cf421fbcbca0084ae5b2410771f06c4bca56a920139ee50009ef879631609f0478b21e6548446752ff85905d0c5a80414afe6021a3ab737f061134f8fb390b030b1e6a1a016b8ec34b0cf3b38cd1b023ee7dd6840d459ff83fb2c6b703abf646478fdd64cf0347b9b55c78f2c731cf7b0242de2a6f247932a5cfe1391d7d19480a7945a105e3088c3ac5b72c8e422991b0b36e3ecad0904fdcb42a64271840dcdb1625760361ce81f4f68bab447390b691bc63829f60af23a77edc2cf97c071f58cf8a7c414ce5fdbfa7a6725203cd54c3386c4c85cdf17f770aea7e79de4d8368fc68b6f6c024bdb4ef9c346e0d78494f7134b0e9c651540dd2cf8edb5812a5f8d9943622fac67d5ad8fecef405bcfb16ec1fbecef8bc1c787"_hex;
            r = false; // Result = F
            d = eosio::sha1( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha1( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA1 signature verification failed", [&]() {
                assert_rsa_sha1_assert( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA1 signature verification failed"
                );
            })
        } // End of // NIST FIPS 186-4 test vectors
    EOSIO_TEST_END

    EOSIO_TEST_BEGIN(rsa_pkcs_1_5_sha256_test)
        // NIST FIPS 186-4 test vectors
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.0
        // "SigVer PKCS#1 Ver 1.5" information
        // Combinations selected: Mod Size 1024 with SHA-256; Mod Size 2048 with SHA-256 ; Mod Size 3072 with SHA-256
            {
            //[mod = 1024]
            auto n = "8592b5850b9ba96e7faecbdd67e50ed5fb2018fda0bc6a09ab6345910fc445ac6bdb0e7a4c6b72c9441649c9e78109bbaa1d79f9fafb8794a1a06cb638bd8f3c3416d44c43cf862b8ac1d5006310b05a7760d341d07077ae775f1695061d3c7297dd3ab8fc5d03d09ed1602a1bb69891bb377fd0aad6cd90f8b207467db36279"_hex;
            auto e = "eef211"_hex;
            auto m = "23d29062797ec367d664542872324b63a72305caed23d04b0834b594801095d7521078cae54c21f33f04e622793fbe3f70b19c45bee2fb8fe98dba53d9462b6c9060675c150ee491b1c849e75ef1806f7db60d6fc7399fa986efe5e00546a399458c051ff10c33c9947a257f0a91b97b35fa034df170e4224922de45eb5826e6"_hex;
            auto s = "02d07177f91c0db0b74e34b532aa18673d27fdee370b7aa9094ef765c9a8278b7128f1bd24fd3992e6376f83bdea9e505be10de15163286a7c9d9873bdbcffe0535f9f8cb0dd99ba34e24ec462e4ad03618258b66894daeac9415545e030bd963f2beb8d089183ec7ff1be67e6f94e6871d42fb7d7c694682a9f4af599bfdf81"_hex;
            auto r = false; // Result = F
            auto d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA-256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA-256 signature verification failed"
                );
            })

            e = "eef211"_hex;
            m = "1e422f898ff258a99bc53648541709b3a3bba5828d36d070b42bec6a2117d6e6403f0d762ce6179d2dc220e180b1e52156a9d0291eed64840787dc91c1f20fda841797a0547b32bb83b668a177276fc4aee64b21fefa391522cc4e7372dc5cd5f2b3152f8e1973aaa48757afc3df7041b35b5e91b5c317cc0be48a38bb3d837f"_hex;
            s = "2e37c8221597f7e2b1970c40a50db5fefde31b1dff1e9b9d6a70b023acb014971580eddf1d67f15d9fbbddfcdf49cda14ccb7516c33b787a3a3fd43d005d02de10f93ffc99585ae5dfaa766c0f1f5bfa62e50e76a059a4a1e814c1ee9836e01595731dce48f94aa1ae36d9c5165a3eb28013fac271e091f7018fe96ec26009c1"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "eef211"_hex;
            m = "084e3b56d68ea7c99068489e2c8080b9d3eb5ffea1e67eaea9c82af33935c5b960956ac0aec4d0ef3b0b71ecea50ebe9ef89a6c18f77b743279004cd703da91e01459b6516898b9d8ff30e1d3ca9fa6b5786135252cae734d410f6a1fe811627f248166c9645a27b9506665ca7f377e713c8eed97249d628b5314894696bd47f"_hex;
            s = "1b7dfda3e6da9e67ee9f207a9e03559fb5d7ec88f0310ac051e1e0612119214bcb11d1003bb5fbea088354c2a9c3318baa0264f67f0860f17528bfa63ee35f22908caf0e8e57c0ce63b334b747cc1a31ff90cdd550b27a34b05695a39d48e900a5e1ab4ce3f5030d903315a5dadbdbb0ffae04134a74cde2b99b8f8b5305759c"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "990d05"_hex;
            m = "c65f67c4843110ad555134fa8b9ec51dd9c93ff9ad5d96febffd6c95eaed88be3cd584f749c1c561c46bb11e50bd1bfd939202598cbd7c3e274cedce0f0e7ce3c452c8f6edf2d640ef904f1ebe20e8baf4a621e82041324e606942c83275db0b87609b8819cc2c93ff4776c47ece129d238f026e0ef3a07691dcd54bfa2c8b7c"_hex;
            s = "116b58e45693d6c80065cef13ab2f33ed6c4d3b6c5048ca2fac4c793b962c1d8315f6a76e379a0b4daa8e1ffe096291aa9c18b9a182d6f4c5b5bb6ed02b4a0fd39388e4ca5772165538aad34313696fa2a303ff024e25a301997f94860080783d87c7fd24f4eb7791a3b6be09c3f3ad0221ef8268444c40fd845617416119761"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "eef211"_hex;
            m = "edf40a32aed24e14439d8db48e80d92c4c11035dedd30d90a4ffde5dba8439cd274cf0bb63c155807a90f2cf5fac7add8297ffc5a4dd642ceae1162031dbf746a2229b3586a7b71d5bc2d6ac27324e320c5f73031de10a1d7046010a74105d0885fe7368be8d5b340fbda2148f183f7213f1c8ddffeae6ab5cb907e32b2b525a"_hex;
            s = "4e6e6482b8f163fb3c32ff454703a037b9882eec1f82dbd675c94accd79a476e12a347d2e9b4745d30164ce8484635aeddf1116df40b516e6b2af497d27f2194cceb801922aa6d55c935ad166bc477c8e54ab29c07f432b0aa3808e17d28254a0431fd0267e389a6b852f10df0f9a2f317c6a6e762c7395e743b38341828ac10"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "eef211"_hex;
            m = "b1bd4eedcbef7c57ecab2aed92cbd60052ddeb201181969a7713d53fa18ad16716a06d36fd341f1e8decffa5c41e1d695cf11861fbbfec65aabe0cf188e0b126bff77111b81d13308b53a232ba68c0ff1e1d3df82186e8802eb3a5bb6690c095950a810764730196d0283b1cda7166ca80a8836eed9e32f2ed3ac925a363a7bf"_hex;
            s = "7a0225a29a5f3e4592843c5c4d543d14ac544a3eeee9dd5e795ffa87c4e16dabaf07ef75363d773d89ca712df7c32010d3ca024ed84a954ff9625390e498d04e2c676f3c51ebf0a46fe22ccbffa53c52f9a292886e6a8b64efe5717c527dfaed41d2290c79c18ab28a96ab5afd2f071689653550a64be24fdb5f90a8014df659"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "8f705d5529b5bf74600abc485bc4bb76deb9627088e51fdd26dd0f37bb3b98a9da4094d275d55011a844884122daf8b4abe99d43d918eb50d9642436647f60577c5f60fb9b810147a910dd7dd610318392dffa3fcc41f89f461bb5be85bf885b672cecf00da3af4d7d90074c4c0144c4bcd2d49145f8097648ec7230747f7033"_hex;
            e = "d90b53"_hex;
            m = "10c21d2d4afdf3502dac1a791216d0c240b6b12061e0cf3033a7043380fd8756501cbe385d2553a6c7078aa909a3d2c22c2e9a743bd66503f6a8217ccab1b4f50163d916373b2ad80da17d8d211074213d76509fcede06f6984c95fea9e896b68b5f15d0be879f6f65429c2f40a4e066da587ca9043fda92815b09c103ec5521"_hex;
            s = "0411589c7d0860d41c7d4fef4d604b4dca0b160529209e762d5fc73df911e7bfdbe16feb0def70993e64eeb66888e47b3613256dfe04e75142ff2b325fd86b8e02eb01e4cd05b05cc788f014c170d584d092b7220a66133d4f0e949457eddc567eda792abe49b8a8fdfe177c6b6e0d7ac4262e95fa87c1277c46a759f9723cc6"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "09ffbd"_hex;
            m = "393f6cd3c89e67def9579e586c945fe97d567bae23c54a2e18c5f0903bc9df0b32ec9d9d533ec800c55b57dae2432234e065a52db1fd00ef27a043e35c15e9215167a22bd53856daa9586698e19735d08dd7e7a3996568ddf289b027ea5b467eded903e316371954ec7654fc31389fa7ccd3c978a4a489dec1a6c0c4ae42ff08"_hex;
            s = "327269d1d4d871a8be4ee49be39c5a51482fbe89d522c0d6cfb0ea6bf0c6f0b343a94222ef65058e27f5107e4f8d0ce20a064f19ac39189f221c5e62ad4fd7006eb1de620052bd35c268d5c1c6ee0f81e8b3f7f2977d2449167caaee2ca54d458108645268749651de6f7acaff09591d19ac99dc17d480ef3531ed4c14eb85bf"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "09ffbd"_hex;
            m = "036f62daacf68776f409d0595509a596a544b085ec7649687390324e1db78538fa90ea7b1abb0d659f9d50231663bde208433e35cb0510b79ec375f1f6eda97e128f186cd5d7cee6d5d22f10b076e8339fe5251a4df005bce9da4a1b795f566b72f553778652b141be2ed5e8c84a0fcf92b1cdfc183e0fbe7a5e1b9351177248"_hex;
            s = "56c4af89728a322066b8c291b4f03da5a038e4a44ffd9b49be9ee5d1a800da1c58e7a852218eaee853f9695dd308e1a5fd95b41a441c2a6bd124088868fa26f384c9ce87849b2eb5edac55cb95d5dcda7bfffea621b3fa66e6b200ce755b947e778fbae07490410509f5036a07280f943b7300562926cdca3b20097f1ffc24e2"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "09ffbd"_hex;
            m = "8c25bd2bed75a33ac134f9c1d445245fd8e580d6148fae11591c2b65382f271772d0941eb0577d2b748c99e7500c207b56efdd56cfa7852a302b47384956a4cec089810ebe987af0e8e47a8b91c488902d2ae4170983539e3adeb74ed451e2815c98ac827f0043930384c335ff3507a347dfbea02be9c172617da42f3fe98a37"_hex;
            s = "56254367f71f6f1fc6944ebd29f8a5592095ebc73ff5222bd815da17bac7f12290f747deaeb29b98c98d31a3ea32508d7683a67d449c59a0d6c16b4855aaa7d6f170c02c5cef61c9b6889207ad021017094d24246c4c90a0de055f02a5984efb67481684667eea36ad6373c36712625fa18d3ed41b1dec22f3bfb0d534e52da6"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "09ffbd"_hex;
            m = "2cb9740e0c1b8867866aa81c64122295854ed681e8eceabf0651bf7a65bc23996acfc8566f4bf42c151b7bf7db94eb57f0fb065546477549e829bafb8d4a67086dd48d87533378edf41d992e7fcfc425759a9c36bb9f4b32eed7767af6566f68ded0adeae25c7a70ca78ec09774d16c8bc357f6d6f7bd441bf62d942c768a580"_hex;
            s = "156747b263be659661e5e35e363d0523303ded9eec1e751575ab3a43156773a056acfd0daaa68625b1cc068458ff9e40ae167594bac846cca2b98bf6e5a4a01e961adfcd70206c05d66e3903a64b61afcbd17391ad0db529944fc2d0d7be3a4da8091cb75910f670d9515ee4f8ff3d62307eb54657e03a330e3cb0661e6fb796"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "09ffbd"_hex;
            m = "127498bf44b97a4a4ed7ad4bbc7c3781e2f83a53149fc95c1a6efa27def23d376866ec4b0c1c23e0e21ed1f677140f17c268b1965aa91b15e62d5749d4fb64024ee7d06569ff897ca026f0f282ff2f17a70dcc2ae8187fd8cfd241004dbaa6b9ab416c96c32b5429703930c543053e88782db49928b39cafc0a4e2d3b1f8ac66"_hex;
            s = "1976fe18cf82bf6ba851626bf94509348f56866930c771c82a6e12c30735c283694a0eeac9337e407525e0a831ba7eff77299c6896a85050b960718a40d5e34b7bf71eae4cdfad0d91d8fa6dfe37f30679ef444ccd360971ddc47e038123b7eceb3072f370796122aaf0b9427563280222328fc0068ae1dbd39a033740789536"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "a16c7fcbb8d6fc602277e9cebb1790bd14999ef7670400c0bd0ea6116fc72e29b868c8b62ada0e7b4cd351b5a76c177f158b4f724f1d287d66df114eabd68e3e8d12409b69f96e334c0daff79392d184b9102ea5c4ec13052bfc509d9ae76851e8557a417b86e9d37687d243cf48812ce621c5f39404cd6b22a60beef744a42f"_hex;
            e = "681201"_hex;
            m = "e24695128cc0f0e9905a6dcc1c54e481ef431c0426a13e2a51888984ccbb48864de601e8b927f04d3cccb323985f47cabde033f89b51035c3478f881f5e0fef64621deac6061b59f5e1ba5b8971fcaf22cda70bdddd883a021874621753e48e9f47d95242877292720cdaa55c29d564363bb3a1a953ea43d403fdc2cf5dd0fa9"_hex;
            s = "88b9604e95ccc993514a258d5a6785836b3c0ceda1f9a8359b1ec9592100c9b47572fb17d2c24dbd6b99ab46c408b7bd4b8094a44d05c2cde1145ab516b36926358f980ce1eb2e92793f65f34f09a4053f8deb77025052e12922e3f14823859d7e49aa54b7a7f0b20c1672e1a278ec631f955b4c19da05dd9c1f4487a0e08f31"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "681201"_hex;
            m = "820e27d35ad139ca305e9eb26c128ff59dcac86f05522e7e5721b458bf437fa22396493ea93903647942bef4c4afcb0a05a021d386c300a0260fd4395bb55c7473530b061f6baf983115501ea5f05b64de5e00e933f1d8f1aa20cbd6033f319ff9ae37d3c4508490e23e1dd717bd862ab36e2b5913c5fe996abc60d6c2c945"_hex;
            s = "519c717e336e7a28d648acf178931f6cb958684979b23e1d53ad32aa242e327699ca1a1f294feeb8b6ad8668b75a3e42ca4ce08a91c3fcae06c7974e6d9e23e622363cae4cdcd1914d31f38f95002b1a6da863e70c244411cb1be90ffea30ca4e345429e58eb751f676ea7ebee4363c552aa5bda5d57908fd5a87142db8d9821"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "681201"_hex;
            m = "d8330fa49a0a75f27470a2898ec1134666515fb467ad6b74be23dde26984d3f59028d467193307167717a2abc25aa6790d9acaa8f4ceb49274ce6f6d00161a2bd0c6dd9e7dee22e0cb0901f2c5c7fba31010ecb379453b39d0c95442f9c058bb40161291edc32e16184ea5a7bf907c8c16bbae1f1e9b6730791b72a97d0af56e"_hex;
            s = "5a692ebff6a43c5e63602018577fcac17415fcec4087e4c41065da33dbd7d87862de2e0c003bef2ebd0a411884811c7fbfa893590ea885acfb023857b904b0aff0e5061f2fe3376be5ae4de0510b2c34be6e0192722e63dd6f3fa9a7f8a191b7160997c463d7f7d46577e6cce534da08d1e5245b3a03b780f8144070cb66e6ff"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "681201"_hex;
            m = "243db9a1c203c792db3204bbfb3cea400d6e5efec0c935092f0df759c016e3c04c6b331f8115a1da85ad2989dcb911f18c3927327f7c4a4128382b996ada552eb51b6ba372d4b1bca113ce16c06ed116ef97711f53319908b8e224cd7aaae584a573ea935be90121768b7cca6f0232977fb2c62d03902c442533685bb92d99aa"_hex;
            s = "8d1a40fbd8186e3cd1dfbb529e1ee9ab13a6c8e6cf04e663a4de2349c05334f0ab3c694ea89397ca3e70a2a1957ac75a6544842af88cbe3ebf641f68cbce75638da1c953c3f594f8ee8b3825ab4aaafb9fb152f05bb7dcc07e3b666ca8626e69bb262bc240398007b871b7790eca96512d64f3ff94470224fa075ce3164cb1e1"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "eefc9f"_hex;
            m = "186594f37c9ff1fe3ef55bbb511dfebdcf5b64723cacddf80f4425326e3b411c3a84aa5b4b1ead19fd8e120feb8cfce3fafd10b59a21d9f5480e6b77575d47c9f1237fc459231b617241bace853a7dc13f93200df9cf6a733de5c8ba85f13501452a5c552c14017fa7f79d1fa88f48ffa505dca1e31e581af4b382237f61d16e"_hex;
            s = "9301ae4d76e84df108b70d94400c0b2dbf0b024fd5cdd5821c408ca2f52b7d4466a43abcbd8f40e9c07c4e4e56ad1ff471327e2e997d4e372d82c3e9f9db4d40d4d6308b4f7e5ac91c4ee2c194c038f8275dff82b9cce56ccbbd2ac3d12550f184b1cf938cefc85afc588c45c1ea055da0d4dadda266895cb4b84b846d8fac13"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "681201"_hex;
            m = "2ab6c6ad26e227177b6458a1caf18bc083c162a1f18b0fbc77b0baac19b7223e3df988c8b39dc9bcf4c7ca7ca70d18706a2bd057cef7bddaa397c16777f1763c596314c2e3b4961d774b1801c89f84c79cef6dc0d1333bc99e52891f1c95cb75055c3444bb10d7638c580cd7349015eca37701850127d1b0f04bda7d118c6a11"_hex;
            s = "8a270d2b49cd2897df192e12121ba6b92304e89a429753727e8cd7fd8395ee72788ecd58d91ab99b4385778fb8f9a5458a79790def0c05de8b5646c16f2f8f67652708573216f13335fbac257e4f6e46119fe5b50c309a7c01731c8f8fc240fc68f08f25879a32156dcded375c6ecaf0bf861066de3a034bbc00844dc74b8b6f"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            //[mod = 2048]
            n = "c47abacc2a84d56f3614d92fd62ed36ddde459664b9301dcd1d61781cfcc026bcb2399bee7e75681a80b7bf500e2d08ceae1c42ec0b707927f2b2fe92ae852087d25f1d260cc74905ee5f9b254ed05494a9fe06732c3680992dd6f0dc634568d11542a705f83ae96d2a49763d5fbb24398edf3702bc94bc168190166492b8671de874bb9cecb058c6c8344aa8c93754d6effcd44a41ed7de0a9dcd9144437f212b18881d042d331a4618a9e630ef9bb66305e4fdf8f0391b3b2313fe549f0189ff968b92f33c266a4bc2cffc897d1937eeb9e406f5d0eaa7a14782e76af3fce98f54ed237b4a04a4159a5f6250a296a902880204e61d891c4da29f2d65f34cbb"_hex;
            e = "49d2a1"_hex;
            m = "95123c8d1b236540b86976a11cea31f8bd4e6c54c235147d20ce722b03a6ad756fbd918c27df8ea9ce3104444c0bbe877305bc02e35535a02a58dcda306e632ad30b3dc3ce0ba97fdf46ec192965dd9cd7f4a71b02b8cba3d442646eeec4af590824ca98d74fbca934d0b6867aa1991f3040b707e806de6e66b5934f05509bea"_hex;
            s = "51265d96f11ab338762891cb29bf3f1d2b3305107063f5f3245af376dfcc7027d39365de70a31db05e9e10eb6148cb7f6425f0c93c4fb0e2291adbd22c77656afc196858a11e1c670d9eeb592613e69eb4f3aa501730743ac4464486c7ae68fd509e896f63884e9424f69c1c5397959f1e52a368667a598a1fc90125273d9341295d2f8e1cc4969bf228c860e07a3546be2eeda1cde48ee94d062801fe666e4a7ae8cb9cd79262c017b081af874ff00453ca43e34efdb43fffb0bb42a4e2d32a5e5cc9e8546a221fe930250e5f5333e0efe58ffebf19369a3b8ae5a67f6a048bc9ef915bda25160729b508667ada84a0c27e7e26cf2abca413e5e4693f4a9405"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "49d2a1"_hex;
            m = "f89fd2f6c45a8b5066a651410b8e534bfec0d9a36f3e2b887457afd44dd651d1ec79274db5a455f182572fceea5e9e39c3c7c5d9e599e4fe31c37c34d253b419c3e8fb6b916aef6563f87d4c37224a456e5952698ba3d01b38945d998a795bd285d69478e3131f55117284e27b441f16095dca7ce9c5b68890b09a2bfbb010a5"_hex;
            s = "ba48538708512d45c0edcac57a9b4fb637e9721f72003c60f13f5c9a36c968cef9be8f54665418141c3d9ecc02a5bf952cfc055fb51e18705e9d8850f4e1f5a344af550de84ffd0805e27e557f6aa50d2645314c64c1c71aa6bb44faf8f29ca6578e2441d4510e36052f46551df341b2dcf43f761f08b946ca0b7081dadbb88e955e820fd7f657c4dd9f4554d167dd7c9a487ed41ced2b40068098deedc951060faf7e15b1f0f80ae67ff2ee28a238d80bf72dd71c8d95c79bc156114ece8ec837573a4b66898d45b45a5eacd0b0e41447d8fa08a367f437645e50c9920b88a16bc0880147acfb9a79de9e351b3fa00b3f4e9f182f45553dffca55e393c5eab6"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "49d2a1"_hex;
            m = "915c5e4c16acfa0f49de43d6491f0060a944034475ba518572c08366a8d36c7f1e6afc11e5e4649757bf7b9da10a61d57f1d626847871d8a2948e551b54167c79de88d3ebd40a3e35809b996a53348f98a9918c7a7ec606896ed30c271e00c51953dd97aa6a8fe1cd423c3695c83fcf45120ec0a9cd1644642182b60e599a246"_hex;
            s = "3d57ea5961db8fc144301ca4278f799911229d865ea3e992c7fbc4d03c6551729e26034e95dd71da312340e4051c9dd9b12f7700a821fe3b7c37785d5106350b667ac255a57c13da5842d90bcadea9e6b1f720c607d6893a2caa3c5f3c4074e914451a45380a767c291a67cac3f1cab1fbd05adc37036856a8404e7cea3654019466de449ad6e92b27254f3d25949b1b860065406455a13db7c5fe25d1af7a84cddf7792c64e16260c950d60bd86d005924148ad097c126b84947ab6e89d48f61e711d62522b6e48f16186d1339e6ab3f58c359eb24cb68043737591cd7d9390a468c0022b3b253be52f1a7fc408f84e9ffb4c34fa9e01605851d6583aa13032"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "07485b"_hex;
            m = "03d2f0693517cffb2b724c1f30502c5359c051c1bcd88dc1dd54b89e6981009d275a813b2bf016b74d0f6ed0d91e62d0884785c9afd8fd1fb7e99246cd4005cdda71a39cb649197a996d8ad2d23fdfb6bb015f24ec3d7f88af64fb83b4b525eb06607d133eec834cf7d6c9ab817b4c0dda370459d9cfba05ad0c1adc86a909fe"_hex;
            s = "511abd82218cab344979b2887b02600d2427f1eb12ac01d97684c2a443a9272834c3f79cded07a39dbee3770dde827a74dc994b17bfd8a26d07b239d26d58c42f79d560264c31b7e1c3dddef6d7556f228c394414f4cec561c3da2686a8eebec7702f32850809a93deeb84b2a02fcdba224d2fd9efb8e056e796f49b57d56e9f3e90d0b49b08bdee93a2e12e676fb4d4fa838c5bd88eda008f1b592a72465587be0ae17d9b156b904f44a7e04d3b58d24ad67b71b0f4c699fa51639546b62b9f83597ff03d465f1bb396ae15e92d0e92e85647d5df113e2c7518d0e3ad2e7aa7dac720c98347aa151e4f37fea081dbed350cc9c93f606b38f21a3e5de6d140d2"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "49d2a1"_hex;
            m = "dffe42bfda886e1a73fe8a8dfcf71c9fb44deb054588a9bb9199d554aecce08f2ff88f2aa6f8a0fb675fb03c8e685c27432ca7c33c189bfd849d34fa7b2979ac1f57eca389632426bae0b98398ad60a3342557e14e96041c1bf4d90b46cf7ad1348322d28caf43c4f7e86c0924ae703c109ec50a84ea2a43df078c3015a52b28"_hex;
            s = "8f4dd479239f2d08dc05d7d40539288b67c4d77210ecb16be76f0b1925e8b088570831e361a1ca57893135f8af64b8e2996b8d635899da4e04c68acb9b1b3813697d57da90c57f18509e0ab6705c704feb448cca5c07d258ecd884ab93f508cefdb25f2bc3061c4006099e2e33b27972c3edb0a0a33114d381c82ab506d041ff680af595ef3400a8bb6774030d2e38dd304272092bd32a553017f7bda4b998b27aa8aca12def327b1f11063a5342b0d55738183417d321c5682fc4ab64e79174216feebb989521e1e3d827647068003be34fe1d093964d28f4877c49b4065672448597a89b91919cfb55ca13836e7e6f3b3fd04f417cf1c16d9872538bf4e87a"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "49d2a1"_hex;
            m = "cfe99788f55ec6944942bd0a187d51b80fd8bd4051bd4f07c73e614eb75a8b9f997b176b2642b5f1b1877061ba9ce142c1d2a311583f072b7cbe08ed253681191c209d7b0d438fcdddc284d93d59d6dd80e48333a921dd31c9b6834f88768f8701e01102d3e8bdf074fbe0b8c93d9951f41545ef6eeb3be35530babc079f1fb3"_hex;
            s = "9fd6f6107e838107f906c26cb2910704599f175b6a84db485fbc30776eb7fd53bfe20c38c537b154a3e519b662bd9fdc8e3045e21f6e5ae97d0ff6a9d8632825544525d84f99f80e3ed4e69dc5e219d59ccfbb37c23c84fe3b3e6fb22f402f94e5225c6387fdf8bcdb3508f8832908fe05771521e92234348004e8fe19a8f24bebcab9f074327c88d066bc12081748d696be6135c6aea32220ea786ebd7800e6936365ff25831c28cb6c8a59237ff84f5cf89036cff188ee0f9a6195f2b1aca2e4442af8369f1b49322fa2f891b83a14a97b60c6aeafd6c2928047affda9c8d869ff5294bb5943ad14a6d64e784d126c469d51e292b9ce33e1d8371ba5f467b3"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "a17a08272e656cf600f4650ef0952b15d568d9fb7f1b3f3559aa3792743f7d895e4e26dec2bf09996de8a99f7c434bc25b0c7d61e83fe5647c213b19902abfa053321a16048642cd3800de26172eb39ccab029130ceb82e5c25c676e89007cb00666a2d8f64e59fea64628cbec9c361abe25841551db01f58b80ab17f02a93cbaaffc2630ffb6f56f206b8a6f8e0f1e5790652e7c7227258dbcd5924e94876f983ed02e4e82272f5d44967bc501d1515d80dc25d5c838d0357d0d1704b0253d6e78802c02931000fea2e865c90b266c8a0b472e8eb17456777973342da6978cb45d2100cf91ca6f6d69ff30ee8f3164bfb180de0b355c067bd8f1a8544b9aac9"_hex;
            e = "66a13d"_hex;
            m = "41c00eae64f3e330222e114541eeb5eae1a705ca0c0687a68e7982fa07f1b3de3ee7402ab89df2dd8aa69ec06ba8e4460d611cb7aee88e8dea35e11fd3e4d77c4336379a71590ab0c3e909e0e3b6571915c86c3cc8a0517d6ac1130d816f72f6f8b7d946b6af936f76ff3beed2a0742ba0e4dba082b73a3eb924ff0c3a1bec12"_hex;
            s = "13165444a1f039da049b998e332cf7655149975713b5378ac5772f2e176ddbf338a25e297d873cca5f19eb4e4157c532d06249d1e99c2857f8d74bb74cc7593bc872daf5b45541a373aadc43a0711b3b2f27ccfed06d9578b2a3c7d10a12e398d0302f86e05f154e3cfd2a0e072aae157cae529bd5688fd0ccea22f58181d069eaa0957a5b0eaa2e3f5a4aeaf3d1512a43dd2f8434579eb57e23852d7323c5dd22359e9dfec59dd75ee3b8e234a41863fe0a68c46f777a9f48887a786cfaa40db1c7d9e04efb8a882d8169764b47a013b5d1d15f4cbf758adc83c53e9548e77de20f14b3b5f064465beaaa32ee41755aa48264a14df837ce5fb85a5ab91bf6eb"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "391c9d"_hex;
            m = "671ada018b6132b381978036f19cb9fa9cf7d07334642cbf718c59896113fe2d00d70f1c087743830a13c927be53379398abc3769bddb54772bf1c2abd3ec017a9a35939c315fe940e5fe0eb52f438e1b8307e5e94e1dc348206e203b4d77b5a8a05201e63424b30b4042f4a5786a62a25106bf3c67989d0c8ea13daefe4163c"_hex;
            s = "2942af5fb4e5230990bd20c2095fa29e9aefe6e6489111971f0dd397e8d461ab3f59c0f29b86d11ff187984c54c51b0bea35f479a4b83c33dcc8f149f56eb9859a71e45f3a33b83d30eca87bf19803eb5888ead3151d9b673546e2c0dbdb523c34331cbd3a83baae6b55dc465de20d40c5bca9647d74b8399d6e40404828772690afb93b314a55efb5149603c8421fd85ba5b61828c6f679b53f929398d87affb8929e4684631aa2e86d492d3d7c9a90c58e465080442f69623e4eb2080f7af2ed0442c0bb3f0eccf45d4f075e4474a2c058665f25164c457fd19e5852061af9b232cfd2eae7b60001364c013a1155a9af18cbc134d1ee8d30c157cde3a9ffbc"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "66a13d"_hex;
            m = "be91864d3728f895c689f09b28484138e0afa29589bba7486a68f0bf4b2ea1e287cc11f46344c7ba9e27a2e049125798d97921847ba3b3d6a7f672b6f875e1e43b875c9ec6fa0ac40b470d3a6c18fb8e510792da78a9a7ec8dcb60a5fbfba39f014bce120851a9f9347299703961166170e25e5f2ad46bd2446e2355fbc9d05c"_hex;
            s = "631529e0b149ee1528d514861cac711eab8c01c1c22c7ff6ccbc08783a1ccb2748c22e57a1deefa867dcb1ae74c40b1969db2cee64c0706af8daf4c9e91c12672d8f0849af4bd0c4c5f8e439a3ba7e3ddf38a9b38db545410dec0aa40522d6a3cbc2ab53a838298f0b93ae7d362158f04858fc33ec03fa6d3b7ff0f27d74cc4abcedd25642f4d259d41511456004c24385ec32553ae5d5728a8f68707ddd6bfa51c2f4574e1c96ef4db0715675fa4fbc57b9091759eda387e16057e9d89797f61df9196044b98667866e12c5132928eb735fa2d02c0ee7e08ed68d80fe1f76bd85756a3967c6d3e1378a754fecee72362928cb622731bb01231758ebcb805f5e"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "66a13d"_hex;
            m = "4c2d1103c36e96d179291397b1238177d4af3b6fb9dc622d23ed80258b096be020346d970d7ea100fa7aa068d5f25d02d2d94e7fb081cdde3f0fbd861f2b7092cafcc86cd4539d9d72265fe33a41fd84293805e3eaa00c51557e502537009c0f516b6ca9a355524fea149831677627a6e2b3a7c4ef9fe82d7024812b5bf0b700"_hex;
            s = "4d8b5ba1f5409f476221b3527be6389c1ca3eb50cd62113ad2f712cb2142ceff3178948670c9cb7dccd44896ddec9c0eba228370cb23919610774e9d70d6eade95865042edca6e90cdc007234400591e1cce71bfbf5a546548d483e68905113693a3d1719ce376e72b180b7f3c7ecd13469b8edd7ef95d9e330d78cb36e37b50e87d161b1abdec433421a3a65b49b39cacde0678de41df894d6a2b0f171cf91052bf0f0bb7cc89889bed7699e33540b4ec8f93ca2c690783dc5d80fa5b815aab0feb3ef4f10c0cb46496aaf6dfd2e5b3a7dd64386ab9a4da0319bd927facaea80ba5f4b1d71e16fcc7550fd8211756c35935507a32f204858e2b475d28eb56c8"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "66a13d"_hex;
            m = "e896edb0455f372c01d222d40af9298bc17fdbf450b4d0923dd7e12d4095987752cde6ef079614061d83fc805526791e81d21c7adfa52132a5c6a148ddec09c97320caad8dc352ff1ad23c3eae69c3028d867de20610469602187959dc5e6791731701b27eedd860204848d4bdccef800b2364f66cfc26067b53d326e4f39b18"_hex;
            s = "6e21208ce42d4ec6512c300f6f9c0d43163eef7e05365448380ce3fec34913a701a5e30455556335101af1ba40ea69fc17b30c4192730336e8af2094d36873cc83617a3feebd2b09dccac1b31b9352c1db3c3dbb7ea1e774578e44c92ea925dafd9de71c46d3f25eb015199150e6e8c26ee612edc3fe2f0ca6acdca9274fcaa87d97e104112b1f85d1c3f3e92f0be7932613afe5a683c0e52f9234fd9ef979844e277e31d3c2b725bbebe97a9a8e619f8308c01a9b3ee48e5dfcca5b153e4890effb297ee0fecd30fd71b6dea0694530fbad6c65abc4621f23263ceaf2cfa21fcd19cb180812667e8b1ae108323ec289826412f124547ddd92024c0ea9784654"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "66a13d"_hex;
            m = "3f49b00ac1f9255907cc03f9b45dc787c250d9d6833fb389e2f746e1ede599d390cbb45ea3b7bc1b28365f16cdc573dcb988d9d5843fa8d4877587ed57fa5b878c9423b1c7f21fbaf3e138fbcac39cf89b3ca9a84b2e0c109be82a17a89abf95b80cc4ad3390975df0365653b23e8b02f3d30ff6e0f62864a4b8f506e9ac0c25"_hex;
            s = "90ac97a93a9f6c5c6e268e3464b6d547dc29bff8797d9f776e2f56fe1c30fefbb679ca9fafba40f400f08a5163d757e638aee083084581b760ab30071e075f90183db328e1ab519fedca1ed92a1e4e473b538e2470606b5379abd2e4b73f4c132e30c115bc34c73019880571c30fa6c6c1e320c13022317cd3acea8c520f87cf054e84be89a952202fc3f8d0d707cd8806b8b22bf2c0d7bf884688607a05b635210b9a7e2e1d2a28e324c1573d363d5a76ea0aaac70480671caa4969e5177448e62e76270197697fcaab720d811588c8ab540f053c8b23b7cefad205fd4c444bd5e73d80c62451158331face2b6f7ddb034dd5e61bec444f68d0c7e39d2df940"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "c9548608087bed6be0a4623b9d849aa0b4b4b6114ad0a7d82578076ceefe26ce48d1448e16d69963510e1e5fc658f3cf8f32a489b62d93fec1cdea6e1dde3feba04bb6a034518d83fd6138ea999982ab95d6a03517688ab6f8411c4a96b3e79d4141b8f68338a9baa99f4e2c7845b573981061c5fd29d5fc21833ff1b030b2deb651e51a291168e2b45ab4202dcd97b891925c75338e0e648d9d9ad325c10884e1fcdccc1c547b4a9c36aef939e8802b62405d6e3d358ffa88f206b976b87f8b12b827b0ee7823f9d1955f47f8678f7843b4cd03777e46717060e82bf149b36d4cf3d0bc7e4d0effde51a72f4ced8e8e5b11bdb135825ff08873e2f776929abb"_hex;
            e = "3c7bf9"_hex;
            m = "fc8e19e3b26bbf7c8c33a452b7ee02cbcf56fa94a58b7cee3e0866481fd6f013c7ff47d27e4678704d1590d74eb701be26c748c2cfe9cdb99bb80b4375fff0a16a2b87cb6900d4bc478c00110659b6d257e7cc905d5926b0b46fd706b2b48aa6edf921f6fd019b08837e3b276a3ce6b06c9dce24d8454d7a931613ba5d5f84c7"_hex;
            s = "058bcfa4b10ac6a73918a07b9f0a8db1ebab9a0ee5c7f0a2261b98efb3592eeb6bf45fceae24ff20c2683e1b33291f49a7f86d7fe239c58a45910a14748e10c25a4dfa693e5a77138de2fe5f61de0a09078cd0d3c61b1e740bca7a3d4048d4fa12fe69412438efa18216819be40733500acd8087f429da734fce6a97fcdc9c32991dc847e4d653260890304f378a10b7754cb4ac5efd7a3db23bd44b6542b81ae9fc33edca6eb1570b1a39a0b8976626c3892afc42e6fbfa8bfbc191c3d026a6248e7ee391f977ea5f0442306ce87702ced7b3f00bf0a6040604d0a663859737ec6c04dc84763d1cb63c4da8381a08cc52b370ba09515b93d9a6d3e47c5929aa"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "3c7bf9"_hex;
            m = "4c587ab2ddd6b13bf7a916b5d571d7613f24258201b1421b9de4dcfb3d8a99f7ebd5f37704024634ea38273ffab4f846be23b913634f21556dfeeea3a91779be63078d16da637990f1cf6487271ee111c9bbc483674733378483008c9171362f1db6f199464373d97334759445f8bb4acab3ebdaf4e09f494a3bb9bfdedef7d2"_hex;
            s = "052bc5efecb052b92821c405e6f22cf374dd1ce4bf691eb8abcc1cd01254a6e51fe9237cfb9cadfe32a8780135949399b048d26f5de49bb9d008d39b749527eadd13066baff87765eb255021517a2ea69e45bd35db1fba9219c94f944b2c9a33a37779505c8eae52d6061988d152f9f51f0002e545973402294dda7f7c7cc3135c37ced8cf723d4011d1ac16bc1d0bd670eb7f63f079f30dad8cf55c326a33bc1684ff17a91509f4ead4f93c3c0eb6679eab612e05fc71b936c99ca8579cdeb9f26200a4bce89e330fd5d84b1ec98cc1d758243001fb18bc325b630a58154c2d38a5a8ac2ae6cfa54a20f7580a745c206990c142e8a580eb36266a3a9602a8bf"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "b53999"_hex;
            m = "425994d102a63f542766b12d5207ace27de9207630c2fdeaf741450413f1654f7061c563d7829e6665500cd33cb4647a78a9c7c9659ff749ef1c6a6b59a99d8532ecab1885121e54517005de386947d07b923602261467888852c27be6ccd5fd71436d77741f6825d20dc5d5b0ecfdeb6fea96a9ddeaf5adac2a74bb2322b4bd"_hex;
            s = "c1f91aa430083ad84ca80ffae2d1ac2bee9b22bd0947175ffd03bd294f6a3cbb5ac63afdacf02f7a6a274fbc33f8aa25cb08174c9c4aad0cb9cbaf02e6f72a8deb6ac52ba88da773b4fd07b33144b9a28a23a1db150cb095cf03b208e80dda3263806b6b0e8eeeedd624d4eb8028e6b98ef2a3e55f38f1b0041425cf7557c41d35d4b0383448c800076eea2c22ca2f333496bdf53564f39d76822f55cb767cc1c2d516a22b4c6fc1525608ba61eb42c04c788c7050a48b7f3a431b2553dbb52cc065a9869c49cc021d7e448dc7012842d3351f98820bccd4fb7640b85fb431fbccbfd4e2544b6f3c7c270326c8cbbd216333ac82260c5edb47a301acd05c7c7f"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "3c7bf9"_hex;
            m = "bf082fa4b79f32849e8fae692696fc978ccb648c6e278d9bde4338d7b4632e3228b477e6a0d2cd14c68d51abdeed7c8c577457ec9fa2eff93cbf03c019d4014e1dfb311502d82f9265689e2d19f91b61c17a701c9ef50a69a55aae4cd57e67edc763c3f987ba3e46a2a6ffb680c3c25df46716e61228c832419e9f43916a4959"_hex;
            s = "621120a71ff2a182dd2997beb2480f54be516b79a4c202d1d6f59270f8e4d4dbd625ac52fe0e49c5fd69dc0d15fb19ec58c9312a8161a61cb878abcb11399937f28ff0803877c239ce0b7c4cbc1e23eca22746b071b2716475424c12944660b929b6240aebe847fcb94f63d212f3aa538515dc061e9810fdb0adeb374d0f69d24fd52c94e42668a48fc0a57819952a40efb732cfa08b3d2b371780aea97be34efb5239994d7ee7c6ab9134b76711e76813ad5f5c3a5c95399e907650534dbfafec900c21be1308ddff6eda525f35e4fb3d275de46250ea1e4b96b60bd125b85f6c52b5419a725cd69b10cefd0901abe7f9e15940594cf811e34c60f38768244c"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "3c7bf9"_hex;
            m = "bb40a410b0183b32df12f739506643bdd2fa7e6aed83974918ecda402cfb09dd1932af4fd7f3b1b5a0e8269c5da268c25e806b204dd34e28653f304cdf6545bfadbe297f6bca7493936b8e91f08bc56455059c4c8ec36626972414ee0ca04c82e1aebba953e5ab531e62d823f16b7f2a1f51b9f6979b07cb16602e309bf545ad"_hex;
            s = "3f6909f674d4c9c2c26b66d8ee3d7702c560b193a8fbfd0ddb3a9dc909a6eb7aa74d446b7993cdd5b7e272d826281e4cfa08000d2291c2ebe3ee6a77a4e03a79248385359d0885c61c8ade8cf4de7c8e51e879cc1e6089a91a56dc58d2b239e185e9afebf733e2f0fd061270eee0670122c44fd17af6860b6f59690a1b2a91e16522e6a75903bf4e6c97237825f0b01e4c236052b173a8d91f910b0c903590e16d7104609ff9c0194ffe0c09dac1969ea08b01497c8169c7357e8b1f1040604dc0f8b967bfd075284736aa22b0822d3cd13c48a8169413e0b6b26af56c577c829b38e3fb5c4ff78949634d14ff3a40d0d43584d832d6b51d4065e0900ef197a5"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "3c7bf9"_hex;
            m = "56db10c78e9fab7c1c356bf8b38e4adcc464ebd1a3cedabfe812144016baca547aea625656f0bf2e3f1dc2c9c4d310c650e01672520a4bf79aebb5d00600af805ffce9847e62b086b35270d367a3770fff33fb28047b5f888167b28fad647940cabaae3a4d1c08ea3f7d7d00e326061f9906a2d902499dda652c1263520faffb"_hex;
            s = "8432cca3357f5ee765bd37dbe2b2d107dfd840f8f720cf4a80144740f96e47529c553fd503a25bfac61ad76a24386af72d81522e6f05b66299f6aea3b98b23838e7dde04db8f8b0f32ae393f6bc0bd7070e566ba1fea53ca871d680f70cc9585aeece672d7c64c228c49bf1ce877dae73f9d8756433f5edc4331415d51957d23e490d4f25317d09a3ad06ec9229dd706cf593915cb156d7f7a32d68e52ca27aea7087d4fd1e194b6029246694742dc70c5136a26cf41b3abf9cf9cb65cd2e37ade6b9fe5ef6160279871230f35758f02c3b37789c1d74df0dc0f97f28bd789755982dd249c0960e64739b3c74b9c55ab810650529e7243bdafda7edef76fc748"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            //[mod = 3072]
            n = "9bbb099e1ec285594e73f9d11cbe81e7f1fa06fd34f3ec0b799394aed30fc2ed9de7b2a6866fde69846fb55a6ab98e552f9d20f05aa0d55c967817e4e04bdf9bf52fabcfcfa41265a7561b033ca3d56fb8e8a2e4de63e960cfb5a689129b188e5641f20dbf8908dab8e30e82f1d0e288e23869c7cac2b0318602610a776a19c1f93968c652b64f51406e7a4b2508d25b632606834a9638074e2633eb323324b8b30fdbd8e8fdad8602b11f25f3906439055afe947f9b9bcffb45dad88a1df5304c879bb4a6eddb4d3d1846bf907d2ca269845c790b2f0af8154aad9c4acb75e18a5d0e4f9f88137032b9964fe171dfa0d0f286090790f52157179a6734b5f9a64e3d2ed529722c3d3836d4501496f927a0f8e389ca35332b836d99e995f4a3e86f581bf9abdc7a10e06a6b31296ae3b43e6ddc9a0d9a7d0d9c4053af0875e851192d1de7b08d1beb7b857e227f8803a5620726a31920bcab922d3370a78033b315024a0fc1f6c276be565e58de77f294c8089ff4c43fb334d26006ab5757c65b"_hex;
            e = "ac6db1"_hex;
            m = "921961e184a5d9657697e3e65ceb1ed10204ec56e739df0e4f906ee194c9ed27bd9fbc0d514abe3a6e480cb3155debfcc8d9fc815719b334f7500a769488773b68e31b69cd273c824f79f58306692c0c232fc5c0c83415ef1dd59a73a063e9d7bc6ee7bf9e433c8344b3051ed616c9473a90afdde393ee88e9a5849e5f642b43"_hex;
            s = "55362a6854a7846c4d105dc8a358fd4c02931f117631968457f422939d266682fd705e2091bfd5d1bfb52b4bfad684914489ecdad9038b75c65916a9e967630b16c76656b58404ec11ac46d8684b3e72d4392fb6e7e6c929e43ad4fb6ce6198f241b39e8bcbbc058792dde31b195b91bb14236dcb82c28a5c24d633dd847d1548dd403b3a70149371f46432db1767a00c462758c2298fe9f1f04c2ff4b96858d084ffe5a624cb85c1f9be2a60fed40133b7c571c6c467f46a0f1e48ee6e2e6d65424bf8196b0d927e0fd4141264aa5df4129d52d2fb57b8dac9386a84ecd34ecb1feac3a2b99d055eda977ddf8027f1178348a30e4cb4ecef2291d7f520794018b39f5251fd46d97282ac21f6bce6539d19aa1c21c3c220a2ddb6feed262eceebd753eaf5e0eb98cb3eb7d324a3dac0a415a18b7f36170676e8b9d3e421a6f77046bee6d9591c93f7ef0242f464f15b63132a0aee80949709429b1e76d40d60f79b2a6ab362f12e2cdd0bc66868c80278043e179a36f2815e7916378b0fbdb8e"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "1ed02d"_hex;
            m = "8568ff68d40c9f240b5ff56d8919704a4819fb48b2f0741db6a3608a1aaddd861344d79813dd7f85e2f2f92bf00355adeadbc1d08b14fda5b5dd0f69c0fb37a9120e25a9ef166a0793352d9c7eb71fa3104fb11d55a38474220b205e6196ea04a94f506412be47f347b1f787dc3cb475e2fe31f6b9a6f0d026b6fd32a587dcdf"_hex;
            s = "191cae43b354617b1ebedb701c124e76339935835a3633b4f806fb835d0dc4b7e4abf00f8c575fad8467ca35bc0d37b58a90db835f4ecb9f1dbfdfaffffb6ef1e0b894dd65fbf8e36478adb673b116188d864f185be5fcfc17bf1e6cfccd499d632b3cb1722c75776cd4d8ec68d2512c1ca598b970f03f6fff5facb107c0e74d6aefffaac20f8e3aa6e825a1de1690a84c8ad1e766642f2a89d3032b58b8e6ec50ef6a8e69b6afd30a2755d42b55f9e21f69c8d9d993549d198ec6c17d12f09ab4be0209030dcb274afefa77fe461e6469ad51f56dc58ad2f06b620af36ba712fa798d9812d2b6ce8ff4554b58bd2a6a8abdd8d00920bc3ad3b61586e544eb073419a85bbc1dfaf775068dc004a7f0ae789d5023d013f3e6096ead893158ac4ba050b87f8186705179f531be573d9557744a70ee42a4b3eb89c824eb8ae1172212c177557267ef04157f9fcf003c2d1f6039671d3af71339c30fbf772f14b3d59e81739ef82d61ab61475e1b4c835fa50350da15610f45531ae85fae5ff9a31a"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "ac6db1"_hex;
            m = "88902b37b0db4246c41b50f180eb1350b1b6dac0477a3dd1accb0c5f541a85fe9637ca9cba15926153ce1edacfe66f574cd4b691adbe0c90ed8563ccb401bc93288e9baa06c7b837f191f8de0a5c9b2bc0a5b730eabfe56f13d43afa142779d8e99b86abbd791e90476ec64759d30194b631c6e425053134c3c0792f9d122296"_hex;
            s = "9d64c3b9a4ba78889747aef7c8565eb075e5bd92a55f9d34d3df6a2d740cd863ff98a04be4866e9f906cc6d99270d208a3dc2e53201cac9f4f758eecbe8a44db0243a3e40400cac37856079f2fe02d54d9748754331d9935595c35b22cc6c45686ea964642ec4ca7e0a88e4a4c0a6166733e361c46a592469cad7009ca3170cf3fbe485b1c8726e23a6e35f9691d9bf4029d82756c64a4d31ad0b8ef57a0ba2d55419d7cfabbab1a23c8baa4bf043a444b127920250551467d7d528425dc7c903c2c824e6b9b65f543ad9d7055300f19500356100411271e15b939d496b4bd4cc3ba4b6aa2ce65f4825275404cb19512ae27cc986b0af6fddff35980c2cc0e96829ecbd9ee19944838e4c83b1eadb6f78669890f556781c4e97d8ede9664080e47b3adaf2f5e04bd42d46012aeace3078f9068d870fee02b088f9674fdc0ca0064e9f0f63205836d7a8771264c553c945eb7c87df2a13d8efd3cdc8409843e7a246089970abd43526f3cc9cf993d419a6beaaaf6830208686a1fde4733f078ac"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "ac6db1"_hex;
            m = "973606b2c7e5658a9d8f264b8f5a266d0992cfbd6e9d3ff95c31a69a32c4f0f1cf44a5759d090d5ccf089768e6497b047a9b9f8f3786b8f82681b18b2d65500ada2217005cb06852d249ed17c9d637a9ffa7a5fc6d66882f854e8461b9983ac63c3623fa0cc4bf9530bcf0ff3ee9a086211eaaad1927f8c70300e9c5db45f54d"_hex;
            s = "355644f5a26a4ffc638c44ab4d0b7359f37845235bfb994d28e63b114c0e0f97d2e29f448da8b12eb804792ccc686dd807f44211d6af410bdca1196df84016b3cdae180bbb59133aeac5928560ad2cf6be61392dc9e28d7ada11658cf4a873bd2626ca839e697c79a5c4bb3ed4c9b8f48f83f2800e1907376f2e8874c23f1dff8bbf3b3f98bed7895d486079a92557a553a71e18cfafdc155775f39a77455b432b0c2c4f09990d130060143e7310b9d9e1ae6f2b1b83b90b36c6581473f60c3c61a10e286557f84e5d04cc36e12cbce835234d2d773221313ad7287c9957d94a1cda8c1fccd3eec45dd84a5d075d6bf823123fcdc7d549286142ab514db6d998e377429494f07041387de3ab31b02ac1606e590572bd9003e5a62b90b95b00c0eca73c744ccf4eae44374e26ba6033dd2baede95e19cecc840a045bf995a3250ce7b08e0c3267de822616f93a4dd9e629eb38b479bd31071b48976cf73ce52c3734abd93249300dd5c40635842dd2a290276190737a123008a4f0be557ca6628"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "ac6db1"_hex;
            m = "170dcd5458adfbdccc757e0b5abc19278112f24b418b995d395b46410da3624c0a8b49fc0d914fe6a02101ef6765adbfbb5e24739434be92acca9f43e19639bddbb012fef028c7c0449d52a9350b88c2f6e5e52a79648c0c931e8ace5bda5b8bd3a3afc4ca1b6e520012f99f8c57b3167bcec0d8bac30cb1367e8f4a4118d0a0"_hex;
            s = "6a4db2e6c13ee8ec6174bf57ae5bb7555e66dc2e3b618f259d913b5b8b6c16b9760290c9c576b563316f510ad2461cd5086b6d9670551ec74b8a9d15ebd43ccdfdcd74cad660a3fe3f36992c86559cd8e9e4d3568924b1f7e55bc5d8df4cf53f240fb3b945a08d24f205d5a7081410ea3e8136ca282fc99e6be0b1fa2faa742c9d682d08a77b791bb0421241e6a82f84605dda359e4f8475cef346c9f6a54a085492fc4bbb30b1047c66f5fc529ecb6aa9ece561e5a3a62f9a19eca2badbfa32a2aa205713b16081519c2cde2f8e8261726fad49145dce0d9e24f6e085e44bd86f670a114ba98d54389f0ed683d062735cd495e6a8a6eef9fd70355b92b4cf6cf0c24e898b6d3f7fe51dcd1548a1adc67ba585e2d18809ea658d6ec4bb5e33e8501d11a266f5e0928ecb58547e72c27db8b07aae31eefef865bcf6a08485675d3037f432c157e5ee428d292bfc24c654d8fca7a60107dc18461251906521e1e9965fc80c7b5f582ac3dc3798a0a2937e76d7e7fd7122d3fd9083feeb9a44ad7c"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "ac6db1"_hex;
            m = "b2f72cef31be4b7439191d9b342065e62513792826f950481486dd4289429b6e0ae86a05820c99e1ef0144845cfae05c0f6f144603c3ca50992387c38ab1f76120e2cdeba624cae61dc51a9f3010e76d6ab92936a77bbb34c8ffb4f9ab00f4b15badfda8834e050c292b49f398a9a39f9eb75f01f8684b7d0be10dedd576b9e8"_hex;
            s = "8ca52a9040ac49ec2415054ee86379f297832a2a33892c9dec09de778982fb1bbff68b3787ef43ad15f9aa0c518847ba1b3075613bf187a6fc8a7fd7f0b43a6a24086c1d6c5fcb1db18c93bc508e609396ba019fa43dd19f95194c47003d6092303be35477a3137aa2adaa51b22618db29fce98b5bf791ac70be7e238c558f0fb42a40bcfe0e9c07e178afe7a2db74fcb03693ed46719d54d69d5de43ad6a93b0a5b7da6e05ebf7c4b02da42c7ac1f8997da7c4de00c7747361bbef534461bebc23477e93a48558b3ade7d09dce6fa6a378e68e7204ab35283c58148df0cf9444e5f91ad31cd0474815895555cfd7f9cef9164b91db4f98816d194f85bad581f410a655273e5d14491793141f9d928cb30a322c513935dfd830dfc75030b8b2ba1f46b763ec303bef32b4dbeb01781bc1f2bf2ceba27750082661558cf3d42f03d50409b7db521299009753c25926e3e6502bb1763ab68dd5c19dc0265b16a2d438c3ed23b74e60ecff88708e5601a478986dd1b607a2db0fe049664d136517f"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "8aa12846ecb9d8b954d2ca0fd3f60826c76d2a98ae615f38f5a662cb6158f17f29050dc6a1bc2f60f3a9db2da6c9b27b8cabe25cfc25d005ad60ce298f6da3415ee0a0a00cd2fbaf1eb67d4fffbe03b2570ab56c10dfee9f4da86c05920993c92c4ac33a246f5102113a258e17736897f981b8b29ae695802fa1bcf9b41a5f1053bd77400a153d1d6efdf4e4c14703a34380da2921deac003b4a7246568527d9e37d0da956766f155d3b9a38ddb747f2706a72268542f594c90e0d2f0ef755f4aa67aa6a25004548c73861c0333597337a944c42f762ca2b54821425477e4e0e2a9b1842ed3f16d68ed31318dc396071b90e1e514cff975d198a581723cc98cb784d18cf197a14dd7b9d5036bd7724b9301f514236bf7c8b290dc5bd93ebb6bb2d18d3fc4f4d480b8d1b62ffa3de1224607976a27d40f912e50b46b915f19556781b2ac88e16c14982a0718bdb4cec77127165bd7151f0181cf56efa1ea345fee075a7b36a02e74a6f3eb035b608cdd2ceda4d738876fbd7ffb009019581685f"_hex;
            e = "74ef0b"_hex;
            m = "1d15d87fe7045f2a6650659acf23faeedc28b1bbd64a54f8f3bed617e3438975a6a891f4a08f99e6ef72c52efce3e7a15018f5b3aaa6bb4f4e8dcd069f75c06cf03799bf989f86ca4471cc0992a9010edb077b234fcb083148bedfe1d871d700a4c9d728f6bb8e9d0d556475b8feb0fc23fe2b56f041a5668957f6efb5c038f9"_hex;
            s = "1f1563cbb8650b8a7ff7f71aba6c06ea20643e4620f29e8d1aeb4a1be6f665ff9779ca9303437aad3264aeb0f2b250af32054585edeb44b0a913175e6006d31b43eeb9c97bbd679e5434e8f645b6e096320a5906a64264abdb9cdeefabd5ff61ee3f851484ec6bb0c7957d6db38942be1b3412aeaa7b0700028fac765cc4f03bd7157122420f1acd4828ea01cd32e0cacc55f43fd9bf58ac71961031f72024832191598ae69dc96b458a237cae0e3a81784a98a1b012530936529efe73d073eaf974f8e1680706581e0accb3a189d80dc71b051474e50cd9d8eaaf9e7be4108be1e7d8e6a89709c50c2d85034f0e158b208a205fc4b30922d0e19ca58e15e46384ec15650ff56b6eaef908b44c4f9d71250fd050ce96acc204d68c09493596ab2bf3052792226d60b684e516e92fa0b1585dffbc309fac46457c07a901e901dd659e4fbe4ec0b327f88b8b8bc689c3f678aac3519ec1f7392936a726b7fe4be534b27bac5a35a55e18fdeb08857850940476c14fa12102014872b81bc5dcf292"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "74ef0b"_hex;
            m = "50930141564ac38dfef23056b5cfd10efcf3bb8823fa6f5254f8ff45d4b0725a86076ac0b1b8042b0248006ed53d224cb08bd78b104f1c4b69bf9c96686118387b7c0cd193cd9028297a7cc27f4ccfb4281852b5ca7e787723d689384a68ff9437db319d86f12e2d7871ec7b3b64a2ed6b83722dd8f14b7f8a260e52022bef14"_hex;
            s = "65862ec1d10c408e4278ee1421e773f49ad426e368a48136d6f77d5a6de96ef4643ef3b8f7b451f9ef9ab4d8590752dd7adf1d78ce23411f3586564b67172ef718e8824d357b37f105dd0e38c0578df14220dbd83588c56c4cc658b5d4b07337ba3e40b40aa6d877aeb3cb95256d25e55b702bdb23026bcf05387d58ce020d359348536f9f108d111bf69c3823aca8655bd73a64789d258bc90b5006ad01c0640118e17aacedbc0545c543df8e05f254fb7d8846703723fadbd4179d4a1a5a7c371e980309d33b2d79061f741aae529d4e84c686a4077d3ffc66a8b18fab2f72ed06a3372efee4507425610d317c74d5566f4829b079012e2e066bacde53e43dd702fae3861eaf2721e3fc5818de552b5a9d084b5f03a451527fce2d3a608028163befb91ccecdcaaaf5cc357bfb698f0860350136b71b4b087b50e2d97a9a6765a6077f1b26e168b5d60b7a91330c3e1769adc479ffd866351eea4cae92609c0431511b91b6683d0d8d4d2a72be8622c7dd969d5977127ca5a6c3d0ef7ff77a"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "f1d0f1"_hex;
            m = "b1fe0c7145b1e35a8062ed24ab82e862a0d695a53a1cc7430af1b9574bf2a40918229110dd8c6c750c295b9911034e79879bd631ac883abf1262c80a98de6923993a78ca63dcd434eb36340bbfecbbb73b39cddc008f2023a27d163ea1d64a269b1068a7bfea431f855121839c8559a2247821ae1e77a1f8210b4cfb4e226f9c"_hex;
            s = "43333cc1b7da9710ad7f58a595078672be48dbedafab37dda0e1328e2f2b8b91dc88d2c33e0d8e06fdfa3dbc43e24d827f3ed31a994bf662225e1f0827a205cd638c16f38d664752d73db2c84f26d12a955e237f7a4d171a14d720b43dda3fa728d69ee0ed95869fc231d8f6fffe93b1acb81692ab9ff0f926073280a3bdd4472cba3b84541f1f9cd4508bf780e96c80b4a705c9893639f127969343a1ff9aab2b98d154c7f929fc55a5fe9485d1d9ca411131e5c0ff3fbaef353d49a9f13583cf1ebeea6209c123df32abcb311edc94c04e5eb3e1389e5011499e7d0d5bf66bb69ba7a06586d414b1d7cedd0106259406235fee1cf0b2bb2ce679f247741baecccff27c6e2a3a514d7aaebed281cb6381e7fa8d8a092ef1051b5418fd9886747c9194feab56eb975fe193076b474c2056d20a818a5b4ea56648ab5e7d4ddfdca1238d95da14dbb51e0a72b6df8d4e4d708a18e1828619c999525772400a9ca91c20229b1a979d30fa7bf7e33129abcc8d91f61ff0b8f2042345c27a928b7865"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "74ef0b"_hex;
            m = "89574c2f705f32cafde26824389468218712eae98268588f02d683f17ad494df8b53457fd24651ef0561282d3e20e834960c8968f63a57342a14a6f2375bc10bef6d235fc2c4eae7d7c088985ca6bc8b1ae8c15c4ca7c5d0b1769cbae061b61fdc2e4e98e8e2e5f89c87ef2f392dcc6e3a2ff98c2bb788a9be84cd111ceb5b62"_hex;
            s = "45c1da7fa6d790ac28f54716f23b2d594a637c5f6785e37fec8350e5d5334edceb66c263197702e5e5d543a2a9a6893cec3608512503ca26831d8847c2563c326bbdf3aa5edf7a583d8252e2cf35bb16cf30a0736ccdddd41af4b54729c843b9c675ab33d3ba1e1f7f63d2aa2ec94da2a9fe4eab9036b0561d5ddeb6d3dfecd1e243381de0eed5d41b8fd6023826d3bf4ffece8570e800c1689a57c2987a0f5629dac772c5f40b475ac61524c0308dd7de872d2f2d68c6017992ee060c607826db6f263f3276f330b7d267defe6eb91f9e9ca63e552531869f0b36784813991da6aa930736858146a42eac2b17c3ed2fac55ae3e0c6370b5302e693f84615e4174576150c6454a5c5f7a4f72d03630e899363db71eeb8e4e919ab6d15e87306c626dbcc18bfe62bfb1878a5105cef0f5b4f06cc4b6d7fc12f29e687ea9d0e16b7ca009356a2cda1f7b48b22e43883582cc770803f6c75892174168ac6954c76a475f0bdda4dce703e5d7737f7019a43ac72447b524a6132dde51f925fcbb9485"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "74ef0b"_hex;
            m = "a8d283d3e616fcdabe06076c3368e022884108cf569bf363db860010955dafab0f4a0f54fc0c755982f87358d83e08a4136e15ea3d3b1015a87efc6e817e9908a86ed85bbf37912f827878bc56cb4e0f244b54af67530581848804e95b1954321b45c7305a1eb923658dfddfd497182a62dead66fc6b397018aa01c748b648f1"_hex;
            s = "5961403c27cac4677ccde42cb807477e004b7cc795f8e14049e78326769803f852175ad36d6cc08232c168a34e33eeadb7aaee642b6a75928ad303fb4140eebbfc2fdff5a990f8bea12311529cc4575594a56f6d362a6cf8623cf6580eae79525e502c7be1ae71699e2b7916cde5ab5149840ce8db96e839d0d507bcc3d6184ec68a99c30a1b562959d7873027aa491a9dee9094249e7e3e1913f263e05b6d892a8787686baa7ecb9a88e3bdb52a7e45fdf49bb73588173c722c5503bb5864917410da43ff55e85e4df1af4bdd3b913ee5ef8b9f0293ef36641a775dd4f70df95f157569899df3b7f2cf54a5e34575ff9f6ef5b93d00699586a247c2b42ddccffa5c88294b7bfb686970e0fb9a1e7a823a8b16ffa9b5e45726dd3bb015c88307062aab622fcdac7ed30b7c773793d3f7ce326d30535f4bc289918aace1feaa02c620be6cdcde24d694e7936c58c83f9e4bc3dcafbc542afa4daa7be014099173708452817dc1493d3306053e97fd1c258b062a982a5333925472eb004d82d8e4"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "74ef0b"_hex;
            m = "b2a9f33308f84f8718e860ee4e439ba1541a985f355c5dabc3a8df343660c69515ff713e5aac3ab2d10ffbf4c163d13bcecc1fed1eebd6cbbbb0f46938704be2983884c96b6063633a634d1325ee0715cb36c06f6a8f5225473bc5ad517f14a201fc34bd843d53001c8d5e34c40bc596130082ce626f582031ee58e6c7b5aa3e"_hex;
            s = "6f443dabd187abfeb167c7a76954251cb017b40dcd3c0de81909993fbdd6c99f64613e73aecc29eeb29fc9aab9ec54b55bc3539e0d34095248b5536b35f1a079a4f09ca2e83f51b07ef005a7e0a915be137e1d94ff2b26eda29a337b5b8d8652cb9f98703648a4b0d8c759ba48c1c37b2b76c3bbe116574c1f6265cc19703ce489186e3951e97e0d26230a82cd0b2a24def62b8af8e4962cf4e1a693d0d0bebd6fe45966b3a4e890e0a6f535919661beb109eb6d11e73ee2b97a3dd20074711bd4b817f442866d11c3fbf62255e05e466b36b8ffd57c6abe5592d72061d96435dedc32a822aa342b159ab21a993703b5ee7bd6d55508800b67667188810e062be554244db902947bd2ebc7f9e6c899f6ca1d3ba3a5c2edca8bafca8a5b54426b04a5a16a3c752d18647b578904f60a5dac531c95b0bfc37b7aeddd3c3564d0581f1088e85ed85ca366ef94eeb8f8d06b060f73f20778ae83bb884527fe9bc1a04d6dca59fefdfb9e14d68f97d9fb5fb1045c9a229d3015a4867efe88791554f8"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            n = "8c4b17ab9a0da366f67416075ce284ff69a2c1112a8b7d821f66e8bc5386cd1abfe499fb9a09523f1095729f61433cc17fed78789cde81145ba02d22ddb560332ec795ea6a764b9fb380f44ac63d64225772aa4503df2fdd20e7c1d17115d3c56176f49432b2930d417b84f997ed4e50cd557e2786e0275be8025f6f039a7a3b8ed421b4c224527c01c1a1bef6becda193eac7f484ab0a24da31d4bc8bb6f2d4a5f3817a246bd5a9c81dfbf55e8c5b18a8a63bebdcd245726ba5b6ed4f8981ab83933c00714064985d69a17ed017e3cfd7fd5d2c6e932a2e021d226013126e6272231ce8bf626121710cd19d0ff21227e4c4255be507809aeb0aa548f42749bae8e1a3e3b312d08f0226c5245c45b5d96eb8eaecd1b8a1dd3f9f908191325a02cb4ca57b25155447584749e2db23360233d9068195daebb7ca943311b58dedc6c809a5981ff1b66a803a4135fbddf1f4f2478559f9d2ba17d2da77b0f0b6b08662eb50495a16c301759cbf7281f4fa985800c14386e0db6df0422bbda9a26441"_hex;
            e = "e5a4b3"_hex;
            m = "897bd083c89256d56a247c12e265f3390962eace1cef2f7504e197bfdb7ea144ab3256f2798473a48247caf6c415e658c0f9ee627f6ccb68d3838d4ddf660b9cd904cad40f05210428009a98adef9a73c8e0453e4bed9cfff36de8edef6c5c839c59f6d393ffa61de5b7b2a0a5db59b0a77db7098859e863ee0970461178da20"_hex;
            s = "7a172ef111b0f2f9ec43bad8f6e8fa11e19222ed9575571716e55fe46b43aacee433447632849e0f486744054e70bdd98863f5f015b94ddd1571e64f6b9a26302e151d4865423791d596063bfad7e3b5c5494f4a3c5ed994c53b6d915824a1f1e8e3639f8873f9095a7842d88817a93bc2651e6ba94acce93830735654fcb5a4a01cccc090ede15ff5ed745a92d92d8186a746a693a94db4fae34db26c6ad0b4904c63001600947ee994e24da490a3de240e500b31b8be8b1b415599aa684c77116f12e3cb218cf388424e3276b1a3622f1c4115125f5af47d581b78b609a067ef5f33549fadbdadd098dd2c337897f113c8eca9a20f3da69aee2fe4a89bd3ff73eb4e8da271065a9013935731addb3480f52d07fb3a91261d8a030ee2cd9e0ab342b3bd62db62e359475ee9a36971ba37f5c3ae1f1939c276980140961e9542be9e0a4739fce668549fb606ae18774bbe62b20148dee0379f0f38fe982b25bae164785d3410c337b2f11ea74558d79991760847109dc0c77272a55afb0d3f58"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "e5a4b3"_hex;
            m = "77ba90225f3ba1722312f52b1a07c3f659aee2a085e939c3e5ae77a3bb0a0456d56637285f0ac93dfbdf89781479529c6e543ab1025e0daa0ab6fa4458b48b31eb29db76c4e80312f685d5e0fd5ccdbe50d544ef3ae7e7bee5db6864b853732ce28ae4d537dd37383c8b3f2b7db91ba427b96722d28baf489fa429cb83efa38f"_hex;
            s = "1f442887263f403f6ff9b20fd2780937596e99e3c9e640def7de2006f14026de1e140e0cd5d45d7fcb1f42a9127a661c87cbaa4f9b600d8ad7fde5beed5c125294ad7b211d550bc35429c71f84a837eca906a580aaf3e301b46deb59ebfa4b66323f6e136d178f7ecd8440d891eeed5c91ed785ffefcc725f2792868e296a8eb03c5683ce791b554636a787d579e3db81177b45aee1ac6bbd90d84144a706196d557b48d7fa8b551c3bf638ce93a6425eac03232256f4cca758ab2c427d996702b522eca24b0781f33aa2b61e1256fdb94b166f98cacea3d5da205f818d19b432d50309d8265eef151b0f40fceba927fd6b5ec9d1c2ba54eb9af22aa354299ffad07da5071a1fb4314c69399a5aa16c3b4ff3b61937debf6e55b5f44e91855ff0a64ab59f549c3b4dcbad5c4306b08be4b1be99d000ea52665e9bd1983fbfaecb15ba18adb3e88bb9429d6d1aa85f7f6304c253692ea0ae579123703f9d89f69669fdd4c12607d8c1b7a28f814e75a45122956c21cae47bba9e4ec1afb707e5f"_hex;
            r = true; // Result = P
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA256 signature" );

            e = "c15efd"_hex;
            m = "34a83157520e0413bc2ec4b48034fe5cc3fd2f69fb7992f95e5437ad99d555aec606e1ee98155fb1d9faf94b175ace2b9aab8c18999a41bbada96e5e851d5ef3dc17b558a8014cd9942b3cf7b1b6396768b2225eb483d50c8e894866a800d6295d24d61ce8997295d50bb73eb612e819175818c2b4fdf7f5e93aed4f69456559"_hex;
            s = "7a1699fcecfd4d337bcc6f4904d2356fff44aa24fd4a0324945d4a4dd9a9a552c59239dc9268783067477dade944adf592495a3b1e5a6eea7f58762ec4d5b0f3515f3b1eaab1273476cb0cc3080fa8c7d2f2695f4417a6dc538b8b2c58bfb248b7c41485aeb668a0a39ffa324f25074c75c0ae1c70496a4a37c9332fd73ced1d2fe561ae120c6c19d1e526c211ce8869ce236d06a9dab8f9ef453f8854cb4451033960a62fe279830667845edd5883734e730e50e7bae3bbcc619e5c4211ebf741ad2526bf0226440b7d076faa02a30f2c79132443de9fe9e6bfc12c65d1ee703ea274c06ffd5cf945413cfe13d1ec63d48ea477ba8c60a7aacc078b988cdb58691911975f26e1b33c2c0ff3e5026d9b1d7a6293eb330ad5513efd19937193b796c40114dd1ff32a2875963020f26177ca1b6a7d0c6a40a6c0be44b03555c0f4598f91600a336c73099fab278271c46d96f16d6882c00d5b3ba59f2a0bcb98f39b152c55eaee62a4eba026234f15963d7e7395de927e94893a8a175c65f0dd43"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "e5a4b3"_hex;
            m = "72e970c5fbeccfb254bb1313e33470e3074dd8d3fc60093fffc7c960b2a970c3c113a8fac64b71916a616844cd06486e29a1b1c5b2a02845c00c606a2f61b7a2069c040258959038688f62c1100ec05c64e9f2be929f49870dee6075eaa2a2d78aac0c457973348f966f8bf374f3df93014a2426650673ed2d9553e8a915384b"_hex;
            s = "6ce37157a92a7eda47c16b5b2d961c564ef7df9d5886043c07abbd1e74ec7f549c78b07e2140207e6b93e89ae69a74a5a76184e00ec03f1dd36c0699535e0bedb4f28634b194fcebe13d2c4955e01e4ef459244a7497fd647d5e6dd5f7ec156929d0e2f1e146d3397d3636726bbea13b38d7d38d4a5e4ebe68df7ff86c62c3802e18250a2cab3d200363c577895a33dc69c18d15309e7117ebf47b3b98c893785c99dd0077982ee084b4ac08913de46415e5abdbd223aca6ac5574ff4a61f5fd7631b776113f12044e5e53960a5af3867c8366e3367a20de73e6c4e0f7b9075a1a79374aee0232d06280c53bc6a148026e1686059d652d96c99ac41f909e278b3c408568adfe35cc55800caa58d03ce9f1cf533018ec4fcb5d66a50758229716c2abebe4b3e3c6ac778fc008db8985e5032d7825fa333fa4d7468504cd0785000f92833d5cdd61880bf40f803ac298343d75e18c003a8471e06449406bf1bafd988e162b0b8c62eee5795d957f1fe5d7abc6e7c8b3b43759f212d01def9151dc"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "e5a4b3"_hex;
            m = "6147121ced1b5f1d73306e4a22c31669b76c20764fa4b4467d86126a9ad283565c378ec3aad26e51aff2c4712e1e8a821559483a54a48a48efc5913752474996e6c27b56e15c44736290c6d7bd2e1d7b13a394cf277b195c6c24efa763f5a359236e419e39c2c7cbb392da4378fcb89bdbd46efc6f314bc91c2c948272e479e9"_hex;
            s = "8b5320215e2133754a182f38444a68fe9f3cfdbb7ea9d8e55d006789fb1d75c0fbe5e94201b15c97613a35c3ab54d61dcc62b978a8fab0ae3183fb7463814ec498eb0f4b0f5403044f33368afcf692b1b3ee3ef0ec1492c5c2ec370d75163b777705a0675252908bff8010e819bbde67b86b33a35e1fc43cb8da167691b6d69ecc19ae094a5461cadb0e977ea6b7ef6f3f639e4571a073d6033cf464e5eb17323447ac079e4e69caa7966d3083ecf616394fa25d2e30ef4e5b7e558c8c46802c2e35db02b7884b53b89f041037bf10ff30f291003323112dcc6b8eeebde3bf97e373305eab433061e3a634df865642743908ef822df62cedde8f4af403e7a924e22e667734e91a29d4b6c8f1c12da7023a1b22e6a3dd33e878efbab31220f4f2c923c88f1bb0d7b7497a9c687fbf59f9eb4625e6f92d7285bca5db93ae63213e3fe1333801fc3eca1d3a1ffa75319752a5aaac461d7a799659ad31569230266c1a62e787c25fa635b0d3aa248d047d9cee43fb12342a4c066dc971b893a7dbcf"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })

            e = "e5a4b3"_hex;
            m = "e9ba77e32581fb11b3d44a885ce8184207a00b5835016418cfe6e25921f4e30b26d1cd120691ac55dd711d11bec86a74f83af667972fdcab2e83d327d48055806d0900eb2b173c3f546a1e4f45788c76b7aaa27341c755771eb0567d314f39da46cad7159bfcf1f89f2516e7f9e0c671cc56d72539b218a726d535033e4ada40"_hex;
            s = "17c273523709d84746ae546c8f58086a5ab385aade0707b5b39adbeb507670453a56bd356a9b549fb0112eb3be73466294c0180a9061b04128a001f62025867277e28508fd1c94109061184f6acac575737ec4f93c58ee452089e6714c4dd9f23833278dc66332a914ac8e1b0ec33472061bab9c29cd8d7a0c1778c71fb973c851b6c9bbb7b7dfd24a16f146eef248d1aa81e4f62cafce2ea146314b2a8d5711de6625011ee7ffe7ac49b03a5b7e2d842e9b35969a934c75d16b6cb890f8d4ebeb6f74a08059e70e90ee39816cab34c4702ccd4e14718a8ab5c981f9c8f7cb3e91bf066ba387824c1b27e33b27a06d9eb3ff3fcace0b285f51cf83b117005bcc12da946b5a36e9308ac98e9103becc8ec5dbb048df722e5c8e6cbeaad8f2e27af33648c9ce5d7940013146f5d3cb8c30849ea75b209c36b745dc3179617933e22dc25af5169f784d6128af2c8694b5caf19fbc0585ca1780181150e8f8bbd8d12ea8b0d41f86b1b3b27771b3f36d3cf5ac6a2702b8711d52edc1cc96ce071eab"_hex;
            r = false; // Result = F
            d = eosio::sha256( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA256 signature verification failed"
                );
            })
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_2048_sha256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_2048_sha256_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "840f5dac53106dd1f9c57219224cf51289290c42f20466875ba8e830ac5690e541536fcc8ab03b731f82bf66d83f194e7e180b3963ec7a2f3f7904a7ce49aed47da4d4b79421eaf937d301b3e696169297b797c32c076a12be4de0b58e003c5123051a84a10c62f8dac2f42a8640008eb3c7cccd6760ff5b51b689763922582845f048fb8150e5a7a6ca2eccc7bdc85349ad5b26c52137a79fa3fe5c29ab5cd7615013219c1941b6708e9c3c23feff5febaf0c8ebca5750b54e3e6e99a3e876b396f27860b7f3ec4e9191703c6332d944f6f69751167680c79c4f6b57f1cc8755d24b6ec158ccdbacdb23107a33cb6b332516c13274d1f9dccc21dced869e486"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "8a1b220cb2ab415dc760eb7f5bb10335a3cca269d7dbbf7d0962ba79f9cf7b43a5fc09c99a1584f07403473d6c189a836897a5b6f8ea9fa22d601e6ba5f7411fe27c638b81b1a22363583a80fce8c7df3e40fb51bd0e60d0a6653f79f3bcb7ec3e9dc14cfb5b31ab1735bca692d50ac03f979dda92747c6430f8045efa3513ba6e0ce3e9e35570e1c30c8ebe589b44192e1344ca83dfa576fc6fdc7bf1cd7cee875b001c8c02ce8d602769e4bd9d241c4857182a0089a8b67644e73eef105c550efa47a40874289395ac0c4e02fd4ba98e130a4c2d1b95521c6af4a002ac3bdc6e52122ae4c08cc3da1c896e059acbddec574ac0432f6103dd97273d8803c102"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "264491e844c119f14e425c03282139a558dcdaeb82a4628173cd407fd319f9076eaebc0dd87a1c22e4d17839096886d58a9d5b7f7aeb63efec56c45ac7bead4203b6886e1faa90e028ec0ae094d46bf3f97efdd19045cfbc25a1abda2432639f9876405c0d68f8edbf047c12a454f7681d5d5a2b54bd3723d193dbad4338baad753264006e2d08931c4b8bb79aa1c9cad10eb6605f87c5831f6e2b08e002f9c6f21141f5841d92727dd3e1d99c36bc560da3c9067df99fcaf818941f72588be33032bad22caf6704223bb114d575b6d02d9d222b580005d930e8f40cce9f672eebb634a20177d84351627964b83f2053d736a84ab1a005f63bd5ba943de6205c"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "1758eb94588e6fc4f50c1be1afcaa41027869f304cad513b1fb12c2f446d63cdc05c4830a7e3e630da7b2da4f7867cc173bf6420f9732277282596de41ded32e21d0cc31441174da8765f57419c7764ea758f55bc17646eb100c435d1ac0eed6fc7ba6de5f832094ee2f479979765e05ac9976788db3c241a9e32a0da864f0019a87646ba623d63f4411af5dee1be9ec488c7e3e1b231479de70b9ac5f78a17b1f4120aece45f26c07e7bb345fdfeb05e14bcaacc614672a465fc523624cb19f66f9c6c3f642b832ca44cb25176d679f0e05606c3fed022cac24c2bf960a406d48818e3eb7ed53b0446032469047dfed95fc18088c92d91d93722c47f88163a8"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "513a5abde16b5e0ecb8659d3ca0845800adf75cfc4437d42fa34e7aafbbe35fc5984d3560cba938f9a622e932bb6162b7fbb6cd8c1cf8815f28c495995ac18cdbe8fabfdce29c17aa021df192ac02d080d7c5eda6bd4c99154178a9d5e1cf3ff4177106315f4e6d74c991b601069acd60b55b3bb4dbf6316c35096a487d6756181d3394944f1c742a2f4d608ce4f6abbfb72347ad7d342ae15dd6d1049fbd0ff55f4d7c43ab805f81ff1fbe9256b5c78c2de6beb787f4b6d66d290a3d4c4857368aea5f7ebaa1296020c8f9e3670441a08038bb810e853a654e44316a4e52428745123ce2714020d00e55a9eb82f7fb41c73d852a82b003670246c6ca2045fc8"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "38c042a00d6f27742a46f1f963a7b2e04f0eac637849631a491b8e4e58fc721c6ce620d5e705dc8e73409c3909c1c68b6bdb2b30f882cf2797e65030b38c4e7daf6fef9d1f115c890086cf54ca3e7c2b21dcbfd1250ed1d925810970f17dbf482d1784f296adee9ace6979075c1e12f5580cfb322e8737db9d127d38e1b99ed87ec49448a18a6fee650d3c27e4a2a86a3d6e3ce4fe64120be60872fa07a3f78a112715c167fb6c900698ba1afd824087a4cf733335c4a6d5120e3b29bc42f3b3d5db79973e4e321e0910a288d18cdba172d060283c4f4c6656e9175a18b756b7d06251e9060bbfcab04978853eec6032850a0e757bc0c61ad38aa4eb6bb6d907"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "2ae8d95b19cbd64d0e343ff413fffb85d8e6713c06ac8a1ceba7f3924fa740f8d2b3e120fd71f22711e795cd6468c5e263b1a5ba6ac6b8fa9e23d2d6e7243f510592a61d134e68b8ead00612dbf38c5b7302abc3bf33f23e6d4816a6e3ddcea6482566e84f57464f7d56de4cef0b2256ef21874dda4c131a47292ff8ef853f93804483c8e6373d39ca3a22552e75427b812b861de6a310ff4c366f6f6604116efd9770170aa423554c4ebbd2b5c0698950e66bb5b7c5c346285d9f5c35146255736b6e818e8e77983c93b21e7f60b04a7a525598e7fd8049b181000bffc7f3753a504370f6bb70617ac8e914deb05a198a5758a459c9fcd2fce1aede48e8a852"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "095dad1fd82bcd36652a381b7f4dd656bd89b40aa58b56da4f6aa8247874b935e65d2b86752d537df7103884d39dd9ad3d65f87404526b09094c5615c6249979b0dc58d2199ae8696a5b76b4bb03eaf08c2ab6aec686c6b1b289c9b44f648bd30cb1ac6a64a73d68e59cd05e7aa1b780f4bfd7b83dfe3b884ec11821a93dc5bbb47a00eea4557b6b96b5656276001f1f295ddbbbc511a99b9a665b9c2674c8af0d812286d0be3ce74817ba2cad283757de35dfb149f2835f60cb03ff155524a57f78b148feceb84cd20b0ae22e3e48f433fbd9bfd60be8afec93165ee0310be961d3695f309d031320c830aa6ba08b5a51d943797097c57630be391bd23736cc"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8a0e82d4f334aca72a718b6f8f643f69c6048d619d5eba71263a5d2d3ac7a7af133b780c7595ca2c982c006e861948f543cd0210c758691f9626842c25de2843ea314ca8eff285d47e0cffa54180af416004017034962a80a5959c3d3f1bfc154a4824462a93c014f6dfe920824f414a6e30e0e5944d480b99949ec7bf64c4a7461575933b17d7d6b0178b5192392ace3ed8469e8ac1dacae51ad5d3ad73dcb213e056d04596e64d8c0703def3110c7cecc93ba8ac8059f0f3d66b89d8712c62b41d407e4b4a104f4569558b0290c213cad6d0653898b9df8f4a453ab07d13bfb7598d505abbd0c4987e4f1ac66e1a523e113e370ab7cf990f0cc63f50f4f0a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3a380c29ce2f304f33a08aed4bd92cc6e8cf56596928fbde6b640cfdbe1dca564cb01421789c7fbb49856bbafb34da6e1c8351fb12f79a4614c33e50197939e237e0b987efdbc042bdd09073f02624c520f1e9524ec1cd10e917b9237166e3689afb710e6c4ef644e08ce866da6dc8849e0b2b4c6615b0aa803bf112e9a4883c8e60660935c43fbae9d939fdce49af603dceea05246b220a5cf99044f0c09dc98f3640eb23fa218d1421adea7898563144085f2c2d1c113e7046f80ff359b2f65742c58551ad62eb6dc6e7465553f7080fe100fcf1aad89fb079bfed32c8c4c15c84d2193de22385df91e9825717feb5209f1dbb47962df24f3b43c114417ae2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8d9c25235cdcdcc7ca2558c0be14f83afeb303f00c13106ac5affc952af527a0585cf4801104a7d019fa2e63fd0b923c061a24b8be7c3105443c8eedf4a033d3de802adfd80f872d3c505f41e3feb116f5d5f31f04df3e448bc7e7cbc2343f7dd4f4c3d2670ed3d3c66f91d626bb12a2001160a123d03b77d2a6ec53445db517147171e3ba3cd7dde902c486c74e8d8d33d4f7699791179d1df4fac78cda67da9138c18f2cc8863018e1739fb309408c62051b715096512602c5c4c7e7c394282593ec087832fd48b4f353d8046600e4152c2092632a79bf05497a13840e171047d79c23a76896235e9d5f0f56a78d3fe472fded2899e228f714690b40b66ee7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "884b4b6838fb629fe42914cf15257111b502385d71dae543d03597a46cb10a6122f6d539ab411161ee278f16cd3b5f4bb7dfea0f907256d96cbdad1f1fb40093e9f5c97880814d86091bfa080bfaa5a955af9d15e9460610d4c859332c5beafc24fc9e02848e951eee2797246bef20dfb89e8e949ed52af39663f5f088690f1a24abf8a8e221582282127344bf740308d146d6d16b127d1639071037fdcfd630342ac134ec24791cb8905b77dccf45eb3ed7e9b2e72e60b5e19367fbb5d1c41853d79965530b3181e4cc7c24b198a61bcc2e63806cb6b3c76757737e35066b7f1bf0dd709216fcdab4f35d550b31ccfbda9eb8165aa78ba4b4e66e316ee07282"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9947c137ebf7013ea9e41f1ce93fd29022e340e6ade56c1119cd826430acf9833bbc1ed05c1899757a79d3104c9b4133ff0aef7e1cbeaafc2ada2422bdf9e29926626527f947124d5549d9f4fddb809f84923aa335d331c392a5ae5e29cb0f503e230ce7bff114206d5dfd51b812f9ed5448d9100125a8cc2324e560c69f4a492988045c97ab90a2806df900c3b95ab95bd634dd0a50edc5312eeef6463bc4b62e54261cc67e9cb9caa9a0a7550183c9e03f26bd5c8718dd77f54290b3a27a054d7d3e39e8cb45529d585ac0e507b8688219d2b8032268020b68d2284f9f743debab5cd47fb3fbd77fdfe3a9d7984b11a37cce190ac89a472578a3332b150f5d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "259cc7e43882850415f4d7f2321fde08212490f6e9929c37c6a60cf686eec1dee385fc513f5e4105f19f2d63565b2d3762080634306b4ca87f857912bc062f31de6cccae9b48213c1b661ec9874d426d74e4c23c0ca53abc8f7bfdfb9d32dc6b5559f6aec33a5b9445ec4490302af6893890f57969de00287203d8df9a511b678caee2a7d666d9fca912826216ae3c62a37f12dac1412100c966ec7c8ff347eb79566784ef86943e999d0d1aa46fc9e5b90e9b91f4d16bfc2d5b9ffd4515f1d23cd0ce9612d19c28079702e1bc96b98cd86a5708b9000a5d61777a92d7d033557492f9ab1a4aee6719dbb14e6c3b4998480a8d49013898a5418bc8c63c41c5f1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8965489287b5c6732e9269f3ea349830169f9ab644076423519bd18d744e9547dfa82d9bba9a8cf4e1ff5bcd79ce2c4168a8b6b1c7931bf4eff64dd18a1728715274a735b9f529a2fe7b02cdc2a8740c2f16bed7e0ef2ef003089a30937f04c2d0617f70db8d67ae9f6200b8279200a21a7862b7cdb406d4855d8fc950a10d5430424e4872714cbe07ea03f36689f756ae0bc09b08cf1f3343cac1e1ae6f943b5d0b2a3df116b0bbf2d433a8c03fe27c6cf2de2c0603b2fbe174a6a4d0009248c0a04ee4b6f393195955ba0818d5e3abea276d9eac469b5eccf6b37d42e38d840513d7130009bb93fc3d208b89429d053ec1fb5b635e6240b3f0021c7a243640"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2503d3586cf23777bcf02ac28f32daa1664ffd2e2bc3c34377d80718cd02195de3de6d10cbb057db69ca2bac07881497189bcd66b181972aa8def94a879dfcc1175aca14781a2abb39cd71569b721e69e9d9504b4ed54a58a4d8baa5f17bcaa8ca9524ed86cde37a86139bd62502afa770f4eef4293a0ba157968e42e77dd690a3920311d24013522295cb726e006a2e7f26dc287fd2754087f784151ac30188937c99cb20ae8d26db527d5dd3020742e8964f518bf13bf2cd36d99eacb1c81a6a9a46155894153d3c1a98e7671233febbf4f30bfad312e0dc4a9520a97098c634966c204aeffe7e55543a436ed003ce0772d9f57c8b0d3164ddb785639314a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "129990973396b70468d380897ccbe6930a485460bfc199c7c8efeedf81c7fc6a98f47c0afc29546c92d3ac2d93d8b1c6909642757fa52de1375867a197dac0ee58c5b62f12182a5b4e703ca981ad344411e2dc3aa6c456dc69651cde35bfe136ca323753137b4a28571eccf8d1f0cc4cb4977238dc33827f1bf670d938f5b902e6389c10b564608b396feb0cdca57f5bc3ad6bbb2cd324d531b0c5538de37482a09ce103ef6399cdfb404021c836151c81adf6f852f9a96919e4e78ce76aec77a48bc5eb224a3fc404373e28f07a1488ce2fb3181075b852a87941bd11735b3cd6f5bc0b660031fbf7671d3bb4f8c9f653b8c36e89320f7532ac0fab23dfadb0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2a004204ec4ec1515b855f1dd802299780835fbf7430f8f5861a4c6d86adaf38159858810d8645a3076fad16d6daac69b942890d6cadfbd12affcc3d3fad8f07e90c2b1e5aecfd9716ac9a12349e4a4b29eedd9bf59d875cbf028bc9a1a0cb4f5ea77b7ad026f09a208d3d39477a1ab59329cb64e9edb6e7e552b8875a73490551df742ab300f254b7805b4a9ad72b650ca944289a9c7c5223d760baad3dea1fc36d2b5961684840939fab0ffaf7fbb7e181ce3b92d9f7eb833235d97431b76891ef910827d110ca9fc88f7e4f98e84d00a98a1b5c6c70d86d89f56bb4f33cc88936db2b7f8127d11cf94d91f56a07aa7880f6a7c3c25b0df691d8657c330a5e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2faa1b204fd30ee0d3d6d79274f3b498f736bf6e6b34c0ec6eb418b7a4c105c1a75669c092f52fb1d39b2247a8d5692aaa44d4a4d70b8f9e636dfef370db9315fc1b35434af3ca21afd366c3295424bc1230a898186105a07788b92bd42c56d5b66a336fca64fbe58a843f391fcb58588466e0ba484502aa26c50ae35585eb95fe0ebf248b7a57782373cbac21a00928a091455347127910eb0b9ac35c1bac4a99eee0b718550ad282b4210eabe0602823209902b2bfac9283baac38940800515877366117a2d383e8f0cd09de7c946cff1eada4f1f97c44cbb3bf3562ce21af7f499af8ff40e13b907e5f4d1696dd52e3726570228095b89d4ed958e618a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6d8de4a2cc01e33812da2d364cf3cb4fea7c6f37b4314c123eccbb2e4e9ec5d593934c60dadd5fef2a273d01447519573f701d398cfbb72b0c19937e9f7805fc4d354e292c5d0fc18bb872f6843a9211802f5980538ec6b100e3b2b744693a9b8d07654d2655414550a1645f047c865291ea8043137758a13dfb1652ef7dd42182603ba597eace857f39a0b7ea0c9a987326f55358910cb51e4141653e9f3c3d73f09686463433520ef0786163efc39bba3c62cd5c3599678a28b90470bb6f19fa1a56cf60e8c3465f8d7082728c20730227a2a3d2a6a4cc50fe0217f35a45459809de1f921ac5b6aa833a85bda15e288abe640829bc4a0af1aa9b3692a414a0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c698321f4342f64a87fe6b199d5800af12d39725e449c79706e9af98b51a2d0d724663ab87618b06c49d3c1b98d97db35fbd8746c1d9a61f31ead8893ecc072057ad4004a53009703f66bc2b4fa7fa6826f54e8b873c79bc19ef71fe61a182a8be6cdb6dd35d87d1f46746022f98360f3870f49aceac4bb1a839977af2096539a2d182dfc4bd97af34ea075ba96c39c4a85b3ca83002f97e992c110d40cb6c668eb9fd022a4ef89988095e8c513153f99e37d9cce75a7ffa0a55af6b7d8314de4690934d55895b99cb0882adb346feb8af0480a4fc46251649d6cb2e4358dbadecf27ac713dfda9b8f40cfecb642b39bc1cca681d5628f4fd30e8788635e937"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43fe92f5ab6b2583fbba40b493ce45f9eb5f9e0254c6e2547ed4b9543a2c3a927d5b9c1c12525f4f94fcddcc4c586f4e16626ef48fb0688e07eccf77dc65a26c28f374aa4bcca05c72555e7f54d896065f3d44a728bd2ef9c8adfa698b963c16b13c1d5346457beb6a66c964330e0945dafc5bf75f4ff26e84c0a8bbc854c6c877ffad409b11627ba951181939ba9a2e28764de34704a5575f43f70c3f4bc5d74f4d651e25f32fe238f193d4ca55c04463dafcc2bfe50e017fe9d3bd319311bd2d972f5e04d8324a4b26842fd66115ebd139440fe89bdd55d10e14aea5d9e3f6a5c5fac4acada9d9e2006e6a0c36f4b94956493c9a582eab35c69c9add972d40"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64401a452e3b56bebb1d5f3cdcac3dbb0a6f6e81bf2fe938143b9df7e8f6380687249a0c30a2bc5ba0fdb1e4d0fdecfdfc74064d365fb8dbca0cefeec0ba6fb4f775b4650839f03dc681c1f78d298f6c789ef4734d0a3ceed09ba8850671911e5e68af41ba2f37f3e56f7864fe4775ccc6af928876290ffcd20b988540c0146db97e333da0eadd4772cf15cb494e366f1f3bae740dbc69cd339a5d1f8a5e608cd61eafed4e85886796520ec5ad7240d11f1ce25463b57d0723509fc368f8f81a6c63ed2c61a216629dcdb9fd226215f8b248e2dbab5cd4f62600fbf921f4fb666384333d92251578dbdc5dcecfacc2c4435a211cc984346bf254b7cd52aa2bf5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8998ed832b496be462a431b1b32c3696374d816bbdd2e348d98795a5ad27b02766aca9b161d8e8c94370fa38c56ab0ea9aeaa0bb37fee33a7bc27024024d321b25504874343cbd50dc31ef1429b16e2ecf53deeef15b4a8e5a447cc3f1b212179ccc5ae4a62e5af2127c02e53e8a23cec5f1863ed53e62f472ea65d599272a5e4c0a0802553f31dd22103b7fb7155fc8ef4a3a7061f78f6e72c265e561436159722da4b8850204a7d85f7d45c18f5ed4e452cb146c47963e38cd29f2dd3652720fd4206bf96ba2c7601895c8771d1b73f03fa88ecf81b8a8f2f290094d85521048ae0c097460cf8340ab32262115b5332abd75950d46ae77ff03cb618dd69e52"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "09634aaa108980fb190dbaa425d9908a4237a2531c6471ad47dced90ff65e217baa0d9a8b5167d1c07fb414c88214e6caeeb6a1809cbf28f9c6083bd54cb2fea79296ad2dc1e27de2e96c056842ad7694391b40c6b6a6693c64fc1e3dab13185f8c1406ad4d2c39a04c3f6437519489b3d6185d9415d97e9cc405dcafcd488cc4b93a9df5100c1fa8dd31c60575dc64067f2fcd26d1f5c44919a4e28ae00688487c279130d087161137d6fd480111d45b03057bfb7f79ae75362439775f28e84839156b9f1fd1aac698f1b1874ca19964d30a725e92d4ab784b8da18258291f86e0116c9d3d4be6931568c109068ec52af3a26aed5ec136abadab1688f06488a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e63d527dd005236fbe35e838f51ffb09afd2669b684d9bf7488ba49730154be9147a63dd33473ebf547272cb6105b114f72f544e4568d45dc814a3c5250acbcbcab008dcaed3458e02159bf5be9e4b20420f9e4c075d27bb980748528327a1bbbc93f63db57ab03e7fd86c61db3ff8c39bf7d818a26d573fe57f5010718021e45299624e25a2f5acabcb3a1ca608fbde28d13cf74a3f58d283fa5a41e875854cc480c5948d2c0d57f2b857988a28e34a7dc5159c86ae1f970f3e318e9dc9d29641a521eabc66353ff0dbea4f237bce4ae546b8d05f6ad19a4ad8d4cd086b22458b311eb970ca33c484f0b9dc544ed4ddd88e7f70edc32702d66ba570b749428"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "467e9fdad9a1f83ffaf7622a156384920eae46b89f63c3fa61c5066786c34108ff73213ffc7ee9102f367726854aebdd9eaed49b32c88517e136778dcdd7e231716bd618261615d029241a77f148c1e5e39777a9f85fc3d4e9320f2455cdfd3280184ae17e35bd9be0a0a0d1c2a2d321a3bc86588fce12d929de1a2f473026e0920b1cb8b6dbadbe3810af22a3e95dabc9553733afa026e0c7847493182aa1f3057a3b227775a3d7ba139c1724b3196f6300ca4ef457c2bb3f09bb2be6fb4e7caee6d4502c962291da0e499213209a28cbf2c4adf5d559e44075631c3035990aceca49bf6161203390509a80bcec1d274f1e9a1bf26c9f59244a695adb2c5fb0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "063b7dddb7483a77af978f1f09180b98557643574b40522da25e8636d5e5a71888c79ebc5de9ba6ac0e4c30c8dbcc4399661b117e4252d980822cee7cbd4d2aed3a10f91011d11ff92228d02393cadac68030123f52529d76ca2d41546cbfbfd28a43c5d52026ff582a6bcdd10a3dd944fd7232bb950ed162f8827a5625ff322bf98e079dedc770e4d586a7f28b4e19452a353eef2defdf56e0d07dc2fe5625d91651629c5b7bf6e180dd27a1cb51787ff264f0138b46bbbd32c5e1ea63722b4baa8e235f27e283ba6c46f1af28bd744e2db92e326ee7139b9e5370fa5b5e2c2bb79b60c9f9e305a8acaf29340edabf7531d17fffca6f43ff07ef5cccb50eb32"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5afcf0d327a427f6d51b87aec24789fd7ebaca9c4eebcc307664aa6e92b6acc22b112faa3918ea3ef24552665965842639a532a09b914bcb3b953a0726d5f88eeac1bf65bbdec56d55bbdac534da0f83e182dc8cfd6e9a59095bc82b5f0f5f56a1163f716ce722d80394a712bf0d5d24cc13961079082e4598c8df5510e20febb3d1a778fc5876c65a3e1d3700ea537c8d67f7534780fa8d1cb0ef9c39e439dcb8a4c8b76a723ff8309e3f3cf39e6cdd6e52edca5308aa6be2628608d5206e82251f9f7cd711183f3604d83e1c23ba71041b92d33a695225b1a3f61fc742f969726d79504b224be259e9115f1988bca3c1e2b61541527227c3d629b22a95791a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "543ffa8db719767c9eaeacdee487311bd4c1d3b6bca2a07c6a3989eaad5f39042dae40b45a9b5aff326a2994f36f0a2a59ff3d46a3d4abc705d26afa3cd35a35bb662292c6ae3a47cea9b32de37cdadf797cf72c7c62f7c9b61024ad8c7c82f5efa27c8dfac28840677116183f1f0721fa36ccfc13ee5863589b0433b20b6e1c954cca97b3796232a3b0b2b6205382de80db8487bd00b620a4b423acfcaad649a683b915de7caa65a4efa6b0a1249a6d90348171b816deb0cf8c99013ffd84b8ebdc660866b56545de6dc4aa23156cd86c5bf3d5765ab48d8d601f43dc898ea6e05fc0460a28bfa2a776e8917c59f02f1c8e1cc454558658768acfd717718c6b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5f912ddc495c20f1975219b0b5cdf0629585a98d5565e8ef2c98fd945cd851d703be32da38e6a376c1269734de5e72734cc685cded8a31d430f526dc3788dc2b54de838ce6514ef970afecb8bcc0b2cfe0c5e8de29d2a6c009813050114374e1db8d7f4cb714ab291a6095b7e2713a28b5dffdbe3ef127307e10155e0386e3af886cbc8e1b9b66086dc9c48d07e460fa4cf66197414a4e1a72f6bf09ca94964d668666ec1daeffc52a3384cb61abe1a4ee0c26674df776c7769fd0c89667a421855de0b060b169eeab02ce0005a1e7d7a126c8583da8a4900f14fbce7ec1b4120994ebebd3e97e0d9465bfb53f2ebef725a10fccd0359a2724a9ca18b2b7f715"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5dec8ec2a5ccc79cec9d4455a2479f562c049430d572b98e5bd44b83ccf6a08d94cffe4699dd29568dbecddbd28c92c771e37e2ce716ab7455e4a92ad87f9e5b76aa1ef1a08e3a77633bc71b3756e3ac956eb8d5974cb50b88a6f49f36d5d0e84bfc4d379621fde3bdfebfd9cd916e1294c854330218d50aef788aaff97e68f7cdb2e7a12e8350dedad00a0ede2d72fe294effd152ec33f95d66fdc648904c657eaf6fb0c322f5881bdc1f16305c3ef90c3df597a0e75222b82d79f5d6dfd913b2f9620092f418a3e67c48823b85e96b1fe85d306f3653a799811a1ed3dc612461383a6c1eeac737dbd2c6c20fbb56567bf544d199a474bdc38621c8b9bc7920"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2ada8ff1c1821fadf49dfc156293dd59ac8f51367633f73d2200bbb65bd960f7b888d1a843920044ce98528773f3d3df57de92f129c03e1f6d425d39ac83978c7c8ed7cdcc8d47a778350f99f8fde4f6028d5ea77d46091f98f72279c59fb39ff8f73b35ab1c6748970d325c65ff49fdf833e8c2f40621bb770f2dcbdfc34fb22422f0105f5f582c90be73e664c215cc6d89419a8909f0d13f6535182aa567d4e16a2f7ce1e562a6cda4582304a5cef821c538de46c68509f3936166c109da8ef13f2000117644024ee1ec10e8ee4056879c07a6604956e1d03828dae5ae0eb60c322dbc6ff183a57b258c06a2b837021d4df94baab66be636b505a5a5b2697"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "743209d44a3c907ca08c0b236b9cbabcaf210bf522de862005c977bf7099cb7a38eb9fb15b765a044703c9410082b6a35a7866821f33bc2e2a58ca8bde08b78ff6b3c53e771f8d7fb43503d8060a884ff6012101278564edd6d64fabb6add5f4d4c62707c2ffc45f904acb43ca2ab5609a23daf9cdc58aaaa638f6325a54a5e272b253bd57246d0935bcd19c7aa31f878c474c8298ec567b6a7e165c2e7eedcc80748953c90d20699ab8303062580d4693c058ac761678df6c875bd91d465430afc93cf0bce027ed00a35842ad560d79bb640cf3ea55d8ade362c258fa707397663fec6787d44ec075d857a6fc55c50f8df898da77252d8903220641005177e5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "098464aad869fbb37c36f56d750ba97ba6bbcf96c9e25d92fbd5778fcf214f6a24d1fa276a14b5945320eeb37dc9ce4cfdae21ba57185246052ae26718b549a59a81cf26387356b3d3fe39a45cf303741587e664244233fa2263cfc6f209f796112d61ca5e9f16e362765b0651e8e197920137a3842483772428b1088e7c1a7aec2152b62688c5655410ebc4907680753079706931359e893ac76ebce92a3572c7eb32c58b386d7ab0f3af24acc5047258b5b7c0db4c1ea4a4b64203d65aaf6c879ed89bf046ce5ffb1c647e95630ca485acc9fcd6beb6a5d17bd54fb518cbfa226d9738beb55325f1883ceebed860d54f5db3f1670ca910762d877f78af80d7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "498209f59a0679a1f926eccf3056da2cba553d7ab3064e7c41ad1d739f038249f02f5ad12ee246073d101bc3cdb563e8b6be61562056422b7e6c16ad53deb12af5de744197753a35859833f41bb59c6597f3980132b7478fd0b95fd27dfad64a20fd5c25312bbd41a85286cd2a83c8df5efa0779158d01b0747ff165b055eb2880ea27095700a295593196d8c5922cf6aa9d7e29b5056db5ded5eb20aeb31b8942e26b15a5188a4934cd7e39cfe379a197f49a204343a493452deebca436ee614f4daf989e355544489f7e69ffa8ccc6a1e81cf0ab33c3e6d7591091485a6a31bda3b33946490057b9a3003d3fd9daf7c4778b43fd46144d945d815f12628ff4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4da37914ee4ecf0c0973cc89f9476e2d872eeb2fdb3eddf6fcbcad9b21b8eeff2dde26be6a26d5d5aae6300b4caf4f77f2ab7907af2434026c3369d76268c88b1a4c555c9d54723b17ac48ca1118d94e147a4c63c2c4baefd244235cde4f9c254bce8c8c21b45b7a2fd9d5971b21abad1bef74b9d5583d352ef67483ee611ff3f97198c023cfc56c667c81ef03bda4729b2eff85c24e75aafdaaa4c0f47419d8a63fb2ff72c074ffe985ec7f88bb0e93cfd375c656137722fc6aa45069771c6c66d4b109a5dfd8500331d8d840edf9a5c8024b2520daa56641ead240033b0aa300ff3f951009ac46a97ab9311f8af9467b8ecbde36c9744e44168314f092529d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1aff9b9ad34e142421069661c71e35b98108a8f976191b45a97cf12e8ae8ebccd64c0fc6a795f4ed798fa4a2f79746c57a86f894110c1a5402dd72577c2bd9817a9e7a1b0b7e389527428140d53f4918b305e154f7c143011dc27ddb874c52b57758a3f4ee4395108897f0cf7b4fd7136ebf991dd9758bd2cb85cdc6f9d96a40f8e6a0c12970c18325d5742b80ae499da45655f972f33a80373a93572fe302dca03cf7e004690618c5b725e3b9be6e05dfd0ab8f28b8b994ea202875268837d3876681a63e88a410a0bf4a4c41f7336be2799c6e62514a5ee0422cb6d5c57c2e45e9f96d667f8629e0987421f01a9391a3334dc1e8a35425501bef6641f9e6de"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7a1eca54a78ee1e92b8c29d667bc89e9ffbb404c5bf13a87a864e99c7d3089c458865a8e3ab714fd76ea4f01edf15e1f80fc9109cdc53184de1443efa533939f498bac27b0f127beb07e4f788ac5d9390da29dc156aa156d342158df68b825732a8d8e852644afd1bf230bf01c15ebced9f710f062b5aba0ba0edb2c1bf9f4fb453d6ba7cc9808d763930b6d8dabe8224db6004aab4a9ed4495fba8ddf371592b05bc057aadeeb3d4b800dc849eefca86f7414b2ca3af53e04b524ec566f646974c17acc6c76e66f7689b9824cf4f98f75de9b3997233cdadc1a79679c47dafcfcc107351f7e64084d67bb986dc2cf693f9e9af2d46c5f8a560b1c7ba2d3a202"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e6eb88e130cf0d79056bdcb87f016f99edd9f35519c44bb509a38cd346d996e3d9b7b21a40fc976a935f2904a6423dc0f251d8a89c4e1424d3312b1e7e0c14f057fa3a45841dcda2bfcf107c2103c0475cbb34d4c769e98b08cbd35964aefc3a8dc4178725c16ed7da6b438107da2488af8fd5cb2c15a8849a531e1a955c40cd6c147956fc3e8a15a1082e9e9a7878efab929c50d52fd6c14cad0987f667221a0c8ab29a682de04e437b20c82e9a759291dabd22fb38e86121b71b3ab473ea0977441db6b137d01b63e328412996ccb8dc27e57c8cd6cbeb31e321160df29ea3151f34ba36846495b6e4bb766f0bcdba00062265ad7d01847e22c06a463dfeb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "755f090081189878ea1ad03070944d3466c773ffb2632b045ea28655c8527488aca42357718436f6c9222a16ac61ae8d752ea18dcd9f0c5370e76730c31eeb772755e3a763509a9126b64007341c5fa48bf95bbf3e3a9ddc36096625b0f6bb27108dc1c4bfa191d66a403e11df2838fd401215cd2dcfb5806ad0955edc2feda4a19e0d84968a6e1756036bf0aac8990d7b8bdbe45a6c0edd8f55720f105d70be7e42aac114a528f1b3beb81ae796d455beb05b4936ea3b0893e8c2fceb8a6b8e1bb6de37c40e4b3da2a1ebe9a52244a5f4bbd1ee201d218d3a120d6add7171ab56da3062de4952495b602dcfb4404d0c900144bef9d46cbce6d7ef936160342c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8083dde7cef1b018fab0e9aa58744a665c24dad0791dfa6e8fe3e95b320a94038926f6cbaaf19562fc53f3a69e0aca0d9780af9eb9267f19a081343294356fba81518fdb961574a7ef38625c201036ae954238b889c8eeb3677f7f9df07badd5f27ceb0ccbeaebedc41b977609f8b964f028454b4406e22e0034c3655ab499d01d1b6be0c19bfc9e4ee2e209dc033ba1a66b50ffececa532c2c806cd2ed2586325d5bbc57f42840d8df88636b488ea363bb7f3ec35d65a635befe9d96ce2cb8c4b7b0f90ae3eea677debde8c6b2f63a0bd6b694922ffcdbf8e54864f4a90202eff266678490e53923dc48d70e9fbb756536fe6196553c8492fb5ecbd0a5e66d1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "85a965f4cfddb17eb81195bdcb081d307fd7f218de37c6daf043d1be8c9bdfa85b3a7a0951569e670cfcc695365dc45e3b9e44a7d79fdc3b8ba92912a642ecbcea85d56654161b777b280b46be78abf7f0ee220dda1ae3eb4e39fa7ae4d2511d4111b31fe17dfeb897bad9ffb1fb367076ab336b1f48530f7d39f106cba2fb8961e59ed3b060c64f5b2873ee51ae59526e782afd794905923c8753be18ec9cd3791e96eb00433548f2f2da478053c7bc222281e7342a0510224c9f9e53c082a11331f0923c44da8533b56563adb781c76f4bc303ac5754bd6d7448df0e23e41063992ce6abb3d31378be040aa815fcbfb333559fb402124c53f1a5b4e6fab559"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "51e52edd65ff6f2fb812d2fd4f3f9852eedd745630c9bf12e6f63347c2c80402ab0da654155046e4831ea02fec6dafffe94e6c450a96cf56831a0bf8e48b99456da7e17b9f642e9d6e033153f740095a67c86f5fa4fb37eec9cffacd7dbc368bf07ee00050606748dc887fe0778871ff64953c249244e78ceb4b62efffd2e9cae6803c25504a67fd94941eff1a320b1e0618eb9cc350d8241892adfc42790f24745be12ecdc63f891bb6c0066ee28895c78a9f1773ca527e976eb29abf4f649f83f0fdd7a7f72b7dd3343149b4c1b699588948e5508a58bbc481fbda5115cb5822cb10834cc01989264c79794ba032967271a7d2af9c12a493d1bf3c070b7207"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84a55f8bd78994a9e204bf57292e1c29d663a8963c01225686cd646ff8b23f7ce6be18817bfd284d2649b075fbfe233a2f8cd59ae465af14602108da6bdad31fc97500f791ae1bf4459a4b3be350362b46f84697742c6fb6671533cbe73dd15304e7c569c673c799227a6523a54eaa4e4abba2e451c3f75cff2ffa6cbd9b04cf4a73a35e6bbccb4445a99a1380fbfc2cdd5fda03bde573b4bb88a205fbb38344648ab03829f4e3687117ef7c12522ade2ef736b24633ddefd0ce6da208e860ca6f3a79492bf4db6b466500371e40de78d5d2708c2a97999239e38852de7a02981203c8402274cb1aa24fdb3e2cd27a4305b15797a498145848e74d5dedab41f8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "19ba81c3e688c41625d6714da91efb9bfc95a634409325f1cfab3dba44b807fe063740fae7604a839efce051d254af50efe044bec96280a831ae8e4e93a0d0611e0a43de6aeafeb3eebbe0d6ec74e84fdfbae3ac8cadf657fa342921274be801d05e553f589e8f48d2af38b79404d965e0a4def7c0975d6d9b5351ea82451b6bc26db3fc64729325b059f45089c90f5c8792933487d4c5317b62a02b9367a99e8d5c4148faa1781ae21200f1c39be49353d0976502ff19e08f374ee685d58f14dacf613fbb3a56ae3f1bff1afc060ba36aac11e2d038272c01c430bd463fcf55b311024cd7ce10bf59c32ba3d9943f75f8f76870bf0a8dc3e786e0718df3c01b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f84141b773914947f72db6981d6d0815aa77fa8ffb0444c13b7612d6d89038b02eb60a7641dec20079d6d87961502330f228b936aba65ff8c59a651656bc3ad7a3131e55312d334da0f600f3538f3b65ed61a5d298e32f74453385d09ae45eb93a4d35ed2dd7a7497085d5d3a36e65f1a0bd8683480397dad3b304e49cee02201a9a1ca5b778e91e68ea35ff72827f968426465845698ac0999f7311e5c532438e8fb494d8d92efb520293c503cedac0036fb42907e78377f897bd7b94328f6a1a594ea2ce3770a49bff8702e534798e1eff6324310c6ecc71e5363a0b23f5604a2aa245808b72c9f6eee364bcbb22e8f144460c5300d3f89f3b8b6fd26c15f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e97f3122d202fc0c7688f28a0eba5f5ae8795438b09f6532a2bc3e75a164075146f72e0b3397bf086ec8e7299b67f5c54e4263aa0111f4ff3c16de9aa06682d63be4d8e82b5e2b3c15d913093e29ad844c70f9ff9b3a084d41648e322a2212463ec758823591117e03d90997d6264e5bfcc15b834ce7ae785bf22399a85fc454f6fe9cacae568e0d9bfead7ba998cfa1f25a1b7392edda3115801eb31c9bd0eaf6b5c070224fed09fdb071f87266a6247cc4e3c72c591c5a88a6b41241c491215512a810efa993b0c77e9d3ea4fd78fe9ed4baae8cd8d41196efa3d5f2fa2b4fa6c027f4c385f98c88a296cbc5c6459f91dee01bbdfa059c50b42639641b29f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8f32f73f3387f371465e3a75a0d1c7df7c52c11abecdb69ba83602c9f8980177e7df76438f2e95ccbb031e0ab972c30279dd2641e5cb43a24ece04d7477879bf989e504887513eaa197c0b5e6365ba62134eb51fcd3a713c69acce9332ca50ec1796d88ac9921631a1fa182e6fddbeecaeb9ec468773cada71f908915259967fd7932f41a3734f09d230b1dd487f3ba1df1ad1be8306096f3dcca684548bd458b0211738c79a8104a17689bef8bb9050cf59df1b0efd3aa3f203b10cfdbd3deafa36d79802126de196c9bffa362b797ccf253af546c4751b68f7a0b819a5b634a9baa6b981b1bc325ecf2b0c48c0463f85b02031589dd793eb682023cfdc7058"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f02de916b44a1aa31811b48ae20efdc26319f2569fffe23d0734dc4f4085352945135b209d4609bace95f8b850146b35f703854d4435536d00c3fbd9e9fd93812b4741f64c33271c01ded56a6c103121dba041b6fa1ca7f9f8e26fb98c6741ffb9e2c7abb10d3581e8f0a8ebcefd386957daf36d0aed4861a2b480467eef8fe5109012b765c6219dfb260a2aa016432dfe74ff2e71c2a748d9c99e1a6a9a98659ad6b5934d7e538c7aceca9534e6a48d27469a6ad582ddd838f135a5fef309e0efdf815485756e7d8046e0db84cf136a725f5defdd78935047dbba4dcca1ba153c68cca59844e1691dcfce73a4fb11cc915a4ee9549c26d08a86ec51a69e104"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c6cc57e11fa138c36bdb069b0787fb67a46c70f39124ab2aa2326386e0b055b8195897e024a7e43b7840df0c0d94459830cac7e33ec3f127cb1e9563167b61b3767964122a243e95b15ba9c8e1a992e20d4e70ce14134f932cb5453e795d84fe5856dc5ce39da38af6ea4b6029fafa7f804977ed075c30412ffefeef27277e541e3877f439e49154bf25383c9517162b1d6e469f5e861c385f2e8c45fecbd26504747ce9378f3f25a77ada8ba8343f50cb040f2f8c224d16834c6a4d97b4b8af5d1a08598e9b7c0fb1026ee19feb2a7063f73d78bb9cec8f499c4f66c1fe55049d4fa183b1a5779240b9a7c908c84ef1405e8ed3c53cafb92956d1ba2445ac8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "077b81fdd849f2ef237cf278e10e506dde35069cc046c4d491cf74ce419f11e4cadd66ab1acb99a33f23654a65c860c9901ca1f8ebca29f0cd78e8eda1f69eca20eb12a6c1448eb679fe5255fdf634f3fe2e716c590b5345515c02636a4f2ba30a2b62efcf5cdc13a6c09757b2d1ebe5943a7804249f5ce9901d95b3030eaa0a2065d9fb5eac8006a176bce1f4ac537941c6d74c9dc73e85264ab058cf5043633535b09abafff891ca6a83c45a7e998de6c8b9b275ae9fd0e7e0ada7ce1434146ab6bd86a6eb790d724b8d3ff921231f92d5fd86f0634ec45b911b07cdd6f0fe275f22ae2219f9497db982e55033dd9867357e6a09a9f4dc281c6aa36d8d984f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "048d13daae417db317d655fd73b112cfeb8cb8be13cb34bf3235cea1e81c4248a7657a005ce89d81fe85f4706a478dd9739fe438373edf453db22fc3480edcaad7acfbee27424173ab89dc37aa50c722a9404bf697f333c5cce65c0394c3a86845029bab0f3e2be57bd98b707e3caeb270d5c0ca72f7fb11d8d6e4717cd0dd6dec4ec5b0829c66d44ecfbcf0b9b46aad8f192c66f1da67c2520fbbb8cf847278ffc665b7d97760ed0581cfa4ebba4333f03f3f7d30b366ee313a8dc3eaa68f1c596b87a848ecfcffeceb961f0e970da56aecad945dd78660446bcf7d5890d0f66ec012c8f2a84a38ac528050a9dc883fbe95b7bc9f289f7762292ee51133ecd2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "20c0e1476060b1ed708c5f7e15d973eb79f23c14d6746cf1f1c0fdc0fa9c3b2acf6593f6d67a541ee279751b384df714a3ae13c1919947638504f0caa2c84291ea00f5b323b38e720035e8ba409b0ad77ca1ccfe909582c4de83e32661be7da06950d959ee812471d878563c75469ed82ddf806a06a4859166d7e7a65953779f9f1a3b72a2063b5c5e6b546beb42bd7a41cca54ff06abfd093a9470202856da9b8709bf1615d7a4520f6842ed29c8911c701e312669d8f7927ea16e4519cb573ac1915061407e957d0ad1e2e732c4f7c75f4c5ee71f25d0aa6c55d2ef7af05deb50656dfce222cdb049a77e6c30d6d8cd1a88938be1cc04ddb1a542409e6a881"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "210413ed83069efa72a4215cae4e59f23edbd5d1385294cfca4a8408e69200d3bb73748ca484a5af10b5e665e23942c9e9672ace86228484a8ab0d76f8f5ba63d66c1c6b8d1c032f82c531e4a96856d19dae24b7e090955e9c5716643a81e6a4af6e67d4225f6c3ed2293b8e536c333aa82fc80386249590af1a60307d8787b50419772fa738a753a8d592cdcbd8eab403b744ab87fcf8d42b03040b74a6479acdb21b7b8262aa3d393d34a8f5a5cbc7966bfeaa771641d25611f1e9ecd8acd8532d0c79d3eb80b41c2c6ba03600dde2b555a5b2b7e5970921b6a7f2c341ed1ce44d70dbbf9f038acbed1a4d16004d48fe697ee38a6261c107a6c488f1330a57"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "19c1b847f37fe29638684cd2aaf0a8b09af6812685d503713d357d4c97cfa552703d3690f9f3c87d6c95ee417cd47f1ffcbdae96b01e31c59dd4519d5c0d8ac706b6a365394df9c7a49078b489fd612a07d147b98a4b58ce9a0f812f35dfb725e2b53ba807b891e87cb735deb40bae7bb1842c52b924a9413bc893450da1b36edf0a02f8835330a54a2b1ef7bda97f3cb9f3bf354a0c119eb54ef38aaacdcd60aa3e92272754de6d51a54994be7ab44c8dcb11dbd61a593a3ea71f4d616bf055749438f53225b1c0746c6c491c726664ef80e20391e510e6ac99ee8f7453848be2562c173b87742ba48b0596e3080a48e7091cedb9c23fb7d9208990381e815e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5f6143cc96b7343e57cc83612c6e85d46352b1eaa4b6bfdabee0af42609a9ebde9dd07db4c10d130f58318f7210cff30f122d9dbc1d0f88a3a0b7c04442c6f23794411dfea767609dc5c767ded7662e5996051052f98ce4eb0e6bcb72fb0109370b86fb0d4ea99d0f02a4e0101cc88d01ec56168510d77b0e7890015bb3b22a032957d8f1ade702aa70a360bab6bb77f08e9340c1c53b72b992187cd4f7c879ed83d462fc69062746e7f0041801709b05a58ca4b034060ad14d25257ce4aa93573db71779072c5c5b21168cda09ac775b37b2975f2d5ed8ad4bd07872e74e6fae98e6d9e8e46f7a2623b940ccb662e897ed6df058c8081ad78c9cbc5468b2afc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "324d4aa12baa7237b487b756f251b41bcc3cc8c516e582187035127e1cb3dcc789d5306370ab39f243ed45b8834e844fec49c0a190eeb5b4428a9925057a9f26ed57bf34592bd5676b7db1cbd95378c397a6818b75a65da03767038e5d111f5fee2a6d81663f1c8317ea6c4e64498253bc55f07659d14e0efb0de842af6b823884e7dc2eca3ac56c53f618c10362671c575a1cae42416b1e39962bb06fba2369afb336ce44f3fa3868c835d831746c30c3a609ae5e44d528f7f6c7d306d3839bb46b0da1edefb5eaf59b03dcf9c5116ce49b03cf03c1fed3f3ba474ee078ce37970173408660120b342c4b547e9c400c81be8a6d3852a07ab299556ecb868730"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90a3025f33b6508e08d407443f139b1c03e1fdf203334763e4f010c69d7b1728d37ed146ae7a3667a655ab8ba20c93b5dc432d9d546dcbc41f9a2c4b9411785efd530543f78f5d98e2490a9eaae9164e085a3e50a8aa56ee11f9c27c471a433c6c48da518b890630185ea711a5b3bb0a966af679506ffad0c1f1d2937a6c39ce7e908cab5597c5cd5267f5e724460b12938c70e5b8b589f16a845534702706980b3781ed12bf2a76f9d3a19ee771dc561a84a8b7f4587d4f0763357bd512a1193f07830e64813b6abacb922bf31af6a23d7e2c6d44cd8283b301060b6f6fce58bba01623306bdb761e40fb298a300bc7148c379a4f778f2af934bec60db7c586"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3c1543d5cadefa71b2b00aa9bf5ed02fcba33eaa8237adcf6eea90f100e3133c944f434961a115e8bc8c757ce82734328dc2b442887ea984ab74c5fd415941b0876e45b3a338868aa07dde0463459a358ffe8e625ee2c2f94dad9aecc0d011dca6ba841357d308e0d3d2928f85c42ebeb5613918063c4cf398f9d9c6e57337d4a3c50e900c6035ca0833d4bcb705a0ef8565cc591fb67159bfa1e58c9c9e4985c0860126bb4853d700b13cf0c34ead0f691ae046778e8cd8596fe9189136541429887ccef244b71fd494770c6819ad3ee62a89f8cfbb6a9d7d7b01af6482cedf328ba7b3d7c30c179409b6a6a659978dd26c3e3bffb93cc985a747811b45f69d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8897b2a9b6d6eb401b297f006e7b1a81b26bdcc6ec530968c4bf9558c3648beab5e706954ac50b18e20f3bb2f1061215e5013111e651c456516ae34e63f1d4e15d380abe36baddb7c3d0ad38c0f3f59621024c8cc37bf35871dadfb49c1795a87136d5b04a827a4f8fea6a7f6a2612f6866965cbd6635fdc2dee4e582d602c230ccfc29450810be09390125da052823766729a1c005506b975cf22c49c6854dedd737da6de60632e583bcfb4fed6f5a5c8593e999db7db53642f091e9792843d142411b16bc3683fe6a748de93c49a712b405227f1536ffe257c00b3eb525cbd91274ff8472f113c50621e3221173a058c923bd40e28ecf0faf42c9fb7b01f9c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6c1eced47b60318495f7cce7800139d09229c4804482063413e96868ce3074fd99f8880dd01937dc0b956470494afd577d35d5c76ace00bf484c2eb2b9ccb48bee3e85697bef79d7d2b6f541ce5a83d3a71c09d5b8d80943030e6e54c5dc29c5d6e4837078c763cc018cff3c4b214de76d0ebf5bf2d7dcda39fdcb936d1a26c25ecf79342e8a3703cd929aaba16ce0340e5b8134894e6b3b2145969826cc5f1c2f72c1c8035a920c7c00b108ca796dc077e1d19692b92f5d9f12a7cfa3506ef449e13c41530044c1195cc7658b3d0a295877bae7d2fd74044c318d34889004a4f1e14a727c66807e5be4124f5a6819064065c0b14d7545cf0395cea881734f8b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3e7d8ce9db20f4b8f3ce10a548544cadbd05f23a7d7c21233bd12641692a4cc153f17e890385b7047b0997f5368b3162078e4fb7fc12b250423ac365f0651c5ba2d0e92f74886ef2f5624e6677679a64acac595c30d8bc3b0d1e838e18705373124adb1f6f01aa816f871eaed99240d6e6d4a18088944ffb11da666b6fe5dbd1ecda75dcb8b5ccee024b0ff9a4f1788fcef403af316d5b1d1611a1ad3f36f9a7bafe1b209a7dfb091f7e63858a119dbcb793bdee7e68234acf06979c0dd5b869dc4c92921422907f01bd3dcf2517b2ead3d1ccacc68da587531d773e1934d766f9ff40566ab3757df02e20a5147e39c92d65534160cbd33d32036e4f7beab5ef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "507bc632e1a5a2f787b0befa375b322f1989d6dbf4254df8d6e37208c9bc6ce1991a8600abfbb36b9b8fb954b4e5fa134e66bb528d63cdd6c6b05be5844e80d63ebb1503580997c817eecfe7fec54392614f79e2a3c27878e7261b78b433cff39c9a4805502aba917955da4c7bb816a5e636300d75d47b93ca0676ca35ddd15e6d562f8d376f3b60ab5e88290a2a2e0d884392921416d3405e3a3ce3e7e4e6e549c1361be042d060b0a6d5b418369509cd63dfc538fa648083574937ac49ae02246c2a0aabbd6a710f7826bf06dc16e47572e0ed990f3d2392cefb5c6e7eb4b6cdcfa39b08496f172481e20b4cd0c1d529d98e411e0025fa6aa3caa9446a6c9f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84b76f221b3b7d29be54cfaefd1d16d0ebcdd06f30fc49d9c432b7112039d99bc8fd5bbd8e1e8b2ffc0d6adc9df34a7319ec33f86c39819b4ffbdb5de30e94ac6b725690a4a3fae09aa91c0001f9e526b2315ea1e766c5685754101fcc1eeba20cc078f12f166191a5bac18045894d673cc6159738c6901f5edeec291243b42f2390f13006d4f3a29e020744a7889139b7d4b1d8378a80da405e2ec7428ca751ffc17e2186daf177b8762244e059abf697563728ea8fd6a1df30b4b390fb7b0bcc1fa11503777ab66c589ac097e0be98f39a8a2e21ecdf5404ff9b17d092bee119e32001e10cdb11493498094423257291a0d835a1c1b90b87c521fb1c559e36"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "67bc94022123f356e465b4f42ea02200cc8b526ea393a0c35da34e612b8f7d85853ea31a0b869515ee783ef903f86186b97eb7269420cc1a3c55295119ecbd51ca47c7b3caf4ac6a53433d3aa23d953606ce3692a248c9e43ea5eb067533f4f03369417c8c5d469e9c56b2dd1a60b7a0c520de2ed2d16cdbc323ca43dcb0d0886be11ccf1dd4ec687e205d33eb771531a9bb46d7847aee7017690bd1748b1d39b6c669342a83eb93a070718970c161e8c4c3cfcd83e562d9e4fc87abc1882b16f1c63dfde2d34e230ebc9959e0936fb48aabe716ee751fc4abc62007e4cb875dabe9f7a5533d99514b5296d481df6481ad3bdfeea5a85fc6cfb928ffaad6584b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7ecc2550cfd058167ab406f7f4b3af4180b4b84526ce4fa1d0751a8f3947e027f4b93991409dcf5b4abcc902ad136cde8f65ec2566df0076d46ae2a34b971bf792e5032f026dd03c6f6a1e9bfc535cb15d8c52374bcf09eb2777d38a7767fd1a6baaf65335fc679b8289ee22a32745731ec7c8bd2319b1898286062cbe9302853d42ae61ff0a97cadbce838826c604c042fc6a0579078bfd9dff2bb2d9af7e29f12943fc0dbeeb81b65e3cd6dbb53724bbc3df590fdf9660b634443d485cdb05e18d57e7f9c06f4696c55930b83d70b17e15f49971783133041f6bede672c59df0486b914f61efe622dadec842e85c1da50567decc57dcc842ba946c4cc77e07"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71f92fa1a1d60a965e0fc90f260a322a561ae3d4017409566ff113b0d8f03022d96eb0129755de4d62d8b031c20c93b8c476c3dabfe00f15975029797f593a63a971d465940657a3f147a359fa8dc6f22d0e0b43cca953bed63117670e345ee6c12d2fec365a2b6b49433f1c1b2fd656c8604ce2d83112f457486b8bc5ad376568468487f3539a981ad9c8ebb196f49c797e7a4542e95d7ff77135f533be20222db369f59df8a4e9d081510698409828d0567e0d28a0c1cca2cf674027b18b51122800fc97cb45193592d264cf5e74f707287df9deb77a26f2323b3ec1c1c17be5e11cffcf4ced2508525026deed6b8cf84c5cf7a9ed19e322043a81c0f7f519"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "30e738086ddf782ba014fa326769c14b9e23818f48dedf3a3d09252dce42c160dbd7fbac9a72b8d3b6c3d6fb0e4f726c20b8c4ed31d8eb2f92a8b6d239fb78668f3687703515fbd9adcf64d272443a457735cce9eb102f881596c416739b316be58cfcf0e4d1fce32a25c2483253b3d7571a9c72479f86123d830a721ccde80e4c243e6bbcd1a895cc17dfbd0e2f8d7bbbabbced4973d578e4da5299ff15ba170d15d87ca2652e724d533288012fdba420e8427a2d1009e3ace74c03d80ac5d0b5949bd1ff42c6a728f28511264fa4152ad77e09ff60caf1cd5ee13a78d67a838294717a23f3940ed7356473dd07ff58c360fa0cffb3dcfcc2a2b673d9d574ad"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e1300bf1ac3f95d20bed0c450beada85fb878c4e280f3ceaef1ddf6c1723be2023aae1c5adc0c8565c76615e6d8dbc491506a4b086bcafcd211327a01ced188fe1e1802f7bafd3f79a434486d07b417e3fb8139de422ae29d921ec2e8e5b6843719ce8af35349e69623f2d39eef26970c80f67f23409a8b4e4c4b8ca3e5db512eaff96499302f7828a44eee7e277e58e578de56118a7d5e647f8aada1c03eed1beda3e7c57ccce9cc7585b2bf75427747b0e09310c4f9f9e0d2f48cc62e3f413e445ae2a6eb706269a0a1941021222be8663508657557c49433bdbbc7bc4727a405bc12bb0ba3ab7fd46b7458b9112ad010076bb96c596b9682de58ae074863"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "45e4acfe9e0f98d8841778018db1d3280a75a08231bc511bfb2392a6120b629df7bc59b2cb2f3f327ba07cbfb4e48b62aa7f871e44e614a824bf7b7852cc020b17147a35dc0bb8baee6479b8a1cdc032514fa412bf4bba8ab531615839f1c4e5730994131f8c01103c8ca84417a84e95d3fc35c94a2cde9437518ba74ac91e9c2e48432a16277310f867764b72ed1c656a627b2f4cd3991708536369e4dad049d45c5ced889c5dc61dfd36ed30060c7bc0bed22d06ec212b68dd7385aeaa25813424653831f7515c4de611a664e1e43205d016e622c632ab297abe51673b447d3a3e067cba4bfd21af1c25ac6cd24e26567e654f12f0cce613edea5c4f14eb56"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "79da043a98e24a49eb5c250a5cdd0ca01c744b411774e1e660e7dcb41c12fcde79c90270e750f2758ff1d6d3d73621a13e27424f93c57f777277666964304655a0bedf717daf19915acfa00313ad4f4dc33d69a048741f04c601a009bd27eb9586c41080c56bf8e0b7abaabd76a2d5e9e57a8b8b9d91f30daae3342dd292692915231354db1a665d9c231310b9805d616920a51c66bad7094d6836697161542e09041c12220ca26a3fb6d22cc62420bc3f07ae349b91d3826ace394b0210d710e240468ce7fb821b3a01b8c38287382ec64b093392a82884df2fd0bb530adbd49ae71528f268fd51fc10b43cbb8f383dfa3874b7cfb4722e047e7f0b941ada31"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "274dabbe063aba2a29f31badac85f874657725510e1f194ff51b43aa4034d86de9b6542720792d2bc07e95e8106b6072e9337ef0c721a07e3ebbb23edb76ec2b93e97a3f0b777d3e28d18cdf4167efff6fe548a1344834f7c92c6fa379070da86240096a030f6362301a601c2da026d72590f0ef30d94acf676c603809f619f432571666b57015a1e41de41a0140b6b79ac5d6613ac3f9fe1eb1345b198f495c27eb8d5ce83e1126a90559a62befa469e7e6ff41d81627b4da0b67891e09b9db22c76f653eddfe83b5b1626c6dc3c13024b27a66e04c070792a6345953a7832aa6ebb963a745914516e1e8a3887ef953934cbda4419b5e6e1080fe379b1eaca0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6970f7dfb793edd1ad41c0d6f57137a9ebff66e04efbfb82c882df25d24f0913b9c906f4214b2b776e6cd6c158f701af8e17487fa77dcc9d66732c568356104ae5450e1e2559d3475cb27858ff8bae188cfb778a587eb243ff6adec6117eae055ffa5de62cf50ee16e0924b0afeb927bad811316a1c2abf01b6a72de25ac30e466d0051d1fea51ca2cf160cddfc9a373d4c796a19885237afac7aac698cbfdc2d10de86c58de9f6597cf5a701d2281f7343176cbea53f088bd7c5c755219066f4b35ccda85c7c8e67ca08cb70a02439a49238e5309f6bd647e1076d67b0b339bf4d5323ddc1e406b13c29010bc325cc17c0c338c38102fb523bf0f4f341c22c4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "21d55371d842235e234aeaba3f33e6d7f5fea10b7940939250a07d8938e70f073d1514f54bf9e5bca902190f1149955e3e6251c98e297576f726e2c982969317ec7416c7df93b9340c879dd167431153bd64d3010456d40dee836d71d405bd3127f90a6cb61d837b4355d30ddd1ddaafa5e4204815221f562d10684a6881d7bca66b1e462b8a1b3c889e916c848c4f88b179bfb76debb18208946d40f464f9e5e385cefa1c9065118b104f216f4ac22abbf0bda8583870bfbcc339ccd6a0da7bc46338e90dbb90964100c47dc3af08ead7978e39dd7369084f5f9f941a3a2d7d1fad0dd4b60658b5931296d6357e28fca5fc8d84fee546e1f06e07efcf8f1e4e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84567b5a2cd8993fa4297e61067d1d0b34a4d7015c46438bf4e02cdc934c3c586f9f80316307928cb20fd4637852674d99a560352c931559e26e414d67eae6661a34a52809d4a8e1e9b94c72e5afdccc78bcd99f444cbf4617c18f481b36fa36d4dcef140986f2fe6fecdf8864a99d32cf2ca43e7b30d9a5faa61237177ece4fae0f03debc9dc07d1b9de0eeccb76a8b84852bd534cbad9b0845d7f9e9af5d55ff49832ef725e74fd91c45a6bf9d2a519d0c0b0c4e42b42eaaf5b1cc5aeaf18228695838cfab32a47b1b048ff6cd7833ba54d8b83afc3a45fe546b68cc26434b1021217c1a5ee8254ed50508cf79521abbccf81e9d3ade87f236b13b2aef8151"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "211b7ced5b5d0732453757fd3b828aad6d5fe12752d17e79577f7604f282037ce5df075908b53bee8eb9df54098c8c44f8da32fdf95b778a51f333ddcae7069a6e8afad390dce5640ae25597823f0bad036e50dcffc224f86c3ebf09e3ec0679019cf7637ab0b2ab77377266dc5762314bfcbd3a90cb7a3d7cdeb72585ca9a11e1965f029a29c769e003f6abe8bfc1214e4e0cd044d16d0eda0c7357f5a94a71af57d076baf455f56d0c27a437bb649aff9100d55d2988995eed9980999da0271c5c533ae9055a07302d65cf16bb26846ca04c87a72c2efb3355bf6c125524a445250535d984675ff99be9abc0c544fe3fe8d33a9442d2a57b98f159129b23e6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1271847c6516bb1deb1487be33819ea16e72cc739f4752b75c8e899fdfa28ef0b40de5112734f6b4a0e2921ea34966da45998834e8429e7a7c8dce6bd432fe90febaefc201e421a93d21aee907210c97efc2890d0c094ae82a5e734958d4e5509b85cd0c17267e1fe1cbee894cb0838508acf9a3e31402352cf4134eabf882f69afa24a7fa490f22d60c180ccdbb14b41ea53aa549044e940f5e5e519b04824f9c97099e83593fd48c36d71dd7151c1e212fd772abdb72429b3931a67cd7527fd45aca652536ef3476955747ef98759c1e561bfda80733d6dfa927e1e32ba070941bcadcfcc21c3bae98e362586b82fb4ad48d347915ed5c89c15b2a13950704"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d4c142eabfb72a880070621ef9fcd351129f31664ed11a744cfa209a4199b9293f8b603f1d0672b7a2160b4c620982ee7d2553e46f5056ee8ec2711946566f08d23adbf904ce1ab8d744e6df61c6788b22154ac9a516682e26ec31846b6a5fe8a9a519931ab61a9fd424b2babd883c3410c772b89328df17296b464c8914b31b3ad63d6984d46c772b6b9d791c21d3e3ce0984ccbf7f2902deb0961898e8ef835c658db4aa14387857b6b7ab8b38dd06a4885622abdc3669d37bd953584a3f3d19d2d77115d9bea244a65b7b26faf747aec73e8dfc0bed10a85e4ea6398dbf8d9a10154ed3f1ee51e6b3ead792ed2da838c0a25d0b2ea3190fc33bc9902e579"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8c76ad15a8de757cfe122ab8759991a1374236f7bedc12495201053b9adf0042ee64665abc4b9485a52818ebb2f5e0dba6d667cc1aae89163fbe0db066b80011f6342ebc22bb3decf96a3901e0fbc44ba79cb17adc811c15bef290026bd9e33ef69bc5717f2c774b208cbfbe88f0e2097595e6cef35745a512690593ac1f0799655a73318e8bf1e1403e42c29622b09d0000f9756ba9a0fc44692e7f86e6be28467cefb8f95aff478965226205ea082848dc503fa0f16b4cb636b916de0e9b0e91216a72950a65855692d1595b5fc9bb55a48cf584048317aa10b63acd505a45537c751c4e898aaff55f0e4e75570b36babc13ca158dc7b009fc4901ed407015"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3a8c6928a87795c3025ec336cbf4aaa80e1ca6e758c41c7df1b63e223cc140e7703815300ea7ca9c169a972a3049bcfa9452fafa34e0491c99a1867d6f0e1ff45be4feb071c9c1f2e72c12f8aaa2a9542e0a3a037305e57fdc8f2584036b619ca5a30bae66e8c212c8e2e2013209f502bd6478d112bfba869427870e84023ca06229969818ed557e5617c6ccc23f908423c87bbdb03d011d328c81f0c24057d8245bb8d4f861dc76d3a9eed3e31a16af114147d7b17b4753b8294290a3c8fd3d135d7ec144f2eed11e4dbd4dc1e89d96a06d7860e5b1f806e5d15badbe05a310b9da804abb41297b179cf4e8d077258b2f7df549092ec6c8e7274f25aaf257fb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64b01c13163085cab7ace03109a35f5aaef67670699dff14720a7d9ca0afafe396746a997ff3efc0eaea70a658bf0eba2d0a146fe93dd5a8b45d8693054e52f4969cf021b6395c8b57abaeba260a4b2e6ffc328069ed30e992191bd17f7be889bfac716d24dfb47667a40eb72f7514ae2feae5ba11bc24793b3e324909fbff67f5000fe7e6e71986e2b79c7825aca40cf6c426def806d59415d6f477d321ef69ecc8eed7d061f242b088df548427ba6188cbedeaccc6dd4d75311658e4dde6d838a8049699893997b6e268d54d5ab13f7d1e38729d1e0f55ff607b74d6f869a5ef50980118047ac859d8cc57c79e0f3cf1f0562dd705689bb471c459c3cdcf4d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "82240214858bcce755f761d3b6416c15322aa97b4e130a01263cefc1cb11fbb10ac28c5c22207b609f86cd63759a689d6e7f825ed84e6042b66d06362441998c715db426157554e8384898cd63177a1ea538bc589bf7441ff9d3256b851f9ba519e3213da248645e22314b34a53739f035157e222006112c1f6ba8e7add0326d618afbefe456e530532bb29769db477089330c0f0dffdd4302666b128069d8ddcb764f154c8700c45e5a8cdea403f4e4231b6260f18e6039bf497fbf09420163f1dd976af573068e0f87047d338c6446d480c585e6a6b82eb387a8549b7a28c909d88d3361a80baa25eb606e4e5f9eb61be9bb8bab17eaa7a98d5f5e406cb0b9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3b243a065df77eaf4fc8665e8439377181c422acd42da5642ef55ba548555795ee700b156d690d9fd29cc31d7ccc59d6b29472feba8fa644cc49c4f5d46722516820554e3f98e1dc03e44bad5040ce4f0748c82a5a44bec4c4b5d1b0312e74cad9e87c022385dfa034e91f507e72d7c1f7fe99c6933801eb202c8314c5b60fbd67427fc14efa9e7569d401c6af268e9e3d864fd108f78ea5ed1a2ecfd1c41da2e9353aba41d4df48d3f2535d5ec60cdebf7497eb25db4415875f7ccc15a49ebb493a7eb9476dbc11815eb414577ff76953a63991938fb6ea73e0b77a8cbb77eabf3b893c22aacfcab7108dcb9a3bbe3ec048c17b416b146d4251c7c36fbf0445"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8322390ab9d742c87b5b105f63940d9e4ecc613c12a921798c2b2a00c1e5c6f6fa38b33339c3fa762487629bd589cda879977e257de58a0d3ad4eb9bee9e3d41c57ababe557d0f3f8bef808dd7d5666b8a635b1a1d08a94bd24ddf10db4d6a366c3ed7a6891b7878328ae5d928a6a14bb425c4c1e917044a08ae0cc679b646be53177962bf04f19a345428f7a0c877f5749264edbf0835cec2f5aa66b7a1ae9b5e8db22748bb8b8f37636de4d02c9edc5dd182fe1f3c227d7fff6111005326ca3fd693248759fcd56a356068d3be8f78ab03d484a363fba9a13491ff5752bb263db2d905a90c556c8e5b12315b577786e038c989d13ded424adef4932c87a5ea"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0279b5b3e03f864b05e41a6e964c5cea2b777be5e670bbc43d2550c9c443bdf68069a0eb91e4ef95dc9918eb1786a123acb034fbdef2690e5f2f4f5aa0dd10627342b90f2c3ec1e3b6ec77c01a92b0c24e7760cb49f845a168afc256686dc428f48667d1971d56ad81153e7a54a59f10a4b00986d9752f1ba11774923374a990996388bc26dae6be26cdbb4c1eb76cd0d98532720e94caa2904fed7b937cd94481e4212037c628df3e213d5d856776a337ecdb52a4d256b3267fb66f0cef10e39a5330a9899e103817ebe6c32c741dd4eff16f37fb6ac91facfbce7f467397739b1557f0ea4234cbd8d393abb1f842a2a182e8ad9047c7ed643bcfc02156b106"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "24c8587350927113af79616a76bc5aee56e9b580452eec608dc4b25e8ae4101244bc456368e14b1cb595aee9c1d05bfd169981d2f5819023c43fcbb857b5feb7f11e2e3469cb1d53bfe66313cf662057b84b8f9fc1743547d848d24d1678d14bf44fd29b2c10b24da5f42b93534dd535505415c32f05e4078a8d31461bf42f2e465ab90d33c24f2ffc4cf430253f50478fff57dc1eb91debf89e0fac9c382f8acefd9f1dd2f2fa2203dddfa56fb275309bed0671f623f24927abd562b8a4cadec561a530f04dd58863458b802e8fe5fa57cb22708b700be9b250a6163b6e54bc9921944c9a8d468d02981b7fc41b9c6ef92fd705b24da3cce58a90b6b112dcfa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "58b5bdce097aa778d5232055b695fe11a01fd06dd2c76f6c4ddbd89b28d823a6dde045d541bf3baa04651fede28dd5bff79719e0310b285c4b5ef39f426ca9eb9d20b759b6455c8ca94b08f14e8b237429cc93e6cfdc8d5f9590ab9eb1a05243a6205cf26323dc5b4c1ea1f815c3d26e9a4d5f58e99b06e213117f6ef7fce8ecd63e661381aafcf2134c0cefe49b9432ee68e9e366d7ef85ac82befedc5c7476befcefcd7a6ca7f0267585576680c6ac901cb4ef12c3abd319f74183c4b5d852e898a955628775b941f91594cc00d281b3e69b034765077e967f9282a1bc16043a162ef1fd193921a3da4e4974cb63bdaa7745278175ac3183976b4bf1534f7a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5498ddd6aa8ec6434d4d772df218db7724d4df79dbaac872d187a9cf58bfc62b194c263660e663b2d50583dfb1e232a6a855c3be31a7297ca1c801b065a13871686f1e379f50935f754243dabea67176fc4d92351e9bf1e3c9655b5de16d725f0e925d554d215bccd55020e749afb612420d30ac95c5723855e2414c9d7bc8d2a9ddf33787c521888852e1946bf866411f72ebaad3ae730ffd13648fd8e5464036e800064472806ba78a0ef8a10c1739fd512cb2913d91325cad3fae38a922c3f0e5482781bfaee6e097e09bdcc6eb67772ff79d358079e522f9c8f32fe5f8b227f126803f0e78554c513bc0316ea267b51aaaf17f1dca423f1e0996dbcdc6bd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3b2299256cea4f270aa108ace666ff3a44b693c27fe72e21e3f0443956dc277b1f24ce72a48d512d7545825db729983bdfe4ff9fb0ecc6f0893a9d326d39a46e7040f8891ced1174d2abd7acc27f79781501c3a972d562f0b5c57a3ff2ec703100b7fad948c7e46494cabc1955dea0e8734ceb47239b915476b969f317a9953653e0e5d4820bb28a5c81b9a4f1d0f18479096a60b53d0808acdd4efcf16cdc4ed82b69b33d6e5e5261347e821c2e366f2826fd81e8f282840495f6f2613be6b9f1efa989d912b86257d5449c88f7b3cdb39c7bee6d411187a0f2cb83115e5cf3a187d9cbbbbffd9da0a62780b265c2a5a33465abf90e41550f8b7f62747f5252"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6224ef796a605bb30a142e4671549288d3ce9a7ca6ce58ef79d08b25e95a81143b99c84efc7a0b92885029752b8bc1bab7fc56048c19d50ca21e8c009024dc9dac2746a9b961db242a1454f0df944bbbbe28a9598878f9392746798aa1db8c69c6d36af64726704f9252ad71e655a02adb6f3e8453ad59a0a45ecd1ea512eedab7867fc50b508c49caa7399f343097f76b2361fb7ac2544f6ab1b745965a8d7e83bb9a1d39a21fa6b4c14e9a800983f5c76fd8de81fcce99f4926e48bdaaaabbe09528a203f5e76dc19982021618f231e37758e8e729968c267390fdd759e0ba88c9492e4ae0ae7512ea389bfc6b64d90eee12c012fe278da80a915da794f6e0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "81297d38465c4346e408293d770242ca6e9ba2f2ea9a66dd932eb3bf42e72bad344ff31bf058e38bdc716e5a747963e6eb96ea1a48813f39200596d6d589f2164bab35c15f545f80d10276eb6d3b7d13bc7bfebfd0f6949fd7547c45266fe6573389c2343e3adf9fd64ba627baed14e0e753a8fb75a3d1821e2fd03f5422bab3e71dede7470b43449e7e49dec566464fde545a1ca53a567ae460a1d994d295355eb301048413cc92aa34963fc59e054e88bbf2af2ebb0ac0df18b06d1c5d9ddc4f5c3046c5b609a9965a646db2a1c70b0c851e7aac01a5df8e2c822300d3732ec182e3d868adb99d6c0186cc5dd17dd8c89658c0ae021475fae278e7ff464501"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73b38e74ba14249c5fb4d2b3923e2a848898a2a5b1b9e6c17848177e6b0053fbf768d5b393088c3b7c5e12d41d24cbbf214a5bebbea6661229ca55f79b76b1d1118a2f7a6a96f36f88e1388283d446b8f8fa4b10b3a6d8c54ca207ceeed96e06147475a3d47d68cb2790dd0ada7d816fc1edac6e10f4f8e6bcd807cb70d995d7d6029dc774b1ab86de3b31c4fe1033517a64163b4867861d6ca0bacb3e32ffe4761de071a03fb79f8bae8515973a4eda2d7676cdf5ff05974654f97d6dadc6bde754f7b297264945b3bb69b950000a4d597c071fc1b9198fc1ade0047bcc7e79dca09e8f01bf4ab46183cd48c8b243865eb6267f0974e29072e38f65957594b9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "56502d3cc755778ce731048dfff628943f94a966763917f8a9244be934208ca6fff2100faeddea5693273b965e62e08672a2ae4037b2a6681e1037ec8d4f00b7ca75b792d596e01f6312733929751dcb629ab54a6f910a57dc01895cc92d2338b4ddb1271be183f906e128ecdcb5cafe1096beac38e3e49eac7ebca6c91bd3900e83d96910feb192496aae8f55ceac814e6829d9c068f2619b048f1e30e2cc0b7d64e7e335ebc1b566f12b545a5e610fbf5317a2efcfd5d18adebe17b3b71bd788bbd581afda953dead19a0241c6beb851581249d780e780be43c995f23e90ea4190fca6b9e81885031beebe6a65a53db274bede417c35e7e1e597c6610a1ce5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c49a57abc1b7cdd2699b2d64c9ed240c4ea19ce2dce960f611b5264acd37fc4e1efb3ebb5699a4e2292d9d63dde3b80f30c34118614c617444d7e2b770d6434c58b176db042b74810b40fac6006bfd84a51e32aee8900ff40bc8de3fc77277f9c34c174769afe2bf9c8674712c645db823741a4425043b6152940bce8eadfce213dc4de62fddb626fd12b56efbdd3fbf0b570dfce0ef3ee7b3f7c7ac383fca18e04a4b347fd589e30f283ce56fa60b9761e9d5f584b493062f490680ddb7a2a6a23ba0145ab184cd8e3c5a2f2b297b85db51438233db7d3c72739b7074f6d7a524ad83aea2465f6c1bb236d5ee34e5f66297d549679574a9847ec45180a8aab"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "41abeab011f029748cd5651c173ffb01f3a5ffb4e198549bacbf8f98523b404791704f52c8ce631d77b31066b1891728e761047a0464e8160fc6093c9ece6f359860da1ce8b229327cd683a2854047aee8afd36540d35c424a19f0db5ea444cf91cdc548dbb9a196f3aac9dc9c4365522618c354c0d99e7a0efe40a2b69b9b99d18f3b941044ab37e0e564543a51cc919870c38a4843d3ff4c6a7d503dd38126b5b76ae7736c9e1790f64f5f6e2faac7fadca3a8f75e6998270004f1836624b580e1430a31c386506b9def2adbcb01c716b74f6a4e1e85e55623d8d3dc4fe8553e1e1feb75eaa4c71829315f67b46c2e018caed17c9dc2a31642ce574a599ffd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "95ddc932d45b05c0a1f4c2bbf30ec6aba93ee9ae560b4a9c124c6be307cf930b754b6b7b1c8fff23c43c2354b847d37073214ca3c95d27e0551aa45ca36e873122c109c0067df39797563168e5e6cd8d20e972ad364a6c3f162415595ae273574b7b35807072b71a8b17afd06bc26d3ab8374df32ece1da2ceb9daa582ac11fdd9246d162fe4830846d08fcec90234ffd9622e4db5576d86fc4b913882da7bc5b1779b2acc0261cf434cace117090546d86dbf5056d0453fc003ce9c3918a015086583d266602403353f0c62eaff4ef4f5697f6e682163277818af6f487600ac326c76f34cdf49654d3eebc7913c0f12a669fb6bcdc809b2621d7ff5050da3d6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "51c0e29286c44d53354c2e11b057c373690cc8a6979ac1e184bd4bdf560c0a3fa76e80aabd7041b0b1cb40e703966312b8037dc40a36acd170ec8fc70e35c1edb41d9fcc8ddafa54bc1e96199b842c72f2421803f8e95c734f19ac169e581fb3ce0da042108b21218f28faacf7141baa0e2b72fc3bd38930f4ab139c1347a9806115b25d3cad3e00fc29296b2d90e403e5ad0dbb9901dd2855fb49f4b7c9500e9428e4037abd6aa767b604edf426cc68e39bacd9862dd61612f0f5c5666e1593bdcc6ba38682f19c5512b1217f05d1905bc47eff2625ea5d6581f3657caa3d84ea9b948aadce632b3bd4ff33699f384f618350b93a223e037d6790bdf7be128b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a9f00a0a13bb63a9a2b98a93a53cead0f0d0f0befcf19404e838996ea86c67919611edf2962f621480741ae34eec18e6c87b5f40b2115f81e73bd1ba59dd32ad41534d143bd82f982f4ed60d84dea28d77ec78dd6301145c63a0778e465e973e963502cf1c9a21ff5a84f5f4a673d81a9f74906fa0f28b81fd4c1be7eba5974266802149a616d5b7b9bfdbf51aaa9ab3051082a0483b33e7b43b52f86bbcb33f07783e3dcc3ade6c70acde471613b6d7863c4dd091017ca9f0d9fbf7405fcc7e7a012f38404fb0c3ce03b2e601611fcbffa985535c238b5a1d529ba092a3c41c8c255da68eab9e84a7b3f6f29eca3b52bb4b977b6c5e1375b691f6ea413b557"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8270bd31d9183e02c4423798ea8f1092bdabc33e144cb9e79187586cf92a2239cf52ff324848461bcc89d0409574655b8374bca84c38df11facf035a6f54f25a7c2e691adaa074d5ebc08b0d20b45346679d94da1fc67f57444a9663704bcce7a6964a7e7d6a98bc89b674bd3037b15639ec5bea57c313331dfdb0bc0d2017f1381cf5f29245af5bace9b7a690b573bc7abd9c36fce49307f0524b37b29776fed6722bcef049e566c8a5a0db44ca6932bf11e2e7447b82318c71eacd164093eaf40b7b122f306cbae65098b68b5b920e96f2143637db6d70070036c2cfd64db05ac87d77806d53096bc63d6fbbf2efc29d8514c8b909ab79495a04639f27b882"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f7e36a02137a094719570754763ccf4cbfe21a05b95634fffe0cf0cb46210d379b5e7dda7ad815081d12dc43452e35a89b1fb715e4a507b364da2b73b3fdf91ecf1b04a6aa3ab9b90718660291478e6ac0cbd29c18d4beda2b0bfeb53979facf2e5d8ef1bed5a36686cb034082feff665686c41572441a673e7426a89866f65529de9fecfa32a2cd1c7098e7e7bcf2a720d46cebf23988c259dc880a3acf8e1b17f1ba8de6e8e9cfb8af2b6398f7541d45162438c3f14c308dc6d778bc91106c7d48332d8968fb083bdadf1edcba30638853e5bf1398d61bb8eb6b61363cdd859ce4f6160f7e819758afa067c612be054b4c0e2567fe39a81550001cfa081d3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0571ed711f75daa6e7c7b65645cc10ad040b37fcc3230d4e8655b9b40cbac0e1c5e7d9ddf18f7995bb2a630235f7959791b1bc21c72ccd88ee50b5136472fe63c13a4a391452782b673b90fd6e768385e9f09023ed975c9fd5187b86d0d147418396a971faba4c5d968b29df04a28f90f0a2eb89a0777dedb38e4f41cb1c373f88906da1218a80b47334ed4e5cc0bfd1a93d2ddc5141b243bb002dcc513d98e68d512728204bd0d0d9ea5046ca21bd6d32169b69ba8b1f829fdbc4b4c931d0d29ca72e4fc2d92a74d2b5e1569a222f4b8c93c6cac09c67c08ab08fa08b1fe9ba78fd016aec186cf2f9443b8a3af242019a4888839f8c6021f26476e32300af4c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "690df1372a35a30d9c76a4bf91cb951cff5291bccf26a1043bf84805d75d27a28c0567d353a95685d3411acde938df718f2c845d72c4676044f692e8ceda2b22da5fdf32bf493462fc83c59cd8e5ed0f62f607bfc6d04fa38a6b01a5b3cb6b58d55d9fc2c0a36fc4ab80fa3a0dff60d55a0ca946c568451616441fc9f14685077388a069c3892f1b208c5431b69bcd5e6ca8f789e210f63af6b4ead0a8f3380e818f0463b2287599f5c4cc08bffc460ae8404069cbc01e2b1fef6fdaa810478abcabad6b7405d01e5d3f44884ed0c3d69b614b2c794721066887e5389d72fc634d14716f0cec8fbea5a12c70cf6b4471df4f46058c0db75ad3783b2dfe3ce2d0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "13ed9422722bfb8b6172cb5656b9951610f509bfff5d10e2b91ddcb4c2e8ca58879a7db943375343fdb794302c28e3db0e1b850e8428653c09208dfd46f065e3996927d85979927930b89ae12590753ff03889b8eab41acee725b7092472ed00ad66d00a96370c909c2f39fb6300175d510b368d3ec06ebeb0f62f179e191fc1ac9f7abc36d19d0180f50f7a33337daaf73a76f9b38361e91ed7c0af2c9a3519b4f538c532f3bccab27258d711856b29c41f215ac87f6c7f3ea52c3bf30db5e7930f44e489205396e94c0bf11700499b5a72b26c9f3641c45bb248a235b42c410a908e5ddefcb481ae619b23f8a5ed7afc1a9cd782020aa119af745abecbfc57"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "054582c86eb3bac23c330ebe275884ec6c740b477ff69795681bbd88d9da5369ee5d15fa2dd64910947cc4b3a713520716ac747834058f50852233fff1465b4c582ddfa2411ee43d26abe6a26aedd5bb79384b44a45d24b1a374cc9d193c3686fcf7290569173b07b5a698ca75653eb83ce3feecc40767680f6253fbd0d7151b42c82ed7126e6a2d73cd1c64378294932eb790f5997746af7cf87dc5292058c2ae575f5929426fefe7d78867b725fdf6cf2e40c052b69fd8104fec8c017561737e02651aee89c11327f866875dba4cc6a6e69a5f2ab612b4e72671c8206d22c2a9d69dbf1dd29eaf06745bf2267ec2cd89552338136a8981da13b4223d79abe1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "67ba3a10105822c5f34c661cf7765419ebe52142b5ee9358674a174abf5981fb845d4877315a6a5f856c6a30992f520bf3e979a7169adf0e1666457905d49b91481b641158817cf2ee2b8725bee0d7a659777a128fc7509d3f0fad7a53b04a77339074401cc306328d7fca7876b06a54a2fb46edb4d763598e5fe21b9818c1d61ece98a4fdbc0376fa2f9b3c50217f576124f292d6032234a0a6e34835a8480b25a5254b9718c665911aec227c0f432d2dfdf0a6aae40030a05d3c03a02e54507ce0652cab324a2b29814451c985be5f4dfa2546e5b310e670f9fa510c24352e534d3c46beb8767224d90ca8dfe1ac534a5a8b80fffd5704caed8d5180adcd3b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8eccc4b661d66f3c8b4e26791927ac035e2a633b872c60fc006324886d45a88ab29b9bff8075701e61cdfb7d85b3f6d41bb78ae12d2d40b046f1f7bc6ba11cda5eafacf3002457aa6951dd7e574b6ccc7e0621f6e4110336003ac2f368b50969dc45370ed7a673f9b8cfaef3c40a6814afc2ab4ae6eeb8749e8d0230b38658c17fd44aaa9ff65773d001430d0963167fbd08fc72343b1ff40920741423439ee3795c036c912e53f9e75b2d255160e67cac99ccc2db7faa8b488e7f1f56ae3bd0fa6a277b9de387651debe4e16ef29215054d9565ac23a3830ce37b326a4eb5c6cb5db7a8cd961f6d7d7497ac14aa459b3b64f2300da1f95b42687d2126e60d8b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "574192671e303ee2fa10bb741b24c8632d520a54dbc24184dd70ddae468e71971ead18932c8b74cd6e27b13014a2ea96f2074a9fbdaf432153f408118306922d111e861ff91f549e8e669fbda98c4975a60d36019b2c4bd25ee2fee0e319c56be4554f5334edf152f911a2317123aac2ff0d11359e43189223673e4b4b613cf070841364470b08f5390951e8d9c6f8c3422f79e3bf4863b2e4ae694d63d57f77620511eb308c3fb454270a4d2190c83828bec4c0fe2283e0d9fe945f6aefe7b806151caf38bbc963a40a97d92b8f71428fe89e8f468509f34b2cb35542fa717e5feaa6cf4cd6c8ad87d8921d5b62d97fdd58642a5d8d782c87f8f6a53a9aaefc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90bc6a2164881905a53cf42cd42753f61a47cf4703d4658343dbcc30b46f97d8656ff1ac6c395e1a36f27562d7c23ae859239c1086b1a6473eb4f57d9e0d47f626f8de059084f681032e6fdea27590a08d5e57f06adc0b8960b640d156b31047d26180f1a9c510dcdb316948ebddade72ae3c8d9d6fe49642394f30951a614d03d37c5ea640f0f72435b49a0d382b93121603a424fc84307bea44e0ab83f25389c639eaa2614819d6039c721bd622b86822ceaba916ce302d2be47f38d4ef37e5ce40c3771cea37bbb200cc64f4180199a7e6aa2863e0fa8355b1b456f748fd1cebee88972fc17d9fd77fe9bf8bb7f2ca4299843434b3ed24910c5e2abff7c42"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b590ff6d404fec472f9231d39a4ecf4ce6b5e9438b8597c082e01bfdf0909c7aeed2268a3e568c49d9959352378840454f9119beccccc07b46ef2c1f143da08818c578c6b2f7acca6a85109c8acb719fe9f06282c25728d466b4f138a4b129de607de9ca3bc6180f4a2a45941416f8f5c60ea19c921f76047e0dd0738853c0b24c25476025ed4291beeec5db8e2c744795de8367530cd5f5d0876c3b99ed248cef9f83c54a9faa6565eb0662d6a126c15a5a4a55ae3433cdf37c6e8854563d2b9c06363a86f4a648951226a34c612c3e6b6b883c974d4d2a8e07d99f88fc4eba0a9ed28799c95fbb1404b3599578a164721121ee387b0509ed5e00b3df84033"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8dd4b03ddf0c4f8c044fcfe70a0b97ec8d8f31b519d11d7e00702296ac731dac508e074024305a285fd32d93aa80b26e6c1d9bca4dcdf07dd141557f685c473f8a323492e9674ed28fc0f78f141418da63e24ff1d82a9e280d2b63819107190cf0018941a440291ef291fbca9616074efb977c2debe71b4609a6510138754d126d203ffd9c234ab334506bc2607eeb9a64e0600ae45e45b2ec398316f4ffbf405d985be94b23566f71b77679eb34dfd560bcf81d790dd1a30dbbef3b928d13534890d4640d47237b11c56a22401e8354b3327101cfe07be6da690d1b43df4486eb185728d7abdd8e4139b506821640a432a219b1787569cac4a870cf17a3dc28"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3c6f82cff4559f83ea73f58e5303b37ac576572fb8f94041640e6bfc0d1e527f77af011e5b62f8e854ad052500439a9a6386ec01504a899860eba9f67d78badddf2e72fc92e0ecf25895a807431cb8381cf0bc5eb2fdb28f96340efbf7e54af7d1bf132b53dd9af5b8d8ae37fccddb32f4469b880bb01a84892cc43b394e94f82b22c454e4d308fdfd7e893369498aab4d42ff7048578a5e2d85893c16f8f12e2f8e7be48490fbc8f82c405d1ec3fe8bdc0243898c58dd4306796c40890fd467d024b033ba724c67a1119fb98da9d8c0c9d3673f9d45e3f40811fd223265c8e75fba57dffddd9ef6f94ba03552d18773d009ff142cf09e62cba6330916453f5b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f8deaf286c4e55b6e1a936abf3467b99ccda07cbabadec1798d81db7c720d6d8c278c14c494faa48a4def3bd4877b5054ae0dc7cfb6842b69ea1626b667ecb22dd8864a55b7d39205141c5068559874495738c6b9b756c0e46b69ef21ace864740e300c57d3dbbd356d992d08afd4f78d4b0813ba6ff629fc837e04032e6831f931823cc43076a69a91c3da38f76ae4ce127d11ee0aa6c436e68e3b4c496ef04f00778bad4b51807791e901000f6c75f81568b86fa1c606acd36661b1487a45cf36c2991a7bb87e7fc9da54c1f8a98b1ee0ecf26336c4a4088bdfdd7ee463ef3944100785ac16fdf77cbf8d6f6f578418495efecad9dd1c279be63fe5fe9319"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b600cb582f01b2093b8c6836b1ea72a27bb54d167c3cd067de1b9f285e824f46b5712f0024cf4115e69bad8c6caec74742076dbe365acda52fd50368edb854d63020e9d698a4f1f753b4817b282acd37a625e88997c6d067f5f80e43c2f000008a57514989c8ddb6ac36e6ae15858f16a6436588e79391b7fe142be5b66cae553f4b998ea9ec2dc8712af14b9a2a7086631889501f77bb81ce8899dd57f75fb3cedf82394627a72fcf7e1fb5670edb260f71e5a67c502501e1531111978048cd181cd28ba37f20e3c24f9895af9b9067d1c59f69794e43bb64eb8f5b1519255623fdc64bb85e1b85b7c793b0ec42de4d850bd542160791d6e543c633ee21171"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "16378bb4a3a00a1916e10733b6db3b960c20c82929d1d50f6ce694f691b8b1a2be1377d6860b6d678fd27e797d7dec9850d99aec1079ab45e08a70a54b6c6b13ef7c335d48a7119fc855ba69130e08af62540a0327dee39ead88e5dd923edb41f0e0c840737eb35704cf5a3f2320a1b4eaacac70846d05eaafd743046200a5cd25d37ca312d1800fde082652a8e802f15ed775e055b781aaa7375de845378d57ecc516e23d445844edc1442cdf7eacfa60a995c7a9b062765dfda8aac031287b72044af30d5b0ed4e815aaa55b068212b187845e829adbdb2902dfbe2023870d006b8bf77779b8ba205dcbb3225e3c854d853587b08482264c5083576cca1107"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64316a2c63e71413bcf87cd2d8efa6e88a527483bf4329a27520217903dd7b4a74ce427cc388786fad14061d50755ae6514e8161dc596a5eac1260a24716523e5016dd55174b25f826a7e806e4204949e8d23a4a7a0a244df064c57432f39d4ff3c90c282fd4f49712d6a922b9b3ce8297f35611ae846bafb060bcaff0fb5c484f9766b0b36b2727c11cd7f6e95410b8398ac5ae1f1473ce16df25b2b4edd80ac083a3796863e2b55428a900ecde671f84c21fd8fe224c03878c62b8d988f487d063e2c972ee46f72a8d859e9659483a860938613c9f4b4c26313d27e828dfdb4fdad98d4edc31e07b050962cdca2f2980cd2034a5a4eb82bedde65f837a04c3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "49cd3a96260855d9a0ba3005b8ab18f077e18dc88923a4acbffa7ce91a948601db5317c6e6d7e55a7686f735d378ea12bd17ecb26638dc1ef5f613c527c52dd91ec1fab9d3823ccd51d7ad1af5383f4920478116e20fe43996a8ee7b61116cba0f69f42d5661c97c71e62a0ca792d592e6e0ef28e67e27b1ff7260ac427f35f7788ac81dcc69ed4f4ac4eea07a69303cfe083a7cde808e75abf62283424a8727cf0a85df2e26060de2dc04dd12fa6a0471a00f003b30eb4d14b65438d7090c2bdc953588207c0951f39d0aee482dabb782cf593d631900eebb3dca524f9d1607440ada91e20bdb7117486ae90d77fc44cf5e4aacf4c850093ca883ddb7b3a040"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9dfe688124026010b835f972719361baf84e104ead160ece75d8778200f1dfac867d262f6e8dd12cf25a8018c16f176d032b28150079c35a6d831f9825c80e986a9768131fc6e221e897e221a14be3355921369d5accc9fba6ab8649bb444913603db70cf09188c1f2f34eebd06907dea1b7a970add4c01aa4858d78dd2910c251dc832157e0f373e4d6bc532e1fdc85b8f6d3bda13585e789607e823ea8808e71c1bb61fa40dd219c2980f5a84b502363be708ed3a115c5711c69d16427d60a7a605a9c282c5659d6cd203e0dd181e41aaff5dea6233985882978172f03ff34b651f3592155adc34b26ba7a32df6cf5ccfdf15a7ab95d2f217a0565f4564fda"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b17d3b2cde9c95d954e3d795eb7fadec93e788101d337ff0366a3d2fd7de8294761b0d11daa19dbe5fefea7bbba4986853bcb065a0d5fc34d4386bd0d9ca9f1dfab415377a8ca0c8e879aa2ceee9adb3aa57287adc2b2ce1b4ab07c09212b3d443d29297fc206968dd22ee2160716bece2ac0cd9bc9550cf0bcc71319e97818cf1658f0384d991b2eff0001da8329d50935b3d3efb4a045cf1f88c98a8c91f316a320b90c73487a6b132304c547437c5581c2c66cc1b23f2361e65d888872cad4c16de7138c1ac2cb13a6d84cacc93019e7fd84ea99409d8d8184cbe40bbd75792aaa283183eb290d517d46c7da3b1ecd6a2ce086fad43c565b696ed3fc8250"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5ba48570aea8cea4f6f76ce4d92a9588a6478e6a6dfb82d26eeeb6319420419eb8553dff3fc9843d01c9c708947a413bef9c5e7beee54a57d3ea9a01a81c7fcac04c4a3f0c7ce17bc8fa7c3e47b03d3be004a2f4340fb8c119d6134981d9933b9510e7b89fbae037809b8e49c429fa9e01ba6af5899f0c2f60666d42a62f4ec1f8e2182e9bca160116bd447e9aba05c9ffe8cbd6f9abf3061679a50d567221c2b808a48f1694188820f7ad07e9883fd67ef7f9f2d78ccd13fd8017d8836101de319d17f05beea9d7b1a2c8b1f7dcdca212d332befce5c0c2a89bd29dfe2bcd6be1dc9600baa0ff970393469ac32996c2710bc3d07763b481b6a713abb9880604"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "45aadbe78b131670705fff8a10c088e832a6917cfad4b985d20d6c3173b2cc26bb95670dfcfcd927873410d2d3e87850d1c64bccbd2e3246f81ce2b6be32a5a7acd9b2df660e279740b4b916ede28fe1488cbff230bfd359a77269023daf8f897a4adcc6929d9a2414ad2d2ea151953fad387ab963f8da7608b1253cf88800848b68dbbf4f8cfd42bac58e37599de5390e6e0dd9b3c763d963589945fefb33c33d9b0597434a2ac2e36db4e4f52812ad24a76bb91bac54a6843e0b20d5fabb5aabc2f07c857bea2446085bcaa27ef51ca194f9b1b3a16a7be01a4cebb5b641c12c78cfc2dee0c0c7480efbfd4fcf6c8d1379dc026a11109bf3d0d359ff7e6ab3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "52dbc8c5468f1417f3b9a57c3cab9bf8338e6096590418fe057f4c4313b8462ca42b25b9af14ba65cfa64326d5ffa512d603fbacabd46bb3d381427173e3a91af99e6faa7da7507f1bcbe794dc236086c5d3cc30bf0e1cefaa3dd0e24d759a7ca00ef7cf2ef335ea192f597bd954f2531e19c68e492afe2b4e1c12d5bded1ab9d1c7b494ba52ec017c5ef02ed4797ee0a27d44de9a9a365da76bf5fefb549058ff1ffa21c2b77c7e365267e14d6ed209ec0739619d8ff2ea3174619e82abde0732b1ed9ef3dfb04c9fe4fab5125e1b5de4bf8f4d183ba04fd13130982196e8d603be1c2a69c3919179e8c3b9f189b54e4e268402db11a50724809919de67ea5b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25918876ee17947c7ea13c95b6f5e693cfee2ab988a68b72765853a4f47b0075d105952afd7d271e3aa39a88bb35549b18d0aab49a48a0ff25c64ec8d052cdadc92418e84436f3e930f6ffafd0614b5e0af4f87e0c6e646be9e7dfd996139cb73838de8699916317c79fb16df1272efeedf3044fcdff7255fd45ecf26677f8e3cf7e86b40f48e7aad2f4185433b5f04e06bd105c1081e5452d4292346e07f91f9b29cf2e4dd9ea335c065cab8daaff554fdfa1990130dc1650124fd7af5be1eca9c38a4bf2813af9f50e51d293b4b8fe4fc6b40f8da779ea595ec0b43c4db3abf7751c74e92e28481ca919857d9a92c8db1387be5f4ae4b8cd3372d350e57cb3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3dd518a77a43fd87d8923314e8a78d4dac476188c113377fa71ed7d2fda4be726b17e10bd7870ed018368a3c36be143d4c3d59ce35a18cb46e457ed2afabd69bff77fe94ad6fb95b360249944fa6228faa4159531e67490c8ea44dd64b471d96c48bae5d1da7c6fb144604ca8e8abfde84f681b9b700d62649009c135fdfec200c92096bdf9a699eb1b8936e8769044ca0127070b40e2cb8289a9f98b91be61ec77861013cd9ce5b33fd2837ba8a93caa480632aeddbe283fef6ccb953f2e4af9ff6fe5bd01beb0d1a0b3f08e9d22f26749b5c9f5f302002f89af05c7f9a09fd416691abfa0ced5eee4aeba83113bda1ffd418ac4030443b9072cd6602fcf797"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "56e666f4c8b916f556ae1139f9626a6862de59780f148165f924965aeeb35ca681b7fe2a603bfb1098ecd06e3e185564e031699ba6f5b7c4192e60f1c7e06131eea6a6e772f9b7e9be4ec4e94d89eddc0351347c5cd7dfc58e2c9795099144428563b77bc3e3d5dad50cbd19374ff5c7915c8987f046df62907b7ded38deceb2f04f18a868abbbf3f095ac660774be8274d0788b88001c17b7c3a59f792e81e18fd01bf8d67289012f60a887202968c17f2ac684e5a4a05673a0b2189206ca3358ddbef03b54488d5a794d3a5767de1e4e9032e35bbf1c8fbfb9b9be9a8bc5ddd98f12d3853485cb6a38cbc7044e10a61b704c6987e4b76331aef926a843f85a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "759f6957706866606f2ebec1d6400b87afa134067897d332edd191036f318e1e21a71dbcc88e0e3b7599123cc8fbe19a15273b481a795303eb7941139e7d48afc490b61e3fd38078ef756ffa8de344f2e930b56452c619089062c27a47b594c5fff1fd7f5870cb5dc7c30f83b245cc838724639785c2ac7d8295e9e1a99004284ce1a5a5f4c90f1edf87be994e2176ced8b0339bca21068db978864e75e84bf9b65b5b28c3bc9fdfa451b39125a271dc280b9c6cffcdda1d883f5be07cf8c14aa4aef6f7993e86dd9dac620ca24c027b83be7cae015d2a55b85cca9ef1e6d080c298e58c4f0730de7820951df305d85eaaea46f087c74f3ffefeee09aabd5827"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "24faf2f1b73eeca67814b066b8099b41a973b1c55f319d5e3f7a9943efb958e8f5a7ad9c9a7dfd64e2be0231d341a822a8ce31cf3e008e65e9e7ff7d7076c3ec62632a4c5cc4bc867c54c9789cb248bcd5afd0f8a2fa8b1884f630a0663758a6d472e4e7a085fdcdddcb1917630dc5e19857569208108123c0e87089f2f247b6dcd5940bc35c25dc10718649effbb56048bc03991851b0d50cb82eba64e6726c41567b5c708a8311c22e477a4614a2bb476e5fdb8cd7f14f461118bec1b6defc26a56df14ec3f64707d3d462378f6de72499639c01b6a745402fa46fb09578f52ac50f9db82c83e3041745300029b665701c595476e3e8651f86e1ffa6e0a045"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73cb10d068ce0168ddabc2dc7ccaef8026edd5517c0de9b4c8becf660ba62c3df0fc47710a9628ea478cc75adcae248bdcd3c555cebbc4f1d99ec1f6c0674e092548e20c747f84959cbd0a5589b8db3e464889d537c6977f13668fd02ceebad3d74d7ade6deb16c6c8c5d30fb0778c3db5d7cc9df986596a0768a0d30c199fb8ffe5511d99c8592679febb5f8851a388f291e194fcd19b9423ad4b47f492dd720b9f38c3b0b20bcb816d463ab9680bfde66132a54a8675be19944a5e648e0bf942427f404d9f810f2a9d4626df659f54b6a5d3a6878e113c48b733066b3a83f5b26ac75f20dfbb8efc1ffbdc2cb6b9f198545f95ca0c3f54dec2f8307fb1b6dd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3aa737bfa89b66e9ce0508aa68da6c9760d5de6c50e1dc472073d4f5f280794b8e5f2ed5446cd73bbfe29d54c7f7f5ba69880158809b447a39e0363a59f46f83ade8032c7dfd090784c582141a5e4a9114082a2d91538bf55d7370525f31c0209342d78d327c53e21a64d9c81330003dc63b84d1ff3dc7a63528153e3d3028b66ec2c58182fa818d3c333f69b6dc9935cb670fdeeb226bfec9f3f7d04f5aad6947444e72dff3c46858ff89ab9a642b697f8c37fc6d58abd30d7e07061cbd366a566c22784e84d836a8b4d550a0617c4ea1ae7af61e2c78c9c67bb50c0982098faa9e14bbe0bd007e81c6c556bb3ac19b05057d7b4efc0d3d4238943ed1a552b3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1be82c7d86945e9d8bbbcbbf58216b20f2b44f68af6be2b538c52b0fa7809345aa227017a0854d462b74e287b20783cfd871fd85496dc39e8258b22e6befcefec67c69432ec269af2b4b348ec85ccc03a64523f038bf3dcd2de8cf6b6c6343b374419802d055902569d9188c9f7f795aa2ad22c8551392fedb3c5dadeeed4c1ea0ccf9ad237dbd73fc590f0920ba1ce11a130304bb3c4b923484a4922cdb87c032b16ba940885569e4a8a81fedf839f86e0d264e5c773b2530cfef13614de349779c08b9c18ca8e53348b62d9324c13e7222a99ef4b085cd8bb91d90b37e7bc6a5014a4906d7c3e5c59b56df9322a06434142bec6b066759658aa822c86bb5af"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1730655b946726d5db32d09c48c6b06937597b5766f4bea6d2a851faa90d83877887f3250ab9b8b4fef104a2fc0c22d603b28023087536c11da54fca390f4a3bd038e63ad1abf12c5bccf7f80519e941862dd673624ab04390a68fae6e1fc5874ca2dff234172cacf54c565fb999598b372523f4e3730acf43e3a747bc067215bb4f235133a7bc20a9dcf3916d619bfbf6abf0d565bb3e922fa93116725017bb7055e75b455de9b10f00716f448410f6ee84a5612d2646809050eb8b27bb8707b6026c168958b068c5406384e031768defd754d94bc497079982012edf7f966fa81a954e9c9be118001977773def1f29aed719e51e73fa618fb9d61fcbc4b34f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "264fa8d38bb793a078fe9d9f39a484a8d42f4aae23c9486e2d987c7fd18a3e38111c78d4e90a4b0152ef18bcddfc346b901e3029b11ad5c95f92f0c53b62cc7b1f8e489392b323b81f5502e69920e7bddcfd212e32233f569d42ac9c511779de6618ec5411a95475126455e9d3d83d35620eab93f18f7b9080be87298079c5aa2e31f612727d979c7571b7736a8cccf6f3f053cd9e25ec502c8d61ee4a2ac94a879452c4a9aa88c094f73dfe3dc31a5fa3d2802fe2400ee8885f5527100fc82222d4470c979eea045db6e068e9a1b09591754eade5dd48f401da26c44dcdc13ed482b2202b10212d99378cb0f848d19f67e3f3d5351c5698c72f38b2d7f71c0e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8908cf495fae96c593c04e0bc329ed29cb7fc151c8d66546057554b7f59e2da70b164dc6bc26aa19370903eaf5fb60a0c33ba9f8d39cc015a8a5e10e24d9d292227e1a52bd6640b8de82202c2effc973341e0dbf0bf7a47ffe500309699a9787fa74ced281ce129019df96930d66d1f95619abfd5127a85d9e0aa6757e7c8ea29fa339214074580b8181804bd224dd6d4be45c1681158ffac6ebf5399737b5538ead3fbbfa68b9407fe717d255c7e1f3cd02c6c2793095999d0e35493c67766ce320d4bc4c984bd4af0c1a6744357508c2bc23c2eac58b72a181963d7838e8f8d5f979ab3b9c505f177ac3350657cb84c52a4be3976141ca5727190a2f570c08"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9175f30fa7863284e06e3a81a23f56b639d0ae37a4f42779c71a6765e6a2e94aaf76fa32e7c29a8d936b9936bd02181c2de75a41a703e99d35ffd4dd3074803e77fddac42fb4ccdb5793b7e6a530297efc326559253d493a8677cebace5ce7b5f5b61c253b4512c3fd58ddc94a5e7c241bb4046ee1b3d955a80d02eacf0b231b3093cc17f18e84ad6d2631d225aff74f66f3e0afb1ed290e8ad10ba44ebb9e3ac198a17044c3abb4e41c4351a7d6d86847f654d3839870a78641aedcded01de60665d8edbbd9d7ff46953d2fcb6127c3e4864a7a64cd4872a2f7074e4ada781e25f18ab3b60d712775b45cac1230e403adcba7af3aad81e532490fda65c5f044"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "36f243ff8df76718fcb54fb3ee26a497df468d14cb2e9463797349c85de2fd05ccd1d3c8b969414add075a55c9c4eee7c1b046aa5a9b65c47db59c236ee44b165c38b224379d39b131b63b6df44d6119c947c01eaa14980df1a5e8d7d6e6c5e8306151b16dfd001773331a408b7442dd83a63adb705cdc171d4b43591817a7abec70ac6f85a73db930b651ade05c9d119b63937109ea17aaf72582427e174ce84a1b82b51cba8483d41d06dba51f0355db3e4f48aeeebc3df5942eaecac74ca56a588da107df4be3edd56c4510f12b85760da6676b778024fecaa217cd0f359834cf2fc94985136001d50cc7b38d6f7c7383d3ab58df97a464968aa651d6ddb0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7757a37d09443fcd3836e17cd254d3d03dc705d23f1d656112bf3aba485ee6220c7844912405d41978a94a2be8a16d8afb098b87f2b641e0f9a7d3845b02f10a7d63c2d871cd1d832679209e4a8c66095757b723557a7fcc9a7b6f6f9bc9a167364412905e38a843883fa7b9761e7fa664cd2bfb0a5f0043cf2a6eb7804ea07f79a6ca6633664b3813d8c6e95ab7f376182f315b7c6b043913e19759485d583fa92a4464d76140a9be4305fab54219dfe69590d6841f024bc29d48b39563b6053456dadcb8c7903c7bacbb3a80e3d0a8acfd222758b2647592ca4c4f2bb2a26a04ef15ed65e90c14272d15fb4e0464ed31e0a3203c6242c102f480aac6bcbc6a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b7e55659dcbd51e3c3de5eb5cc2c4224009489948385cdc8d5e564a49402ae38c1e51f2fa9affe9575b2f768e21565c39b5c0ad107cc1e5e466cc77328b8919321ffefe5431cafcac48bd7d45fb2830a548cb1424e3c94ffbd85e9bc4e6392f56c2b6931a301230b37135e93e460a30026da53bb55e3c6adb68800b694172174615bd2e749e8678023cd7c07fa3021e3bbf75a7ce81ba849efecc3a7d8a0af088a5c437b114bf45be2d10d2280da8a6208049143620134c76933278d54c236065b795b005ffd7be8dcdbbbc7ad822f3ce7a0426dc4eb0194768470b0e7317466899f60c40ee3d49d7902b9c355f6cad7dc26386227c1fe8a264d3b7c0b830e8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e856814cca0d9c39a2ad4efe2b425ca0ddf90634278255edb4b7f643a868ea468f8d1afeb72b1bb60455139f44c046ecc121354f1a9507accf5865aa1268448935790cd1b02604cd800f6f2f0aee5adda9bddb6b5b32e0504e2fe2012896ff9b8f670364ffe6e563e1a9a19b491ba3414f779863bc8bf411ee0e8a0e6ddf1b4d4a70bdf6a9a743818be75628773558bad898e4842fa9727770a15a6aabde3b503709d1e9f602f6fb23115aa46706cc78e48bfe57cc1fc4409c4f1b5f440a3281f955b73eaa662adb9fffaa40b4a8495659625c6b7b51218df928d51cd66f59c25d7b94b798c9fb6e97b43ade5f4d17f59111deeb03d442edfd144f26d3df606"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7dab5f7f0430ba2ed6dc53d9db80579ad10343b72a9d8a37ce0bb38403224a4abab252c3a0b5a950170d2f663ff4a8d03217e289d715b27c069432c5fc9591972f1b4ac468ab8e933c1fd4831978c0381ff9b8ec85baaed76d1351a8abc38a53329e9c8bb3c1f77a8bd15c29e509b198d46bb28c8d98f03c01f9ced381d24ed9d28ffd1d2eab5416ed5754ccbfc1214b5ebc3339f5a6d667581fee46d60eaec42074de8200d71e1773a9c83061f2ba4b9a2475f552f9ba99fec5028a020f4ac2208196f55c9fa8901c31ac31fbf671be577c9cf64f7fbf3ef7ed60132f2a204f6589d23bbcac7a87dcd46607871988b5f9afa5299f35562d58e93478f1d973ab"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b677618a244ccf2d2b9ad60413580b07be0460cbcb449e663f1d3504772c369684eb6fa5a3a18e2bde19f8f2584a3a3204bc9026c492137738058ae433d68836889e72aecdbe0385c9fd56c4df102d979f7ed6b59c1be1627575be24401bbaa88ec2346f6633e8b01afff790a4ec4bc1900214d8b9d34f29e0a548e3acef57c197425afac9e4dc2b9d8b9da30e771e34740e5780a52d028ff2016399f78a802f032b92e9f1c4c9b9d8ba9be494f8e652c43cc0a0b4952b5d03795359a130e4cbb0708dde79db136f256f1dd885f340e7a870fb4c3e8efe2bd20deb63fc63a01a8e1161eee493e4bda9879c814d9f16123071dce45209341c54476539a9b1a2f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2a69e572a00d5d2fab1f91c04c151ab21e1cda5a7675b9e6f67277b120781494f5ace1ad3cdf78e6b6022eece7db55301f5749966c89df5dbf2852bdb182a75baa295697fb1e78122400d013e579cecf3789396102aa494623b5a4145c9bba954e80473fe613513cb9fcaa6792ba67660a9a754d6ed6e3568079a7966396794c1ab9016cf980dd3963179c8f3f0c010f3f136c4b611170fc11c133836cce42fd43952c00d3a7dd868b1715da5ef403e93a64673b15ed114e671caac4109bd2392b43062434c19a68dfbb71938aa8d45b96711950380de2a1c259d770cc5e98ae79fab1a7fda2f53e3098aba41b6fc486b521eb330bb226d0f95fd14aa83e2b14"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "36536ad1227a5d13acae18d8233a00d21e8064b14964a6d0fdb43ce46a76b9ee1749d77d82227d5bbb031ecbcb2030586360460ce3bf14c7a4d1a0202be3a46913913498b3390cdf96ee89914e7e78548f902a175a7f5f35b48838add2418b25cb7f919c1a0ca558f9ba77dfb6e4df85432071ba78fb6fd0edcd343f8c735f061ca9033e5b3441756188ed588564902602e18745a5ce8b57e3af413173801ddf0cc914d1b4d29e3377110a7b844be6c19773f9db22d5b266b12e8e3d4833b721b1497fe7194c0fb4e3d83ea9193e0a12053680a1396ca5fbf69a717758c5bff5b794ea18e56c0e82af3a1b97f6420f4d268f298f75d7c3a7b820d5557b44d035"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "325957b2999e0ee32b5ef7302fde0299c7c3647ee225d51ff330f7cc67b6b406cc4dbfd6a33ab2c831c78fc01685c4c3bea94f2194cdde48b6ed1e87f5984de990b5a8525470dd23153e329660bf31e433159addf094b6edac8f118d9fe59c34b83db1dfd26df7154d13e874830e42cad61cb3186fa80b54b7d7ec9da3274d2544dfb42bd8f29a3bcf976752589ece5b731f63f3b072b7bf95b930fef428c121560e1daae7d8636a5f40312786dadb81c07577d4a04ac94dbaf9b161a7f8987fae51077a7caa74da3c84e46c3e1000f2590ac2b0c04d17a7a3cbddd639e762e80d30608289bc6b7211d69af76602d2ef33c5750cb3c183c11450a3423d6dcf4a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5da303d9c88ba80e7df9c1bb650e8317c601676af8fbadd86550d15da9aa9f3d465d2719096e738e922b8bbd1b2e032f7cdebb111266814641fc45857af8b10ebf328c9a434170101a04be7cb2559394debb8a5efac20c6ed858b13d185536270f056913790a4cd269c424075183620c6a312aca860f7d3d694bf5e969fd0fb9333f7e42e8955ace71d957f8eb9fe1965117684c2e73eb2dbdd97c1b2f7802dc68fb9824254b128055932399c796dd3ab14d62b917b7520760e678f7c5eafd82f6510906d959faad867c92a5bd8bbe8c1e64a34025621b20dfa166e37251bda6e76c296dc823acd8ddc73aaa29a5572fac2344f8d213c21e5fcfa1e50b8b2eba"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73ae94e6749a14bf9e157305231ca7941d8cc42892410520060f916e1de657e11b50e42a4766c5e7b55494c605ad3324e78d80f8c4b31b1055a599a3b31843c900980ce057cb8bcf09906c8832a97536fba159723e7ef271a8017545bea5bc0f3cfe19f967f9ecfe0bc9f786daf5367be00456f97d4f3b69d932fc5d119779de21f7a4e0a9e80b65bbee18494c4c48c4be3a62a19b483bd56d194ff1c88cf146c2eac3fa2a05afaf3a813d5efe29342f6b0fba81c1241d565306d0936699dd20248689c5b6b4ec2f31a12c0d5909013ed97799c47ef089b9d98ee7e79c8d89d7a27563c529917977ff12a0753bdf8b4f62b660d33f7f6da7860ed4b021f51d01"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "468c5f910fbcd2e2e412de22199a9ec2e46d084e2450e3752e58170fc7a7cd9870c24859ca131b967e0a734d555a78795ada986a1b13b81ac3bc5b7e858fb3075708d2cb03e4cada94455970fa7d849479ec8e5484270196147ac77c20c0a14628b8d3a69388973e17d571005ae218fef67c70f62436ba32e5a53566ff6310944417c7dd0f7e1e5aafbbb9d4d0853d84624f9d6e3c8078c17c34aa16f0bc8971580f456c2dc49f13af44cad2e3dd7120b70d3bd2c0a0957d5a739a95932b24ffc564bb94d748242cb95875814fbedf58e8c036a516b540ab62a7afdd6e3f304242173fc69ceeb95871bdcd530d53b7145459ccf41afe2c8ca9ccbffa28d405e0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e7e0c0d929bc15ef8ad6b64f9dfac6a7f0b55942eca76df1ada99e443fc3925a5dd9e2b25befc7a9e1c09c9d9c19a3bb842c0f35e8ecd4229807012de47130335175d6f558b79aae6fd7bf2bee86ea2902fcd9067927f485b007723af826511d1a01042ed6a7a2b2c558c929a580cabbd83c5676e1af860c596ef784b043d5c5ed963c859761499111337cfcf9d4cdf8a305d6da83ac6239a4b2c16281d1f4f30a06310bf4237ba6594b93de279e8fda3406bd5c7be52a0d3cb2c7362a6ba028e74572c8f21e3ebb608ce284b4b378b211ccc8f42471ee86923f57fd7c2b8926c9fe0a915e160171cd595b37924ebda6ee187f4a5e7e4a63161e246f27eb829"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92617dc932c110bf61e88895560638df4f8d05172f435af4457231ad08a5650f1f505604029f423028247d4231c86af51db339c180177bade39076dc67f9691fb7234d9b8c097e650ab3f2822414757f3633a047c5d5082eb469c35757678be46db32c4cb628f30121fd8f5894eeef27707c8689ada5fab7ab0c2e2290a76a1327828f41869eec62c2c03ff50d95a678bd95bbf56f533eabc5474df2f23ce2f8c0bb71b8bd79e2dcc28a682ea34eb20e670018becd44200115ae5116664cdd0429fe227fd0d599b60c6bd3911082a7428ae1f57bcff5b9377fb30994129e2bec9429d6e613c1b527e9f51c6e9921f59be1763dcc210cb2e4ce86297b774b1a0f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "144d33ca3e767af7d1cf7de00481c6dd6541189cd4899cbbe3125463469e8d317018d0feeb5f3c875a4b7217bf1128f448068af845886de43a4bf4bfccbe7f4d02ec30569760119ea1446ad2937a0ce28ebe3cf65b8212cfac09d19988c3ebceac6ee62d7ed3d716e12517f2c9aee98561ccdc8e7430c6f9f48e13e1061e18c02d037d22fd4b40ca203b7eecea229d155182fa8c4d70905ef9b42885fae0b99bdb945283be021a521a57de94958785bb9fd8b9ff5f7a334a0062892ec1967db6db2f9d9af726432162857996faa863ead0f7ed761643961e80192b72c7bc2210d80600bdc5d9d766fd4c1e82053f42c54e79f2605705181a4d7039377dc36c02"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8cac0ec2416e1ffcb37acb5b86227e5a6b88b7e4f50981aa54a1ead401e9b968f68b1e0278e55300070f3f05963cd74124ed58fa3969c41c5106a145490174001338c504fc01d2574384223eca0a755142697631e59556669e686b6ac89561c283c855e6ac27e4c9e4c6989c97d86f7f9ce042a65f20ea442bff4f6e3025854a2db562f4a25e2e9d0cbbdca056c09bbf2308c3d34a0c0e39b932cb6c6ffa47f471f6276439b320044c8d9d00dffd9f01442326a209fc01cf034ab84b0d9fa8f63c2c342deaa9baf32b904b66451590febe4c1821fd6b6e88a5c1307b053cd0fe9040abc3257766a82e4d9c6f9a059fbb41bb7116bb6d71e6fa778085930895bc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8cf2a2d4f7e3bce319cbf1f2611c9209edb696e61ba984512067db8a91e7faf6bd1bc399cfc9e7e744662d07437f677b1fd04fab3de3f9c89499d4a15a90c194048b7723ff22572acf54187852381c3453ae11da318b92513d3544e671f742bbc3bd69c8552f1d4c58b43a6f7e6bfcc9eaf78f9b94cf59b7be21ceb2de33e50e50fb8a4592441e0919c621477a49f87d5190fcefcf4164ff7d2d5803f03a8dbdbe74258342e50c33fe307294ca1ee3b2dc6f400a12cba00002871bbd852e105b350dc11e4b551182ecf2088cc46af1a899e606bef793897f538792a09901150cf40efdae87e838d6c2a5ac84771599daa0e5ed9db1cd35468ab3b5e2c12a6d1d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2dd458297ce1a8845a767f0a1e40bc30d3b9b54b4a82f6240a3b993cde0f70695435de7973ab17352699e8e383391f17f35caff60e64587e2714fc6807b00e98344acb71195e20673d7ae0360e2aeb66a5831e1165432534f873c0f625eb3aba9307ecfb7a460ba4e28610a7242cf0f76a73e33d6b15c489e2755f91cc4dc47acd6e9261a2e34641fafe52da98a10e4a8306c843ccc8f1bc3c98f1b4d7e3ebde5607243e4a4bc442f87d2a2d09a83c9acad25e558dbb72277512b284a0f93be155172b9f8463e27a701b3616c3021801f893b72abf7919f9963a20d151a5a8d0bf2dbe528d199084a2d7d4f3d1c0ed5893117620cc6800ad3d7d246ca074c54b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "09b1fcf9a76a1cc0819fbfcc70d54d52ec5c5007c13581415b742cfed2185c2a26784aa85a208dd4ed140654df11436c5487c170bb213e9898650019848b26413f8dd6f0aae6edb41ac017c079b63de311fab7dcce522b9361feeb941e9371bc20936689d0a7e464c869ff8db1f85890d604e814a3fa9c39d101bf7a4b40ae89e122d314462606f8a5e5039f86bbd3da35f8d213b64fa82aff067817936da0c009d9f724abb2060588f8ce3bdc13ac587d51a197acff533d0e4e03083589d1d7363827c34f2616162b085715417d3b8cb1782c04cd0a37dc91780dbfb5218d674a2d2c1096c2f05b28aaa575b60e38123a8ed8d343ef95f777081eee898ea455"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "889bcf54a28525d32db03e8452c6e0f0aef9941716dbff0497014ea9b0b181be70d319574c24fbbd752dbb9ffce4b198ab43b950b05c2a1288542b6052c557c87450168e4cdd399ed8d9b7aa7c841a39b28c7bef5bab0f1716e8e9de9a15c1132bc12cfbb77f237409608fb8baaa2e851742655e272e03f28866723b202d639f28e29372f18579c4482570b3816e037f8f256d7a95116988b676e0599885cea80d3c24b6984ec8080a80af020e7d5631ce8646c9d270d4a521122c009ff626d2c428b1b8334569a7e79aa64a5dcecc7c7e4881746bc3754a87fe51018cb401bdcd6982c4fb4b3782008b951847d64d3eafe4e974bf61d215e63b750313163c47"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "14dbd0f32a7fd64ca18913ef840e113d7bdaf22aea671414c9c44de02218b474d6d4867a9a4b6144bc6274deae6f615ddfc54a9e74b4c657187c818781e399798db8e62987a128105086fbcff4d5a06bb43823b1f754e485dc24d9f952d1d4ede9504c92a2511cf51e68eb67db959152ba1700af0e0aed533246d7ce9e0c012eda62d66ab5be82b0ee5fe4863d3c16b59ed6d463c382b25a9c8ace7dbb26b125afaf44bf93edf6a63942b38f40deef43ae354934056917c9af6655872b010b0840403c1cd5c053355fabaa23ba39dd381f4867a2264c476ba67d46767c546ed3ea59488c5500c79cf5e0670ce744c2603e01e7c53f452c22ba15a8c5930c61e1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4bad954b43b0fb966ac33ed7c8ccf2fa8246279677172b39854268b3c2a3fa670840aab9e0f53a754bbd105f2e52a29b132991ed814cfee0a102e293451420deac214bdb5a574f9cb4b3661b10f6804f5c27d1239556413db01cf123132882972d04b9a0b8d046b8993eedae811f67d9acb9e28b3ab4b6c4d0e42f85879623f1901ac082c93ef0fbc12f3ffcaf252c8953bbf8abd6fc01b2f272e27448f4f77fb369f2c5215c7eb68b2fcfe2e584fea33e505e22a2aad0844d1c8689160a19ef377e7513e96dfd4efb1aaf180b8d5dd8e6168cea4b34156f2ee20a97deea0fda18c6438485fdca6c705806d7d48ff93f3b8dcb847eacd2235ce1db391bab325b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43058ff1d0e41ca8034e843d17284e41a93df84ec80c927a2443e954025f74630f118b683d6fc4e3c6b7ee4538cc6b4bbe3505f70ae40a336948f7da8d83b1d7fd4ae3541b885537e92e86570c2b7f622d2c4f63b0e0380e3d13be8ac930d06ac9cb1f3d33882cc235f93702a4118038a343b6da20914c40e52a2842009bf9c8312090bc2abbc4e48541a6b2dffbed3c1d51e989479d017c60e6cd2d76ec292e75ba550c1c195c6ce06c017e5349e10a90adecbcc43f71f3d24493796d464dc89737264dc102d1fdb9fa1262ca696528d87dbf45996b7087e755ee07075c8fbcb2036050c8946866bd972b0fa59a2995fce09e12250341a2e43d5e2c8df8c2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6afc343f91b6e24958dd3da7ed8261a127ca3a5641d38f17ef5da8bde5581d87cbea823241b0c7990c31972e53288cb253fa1477405b020de6dad1f0d48b30ef11547a84f2edad859f6f9f11c1cf3a22033050d04ae41b19c43d6a6c079e46df4c38ddfa7c0482a47b5aa00ba4b244d423328c09fa1589d412775f260e55a8d10b9930ec6988ffc138ede59c32e995bcd85ea83d935eec5c870b49b88b0a7826683f614812449a00a9a67e11cf55f5d16f9763934d20c7a206b0cc86227d33498f492ddb98db5fe7312e25654309f848b271563c5c75d246ffa0ab2aa04ce3573468902212e938b8b6927b5baf3620f75c20e3b5d878707837110027c6165c24"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "539a9b1ffcb0880d93d7676fbfad02b11efbd713f273caa558755cedbfc0bc838d10823ce56c2d506c7979d96433d6777fbb749c52ba263c77d4e33790f78bc54d696e1124650681d260af084be5ff47ce9a69eee44d54ea31b9e401b7f558413d66790bb69e938f45e545318c8b7886cf8c0a3c84c331f4c334ea59ce3076fd163ee17c6786e7908c3356f1c81916f7ba36d65fd31c9350dcabf3623b6f2bc3fe5c247a32c8313da0e67e8375f8163f63e84feac04dce2ce2950a56b6fe285ed06039df5b9329677b2619639af36137bfbb75ef07cd3ba5db5104aa015b0da57f70f773edc6bf01d5c68390073749bf253ef999d7d1dd964fac0cd3e39526de"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "757a75f982883fd9dbefaf8ad051ab35c965607fcd55f656dae97ce949a17b5829efb8cc34179242c2d442000da7ee7bdda0a5c114a86c7d0f8ad79bfa76c4774edbcb79827029179c9b7cd7925de898d09fae39516ea1da61aeba1f31f53380ab9edd6cc7170cf70a35b169cc9390b20823ef0d5e7e3a078b31f877a1f6f9c447dd979915b0716fed43236ade3086cc794e8bd210140f0c65c79d2e57f387f22e2d7dc12454f9ea384b928779fac27bb2e614e947e3307cfaf0f0899dc320d4e5bf47b9e92cc3649e35854d709df56f55dbabeb61bb5dd0e77fa8c499eb9654c277b34218b7c0a92088a0909da3070f5c2736c8edf91fa7ef038e091629aa7c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0d146c7968ef5f1e85feddf8d27847de4b28e5ebab16f8af3b6b6e58396aaca752052764b8db3b1140a0a0cbf529dee7f1cde601bd42ab916e0f183b0d37c843a7568d24b07d7e1f26ad7ab6a96129f447ccb28849f83b92cf9d002a93b904e63c80d8e58a57fe586736d129663ffc6c6fcf58cc6de1955fc7bca9ef16aa6789d61016212307ea1e059c43c5350e485cf6158a25cd1e8f726a1473a4f598cd53bd7b6862735ad8e66491e6ddd0ead13bce9c14fae69dee16ff6dde8f0fc33e85684e3745cfb3cae708dc8b599142821c49e5d5d93e26e251924da8d711a731ab9caeebeee7d764b87d633374125dc14d8f8b944f2cea2450d89bab9ea1ec7370"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2fb7010afce511f6c6563db8fe3e623313fa82e37f81a1da359f9cd27ca423788cb0c65a6ae7c01ca82410929fe57ccb8f4f3158a3d9016712876f7accd970d30dbf6bd90c1b0393f11279b3febe760ad1786d593a8e0a3944b4cc7c5e8ca41ed5e698ba367975b2ab7c7c0a6be919f36ed1771b1648f22ad899af51ea469b1ee47206e8174fa148a9670a4e45a3d36fcdb948ee994888f07252a37d636ce541c70da9d6c0f3ae2a860bd660ce553d5e94b1bf2687e036e77da61586b18189558906cf12a63c2850e28cb595c46a85a59d84be6c28151f81b10ef8ddaf6297e5ccb5c009bd0d51463fb48dbe48e9dbcf7b325dfa258322cf6acf30ab8d566874"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f52510fde9cc0425aa29ab11dd95bb0063c94b9e835dc4ad839b409e1cd8994c87ef018e0dbc1571d3e3e321d35d88e2694bbdb9422c31cd64331945a8f6133fb8079dd5cd8a55ca761a88f280725f6e13c178ea94bd7b7395b4327d572e2615cc60366acffff56d3f555397b2cc348844c42dce283c948c28fc8d077d07c390b8c78193dae608056c93950cee202d68f02b3d8fd58026a690cbd8a95f4d1f1fd15a19e119b3340d02710faaf1ddb66af60fdd5dbe8f0cac69a370cea0a4297a8a2ba728141886f6aea3aaa113a42b6f9acb2fbdc9f7a0eb295066a1862b75acbeee9eefa0adf208867cbf173aebcd4a9151a657a041577cc4265c0c1ff9e47"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78695d7dc94b3ad16254631482570bc97bbe1e5601c5d437660c9ffbf3d7864321e0a5fa4ea6136084ea004e71bd0ce76432f9b68e3c5e8995bc6e33bde9a93bdabdc6bfe5f8ffa30f22d4a13d453e26f975a7ef6fa21acf7903818df3a008b818e829d00e93f0fbde717f7c9de12e65581cd430993ac5d8ac840d5ab0dfed1834913c66e2689364e30f595c673a3c6c8191e80118e8cb2b36b1b613cbdb40d89444694b2609694ad877df3e42173b8f07f8d0089c34d8d6a539ae508105ee91a3d0cef2208ca74c57b57ac193412a713ad9ddfd10f63a6a9adcafb8c3eaffab0d0aa38fae362de560665022ac755fcea073aa905be19177debd5b00e9434f20"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "320d404e25a77d4ed6108433e85c9e8212b3614796c96105421acce95b48abd9683e00fbd57333b4483cda1d69d77189e7ca795ddf23355d0a40b67f9c97bf5843487b7550fc0d3577ba3a0cf7c7e083d18902fb4bb231c6ddb7942f512896af12d344a35cc6f1d3a6ceca567a15484ef95580b831e0c4d62bed425deff9175b68da5b6cf8daedcccaad83110b42ad03c5e8d4bceeb8e1ce2a9b15c2a61f0ec65248698b691a86d61eb593a359366254b8259b396f5ca3aaff4d0d3d1341afc019e6f7a2d43fff46a48aab2f33721d906299305dd97a9aca7aefa772f153371831653b607725fbe60c952bb04f3b02194fd0f0790b6560ee5a8f55ad1e8779b7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3501fae15b0d575cbae58228a1debcbb44575dbfe77fe1aa9dbb45ffeb821031933ca8f2b0e38900b84c86b4825bd587b28b94f27cf83cc8f36ce1e4f565124b2fc3426de04b3951800e54276ec31534a987536ef0e3d081dded8252bec64b432958df9ae045b29c1a85b9d4207fe4941356149dd0ced33fc5de142458a856151fc246c6626e9f1e00c326a00959f9080f5dbdb7e82fa79e100b03b6fe42e2d5c03cbb07b8d0ef8db22d323d9e8acdfc1dc30c765f7db9c9a14d9f41c451c3e037db9468148d8564b63fab33d5637183db20d27cb6a231491d6ac08d70d9a82e6e8ab04da8bc60659a3f9e31f793c2f0f090b6811f1dd634da057b3c4aea5e84"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "989c7cce6a8018a5a2b05310bccc3dc0aa8f58fb3752111eaac000a2daed122d44293203ea9eea41eab79d0cae1bfb526a131e8a8bd021e5b98907de2b066a33165c30c7705c7cc684c21fac98d03e3c5e9dffb78d87fd57018cbca50e4cf1bd44e1799c03b0b44bb7a9971c314f2fcb1345269d27dc0375ef89d1062f1ab8220fe57ccf46a04e32b815f2c10a4045fd3b814113c679106f70d9ba9c746be24354e99b54e3dc1aafe2e9d83a668aa440194be87e914eb986c3d21447516efa0051f6a30d89acf520d697776b9b854d49230c6a221c5f67b3d66793b97741200b9f73d9ea7558df17e44de5480d99a4399e72a380c30b314d8b504fe160427df5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "98ebc21ca822ccf9c7e82166aef286277d2335a8f68d48c1f4cee180bd6003a89e6137885113c2af09e805020ef5c0e13f913d6add5316396654325d04b40c268c3eaf3a0cfcbc5963e5d7e14e8bbe95a8b15f9dc0244b202537cbc561c91e22e933f4ffc96499e6a3b0b33a33d9329f8178f35f5b1a15940f34ff47aa1a6381d8216343cd40a02b4472b5a4ab2f3116803740b947258ec85e3404c375d97ce73e00f9fbace9a53844b8ae669b9743e8f7bf59b3623c0fa1d7c60fbeabe35ad5796a9d8a6d32eaba6c045a6aa2530b6cf1cc045326db85b4f2f567a8a38f58c8d978f3f2fff2098eb6dae5ad4bde60d9d3913eb23f378ce41ba198ac273778fd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94ed6235a870a8ac919051f7204f809e6bc1da3c22eaf7df3f238f7b183a7fac66adc90b51688e3e00764a45990845d542b04181d618c383f632a5f5193e77b48e423c0db3e266c5b87b7f38d95cdeacdaeb29e419619ccea4899cc2d1489e10034560aa52f6b17ff5f650659ccbd403c6e89b2812211894fba188748786b2babaf913a03c432f22da99c44cad95272e6cc16dbc44ac6d0a9afe23946d93299ca8840108dfdf25cb25846a8fa9234bbd92ab5712ae6d7f7f162fc76baabf30e0efeb42cf0a68d8c02dd45a7f4fbbee275dc14a96b6d010823d604f46e09dd1b99939a625f9a419be178bf6244929897d1387928e5013a0c76db37e7c048f60bb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "12c8a3d061fad3c4cc7b6cacb83a8abcee495ff2255464495c9d6a600c6e64a57fa9dcb18cd648ef5133dcab0f1a9c57361e4b2b9b0b996a673615f292601fea09dad776659b014dcf62c35ac063dcfb7186fadcae0b506e7b95c2b8794d771856d0ecf907025675d980746c5dbeeb71482ba4141e50f67dbea79f78b40875a98ec80fe1d7fe2eba043a966543a79317c28a824c3c6b382c0c57068a3036687fa53149788990dacd547723b3f0051f57829b10aa97a15cb4f9fce9617158e77a8399a22629e9d4a708114a1497d0465e3b5a4e1bbbd0096dafdba7b12cb10dbaa54834025043055e5fc6cec45c6ce9c0946e055ef77ed49522892a267ea2c123"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "789094730a65d2a48085a67c9018839b2187bde7a2898c13b17fe25e509a437c152f9376ad710423e8a08e6c98fc43f9039b630e77cee3629791bfeefe37eb168a46053c80805221fec513e796db2d58f119ab33b6d0a1a62e1fe2824f2d5145de791d651ce86ea84c8740ed423938339d786964139b6e62680c991ab404cfeb166069d8c27a560780722d8b6b9299086904308458b47b9d85ea48fa78f861b396c630b3bdc1111edff7441b37afd526a4066e0a130b0953d51e5c3812dbb054f188440e5d0cc8e134a17e770d5a93d8b1cb500c72ef1f49b7e760828f92ad65050ebe4131ef295c7f8afe19a0d0c5be318353641d02262d557cead9a6052f6f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8b2e3c17fe8adaa8e7c8eaa0e3d98369131c8e9b76f36bc97fc95888c4a0f6ae4bb85fdb2435bc85d6763dd07dd923e29a8eb046512279ff6947b12bb2e2a6b6a3ccd64c7de88ef6b53676b25472997163fd7da09815af219120d6cf58f3a0fb3f408ebedf235e5e0d7bf6231cd87d95cd26c2ed506a0749abf45884c22d795bbee01b01884eedccdc7ec04d6394e4200233b8da3dbf148555e4168123749267f0ace21e1b468ab0d4f99a59ad10bd3bb35f517836d0034e53efa6f4a042434a69d6987b59110cfc99267835d7ebd2ddd0a621116e0fbfeb1b60ae85b9e80bdcc52fa3341f82da73bbb841a0e665b084c6cafaef5bef5de609f4f94005488f68"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4706e77141ec16f6936a2bfc200f9c5ec3e147be7e2e6b71790750ec513ca2ff2ac2a84b76fb96ad5f9af0c766af1b7fe8927af940c2487631fef6f7fdbed533df4f5da4f1aeb89c8f8a34c3a6ed7e5e10e28fa1c64f33985ada66a92e9c3b8b5f5366f075b2e9ecc0a41a061712ccbaf2add75254f62e1b66a820924b18239559791dab3dad8f60500fbaa3d76dc754df7a848912aca54e6cf627c5e9f9db9bb22c2cd3ce0fa13838125d88e80b3ae6baf8b65f0530885d307d47f1e3eb4bf6126dd631a4b6de235ab136886ef70d2f483cfc962cdb52e291ca899d108b9980b91eb47087b3132d154c317622077a28a904de3daf415a5634d79625f926fee6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78e59ab23d412938f10996b4332f5a412d85b8bb8b3d55c9d017337357823b3cc83d2d1f2b9fe0025fd3f898d2661ac2e7d7a834465f096a0d29315fce69ecd15241750df027eb082d799e4d56497bff65a115e69c2cc57cf1b5e1c62edb25d8646fcc89a74082b9ba36c6aa92ddbccae8858ecc06391f6b39ff5a740be97f012b39f2d48134701cf27b5172297d217e8eb679732253591f45bdf97957f29b596f27ec29f7c471a966818c50296ced411e5010fe6da1c26b9e3489316cb16e55f8b65fc5a1b1bad4077dc34c7c9730402205f12e4e61983e6f5ad163324345a59381fbc3cadcb460aebfedf15323cf1be78c45198afcc803719bf13e42ac560a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "46412b003a67d7cac1dc7992d31259013069a1aad4292368ebe0e597f41883e8291aaea88c2a8115b47fb87265ebb9eba6fe9006bc1e34795a1c2bd8a39c46a28ad075d5cad833beddcb116221411efcb8e86863063b5f6b5885082c8fdb6501e708d734df29c87a723e103b3cb487138cccae90c7431a16189ea8971ae152cca07678491c5b3b68d88c4de18ad771fc252a9bef889b963b353621a0d52ddcd043ebccd4bdcfc5fd4f878aa2fecedb11236de9f44cae8559668f9d035f7adf90e03a707d5e0f97ae84c2da6866f85d49a8dd09106616519df0f5d94a59b1199ab50884cf6d912a061c7488fb5491df32c58d1af741a164a21c5a271feab9a2d5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "951b3c537c26d27fe06f602bd224906b1c1d26e41d22c7a22479f11f913978c9a0f7791eac42601122e6a812730cfccd410aec252b203cb0020d3998fd6bd469e335cd664230fb6dd59e0c141dbca861346ff2af394d86b8fdd2e6d5f0cb3d942c3393d917d62cd0148ba82666adfe4c1d999e1a254cc466ce268cc0f14d352e7b0bea8548a5b6fd3745a81f15a72b00d278f881a55677fe37044394ea83630dc15f794b4f6192b7546e841fae0cdf9c00cd3a455596fe9c5fa37d3f3973c58f189db8d39e8ae149f57bdc0b16f9853b798c87e08ae5ca75e89d4b4f3baf87c8c0b699e8c216509e51ea60b52d569491b186abd2365ef5cab983f71abb233b67"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4b75061a5487fe328a32c9f454bcd7e40f234cb1acf55f7d3bb8a50ee75edb8b4ad16c46b8da533792983de2dc2d6371d7eb08762e2bcefc45467c82130d483819ba06735985b26a19c391f94f854e31e56cc09ca20d542e62e4474d40d5000910a9a24b1443c66451878656d3a5f00a19f476f1c9be86379036555de05b3198f749e40c51e87772a5ecc59abaa9e9a8d0a1681a3964c9f022215a71be814c8859a63b2a62caca2b6e98f5b10a872bab1ee1c00bf0d640926b867a87640f64402596df229d7bdb74f1e39973aeaea0661787a3878b7fec9d31274e227b59d14b1ce2f707da4521e430f17d09fd6e3d61c97d08bea35631611737780f2ac40bbc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "490cbd8f51a6f8aa64af8eae7f76ba045aefefa5bd072a3de5590d7ed120f21aa4f91decd13ae7e9f414bada7916ce26854cb8cb0dc63731c58c94a9a9e621163546f19152c6666648ba9291f5e477ee86ee735cf326958afc468ef7dd9a5b2131505c7fffd17dbb7b35b14cb81058d533c7e9f6ede933825dfa689457af1e1b6ded479e1508f167199be1d8c640d7373283b3fc76d7c3c1354ba725eeab08a24b5529553dd38cef48b9d45f2b90f9aba0663839de4de17e2a838e243b898cf040cf6053a3be2a4bb346b1199a93bb8295c9c4e1ed40d0a5d5628a1be1ba21f45c1c28b936452c3e163810f0a20fa717dd484e46ef92477853592ed3fbe71da5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f23aa1e2965383e38563ab246870c43817dbfef46b008de4b1744e3610b1adfb89c96ca9a9e575edb97c471861bf613cc67428234dca7bd72c422f0c75877da341bae476ff43487b087f1bec13d31fb777e94bff6830527bde2bbe83578ae2173fed5a03f142c2a41b8ee8873492c21b623cb8143134f9de25872b39644fafdb1fc96ac072935efcbdcd0fa5a97cf036248388946223399053770197b886b39673a438f67b0ea789b9d206257f9a3be5a13017cba89d28ea493ffbfe596f9f5d040ac3098a9d968198e3d004d79d6d704aa42801ad6de597cedb3676125e9a23f971083b2bff18e42aabeba6ec760ae8b8c19fbffd18947061d44060f754600"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "13db6c6f0fae5be1caaec197b79dcf6784582e508c7e0ed3e56c2674e8a74c0b542beab6b7dffb0773a87f00e4648332d4e9771ba85df0ac1f9ca2874dd7792480799209155773e39f1bdfaa561b2d8133f67d47c96275e6b1098d1b56a8b8ab5525c14555f4c9b1f241be6dba874e5d794d0fecbbd82a624b7d31b12bd60ce27451125594c744f7f32029c6c7cd0663627b99f7c5636a836e115d0c55a44f62775eb19444020506b6988e11b2726b2330471536066e1f0d194ff9e6e457442b9154261eae83a178ee2f1eed06ef36e417a04cd007060ab83c53e28056fcf49a26e022ec2baf2badba859490243a0d71e5de61c75d259b53cd3baf7675a1db0c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6a0b7c4e2b7efa7002c444307bd3848306d2ffc70c8e767a9d5b17dfb3df076c06ac0374a1c23a011d466c095184616abc028b74bc58b91df76aaecf8070d509d7c7b9f6403bbac80040ae854d139af21bf7a0909cd8e059b5a9b444b11fea701bb1e052d77c7863b557647c7d468fd8ac2f6540eaf18896284f56ee01aa66ad89fda43cb38cdf1ba553e63d4301869bf9ddf076cbf68fde5706787470cbfe78174a516c53ffb6d5d1a91ed78b4e297971f30afbb5bdd02dfbd1097128837541e2974be63541f8df256c8a77a3800fc340093355b5690326242b0d90b3dfe63160382fb3bbbdf9bcbd5b0309ca9d748a343f4a5f8a54b3a2736199e27386a4fe"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4f611ad1c6ae7158bfdc5ade114098ab879a79e7c70184884f97dd875bbd6b1b869bfcd82ae7f3ee6fe88de98d813103df76f4001fd430de68b0e18c5bf4c8e0805f46d1f98e44112cce945943f682e1af1444e20a4f5e5ce05f12c00e4af3d871730d5e18609a7abe3b7142fc2042077d03e6184ce935e668570271ceaea52c36e553fe791bdca3d966c31299138a2690a671a76dda745cf2aac5e5153a06d89aa4396aca684938c0ad142d5e75e6615364c921c8d18d2841e9a4722fa1ef136adb3aec7be74a018ebd97d48f62358623a7c8d13a76fecfb0ef73c9477aa59ba225416582faad0d7d466d6de53749c3b51f1c55c92fa9a2a08b83b6dd42848c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5ca68695f420c181c082921645f30d562c1e004bb469277664fa7fe20eb317faf0664d266c3d5cc76aaf90ac74c6a4650ba2fe6e143809c4629c33f0a267015f16f82cb1243f786cbab518ef8a1dbb3abc4e58b1c85f4d04dfe795696927cc20bc26d9889a2fdc74634cc0e697426388609e30b6195da66e114fb2505ecd15ab8c5982769e7675cf76181a0e791e0e211367d736d6dbd90bf27eb7985fb3b33ced721c46c2a25b4dc849f0946de01b94b463be005fede931fb41a3231403c800db10c7783d442cba0b58dae9cdd02d4ec144513ce74732936b31be61e11715d91bde3998399bafb18b690e5972fd0d579470a98391c475f91f5f90fcb9d41ccc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9b35b207ca21297aac4b6b7d64614d610e43af5d21cf3c024aebdda0947fab0be7c397491eeef644cc31c73b7a51bdec1dfa4b6c34f831ce7044a1ba0ab50882886393c5b714fd3efc762d6d1c9cd51b8972171d998ab884658a8887607ac9b57f730238849806920f2a5da51f1b4247ad8ccb4f6cfd44ce76b9a8ebc57a3593574f8640d553c74a3fb4d36fab9d6cff6241f6d9c48488799b384fe3d8a3b88ec0aca5f8978b2194e7d9ea6d6a0cfd5b4601bedc90cb63b4ce02e03b736bd5249fef55a5259d0001d4a78ec392e3889a6863fc0c9acf9cc2761739e75ba7f940e424992aa9e63609df63a6c2cdc5a15e02e11dc4248d940275bca51142c6602c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15e12377d3c5d50865371a69fd5e9f41ba3eb5ab2f9882aaa1729198dbf16299572898e6897b615d7c70d57719591184170321df750358f6b6ab9e7aa5a2e150a77fc4532b6d23fadbc1bb810c8498ee5ed2f8708faac2c80eb704ea65244f731e85e82aeee3c195eb01de1dda86bd80634b586118c1f2c144809f527a4b522d20b241c8e50d679506e7ce8f016cbbb8dcb57fe6cdffb860f0afb090b5007f81c61c87dac85fc0136477823da4011dd65bcd6eb67977091197ef02a1670993113199392b8d8173c971a03de1e1e15872188ab951e21da015a17959527be12fed5fe4cc3019741ede5706c472fc7befce0d9dae71083d61eec4679f3bbf222d75"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1365fd05a76a548057742f631e0d957c020f670c74a339c4fe0d78aab13b4a960953201e12d75a8b221c0f30be8a9364f8925c6e1d8717222946f7410014b85eecd0ce632147798eaab5ffbc43df3db7207ad776bfba6d5d356307f9c8c17bacf6aed2a35979dd304e5400541e999aebeb35049c695fb5f6ea15b2f5a5734e14a90ba5126b34b296c5981e13f23fe560ca11bfd934082fe3223e381b24fa17677ff85da1709135e150af32c42415eb954746c0183ec648b7aa2f25ed94bf92afbc3398869f6fcfeca70977a6c6f2505b350e8a647affcb203dd836c80f178007dfc3b4e4ca6d50ada50dc73d3971cb055496f7af889ddb31d73f71501f4309a1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1fc4b5129a8b50e734dc531aa0b503c61fae5ae5202aaaddcee197270ec30d8d8e9e06ea5a4b83d113cb430a5b275d8273314c094fbee06047f8d9a090baf8f3f57c52247516b1ac84c1674a4788952dbcffc8c4b50bc3ed0ea16f95887cbe8121fce8c425fb0409494d5a511bcdf9a25fb4590dab75c2ebbaca4f66f6c11229f9367c9ede1214e726c8e3df12c764fd5b3b41121fbf240e92873739dfabdee2a634b142810b04d024b48a8f105682b5999bcec61bbb6fbed1d947922ae808cbc5b7c96eac9a7a94a184ddbf789a816202a19ad9c5a16d10a05e86a870eada53fad5d5cda3ece11b304c2da1c6ba743322ed24417803b1959f2a12c92b9939fd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5c0038ea42c3adc50e88f90780e9b0dab64b67c5507f5de0119c0fd2bc7d7a66d6baf1a47c7994fd39e33bd77b31d85db7f7eb1c3e5a5513a507b8c531be20303987382515d84a403ea3f9f3ed7c1b2fb5e5ca7d94458a7fd6fa6a522e92717510a167dd0cd2d27cccae6f29b3dcbd189448834e3ef5c029f6753826ed166f4148269fbb1785bb52a00ca635485c10abc64dcbe1fd7fc39dc9e6499bc72cc0099d6d2c8abdec7beeec586667af53683412ec0491534af62431d650752aa7da5cea0ceb298e24a5166f9df4cd1a05762dca43c5a2ee4687cd230b35d50d811d6cf33c8cfd49f222d5ce2ff0403f95c21f9e6d6d3c38eff74b35a392bbc50f0ea0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "188571e345ba738adb4d1c4867474faf486c7a4813bb0dbcaf3f051b4fb5205412cabd2f8279930d1038976d5a23e0b064ca804cdd3a5b82b7e8e45c70381386ee84e2b9198206749f79b343677408731853bdeab4b5849abd3e603e612b857e2f63f59ebd66ca977d60e8d66f115394ad06c1c42ca0eafa8f32133ce8737ea606fa17db0f81898de3c3d8f4bbaaf7f6e48aa01424f870a8ecbbc97a6d71f828e91ba3a90c13540c1a3c3c7de2d4708edeb22987574fc9c9be0917cd40b8c75225d71a9b0dc9164d3c194043add6f6cd636a3bf42e0f6dc2f856085ce23e5a9c62f81e120b619551cbeda6e3eb0fbe693b19f2047245281dd6591af89fba425d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6c5623ed04e763ad3bd1f370b1bb67ff8e9029e0c34d81e160c580fe548aed6964d9187a45e8fa87f79dd3d8a94d521f2bb8a52cfc34f76385a924c88e63722a7ca365127c0c56e0125ed29ac2f8c960ddf1c99700a19d42cde3e5e46b96bf319fbeb93c2b54076628e81c2ee998f4257afa27a681e8dbb49fa149acdcce9d55222960d307b2e18b33729a61ecfbb01461e3b159c2c958fa1111ad7b4ea80d8897bfeacaee2afe4b17b9b0c7b19f9c2e394429649aea3eeeab3503fe9966c8f3e6b7f0d5e482d6a07d93dfa1eea617a99e55bba32f957c1472d7605a4ba93669d15365f989be09187a9eb58beb942948b9fc7b658a1c06289bbe0d2e6a1e0084"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "27e64c5bc5ad2b95b745e868c21585b53a912249344faa36cc0a963bff4783ee128fa6a8251991c76cedca73b70f7fb27210dc89a93574c2e3a61a8ced2986a1578179c969135656b07502a622fa7c4d208442a8318509f0a736fed1b0dd33dc8a30a5c3249aed7a0aef71ab8858d9f1f9cad06d9802ca9bc125a7fc0354bbb55069d73434b98aa9c7be61fab59fd5c96cd0e64bf704c1b213bed2cfe97e66fc6f6b061cd0a9b01421784c32e71775bed2bb2890c8135c42372f208602ad9c4e3e18ff2cfe24871598803845618308d7956c8314a58eb188e083fed8a11533c933970c2bc313137726273f09e36e827c9e1af36b7ac450e0b544a03eee9a074f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6cb9ed3d4ae69ca29c8d865135a86758317510bb3576086999f6985c9f605376f778e9c5f3b80ec6730be4bae0cd4d5d2361a3441ff41118cd4ae3a3bf875c7725f97fcf32805fca3a1e686d408fcb4695db384a179d3c59e3260b17031f971b1c5088ff1849022dedf2d1ba55259c407e57bc01203a2397c7a9ceaa1053a1a75df95ba6a9878e1e40237642c7a4fed84162f4124a1ad45e6f4b98b7e607d730b872467ccd0079d2037e2d4850ac59cddaf4ecc0d2070983f44155eaf26ed4b57308a44d52a36f8093ed35561130e34708c9a3a33285ebf11cef99a4a06fe9318c6bbeb1e770cb71e1645fe343652ec8174aceb462745d4721c8af3e3d2f4b54"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "58f32013534e2feaf9a78986204ba3912715c4ab8f1e04ad4edff544a3c29d80959a0d5a169af564a4bdd5a9ba3b6e485cb76438c3fceaed89bd7d3aca0096627cf2b6135914c7ace9df9a9c8b5b1c97ba2db844c5e1b73d105fc033571ef8e652e4d95bc8605b28a0cbf92f373e2f31a6fc254c2eb9ad944ea376c150b88bb1887848c290d42314f1c512759d25ef7a79d18c8e5f81318d28f9794f1d6cb30be36bb30c6dcae2cbaf489678f87a008042c02e6eeb067f99ede27043b2b4166d46e1ef02cdd26e9189dc2794bac12334e34e8f93bff071961b52e693f01fd875af73784e8d142a22ec9c477890d47edce8251026aa4e4b001d0d046bda8519eb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a6de4aae4ad4de60bf01b8557e47a805fb435ee7e8214b2152bf22655e7f3d6c7e090a79674acdb67126a7c01568f5592ff68d4210104ab92eac884887122b3d489055a55a4d7407862356d192a9d7f15edf8a2eb4ae9ce615c594c0f6918a427e5e27e725b292d2109d94de5afd37d1228ffb293c73ea7ca1c6add14e8f420780d2006109a47d04b70eef26741b846a47387d5fefaecb391063ae1af3e77f493111493bfc5554e164dbc5584f74b3fd833e6d1f3d346d17a3bbc8c171d997d06780d9ba149b688ec575740313181de87f371aac306cdb79b2d256deab35b1806f63aaf2eec73099c937a94ddbf706189ee046fb060d0e586bbb7f951e17861"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d36a779f2d88b6e0b55fd0cacda1295fea91d1fba45a992befd742c19f3d955ef16b6d2f5e8a98be0cb72f0aa71356c14919d67e546d69d8ff47aa393b8da04a3b73188b0980bb3a638c962940829a6903dfb28f3d68bae1334d2b63b11cfd22baafb231b5b93cdcb405b43a0c6e7a2cbac3c70054bd8e48f458893ae7a4ff62764bd17254aa4db52d67e7a7d1b44a277580786dfd9fb702efd9727d2808f4f859bab9b3da9d6a18fae30742857892d04a3bd001ac10d04842dfa4be2c6209a87defd735000d5704b1f754bdc254fc131765e573510abb5b7307eba62299ed9c3696e88c3a54cbd56305f2a3010b67ce54cf9e77b86ac50d69b8400017e7052"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0b7312cc652255319e75a857440a77c01a73de1cc26fe95aa0d6296cb037c79839584b67684f57d3b2959df2bed426eafb6b364ea283674b5bc8ff6f400298781134e56e080b227d47cfa088774ec73f478602c9e4a571ae383a572fa951e8b9ac66e86a532512ceb862339a5050adfe723f1c1e016a3cb944d29ff6d55f9056e6ddce98ee4a80e998f6fa4d535d3f42ebbb2382dcfd5bd4ed179240c2178019e184b957bceec26283575c00a9bc22f8a6ac8dfb99e85657f33a7f52c44e9feaf89ca7fbabfb947032d112dbc99f05badcc995dc012955a7b3169d9956cc091b69051c5f18b1aacaf30653599068d0ab6d380923fcd7b7c8435b88a7344ede84"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "24599a537c2958d7ffd18b4d935ccb1d045c8d10afd74452ddc10f8811023584950c546b9920f92cbfd0c08dbc85cacf6a16c76f6cb52bba27ec14837d4b3861b59b9645bba8ad588c07cdaf73d873004d0c4a51aedacfdce1bf3dd63c68e0f2c4b7c9d4f2027b7f35d60e9e2e9c913ab58a21f054f2a2257f46afa9cd300e16a37a4ee116b43f3fc4ca2c58dcf41a99f10835bb788d27f061fa790ad503a9be81ffc01599edb722aa5787a94c99904993676fde027c3395a3260ef9fc9195c85af4db3f15dfdf03178caaaeffa3e33e5b9c454047b2016a82d09ba7521e273b022688f7af5d885b2942a296f2d1bb666b4c2cb2cca98c7462de5ae85749119c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0a16c4a930b1abf1dcb5e65a48096dea21c0631fdf403c382de73326642d693159ea82831ee14be40cb8a15709e359d6838fad5cc26aebee85e50320cfd2c4f74da82d243b6d9b4212d2977259f36c5c08d31a75fdd920b40543c36b73c8c244ed1766164f99e2aaca92346705583f0b5df277270951a39aa22dc456417b21586b618043da2ba6835eb46f58590f4c21512db1e1965ec8e39bd0aac87c4473af7e1cfc3eaaf3fbdcf30055fd9a47058ce214aa02c0f96b2492c489c5b563954da1651eb7d4bc6d07d49346fcdf7afef5d9b649e67243f900ccb867452f54f73fed48e671fb65dd4f5508d495df8f54228a707e339fc590a1ab9527ce4f328657"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9ef084bc6824070ddb5af82344467ac985d82e6de8b5e988f92ec1ab41ba5f41ede314b6e64b0ceec5c9e6800a72d79c1d64ed1caf2179f82764a52fc491e5cd20796f040812e38a15c40a4a4509367de92b22af477b2286cd5ef3587480be05b63c513df02c728c30051ba1770de61e4826282d82ca8d80125186870b17256f9fee25f81ff55a8a0a92b1648c09e9f58ac66711087126c1e773a881a10c06168664899bbf1d0e68f256620689f85f1f8254c59a30803966e55012e28ff90a07359d66a73b80945e016ba1381aa66c490662441ab6d6c19d330b4fe39838780be91c07f74bbdb189354557e2f9524856a466c948d350f57aa87e8e97f5bfe616"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15739f4caf4284e47e7b53dcc8167964f8772bba88a2692da445edfa2eb0f96d2a0a9f25be5f22e8658eda0f9e29881b47229c103bdc0f19f24560da6ed9f8f2c768bac88c19bde510ee301e188f8d86b3ea5d4ad9bc410ded0015213b4044d0b2ad4f0c88a4ea987f5829521a3283214ec3d7e6779f98c29873f302bfc58307e11dccd964fe0f7745bf2e4e92acc1d120342a8e6aab8abc57aec2bcf932efc971532057844758508e00e1abe74c6b6fccc083aaf862b939ed4771c04e2e5f8b7eac4ea4517e3b87084de8eecc6a3ad06ef87f5e4cafd4a1d313fd8e4b19c69493d227f09b72e1b65e08b40837b8c1d275743b699c4a49f3f59bf43e47c1125c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f9b7c0622ce7129ec1d6108b3664fcc7c5fb9e38163897ffc30eee20b5e502f64b2211d903ceb7e14a26ec8720a38cb2801dbaf4d86b42aa87347de85a21e3f648706afa774eb50d10db3afcfb1943d3cdf20240b9322403487baef167571acb0a035cfaa6aa1c0be9450c5a36c02373a6a71c19ed3e4f4941c35b4be82014c915e839f31c27c4338bd5ea954ba2433c4003bd2898ae197c8a276b10afac3538049630f0af67767aed14f646e0303c372ff4f97683f543d7be01960f1d772890e290b44abe59f4e218fdd7b324720dccaa33d380e99ca5d5dd53ab5950dd3aef373643e53f184e36b7f2b399bcb5c6a30780fdc2ee9387e6c13c537913910a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f070db7471e7d6c9d32dc5dd19bcb518fdcf2ef2d48a1724d6e3dd6299cdde3b5ed771a0f1a872d872e401373cdb53fbd7bb92a4a13442059f55bf0522d48539db5b52f67b444046a923c7dae3f07230d602bee9f29afcf4880f123d0363de4efc18f6e4fa08610d4203dca4705d26ded912498f653a5ac8a811068c1f3ba547aec31cac73825540e208438e22ee61f20e0506ccb0d6be3459cede4edb91916afd453eed5088df58e023c6040d794e3cf7f531fbb8b0200939ef7c035320356c491c0851a598dc6984c8d98533172ecce1622b7010e49083b5d10ad71c7bfd089ee5695b42eb263b005827928c3f93aba26fe7b6382df948ba761de80dfc187"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "96a45e04e0fc9a701e680882fdffbd56f5ca0067b93e59f06fb9be63720781790ddaf2d6a981d669e8eca75d5975203c77bbe7cc0e4254cbe40d5d59145f746e3d14f1e393600a150471c4f3f288ac40b8d53de28dca2537dfd1265803bfce7c423179e3483ac86e72865707b0e9b05a8f6f932044b90dff67c444286e8c9cab31df8f70f0658a4497e596526572645b282baab02462e5f34656b0d22d94370339cf52408f71105b668f6b7c37020b12e807c05848b627246d94789e2543a9f69db7ebb1172203c00495ebd64f380ebdd1a1180ea08a323ec88972263e7ee2ba644ce3bfadf46634fae4a2e149bc275fc798f021541145cb2783474bc4060e6d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "038c6f8d890722a43126f4d9a053e45f2e10447a62cb931bfdd8b14b342bf651482fc194165853fee8491263e7a7170d13d56eb45449fa09c3c2b2df0dcf51e823d24f7533a348ca00acf910fd10fe2dd9b1ba5b46876763db3a83dcf6311cd9abd02e28331b433961c55c2fe1ad51ed4a4066ed83a0f03b619c411dc8b4542297555d468f6f083331c55b85c89a44e0aaf58c7c953d92f0797b137253061c0f218d48d5cd30d7bd47c7449673304980979d79adb93b91c1eed4f046b45d05f1b3b27eb9e62eca141fa6ac866ad947ff3210987c7d75275362ccbad1792d68d3b8060c5f089aa2a07f06a164641ff5288ac2408bf4c3a9a934f264f962fb9a43"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "682f3723b4d560faaf6f6b52fa4b387d9b94bf4c436dbee647efd892d661b601a4df467e192b489ba4f3d7a2712da2b09cad25cc3aab2af21ab3ba0d51503c02a577236822e31ca2cf382063d60229003128645ed54ba9813c1de735506a1a63ddda51c3320f60151eb383e56bf6fcea8f6def400305a55ff2103d3697922833eaef804d65f9c1ade60fa5b69eca886b6d472626d444efb74397d37d2182df0db192d382566a6cca3acec93495a61a0802c1197a062b0231f3aca1d1a9e1482dccab4198a0a9df40aa1b354a4e884174d1f4f517776e1054286347623e3b123528b68598dad94cfc79e7a418493eef4db4af8237950018881ec12629f9cfdf79"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "321fabda209fa9eb11a555f2d5642274ac93f47dc6b09dc98d870117945e0ec326da4cdd92c9262885387c9660bd5101feeb536bca7de135d517e4c9163672c86e9d47c7ca05e8f6b4d1a472a2a91565029909bc7b007eb39e8d6e6a28c1b80f7c289431b144c99da8264420b8a22ecac431daae7e9627665c64e93c9fd38917d27aefcb74015bf2b4aac0abbf3aa2b1be74e4ea28b4bab05c5181097e50b56e2f3c2143914780ce7b4861dd142b0432f05d23ba926c51a91cd875e7cbea9e65ec7a5d2ef9128eb9857b290314be39b7b9e102f3d3884179ef16fe98fd9ad72e9dfb62a8a5ae81a9f7831159fdc601101d20293ba20042a7736dee9448077c0e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "656c5b616e74f4337340a6ed4db988edaaf677dda18e9871806abde19f26231ccadb30ead180ab3cfa27c74a7ad40eef610d5c99dbc321b049417cb9a36b27026d63940dc05149d030d0e9e34e291416ec857f9b4736f9100a691f8f10a6023258d62e0e1483bd03166fe7640b21de04a533f0d5e9c726f4eda195db54409792889712eee58d56d0b4b2e70f90cb8edc2f55792add333ce591425a0f2a748e97331109e677b72ffd372a88d3518fb7cd716fcd096e3b5393fecd86206947168dd91559ad915874df3bad476e4ec8dd97884190bf6356542878c19e3ca7c7748fe7a639f863482ab230e5ac01ae85e4ed26036ec281017f7cb2f41cf02e6877f4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22f31138d107f7f74ce012c46e9ac322874648bd1e3388d588098e952d7273ab97d1d17f265485eeb2ab0521b91ce47cdcb74342571e5ae103d228dfc1b967aacb0d4afdee4bbcba330abc3ad445e0e7d94ef39e05b4db732240af7ef1538859866750a039697abb79ce91d377a9907271ba865a64d57c4db4ff886e4e9b157d3e9ada5eca127478483fc7548abc1aa27f8ed088dd437ffa9d3959dbd8768b1d1c35c7bfa390d9aa6e8554bb990ac89da7e49b4bc086438be7670a5f9b1871491e2ae8a23f06ca3e7b87a7fb87ed0bb5e6fd64ad6f1af7b8514115af4e9ae53e35ebe90a5912c45d6dc3aa4b9c7c46a3b4d20ec48a7fae3a5ef8981e965dfcef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4142f9fb5e58eb4ed8c1dab74515c643b9bc4a013373e79c0280547fab695e88729600167ceba6460d7fe8bb2885d6488f0d929be7be7528910828106f16cc5e39685450c8a859fd4b65a383dec054af0756e67b2ee0b2ea756b17e602c9f5ae20b062c5845596c5cce1b13572f54f251e2976c5d137168a6ade05a14227f719bab6c40da8e8015687099fe78f79eae35a00bcbaa56729f60b8ce6b965ad03cef2c33c3519f07c1dd63e6d199cc56be298d027231d0b6e8471038da9f26474adbf28d52c6a582617046cc678f2cb19abe5491cfe9c8e396477fdd878adf244fbc19d78e9419035f3249ce52dbf281622df55fd8b3cb2c5131591e1d565f4f0bd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "66d88b8adc0caf4ee0524546be91a69aa3a7c8bb4f68e3a199b8d4b0a0cb52158f785f9ca26fa30bf5827524facff27b9f0b1ed06870c35033bd55ff386c4946facacd0bf3be3393777d3043e6050e5750cf6da7a7f4fd495262158dd4f6b0fbe01b601451fc4f090d03eddba5cb140fb01a65ee6912a8bb594f9e25a9b73608c058705a0a41b17ecea9e0016fa7128ddbc561285e3238aeeef72f8133ea6fdd755e3a910e2e2f2c4c5c7e1c7f608f5796b943f2e860f37bb311628153bc7baaf11d4f33e8aedde79f4fd080636739129dbe2a951725fdee5f32e471c9d267999d9a11bb13ad40b315647b3f7e91c373c53f845ba8db9b30b31d6740da10964d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f24ecb03b77a906c8a865182b5cf5921a98f8002d1c59f7c398c469444776fb38d7221b386c5bee4f72ca5dc36ca1b08c2a21947832c4e6e7e755faa4ad61fb1362cc084d0adbed10ac8165f5e13eaa1f6c77bb2e058050b5f902abbf0041c1a3a93497a95608d9dcb5f7d4cfbb4c037453d5558f0f9bd2b1d3a769e2b651252e9054071dd34f065c0350524a39cfea3bb0dd10620288f9e5ca0c92cdbde4277f9961be882ae2f07b1b75f279fb48062945139cb28ea464b4e00b2a5259aae4397f0ce063321df7ef6045d4dad8ac0649c992bf2d22e728827f4c992045f376cabebe75e58e97edb43991bcb38c66009872a5d5c235c483d8d5bea083c6231d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "16b5347808defc31a231c28edac36a3f1789d4c549e8f5c71e2fcf5d5304ba437b4c7c0eb7ffbd80f5c5b2277bf24412b39ee3e74c368517717c438bb88b80b12ad14f7295ecf8841947e5e7457e66d2f869c30d28e9ac2019d7e5eca6229812b649c8b6b4ccd4e17b254e7ab496aa5325525e7974be348dcd53c652e6315e670236bbbef2f501e246631b735c50e388ea3af8bb0030fb7fba9743eb70fc6687cfdb92d46a4537ce88dba96ef52744e22fb7257af1538e3ffc4e2d9ac9101d6f71bc2f5aab71ddcc73a6c635500fa0a9174d25ebcc85dcd7dd85a7d2e8d3138effd171176bbdf23296ba3df630ee42185720ec141ceeaed1681a6ad0c156e099"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57d9d9356676927b5b073de32f930db717a920d484b220ed784cbe2805abed86a27ce84f3c9b5c00b5c9bd146249ed776b02c1494faf4dbb2e435d0b914bab59f3e716121fd212a6967f17b82bf1f96911e126d8251279ae28749e24ce8958d54b126e623b880c1c80d15b0c1f5bcddffbca8b957276fe73a076dcf5627f54f36f35195ae5a777479f945abfed5298531c581ae5f71d2ab6fc34aa08a84d53a03829e756f21cb4482649ada260daea8befdaabd2addedcc5515dc439059739f13ac77d1049fedbf38dc00b11fcf2a1432debdd694118e3cfa7ba1cc6ff716255af532c80784fe570fd5b48cda8c50878377ce4503a8ddfb88e7e3dfcb466b8ea"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "628db8142e4a89ace83835d484ff84f40e70a0983fc97ad5874c2bf78361ae02f925b41e6af645c0c5d99c3e59929146b3e6de62070cd03be2eaaf760874ca6879b6cd695050bdb8a6c0aff0785918d3b83d214bc1ae73e3207f9dc7ac550cda509dbceb5309658fc52cd1873d747df01ba52a28b09ab4c0eddeab6108e3b75740a80369c0a3296d3514af9a966c5edc9127b88797279291f1dcd3da2a512601880d2ca98cb20d512c0426140f30c11dcf49e769529a72270542501961a5fd3fbde56af7d85bce7521160a95e5388d941fec7a0f312ef9efc8382676735a6ece2d31716e1cde8bcc86063741457644e0a47474f5aac76c618fc960dd9c6d3f29"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9492ac64c45a6ee14fa5996c865c18a0310bad275a26be5f4df7eed2f49bb3fb76b222c9f7e92d413d00fcc9cd6dbe590a48c1250ec6807ef5d231585c202934182266f9bf931be91bafa1ea47d0d6dfbd39b5516585142cb52daee704a6c36f5a216b5e42a20b8deaa3e6d8b26e97cee7ff4cbe4b72980edf50283a48034b1b0deb36730439509424d7a5229a5dbe08005f372057b7bc6c45d7633d509d833b90be33e706b023027165e2be40a165240f28f7708cea38ee9fb87aeb8ffbe53637d6f652755f312038f6dfaf5db3b89df86a7031f4d92d1a1b1886fc9594b8e2c29135aab5e6a66ba428552559ab9cda9d915de834505297471145e0a64fed3d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ec58a94c9495ecec016babf77fa114d78097e484840d82c3cfe7de98d2ee21b499992bfe3a778161e781f89d20745bfd1ea6037c2e7fd67c3f95479315dda5b87fb53badf0b813f28410de6e79a11b351b1668586500917feb44aae0fc18ba6de2bdfb6444d89b9b8b67490c1f2b81e3081e5c5c7c39f4f8f9bca2ae2a9246465610a9e6a5a67162a3a40857fea59e128f21903afa9143bff67df9679918a0f5c7288af9154f096c03a13601db5724356131051ce39037c6b870bfca5198cb9385137b7cf5383630b459cc6132b7ac611d13712f91b2911b9f8526e02a8c61acb7d184a7c6d86d6246cdc6bd13174b6969e5033bb90c4abaa907968edeec362"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73225d8f91bef922f7fa479aa9cf384df5cf30ca893ebf8be19f09250b35df80cb8fccc5e13e550b926a852d40c6ba0edcf9645d0965e469d38b1212637b1e4041e47ab1af8fe8b738901bb916270061c1032907f6240f33abceb57dcc93da9cadbaf1c26f42922b3a3e0b407bcc4927658d4a465cdae48a138ba7859c303d23b135a3413751f25b108b0058a313271343ad6f0b81458ae7b050bfeebaca51891d94ec9fc07a698471ee3a0a52fe61dd7c028a70fb4c22314ce3f251a21db5e13c8514809ddd0e8e4ed76a01efd1ccd10f73e29fcdb8d8d4f4c60341e166e376d8a60d05816fe1abcb30152bbfbadc9172ae15e58fdf41e4bc53f39f5b0f477b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3d1e67d3b6f474f7e23ee14223cf10d3d28beb454dc7f7ba972bb3eabf6b66eddf245f34c2b9a2486c693fb193891a084bde18576b50b17dec8f9390a8d10dd80a4498cd718f7134ade41538559ab1140e28aa5753bba7a60a515cfc6aa245d3104a598ae06cadf881be563b42dc138af99de76b080eec50f59c0620136525a8b4a3bfd861a24fe5a2467dc23da5b0a7c298435172e3f280fcf14a2ecac790dbf1907ab0670974433861a2ea6e097feb99827c9626b7464d1fbecd7d2d939db1474c30d9be20b77b1adb92094fe1ddd55c1f66d8cc37bceb1460a120fff35dfc24a7e1e3a0b7f7ff4442b36d147ccb635513f415cfe6305b8b713f813497e6ea"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "891f1354e36c2b7faca0981c64f249f73940ae03da86f0a413a971031b00c2bed14489345225fea317d9d551cced9c6c6f6f7134cb6bdca1b0319d931a1d7a1e24a744eb98fcb0d3254660066f688531fde00822917d07deb9d78aa337bdc2ca3a4a050d8debb6c1283cb90e6991429887311f72b95bf3b18d1c5cd68f65f8ed934d9e516e2a8503613fc4dc2e786c36d77ea2d5dff75c26dced572298f27de39459c55c6bec73295f20cf1c6e876b345c6fbb2ff23adf52d9d4ece53877a2bd6e7cf3a4eae08b1b3ce8dc0468614e119ffb7547f1a765d9d9b5d9d8624ecf3b836dce490c8a36a6a60e689c0bdcbdf774eb60fc552bc3e27fc9abeb2c905ddb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a0bdd0081c1e7680839c646417b69a6fee16c94cf7746ac21ab410ef83a78a53f5b0a51afaa2e4a1ee9b44970dc3e8229712aadcd4cb2b92684e2592379b581b2aadfb3c4781f543d8b80625a07507c2ddf47937a27e05044c36c70ef091cfa1fa9f2fc552a9ee1eec07dfec597de11ca1a67ba4829a0f620828cdd424a079258dcdb39986157dd48d2ca214f10333c6c2b73593c3c72c0b22a4d374899e949313523ab9f2218a03d5f06ff0dde49e8778a076e3f9938be7179ae90b4b068b04fa507a842c7966d739def7a22ed70901d5e8c79b8df7498fb684fdfcee8c49627a38608434eabc03eed78d935d34830fc3248c90d62d743fcb1f633914f7ccb5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "46bbab5068ebec737454655b811dc71877f4b5cfbfd90b340dfe549942d2493114873470f91f1bb342a39c0bf614268e7bc9f5a68543d57d8ee14fac4b3abffc27bb8d3dbde46ee6cd171b5ea32881f1d037e67caf954769e416c8dea94b7b4d71af3aa2ba321afb997f2120c1ca4ca53583d85a4ffa13552120ae24dd41c71984becf4aa9234ba0a5d9b918c6bd12a85be40d0e390b88150c1635357e891bed185482420bcb2c4f88f21927f4f8e81fc96cdefe82e735c9a34708d5f225e462340a4c71dff89da993e821972b8ac963aa8a73271e602c6f23ecf1f696bbfb3a2bea774b1c058cd8a3fbd8a4a73ddc31a607c9fed0052e3f78766f71dce75773"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "01ccdf739b6385b875254ee9a25872ba1bda2b87cdf57ac741604ee962632e17fdd32effadbaae5ba52904a731925debc87509623d95b0ecd8e97ce7af10f1f9650698d22eeac705a7fff23710c0909d4e8a736a991daa074e32bf8564430ee6f5740df310cfcd3b7bdd98c4c6a1ec24f08a90a015d64ff43dfc00f142838e0cbc2253d8d4a99dc344e6826c79cbc0983147152b0777682e85fb18a9cc0a73d98566aa856f43356eb611ed5b5ae2f551671731967e04aecf96b751e68efa11a3c2174ae0bd2a14271268437c6f60c49a2c1dacf413b2a4f1623502be024488006abcb6680034efccd3104e8c685e0da25f35c703fe91716565241bbaccfb3225"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2d1c606370259b0305745860332edd9caea333c221c2d16a2e547892b8e4b1aa47263f4cee9e7da39d0cd793d019ea529224977b04f7173e9bbd0de05745788dafb67d2933bcd462fe018c960c67808abd296eeeff4da2b17dd12501402701b4f44bf95fe46297b7fa3c722b24c74b89db2da74f9094fb558183cde9f74394f26f7e0cd51f373d259646bfa9cd75fdb169997ea982624254db25723017c9247f86490519350f9ed8af39da7fb181d7864b05eab70b9b9d0a965c9122b38fb1617fc56e38d53a8eaa97ae0baf59c5a48d0721b36323b18ef8cd1aaebeb5fad6dd09a0df75fa5eaf28bcff54c044933e070e220c1152762b4d81cdf85220e38f9f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2522f982c80fd9e16f2cc67c11093131335a170beb7708105fbac3c73221cac832670450922364b80577bf5982921887adb4999a891c74164ad9ac62620d0f944500ca44f15f1e4db806b6306ecdbd9836370daee023c2d99107142046dc94417027e717b34c49af2ebe038dbd3058ebd6645248a8f80d70e87f5e247c1c07c2518015e40414fdbe4b50065d1720b9ab8100c369aa49a57eeb4939806eb4ea87fbfa3fd58255113baf74fd5e76615c0d0fe5bd6a0907c4ed3ca9dde622822f8dc41cb46eef3598ffbb0f70bbde313260c787ffee2fa2bf354c15e12ce9fb5e8c356aeedc2cd6cea61862d2bfbdc3922da1fce1947e76972595d7bc96e6cb0931"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4b140acb262c451b0761236b926afa2829e8a095828f7dcf196eaf7fa46fdcf7fbcaf194aa3000ae8d3dc7dacc26952502b1558a67fb692da5fcc7dbf48cbc5260e2b2a7041fdf7bf46f531d4ef48998dfcb65e182065535aaf182ae6abf6e819e7d96ec86178137a3c14383f89438ab35f0dc7698e1811c415e163f8bac5435dddba5db55aa6b393d538d31b34332fcc34ef8e6eb059d4cc453297d6895ba480593a5536a4e553a55417295b6f6798734df67e739e54d3092de4f476cc0f65aac6950631081df1116097a7f6a9d00a1afbe0ce6b2bd32ef22acc95219f05df9fb7e9a8b391e6277cffeda298bf094730f5663172183dc5842056de36137ee90"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c408d5f2efcbcc3f1c6c2a7f14eab73124910f21e4a4b90a782ec8ee5c72d6e84c43bf76fab6a4953e80e712d755489446130b46dcf8649a316868aca5334afeb7c957db77940e93b4241cdbbfe2a0a31a2594c93afa016ea3b95c6c4af1d076f7d7c1e6d66e3267eb05aa4b52014bd8d9e83f0183a9934963b4e4778176f0ab8fb18c327da3ca10c03797faebb4a0b862746bf19ce76ef214507db80b3497e6b2bebd98087029c458389166364c1a81254e8684b37209579c8d32c3cb02ae6e319e12c30c84422df2e82f99fbe37864f6badd947b4785011a93562de2a55c562335afa67b0853e725f2c91f0f49b2a28bb32bd179d928ec37428c41bf631cd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d50000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e91b5dcbf02d6f19621d41a83dc8f15ea83c0edb83765ef029b0acac2e1ec8918b1d2afe1fadf11c48d27594cb9c01fed79d90e5d5a8085c438450111aa7d9fa39c2345b14fc3c2cb34128f86db5eb00bdf8dfe38d61f29a41fe31342e7aaefcb4b122eb5d63c2f5c263c8df8450e9428ffef974d535818d51dc03a7d60c8b2d16c999ae46d73ab40515fe601d9b89b1d09c6d60cd51639a97c1d211e097609ba5e8c319c6fbd21b34a634ec8fb8971c5aae21c70b847a4539cc10dc314ddd8a9629e8a0e51c66c0cb61fd1f7228c01c6769190abe9bac9a3897800050014358594e0fb20dbb458b12aa1346826cc9f7e9c5352b073d62853dafe77c848cb1f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57e8cc1dc00c07383d89a79b5c8e4f5bde2a2ba55a3c7201b3291c4d805b1b2eb36f8f326b542342da180abe508669bb6cc2dd54e327bc70c1e317ba93a0fd21e7fce22a0c597c7420d1d5602ac43d9348ba3eba561f250e301ab955b0dc33e4abde32946b9b3e86c8bf07a44646ca595960bb988fef04b2824967e9da8b0264f1da0659373935313a574b5380f0b54ce1bc0dde423bd3a54f6ae5fafa772a55c1c44eb6edffecf13e6e5e1edaf87a79e338577304141fbc44f0e9eeb286f553f879addd6e12e436fa3af51ad53a72f2679f0ed102d504ee08706fe111eaee49d880d1a0b91924b3b79968ed0f9bff446dac199ee89b158c074927d27b864498"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "68caf07e71ee654ffabf07d342fc4059deb4f7e5970746c423b1e8f668d5332275cc35eb61270aebd27855b1e80d59def47fe8882867fd33c2308c91976baa0b1df952caa78db4828ab81e79949bf145cbdfd1c4987ed036f81e8442081016f20fa4b587574884ca6f6045959ce3501ae7c02b1902ec1d241ef28dee356c0d30d28a950f1fbc683ee7d9aad26b048c13426fe3975d5638afeb5b9c1a99d162d3a5810e8b074d7a2eae2be52b577151f76e1f734b0a956ef4f22be64dc20a81ad1316e4f79dff5fc41fc08a20bc612283a88415d41595bfea66d59de7ac12e230f72244ad9905aef0ead3fa41ed70bf4218863d5f041292f2d14ce0a7271c6d36"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })
            }

            n = "90a5d7aba2c8dc828e616fc1fc45c7c52130c8589dcbe2913da187572f6c23217b89a5186b6f90cbe053abfb0885a91f141dbe106ce6ad303904a5941df26ced10478cb56a7bd6cf1313c4966d9cf7c4509d9dc63566aa323e110af219f3398c04e79bb486de8703793473136f5c9051af24bd2c0208ea1bf9321a3e8f24af00aaca1216842eab248d58cf46ac786c49fd3ca8557e9b53993a4b9718cdc5c474bf1cfe58c07ad97b2c5acb7d86accc0fc7bed147adb2e77b8697d80150948117714b806ff76f9d88147d84e93987b724bf4870429e85a7a7b51486a78d8a88f1688f60e215d43d06221e2b993b5c12a607b80e9e0122472b29945f76b55737c1"_hex;
            e = "03"_hex;
            {
                auto m = "33363730"_hex;
                auto s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000989e7ff72e67e680bd21d5f966e4ad8a48c3592dbacc4a2f035b4ef4d17a2f25f8a9fef7e78eb99d76d68629ed02d67c43c4b7ec8c3badc32e3d0a524c326537739b0fde156723b27c23ae2b09895e470c64d700f5c"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "92bf17cdbffb42fa9957ce37826bb451708e7cdec8752b809c81a8d16fe5fe4dab6a9db6d11dbb12086645db7546642b322e8331dd7f29eff68bf40b24f80884f5152b1fda9b9f7ae2fce2721cdee0fc48f85a6e8e64f767ed9727fd2dc597967e276a5e2e768528afdd9df4b6ddda4c174300e4da3c19a3c32299e1e7857934c14dd6203d8c2671289bc392711597155364a59046b2b9f1905fe717ca7efebb4c1969b804118effa240c11ebf97cd68c2aa19c787b3be21e68c0e397c7f04c6ef98950e27e0e19a40da92a3ea10800fe9252b77026d14c2fa1eb4ac102491e5773279f07d856d446f45169b09bf60b8a2695f5e4864eaaf9590aec8c7c2f86d"_hex;
            e = "03"_hex;
            {
                auto m = "32353934"_hex;
                auto s = "92bf17cdbffb42fa9957ce37826bb451708e7cdec8752b809c81a8d16fe5fe4dab6a9db6d11dbb12086645db7546642b322e8331dd7f29eff68bf40b24f80884f5152b1fda9b9f7ae2fce2721cdee0fc48f85a6e8e64f767ed9727fd2dc597967e276a5e2e768528afdd9df4b6ddda4c174300e4da3c19a3c32299e1e7857934c14dd6203d8c2671289bc392711597155364a59046b2b9f1905fe717ca7efebb4c1969b804118effa240b8bf4bb1a6d0616fd5be2f081dc9ef741a9a4ae7274418b791432de470c4556463108388e8e8ed5dcebf3558e4650c2ac97c86fa682176f09b5dd8cfbf15d19c3fe4f961f4607c12cb3dfad9b6a0e59c92faa1fc8622"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_3072_sha256_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_3072_sha256_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1203"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "157ffb942b1363b5989ec4beb93fb0187ef016de4ce055620825d13c3dafd4fff621c71920e884ba28c5e98b328baac29ad4bfc4d2cae2f0ecb9d1b6c9fbdfc385aa565aaf6c5b3150e085e0316e21d7d440a873074e5d2700d961114ed420478647a4769d832691f7a004d934a89dc249c9343341902d5d0c3d1a623001265634216beacd5f756821f21c3b58111790657690918a2eafa9e85ab1ee44edd3d8bb89e892acf411ba9eaaeef88eca37dffbda72751c117364fd1b38c840d7b42318fcd011a4449aeffc2de32836d3a4f704d4c8ad4e078315d0d1758f098f2ea749ccce62aac592ac4041b5e733ba0431b88332a39a2af7f68f9bb1f469a793b280b964f285ce5cd1ff3adcd7dbd464a7c9414ed45791073f08415be2dd9f01dc2fec8c3a26fe97d9778e2b2fccf71a1ea5e9ce017d2d46778d7e37bb832ebd5825b3257a7852db5cb6c132bcf9ba3522a670b0e866585444ed3601fd32a922818ef6611626eee3ea99cfcfeeaa4c370567cc65e0479bd35e091b772d7445cade"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "631cb4bed6b79dcd3827879f6d64de3ae17e0fdb022be013e733bbfe0031cf204f0508ab87a2e2bbdfaa16cf24acc96b3fd2e72bc4a224428e515d6f1e0ea6927eba6ed7282a959e5df5e52eb3be9a39cfe139ea2fa45c21eb81b3197eff655b918f7c5fff6abab33945557a922063f9600a372ae7701db686f7e1fe4a6e804a0f624331fbb59536733bed3710dcacd22ec74b1a1386d045372853cac91130703ecafad7f6f42ec1aade5cb865339743c83e882f248b0db0855f487a6d3b55442f67773611a11813ff46a58c762b1bd70b5e870c3095507f23758e90b3c84526f47a825f0ae787acfd3ed349ca6786a2e84ec500c6042a9027a994c328c7a6868e6a81481b294383edda62773fd224af46e782ea3f00468515f6100486d94e818afca1bdb81851e62b3bf4f9236f061afafb3e399b93e6f6a295ae200c9bba5ff5aabcac8361c84f2e69aff8a8a21720b900d52ea4bddcfbaba3a231bb9b0dd48f0a4ef1cdd255b3524ca0633d04907ab672314c5e3173108313ff4a97df3772"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "5819a699691c01a7f35f0bb1831a1cb65631ef693f7c9ef89f1e8460ee2ec312f6fd38fe382b3bf4db8f5d208146c32c5ed2d3b13105743767a73529bfddb5753c8cc13148d41db97f69ea1dee0ef1e1de990ff565f633bd3cfd315a7dafc70aa7f27d4f6486a2f1e2711e7919c5c73c518069338c0ac984d75f58b00fb0eee0f7da6c9c84d97955137417df8f20c02b7893b5cd929ba37f6b3278a1bd35748e14086c5f7100abf2edebeab5f767bb83d999a61cc27531bb67e44a92004fba9944b9c5f770bc66671d2efc74e01fbbd2885c5175a1fd72b91937c324b8d99d3592bfb73efb9641b87949266de441b61d180e141de510ae0cdefc2160df918c08c53799f050ca4eeb3a8b6b5ed35b8b59d3acd13a600a8a137eb1b8c1abbf55f3e99cf52d7092d1e3acc08583b04aa25a052668bc982abf060ffb17c1782daf76fbd69e7fc9510c5c6a68bd525719be5b81d0f2a8b961f1aeac7dc13aeeeef9986c7a47b34f8b96167d79f7ec458fef7345c1c31bba599d09b3fe33e738bc7da1"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "636d31d8d5dfe0fc6ab01ef2ccd4602dfea62d386b002c429e7e846e7a98d0cb1d448d25be039d5158887ab46a9dd49c41537a89036a065fc10329df051e5f2e5c1d4436e84790ff6db4d3f31575e5f0fbdfcaee625722c5492fceaa3fb29d0a865200dec06e117b04753ca9450a7ca7f7d1a1176cc38ecab721864413a0d7a22d8fc1595b6cd0032fbf154fbbb31b56d3bf963761ce8ec9fb38bba3419716d0d39e976857e79b1faefd5f5a2ce0ebd94968da1ec3a387804694d90f37b34033c7f70ccfb26beffaafb7bf56c1b8385d489217458e0a68b5d680f9fa45382fd1c227ff3c11e3ec82426ec648a564f0e886e5b12e695dd2fc8465bd9d08731fb140084c79be64d915bcb4ba10f1edb4c37e35231753be2d9f339d37d7b5f22c91584a68a973f9cc469a23d3b5800157dbd72a8405fef4e444ff01f7fd23efa143c1887504e81773743843d8a73209a1deb66c5f305df539bc30e871332e82330e5b66fa6ea253b2b64b4c9781011d20e80ddd8cb83916834eb8fa696b0a4b6bcd"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "08e0ae3dc0d16c927c423f12a87313afd1d66fbd5d09f48a4dd1a8b52102bbdd208284cdd692932869803a5c7f041a4492ac2e664bb6dd981c370e0c79ee3f7c5c6dd37018986fc2cc618139fe3eb85c0616f0673403c4afe7cbca49c1eff27bbf6d7e541b285ffff20b80bf61dcebcc4250068e25ef5a8e7c3306e49fcc2a1ee0f500a3ec603b472082f12ce4a6a12a6ac66cd4da8b6efac0796e9dcdc66c095a6282ae9a32ad274efe63f43e725410e6ed4c480828ed876b76b71b1cb8c142d0c7a51dc202af796d7bb55cf544dbde2f564f31994911ec7307015b0da2c51abe265a04a74b9afd0791a68e725cd7d8b473296c5d948157c10bc4682f74d843ce72e9ee8719a7a49d9de2f982c5d4490451eaed62c305eae3d0f9cb3493bff056a0dbca8579b7b41dc8deb1becfd5abb455634569d58c5b5535ff1356ccfaddd14e0f9f7f69a7ae9cb9f4c0c9f661fde349facd21f0021423d3a9ee5031855dd242f27009090ff0c15d1655317383231799b18c01fad231385aa5020990f41e"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "9858e2557c6b99fbd84bc7eac3e31283a4efb351ff019343760a1e282368938e29ad902d3eb6cb29b35a036dfbcc7e06d2f1d15548df59ced35326295375bacd7a9d28a01b4e8acfb676d80b6295e19c6b7a259df56456e1df72f6a746e9cd31fed9b79b35d7a30a7aa257e9e8ac60ea886042b9194e7a383d1c9f71c84511faf6c96f7ae0e690112b26bb60cf7bb10f684e4fbe2a3a1b1c0caa9b1bdc79fde23fb758c2ba57880a4de461ecd2bc696689438183e2b9724fa68258f461bb4405425620a4d95c87ddd83e04be381bc743b05d26ede2ceff8a858636baadf56ef1dab54080da0f516307c579833717def053c8906d4f102448ab22693e7f52d5850193a40ccf0d68d1303953771a73924e4bcddd8486e1477d96250bf6b480a5f4b822822183694c52a2edacb331564444f0335d3b17d511ece59889b6d961767a3192d7f081caf7e671addb3757451776d4bd3b03f7b689843dcd59019ae4f292dba54738a88b86cc6ce3b123c61a446f4878b627a7f3585d8ab7bca9b258f10b"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "1294490626bdb36a31c93fa7853d93152d920b022f1b473bde3083a99e11aeba8c03218fa07d6c4a5f8b2504d2cb54505c40130fef5a2412f7a5ddfec5e2c8b5058f7cbde7ace0ac01c7ba8a1bd897e8974d991ad2b95c2f03100a34ff408a788c70ab5ec73b5356a4e3c7beb44fcb9e2f3f25d1c974ed962b148167684351dc2a223a174c9744b092071d58dfd39c38364f47d292651e7806ad7962bbedb64739d7ea298f0254244790e3971c15b861c95f00f65532aa1c77fba5c04ad078525128e92ed2b4f1269ae744547e3efd4ebb63e9df844df152a098c47fa492bfe0f1917ec973867c7491f64c172cf3ea1bc3f97b42a397e6ad88d12e150d3dbe360071a3285d6a68ee6e736eb4d7d637c649c2f545259ecd430b25b38a1618d69a4602ca8a2a151066f12c3807f5dc7cbd06bf095711e4483cb0a89c26dd9e4b0b03e05beca349f601c894f9a245aca3204584a9bd844772dd87b83d481c8df18b615307eaf643cbe856488c160e077458e899755301749d2d27bc190d68a5da11"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8b889902d581f3be759dab7e53cf3419d5dcfc825d203c736a374f37ac5570da2b87239c938bd299691a46387fb47ca656bb9ab639f6736207e19680ad1a0c7a7818f2498ec98e4693c51bfe414fcecff4bae7afc6db0d72cb9dc447e2ce4ce9ff435b9daa98cb125d77b7c7d2fe2e39ba15122da11bf19d341b9878de33d3cc134bcb77b9963d19a3037a67458b17eec462eb0d7eb7ce69b71f41287d3b104b45757c76440f370dedb720a0c721c08c055c5b815650737fa478898246d36f7722e913c0913612e753908400bf6b456f269538102b778257af0c7c14339d0ae1ddcbaa357369a065c0b3627cade311a627e1e3179514cd3761463eab7f9485f6651793cdff282daba9b16c2f79adbd24ba54ce4890a9685ca78d73e8785d722825c9fd22ff327b97f38d5e0b95f449928114ee9756aef5213eb95cc40774fa1733fd02bf37cf5243e7ca76f88e7e3fa8d28a754b5adaedf31a91e6911688a6149ecb52eab8024e72e1bc3a98579d9eb242e08fc42bd491e3b0924b03fb95bd1d"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "46da0267738cab66df530dbea6fbbebbe904ad3d6ea7e7a06e39a3b5f3e38bf5856624185080fc756941b226a52c8e6126d07714deb781f6f7944f47147c680aeb0dce310c7d6f429429ac73e562510678c23042b635116174a2c2f4e8e8becfee1e4ba3cfbf4e2ee541c7f7c27b1916a2aa165cdeeaafb9f81c84e9754d196c3a9bdc777fc55d86b6bbd16270bc4d3cc75c2960f2a7a661105184b436a31de2cefad722a14abc1cd2f2c75738b2c81580fecff78d7d385b20d1a03d4aa2c21a168e13da18fd628e34be16d821b48136b6dcf7594ab3e1243c0a2a9e785fe40436cc6fc460879b673b068cd35a9114b59c2dc61fb875310e103610b74aa5e3620c51a257dcc3b9b0adbe774426ede0f779ea9d370f18a19d8844ed9f5d90ebfc4e0607a467645711da2b500840d4851e3de63723283bda8d08acc51a012699df0e8f5aabe269206f93ba4ca6597e17cdc01d2ead46b5dd2433b82237da01518ee3168b133b6a42e9a73194fcf9162b71d08528254c34b20d692e141c657c969d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39c1fd7fd0bc4578c3370787ea5a133e8a34ec9702dc1456c1ca7f8c3cda7bdcb8beed72e4098de5ab3e467f325141a324ff55af1390ff6f3d0cdf680f4319378f099604c9044025e04ed1af1ba5c74805265d8963684c7555cb835e8b1bfc162812698679e47b96744809002c805b75bcc5233f378fdfdf3e56593bfd6b0228f416f58b4c32ec0c2d32fe113cf7f3c347425b69e8bda1a2c5bbc3cfd0c1bbc609086d91175fab0adf050a8b3e904fc4a700d747500433fb72c55cdc25bd283d1bfa1db93604f18b8960127e9b7080227235e6ce234880de8e3c49d5edfa205140b8ea383e546e0bbd4c5dc59d0c058670ed91a02a3bee241ccceac20d434a442bf35ec6d5922196d78b080b1c14aca63b827434679d7b6e666db10dd9a85b2da60c6b47fc97979974f11b6051fe9378d96c78328ccf4e5cf5c120c2641b3f6b7abdfd0832fbcf59fd3787100032ae65aef2b076631788e7be1019feed9b863f39759525be659f3ec50dd7e9724bf6d09d8b771bc60e8a8e788ced8d945c89ab"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "530bfb86fd2a4b31587767d5809e5ec2002cbdd9121e135391392c242354844a9b4c8993ae61bd85810a0ed240203cc4be48ded5997832570875a7b775206460067b30df7c3b7f7af9d98e436f0007ce0d6360de0c1a4e75912b885d1154ebc25df90465ecb5f07a6cc477e44d3579f3a629bb49b7a19a619f44e6b630b684f3ac4daee5eb386dea0386593be825a696656e130ec0e4a4bd5411c45ade6ddb4a6284f343b0a746bbaeaf03cef31120f19f2845dd9a7fb818406b0cba91598ece880836e0b17e6f375b8941381d0b301d0ed1bf746c992649b40899d2ed2b39d488981970cea6da2453b5fc85f23c8d671a3c7544f4a7133fb500f5448da44d4c405bb70e85aa3aa399204148c01d1a79de3f784dc5a9141dcb41872461e62deca48dc567b984ee80097a099290e413e575411faa54f7f3387cd7759f71b8013ddcf9ff2079503ef802c54fb731e3131316c93182dead523f41551bdd3a96a4261bf6c3dc72a952ed4b7cc95d116741c653494b5ba8ed9aa565ee57ad22a4dc83"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94e0075930de07ea37f0eca5023be15c472a674513654d837befcf17765225c73d17e93ac4c69d855027747c7ab81c6bfb3080ccd5b6dbdd41e2ea4871fe30131bf2dbc143ddad0292dd4156c60cfe5172fd9703729daf99b2067334af23a2aaffd0f74d574955c406ef8ccb1796189c140d1a45701c993737b9de11e44112c4df9a5b2c7ac827c9329c5f63f4bd740f3f1baf69a8fb6b69ddf500272beccfc2f24902c592b91de99783242fbe9767f3809b38368f04b02d973c761fd999b0c69eab43a2187d6de4fe5455e070e20bec5bcb8ffa5e439b04e3883804a5dbeeae652260a405ef5e2e6b9b7bf7e8018065a900cd831b05674a093650644c42341c3f5429d59fa3aa93737a6b525a80e0748518cfe19e6a4de792d3bf842e2a864f04da31a8ecd0b191ea656f1c2987a1973ba1b10e16b09524a3cd07c96814b395b29ae1a434e76bde8e0b6e4e29ea3c6871ca447fddf077f53a4c2c3499c7e96dc6de112cf28ba83d8d274ec03fcd1d570b74e22ddddece554b7645380a2a7483"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3e65342b3d9322ee9b0473f54f0c3be5a17f56f2cfa5a8168bcf3001ca1256be867d3a575b07c3d7d020037590aa10d75dd764a1d57a123976116286ced29b68e3b625c3ce0c235a629e27e4f8011afe4b383117a8bfc927a7718bd81ec4a156ef6ec5cb206c2f23941b595ab3e8e4a3eed825c8e2af444cc7b0ae0e303c8f109cc149fed6e8a2679c55a2f483dc64642170d0f62f0f20a5387a80c5ee3e72d275a8c3e18c65de6f9af8a7ce886b83d84cd0270bddbca64db5d6de42619ab0f37ec18594a09a80c0183d44dd3ec6b46ca4846daab73effe1d5e2d8ce302db26708ae9223369ba5c488bd11ad27751abbf994e2bd18cc999dfff0f65e8c6d6d04e229252a5d6704483458d7d094dfdc96cd5a7b0573a2e0b50fc14a8d291fc856e63d82343534b75b25298c6ab7af401ce1215cebedf87635ec80d0cc228831d26c40efa5997105fe4b3786d0a44c17be443a67181d35a5ee56da18b7e97db573879686a406c3bf340851d12d8ed57c0530433d655aea85eb3211bb7f128c91c0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a7ecbb2fac0916fc1bc793f4503d496cf2683d1529632eaeeee4fc89bb8174e7797a8d78faa95a52da0c4c887585d61c680fc4d1224e02d3a0dd2b33031120a14be8ad16e267656c683c179d261f6aa6089a14122168748a4bfccb59ecb086c0b7edd342bc61d2a9a2f5aab2f4558d458971ca04672e513d3db5784db83fdb93816bf8f1b443470973d96ed20a7d85adf93bcb497ae07022db0f939028b9387a1d448b3fab2408c2754478621640cae0ee6af76fb6e653e4d418e83d431f7967e435b748e8c7a26384addf77115e0dbbf7cb5be6ec0d11b183edd6def81d0554a2e7fffe692e3cdaa6c138cd73bff960f047c0226ff0ce1abf9d16ecca4c3b998ae8ab1fd1e35f80b04979ecf0338497d1df5cea3108bdcb1d0bbb6636ae234cd81e6f2df123d263ae38924783a2a11c85b7605808e84433dfd72d9ae5b9d82fc6a8cf385b0994d32afabf3ba62e8578ffac2073d81d69c808a2c9f46b1115ce7f26885d1be3052ca23e2cfd05e92469795bbb274c4cca1b992612d0610c27f0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c2c6b135814accef0caafe8a22b8cbdb832a30c997edfd33e01a9578e309988322f08c64704080dbec0469274fcbfb131b4388cc1181ae2004a63cfec1080087dbd3b9e7409fc0f960ca721d456755f1bce99bc91ba36c65e747e4cb693ec4253f0ca37d8b9d64d5f7d0526ab809a4f476e6537263adc00f20d4261d78e5b6f22896706c665e885d5283716dd959400d2a7cb35974a3a3adb1a4bf3bf36e9773ca539787c0f6a05d17b75837452e247f065803513eb8c6c995e989a52a5d48bec77930a91cdfc1f373c58b344cb1700b7707a1801a758246267c8ce932035f8a93241f57e9ea8c4d2dab3ff4c5fe06caf37e5c996e60e7bcc4f3a6176a69e61df24f8cc080b7489bfd8395d30b6a4cde92ede49a26a0a03c766cef25ca6bf982fc3126ed7b1b1b2bf4a7ad9ddbe1a3a456a6720953460cebe6e1bd5c333b9ab2812f9b47452b2759436137424832753d8a97fd456603c5585620342fa1dd056be6247297d5758529c152d24fa2644e613244dbb66815278385be78cfa4224b5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "27b9f6f0a34cfa0a71fe15c15c910b7c8f2096225213e7021649aa3689ccccd5e2041578ab5be9d110a05456fdc516c5675561dc82a23fca94cd66df6dbd4b0805ab85b57734f5dd2d6efcb1a0bd8c3da6f8ae7a68f54e015a324212b916a0eae4095975f76f509ea383edc4fd888217abb893693f821f4a3c72dff39dfb0fa7abace8c16151d01bb81be374122f0e479748df2c82ec87b443325ba908bd00b2cab985e64c7f6a1edc62787c64b84410d93ffaf6d9a33bf3164e4348d7e1afeb6cc7d3e8a51d723ba6ff27ff5ef1358001ffb8eaf651cf48ca5534bf5d86650e73b540226fc2a2c1a7c52e6003d89a108a65e1c9df183b47d1753ea697f05e77b3a13cbeba8daf25683a6bd423b2b7acefa66eb5e6d08ac1984007aedb7df5d4fa1da1aa3c6ea5f383571aebfa42ae1d42060d996cd9dcbcbfa605f002dd7ae653e7c295eb3c3d03c9f6c479068456a8b0087f0c61492ff7c125e3bffe30cc45a136d72c75b047b246dba18ebb41f3fb9ad0216a09d888885b4402200291e6f1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39c7a8c06ac4835655fa719be214556e0adc5a00ab466d88d33e694c30882e7c41d7fdefde724fb8255a44ec4bdbbd03d1ed528b4ea980bde20717349c0f2eb78141ed6f4490173e62cb2c48b76357c7816d1b0eb5f85391143d04cf6a100ed6917c46ec661a35860b3210ebf71bd7e6b8e4b8909914226ebe925c99a7a5a66f1d02c876f25d80ad4482899193d9a444a8a1d0ad8d5afa912b53995dc36ea89599f4f181241a6f4fbe698de8c7c794a82f1f576c255e701751d3815f5b6fe93efe9a678d2422ec9a4a5d090beef2e552db07a4d146f90bb4cdf1ea6fb844ffa1948542bdaaece102fa3359d2bd23c6447ddd64dfd7e4c94c801c2b6ae17b07b07a4dc79bd69ce5ec46aca637845a0185a372feb8adb7d60996133b9c37c32a9ad869ff5534f39aad8701e3487e1e6c8fb9ddaf71a1c34374a09ffb85fe44790ddea79439bae8eb51ce12e5abed6af335ad1ddbda07a8507b6df0d0f3ce80dec487968d29d92a139eb1d5ede5c28240320c5ad9cd0edefb69fd156f0626f6d45d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c8a79462d5c62f418c83b35e67899db78b04883afddd506855ba23e7ef8c5336c1492faeaf1d57444d1049bd008c317fe7249d5decc09fb4f39d7858edd097c3949c53bca1a439674a61b355ff5a9388a60b7d5c7255961af7079e72c07fade552d0b77c36ea3d2f0c7c9985b8ce478df8658de208dbf4690299db7f1d32660585b918af94bbedbbde7ae9444972abcca2f6b3c4004e3c87940793f1a625d932ba14e715dc1b5f9231e0f34956b2920eaced888b3a320ec8376b059fd48ff369beb1ebfd32b9e9c9623d28b54856919b3af12239df425a055cf43e448541af94b88a223a90580977a72782b831ba0a88877cad65f8fb49c68d5e3b2f6224637e61f4b356fda8b8ab916cc31b18e6f92d33e0e27971a480491fde857715cc55388b281e7d313ebb0abe3337f7d4544ef9d144e402f49c2b71eed30f8ffe8e600c31de5960947bb07fcc4e15ac0d7bf00bee0920c9f092c8bed16ad9ab7d752433a96dbe49ac2cf33445257a51dd347dd77dd5ae0d08b223c457db3b57d727f52"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "93391857ce1fae6df31b1ad972189803a1fc3ae91b89a264ff86246d6efbdc599003bb7c35814a4215dfdd3932834d4064b497f464fa93054363f1fa5e365825d1b87881e125a50deaf22d75aae32fc0fe1e8f3115f7cab6af0c2aca54d6f21f5a72fa77a0731c9f8ea82ac2e31155fe56a7950f61fc1b22c274203ea91b28a4bba0a925ecaaa017b9258e1d0f492c24336334e328054a12df916e1e4108d0b7e5d8b2bdb3d4a10282cc1653b9df2a24a7ecbd753cc7677c88c2acb7f741e3d56d670c226a827fd6b19aefa445bd277eed60dd13619427a048616dd26770ce76a3031bf5856b50f0ceacc7bbef257d86f6e9fae62aa6af550c9d526a6076d1de77a9097acc15728cbab9fedd1428c33a89e07c0a49dc89822558da1da6db6f8f738ae309fec8f033ceda8773ed3eb5bf6203fed189c3b7a774cc5f44073dd0db9e4a614bf7c8005d5c6e022fda36b82dcfe66f4679eea23269ff39213851798e63e42c1ec5be20b3cb5e20787597b43248d4fadd1c10cc94d066639736b7781e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1d9a1575ce2cd06e5f160063d03199cac5e912cea51439f738d98ede05aaf7b821d8b26082ecaf4d12fd01d0f64be9ea2e1831388cdb5e7c7564b73146de8f9b5314ad6738d98e1053ad0d7d594425043ece575c75128888d0d7b090ba5d5e008be46abadbea23c9b7741a023151ef281d99fdfd684408992a8aa9f2c85376a40e53d9d223ef4ced563fca832ef03bef29a47bf381eb6728830ba37c69a99568494efc85370e8e9c3fcaace1a59d6c98afd03a0e8bd5da2f5c909df5710e385ceac35ab0fab92a6cd918ca8d32cd5d4bfee5dd644e0adb3d188a5d0e7a20a305bda34ec10bb65c922a0c074e8427cec78a590c095a0c670cea6d34bc7a88b2f1f06b00b368b8009cbfe6a14b18bdf2b01caab7041d46e6b76fbb1f63e9b309f60fdb4f1a6033a11dd7dc1eb15d7faf922b3fdde28796c44e226633813a969ae1fc54388525d0a125414060862718bd0ee1337de2133fc773d06bf83987a22e4d2e883765e3affe55ff8d92771da79ea0898258f0d7e858fa3937ff24f122669d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c0177318feee842e802480dbe0dcfc6215d75431a30bb8492cfb1cb84f7ebc73dc37f56cd0dbca1f6a6516c6eee3de3addbcbd569bbc79d533a4f5955d95babc717cd4c8f5039ce49ce7dd20aa44bdb96a394f8499172079f8ed20c4ed780ffbe11cb00d04aeab80c882eac517c153993892549f2d4203d8e3fdc719fd745b06103b49f54ad51b6dfd0f4c94b08b7059875073ac11701e16af0b73d7b305d9a420fcb560b490d01c4afcc52b9b21a467e95bce62da8f559527066116c602bbcc29a434ca04ea3227a25a07d733f1b867040ad1c85b001904c749505166635c217d8858e637cbd74ebd1b86a400961f2713cd00e64947c2b5d2b97a4ef795822eae56328bc4bf8e8c9c8bb8d759a3743cbe9d368d985299d8338796ad6e24df7eb7db18147450d2db91000c8667681b47aa9f0f2e08b48aebadaeeca32976dd03ba94ae72950803a07f566e091670c83c8ad01cf1a2a921467010c20975e1b9653a7b56d2137799eee863a576a2275c33320445307670bc62fa039c7cdc8094c1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5675e16b96e961dd428de891451ed0d23706165d65392d277eaf846e24f0c4388536b2b52e519c07d0e10686a164bed5a05314249a77f77d140dd16d42fba947bbed204ef4c8a958e49f3aa4e62438ee333812d6a9719ff166839e467080d8762a4268fb575a33070209013741ae8ea0c757bb44d12450579ac8e22870569c6892edf1fdd0bc12a7823b695c4c90e93c3cea57c2fa004eb3306d13ba60cfa7aa3f1465a232c3f4cbb765a82bd59551d0f130137829871bd35cea7c59cfa12f188c91dfc214d8102810a7deccce40f204562993633ba4669f4d7d02418d5a66db59af8ad001884969b8e00951492bd846ad7db619d623b3466cfa062ae9282a1cddf150e761c90a3413e92f2f1fb2b5b62d410cdaf6bd8885d635f05f20331416fc3808fccd342764b7c244c1aaf78fa7a1166b1b204058a16ab750ac3fafbafdb2610f52164f75e7cff8a4c3cb899ebd5fbe1834682ee94e6cd810a4015ed7f0fea7f1494c5a477b572d172056629320307e8ece3f72de5dc0652e688d79d154"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "562cb29e3b27d68a9f8741a57006296a943bee15c1e0cff97e8748ad822a321234a15fb3b89f4e07c1756d693507461172981189e9191e0175c71accbc258d3e79bbc627365c95f19fa416aaabf223bf22fbfd46cb8022a88600fdaf84aee70e9c8939e24de4e8a5fb2536c4fda5e3e3d71adc377708c1f4d7982c0c2267265d4f85d9e27f689de2c216a21239d6d4f95dd30ce102da43ec1b3e72ee5696db8c63cf06d94b8ccba75e197b2d26350d35336475f66de615daf8c1900ba37d7699ea881c0f7af84e936c402c08e15d3923733aad0894b4e78216225911ceae7f4c770a17d90fd7178a196050bef7218d7e0fe7fd22eb5c3854c806a5cd179e3a82b59d9b4e9e2dd1d4cd998ed32ffbf19a91cb19149c948b74861fd0e92174c2f35c82c9232a8413adeee723fe489dffc8aded50c7716403c02549802e083f16584b05e3f67a4e726dd8ec6d4adcfedc0695a47ab75e6d0b0486e946b6485f89162349eeeb88f20dc3095ec5f45bae1c2b7af4352138e864e6fec18b9bbe98fbf4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2302f69cbfe30dbdfb830918913fb556f2634e268210efcd0afff8bc527fe30ea1dc36833b01fc1b7b1d8781913a5004a24c2412b9e0713b84f228b6b08349eaec2ac6908861157576c89bcf472572be53c0075e48534d335b954f46aa456c90653912e07137a418f8eb59329996e86fbcab8e585d80b7a8f97e7aacad3d08d24dbe30a76ef8f47788d36926e74c0f24df942f73fbdfd649ffe9a952acddf3fd8ed9aad055c3a950e749dfce25d0c45114f40dae0a449f23d7915dea8ee1f6f163849affa4b7b8105badbbffc5690190fce192f4a647b81b14101b4fd9b1f0379b08379901f0908ccb48d5c88e8a3d0b6563bf01117ebcecbd84dd61e6bf05b77dd2a3c63d9c36a394843df28b8184de81cde4f381eea84822002008938d3549550cdeafe31606fcc282ef2c2a4ab90b437d0975a6d576fb705e26131bd07add5bcd34887496b653f3e9c2a7760eb367935cc8052ea896c6f2023f0d2a5bf3267835cb4adb079019b8974426953ef1447069a79cdb51fe8c32fff14a9bb8f78e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92218f94fc3552f215e98d21758992429cb17fc3313f780feea3f482d0e32cf97fc8832205e74286e69a1fa35062b984635687692d15e6050376afd8e8501b4a07e8c61006a2fa6eb27e2a4c310f54b907808027eaf9cb0530f8ade781c4fa9095a41bb6630c1e0973783eab65cb0849f9c8e89f3c997ea3ab930b4fc629028dda3d5e0e7dcd99b2951282c31b8e3739b6724a414dbc254802e63a1a6a268e7fc6a91934cbb27d9cf0ec994fd02334a7451c3658e7ab13aa5dd27e81736c9cb316679eb9a3d3f87c3739ca07a7be08a0402ab2883d860867a4eccd2476c8d9e37e2ec214d6895664bdda7ce7344c95622791cdfaca32508c8b7388391846b720659de2aea7bbb84520fae9edea66638270e735677f175f115c582f8d76185e8edb3d105e3d6c0f490ec486f7ba41f750add6d50997ec85ed351a2b14a4c328a41faf70ff3e50fd4ddfae6f9c74fd72a7c1bc0df045e31fd72f04b6a797e0cced07bf2fce788d75ef6d783cd6e4eff98c49e99487c76ccd4e08ea26d36c29aae1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "55a36002b43d9b5a2f99ba0acf767cb04b54b7849fc2443d123bae5b6c6b6fb666d7ffb96e09580462df5fc560cbe9744c166f8f43be98b7b61ab71b86323d771eb6aed87ca4261b4e4d76af84813173c01cd82a87fda653c47f3700fc2110a852def8c785da96dbc779615335ec871a31ac3590562e8f50972b5e217d45089a217e8b0b1905693e7dcd121542d11c0083b967b04a8927211ce89262329ba2f7875412b8785ebe47693b8f3b76f98192bdadd3f4359999d48d751290e87264a5f2e53ef5814225931b253b451a3246f22ee3fc7295806ead7992bee92e74b19dba84b1228a8fcec6fc0729f4840d2b467956f86a916129c57025c7465fbfd760e0ddfb480f748c422c08a98fd0f73a5ef04b28fac58355e6d9bbeafe84d0b24e6ba19ed317bba9dd6b9f0008d5d150b3a27b839ec2bd72205c345211c99c8bd92db11c1bc16415b082f0e6f23bfdf9fb00b80a6921a023cd2d8565d2c98c60b5d44b2593126f6ebea96c6529e54d3f2a503262bff664c955d6435185247b32b9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "79ae98a76ace727161e1ce51f127445bad0f3aa45443a099d246b3e04057097bdf2c99e744fee3a55a6feb7f386e89b3b4efca1cd4bda07c0fb4a06c3130c9d23550f56899480f4dac7b74af496e74271eb23f96236d61e12d5fb616b3bab8c53845816efde0d33a8f041fd0b8b01391e99811bc4723941a0b5cef0974eeeb2d4726b51e9a8687709788abc5376374af650724ba6aaca36b854afd09fe978de357de3ff1cbaba28b8afc24887742656fbf6007f61715e9102aee9c1544d8e7300196f5ed3d86d3e665db7b8f98d16d249f92f34b0faf3025387c31b5aa572404b8d3338ead9d7e4a9891f0796cd6866ae0b34ac57592ead287b984794d6ce7da2c89ab5b352b79ea94f8c0a47e03eb11fcb7cb55d2d00a88a09e22b9b8d5040003e4a8b9b5d411b21673ecaa59424bbc59a2e564d7d7fd8a3730c09eeed6b6f3f1a6af60b9e96b2021e27df6893a8c9c7bfd394c7aa02bcf2af96a392497ef1587cc271755b84db15957d30064fa1be2bfd8bb46de4285640e551bb8cbb843ed"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3894bf87b1af9047d10bbf45a65671c8f96c5603ec84ac2edb97684354cc7e1ce2050afdce800626c238b3de0b7d94e59f03c1926fee2ff49b52b11fe64c8825eedfb9fedc4b58fb53b9bed5d5f0447514e6e5af4dba869632bf92051e268835883d16f08ed8ebbc9ce5decfba43acafb72f8776a2cfcfea0d2b43e17d4185782cefbbc27a3a249275cf47456c1486fdb57396d5ac0321c6676432d25ffd946ccc781d521c67995493ca3e6fb05e46a1b906cb0e48096611383a072d5a2b0fa58c003e5c58311267922bdb4217a19f9405b79d0fec5a177de5247f1f939d5b9201378d09328aa98d1e5a7e1efb63ac9bcee721208cabee3e488a4551e444d47236f89a6846d1459abdbbc2096cd7dc1fe69bc3cad5ec7ddd02359c6b96398b455a39022129ca179e1da702fe7019f9d73b8a8bc25fdec727bb70dc1e69e57faae10c8fe6a71fc903b1c2272901a94fc2721fdd8642a61666211f8557bf5f184e524ce64978596e8477ec4ef9abfd9ebd170ccb632b76da9d015d3d7f3306a0aa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4bce06246b965920ba5768f11973b7773576c8ca811031d091fbf88f0aeeef793859aeee2220a543df5dcb0a6932ab7eda80ca2d9a45687d00c570c0494deb6960424d936a21664108047a4b4f0a3f120d337c7e010e56098e9b707319b1e306a499843d53ae351db6eac5538a4cef9d49660345bcb5bb18900381850b371ad17a47ac57860d1ade90b839402c6bdd8479c79e27fc9cc3fbbb8ded4348da6d70ceb8b6c95d9c8efdc6fc0a51f952ba0e7dcd21f28dfbd39362f2a817c4045b1a3cd6da4c2bfce76516bc918a11dafb9f0c4776bf3f23802b38be8d03cfdc6b3551998842a028ee1585a6c232409469a869b3b144d5d02debfefe09a8e14d0e915dfcc722fccdb87e055929140257428de416d6caeb2437857d585ee6c3a4eb64a5d8f51df2050f28286e3e1987c6e3e3b22131597ed1c83410a2569c8d7cb04a80ef8f37bd043230502987013f560d7ba865759a01f588611d9a9783753093d87e3da0827c7903851ae9601d1d0e7766ba645a0a386d49ae2c5eccac6667f449"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7af993a700d939dc8e6b16384c311e092883680d4825c26cea5c25d4b738365473b0dbd01e944d84af0f658993b35c1dbf8a657cbedcb1e4b003694aa401c8e568b4e65c9646cc861d689c02f4f1b176acb79aa8eb9006f0f68da78f41eecd4869ecc576f849e9a20e6c1132f9af34eb92da154a459b5a3034abc8ab4c5b26d8721b89ae1099f88c971a9cd58c28369a9274bc7e2df4eb2dec049fea944ba505f61f3d6c4d65e643fa15ed99e915471d2631840ba05e7e05c714b84f102c8fcd94fae291ab216f0845bbee06a5452ed71d9e429bdbd50d11710890673c28de3cd07448a68c92ae052256837429590176c160e7eb42371753e778a6728a40dcec33d58d46ae03ba97fe2f337288a7ef67d71a42ff3944c1a0ff29b8d59820e5b3429342ac74f2978bcb4b56d455ed7b0f035237863f0dbb249f570c591d46a67ef2ec54bc9fca010d9b6c018c415fb4eaa81bb6fad502c273e72bae7acf4b4e3497c9d42bcdbf731c0bcd04604d85171fedc4b750b63d31fdcca389b6ff7e6dcb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1123e2e0acbc7c8816b6dbe2af9359a2e0b6c10dd522bb3fdfae93855ba73a95961290ed808b3ff8eee8a9f58f3a77f05d03ea1c09d849080c415b3d4214a706692fc72692a75c07b6bc21b9ba4e79f842519b1a5c67259f028995d34c993d0ee0d71262892e3e76d677e838a308a2b4bac5fe20a6ec073148b1a420d5eb5bc4f2c9a45b10ca993d51be5146ca9ad4597ac6ef522e0441e2977fa6470545b086d434d69871561033419e8540299d92f5425e91f82ec902a2d2f5ae8f9017131644107d120786802f30746a116cc67f85ee9676d1738dbca0b360ef257588879f2f6a441d66d5aaa20a98ed3f57a73c3b96e4ced07b8129b50865efe1b8e20f0b81ea5cea294dc99f67cb515a25c646b749b2cc3cf18a41f1e3e66d77710b1854c3af1938a74c991a7e7a93971acc3fc3de3dbab92a84b498d711718106c98c3fb39d3c6eaf5c3621af25d3872e0de8d7588f742183918267458e5975bf5cf0f6c43846ccba256f76529580ff9913776600d1538002690dce5bfb8cc3356d96d7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "194494470fb927c96faff5627eaba83b85cfec16ad38d166a5d7858d6c77580a4a8bb94c16eabf9b22e7653b7957aaed312695df9bade2b4722dab393a286fc2b734cf6f7876083d42f238d0af3082eaeb85e61158e9dc352bf151de4f1329e7c379b40aeb312fe331df8c460c423ce08bcb6290d7e772a75ba6679eaf4be77227c296246eaadc05fe3451203479eebc0fa86ae86ba9d3b42160f0f58ec0652805000ee8e520fd58f80421ee5e78436ce64a58a8273d512bffd3794b04b37a3f83e7b5805d19595f61d07f7a4790bbffb57565b27e8edba4273339ca62fa711c22ef459e78429e9c1f06f6cf8c6c8d5e0aec1bb88bd29a516f6bc1789fc790188c26c484231a78696bbcb181f608b08084426e49daef7d7cd080ff0a82f9c70605748bcba1fd4ec4976319de01a44b76097f86e627c37c37e92ba35bdd51027651b47f9e87e8490f7ce2d2ef8e1566da7f3bfa880e98564bbe2f80c642d30949391081801af2bd79e4a9de3116658216b9bd7949752661d7ccb7ca3ed5918288"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f6c7acabb5676d40357d7f58dc188aa11da3b032e0fec24d1d377e9dc4aa71d52945873bd82a6b1540b07f6bfa3158a11beb46513446cfd8af28118e693a4f700ce677988221f2cb0f308e29b42feb8c5ce768e34a9ce889fe5429b6b1d9dd5cce537c311228bc524a983ec83d5326cf1141cceabec8170a8ef00d3e003a86962ac760d6de2f906499e60ddf6cdaa394ff2880c4cbd7d658e02c3babdc8c39707e4ab59ece61eebe3e6266d635e0d594e1cb114b699022149b2105157d20c0d4e289c8558348820250a03931033b2cafd400cf62c21a617b16e83cf9c4a79a1df59101eaa180d8b61e5ac2c387f190bc5d01c0766641c8e796afdddaea9a8f625a7eccef21cf8c9bbb391f13fcab5f253f598b880e0391c2e34a64d1aeb028fcd84a3158f692466cd953334db71f4512030534f31a21eb65b459969a00307e9b2ab828f6e4966fbcadec694a394a8b89f94ce1eedd3d2731fc01395d30794ac2abdb0b60dfd14a46b533727d137168fd5b42183cbcb79d38b9259b725fd2485"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "315f909380797c58724f05150a19becb372342fc5fb8f0073633808be07fa49be3cccd3892417c925674707c1e36e7188d5f1313eadf99a9907d6b0ba2093ddaa28c3e030d64448d935e2a56b7d989475a7a7e577f2329c6e8e2b2ece2a553679ec90a15089b494028c914d883c460eacaee1eac472f000076a4642136ffd2558c5b7033d71cee3a592899fcdaa05ec41de962f19060a32ec686b34f85b105a413f3baa819bc6cdea0f00fdd07900a8b041fde463d7e44cc6c45c48f7a1974e76e0fd67eb495b6448d739fe091a99eaa79f8436839daf485085253ced9ae1d5ea2dd5135fb5caa44d51d728c4e70479c6f0c239fa585fa557e08062edd07141754543c5af6e554afe5b54e7be52d886c83c7ce6ca9f3fcb3e8329816cc6c0d046bb1daeafb271ad6ed3da795a1b8fbaa3a056d407aedafb457045b6e067582be605a7abcd4643bdc2fa492df1e0fd43cc3e8cbac05ae240392ea02db489e6a5561895dfd14f47cb5ec6ac594427642eac91cafec05182f3415dbdfd12a348c3d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2bff6effa697277d05bb0a7c6a7f714a0c2f23f9870f51c6b2a678d3b06f5c892d75f377f24fbb14c3c9aba52ae06d3741ebe3e116c0d49dc4e651251367fc63720c8553646bd7465298ccb7b4bf765607dd05052fe5a660c84e0e516aa67540af1ca35befb2250602742a53d4cd97cbd98b9136049336e553c3e7dc64eb39f3d96be6fb1146c16f2180992d0f16fdb9a4c9012753901fb7b293e6af23187c76d9ef55a6956b299bf9e9c9c27c9a4fd524360a4a6988ca1168f35f8bd2038869d77f117ce6d20e710a78b363973a08a5eb091a5ae7332e83617deca9911a2b241aca731624905b91ae63a87045bb2c356c934c70a6cc22bcecd7eb26adb6f98b1c1d727582d7329235a438e1161dcc01f82f760833bfd8d54f8d856ec475ef342072c3d6066425cd0309c4bed7a0861afd7e64b92cdf969ca4d2655a2ee47679134fc2ed39b41cd1cf2665eaaf1e21e8bb9fe6f19b16a057d8277d68ea7a240c95978deedff766e84ef46490720a3809e3ce2a9994af4a04de2059c5a393cf3a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e8ac44ae4bfe2af008414861bcdba58127d547d3b4ba6516ab18875ca3dd015dfe303d54b50b2fa8c001951d16e64aa9c2b14da674b4547317f14d2921f1f22ff72f1529dc8074725872720f3799bb9364e27add3c4eed2da587a6a8fa45387a80a68b879b309447874b8d81b74c69486c53aee543ec53c02433c9d405b86d0bca97b34f38db3e7536b838a87c2e007cdb675b7c93be81d1b102ef60672b740f3a9c8124885b6228bb3aae713b69224c5278cf9d4b23028d8fe0890f9897b215929e110265d93b66b98357bbdcd7efd51598012c313b120233911001a8519a9d98b742650296f8c5a67ff0fd0446b3006ac254cf8085036bf6074da96230fb0ccd02fcd95fe4b1e8dc7cdadfa2677da92a80efe36081333c557a4704422c3780a00beb6670a7ca95a30c9ecd78d46c88e30a081d0445142761ffa4e8c8682610395d2de0602043e6567a6d62a77cd6c697fcd362b13aee3fa92946036086ca3b002f1eef8dd5550a4aec137a6f60f7d943c9522f55cdc14dfe58639b17350a3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "83dc093ac399d896efeaf13a4e5b9f5404592c7740af42186b01f2147e3de7f3f46ba323dfa3dec885e10d92c4f5871f50861dad583794b25e3ca2b68eb1458ac3640c7d13711d3338dc509f10df2c52620e0b7c2e2a72608fb52b981b6191765ffe4e675c6a7896c0f026598a3b156f1777b781b6ee688ccced77b95b61ff54b1bf492cf732b9c7a8212b18b5c899929acadc622069c6b4b905add8de54a2332436b5e6f6e16d572ffe46fbb76067e1c67c7bf58d449d2cecfebba5cd7f8246d6511cac17b106e7421c6c65e704a2496773fe86b937265cf27e81a37a3f4f5b21e47fe214e84a9163cc89781468b3e5868ac3414dc112f0fe159d909fd312382a8b76fe194c32bab360d9d694fae4a1c9639103556a7d283252bc922d889c0d5eb6cc657373bbb02119cc8527e6aff051d555ed12806f7b22a5df8bf13c5fd35d5095ac6af7e106b02d4b18dc4400d2404a3221e1f1c8027e722ebcea1d6271cb878d0e6b825f4e3a692fe7eca65c4287a63a3586810c3865cbd7fddf450f99"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6823574bd9fdd7e59ced33e5660e9b5cdc90417fc350cb4535d78dda72c07ce81ac1aee37b90a85ae15f8f59be9461e846a45bdaf3e5f5868b83d1c9465b080d5bffeb933aa9341b6d508b059cfd2e62dad31f35d7fe9058bbe65024d0f73d43a3450eaa707957fc452a69ab9a8ecbb8ba002c870950ebefb06fbd9399bd08d64f72dfb4b2d3dbf662daf7c2c1dd8c3c445e1402e2009b47fd92c3a23864a495037b7f2fbc3adf19355f171e2a9f65f5a3a2c45b131e5398c434ac6daff018e5b5e44b9cf1564cdbab39f407a334fe1f05ecf84f49cfee88836d1068012b4fac6b50f85f8b1a8c37a333028e38f719ee6445a9fcdf7bc0fabaeff32dea7e45d6e1c12003cec8dc5680be584ef2cb478b9988fd7484e8d374d825a95efa5163309eebaf962d0b8ead00b4b9e4791dd5c6bd26c085c96462f2e4d19cfef3a0a97cfdbceb8c6ac2b45aac1df4be4e6c775021c6730e88f86babd96bddeb0e36d0fc573c9ea9346d6a93bd096c8fce248b93dbb0ad00596788cfa6fc0635fc0d0778"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90954e5cdd1888a510092205c3f66fa1cc9ebe82b14e80e0353ffd417876c69701801153402aaba503e98fe9020f54f717b0af8968fc2524a3081e709974ca8001dd93e52fe0d1782e3eba03a51d260582e4222937252e454ae7d5ac8ede7a4888ff826547350c594186126efac622a44e9731620a57cb73de7e29bbfd727c2dabb6a5f6cf3eb0dbe072990a8b8ead67b8a719e5734d7f4d96fd674c404491becb4b3ecddab7f872afa3326b7e18d47d3332f654793323e13b4d9d2f77871c7ab50ac4d76f57fce635da6656b1e09b3571b8e841835023b2226a4ba8cd0b95588b0827bdd4b6f45fd183100d327777c2bdc0a0d55f0e4e1760cdfa7a2b701f06c0c5800fb49bd48d57a077ac90f1726ce2ead834fa1bdf735b13fc234a07685537a5eb01ec44ff8dcf086d2de02007981bd2338bb2b455a1379d72ca8a552bab119692b9ae1f2851ae5e838c33d1d2255114cb3223edc18512cd41057b71c4185022c4765049089836d62020905faf3eb92ba80dd91db64e51a75dd4f206c140"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "058742fca1521993d7e3bf04b3369a8cbdd505da63f7684ba9279dc8db6841342664a5d780dab0b87cde7b2dea6a0fe77ec1b723a47592ea932f895faf2d1e8dd8ab16228942a217db65d51c5cd29c05590ce9ddbf6f19111c9092e60e48ac5ff720e0f76cce93c6de41023033a902be28cd5c0203d06f589e7b63431dd741a3e227709e73793d0e2bbe0fd22dfbbbc1bfd8343dbdb8ec3614d771f1c58e107b567b81105546a3b2b54d3b56f8c5785d50f3cac892e03f7f879f22c80c4cef3faceb1038234e6bcdf2382d8565d3ef3ed668b05c64e08e0c7bec759ad77c6178161652b95142ff1bb1b3ef0d1738e444082f113a448e4aa7d3bd182ef8caaf6e2d07448ef5ca7cf7933690040d6d41b5d19378f41bb9cc7e659251bb63444c3983377bb01a176828dae9b255885bc0d872d33a0a257940f3b30b352986f201646efeec10796c6bc43031813f33634b6450a2d9a9d3d96ea95a6660caba876a0f311e4b083b25e2fa9f69e405e59fe81d337ef0b27996e76c816bfa84929b8a73"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bcf07d322c37a507d2288f6a079b037a6cfb1b5bbbe07de90c9a13b00d400f94a03c8101a2f9a4ea258e3d8ce167fd40e48e5ac42be2095302071f23596474e22d2b9fc20800c2cfceb3b92ba847717eeeb030e4304a5e1138976166ffd83467ae7790bcc4d0e1d093ff09b41b62cd389a612ff3b9204af9a24efee6ced39de96bffb1ad3636d7aba49f8deda056735afc848381546d9c2aeb0a72ed2602b4a619ab9a534186f8bbf5924618b49cbc35bb021e575c68ce5ccd886ad2d0c968292f2dcdd411826470b34717fc2853f52e10307136add9b68f7c79c56d992a08b461418781ce66311f8bc37abbb1dbd3551f924be3b1edfa7340267303cb48de616e7cfde59111dd1f91592f268b20581fd1936d8b3ace85cdf3e0d4cf55e170ac99de5bf5df69b851024858f8f3bcebf3f45d7831ccf72016877ac59ef49ed5d81112a2fbd9f97e40ff1e6f4cb42511dc246a75af9fff33bcde3ba9dfa3249a8df3c8429e700c1b3d701914802b5edebe909ef86b8f57b556da3b1f4e675711d9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c6c491e6fe9fd16192b3baf32127f4f9f7dc21b1d2950e67006453f472cf4ba3fd7bcd7cf6f4fbff726b4d757bba414e1a848df8759a0ed67ac8275962c5e812a0e5ee123fc87a0bfbd9428e9f5fb0b484bc0e28b507606a71a5df14a02e968bef67e1a55f66bf54260e5563f8cb14d98ee2567a7653ab93050bc443f6cd857ad4e26e129350cf283ff7c6141ed0a5c5f9034c5e3a4a740ec1e80017c9f2806e87eb946fe7c2e322091632746788d9763a2c11563f871cdf0917ffbcaefa858e03503ea4ac73c6491ae12e9e32f67f217f903f6cff2b3f1beaea6d2fe4aa82dba43d07fc1cadf48f4891acdaf8e622edb0c8d7e0eb745e02f39e69efd6803105fc8413f16e891113272b1c3800b336867a1a303cf8b80527611fa2328c444d293287b226ca32172af6aa79f191811dcce404f5cfda1084e8b8cc8f26c875213ee3ff2d758f58db2e7eac571ab62d4095283083e5287e61623ea9b01be7b2ad31e887146f73ef3a1d70e86428b33db66de0a0e12d9b6960c00d9048b266958ac"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43d99d627869bb5cb798be4db332583afc162875ef4200b10b0f019cb186a44894b511fb674ee02f4adb6e2d529ed86812e559797a7d60512747cc6a135dd708bc12f1acc01aaa6f6584a8f9c02351e23b77bdd2999b79660ee956e9bac5b98647068c0c6e1c5c5907f712b6993050abc872a217699ad5468cb420b90f5d74812e9d9af4e5a200212c01469799de9669f28d7b6e9726518a2c4fbe5fd1ec5ad66a1d472e8710fc5559b9e75d3aa625825886e9045c2c8019be254d2f11d3a55b9a3fb87f083a009a7a6634198fb9f4e6521d2706e3192e3e669fe201e60bd80574b5e8f66e8ea08740f3b0f0f3cb78ad90ddc95843e42bf4baac25adb2b57f667618ba7bd1c10b00c5ec14dfc3ff1f8f5c036ca7aa149f71e7560f1b1490baefb2b7d656fd6ed6e9115b9b59167a304ab7383e091c57f57e3bcf1ff57e3a4b99192b91f4297abbe9a5d94b6bac7fbc9a5bdb64657949ff0040ad276e2d9de21df2c02d68929a6c366ba3d0514b8b50ebb3224ca32ff88511d35e5ac6e51a28ca"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "544f8bc68d5fe49ca8188815dabf1c434ac7379a3796c5c78fea5fd2a9e36a71d50a194724f65cdd9c9562fbebd44f5ae3a690946fb6e528554f51353ccdc899c0c3f635bd83afd3429ea7cccef96f69cd6de7ff58ba4d22ba032bd0a113dbebaa780f149a47203a65973c27f0bf00c168382f2311de1e900253418c77d521d5c5838d4fedf6c3255d8c05051c396f0f6705cd511a94b19a96b043e3c4f95422cdce64c34767ff6373199ae1d3168b62ebc353b8c7e044f4a1ac36b1f692183729f8865d24966101ef047422c284cd9dae44f968b209cb1dc11c60cbe2880c3745862bc1c64899480ffd3229a551fa6e765f4c01731a978a1e2722f1fa0d7f235ef114523756848816cba51a561744355d5d484119faffb953f5ee9b32be692a09ae40bdd8860687197544c39535b196766e69ac8a05dc40c733a0d906d0f7735014810621a6d83a9e6234e6d2d9dc7b1417f8ff782c8f7c44c713dc9fe30757ff95cbcbd159f80fdfb86eae00bb8565d497aedbf3c4233c616ea852b60b199e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "866c67760ebdc192e302d47ddb40a927392833cf3a3a3b9c33923600fa08443da118b47db980ea74bb73518382723e375fcd9baa773f3b022d37a4b0fdfc817edf2a4d9e71987e034cb5cd80caeb97881abc45e8e6b965941dab478d17039d98c989178daa541507b84df445655f1171431da75bbac810729f973cf8f3606529c89b036e046ad7265e4e15c7f18b319a3c870cbfb7953e069794978aeabd9c20d3b8a3b9a44b68b620196eb1817d70162b22078fc4a63921a7f35c5500de7ec0aefa27d93282ce80d2ccd42c2d3ef1212c10a833582b42be78c6e866e887b8ee329b883cb08f3e374ec5064f7d1b760b717976761a44eed64d12021e2fd58c9640398e616ad96ab2e56ac95e32421f7c577e00c35b1fc95f1825a0214cb49047ede981a0db76c18e7ef8a9628702ddb4e9d5dcfe55da36857c497b44d182761a7c185fff68f136846c698b5dc0753956209c2c0e0d247b815d711d49683e9386387e82f6b4ca232b653c365485efafa988e799ce681f3c7c37275391e56a3233"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0767adfd75befa190f623ce2a00fd6c0dd2a8f1e53456489f8329a2ff6dfae00ec4dbd3156cb278c41c197bc80b260c9b8332d5f0d39fdeed33c772c45c17d3594bc37349a31a9ae58b4426860036680546c66d10d3d539ab377c2fd3ae25de99476f94187b895ef9384c7515aaf9b8d580eed7ed9273354eaba4ab57e4bc9b7b48529072dc691fd7e1a51a4164a795e2a3ccb2520cab25b8e78fa7ecfb057b05e8c056fbd407895e83cad14b6840ca773d6e6c8f2c3e7e34d77e3f746351562829a81e04450076c144176bf52c42189336313a71924964bdd34b207c9e69c424030e15e9f2daa50b4f162d2c872828606b12d71cc845e38149d76ce72cd11c33c46e837094b73905534cbe6ea9d9f84f74e9125a07c23dc32ff7535177eed47f979e7d98f62864ced2545a5e994eccce3c9ebab7c746f9a79eca3fa8523cafbe69b5fcadeafe8ccd00d91c1b0f12fc2868aeb19ba57863bea62391235eb35fa7924ba74b73bbd0929aa33862419982fae0389352840833e4c8442449a392105"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1baf2ccfd98c3c37b60101bc5c8f3ef871937f3e4cd7a21fd765023f03437c3179e6fc9715d6ae00425c7838e5a5eaaf1effe9f7b591f588667a596c539326e8b7d8765d78bec33e057a25067209dd26e7a9d149b0e0a3ba13d7af57c436ab9bebd871a2cf4f88b26da4ac30d6aeed5e67b871eca23c2dc34d0685a7bb9ece53ec9e99228c0561578f39c269cdf19e8c98cbaa2731ba1faa1008fce7df30a1e5f26beabf6cf0716faafb81d1de203a1aae8f6ebab2b123697838b3c0896786fee11e2953667900a7ebd359bb81b340c0b9e4353af1091b008b5d5f8ecb64d75c574193aaf772be64ed106b374cb842ad62adf9c98461327f254f866bc28290b425a3ec9d8e17e126fe930d58fab0a5985d7844d85ada69803bc29026e5be9c9a9bfba5e4ae00c91afcd2901bfa399e459ba87bdef0577366b6a546b91a8bd858e33a3ead31ee07405199b9638f09848af52b21092a5690719c75b28f12b983712b2c79035eb727e928e81df39fec2d939510927e749c4833c02c12139f19447e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c5dba54644047fe0d229d54710c0ed4f226380e4d1ac8aa865f3e8060ff6c5b3decff0836898d75b59d6e7a6bff092ced3782a8d46af8f3861eee72045a297b25edb181d1ef69c3ae0e69da6c04fc9286e2f919a531c44af2b2cab59a815f3c02f67a1a2d0b5ac5dc1d8a1fc7f6fd07ef6e3e5415987523d06a9a6a46a6e71f8892756fb18ad6307c22cf97075f6e3abe18992b55925d26dd2fd8227f34f992358736f22ec94ddf9b1401e901931e035fabe04abde7fc3e1b3aae5ea51d5e8c1e4cd6ae0adae1f0840a2c990109bd1fd39d6ad66cdf56b9759067c10d743f39ddf608c8fc7792c753cbadcf5ae6088bcb485c851025c5d7d0f28b099977d619b5b78c3ac9ae15c1fec85ce2ade0743c11bf7709e6e48823a9371e380a9fd0c06f2f7abf6177ebe017ae8d9c1008f04b93a8588848dc963cdcdc26ff6275a7680dc0e5039414d746decb067d058f767291cd1a0ea62850496460f75540ddda51171db09e45098833e2d67e53bb6f3ff7da92b48191c0d7b4b3161bec990359001"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a9716b7cd0e7d9b2c348076459a9384544de7d52a597fda1d6227247028e21b910472a11e6f3924118a364936c895eb4c3ff4cc4064c43175a78f0b4de4464fa32c14c3593af96f262ddf302abcf7e6756b2a79b821dbb195640e8d30ce57d216b178a4a34415dad08f4cca150e39a901aa478d3f5fe4d4ab351d41a66df0e0677780f84becb4ba59655e211ee6f421685cd42616fbba2c7cc8cef92508b022e525195476fcff4357b79f292ef7e4fc754de490400364ff0969946c9c76366f17cc985aabe0fe6011e734d9dbfe6501a13dbb60daa4c78673a25d84565a1e13b7e981157576b8bd3e33ba750c9bb7b5eccc8f8fffc4ed817e2444425bb5b5d42a5d702d8b0cc093a57336d4becafcee90a65a35ef4800e0e0a5fab2018b1bb5ea153ca23ec59ba40d05b8a3df4cf807d934483fb0d8a2e7c174eb8c3f2efa7f82ac8a047d0b700134eac76a469d6f40e87d2ca2408642218f47e4359e697c62355813e7df722ef622659784406eb5ea26c1fe3c5b3e917b13a12363b20c5d17"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "191593fff20301e6587a3e57b9228b77260edae7e376416eb8fd4d80b31a4e7326d0e59f3ad3e178e84936c66501a8fafe8f2f4c9e4ba138cd63991342eb5be66c4b6231e995d6dab798efe105f7133db0cfdebe8862b21c447a2acfa9626e4307a0c7ae0fc7f4de3c78f9ec480dc3756c4d2b8c2d748bce4a7865fcdfa5753d72f2b84b609af4c0039425a0b80ee4ebac04bece2e11725f9f766f93917f3822c94c8a186f4ff7855ed54da3a959ccbab54b7ec2a3f41073d5254a06ddd8a240a997e391b06b083dc4d9b3fe7feef65453f356c84492d3842e957ab113897ed874ae9c5ce061be8fac4da3228c0fddb7cabc89c8a2edbb3a1b3f78a8cb41810863f9b1ab8e0e2a6a2782045002d4bd07cbf0c6ce589dddac5878599be97cec0c04dc42594e2366493919c6306d1b2abb1c1279daaf85c90be4904b93064acc73a7d59eff8191e3d4d9e3a763dfdcbaea492741e2e17707285a9ab8d9aaf8d2d95cb4ee0bf1402297917ab025cbae8a201099c4c06ea7eaf0c6808d142057797b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "105aa4e5e08da8705bd94fda6efaecf22363716f59ec83d0d4fe1a40160276a6cbbaf1fbf3501ae445be06c9c04b541caf22b58357404eeed16093e3d295391732dbbc3eec7589f80c02a5f01dd2b371197b46ec2e45723f086d6e4a72efa11a609c7e528b04a519afee2d01453d8504fe4e039dea8f5fc1035918829b59940eb97f428910186d6569af61371736f3c3aa65913b4b0a585494d386cf83bf6eef442f9e763fa1f205e49a80c35c7906264d5d07012147b557d0f8f5728d1d533b578d0a8294defe7174c3838289ff2505dda63ca7a1d261b754555572fae41db05ea1f3994d4469d490fd9d251d4b53df0a7ee9f091657a717368c4275e3c3e1a2cfb05cb64cf22d1e7d9bcabd4c91da37aa73a05a2f2092b218c081217456aa69962d5660cda5393408cdf1d2c7fd1968bd1d3232bc5fb90041dbe707b63f082c8ee743cf3102792d4b1cc9650d5d9f6004a31b3b32e9613d3fabd94395b1a01026a33fe3a42db19100d3c0eda29b849ce420e4ac0c71fb9a610c730f27bb026"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "396b9f59618e6b824e1ebc57b8f18a133b49d96bd3fa39c66bc4a206e79ee7984013a324dc41d00bc469285e8d255dacd178f106c9a37f11344e21a24275417ac29f2dbe14377d0feac8061fc24d5b178762700c60d6cb0a9d3896961daadddd11712c2c006eecf154b5b0a9fa5786106e8c12cea3e3968c42a165f640fa0bcd5bbb3734c55f57d14506169d7f805a4ec4e055f5ab2f1c0b0968b396119e2d64d8eb81cd0ab78e09790e33ae752e21b1b64dd5aca05259aba1c2014b390e84ff25f2dae3cc198a7ba5d9e4b104ac6a5466e1270a1631e6ffe777860eb63120f1fe8b3422a467a083463a133ba9db8bd18978ec559676f969e5e466ff2a8f0998bab5bde97bd4b759eb3b14b8171f0f5c19a2d590a344284b69d0b08729ed67824665701c360fabc9a48cca7591e8bc3b2300f1c76e4c6c13002f53b2fd5d45da382a63c1073cc6f4c43fd06bfd4d70104c4d5e2c74ae18a5dea531f5a6c2e9e23c381b1fb0fa1fab4fc94d662db842ff202d55f8cb0732628c6f15f824aab121"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "82d26da118ac4ce272ad266f402323cfc25d45c885d8a8880e04a6ef52d7de7971b00ea0adb51768b31348f590bda5e41a8fff36939b59cd0012eccf474552ccbe2308db3b3910ea4856a290babe54fbdb1f482f524d3fe81d1037cccb5dfb6a570c898680f19af007abec62fa233f9396279d0c6f9e8f9bf87f7a7e088f9193febca5316f0f10e139fd010de1a37173ee90d2b35467b768625dc59ac028505b885934e55c2bda0a97f3def80a2e26f14a4f2f9ea4fffab807eb2670aedfc85c2f95f9898f7a07dc2295c4f91ce2b96134e92aa9e053dfc2cc012513e39788a6f0af4e14ca6eded4e8e7befa85d69e9c45b98ef9bf0a067e9fe8ba29314b2be334f4a5438ae4bae6ee85b6b9086bd3bc13838ad27f033208c834ddd3f48fcd9c556bd6a6ebd6ca625372ef84f6bd44dd0c24c0184b3815e893952bbc42fb790b472e89beb93338dfc23198551ac7257ccf7ad1ddd776c7eb620dd6e6d341dd0693dcd91cef175f1b3165cd7d99a2623c7607dec9d0eacc0b6c487ee1f90e4236"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "02cfa2d1774246a4fa94a7f9142ac84270792fba20b09a47f0ddf702a41e671dda6690451937b0063ce2797c2146eb68d2e84c87211cd3f9e8d169579e88e522c98469ba814c5a0ee2f0f42386d44e07c8d447b77b04fe3799db3f2d7d20843027408a4f1f08a0eebdfec3c3ef81e8d9b4fec722a5782b2e2e920cb60b0cb8a28e7ab9b8c82ebf6dc25d439bdce586f4dbf41b01a2f777ddefb13fcd0e268aed975d5aa986cfff0403b0bc260bdbba4db2b51bf1f0dd88c54b0a7a6bcbf3ebc8840e751c6dbe405d6cbf94f12820c536700ba940a70a4ca8aea4c7690e33ab09c0d1fab7a962167e5a8fc51e4b07c82312b0c97e07d42bb2e2abdbb57442e9a8520b0085af7f3168077a842195a4e19c7fca15f2e7471caebfa80f949528d81b619632fb3345bb7bbccc825ae8bd20fe34474b70b7420fdc17317f711495040cbaf5ae21d7cb70b47a2997b794de3d9bf805d1dcb8104b50ea69429f3861e61b1a0dbeff7a03432f98a8d537a03b37ac38d9838a7c6a7ed0977f29f96b858ad0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5efc66fac14f6c109e9a2e219bd3852b28cfaca26f3c26fc8777959dfea55c738c5c086e819377f8f4baceb66b4980de412c63fd5a1e329d13a14ffcfeaed1d89047dab579e243b3fd6b85f87069997aa7d07f71ef40250ae307b280f0db1c30a4a7c2411ef723746eab7045f973277a174068bb8bbbe69c0773ae9977a7f20e971d405bfa5f0f975b5acc17237e7341f0ead535ba863c61c155377c47d4bca280c6312c0fdcd76f52eabbca08b442e0eb629a44a0169c6c63e5e1c52cf7e2c61dd29abb9142fa7c83439306c2c1f6cdc3257ad63d0a57ee0d5f41341acc7f452519353aed51d739ea9153bea1f6f029bc4eca33ae0511db90df1bcc780b3ceb6edf3213b0b2e20530d26bb6ba112aa6e1363da049d669266a956fa36e890464399fbc43baf7c8fd3d47ec6db5e1029bf6e603b8e1cf5ed9ddf6536bd8d6a7648af7fde533bd51cd8f9a6cc28779163947dbfecbd6f50917839b900e3fa37274d97a2049daede1525c145bfd1660d4577caad7888f5c84867c6fff30ee8356de"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a4e7378d2aba9bc6cebe5c8e5603fac9bce6e3c193c1675df95ab30904a149ac3f3d7a1312429cd63eec085f7392051a2bb883c0e078af0bdf29464bac2268a8139074ec53330722e1482b935fb57956214c7445d8a778686b624944bbeee7a608dd15ed277ba378f4e2dea04b33103e437f94404a09517f4327c80530a1f183e046756c166e526aeef53565cfe34122ec23312bfaed429369ccf08f52c2351e102f439751f26ebbd5423f9efb3da3d3da0edfcfee3b9607fd77dbbcd7546ca4df84905fdfafb469bcbd78d6cfe6e420993740b64e0846b5c0026990224cf3b5e1c325326376c5d6f3d1971365ff31498089482c7df06dd92f7952e0472bfd81a52b0fcb2058f5abdc70bd7d55e2d843821083bf6e8d13b3c11cb4fa420fc90721f226526ee677a8eff890b664e2a5aa5735db7e752b6c06218a1fac315d6f1cd6120a30fc46e8ac220a1bf2e6e4cea5f352ceca4ed4c5675ebfe68ab15da158a22fd044459a4aa9673a5fc078e7851170faf652c9791b665ebf62e16891b54a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "616a47c86dc9e2423c5678dc0ddb74cd9555f63c219caaf182f82cc0b47fc5505afb0405a693c4b45ed670e009908b6316d22692d89798521b477d45c913cd31042b8a0a52626e1727bc36878d1303c52ead0cd69c0e9711e8c5693ca3fcadd48e2641cd73e40eaa26fb7de1aa89f54228fe67cef381f52a571c054ec1b815e37d071054b08280e940735569f452dfea10d86e742ee8db6c52c696699b99b730bcae337f093418598bc4b648276b6a7f65130bf8bfa1b2b2c7893e408a6eadee77bab6c28aecaa0e3a200da9fd4a7d06ab00c38e7c0cd7e41f64dc43526fa28e5d9779730b41e90b6366fa7fd10055d76c95cb694d07c3dda1776fcc774c2b42eced3c82c9327d6865ce3c76b6666770b625eb49d6b7df9fb1eaa4867a8b13ec1d15af66bb5c37ad8ffcb7b059ebd9f198fa9388d706efbb20d7bd6f1a2d6a192e55c5adbca41fbf1f27c9afe7f94775c123cfb7f1b13a980e86b812f5a8a848b9bc76472c52f31f556c02eeb4b71e388c7cdde33b22bf4a5ebe1e9e10a08afe"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a158c783c6141376270cf0ab8f4c08e5a4534b576786e0249fee264afee8d92558a2cc1224422a5b33f1d0661fbd2891f72edf381f9b52aad268dfe82effc96bbca66f4eecc7abf2449aa3fb858ef5606299af5d477242cf91e54edbe042a766cf108731ad6b7b038f28a3534360906272027d2a83ae32cc0ef53c1a89e1372c50edf86b2f9f09f06e49e1072a5260cba1528e8607b8336286fee545e325f34568bb2867f3344a7fd53729da935589671d6ce956462b4729f8a1c97aad3380852760f1c16dc0f9fe9b9f64e7e0317e242cd777ecba0bcda61c19d6e21ce54f007da49e2ef35c10a0bf42ed8c522e6bebab94eeb5557df840c23739751e7cd05f02c52306827c71e14b6f8771e2d3af07670a7956eef491cc26a512a32c3a21a547925406184fe55882303c17c8bc2392cd44a77f3723dfb4c24936dc66b66da9c72a3ed5346ac14d31f5efd227b87faee10e5cd88a1ac73f67e5e6527752d55a12490afee5f500c4b12a28e2ab4ecb8928aa5c889f8aa9696e9d5116f748da8f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f442a9b1d7aaebd50a48a9f81623bed9a6e57a9aafb22f8cb6e56f28086ab3609a8c13f9f676451271325d453f9e3b31c0310a38e71f91ae90899ff610bbf474138a9e610cbdeaa52985446d873695e35d1de1c777efe02eab419d8f0fd5184c850112bfc8a271307f2a9997155383a85b80ac99f6031d94639a6603fa842f731c4920c7841228441136cc0b07ae11c4a07c28b3305ad2cf6a8594ddb6fa357f17a9fd7a72635323265a9a5eab8029215d21f2b3d2ea41350d031c93bf8d3ecc314d6ed13ed0517e12df45ade2f7a3cbdf0b17b220e83031ee06f4a670b47c7d5bda77c0da7f3df5278882049582faa073667a6270467d8b4c28b5930856ff55400aa1c7f7fb52d838d5e9508b8fd4211e130dced03a6996b9afb860c066a56a6d3e1f1f7fde8179adebaeffb2b8bb91b83b7c1c56a6dada297497b8d8de0069e31ea452c0fc4f820d769c12a744d22ed110fd99476a4524caeba7f766e1fd0e0ee01e91825bb5913c0e2f87497427d2687d776e2ca91055e38fcb6be3f843b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e317cb8fc092da3e09b63590743ba17426826083697bdd526f85d1ebf0270afc0fd89ad67762836567f36d2bfb52252a2a54ef9f753a4afbfe520e857a503385ab6c16df6d4e3494954912ecb31c514f6427b676a1c61c83ed38009693ebc39add66a1af1ac1834381df1144fe5f0444fc955334a2cff4aee6f3cdd3abe5dc54cc4ec25c5c66286e91d29a5c498872e7edbf3f4235bebb402dec4b91e629123e841dea66643f224c472f75caf31fbaf18943e7bbd09fdfa8dd908ae92631129b404f7414037d42b5914b532e7ff5a618876a550fdfb80289c5d635adbbc60e41ab577c59bb6895e2c4f02140b95a47dc327d5f414293b3577acb277427285f82dbfca53a4acbbe4497141efd0afea149a7c12b6c702fb9e48dc7dcb0d4ff1f96cb238d34e35fece1436b14592d3eee800641800dd9df1b9541435cb2ce933a0150498f9416446c95172a2116ffb58cf5f397f0d0af2e025e2951444d204291b1c04281c9242058b937b5d01f74b6cfa2d55d975c6622198c6cb271f289110d2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "41a99f4e616d19dbfec0e1e5ab8ab605ebd218c107176b2d90c58e41e01cd6f6950fe4a71c3b0ce81dcfd6f88b57e7345dcd466e43e3b5dce645ead38d0f5df81d307dc89ae059b3738b7900eda146f0ad965e67e760231ba58fe7e33d3f14fba66978e3eb7bc5dd6960b24ba2d59332760492961b5b81af6e37fc3065105915a4505fd239c79e6fa6cd8ba4bb585fe937d5d87955f659cbebd6bd9f0d0030e8a52341591fbd1624cd2236352e9e6bd91d7c121357a4af1184efd102fa911a7eb8d7dce098fbc02e34ec92d14ae333e502ab8bad7ffc275dc770913eee42a316b1fac871863e0f10899d72d0802bea9c07bf21b91050850547d6c8ff99ef52b1bddbd655352ef0fc4748c44d4bc4a4dc4ad3110b367e63620cf76139fff563a7c76a9b3a24cab86bede3568ef1524d476f8e39b9df374d1d2161167af5a00c61e0aea1bee56ae05ff1759e0826c4bb0b2058b5dc92a5c4dc865110bfa05506121ae58583179bd981100f42d1d89fd604db4f13db7ee6c49ecd381a546813b284"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e64f806c7528a1cd1c8dd5b67ab67335b8f9a1ef1fba99afe67e9fb2cb11263c79dc422d51a68728464422307a0a445ac823d10021ab7789e6f701182f632786f77c23806b81324b5cd78e462c35e495532c2330a08e0e9ab7b44bc6dc5d99c70e052752a4718fff47d00c9b82c4dca22fe3302cec11026564288eda51b692f36fc23ab6b3a9091c332378be3582aa551c8471a9df5f9451291a1da952019788f461fc5262e822bf5d5e11f80b91fd8748bcd2d856e0bf7ee29333b627d6c44ec0ead86c0ab18f93ae9f29dc3a91562387a703b42a17cc4b7b310b6b6fc7d9bd7bdd907520dec948d2048d556dd6db3b0e5e95788d88d0d643c6336604d0b81fc996bb85d2b4993036635a15acab8dc486e061c8e2eab891daee57bf08563bc018401087ba854f300a97b9c5fd6c5a3915ffb240a577e7ed23c76fda89407be57aa7869db4c6e72fb69ae2af877f189992d99dc17a071894a2c6293ebc9e205ee3792c4da94de734b77c47b21c7a6572759126bdda03f4984bfeec0afd744d3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71555a4df579d3970cc515fab9cd2775782e87a7eeb0cdf0fb9614db00ae74a78d495110577e29ba7d7ed8c2f71b8f476a87bc569aba9926c75811241b2a3525e6dbf3c339363b9d85511a89726ade496fb45fb476e0fbbd7bed7ac1fdc9e8948f622b2f2532cdc139fbd500f2807022739cc396023e09833f513caae70374296f6324e31f27b1f00978ad68a65a87f63e868f66589becdd34dcf732f7fb85a79a28975fad578cec2ff9f2b89fa7c03b03fcb14a0cf2cdc4d989b6131fd3ee11907f9405ded3963c2efb6c1bf79cd42335cfa143e108b8b9c2aa8f7d1e417c0fc7891456fd7ef72fc1d0d50affe882d0a31139df99a6366e7b5ca2cf5c11e7f50e2c52f91a36543c554e2e467185e0bb4fe29dda115c214c306dd450bd9c261aaa2844091796c2e8bec02b40c7876495b7b4d327c6ab19e1a0a90dce923ce8f8cd7cff7b6ddf59a011d821f2c86207b356d0badac5c1028b3b3727933f4fdad43c923495af16a23e913ccb998ba0975863dea15a42ddffff3f0b4f04a153372a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a9ffef059db6395dcf691eff9ab53fdb762000fefdc58b964af85ddddbed15049cc8bb2eaed4aef8974bd3c9e65386f3a11effadc26a9f85f648bae5334d08ce23db566fcc8a6ddafb127dc95d4c3ba0d7b71546e1c010085d0e5c9e7f6d1f396b50c9fe712ca30e78dca2ffb58ac5fa5816702caea67b932f4b8669f2cd3a61a412c685d15678b2fcd982f3b8853ffc2efd841d59136501ba65707e9488fc0078bc03c318356968e7478ee3eba9aa0b186660f08b055cf025866db2d7162cf152c6caf4a3d68b5010ad9e9fb346e47cee9c95ca4dd5455211d0897ce239ab92a495cf2db2df2e1a3d8cd1039351984277ace1888b0194dde50d53cb9b05b28bd51939d95683160a9d7d36df412632ce7cd693fa89bace61a6a36347339d6e068f8a7d99f76b470f381553a1f901e5de43bdc8ebe32807670abed2d1d7cbfb212ce10fd5bd3769eea5c175f006aff33677b20383e61433f5b63da31404ae940675d3fc1c3cd39f56aa2cbb30efa646427614c2d61ee19e7d5b8ec5686a071b8b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c3ee2d5e72370734429ea8efb80d949ad0f0281909af720183edc0f10c83699f8549fa7820631d084c812d37e17e37d656f2749721b90db083ac0334b56a413399a92977b73fe292822433c1c97b2a176722259e9d19e28618dc7a42aa8585e9665b55f3ce00dfd28c7861eea80583fa99d68c8dbd5accddbfd8dc2f74b9205059637a5a09952b03ea2ec0bc2bdf8ad211e8cd6bd410337eae3331715f92391b631b5f1e2c339dba0cd6ccf9cbaf17c30346987236366ae14882046dacc32b676d84f4378c3f605eb81529c398882450f833969c8849c489934e0225cdb54ad6539f81e276f16004761361ac114581ab1fcb94bd05854687c8117c590683d7a49f7b5d2b80287cf47e001a7c11c74583ef2dcdd096bca5a38326f87e67d4ca1b5e36f88f0f0914ef5405d49349febbfea2ffd44932b7e5b12c7eb0b78c4de0accd9aac30612f6de12e710ca0d5c1db70cadd03e88198c07731995e4b5627dab808d82e2fb47a538323a65327f236c1fb192967fcea14f88c03beea4c31319fc2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c67ba5369bf9eab5141829d0ba753245c885cf33ec6e9ce6751f2abfa172beb3db01ed0513f3b936b48619c64d6cf58cf8fb1a6b85e0771dd9450e3b4535740e7078a06c7a9afa4cc28ed0ffc695a0f9bc532594f0410987d5a308cd2a8607f231186247a89e8babbc6a2adcb71827535d11a95228c38790236ad2fc4de9fbee03c2b2d1ea809f60ac8ee770209e39b3260796bcd63187ded4e70efdbfd89606e9e85b13c26396261b3c907954bb0d7d8cfe2dfaf9a94ba6d54d98c082fba79d254592bbdc3e190c8dffd24d84e03da96eb0d291f5cedc2a9aec051be76dcc9841e6a2201323f79d9f18ddc42fd45bb64d62151a30d1111782a9ac4b8b5893145285eddc0eeda0768e1218a693a863ae2ee5a959e4249ed995f85f1a9f8692e19ab609fccb0a93e986786bd548f0bd70022b61bff520d19aeb97597f98034a5b78d6454e55e8f4caf4eb019d6aa00ff736f9a3105f9e75ced7a5e30882bb5945f71a7c8a401cfed0c07f0347d46cbdce7bc1e931c6b0d5c1488206e39dca2512"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c3e2c6d82ddb5af78bbced9b7d3543f69deef0d7b0acc29652b13fbc2b0a256a733f8201b334918dc8354b3817d2cff4a2ca7d00b329ca88217f28087020528c6c30a75a1f82e0c3ef3e49d8335c1c354c31b31562dcc2f98e6b960e52452d0a37cef4ac21c41110070eed657f2ff30839976c98f38151fa55aae5780ab72fe2f5a254b4f83c8493001a598f2b57197fb3d5eaf439671b4d4a596f7c4a4537d5ba3937c9baa57623aeacf54cfdb708dff8aaf09a23d285ee0ae6aad50ada1f51c1ff5c5a6468f791cdd7619138c06855675da115043795517395716cc8c0d282f5aa5c46b92a2d1cf20c50ff7f69749277611a36f18271d2ad91ca371ab2e87aba74f83c37523b50419e5debd36e56452b39059a32823e3ac57929452052ceebbcf517a8733300ef3500ef4b08e4d2f6533ff3193e866dbfcfb2e841dfc133163ad3d7b605efb3a8c7715f0dcf1aaf848c4721f9c5de2c49e31e92cca767b0fd34d34c1bd1db1dde2edb1eedb119079a4cd25b0862a4b2447dba751e3f3cf"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "80fc40a92375cf58a2730a709f08395c7f7a7577ef00c7c4730781b806afd5f69cc0c990012c62ac76cd4f860ecbd8b6f96c4e9a7828595bcb56861cac5a0a1d39040d96637a8628431641115a1f298c144e3e2bdb3b43f8edbf943ca9b1378f256da835a560b35fabb3d0bdfed894643daca246a6e22cd6089bcfe033329a3d18f5a27194cb8c915ba5763b44e51e5380ec4096f7cf5296db6c7ed57ef8b8812edaa10d9f12adca6dd83bec5bab1561e174226896a46d104c134b3c17c876856d54eed489d64c2121d68e48cb1da6357d9ab3128e25f16b1809288c35ae38c901ed6bd1b80961853c1d4e9a60273cc39656078abb4ca9e8afa057df58a5fa851a4dfaacac3631e2065fa8e2e423b4692dfc96a73faa7c2af3d89cf1e98dcf3e69c35dcf38847fad526eb56706ff4f9edc068be609417e60d169ede36e4a9301cdb58a408bd12eb37457f05af1f96e431241354e181f92f1199d2bb45681caf56ddd13542994fab6bdc2027775564b782cfa2cc31d305e7e70692a96182a71aa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "756428ea39f0895138538845d40ff1a8957b5c3e913e7b475198268e40efc604cfdfa189619f60f9dde5694932fe5419b666b10abd4adf096d6af10360e1c6937f3c0ef1e37e2af4faf064831ec44d1f581398121c29c1a4b3a056b20cad0fdcc99ad6f68a51e12717f72d2981038ba2b860f7347a435a69ff01cbacf8d4c66ef98959049bf90f6c78d2215e66b8453fd7de0c2d6ffef90fb003192d053046872fbef084fb1b104a37980c2604d61db8340254b37c8f4df3d5c1ddf6745a00274e7b826398e756d5ebaf19aca16a137a6a38e51612b580ca3fcfbc4d7eef58a743c8c7862135eed1926b4592071ceebb6133eadfd8ae270e1367f705f19b44e0232db2173a261dadb3c61aeeb9ab05dded16d95b6b0ac7815e9aef31314003949e19cd76ed5d7e57509057e6031cda36d17b1988479c2bf217e21a4865743452695415b70e905f836561f08e8df78c593e5a64efbb19b42929c4fc9d875a8769895f21b887b1780dc38937d0dc2efd10a14030e43ed63554b1ffac50b801de08"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "579bb79622238ac1cbc0af03c3c0d1ccbaadbb29ad974f67b76d752b960df0928d364e33eb04fae281992aaa01fafcc0669eaf87791cb8a7142b597050afa58571f9fe78a93c647307ea0db9017e0c41a0ba712dc8871063bac01da6a3dae7d0c5bb5a40f633b45cd35213fdfccd296221a0275f3b552e56ef8c856f5bd96722ee3cd9799abf956dbcc0bde6bf65b1b2641658f04e063298cdab2029c8c0af0566878822737fa9d6cc48c175fccaf7e866d80e1e478d7568a3e67d39c3a14508711fadd84c3e7be8cc226a23368e9982138128628bbe97a3c572ee68606bf6427ee5b9862bebeaa4f6b08325241da15c9f223bd18b797e1d6e88b2b08a4cf95baadf4d684c8fcb7cd44711aaf203862ec79bd5f071247636623b88709f6686d6ef3178fcee04e2de0d661d92444f5cbf3216b07a5f6cdde0657b2d4596ed148255957b0a23e8f262b1ff628cbd7ec7e88267d100809ab5eea908aa05e11d823e794a0d1e4cfb82c76b0cf9affce1fa0fe370503accaaedcaec65d1ef3a696df0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9a32e4a06f502fc0991ba84079044501b140af892bc3a3c46f9c41fa75c47745292de23fa60443adbd2e705ff47ebd1338771b157741c019c2187a2c8a08e06583a5e4d83aefb3146a6eae37ff79c499646116f2e457b9baff4543d2cb0c266fe0a6f75218a0f565c78904777fd63e1958320f084c9abd89056d118a269c11e00f199782353950c005316cd87058ed794235fb0997fccd6c17c7cf9d5784cf8cdbbbafb96d6111824e658c3bf574d123f6dfaa1ddf77f093ded9e636f5b921ba9b205667e3914932407aac17813457ba75e9f4380ba08eebb8abf5ebd281fcf5b2e5d138585651f25c1ca7194edead3507d6e69467013512b679dcd9ce400c66c1f3c0a600c9d0f6c33a56c366e56c1e413433f904eab089075ee9396650849d70faa450c1695400b2f88d42818ac212a13fd9bc2f6926e2ce92d7394f8627b4ebd27b8d45e179ad927099e3bb5e71cfe6ce275b65db98ec4fcdea0b43e2dcde6601f0a1c54de549ebb03d98d1b361be9239fe8dba8dae94cf9d1bae5c51007b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5efca28b066937c2cab27c339106a0f40139a1e1a5b6d66ec3a76abb62824c06a3e4dff6bc0dd204610fdf386e1ce13c87159f4aa0e88f1c29d07b1320217347c52e58c57ccff23c01c2039c2a385625072f974b690aed9cc5f6341c33dcd2aaca6c260d5945d49c5963c4fec651423c765c973e457ea2ef33eb57b4b4eb88f0ffb66789303c725e3db8b76e4eecec73c5a466b25745ebc00dc347d33a71f787e7723358270d0e258719093736f72182ef5cf2c4f513fe648531d755d6e945b3c44843978ab009b0b6809bb0db6794a4bb2311991b1493fc15226c15739e2b3d621cbbeeb891286d747dbc71a7c9cf06b51442c8086d839f52d73a072647832309b59edb37522dc61a97a31b7bf3c63980060304fc647c5743687c15389f4d996e38c83bd9e631c3bae53c1ac35486e9348b730f066069bce7e840f1b83d5215a52284972f2258576e608c35c4521d87e9e52cc1f4f284674f1269730bafd4f5727ac61d9d179302c99ccdd4d9e024578803ae6e9fb76ab5f74c23d234313c5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e5130e5c5145ff0822edeead396c87963494102b8a4a0e38d9f55c1e698d677e5fca1375cf5e027024966ee4fa8e2d8b4f25cc2ae8cbe49050bd675f39be5931ddcce426e1977576f60c6b79174a763f57395890026d762df6c8db0f79f02227196606256ef9af7f6a211b38cb1aa0c2af9be830e8bfa9d30169381a22b74f138939081a5261f3b277f01aabffc2dd3af713b3cf11bf772d69d157d7ed34c2ee7682745129cc7c45881e00a235c5103c09ab3719bf56f22cf29c4e962cf7bf4f633e01dd3e49fbdbb019cf2b56475fca8007fca63202e02dda6866bad778538e459e7df0bcd234abf919b5e6713a68a9981227f8d3ad204d077bf2d70117ac606e03caaeab26d8ff04c3583967a77c63a3a7cbf3d820d650d56c76d31c71173e9577d238f1ec9bff8faa48f3ca49f531b38eea21b192435e0b0138f83b54635e07c12ad6d7f06b5ef51bf5c21083e9170e86189a47f9907a9622201cf3c689b62373f94c540206c8600ba48a049210f1ecf93757d22a70c88402a17ca6a94ea"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "eff78b2945917f92e9ba0847516157ed33cc85c64bd1f5bcdcbd62c3906c5b77b247c892536b115e6bb03ae3e692bfe94c9d6b58ae0627bb96bcc53a85975d2929bc930cda5308f8dc797d0b0d6a5f4ab5a36e096fa4e934a7854355c1562553738099640c3ba675399a9d386b6a9c61854d00f7b6fa5998bcd05191a9001987f9621d1469c9b094d72590d76dfdfaf9b9f52f4f8d28315ee6fc22550e5feeba3a41f223dc9284d26955247fbebede5a3d643b4308843165f658ea0887a9661b26a707d22f5a827f33b2a60eecac67e9c730983810952247fb903e62317d835d9cf6140559941c3cc5ee7333ebc4bf43d036983d0cd3a3dc2330062f22933c295b05e6680ad053e8f64898151c72680f4ce8af1583fbd2f730f7d63e6d00a3e6991f809909b6cc8843ffb25016701fafbd6393e65289106cca59f73bba012b0bfe29aefb4a2f458b52d4736add4c2732c7ab1264a33b9074153b5699dc5e9566882a29efad79309fab974fc32b96750f411e62ef0acde9f9bdfbc8ae78ceb8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8d636450d02664f8fd18ca58d208b87ae5efab968fee42eb399f09ef0f3e6dc0ffa4217fa262d1c2cb488ef9625895018abb27feabca718268ff274a84358336375949bfadb21584dd59410c48968ed76b0f5b60e01adb37048416f1360f997d99477f0a18b367f91d68117aa9a0fc229cbf0198ee2f69493330dde8156a265e660f9169d874df428bbce40f00a366a5d6df2bfba9fd6f78da60155af0a5f72bb971fbcd64e144146e037bfeab5692b740bd61c28ccb5fb330bf5f10e595692608881ec857bfef1fdb94a1c4ba63e50ae0dcaf2de94bf50c7fc5d8efe099a51785aa42638d07cc0c23f796bf55d6032fa3027afa5b8d6072aebbb56546f15addebd36495830d7c08ce99533343e182e7d08031b95e50f729f5dde2d276a1be47e93d66ae45547fcd6e90c9a5141439c5a5d3b4000ce58e38ba4809657a622d9d659de3eaac858b6e8e34d16997a2fceaf43a9a733dc67f272f3bcbe560a75542784b7a16cebde20bbd90218466b5501b1f7299de1d9874f682fa0bfd41d6d54f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "633e28886ac6e7c2c36a69e3c1d6d46caec4d115e852c8030ece2c5ae1489fbd795affa8478b23f484b22baac6d1571f6f2f33f36fd28c66cf9b2c963f051cbbbcf5c33764bf54867a757f6c74bf6574e3b7778eae92b55495bde44a9def4d1a31fc8dc783d60cc23d1e6ca973ec0832d6979e56a42269d6fecb6bffc3eefa36e2c340f89311a89902b40d2179e25df9c841993f245fd644b0bb65e5394beb84b1544fe878b165f2f6bf49b77f8ca4337c60be4a89bf7840dc642da1937f9a933276320d0488bb6cf4535e68cc4a558c95fddf04c65400500fa580b476dc53d60fc33ebd06191ce23ac289c7850a9f6c96caeb68732bbb028f10c496364e673236e55d54eb6b187d6905c9b894b7222b68d90b82da7bf29d1c0ff5a2aa552ca13dd49a9f50d7e69ad40cee65ec7ad140642002e75c3c6cd55d5892528d2503b33debd4be946a3c48d7ba46abc96ce2e79396116c329ce4e967ca28ebd56712fd6a9de4ce1a5ed00df621d18713d508f6f1fb959e2ce8ca9f8eec2e3a5a80c771"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4f7025ce36f71e0b1c0a4659ddd25396a83e4911287700bf27f72ee19f8990235af6d6f33f3b3d3f7d400370a914de2ff23af964e4eef9c8a1b15a63d38935698ff70b7c2d2d2d34cb8bc82133d70fc1fc3c19d9f47f0fe463393b60a61fc19d49f84385836278bffd710a7ae72005821718d42b2f195b6a3bb5b1b6862443a84d6a4ae04449b6bb6b4347fa14fbb4ed802cfba5dd00aba3e5e1fff2143db0acd4e50bb9951460b1e6ae5608ab642780706522e971aa350b13390df5aec8585c3b4c2bff9b64c5950357fa6c91f88e981882c52a8d93f156718af5c91c7009b3f57ffaf98d9e280ed51148d5b2d0b57495276fdd8a5fe0885ce37426760789e671b4cbf64e2e21b6fe4a1fd3f538675fbbffe51d8cce7b74c9bb9c25e9caa84b88161630a8afa49265d172e68ad42836f6b9b619fe32a1b84734ae58f09a0d8c8a5f3181a5130a503306bcc2535b0cb325c060afe57e29c7346a5489f9dee3206d8eea75e07514ca3ec547c816d88a4e5ce4b7e4a61b3488d2c13eaf62204766"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90db572ad2c25dd02aee6f8e0ddd5d42f5434b9b59f0bc7057abda8924c2a061404f345b9ed3e2fd0486fe34e2be725bd9446f031071c4ec13772fe468ab4961623d16469a5b9577683f20035caf524d557291b700a6903dd6c472b50cd09455779289b990e86ed6f7135af290b320957c93db1a34bd66289b5304828a71d2928fdbbc3a90af3884fa2f710455d2e909422e66aaa1c01565fb67367223f2bf30661ac72b9c6a84fbf977927a86611514c0c387371cd94bb703f2325e3a11cf83cbc6727b5bd49f6fb31b7238c1a464b22ef6c5db0dd2d5039ab3d5a4a7b1ea01cae494c5dafa48b73a411c982389abe5fb2de35d6abd5d9dc33e7703f67d58feda3a17fb6e9ce3200f44fc614638f7931099f13bc175164d9d68e2a4d38f2c12224fe136fba4e7fca1fbfe3344afd2f52d8812624a1af39c4f128e1c9c1eeccc0ada519f27b694fd982ffb6467f791461a2b803cbd298a4467cecaf274f855583ddcf470092f642edc79b23eecdf4067169a2ee72ae95c93e3ee5d23ec407185"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2f7d989b2b509b4d774f5de9acf12e5eaab05684edeae1eb42dc090356e58b8e15a32d8fa313252633a8356476327d32915c52449aac56fefc012929988fa5cfbda0d04d81392eb35ea340dfe449511f5fdab774f7e659ca0a8c91911a255d828e00d93d64638f805d63cc926c17804cf1d857c40be5d10318fe06bc311a66329128bd1102756da5da819afaed6ec6864287c44952244e4a8fbf98a90ada98bc1b5519cb81173b64357ce82f29ff16e5d76a929d4b7db51d9f3a7f4c91491dbc6a0550bcaf5fd37646bd8f71ef459540ae8eba668723a81b941939540d92c4a7f9cb0543dba1cb7969c4d644c8f15bfc13aae4a778a81b27b82903dd223ba4d5d5c157a35371ea1443788d973d953318b204f232cd5c53a9a2517d571cafb62d3378655dcde55f46597295c89bf882041ba6f4352a88dd7c1748761728a2d8dd628433855364024d42a0097346443459b840415b5a56934ea476c5f9de84419d564e493c594a9049352ea82700b1767d75244ef84ae2c8a3d5b1853a0ad08a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5c662670149791048df0ad6c95a119bfae057011d7155851087c0085b901dcd6e95252391f9661159f909def924cc165b140f02db3863ebaeca40b57ad68cd77459ad258b892c090de55b93cb48bed9a96b5ef294e9c73325e4aa595431e780058a392c0b9d512e3731509fd537df0378caba38c3e20d17e3f8c4047181becf3a505acfca94a961cc6d952b387175e8e4274b81acb168f63df180210752fcc72dce93ee2e23333e547f4561ffaac06597757712ba8ce776f0a2c714c40be54b562ad693d631aa1c3a840c8749c833401e73dd05a9592a477dc43e52d140af0b2841a14b945a10bbc5e4d4f47dfda159646ef1d49d39054550dfd188203585d0201c33a42afae62aebccb463e3d2dd8748b8db65a3f5aa3ce7a1b227139041bc805b7a71144510abadff548318f9a76d8a7f64eb9d269f7739319e9a3da728d001e29628ee1366f53b752f7354055ae2e511a6d9fff4c9b1caacba36be1bde8fbfd0a4274145ef6f122cc203fcad66d8f51e97b0f8f25a08ea8c9860849940fe4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "30596e00b2ad31f266f2b47b598029146aba9d0cf372b4eccdc5fc9f475c36567e6a159a454b417c77b7bc576721c52f64a31204279d524409434b73de9ae4d819390c3124ccffa5b4aafa135fa753e71c1b3b3f05ead6e6899277d0e994ce6111f61f2464155f539b8871ad0167a30c234e0541b1f39def8deb531ed476d81418218c682dbbbc0f4c3cdfd674c5e7a7bd057eee05a9f1b8b796260380e38631303d227cd9df7e76fe9cc161f8db2d9db7306834b67ecc33ff91b3c59f35f789a65b6f1433f1cffd69545a146fcddbd047a847f55acf4adc9be2f2595faeadcfe39127edeaa9a1144a5a726edeb7b1a48fa900881b157f7f3516f47dc0c108630cfc9304a2acf821a93a867b063217db60c0514143eb53557ec8f86eb8a83a83219f8c3310baa122b79d49d48bff90492acd83de8c3b9d5f07cb2d061b243d813cb1be42c658e2ed52a9b31ef07360df5945406e7c81a80337169fedf5ea76b25a69a1900a673b648831745f3b04815df9ed7d71acde44fe36aec0a85a7d6ec5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "23bbc7627ae0069673b6de161c79fc721fa169d7719400aaf7d60d53773649bbe5cbeb4ec3b553dbab1b0cfe63142d21ad3a46ee475b7b50ee617e6f58aeb6942b0793b94ea0dee9347ba233b05895b457d478449787cab04fd0c4b01e025088884272bf060a82405172d8da5e0b4e070c61af641d311885519215b0fbc4947097c765e87ee46a4a642bc44b7212bb8b64a2cffaec496ae139c248f6b00f203de256adb345be3f46c11bed0811bab43961e9d78646cf14be18b891552998782a413b6adf9829bc47926178ca118ae0722af0aaf6694d5aa64bf970d530f71e309319dc43f2077fc66afa48365d90061c0e1696ecd2ec29a15007bbb47278641b27e10a28b60e4e7405fbe5a05e5ffb8c0a52472ed51330f169440dd10d828f1830a23dade9fef0c4a2373eae849977e1cd15054e4ff004b9daf6ce8fe8010f9102d09bb4b18ed4e30cc9c3dae2629650e00f139eb433138fb49e2a896dea8a13253282d8e42c1dc42d490b719373b3c723b8c991566474257e96fcd0027808a5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "37a98cbe608f10cdefb4d787a23681902d7a3a02837438ffcc778091a12dc473aa6cd38d7abe75c362a877456e4b29db13659b4f3d9bb1ef73e0cab33ec2b11d06782ae4ca0a13d15f8856223abe0131f5ec5437b2b001e4f5903a78afd4c46d6a47af171271f3a4cf267b0afec0a1f368a789f4c03193e2f365fe6c0b8dcce1b2f1e6f1e0cbd7c6f1a98a8ab747bbd27485aa61ac84e837a95a178efba0b23725c53f00c94b3cee6831f4d000ecfe84af2a63f341e7bfc2cef7f5654d253654139245c4205c0b2418e8de35da690a8884507134a0b2f0bb9d20eb8f39fb134adbf171f1a8edb4e1489671005f8474708708d1a627d22c76b8ed0993a9c16a6b635fc090e3b38b96f37b28ec44089b17173647eae6ac4439bac2019ae8b928d094665aed8ba0ff89c308097b1e7ba74fd2579f1c21f63296712cf4f5405cf0f3eb60ae1600a5b8d717a09ed23034368c9739ef2f880c659bbfe855f809adbe231ef20d0eb6300f2b6ff02e9f3666876971a9d41f8f0f8fe954f00bf52c0ce013"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c269aac4605a5e25a660071fba9f97d4b9e4c0f0d2e567459e5620884f889cbfb33ea6094feb6d2817747859f8c203c548d5bda97821c3b6744711ed3f0bf02954ef75ad6b9afcb6872273f1c164ba168db9a8bd72d715bef221420491ab6b67d5f4847743770ed4136280bda363c1fcc2f35ddadd1be3093eede6922cb95e3e206d02d98e91194a7fd39c304c848c1731e1f90e8a9433db71d94e7d76d7b5f2fdabfe20e8e1ac7deb56f81331fedd7a7e9ace76887dba2fcd72ebd2017f5bb85de1cd309b3b7f7fbb9d8901f61bf8992fd9a63f861e8054c9d4fc1472786d6efec3cf4bd1543116e2bf36698de85a6a3c17c200c73001b3218e72b8bd515f9f96d9ced500a1c6da4c0173f35ba24ee746e51cfc3ef00ce60441031bdcc2742d981833006bc05a513f1cf67d6a9e59ad4acc029995608fd05b744d48be829148552e13c7c76450f30b5acd4fab819a71c158c82d587fa7e839c3959a8150395f567387024f7b786006ec0b1f6960d3b5de347742eda16bc76e3359becd2e184"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2009e307ff24560348c7d796e1d69c5726c8389eb26423ce21cdb701623343a25d2a4841f994f3933fa82242f9d525464e3b6c770584567dd8bff3ae75f22f94139a9ba2612063e8117a23adbf72fb8c425aec994219c16d42299682eeffce61f4a0663d173980066009d542f09fe1186a28698109e0d5ec28ee2848e0a91185b492e53f67123c3f6d81826a943c60cd888e7d332310838f306913e3321c5ca89794f27a0ed36c697abcf665be1253637cf2226d7591884a9e7636b8f49972df71dabb14b6a4cfc4b4689e3c37869043bc0d802fb906a902a24b4445ada3b51f7661cff461c4b7b5a59c1974a8fda528039006f1a860eef799f15f606ec8fc23a20d4b80c01a639d34b9de0eaaef84855082e443f9a85964766473326d6ab6bf49f198c62269356e28eb920f858f3695cdcd77f3fb513121470c64c25f305a00977d0d61ab75143bac7eb57d9c99c8d51ddeefc41e3929f35da3dd544f55d878a9abdc0ead983a08d3d35d54b2afd653f61ddecfbbd936dc6d9721a959aac0c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8431b3c74190f8c0086d779639fed56544ad0fc422dabb1b5dbb600a7021a2e25fd9e69ef305d0a3da9af97e24ecefc11f515412edcc6a6685b3c4e8c251386a7728e3add07ccee395a851e5c1330fdd05c033269fe7a52df15a1e81764facb46718ddf598a83943d35716e3fe1f216b2e17075fde3751148290040a56535eba7e5d05ce7738d2fc7f6e8450bec68a0a35a5cbe8aa3ca0adca3886bcde8649fe491c4629be8a1b8eca64cdb226eb6a0e32397a7e0dffca2fe7b27b99754a428ba300cd62d0ee228e925d96418e75138f56d7219198d04dd7713c8e8d606d7a9bfa9f1b9d731ab9e0ec8553d1515a32994ef29f2d2e9c1ce8a32ebf8d970121655810b1afcb96fbfa0495c39b759921624498acdfc8d9abe95a0693e04ff6eaf8939e4961c32b86f3a5af479d294d6dbd01f90437cf6f830db644ad9466262333829fc2243ed32ca9fb08b9b56633bacc450d86af6b4733034ab987db01a118c5c41b9b792a83be1b4e068216cb642b11075a43efe7e3a81f0872c4481ad696eb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "421b2b4795661bf967bf5e679f69d06c0fb9a02192d839a440d364533de5c3f620f8531a68603119ec4045391c8f3ed297ba295bc1215d4c4f0f315a73b338f31547c110d4fa1e3deb385eeccc2d57e03c0f6309f6c3c28e4d837d22787bc0b6d626201da55b605f4e8522ef75b92dd1d6dfa0a177b0e666f04fd211b713fce8b2fdd96bfd4c07e64e4b8253289e400da12fd99c2c0620395208b7f2d04a2eb696f9992b0b0485e3147c5b18aba35c8a90d10b0429f3fec71e59d019f270a5e0cb0fe0b5eef004461b5c6286f33ccda3ef358d99784500084cfb5c9d3ed8e1c5327c4ce81eb1ca34390ff613807f5a24e0428eb48c97900fe9c3dd68d201a1d2a55a20174adbed47e53a0d0f032acd4d65978c8afb55487af30439bb2f151e343a47b2ca3b5e082ea741e375885377a2e3769c712f4d4144d80c2a6f2b1f0fe41e9fdf9bb43d7370332ca51bb2f1325f4d1aefcb5dbc42614f9cf11a4ac72eaa350a9c2222a6e2d82f6aa29df12b33979fff1ea265fc2a5055600b9f96c8688f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "365aaed072b2d0e5135c82f25944292872f60ed39152eb19045b209140a4a74fb2074037dce30d674e0fbc8e98011ac681204429d9a5ebb8fc3bf20ec70e6b53cfa45b259d4f1312354dd5a00bc2ecf4e99b4434212f92bff2b99c94a08a1327fb45dd3367779a12d8dba9ca846b85c6216add315fe0b17240fb021bf61970446339dc93ed53cf1c57242eb4aaf798a1b8010e9471f78b6f0cfd7a628ace627bc64a4c6d853af0d7ff00500b8c682238eb37f59972ff87a9be9eccf69115475ff45ed6daf9d462e09ccba899315b5dd59a3cd5c3ebface31f99854e0475fd76cc7c191ec3f13ed7933663b3902b0cf7ce7696cc9ec28c13df6b9cbe9182980f7dbf7ebb603274a56871de960a52bb5835f4db71558876202b8d9c4edaa35df599f1c6dd105dffcb077a7ad8f7748c58d6131546694bfdf97a645ecbe3829dbd2da1263556a3d29e92a810337c8c1050686ae880314b3e808abad278c48655708bcd2d711cd93f446911a2b323881c98ac389582fe0a9601096911a8ab0dd8669"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "24a95969a4ff4982bfa2021ee1ee009d2e4ce995e6938fb48ce35041842bb516ce21f5630264f3f7140e3135ea5d01eb0ea6aa6c3b85ea5f64f1de1de246bd6dbafac9cb0a8a0003c02e5eb68714d569c8036bd604aa7bc604999a85cd3caa209ccb12dee3b89dde2c9bb74f0dac1458399cacc7e4ce538dc3a5b54c5bf7d3132430110089d5b4731dc91c2711dbe0b46b97ad7ecc948cf5881c1473f5b6540ac62963357680f1b12a09a21a957b512126c7457b0635c185d36090696c313e8cdbdb92ddea8b8621d1a640bb2636be15180595e6373c04ec38f981f05c6e255a327d9abc3b3bc04680e277e593b04d8d89963bbf83574a5fb63b4aa1d06de63e4077e8f9242e886014109c3360be74dbdff64af766224aabbec9c0c0a2ca79ce12765cc8334bebdd1355164ff636e24432c042443371f9d7a4ac66658dcbcb001934ea8b896c0bfcd7e5ce140ae265d253180c72fc9fd05b4dce2b6b664b1c9852bf84eac06ce5d237f242fd2cc6d61a870691df8e9b5b0cbde491edf3c8861e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2bde28ddbc4e84009a9c98c71f5e2b7ef6622d0283889c94a31b25074e8fc2068aa26e4ff0057de239b4588d0421b8351f8473eb2e66c4a2ea28a4ef81613b5216059b35c2aa990c7cd398f1edb7c93723a3ab489f7a91242977969c19a2e9bd421ce79eff960a06c52f05c251d1e8a1d4e3c799ed70948a6ea35f396f6d83dcf8e1c59604730e0d90c2704a9aaa2dbcad25c9c3c559a73b7092a016e6761a65d41b878a5c717ba63344cb1adc247a92d377345cdfc24b652516de0123232d3b0092cd3f5d540b66bcdc024a728d781536ceb7e41fd80622441feebe4fcaa6931c54d67dd28dc664df83e3ea2eed769e24ef7b7ee9f95f36b31984924318d506635f31efd096aebc8a3c04d6d09aecec36484012b5a5793a2405458a250897d246a5829ed7d99bf1638fb5225cea2d0a351fe08aaaa8ee724a824f2b6ddcd69221f4a992ea5edaab8969369f869810b4973cf65adf4529f68d1c0fbab24fd1e80a03b71ddf702418d3452a27b95752a0f86053d29b63b1880911f657e4fab978"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "88258637f7eb07cce4e8cd05cf23340e796bc7e067ec5e74bd031a7b870e87a40597be7ffa8eb135297f6c4e4e19dbfbccc49a23b5a7903d1c8cf979a4e0b181cef1c48a7ecc5adb8fb614415f9cc727d2985b0eccd51f72b714f2ee8a1632b36791a29e68b88a8f482b24e0596ee8c9d4c504aef0820cce5f5a71ee3c236931aea720ed6917ea7b41d13b50f909fa21f07e9cd9f79454a3a1996cd5a35bb92b4a1b1537afa65c9bb67091f340b47f3726407b95e68ebe8d4aae735c7802b559179c64da8385e72628f29aa4e4634777e6b7138f6206c79765dfcc066c034977118255f8c82c66425b5cbec3cf65f952f0f4daedfc2acc204df23a707a77e479d33da4db067608f075e29e4fcc3600819881463f071c0b879251c0b83ea5938761d7d63688006e2597eea88997aef9aaad009ab9cf54b4390eb808b09047a759224835e7c282b301b09007a15ed23e93a33e25079b5079089428607453ed25ec639a513311320dcdfbcbda5fd0f47f6035f0c995a7ce980ea7b2e74a4ea3b9d4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bcd19e6ea965e860485b4a886d032b2d79971241ca2c512b781822dba95d8db8ad9ff4586e9f238c885e464d8e67f291263ab6481e93544904da7abe00cf7d312077447c7b0e5026114bb732191a06beeaff6a05986a02919264396b8f0ed1eb9bdff5f2888d63d3d66515f30665c9963e13e914feabd50923f674c31091d71b2d01328c07af2d9c4da3d41942020e179420f3d6d8265ca1555db51aaaf281ea92b0b5b9f8deb982723825cae17a877e6f0544d4fe48f8fe3db3a7018691bdc39ea7021ce4d2c052265b33a1a0cefe72392a52086f673a10dfa7240d88001a4053bf376bef41881c27510edb203ca07d8fde2955eff7bec85e9a44794c0fa757e385c376e6be063eb90c23a526f4fe4b5a3caff01ec148bd725ac6ccd8cbacd0b336185c3d98804bbf06626bed831afbaf3c106a847fb72a60e39b192940c898020137a291c656219c322cadfee3100cc988b98da6d203be161945e4d95d455cf73b28eccf5d6f9c36516b1b8a1dd57531d8bb943f3b50d04970b0c114a2a86"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43f62292e9039df3d1160af93dbfbb2963efa6dc905aa967bc765415a74fe4a95612b53866c56c6ba42eeb76aec0a5afaefb24ac7a4eae23cf439918750b2496579c33806d9f60bdec575473371c96ac56de3b1df2d00036ea9166341720d4e164a9bbad13eac4f9364882772a20630e2b067f7d12ae3b02385a638ee562570d4b4913cf6d1f9ec6c36f724c545ffe7e0964d57531925a9de4a58511674f6ce271cbae8fe4d2502bcf5feeebe44aa6a6a6757eb3709b139569b40c019dbf0667d0e23d7a4f93075ea68a303df9aa58b02302d753089fcf6628c318a80815dd3034e5c67cfb88cf678ba1134e7aa722452c0da20328aedf3520939afe9dec999691dc3411f75815f568e3b03b8f8e3c08d99b958fc6e463fc512c44e583f869c9154d630ededfc507dccd68401ed8b37dc3f8c529936d5ce94e6e6ee06115c3d39ccd85e86ec0c27087a82774f05a031677bd5f8d5440dde337b860f00deb788bc9e81531bf7a9492ec4af8ce04f3c94c6746f8fabaf9b7be9e089ba956779d9d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73d4d40da6efbc72e01d95c3504c95737fc2e401ea73dcbc56b2f1f784b54d0c4587877137abdc84d67383ab0453f69381df09fde92edbb90fdac2b54451d76f00b5c553949ce6e39b86cd5a5fb555f231a1dabf895ef9b7c905ed9b92e333c0af57437662ede62093dbf6c43a8482706853c0025fc724ee13d17d6f052564550140c52cd5f52d98622e02da82ebca62423270dfe18333a9f202b9f6aeaa84bce014c8ff323be51327ba1a7897911df7172b819307bcf09069a3fc1559335e7fdf06f082dffbac70a973d70e5f4210c91744083d5113b510fe721650b3be52bd003b30372d56fd3268bf6aa0461af41c05cbec350f771eae198ef315c60c08dae19b0f31d3ddeaa144cf9940265660c34cc579b4b825616aa3d234d600248645d778a789d7275166cae5cbccc14c3d81c26596e5b236838ce6cf701b106e584d96b1bf40a75398763128d0a748e8f0548ad1d810a00e961a88db49898baeff2ccce4d56d3b0f059ec5727d03ae56499f811705bbf6ab41a1a3683e3debc5a6f7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bf8c782edff2de8dbc7f480a9b29f1292a5f1ac96ebc92670aadfd369ec83ad35987bfc0ab3915dd388a504ca34ef43f0ff55d52e891aef35c47c81493fe6ef53a4cf5de1e415278e63339110722c444c6c2eb26becfd6589f18f2925dba814d5e63a098bfe8882a3bc73a9a184e8eec0c8b7db26b4524a7b3eb3975f63fd16bb461b42e0aef58b7953fa3ae09f5c8c38c4528fc48199fb652b27bffa9c85ebb162a0943af6c1e2ca954e44594157e053f35be8d40ee161dd30929576a2cbabc7dd0cb6bc3305f41dfb77644f32c67d8f04e7d68822def40d341f3963a12a1acc16338d3d8229ff500fbf6849b2507b4dcb68ac7c8e06a076450b3da320ed8673d86e7bf7c91f8379007ba05303489eb9537bf33c275845c923d3881b4a80998e7aad5b6a9f113bf157b3aa96b45791937d9038f94569f1fa753ec9ad612f75bc89fc79fa5d26711d39aacac5c05b06baa5efc40d9081fa39c2ab8de2bab3ee5023a0b668e17d21e470cd1efaf5e7087d440cbdd7b447f5fcd9046fd9197acfa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "18c76a48b8a07eb2d64933e6d369bd7c03cdcdf1fb3bb15367ace58ab1539c3798c1afba510f46b1f621c5374343d55e11cf82fa1da003409702635c013481fd785b32e495dbc0400502ac60b82269bb6e3b9a405f6794c34fb801f920413d7e243ab31c1e7e2bb25619e66a016c948a24d3fcd24a63d45f30f0cc41f7c963ced75755a11222095b3451726708b3d255d60c47746633b822ae2ca83ee50d7dbb5bedb2ca666a80a24766ff121b6495a26cb9ac14e0f11b5a17367fa2ee7a3063717e4511a7588c2325e5c9a479db77fc799b42a9cf0962d9fad45ed2cc750bd30e34a088049ca942ee1a83807151986df4b2e70afa7533691171dabfc861baa5ddabdae2db6a3f07086fd539fcefd4694fd9764af7d5d38a75c3a47ebce1820d1a15cf9791da6c194a4d1e3d9484773c256d48989cf800a83c2aa82fd88fe5fbf945856abbaf0a8b843422bf30f933de51739d583ab7870e0402c1c0d8fb95668a35027bc40a2164ea3938e7891fa052b353d87939724bc6e78c3950cd25c3d8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "89f4d0a739849f213436c9575620dec5f5c2d6a7e4f83cbab2a57b3876663af38a0456a1106efe9937f5ad6d8a8952ac24883918e91a9d19c07b5fb67ee7dbd1716c86ef7f45c651e74a41233eb01d0ec29c7739bc93877fa5a880f5e27dd28e3e58f2c034c6bd512b9034625cfa60fa1b1b966ddef324eaba49f07fde57dd751b22a132cfb50a2f37c69f773feb8637be2296680a1b1511e76f5f31154e6227f748dd101fb7ce4dc4d78aea619ac06a4419c23e2c7a6025f3084c65ee4e2d898f3b8da4b180f592a3e85a3fcd04d788fbd55e7543789c177076918fbbfd0b9bbd69106ecfaf980154b008f86418285623bef88173d6e21de37fc433163f719d1a5b59a69a7b3af6e2c5e8425135c9cb402db577bc0d57bf9e4a2ea6792e59f22149be5280f19f087f99a5a645e7058ced09552f7e324d1d786c939490177c6c882e53332fc64c24b95866131c0e78daf801a8d94e59e1b339529e59fdef88bd1440b9f4928b1c68b57ee8ba22191dd423c32fed56bdc01ad0c14850061d080b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "75fa1d30a796ea7e6f6225bfc9001a3d48ee2b66985772624f51f74a4eac8fbf0e126a8a21e7904a4668c37257a2566f6d5398703e160c76fee8cf4510ec4b4fa38af5139a117a40cccdf5b2376da59ccc1030ffb37ecb65e7cea239eab5369c4b20ddaded7b4eb5ed79b3d878844217f4094a536d824b2d1b9960b8f9aae9dc42fc5c9266e0e15a503702096fb725fff3bfe4eefa8bbb232ba28542bcd23f434dc3b3c8b827ebea88bd1e5058763260c45ce83915d7f998b3b557a94a41f2d6e10d5c6c0881c5080f51a20c8def82ecdf795ca5682a4a4b451f627e26f1a0f4c01b0c4215d335c753908ec16f55290fdbccf0855047280c1f0e226199897300e456ecb74ee14bb1b68ed54408c5a3932eb0bea33ffb2f495577f37bfa6daabb8971bc227cbe817efbcc618f7365f5ae49b51280cce5d90a085fcb2568c7381943a93caede03f492869a768c7178abd6d8c051501a81eac5bd87da6bb0424655356d5cc86f0b04a598d83df52680cb20a49aec6f9966e03feed8de78c1e06b2d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "afa99ed41a02fdc5677826e51db78440e7336159a829d315401f799bcda6eb283c2c442706e8ede5c9641a50f735247795fa823d257cb8342315603904fcb7f3fb94c1d885917b938bb57dd8114effb76f0ffe53474b3b6ac909b8ed94a1ef4886b8101727038f2d3ae6daf82a3e985ba5e005998c31f888c3c53aed0246b99dbf17d12c59c02befbaf580ae4b54bf6cf4098840d86ebb406df68b871ce3c6a6452fb936c975efa9b6b40b2414017eeb8cbcc58fe3547ebb16f95efc24cceedc374744cb102ba6c2de6b6e53d561c5a6be9525df8faa7756a2e7af39950013289d08ea48dfea7e6fb0e7f228a8ed0c19e229f1929fbac0e183aeb196c46a5c0130233d78568736e6cf377e26e3155576982e3d65e08aa4def25b1a1a5a225cf884145c187818e71a989e0745eb6fbf1768d6aa5f0ee20d8d534e1f4f17cfbc78181858d1e887848f359a92b44a8344abbf720e9a0a195003e6bd881d248a80982201f97d524ccc159d0d0a371cb5d913429cd43d4416d9d572d49dd140c00a80"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5eb805ad3344e51dfc3b5aaf0aee47a8114587e54079d1717ca04e3e0786681fb9a77aba6a915369573714638b408c4574f8951bf38ce7ae055bc95a078dd6c68af56f33d6c8e39e61c386b8d5d148e94fcb64b2ee4826004509f6c033978b75f403b8710b16d4e0029321e340c03dc4ee0cb2e4dc112c1199a9de821a0d73fe5ea361a453175596e0c945ff0812b5b4c92bdf3cb628637b4fca898b09be06188183f37a59dd33398b786c8ed44a0f36a3a99a597071a17b432c76420d5a68d683351d85c6860572e5213f45bb7440febcc4ba6908b3920079021d03c0befbfc0169d987d5e19cd81267aba56684be25b8b94e3f1229c5757966938b63c66ffdf0f07684214d415d73bed838212612d3cd4071a53ec43cbbc5d71bbbb60f51fe310c26054318876a5862033fc21eac0c1ad91f7d7eea9318398b2344dbf3c2f04574a5c3db3121971273244ec876a63363054aee10ee276e8cca376e60189645e3f67517ef820b35c930485479403d697b2a72689fc238f09f60e3b598ba562"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f058dadf6bd5ccdb3c9a70a4223439936ac81daa5928d09c182995503d72b8077dc01ee268658e8ec4da9097cba57c19d005243ccbd98454ec42bae8f7b7ff9fff4af6b2382a271931e7ecc15cedbf52d1426cef27e033d58d8e153341265552edbebc46bca1d8e88bbb9c0f82600d29c02283fb295caf4a743fd66f096b3ac12d8f301a1a1464a511f1e5da7e46f722919836ed985bdefe7587391443b7e9f6dc7193e51f0de9e0be451ee335a39b875be4fb6e54ec38d59aedd2000f6149dc1e07bcbc6f674baa3d9170759a2db41d6a1691086da82baba102cd85d97476beec17ba3c10e82c213ec0d09afb4fa70775097df3e9c911a2b8a8e3d70f55e4236447c0a539e499bb4f442d218096ad35b104270205d6677f37f7d96266bc180936c1fcd7a34f13976efa47110b86cc4f5b0e94af73887d31d37fc38f84db3ff7b06bf151f16c0077921179fdb52ee89414dce82c0248a97b88eb2aece5227078877148879f96777fbe7fdb1aba00d9c7340f7a66812a080ad1da514fb1d7855"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "93f7909a8a46597be65fe76b5c724bad99e5b2692e4a6a8e9a7adcb38a39bdd7f4048a00edab88fe9316f532b13be7283bde8f7c4ffc4a822575e992cb8ae46848015c0ee56817aabe22ffc2f25c80e04a0664a7e9a82dad7b001e21b5c33f08965d80a1c4bfff52efbaffacb74b0a9c10acc384cc707b5c5295fdd3fad5fb3b89271f8cfe0059c0317836b2a42640e4c0b3969aac4050bcbc756b5350dcb61cac15d045151e412b6aa94d082266e7f4c7dbc83b2adbe817476eb6bf5a07cc7f76fe80b4135e0ec5bc05b57cc823a0b993b7b3e4f3a6803879754220d7a6ddef0f5c6944b352ac5064b9d836a2565eb0e2049c9208b797de75b141a5f6d89bd6dbae167f8b1c7fa9a316d10d33d96fad6e2692b98d42fb6fb3d79a32a7a5eea23f421c5e1dcf09047b77b253217c3674b97b85afa0162d818e569d6c6438235f404e8fe9e3b3b7e38878b5bd296f88758b917b7d7cb650e6ddfcee085e52fa5143429b678a3fbed73b588b6b4cebc72d3e23266f8478d52629cdf1a80ba37550"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c40ce5377f098678cb1a3f6177c8e290b691cbafb4195a6244d148ec48be99792f6cebd4c40614d9250bb3d6f6287171ffb713a0814a6746e2c4126c82f7bde8b40518ac506cc73ee8e0516a0d0257ef153fa2464e17cd17dd6ae5343d43eadf67c4bc629082b484985dbfce3cd941c1b69dd4a52b0f177f641945ae0037c79fd0b975ba955b2c1901883f2c5320fa7b43df6c673eba7c76c0dbfc03a470bbaa2a6083892af527d0f5921d2e20080804db8db936d02f53cae19d010a113f080e0f7baca77c70fab4819c2481f6f505b5459b59a2a482c6b8803a26610cf54418a931d48b8b3a2f0a5e82cae0ff81bec4ee9cc93e8fba9350b5cafc6c020b484847d1e590eb1484caa4afbb7d3cbcff85789ff47401d69de6554ae7ea679b69e115ebc0fb3f89ce9d104e4a27a3ce5098da2c4a840f496e1b2395a8725dee67259bbc71e89aa18c35a9c0db3d092e02bccdd93fd6d4fe51eebf17f5cff0e990215537cc0cefcd69eae4a596d8a95a9ec40ef651ea7da397630fafd26494da0be"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "28d3351a970732d5ac3bb69fdd6d85f8923a20f7f7d72985d6df68e41f972dcabb638534d163eb8cf8baada3e1debb7249da4efab8e1ee782dfbd3b1add9e77253ce048c8d0a350936806ad473304f1dd0a0318ad10a11085f2cafc20114ab1f724ae5ffeadaad0bb17bf66277c499876d5ce17026d6d30964dc43e9f68e271d5b6c81b9953090f70bd9b9c05e3219942bae623faf06c6f21952427a5a1a40f05c0c5159ff6e9b94fe4aeb8310b0de9e69ac5f0f4787b6d489d1040ad63ffb1cf0fb924239d5417cbbd7afce71ac0841a0fe2b6d6a5742649fa60433c55fa2cd99e1e173b67528784dd0f55488f7a9939b46137f9aa33bd62e477a77d5fbcf0820a10a499aba3ca383210778e7d84dece64f121acd8d74a761219c6359d2dcf9aeab782c58dea8bfdbdedd4490bbef8fd514f90cc5a33992c4d3609e300797fe0d5dd203fa71f4ef0a47624e5e51455b74ef87e49b9d122264ebdec7fee7bc0249f02ba60159aa0aa8585ce19633cbce48e6e4765b0fe7b4f1da4a8417092873"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c4a4057d4d2eb4e64dc163add62d9ad01b24bff92fe0607c0cd39e3dd05e5661aa1a2c9dcdc7ae8a034b93e502a4eebc0384519a2589afa113a0dfd45b122fe16bb655b6a034b668d7d400dc250b25d7dd4511298c1185c3d02b82ec63f3f406da0c72d204881ef5ef43e63cc64b799044a6cbabb533d862efa9c3f483eea43b26859b134a2f321ba5ad09ac8dd3f740c0ebabbf35ad3736b093097769a635283c20c1b88ea0a115d59a692552ad8f70050d586532cd3b65bd9e281781d09712b1f1287350a20e40f11af5df580a98b258fd7431daf19f92546d5b997df560a3237e8a2e83e925e45effd4cbf2c1cc439d0d3e658d836d6b93513c41c87bfefc85579257cb8273dd0bd4b7ca21c9e2675ab60de22289b31f5f96f708b76ec72b0209c8846ac6e32f1d28996829ebeb949b2358cd2332178bdce80804e4650b84a46ba4f3bdf2aca0edcb7d4138e97dc14d30ba34352d62f547caf117856a745e1e99eec18cc2fbf223f4548755fa3ef8d9d7c0274a9a7411dfbde3bf53d9d84c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9a86cbb68e9a4449be3ea6d69e5cb21af81647a8a0105db03c54176fc83991c2b9ea548fa8eb3b248c72c391cd23dd675e865ffa561cda1abbbd58a85fe4fd108bafb213a8c79eeaad5bb3410c7d6e85a237d1e2f9c8e0b8b8fdb472732bd4bbfaf58f57600996a49a742a6ecfaf55319bf939eece50d1b93df931a144b07e075f8486b5dd65071bf43812a27351402b849872c849878634cb01483df78690ce0dbdc5d45d225ca87614ed1afcd084223c86fc9bc9c891996c096f9296b9d91a564465197857fd6769977c8acdf0acf2ffb1b24d311a8d0a46109594f1fc4dd5b139c180c6f02b88e72e155626a748ae9da4eb6a1195126f084b012f72405f027bd22baea81d765f435efd2b97fed2df6e38ea603ddf8f3ae969f9690ac22d8072211d1337125a3e88388fbeff1b0c7cc7677998ee5f7ac31d8e268ca900b72c98889721e18e8dd74f4b43b083998b28eda3895cbaaa607b9a05f90e36d1e172a95617e9b102bc0717dd2a1e807b11d72a8a15288ca4643c791694dce30808aa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71399eff1c82b67a7d5da71df51de813631f51679ba441b0532997ada04711a2c874e56ffe4d9289ebdfda910988e1c210507a450031592268385fb9c08102c1961d33bb789522d97fcd86b7e27b59d3c369280c7367286f46c1e815851349fc16e1bb2fa76af8ab168acb634a22a8d60d7c6d2a81f4db77e65c621bbb4d0e5628ee2320b042bb4c83e55e2137ddea75c3547f3a6b93f1b0a0bd29c729835edcbf5129b33112ad000458f4a8db1149d514db7ee70e4b58c11b37809dc32020dd81fd1e3b0bf1354154e7dc0da0403ec944fc5a855026473112c88f072a8fc39b984db2c97d085783d4f8d96c87f4b826f39414ba05f72c7a22e25ded75eff8f00e53401aafd0ec08b255b5d03b2f2cbb9603a2def9e5a754b33953d3c03ab8cc7f8db33ddf6184150f5680f7401dad6b6c38ef848c00b08a70ecead088f895acf5f25c9e21c87089fab3e3edb7ee3bf3570145041808ca738a46c8de389b5c2f84f98f76941fbe2a9a159525994781137cdc00951d4229f8df099b44930a7a72"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "661c8fc20646446cdf579d0a78003666c8fd9fdbe9845c02823b8e3b780f532d2891fec3a554c743e87fe898300ee17639077fcd0936c13eae51a40d98c329c3ff525f65568bf74fc84fa112b3036610d49faf17f3426309805636b9502c3dd81994465594333e2263969da1509168f1228ded2ab8ce0ca53c8d638db26899558ccbcf52af7b7017d68ba5d7bc79657d72f87a14ad8224f40d1eeb1925b51f8330b221ceddd530a73bb814216fd6afda33983a74f7da5cd733729df22ff78e027eff2cfde27a76ab1abc97e08375f670eed1beed74a9b9205ba2497faa1c46f0038f098ff5950be17d4dd8a3ef2bb0811a8945188d635a977de685435dc128184948c53f43abb70c053b9c6298b7dabf1df91116cfcf8945e78c7e3de5bfbdf19b6893e733cbe65cd33950c77132b7816dd47d9ecfef2f15b4290cc1a4cc5d327800215a49e679b640b0ad1aa1593a730eca633ae17bca48e9efafa0471a6591535c94c4d123cb2ffe33014302f3109712c279834871d9b18982ca413d131126"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b0d588982c68cc0b39c00ad80c19ac645e038d3bcaa384909d94cf6c8ecfc886a83084d19843f2878879e60f5a46af4ed8d62f533cda8ed04ad8aeede3e3c823913d62b28bcc20d9836f6ddd9ebc3eab3fa52e37638ecf897d7cc027bb05facd153090a78220c10ab177f1bf19b2c6ef6ce94611d466ef758eda71f4d496c420dd88e712c6dff77149f4bdb50d1585db27fde0f2fe37e04edf63e56eb9cb72106a9a821a670110d69683f32acf5972efcdc34ed5f8ea4a40f4f6329479499d584c4db4df7122a2c7f34e866564e68552ce12fc30c2a6f24ba7c7d9dddd7fc166ba8ab0b8b7c1cdcc8af880d6f1f2b621286ed722edae310891e3b2b81addfda316225965ddfcf0568486921b125cec003a7b48af9dfc95b0a9b94c53535bd4dd977f2a4aecafe2fb08b5bfeb997d22f6fa5fc946481838a32273b6c7a89817dbca3d2730bdffe63e096d3e88a7b9785e7ecc30cc5c847f193268ed761e05231e3009cf3ee58d2a4f03ab73f5053b0bc1e57960ed3ab43ab5b1493d5a73f6faf"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a60239ae28daef9b18bc56ca81d0c6161762a66e8bcba6f387f71433464361450a6a08912bdbd86da34ea4954ad0c6548131d6a4de7f60615560524ac5644d69e14f4bd11a29b8ad20753e2c74db5529ae90a6c733032e2e365f9f57cdcd5adf5c66979870d8eb9c5eaef244973376f4872c323bc8ec32e5e92713527b6545aa85bfb7c31325000e6ac6dafd5b48db8286bacd05bb4a9de30d81a0eb8e4a2a888a71152e68c0ac99c74adc697ef9f34c9f61dd00514a8285eec30364e96652c49a32afb7b88f60e98a4f0d2382d795d026d8428818633cd5d62d97074839362fdd2508633da09ba491ba0ba0136056e7cc0c25a0367f637e90ccad93c60c5f735fc198810a01e2f1394f5bbeab64cb0eb87c83f0487b353c7fac6434805476f65292a72aad28b1bd7cfc5764a3a6457d05434814e7f669fee063e9a171a7e0dc627221b540bd360fb64ea870a03239eddb4cb582a0fddd6ce73e272c12901af1c9865d30f11a461fa1d7280eddcf12b8531fc1e5b6d6a771b9917fc3cce20188"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1acfcdc7d861cd9b8e26fd8dfbf13517caabeff310a2f5df45941cb6c4ff23fdd500fd1ea35a8ed95060496aab0273091dd9725ec98b14a71f214e7e9f9d8bf77e62c2f1b844d9ffdbcda7c11cae4a463f9e525acb924336a5c93a5331c2f7e167bae20464cdc68fd08f515f21bc897efb732c61219f8a741e867c3faee19dcd9443a8b1f192fa00df56a1de690e0670cbb0149bfe8bb5b95ebe64accf43a80f5d262666da65cba48937ff81b78b489482aa6a59951b1f56817d288d3942cd79ab7eed0b934f6ce092fe775eb0cb7ea9858e6810d3720751361b903706b50f17de49f10616f9d7d8053775b00f6a3d6e77a868045a85ad43c15dead74f5f86e46e2a455961b7f6092317e87d93b50a247c11b8c27087e3ecb3a680551e3bc3874a34cfba1f19f69a708762d1ede6bd560095f31b56863efe7913947132caf74e50c64b94ec8ce28a0ac1b4044f23b89e9fe5c706647ac8ef0305a0402a84d21a3c546cf7a7ab63aaa6577aeec89c8c260124cef46f587bb4ce940e0f963141b9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "478e30fd62bc07a0ea6fcb4fd9875241139b012c921c448821356f29bfa331a1d44a03870a9c79482bed3ac275e0c2a15f731044133b5f6e1491af217180c7a5133ed781665265bd6fd9cbf3d65111d39c6c4314231f745291c70b6aa3d6ed696157612967a283003f982135520f959d24df7247d0aca3a81f7af80062d4d2b2c4fba1d1982bbfa37d5f9175747f6010391c78bf6445f553a5a77251f4607cac9eb17904680536c2965b5db4431619363245960dc8643c83b914479ef0162c70713b985241d2b271facab79253369b37fae70888db2003cf87677e915888d1f580e1d9fc7360ffc8a36c15fdc1f27eac143081612c004b81d4ed63bade76f04b0c9acdd5a79457c5be90ab26ba7c11ccb3945c05196b7ff9e29c713f6de873cadf6efac0879139d2bf25171474eb4b754762352bc77efcb50d4328e940ab4aabb8907043a4e24fc2eb0fd7da3f31bba14e1b91624212eee638ec4051f1cccab861b8aa6948326bcbcdddcaab5f2d0b38737ca7722d8cbb310585f01787007a9f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1e035257b6ec35b3ceab42c5ce7a5fc87fe655a55802b7f8dad54bb048d92ac7b22982bf1910a810d0a3c5aa26c5eb9fe3e2692a272ea063a31607b0765bc3cd4365f75db38ac761651f9dce99c3400099fe37a76c9201fdc4f97b83094734dbb64d6ab62e5ac6b581412943285083e2f8ce252596f8bc0e0894d4685de91e248c62d68bf7665028d06b9a28a231243f9022c66c02ca8c47c711bcaae628baddd685f0a4001a23a11e4a898de0c0247373e0a5282e2214f7eda51513a903c810a70dce11a95c808dab26129af2555679d8ba048585a3134c0197ade27eafe7f4a777ae835f509301bae94e9c6d40ffe5ce60a43b96a55efc5abac62f747d5fb3a1c0b3dae4b9bcd8148eefcf7de3bf1731aab7bd21946d58beb2203da98397bf4c1479b1072a01782f8f08367754a1e25a93a096baab9e88475108b4032e473d005a9c91eb3043ed1774cfd36aad18446485f138da61dd9872364d35aa7e10e116c70773547ec1625c9861f0e6c92a9243379604271ba88904fa0d247459a6f0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6a245aa2bff7783e93fdf6f5014a01934272c88d6ca19ce53708237bd15ba9431d0ed81a6e81ccf78eb2d6e1d9ed5c46d39f818e1a1dbc7634fa1e2a1ec207335bc838932efd7eb85bc62fbfac07b0710740a9f0b0621bb212762c891f04e0846ec594922e917f5cc0509787603c9dac04d98407b967e463a0d912bfca979b92b12e756051e7bf023c9f0fe061c0d67a87b79d8ebde7f60ef4d2399964b8071e6a1a9c63a8f316a174e33edb1023fa0a0bf272800a9620db648d061eadb9d180c576817c759483f85ce359685598f15c9b8f00d75f4a8a1cb260f666fbff559da3a4f075e7915b284febf8bf21eb668012dcf31692123b94b4e44e3ef17c942644437d59c49b437398bcdc68b5110523fcb48241c60a8f4fdbc0ec45e80acf259e61cf8414f4dc9e9adefdebf94427b2794009b1377d64059977307059828342d605545e0b776cca88dd0db753b5d8aff63051f9ea49da13821ccd4cd11c2174f5cd179eb95c6998eac5b66a19b8f6a3b4c6b00d744ea14ef64599ebdf94f859"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bc870ef5ce9468f85274cabad18feb0c0cdf2053f0becab52a3668d7ddf0239197eb2365f29e60edc36e673dc7b0f89f605ed6f3e9670b7bbdea42770957ccb11f8421a9982f38f2764f75f31fecfb1267a9b1e85cbef52c2d3e54aaf304d54edca0e2464a71946442970ee0ccc545946ad7cfe08363c87dd89cddd1d7d579c22ec49525fd9d83760909209c1e79a24f14750f0d0501d517909dbe852ba777415075a797a0f410289fce04c31db77a97f1eb1e8f978713d2b6bf9595c03f6376bfe9b9a5a8943408170d69272d3a5ad2b98b73d1213bfe97fdbed1b29b7b5a01bfff20122974b023251a2825512a2e99031777491fab2c1f41517953c10145b0b606171c22e06fcd78d6f51c02a25bb93edd7bba6fc3d606ca802f8ec4f82c56d1aeafbf6b7617c604ea53c736ba6cdd755df7b03bf3d00266645e68763a2bc53c7692bac8f57d14675d6131bca1319f251eb589c9cd71062d3792a3a359476038dd1f55784754bdd59b91fb7a9fbf9f2274705abf67b26a227e7ad1eba201a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92780052295fc37894ca6c4ff5f6d68e21f8b907a5ef5411edc4fae49b615503e6b2beeb1501c0cbb0005c4c29bb918eced60c62fb21154d11d02659ec1cc2a41786c813fe80e8fef35594255b11a6f6903b93411b1db9697d69f2ce115954b095d5e56cb7d202c1d4f6fbc795d4966980255098f4929ef28cf80a2dbd5fe2701ca358c6acdd55cc801a0f8fdbee2be57c6b6bd168e90c39cc20adbaf6bf083e3b53332482a411da3983f054557ce976149d82e6ac3613cd95b876c450a474823d03ca31c1be5c7049a5b554fc2b658705f16e24eb9fa4bed22847eefa71ee4a253c52675fa82cd22c924e33467803faec7e4ff7fc81c40e3c8d102cc4d54ac8b5c06b8416041a50cbbc53723373bf13a7f5b2a062552ac843cbe18b3d5238a8bacc5592dd3af26bea3d8cf6db91d9b54f8e61d62f46b39bb9d918ce5d77370341e5c3ea5ce4f46a44bdab383ff1a5afc5ea96dde6094273606e4ce4ae545bce61549e1248011d6e2bea5dd6d219d9d8edc621db13631d17067765827c50aa96"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "abfa120284e8ecbc3ef8eb997e304c657bf2b7e78dbbc7b5d910e10f02a1be9ba1305c1ba831da12e5bf7ceb70a6bbe94cf2c422b2e56ddce696b0ae637f910a7032fa26c8b0489cd57b3af8b3eb09ceb24853e95315db7b6e468c2feb5287f4338d5b301efeb79815a981c8fb5112d16fa5ca1a6f243af9bb57c09e3c0c68a1cea5ce25cae53609295eff951bf030db144d3871580f1b9285f6e58b7d7a0b23dcaf5dbd2d96b81674bc9e4b748073aafcbe476808e7dae536971015891efe25ef14b00e37a63300ae82b6413d31d2453e55b3808670ed8e76fa733d24e346922d93c7d340a820151686f00c4781c08419caa56c950b9674406cce2c1f2658eff3413ed6be5ead69b6a46939120e1b03889c6045805a1f302339c544f32bf0ca56c7b49b2a24078093d2747c4eccb77b2db148df83e4e2094683716abff5599dc5ae6d4b132c2202aaafd8a5770827ea93a15a361a13eaac22edd47e0154164ae88022f6e5da9dd158a3a25f5fa02638b1522180293dc0e06aa0150b98e7903b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6874b0d4afa491d22ea00d77f521010641dc45ab6081c939770c8a74553ae414fbdd1a2686f346eb5e50eec2b75be6b4d6e3c1574d36fe32968a5683dcec662480ec526136fb119ce78b7983875fed59989b24a2082b7dee49b00cbf3e18d6677ac640f723719362ea64fafcca71c4e5925159bfb36b7634acac6cdfd6eae269ad7a3c2880eaa5be35efb72d42ba30bc5fdcdc0a642e8d4aa2a6c1c7faf4464ee49284142cadb7851e9ee832a367558b1f3f06d4d55f50c8814ec6c2aa4a3284cdf3d471bc07506c4a5f061a441e44b87912612f1e4c576f4207348b40db8bc173002ff3437555b724684bc01e8490e34af10aaef0aa9d509840e5ff8a6cc92b2877d1ca108590d7a382d6a45ed0eea4c0e0abd5ff7675476b253f06a25f21c6e658634878ba318a3858737ad875d3bd1c1cd1128a094d778791e6163970e78909d4bc1f5b62d912bc643afe9218ac9dc29df522909d394a5178b285df3669fb321f0d7b6c7b50791b6ebedcb3740fd7f382410394f5853724970dfe75bf6ad9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7fafe1dca84d820316780965987a135054f498e3a9f70341dcd4cdc992789dc412b68440806faabde11f00c0b6499d84d5962ad1dc9586fbcb57ff05d57c907d74bded8fc8d990c71336d814f5b732d0fc3f441d44b29e1187102664fa71e047f0bcecbd57d9d6e36d9085c37add3a9c110be47b3ad2b34c5b8e94c6065a56a638fc073199b16e17efec87cc482a192f56f8d0fc0c84e211d1dc658fb222582be550439615803be1384ff8d2ade2ce1aa46bd6544141246ca74b86efefc8c7cb169484c122f2269fda56cd87cb257f7b31ced8516d01423c1ba7edc1ffb5de565979cb45326274f160a67f90a4fc6e66306cb833b914fb31b2070b3f60316aa1b2ad5cb5580be9aa47c3e2223fd9427dbd6f35d83e7a890a8054f71dd4d1b11d2597c47385d3a6123cab406dc61c562ef40d626e7561fb81fd3eb1ab72af94122a40a4f0649022e0ed52fcad209ae22613c5956215f0e3b4bf3d2ca6b45c5bd5c71138ebebecba05d0ff12ef257d5e8706a628876c958e238a3e4a8b3806bd4a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5015c5a03cba54943ebdb80e79fba8a8bd61085c0febd1a675aa2d0712cca98b1f0f43cd3e239c890af58dfcb40baef28692e81163bd87b5121d67c588cfe972ee8d560621ca1e9325161bd13014625ec02e433cc97f7025544a935e0f8cdd728f7fedf90a8a8e57d5e12d9c22306fbae77c092e13a3bbc9d98bcdb18714d62f3f24e65e74768c0a9e9b8600e87443eae345919ed7fe4c8581dc00f1bc0c2764cde2108e21d34cbb8f0ae4293a4f7d4ef938e8765bc862302379d979207d4f7e294f6bafaa309aa4013877588192ec5c669eda7f41427f81d75176480c85e3d122072d96174a57d77bd1e637254282c840db3d2a1f7f05de9f47422c32f0854a9703c668515b5b4030a5d26611e452306d8d239589458b8bf17f56f3447969c783496ceebe16a163a06f17bed06d4505b8e0d809e351e59883cc3ed15faa22683beb684e04323f146dfabd03e836f08382f5d00dd2d1e9ca17946446c306a2b97875faa042e3a4002fead6d15a07b7b4cc9a2a6b5b436fd03e231cb100a43fd1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "872518041aaac17a061bac385b6e03b44e0e7ac1d1d269e166cf4e4518bff2e3f70656e7741555941032359b110530518955870acde003ceb4a528b9abf2a18c375083af2554e57c5614e82bcc012b4677def5ff7cc63d4faed4166097160891a0d0869cb1117427712861fb57b2c545db08427f121533bf1f3df1d04c20fa2150c18d4e966951801c8fcc7ba6f02801365906373d239942be633d392376d1cfea3857da770ed5c3dc4bd35b7c5abdb036e829c50ebcfd31a55c4baa2cd63d5b54cf92402c00f3e18097affe9be39294c4eb04f033ebc926ccc040f37fc1a81c132d971fc1724c1c00377d1157fe08385b3b12c6a7d44314803b1a2c72f7a8836c72346bbf428b67b86bbdf37638949d81ff4153c81d5fa1b8fe3f8a94701945d225e598876f2457adc2c58424908d70e3a61e7bcdc909993c75ae0c24a111c204ac28aedcd7a0cef5adb278de2fd395c97ba15c9208e32d709a314f17504ab83f583e811845e6f7143e9f6b9437ccfd699d663e1749d71b5639009d3e5cce02"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "745f043935ef3cd29118668cb2115b671af0e3ea44e9fd20b18dfe1667c926f9d4ab7e281345f47a2b06e7141cb69ee1328822cd04c8835c42bec9c19e30e6401bb6e27c20c53b69429e2bf5641c7398338f080fca064fde6eaf77451cc57d8449046becee9b87d6f797711d20fedee58d0f162f71fc8e736229753101eda5121f332afce03b334a3b4baee7c97e0b6991b5a1da18a7499a99f8b6983cea9046ac22b52f7319d0d1588c2105c35773c3937f256b40ed8f4127832385c9575295941572909fee56fd9a457835f049afea39a22792f012ea2d38d0da75fb22e3f0ce7f628a1488e6d30f58bcdce40dde4146b472227a666d3d4902374c283f9aadd499604b45511cd120abace789075c8bd232cce717824c551f8d8d03ceca6009e6db55c6bf5d0c9615ad738681ac94681ac2aed6501278eb882436cd134c9398ebad449cc2c430ab9b8513b557dc4c345ba90b5dcdcabb01992cb9cd851266d1520762213d2c2676b4c2b80301d59887bebcf8a09b012f8907f04f7521175238"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5a29dc4f6d3138febf9978266c319c1bc69cb33dc63eee578ae1bd2a4736d28dd9d99a24926a2a6a5a2404f4b5a15112a7d0c00a24a427a0af817df199a4aebd77e6b2ecbc958d30179e00d8ecf9cb1500a91d5f7f4380e2469cbbe61d91b26573b2f7726e5af49af963e22578c08ff74644cf93c547c64965d708574b4e5496e3923d1d0414499220a6a9349a0116ff8d843c8a563865eacec1c284cab41c3d6aa813b0c5cca1add5e7d2edf36d8845499586b5118618e1a616d91ebc3349f5ee3ee1088d9323e79967929a7273910b389fe94882c28044b8978f5137a4b2d8537eeef53600e5c93734de279717141ac470b8b7c40eb0a3b0ac6cfe4e66fa2e50b44e8fb6ffb9db12c7ceefafc75a89c21d767f8d704aecc416f5771daad4310aef485f0b9c150a4a7fe6c38d81e352fcf0e49cb036aa02ea10c2e6222c4f0cc27bbffb7e89d1556457d73cd6333bec31f9acc6b7d927895e96f1e2c87aae21f8b1bf35d173b57820739c7f170c1be4b67a4db347bdbdee1baf477d7de4b9fb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b16e24d20ff575be4f5b0322b0fe67f02b7f2734a7e350f078c401a4f1170111b00e68524b566c7d191e48731d03e3f8e4b2ef90f8c9f798c57ceaa26411836f7969e234ef5e4da1ddbe2f6993efb4c4abd566115727831cee57a7511022c33e47716fd796f2263907c54dcfa7ebffb1912da68bb5572080274a664372822ad2b4516cb54dec43185fdaa0022c84856a178f69483bb743976f3d1f1ea4e2eb77d1c55800b7b405cc4967d3ef72ca6310ea6719617255c95a2e31231e6c8b6603aa82fab5d95009e908986d105296fc1f81eb3709ba27a68edb771e3e887903913e72c6386e3194dfba12defcb6e9764e07dba19a06504faeaf9a2313e345797cc4543c6f38a656c4c1032120ad6e83d65fe51275099c9c6d3619a491c5cd8995c42726f8f7f72644957e87b51b698ee443f81a24ba0564260fc2a776316f3f470ff3e1a3e3d071521351b11c6f4aad061c6ee81da1bfb2f40ed306ebf42f4779432bb79d7f0d20372c55aed8bc9df38bfb64fb016675ed3ac83520900113e1c4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3531e3180f6385e8235d402ef40db775cf88d115fe8c3426adba5a4b36d05063130bc2e711d5e71f4fef4cd2d7c21a7e2fe76a4dc02b961a6edd3658a96c78e3f7971649fc913ce8c9c4ec9ebd8be9209cb90073702b97ff94e96471c42dce887732d93f89f7376a1ee0190d7c646d56393f42c60a6db3724a734ef986380e934fc8cb92428851a6ff74f1a3feb94f7f6d3a331d4d61846026477b7d7b77077a8213555d4a7339ceec0c71d65492d2eadb9dc3fcc7b3c0f08ce2d09c97c14351dbe8d2745aeae9882b252ddfcfec719c312b789ba36430d81db2d1e88c29f0ccbe410789e0cc27eddb2b4b6d5d0b980f67700c05cf9e64ba96e5e50ec4e59067cebb580a6983acba34ec260f5ebc6abec53a899483d266b53a0cb24f81c9ca144772ecd622ca3cd0f502c5cfe6efec13574d51acc023f277c3a7efe128fac202e41033ccc4bc78b550a1663fd0d836bfa31c435badd977f38cce70a5fc353449a3357bec99a87b19f92f81c99e1a6d23ba23b5940355b078d05b2554e5885fd8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "885adf1a5e86d463e8f6750b49a3c3a91a2e8bf90e4c19873e19dde041bdfcd08494a9d25ffaa679c3c4c6d5addf99256f75498f3cc6c09c45bc056daae88a509aed0c4b46df5c1a6a1b5b4f2c5d5d008bdabe5f22a0ba1f34e604fa0fc8c647709e82eddf9889241571a07e9dc91b4eca9af390f63ac20a7e526d945df9541fa43caae141ea3feba0d0fcac7c50f7b03d4172daecca84515448f3d8bdecd2513aea8565227c2da298a4e2cc8f5fe5603c30c220c2e96c3a4d802b87815b1d94e06f717030bb2d173339ec3ba700828bc7a02495a1042b644fcaa02fd9e67a26600718d056a050800eb546eea65fe9fda8258cf629cd48dba7393b5569112f156032d5d4e7a989605423d27945401ae7db0a9469375ecc8ccfcc3f2573570056027303a556115b0f98958fef8917e1861de6a59843842d269c8412da05cd2a12b9e2ae75d177ecefdd5af79cf4499488037fd2d592bcb2828b9ddf9cf7fbe309822a9f0f54368ec2a6e67550da715307eed5e1d80bc9baced4fef132b2f59cfa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c0fc6e5e9e1398d0cf6575806d6ce8c10f63d414d3ffb7d9945b986362d9da16d61e9e662ce133ad6672964adb4bac861abc4693286f826e4e77cfd72825a4d6dd03c8befc8a9712c12b0a4c2e0f3128878bd9fea55b629abf7029cb7e9cc381fe6b0eebfc05e8a8666c661641fd247ffb6e3c25bf435283a21b2b785b9d4b0b552ab3538e310bae7f36af1d2c6697df7821bd469a10dc53f007c7a240910f9f137c6d59060390c41a32edaa8f49a5b28484f0f69d2f8ac99bc04ef06d7d8cc6e850376c9e66875d00282805df54398bbc5bd8e8216943f845c89e59fd6bbd6a8e2cdbf148c656982440bf2ae364becac976cd8e40a6159b366d8d0522617f422531bfb83ac8bbac33f6b5c8c75bfc107fdd17d3cc4d54c66cf5bfca36cb1e3ccf4383080f18883b890af744b05279111095d6aa0238a86a6f3433185c3ef37203c9bf46ef7bbf3cdad39072e970a1e6dad6983e8bafa6e50a10a6ab7a316a6104e1361bab2837d51735fec2b81cc79ae415051bef115231f6e526201d0cc6ed"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92f154acb89d20388e78100191d964c992a2360f2d205a5f008091439f454f865d3d5ae276adfe4b552afae3859a71acaf151eb04696b6222a07e1274d6ac314a60090bc928164596e2de56e77e2cee607080a293b71cc8403bb2466519f0f14d26009ae7f09fd9a41447cf8d26fccf9a564cf3849be92d9e4bd2b3d7095087d43e462873ba0534ae512fa8edb2884d9e1613a1ad3522ad9d449f78cdb8331c35502851e8354829a78c56df4fc9ebebbc7bbc468f2219e93e4c524b3b8a55d7c997bf3151848ce10bfefa6f21207f2ccb2fe9526a0bfc417c239a8362282af93124a0ed209534dd540bdc8a1a08613587a1d62baf3530ba0297aebe6e03c2889942658d50f80f33c6ba0d021f9703933b2ba4a24665bb23103f0498e68a0f5094a9b9a7ac146bcd5842039dfe55191f06a70f103bed094f7adc3c3f3b4a12f2cd76db1e9ca7ad3c9d8ff41811da6adf3a9450cab6170e74270755021fa6f4dbe3b1226de09a334ee82617ab44ce93c6420168f6a75224456910b907ec2de68bc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9094c58ae7096b725fc29065eb17648925b972e5fd176a546cdf03b50d3df72e84650e99960c783c54558a44166cc67b0e6a9c8cbb0095b984440995e17e6e7b5c3f561f3a8a0fac06b973076c16c31e11cde1ed0716c41074afbd94695953a7d075acfa529f89e98f406ad028dd48602884b7f1c04d60a2317ce10a4c3574800f05b83eb8f170ee6c6d084fc68d2db32d0a430184719dd0c0141798fe608ba150f5336079c4a712d62a2f58a88d6f6bf334bac46d1be0e6341695995aff0b05e152a4d75898d713cb2cc6a01ba4df3e4b45914a2fe7f2380f94b71facdc6c50b1c61485e3acfabb986cff365df2436e50c44afb7711a53655b250c3336bcc12c251e1f0e7788c71c5f80dd02fe4cc03b1103691b45820038cc094553f8fb2a5b829a230eae9a97ef4b6c7850fb7e1bc99852dd0b7027fe8ffc5e2c1a50bf5b4e42c249e55c7955ffa4f4336a60ce0d8423f349abe3434e3eb9f3425661e0686fec79ac14e435c1f6c3df4982c7392ddb8ed77f3f65a5c9210ab81e40ef3eb76"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "59e8c182b8d7c58cba812204a8132fa02af9bb2af8ea16dc10907a14ea29a224a80e0eb6c1e12e16a3144bf01b539133f53a4c2007f15787cf61560c6bf8fb6eaee9ae65b924c5f852f622d8e9bd0b67a46dc8fcf551d577a916c9a0af9ddb50c05dd27e716c4c9e75f3ddc3585cf739986de48d9add7d39bb113234459637f159e7b95245e59546aba7f07f4a40a1d6ca1c6d1cd946e8a2afda98cf663e0ff6e9bf1a05fcb0c46486976e2d9a2a35e43f4b79dba5087fa4af8ca4cff44340b3a60d153b5dd3c9bed8b5dfc684454adada547c1f428dcbb70566b86ad87310aaddd9e935dc5a6c68456b3c2ff98d3484e471e586271c06259cb754cedbd0913981bd5afb5e49dac1e8cd86cc8bb53863f87d11e6feaf489670ba07ffd133ea14a7c60f9263f986b1d13e1e67eb0a72f67db108852f97e424d455633336f3c4388898efcfe500bd45cccadd505c481b5c89729bd1451bd790bad68d2572ff09f8c19bcba18a1b6c9ff260562d1f1ac35373449da2467082b288a4edb76c475795"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b7f073c6413f4f710af62ab1b9f023215fa39db9f47e3156df5d0dffbfe4afe1aa9dd72dd7c681b3ec542ef926bedf01608bf7bf0874fc68fd90d12e0b26b2a049ed75968b77c8a24c626a5c706fedd36336c58b8158a9f1fda4bc3f6e01f2fc19544378756c48a3283e4c8c3dcedac07b71b6610e3a10aa19996efd006b970ce00afd9256fafac4e831cf598ed29d27e6d3238b7e799e1d0d96bf78cc9f50584d6702661ca93a887010d16c711ff138f8b07dc2c4616c5204344f402067527e2eddc0fa70a48fe929e6a195e27159b35121612eb116ce2bac85e9230895044755a4c56f83b45fb3ad795728579719a68bb739bad1e3b1f0f79985a65c43758b29497f99785dfbf985cc6524d9a97739fedff3b1d6af5a7c23957807a5cc2de62110b59a0a5e47aaf33247644beeeda8b1a4bf2ec3c1260701b4c1c052276eae49994b6f8b2f8008cd5e637a9025d364ebb27c908b7f7d803dde6591a543524aac3ea330445b9e7a3090ac3c9c63c964ed6e1e6698d5481704a495f8e9ffb1a8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43bcfef9e1c31f739cf7273b1a83fc38c319d4ef394b28147e99566d60d58459482054f2b8ec88db88fa4033132c03eda101406873c76703be2bf0d0703083e9420a917233fc1baf2ccfb8b725efc7d302b474195d54d4d3c7cbcc0573c5fa0f2b07a6ecede1b445ee59d8fe101e8b0b97f9b521963b0933efe4d10bcad18219bd2d33bd2dbc81431bc6a3ae6a827c7be7d3b0a1d1718225670cf25a405ba12e9c7550612a866efc6edf994c155f24f069574d3f73bd09c74eb44326af7846f22687b84b8caf54b4052364f107ce5295bafb2d91ce6f4efd667e6ca40db672385163d1b7a27ad1d57723dbbf00571cfe56a1ee02d6b6503da2ef3f78003d3fc07f778926f16ebcb05762fb72fa50b75f78c2d97f174bae392065db2699b00ea80649ffa470ca92e57631db263aefa225bc1bdaf14093ea1323071f7fd614b475f5fd6ca0ab5df4f03624fafbf5cb3a49a92651d9a6aad2e405a7f76d9eb76644dc6b77d5f3846942ae662fd5a11707feb5dc67912c1285913ae2f54527ef39ff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0ec454d968f05e44953e179199eeacffe08757e89401d89f0c34875f81363aa99334615de41513ff604ec742730911b75138d3dc489094fea7ee75de8dd72f70af216817b5fabc521e391d5a0a870f2c089cd76105f96730ac1e33a2ad07896efe98b4237e8a937635f8d1dffd7fc77dd23b3e6959fa450e48b70611878727874df80d4f7949e14133a3135e422fb6fc7dffa6d6cae3ff75df25458c53f859a8ff34e1756b8da403aacf3b7b12980eb8e69f786c4433d92a5971d615251381185ae436d9d8fb04c6bd7264ca6b65b4d6dfdde13668f27fa81cc78115a07cc88f68462a15763041b3f44fe9d6fad4afeb2cd99258df774995b03a567d85553210111d7f0eeecac6a065f3cefef4ecbc607d49972aeb8be6042cddd844149275696cadf5778629c36d524f8b99b2445a8358afbad1c0d549312d6f5d0928fdd563e286ebdfa2e7db8acc4fbab128557ff6dbd03d123bbe525d0cf37cf9624f06821e422bf0f0ca8e27baab590a50d1e563098c920be15c0e8e965a2994d5916af1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "69a1305c5eed4c40a1799a68e0bcd73f2fddf4cdc750d24c1035eb256eadc6e59c13a7784b22b09f4ef0c34b772ebe608f9306bf5fd7a463ce0f96ad0e3a2df6e1dfa8ac846ddf54b1b10dd9583724a96a0500d5aa6184052d553266d6b69b14bc76e82e15386d3b961323b326d75886fa61efe31244f5b79f83eb4ba8eb5d19d066e1844c11ba8ef225ad6817d6b560c0ef551fab8589366ecd74b93a944aa53becaf4c8e77b13e2da12fe5543c2680ad76291f08a146ed42e0273592bedd08e493121843f1f544c766017aaf581bd1645614edada2f90d4dfa5f80c1ce9e21efe901b8ab5687fad0c022b52e154abf2bb1d0c02e7cf934519c0d934ec995c79c244eb3e5462fa86dc7b13feb69abbba73610a70f69dac24e6e5ee98cc7376102f5f3b58240f13e0eef2ad0cbf1b33e828345d17d7940732886a20e05c00f2f400d2f45ab68778f3ec85246e0a2851e44fa77cb6079addf354a37512035643ec785bdc9a011e6d0788208c1e14c02aae32c3ff764f6455c8f8ac4e5017a5d5c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8475c42278f3ecfb53a8b19904c4cb40ab5eac50077bf85b8cc71f6faff06321110aa240f9a7e8d3e99b813f29c4bf35acc8caecff0873511c9bb9f87e0228a5ccb82601dcec8b8b99acf08683e70981af9f7f2ab570023156471d77d9e944f221bdff3e666f87dffabd079606a4fc139af85031e1de8664590340e39e2c117054c8b48b20763b7b5fca7b5fffa645f93d4a9d6f3336e229f9ddbaa4e1490235c0e7f516b2e995d5abf602803c9e7286fae0fdc7cbed07a69f5b1b11cec32062330fac3b85cc4b549450ee358b859a10b2e8a33d988e52ac6921d5503f95f47d4ca26d04b4d850235f78aef513258b627d27d47edd8374828a1dfc26e4f1c2009372110c729c01dd9a65464bb1ad4be056318a0c0beee9458962e727852374dcc27f437c6c550be2333d014767d1ba0aabaed99297a544ecdb27098cd2acec886ef4aaca14a030d07ee42dc0194c1f867b77aa8b7187358a5d185ebecb24097b00a136d39553cc508ca82dc088f359cd836497b3e87276437e132096b03db97e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ab5bdea7d6018c803966227c8bf584a231fec444b6bc1e53fd3f240b30c7a3d84ff099899902ab9a11f1f2876dbebe6514f190838af546a249f3ce4353831a20effbe944b97b523c3857eec96785dd117ac188ffa41b7c8374ac37b03bd14afb828641b0c0bb2b47c1913ccaa5c1428258461ea57a72678e1ee41fb2ce9b5a1c3bcf3d44b8fed062de9a3600e940949b7478b452af12c97412cbf8f0bf1d95cb2bd4c3581d1ada8a0efdc2055e52a16ed7c2adc36e5f26d5367582b475a61bafd28d92c589cddcf99d3b94c64254a9ec0ea409fb5f480cd3a6e18728b68637b563467c48370286457012f92106278375b018a2cce2a4b274a4971725254049065198ff18e0c6a2f216a3df4accceb0077ba4b8d5492d7078d093e442b24588bdf9076d727b3a17f17172c8240294938b45ce0d695d637f11c8b9a4d71eefa0237828a6ff62d9b0c88fcd4d8a97f71b09df62274f51daad2036ae7765a03036ed637f3de571f4f8af7522e41acbe84d305f43d74f878365ba3fc0f2dd3fce2335"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "32329315f2d1bde7c6d3ff918ff3101084385adfc2216c0bbbb22b1e3dde65dafcf76864189d3ace3695e51a40ae844ac6e9fc72f1fbb04a047c58b0b6a86df0f2f73726eeb8ea2a428f1588a222bc95bd550083da397add4a6d37a14358f105e85d270b14fc3ed99c35e75ecb818889a065e9afba8918a8f0590d292b507fe36cc4f416e9168cda8ec687ae7cbe2018a585f4c9d76323656ff4d554744c516128eeca1eb6c77c5f566b1ad66665cfc81632cf47f76c2d366f3b5fa0818ccc39e1a95ae9a5a018e8b9defb060482a5e38b4037cf50d23bfbaae13f096491a811a633ce2aad8317376a087bc46f12154e2fd14b2a008698b0acd3485d326dfbafb1c36a1dbf5d7da8119f3f456a4c0db555aacd48905646ad6d65b64deda1b248e133f251ab7db6bc8449cdec4ccb5f45b1a3452e25c3a04f5881ad19c0c241e10f18ea4aa41e1856123e2694dd701edb7310e651b3d7d295bd193f800000931eaed32e4c4c52e339e939de6612ec6bd10d384ee228d2d14498fd1ee4ad3b46bb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6f4c5d8e23801e4dd6617c4670d2434af72844a997379dd7f877179bd7405bf407247e77a9b0e76956b0b3d61ac2592c7005fa85bf3cb53a231603070a83880c0202e6a2f5e4149ae05d5333f5daf142a8ee7b649cbc97d465b2354e68a192b1c63c51a1166feb428afb215d89e51bbb076eb0fb7f02a0bf512ef352561da2ea1a2265eae0dec4c7f2eeb232208965427c81c596cfc7f18ca9510bd34e83e5a51473e6e138b75368191d6b1b2b605430d9989e9ca4dcd2daa8f11e0ad05b20f3b0eae07795ef85385cb29df224769038f89599990d0ed75eb122e2cf6c0aa80f185c535bc328ae21e53376095ab9ef9f15ec663df2339fde30c480944026304d553b0a2f270f4ff999a0f39391a80a73c22644d53e1e6bb1820826f4aae6f126831b195c2d137b919b5d20d918b3fd3d85a83cca759850b27ca101460d1be3cd417dc16fff5912331118a4d514fa3634f67f72b31056cc65d8f6a11d1fe10618b88fc2754830eae79e12f4f302776137a772489e3488f37cbe0a1139848fd288"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "70f10afb809a64ab2407f0c3ddaa0f2f38f981b19536f3f5ac44a6fc85e5535e04795a16bb6c435528ad255402200b02f203bf3f539df42f0ce3cace96456728814df95772560057648867897603ddb96a92f3c7652ec24ba86af4fb7c1a8ddad03409e1bf982d01b63190661dddb932018cadba66a43cb5c4694233541c56d9d03e659e074fd6aaa18976856b8ca27342cdd3a516d587d5d46c9c845be535ad1a923c2242137d0f3dcc112190a807ca112c069fade7af53f17f2f74e2f11fda2b75f9a48250a4e9e8b34920fd20783b179399425b19e7ea99f395cd3bd7d37729a287d423623a33542100d13eb61d7f77439f4e3aed7265d7a08a7d9eb0477aaca23261e4d06d25ecf1219b87610e89af4c1b427f7a9432624dcc6f78454376d215a6fd8f6e5f1211a18334395ffa710c8730abd64de0daf686a45e979547c46f684fc130f8cd9c4ec6252408a87e29e38a8552a4a908ed86f3f83d42a9d7dba1574a2453dbf2613f8c9aa5b7fffd61f222c122e39d86bb01fce55acac1901c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "36343b89eabc3dcaa053b5be3ed7faa79c143ec18800be18ddd3747ecd557f09998203325f89d3badb3eed7fbc20823680d38eb44dc368abbe180474f494431c04d936d7b5886ab3aa2306c0b03750df05c4e7fcc2dbab79736e2ec9b0e27e277d130060abb4ade70cb924ab950e95ab1c2335578c5cc40dc429e397691542edfaa8f4d408918beb9b0cc0668b6f1cfd9692b32f63c9fa4d482beac2745d5777b6da28ed7665bbaca9999f65309ee46841a8e3998fcc6670edebabc4515a438375ba820380138aa7f2e32b8f74d29db86cb85dc2b556f4a307c02237f18fdc5634811653ec2a440a53f8647c495b76221c058268713191a9bdcebc148a60d2159f28d92f79dc5f3b5f0c09e62bcb68f7003bf71bea00d25c4d7777a28103ea43e92951d10be77ed7c73cbea573f7e46f924e4d12cf9df8faa53560153c8fea87365b90ad3f0e6a50b41612fd191c8abc3a5d8f98bf4006e1ae31907afda4b20d7632829bcac43c100ff3f10f0032e1bffd3b207eea2d6a87027577e5458ab81e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "750133d796053811558b21dbcae35e267b2fa467a9dee49755d45599a6774682e40e00cc46cbdd412e6233070dda3a59814d6238f474d04d9102301bc281816bdef246f80bd3ad06646cca4c9a662527385d3c473d03ec4d021db74c7a1ba6ecd1cac005d58163644b993aea62060a25470083006a6515ed45b1e54601b9e5914b8d5e3a630f29bd88036f5b708d2036e4ce7832a239699b2879b6089048e33c05d3672c0e5c573699264de531a0f6c2c703335fa32cab0003d25f9bb8e0fac2fed05a82c45fdcffdfa0c2be8e5501212007eecfcad720310a8ff44ab7dd52e69900344996ff0dbb7c39d2398769987402a7e1d9a6378721f5aad9faffecfc4fee8c4092207e849715c56ffdd5c42875d170467799e0f8a08ad5edbec4b939cda099d30293bb76086c5315de60e967267f3ec113f7fac4bfa9af68c4288c69d5b0073848aa722124a9f53654544923b5556eab31bc22ecb6cfd8b18e665fb345e8b5e48cb63ae37c7ab8125a1f3e5d6c4bdbdb9778d8e27f91883aac99a69a26"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e9272dced0bf87a8a3b6ce118532d1ffba529ee783857ea0ca7510f4dead7406f10c48725092eb41561d067c1ddbe0c111ff24aebe1655edec615adc123839cd77c1a3de8baef7217911adece72b3a6b617c69e8c31464e2bc021ddd2dbdb99ad28042133a6a02df2be394d5004c6ca2d7520af46227171a5ec22870fc8a7dd8d6f4e137393261db00c57fae4fede6ddc7078f7c9fbc2235147da239979fff0dac3c5f0ad10fb3de6ad70e12ca6c3de49b8a36383649da69b62de49c967301cd36d439a6c1729bff6ea0e664a6fcc95898b190cee2492fc6535b7552b5f04d71b4be2dc0471dbeda5ddac313c9cd4e90109f04bb09515e54f6463450bcb6fe06a5cf80e7644f422cb83b123b94184c9d81fd0bd4357b60aa92bbf35a9a7251c515bdbd6016b81ed361837eb6021393daebe302c4c204ad3fe724b4f5b8e52f9590ea33e02ae1ec2863df83c33fb6b21ee051f489668adbccf04883d6aa972b77dcd42c03de0be2ec9e63a717d3713a2c7d31163da70bf53dd3ec342183e9696"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bee3e72ab46b5bb4cc6138dbef0aa19effb5067358d98252ff739aba22d21d7ada25aa395aedc0c29224ca5b88169072fa6d5da902130ce97f42072b86103e1b93313452fa6285c3f963689cf15c0aea60ebefa1058603b5c9f905d5849e496ab4036ee73e5ac612b364c84b34887cd0141ebc114e240eb8885b0ee82f31a9548fbcdb6faedc1c27e0fb1fb4037124133088d5edb6d34476e1bb93e6da177197b6463a0e1042581b965e9d0e7797c13cc841263b991af9af21f8ccd44f4ff161b6545296346ef54792dd5392d26b8bc2c5a9dcca41ccc6adaa1971cbbc5e676f0c6633ece739b57a24a6bc54fa75bd6c4f2d1e554d7d7e78a57e012f5a86121e6b11daef66a0004fd514e3b688770566f4f98db5d368f1e4ca9ae583c245e30e485d4b71cd3a624eb1157716d6532c866ccdb6c5ddf3e9a6e05952f7c2c6f37c50871b21258a2e9cb152bb877971aec6827fdfb4fcee828324ed2decada3692e3c4483dff53bbfa12b633544f04866b3c7c15f713786feec165502eb895382c6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2cb338f3b3e9ca09f101b5ff3169edc180c1ed936f2e4a5f6ee7befe1e005eaa450c1ef3e78739d142dde992cf73b2349a617208f6979220c85f7c5286c3126816e47cf0946a17de1fdd80657ce79254881079da225d3b10898b1e5eadd04489f486a14ad530fa6a444c19d875c0be51875303abf214bcc6fedb1e7e43a257a3375f0ff7ef64e5369b1ac071ef8a64336f5660ff9c5e8fb389a6029a8ff853d4a8e565ba17b0f7302d4eeb5416598421858ae2ab65c2411ac92db844bb430a745470f402b13c9575b171fe9e64f71d6ac40e6ac65c5ee08160864c89df2d9567c13dbd6ab1cc6a767892f0fbcbf2d734424875e9775c2020deb25ad8e93472e1ea1235bcd06301ac181bb20a700050e08548a5cc00234a44e42134591ed70dd4933f4d6c6dac7abad2e6da8417fe42945ced787495fbeb99f2d4648b9382d253e0806d988b1f3a64edbb28904092941c834b63243d583303f6081067d1fabc5afcb818ba8a2edc31890ec28c204eb767e749950c18be17950bbe9df4ffd2bb97"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "85825bd4521c433e916152fc89c06d11ca2de44afe406108ba3cf299ca02d0c7165e41ffdac6279d0fe5b915f0aab62de6277e381fb8eda73a89e880fe546fa425f6698b89e47d457a349ac8cf0c38f255981b902f6e22ab9d90ecba5682da95b72ea32b243082d564466abb5e9abe6a66c5cb9f7977eb3b827a1b98af236340991db4b6fb957c4b055c23e13766061aae849a2a8edcd3ba1521f1201cec81c6ad2cc7c20123f8e1c13d1431e6dfcd3481b085e32ee4d935311f5341e3a0c594c709523bfbe9b4a0374967ba42390e9b9a1cda573fa6008b9a0a96250e9ccea74e5bbb019f1b870268a48df9d39b422a9064d923cbed7063d8423b020f07c57e4e33122705b523c845bbbf764e5d505d42940194699143188c7e694059416070f4da019eed7663af0f007d79433a091fab6cef6bd0f3d7021ae7e82ff956b37f9c88c2c82e57fd834abadd012286f1af916819bc9e91085eedcbda6b5cc44feb83018688da4b97c9dcdc1700d015b71597e96c0d6951f04873852a0dc3397f88"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8204c6b2d4027f7d93ff89c36eadeda03a5b5464deb495e5bd4fe066c0d9778042b8fa130396c1652949f0fd577ca23f988dadc525a820cf82756992ff81c4a7562ac1017ea01f8f9cd0cfc787dca972f27103a4d92bf215eab991e6970e409d431e6bc2be4f0586f5b98b4ba708d9761905aab265aacb9d495469b1863f5938549175f30b30561c998e081c41b039918a6fab4eb2519e6cac910cc4d931c6c81e899655f06c8a26f7b9433992ff923f27d982c1bfd0dcf62e5ca4c3e035961aacb99f831bc0e42a668c01256cb830b7aba0f22314b548c0b85d84c61c9b4a8ef331bd7c98010c9a65bdb7bc4f0f09b87d0c8b8a1bd96b6bc2035b43348dea48f1f4a4ed6e393040500a12d7a2ce1e08ee8934218630ecedbf2fc7fb5c6748ee3118421967e8685488fba058f312ae41f7d386905646ee334e294662a97ce70486b450a64dbf8ad7c1ba50f0c56295cb2dbaad3833d3922566802c80175526e24b188e18574292e225bb958305dc2749ddd4b46685925c0ae9deab2671e1e799"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6593928f8e0a2a486c9af0b6af6ad78865c215f64ba3b72bf3a103788a352d216fe5a2a3382220f037fc2d8a2d25b42f48cda3337cc831e4746266121181bce964abbc7eb6378b8c59b9ff59de336989d58003534458a47cf18fcb0d0397333045f0f0d826445b62487217df62131ac0d84a38a02ab39eb7fb1451c7ab10f47d7e62c06d0d1b8ad35268ce58573432b1f4a9515bbc9bca4428bba426a3ae8ef8695bae7a2a3629177fe00edafad675811c90959ccd7800e4ca1e22b16910170b9d697b25af45b9d2febbec6b57d550b7854b425fece239155f068c6873e314ed3c97a46f7a61c8b82af22191feda559b7e93483350652354f005a78dc62bea279a888b4a6eff708eeb4d93ffa0f5c6381a9f6570746387f0e116376e4625a01ba34d68d39b6b793565dddd357493e8d45c8e676026e93b26abcec1b4ebf467f3f069dbddd63f30b6be3b93525618ce903463ae5cd091c39263327b40b76e4be0403f6686b0ae74213a5208bfffc360d3de49253b85585b181133e55bb38aac6a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c138f33d241e4e88846f66b4c8f6d27c89c08297b8acb8e23f6026b4857f1bba758f5c15f4266b8d66aec30a5a46b32839f8863b3e2a909ff37c97322ca4a9eaafb2124171b52dfd63465e147b8e32c99cee9a60672b70163e747a238402477dce31497b2339f638d5907e43e3b794ed8f1521490957a57cb9bc82c0b066c20c826237c205bd47d1e6ba57eb5e37364bb5fdcfa8155c8015ca06562f7f0c9882cbfcbfefbd2f5ccfd2f78c684a9bd76c659bcef3de3622995ba63913120be5e0ab72d16d11cc1ddbf23d28abbb8a5831bd0f00a8286122a117d55578e58e0da5b7dbfb48aad8ebdac7e8615ccb9c21a1d877dc84f1d89aabb0976f59d038b9657c636b762801f214953b0d0cd55ba1bedb4701c5e2c3872f364585bd675927a56a3a0fa0b962a7170f925ee921c9fbb9d0d8a19057337ae74940cb86fd3103b232314385cbb59011506f94c14d18850f13556cd7f03cafdf9229030963f325b15c701c60668e6a167f9b3256bca99e05f4f5c2c3dbff30f3ecd36d79bd0db54f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8c174bf6650026302423faa9b90c71e66c2e54e65ef77da93795f04dc8fe0cc05f992cf00c41486268252f52d17a4b5eeac356866162c031e55d3ba7d0ccce982fb42457aaa2a92aea50f9cede6c19fc0e1052a4dd85d8039bc3f96dc19d8f2faef835267b6d235c25feaef590c5035c2dcce1ceb6172b693a63d3ae5815f5972bba516a096bf45e006dcda300806eba09ebe7629a939800b7eba88e7f82467d4d65889ab65f8fd37ddb27e62bf4738748d9e429eeeb41bf2a4573baff6890cbec660fa0e1e0c38cfb8a1e086c432562fb14b28c74495689e356ebac1a701deb7328ea31d30227aa9ace477cf76ccc375519995788f90b41bc7f6fd4af812ddde49be65a2c7f9fa1108376701099ce79d640ca5ddf1d34634513a76eac0b3ae02d06a2195263d79e9dd6edfe9b5bc24819fd5ade71b1d1afc3f5302156b97bc3c4fd3386f0a9c00c449eb05b1d742c75f02ff4529ff1a0c0b34ce4cb91a5f8b700d9c38ce6402bbefbbbb3e158aae035074a6e0c91484ef8b65590e6870be30c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "39681cfed3cb5ce9fe0bf719a1e92aa3af1302f6b6d0c93cb22795e0ac581317796a79ffe29b5f88fd38b572cffd06fbd2426372efc6f2ec01b2267f8c225cb6c6d911c87e7dd756ca3828383eb5bd9c56d74261e62550c88e39e7642604529ba45c81c6adbbd4104788df8e00f04239e8d4c0b43ad15b497ec04d7cad30dc0082d586b1d88d121e5e5ec1396b207410a3bebbc065ea25b97ecad9bcb9594b749a6fa8f33dc11a64c48494201ea0efb73a203cf10ec68dc052bcb68d336e31535bb0f667001dc2da63358e37bd421fc88a3009c698230c057983968d61c31462363bd93c200ce4f5add74f20d877564e88c20982713da42a1b279caa845b486b090d5fe6c154800feb14e67498cf6d3176a707b2b1c82fc6773cf65befd64c9446a7b62482777b1c77c8dfc644798a3b21533c63e0fbd39e07b127b051ea2cd85b42c0592c27bd988781ef3a405dad25e9659d9ba5cf1b3c3110b59117c322491d55a9c93c8a45635b5b0d378addd082453a6d190b8fa0a89a59867d85dd4d07"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7206322956aec277538b8bf09edf980c88df3eb0dc0689f834581b94f801883b384ac4fc218bad411d44e49c03a6d0ab123a19a4f0c7a8e72092acaf5162b0e30a2927f53543b31fca0b0b3c1abe56268f442e6f856018622584205dd898e2f98766b0def32894a508cf7c824ecc26750082b80408cf7a3fb752172afd53afd6ffb1f0b96b9d0c705574eb0f1dc1f291ad5af8c5d1f539757e19e19ad600013bfd2d1fc8b668d0e56a138381389a7fbeee5a7ac363fb4ad95006e3b3e16a3b9abd450aa3f16db19facca9f45cfea2fd52034e7a1835f6e10d40be16e44a0ce5d798a8bb9451488f78edcd203455fa6dc1253505fa83140d610eab8cac65fdb2c669667a75bded33bbd4ded3b0691de5e30c0eed12e01e9c78e56fdfa485481fe671fed3cf558730acb382f24c1810c674e5459ffe449eb82840bde95fd2f23b8438b844ca019882778edcb7d5b6f4d2ba16c5ab439556accadd3029173604e5ba40373d491779a049d0106dec560e084ca942eb6293bd3d88a6b4627332a615f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2130fc5f94a8a359b90ba546795e788328f09c45903823452fd44c5a0703033c7ceaa0bd956c20b12eccc052c2f535400e0f2d0e90aa0fd1066e400d6e81ee19fc2b7827b48537129b54938d324680966cb39850f755b71d967b50fd7d699ce3fe956a150c17088a4d29740905d4d1a6b5e013c4450302bb3c125e90748c3eca09e39d7c6e1da6d65ad02328865e2c0efc0eda5de61153ae757b33965a95da80e23f531286a3288fd61694298e68dd21dac3816aa0b80c08aa57f16cc24c641164c67bd98b2c5a895926e1025d3d699ab7cb9e4f0b43e31f68bbe2fbd3655a705b28d4266807e236c4fecac9ea470dc9aa55690e428a1b353696314e5c62d9e5895ede07b7c584f65d63935865211fbdd78cd7b0090bfc169dd000342d14b068c6adb65068cf708c4e3c3be72302bbff056087fed642480b9bf2064fb3f0f0356b7875025a4641fe5af22b98432dd708872412144cc9706dea53d9d8f96ee55ed821715124bc824b408092e5eec66eb574f069be3b5d88a8f152ab73fd160b4d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "575ef9ef6335f748555a176d35ef3edd9428abcc6c00850723b926fd84c0937361b662320866f555f6e1062e1844aed72754da4f50b1c960b8522ac932cb263c40d301d232dcda65ced16d0e8272c2a23d2130db57cc2d39b0b1fa03ba4c7fbf03c6dcce9b474583538f48075793c26df725bb88113738e674f7fb4490ca61e56b350650e8039beb39a97b6b55b5693cb7f4106a26ceba9322ff889b0fccb2e35b8309a25bd91bf0b8f5c2459cf81bd9e8c2ded35a9e87ef701e26d82207348624aa596e4e1847b111c518d881da598e1ab6e635af91c802ab35f5cda75833217517e84159bbed67bba55f51d62dac8d14c2f9e1a8d1b1649e367ebe7611af0331424ed6784a5497f80ba4617a580270a69cb2ce8b0f63a73d5ab34c8d7e3fa966f465788efe41f57a99914ebd708922d570d1334a81bd6812882f0a3b3f41f88a25bd48de158c4da84c784235593c00280cce586b5d388e4ccf92ffcbbf69dccc8171a7b4bbc8d68d1f00d8628b725f08c194fa18f064ecd2f3c1bfea173cd1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a947601ade4bdd5adbb13779e2d0893eef5de17b6f217deaa8e005fcb9a5863e1e84d1258889dbda768ec247848e7c4c8bccd8fa10a322d05fad461ead9b51180070e5b263c5ca4bf471fe2711ca4d34312cc3741148ce2a0ae9ee7735984533606aee498481281cfc398f852ed82020e0c9f5036b38b31f9812f9bfee954411d7db1653c19194710b42d726ea0844022a2e0b5eda0bc205dd94e271883bf91458bcacd093fc40546bb71ab2ef72073e278d46baad57f744b4b31b100288ad6e25fe8a582263428f83b92646579d18438eadd89e59baa4de8da0d91fae6c3667be486fb7bd5891808930ed3c0f6b4d7a6b5e8898215ab479769f040380ed6636751dd19ba27c8284bc8661d7ab86c5242f6b012c48491966925c3f780b35a0286e1b389bfc134a60969d3345b4ce1d0bc23885fbb3883da50d1b470e1bca3e7df62e5872d7855072be216faa971684d632135858303c6de156dc89be01548ed69967b3265d208a62f5887c46e3b395847f8177debf3c572ef212dbabb8573799"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c2912d0f4de569d7db9cc1a407a01874ab8e0bba81f38c370ba55920f64b41c21e6a3b67e5e0271f8d9400374f11396388966e2434aa0ebd4723042c92a876b635b8cfdab85dd25fba5f88236fff2f7caf23602c479c95b5ea6cd3e4f653cb3639e75ac1cb39d268a035e744453ce706caf3f53eafd89ec676baf74f2e6c9cf8ea4c288ddb1198f15a77ce07e7335671168eb1cbd8c607087dbb17b263c9ef83e650ce9a48ef2fb5fd37a13aab9e8239bae823c048cff16a7e1897f5f7e06cd685a829a85859695fe6956179cacdce7181d045419e69903f987b35acdad97a7dd2e7713060c67b8f447a02afc218484cb1948071eb64e77cc4e48d0bfc635340cedda460a1201b3eddec7ae5a008aada21bed3060fb17c8028eb2bb767d1d4c948bb5ff9e9a2192256e59ce48241f5dce29dde5ab2de0ba8240a992239b7a2a546ec66ef7ae549c8a15fca6a70cc1474c90945795e876d609d5bbed72b8f001673fd53b9540be4d187a484ed33506464f402160bb1f18a3dcdd47582cc74488"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "357ed432befdd0d673605a705dad0d8d2f100da229e979b1ffac404596d777269d9469dc1b9a4a389015faeb44639d2962a635c3aba4ecd7f38870980e87b2af9c7afcddf2fd379160cd415f261215a5d46ce5c0c9512f543a8b1ed961d2a75415c9f32db7892f1188bba23c6d5f2fb40aaf4fbb003ae6edb74cd0844f7461b3ee029029595b6b8d299e392d4763d3f6b31b222bac5777f87bf9e0beba302ee87da8be3dc5a0434b8482c165087d60532c52c811fe6389c7c2728cba5912d26d8089635fb01cb8d78aa5cb41cd274309d97cc10dc2a43461cf951647b110a65bf47b8c137a8363455155332287867e4c0765ce691cbb750e5e141aa6fe61fcf4e4b707420238e05d955e5dce215168b4d1742dff70ee87d4e24bc0fd9b73835d8cb359a28040935b4c64907a7623d11118e2997fb2282cfc73b2fa27d6e58ba9f5b317f35a14363c78f82466d7c9cfb8b07210289817cef53ad672f10892b0458f0004b68e74796bcd98e51f2e2635d494c615f6f087a293ea4d225b3cf4b0d6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5c87e321dbed16d59c49867ca35cbeed697be4f279027879604f1686dfe246dead0694eec5b2f516702b36702d7b11297075b489d9087bcbc0eb1fe5e756b5824a13d06bcf90d298592ddb6e13ef362ae9eecf0c36380159ec511abf3d071ca89b05a56d709c3350de5be1926007ab5830098cf61e677bb4c9d2b79ddf11d9115905bd862b4cd708a069c79cd276b73aefa05f920ffd6a8fb778131ffe4c8a5ca2d81256d43f60e123564bebf9bf14d04cb6d3109865f6f44b21a8896c294c50f62ece38798ebed8276ea7e40e1d1fac611cb511295c03199491af3e0c3d8baccd4d30b2c9d4d47067073f074f29c079f239871dd62e16f53352914d89cd4c126d0e38370f42a902f007fca4c1557b2d6b420936d1beb484c28e392b4502bac5cc5441cbb59daa3bbde3644836682a45ebf4d683f11bd12082b4e46610847cbc42eda82b80a20c4d847963fbddf016232a6c7bf12409108eb395f66c6335fcb6d1b15f54f825f15c7b2cdd2afcb797c129140626e32c8031caaa007acdbec381"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e5a6bc0a9b6f5beb342a99156da240d4ada680d83939e62a8f9d5fc19649e9c381ced323c26e642d034b67c9b01f2378ba0c17a853d9c2d73d087ff3b011959f02c2fdfc880d5c82179da86277fbc23a84ebd397fe22f775214ffb8d38359fa141758ff4b84836541dfc5c4e19337147935cdbc7dcf52c91f647ff6e7ceb82f1601e4eef9b2f799b57d0c1e3bffb63bdd6467b9e385db30f56b46ac06f03cfec3cf6805a0539029080b3b95f7efbbb3728d2cac0b98bc61bee10b4a890b818fb0989083ad828f87fb79813199c9de7af666291d153406b8d09bba99ec7675cb93ccbdc2a62b3e89a6b01ff66fd69ed667515f46388dc57da04c022f12ceb2093f755e32281ec105011ce7179243f5c399c219192be4667826d009fb38c7cb2f212d8ca046c00deab4dd9c3c48d4935a7736a835c2a4aec58a240cc66b50df20f21f4987641d5c6ba78799eb792c7973cb01e963c2865a76c1121bbc34c9ae40e55694f56b196429fbe0b89628b3a08ac7289a55b365e1402fb61ab96410fed2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b69fe03530859d30589af21cb06ef78702dd9778aeae7062204740b36b79257951bd30e4aff739dc8118a5a97961b68304ab277fbb0e0abdd7bd53b7782812ed2bcd26fd60521bfc17e543ecbd485f9b7da6da75fa558ced68cb49d819561339ddd271d2f484694d83ffbb707e731fc9972ff1c132ff648451ecf6fa2525c3ab696a635c3df648de67344f8e6eafda31d94dc32aff88537374b0562d887f437f59da19e18464bd06659785cb99f4f979be6e59b0a3a0a336019af8d324fb3889c40aff31810fe8c6f5f3d61b79238ecf5a62505cab45c18f8e0f52f18a67085b8dadfb1076de0c48631f3d200abf42c07581b3e6c670d71da5f407c7e3e31a7d46209f95a2f14aa8c595bce7e6a371405ab886874ce8740259dcff6377b73634eab9f50e83ce6629faf96c470bcac6cedbf991ca7eaf15c95167cf086303b43a88c56da11983584fdff05f6fafb3343ad4e32c534a9ca4b59f79e80f2ad191855703454f1353989efd6c075627408b61cd7c4b804c8815911c3a6d2976cf35c0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "589f370ab31921a95b6bf0220d0bda22ded0719e0979e42f205b2ef3480bca5f09a75123350edb164d1144136cf15c0ced65f2be5356b7f74b8c0595a4b14338c83e501aaaf9192fd80b987d5cf6a0920a96ec8c535edf5c114daacc7275cb6e6d1a224a43aef54978c78a5c91374ab5f60e089d8e80e540134c4e7ca936bdacc5a67e21c91af79ff05fecea9c07e8926f8d1a82478f4da3facf8f7f83e27f0907abb4ab1b82ba451a39837d508b2c1402c64e0455c4fb8b4f97905f2e168bf5eb0f1ac62d205db2f0739130908b05c6f2fbe853df8ff40aedce176114fc1787bdc45cc2426f7db44716b604623a856e1907fcd788d17073abfd3b7d68f80747785d896328158e5c597b03e312f0890968d482fa8cba3ba0dffdf05a71f872410db469d43c9d7bb9e4429e57e56efd9ce3263eb0d86e032480c3101be930f1d313eb605a694b6744395d1b9fc21cb5e7dda9ce05a87dac83d7b8ac5291ac987dcfba1b1b5d237cbdfb65b573db9cb4281469b1cd267c40c867750a1cd5c74ec6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9398d3106cb77d329abf72abdea2bc68e64a35faaef9e32ba9612e43322f6252bbca89915cd5e529e8eb976ce97e0f3e620cf3e8ee84d92fea7882d90ce02e24bd7f3997ca7bc2d2d615a183a5ef4777376668068f6cee91e72d6a5d714188c1e02196fe6cdc65681c07e1c92c55c2bc56caa074953612db3d6a401d5754e32e79c6b773e0404105dc19a125f41d819623854467e5192c537f9c6bbefa0b7fad645955ab95ce487f1337095647ab728fbe1ba21cc6164dd41c7707def39713a09e945cb67882d0f60231d190e6b872d81b80caa1b36fccab7bf8bf4e7c88a05c5b41933dafcf3d44e60bebaaf8fc7f63f88b970c2a66454bdafe41760f1395eea1e9c43012f1ba6dced5695e2229c2e1a8e77fb8339920029a8b9b389ab32028acba61a4763421bc705a0e4e674e6ecae2f92f65d14144731badcccf6dfd2b545ada88721f2357e3c224ba12e420b82eb9e455c833031938135fa71d2607e204e3fa78e6bbbfcb3f633bedbf076509e1bab749c6853faea658e39652b8cecaf8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b089a7ba334bec3cd96ec5c28cc8179dc54933a443ceb64b087a55363d0553da24b37647820f3ce8b530c3b1601f7b1976c2cfbf5b4ec2797896c52264474feb1711c3efdd883fbaf35e5f3f22ec02ae5aea2625fcee030bbb3eb08cd423457b8f92125224a7ca0fe4fa10748769ea6060b5085722efd14399c55b3197668b1b2282476b845f4c1dad4dc94c265e40cba7ff2fe8bce5c5b4e51b274d49654bb087e3abef3f45879b28765e666b7be4136d0cee5b3d2c859056e55b1846fb3199bf7dc209e603fc2c5c5420756f5298490a7e2747f283b44564d7dd1b0829ff74b894517aec399ae18e20a0f13ac96578477513a61611e25a024f8344ff83626f68c62a16a15dbfeddc060c2db00a024bc3c02d62bbc614ecce1118d88853feeee755f9e28c2c943daf7e237e524bef4f86ac761a5d9eeea47f05a9a16cdae78a59acca4729e7720db6396563cf3ab9456058fac2aa05e7c5ae484a6a1e8d9b5461046d944d8d34b42b9bf35f068994cef3b477de9685b9365cbc7b4facccf55a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4a8db880aec3d9cf1e3b778b4f1616e1b16ab80ad3410eb847f4319d35b5ed5b63ea0f96260434e5281f6242807f1e776a9a5f6dffbd65c8de10b8ba7addd44289e30b46ff327f7db6c34b09250c22a1ff96044942bb029dcb2ad0022117aeec3c0fe89421e9a873d049e3f1f5884f3f1056974f2df6351960fa5090aedf544bcef4d59dedd3ea170c6bddf6bd5558d8d2ba5212fae3138406a112d0261128284c05178dbed5a25b589d3f1bf90e28ba9ce363f53605016248a7cce838f7ca2f20fe43298637de5327a9c67eb0aa10e6e92c0fe3f55fb299caf302ba1e87c1a3c50142a27947028f60b9baa272f662f443d78ae446f1aadbba4099496c8ed49d9b097d67ba2babe41b62f0feb8a11261f5c4bc86cd9a55baf5b83154116c1f344cb71f9d2d7ff6a8072ff5a9ba0d6e1817a798693be738f9c9b0563e40d7c8737f0f38c73229d00b57be895a75e2c1e5708d39d4a9447de6412be8d5983f5c1bec5a67f941e844c2ab8da51628edd6a03a8d2d9f5bce86a441b5981f7e6c0946"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "33e76286146ec82e95494f798a413f2569722f1dfdbba39e7daca5d654fd9bed5b25272fd3083d493ccb228b9429f672f5f6aecaccc3b6b66e6cfe2748c55c772c7becd12844369fa7283a95aaefc7b7e6b444ef9ea0151655bbd358ba6a42a4b2b9f9c8ee8dd805724bd8fa4d29e322d56e997ee1dced90e10b80a4e2d007985214be77a1807935b75a2df81b9c87b177515bce12722b1ed2ba8295df7342a707fc02f4ac1b17b9413a1f61015c4ba998ae75fda119f20aac84e921bc5d2232f7bc9c6eb29d8de3c57f4bd62cf73fc20fb6759db4f9c47988155bf73d4102bd78b09cb88905dd0be0b8e613f076cab8cf89711670a1ccac6c1b9fd775b05ea6bbe25ff038bda5fe828b561d7be73d68d881fa7b2c3c3cc513da9e19105cc99a02fb3791becf89e7419d2f430713de41ba3c439e6fbd4531aa0949e1fe8f3e910183e75b706083ad11cf3aca16bcf8dfc606ce28c2466dcc111312f3578bd41af4e190436f5c382cc14728c7b7e3f836662acbf7286e621dc5e121d5f5bf8af7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2f2fe9ae01a02e6d91f4fd785c4cebe581cb323898e110062c1808801f822cb2e255f9b2bcaf2691e931df9e15c7f876082e569b3448cdb88f44b2a1e0665fce0ddf27c84ce4d9586da28d401e76a54e9e65f7270b0c34e64a7eaf720bfaceb063f984359f38816876d3253770512c5beb06326a62c86b7f05f394b28d09d389cef7644f03acefbbace66c7b1e3de93d39d831b2d27d3998190063adad46335dee71194793739780678056d7a7dce03e2352cb9b22fdd4922cedd5430a3f56d96f9b2cf22669bccb70aea9108fb81d7266d838bafdf7b707da06eaca841996abbc3637a9c246ea52776455b80fad6810eb01916242b3069d333e541b78778bb0e92faa4fbe4ef7feaffce181be52eeb5b6807610f060a93ed663028bea60de1de63b6f69a106d61a93929b6da73f41de02c58572083dacd98e0b11f57c16bc5f0e3ba1a95faebac48c42912a791488fd96322e52bd022d686582eb88fe85a48348bed36d95947f39fcb17ed2512974804c467c9a4ee5e3fe586bc54a22d65c85"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c7d25a7c86329b2dee76f6972d27481bd4eadfe1c901371d27406bcdda5c447d35b5b4cde6eff94fd5bf2e83ef8f1bab37bbf04307dad6d38b96a2ff6464970673b0c05c04c1c07e0e28d1fa228510d9b2bc9f5b4461330e348ff61a1eb533df887c6b3719c85d3ed4d75f36b85ee8540048600f4b4b70fef885e90c4e3c8d924cc0a53c44047cba805d15bf88366a50d8b60d5dfaae09e20e5efb186ed49f005011bdaaecfd97074a8cbcf87e3c810d9e698eb2a6f8b77e3868377af16ce42496a8f19b9ef8809dc35364d35d614f1309a3765e3da35b06ebefd522b688b86337a9f578e69a2640cea2ebb5634665ed7fcc7faf124ae7ac70c298e0b3493abd22ecddfe23e595355d5deb305ca5040246bc3aa450faa3a5bb2cd2eafa2433e4a40d1d602422c8d41f02d5a3a7d4908190e065fa5b18f0160298a52d7eaa828440bec7eb234b2c506172e46068823f6084058e511a8fb59fb722577005552346c04f85c841487285b6b2a469e68a374005d8404aaedb57d3c962c186ee7c27a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4ef8d630c4ba8a424ae7dbc197dc7cab463ff00f93fb6db064d9987f224f2a589fdbc40e7d3c9043f1cbaafb47475cc9dcffd85a41a0b50614a206c5720d1151229d1d988dd6b8f56cc538b8cf0d55d1dc7003f51b87dffc178b3a63160b759c88e829afa2dfcda4b4cdc9e228a7a81f301e2edbb10da5bbd8ae9dc93ae8eb98d47e760012d990ef53ffbfbddcb8a7633b3cdd8695a75ca6b196f9e2709ae9b30b4f7b606eaba508bfe8f46de14dee5c0d663d01718ddd053dbe204475d5c1dac048f6d628019c8b4126003e4364e90121aa0d9472149590537e35858e9bcecadb9a1f2504ec78ea8d09772c992a7a12e31a8850510ca726ea3c1231f778b51d8818b8694be37f4656bd6f3896f6c19f5e9aef74f55d6b44071bdf1ed9dbe9b26e0b124f28db5d32dc877fbdc63d1b51f62997b83877e46785051df7cf4230c82b1007251cd4f3ccdf204103f99b27c5cd48b3ed529702d89e78cdca05cf52d0d99b99c9e9f479c537a578e47194c9912e7df890f15ec671f7ebb6d304d3e834"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8c1a2b91e9d9fbe87865fc4e6b478290d1e4b189866912508402aa311b953f7d4340fdcafe8f78d76c4a3d6fdd7a387fb38cc507ba6bf383743c8f6aa404d97007d60911622a8b96971cb3956a1be3f3c5e49501048cff335130c9184b78e3913d47ba8a69ce8b457910c69369a1b4ee05ccbb0bb17070efdccb94ea8ffa4f683356b1656485f73b19f7b6d1669b55bc28bbc37b7b0eaf88cacc8c019aad99778c032858ce1da532ce2b039294c8ed0660d20b6bf2019bb864e43623d600b83a1fe09ec5d7a6c434ff42fb3f2c08eda52c1ea033dd757db02159188f1b6383f93e1ccddc027bcaf77ed85303fa86644b2164bf99ebb394e0d25298b28e98da79303621d0b188bb2dc65aa19cd14ddbe0edc1b288fb46daac7db10d49bbafe28acb9e1188331978562fba048badc2f72b942d54c23cddb895250dd590df62f4cd184df7ed6ee88ee82b01eceadc939d822c176cd16f21b9cee6efe6cc4cd7b3b62fcefc83cf4a546c69a81668622e51a11a5b728b7689f4e16692e5d2c7e5b70d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b42bcbbd1403e77665fd47c2199d5d962ec7b224c00a30367d482f3f5beda989f72ba20822a46f5c28e9b5524de1ed6f3efb390a4c0fc222047f3a238a1b53ce6c4f2debf4fb4d92a8e1ede0895c39545c7a3fe07148c8c5944ba76a57315fc814f0c2a08d8627af126c467f281643d648128183379e90f99e97bbdb0acf2ed03f4ed38c61df3ced83a195b92ae786f2a81ed2bd6d1f33a7b1233c5ab13380621950fb27fbcaf63ecdc703bed0b1a58b1d36f84914be476e857a861bad98d35b248fba6afe10e410b93435e5854530f07d5d0c375fa6ee5cb8b306c2e40ce5eeadc16ba8fe40d7bbf31ff9ae2f70b458a8db46f4faf6373ee3cb0e5398b5db53b65bc8b0e4b336dd22de54c7e8e3b09eda2d33bbe53daf8626e63d16808427359cfc8076f07259772f00cfed32a6c1466b1fa1847bd9e7bbcd68b6ca9e8ea8b577985bd107bf1752353390656784f92003d43fb585ef2a4137c7f83cdad4bf3fe1eeed2cf76c79c0bf2cc322950f6ff0a98a3c68f83d7a9dff5d87420295c18c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8a8634d606e5c507f60bc6f932db58af00b8b057132eb1148b278ad00be6e595893982b2f248a3b098dc58dc751bf42094ac236874bcb4b40f95e56f07f1267e559d2bdcf316af97dbb6c9b2356fd7eccf47698190dbe3a116a24ed7a09eb2d51314c8272127f9a5960158ad8c771489aac374b9ed43cc4d85737b808f49fbfaba2fcfe044a526fa067401bf6c4e8b3d89a527dd2340983ec0fe0301a00857726ba5144b8fe1bb6d995c82455b04ddb6dca1c02e1e3cf0086f95e6d51420891231f5422bd16cc84f41705451d5dac7725029e9a4e4a1d1a7d0dec7126e1bdba68dc32fcf5a2ba9d2893d2732847b42659c68da741c3eba87bfc6f127edfaa1ec5c05ffab1ea2d9f412600f0016540f07387b4146c1774a9a0230c23b1ecc8c14ddff0ac8b12bf47b64fe9c7c3c2bc0ae59d1c22d1e1790d88edb1c6d31d90c7996dccca9b91e3da10cf185cd36a35267acd92e13909cae9ae19440f142fb270496396b983c79963a07013a3bf089fad02334c1f76bea4a8dd8578db9174b22d0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4efcc5b2b023e2347dd71bd948cb661534e1bfd77fa55e768b9ec3edf20709786ce113b6c9026448e97808d098d33590488028c098b0d7f5719dc39c2cca636d9cf888230a803c75c1a9a4a2c884ebf19d7bbbe21e62f0b3ea8dba5706c98027b3fdc0a6429578fc2ed02625f9bb9c9d3f193ba98b78c510fe7e7beb42513e76d84b72b49abce43d33e23aa25d8038bdadbc3b115dae29d4b4e4616108c9c1727f14bbaee73ca32f8bf4511cf45959c2ad217bceb544f9ad7fc69344a6305680723dc1f18de7d81f2fe49c2d058f9de6b76dd8ae7d94dbb0fa0a54d253d51ad4b7ceb939a239eedd455e9c6645988530ba59fa7311b3ab26eba68d5cca744f57a5cad7fea64a6fd323e93e92cfcf4504b4174f3fe7fa93d68abd98b1128ca909a03fbe82bfbec0dc4017675d3fb54a39ded1e00f93fff69b9374c280bf124ae1a0928ec39bc2a650c345a9192221c172f2a3d22301db276e32e78dcf75dbb3569f9ca45b9c5db35d766910bb8d644a1a3ef02609e42a586e2c9096fdf3fa9d73"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "70e063e00143ae6836b44a35a084218baea5bcc469be89df6a63cd58de6b40f4718d6b7517afba52a459ce12dddd06cf9e3ff41533e7df2300119af7fb5fe943b133d548695860c4598fb418b278899e4e0e5084d785f468b6cfd9945af926ad6509e7b6cc0482dc0d2b8d1201cbabb619fa8aef07d9700ed0e97062604574aae8bdd9ae2eaead2a22be6aca035f56b25f419ea378dc4bf6cdce24906c62facbe2617804b54c83d35c651d14d5f93e4416a4ad9ffb0784e292f7813af00dffc5971c1f6ef6725754ca06aa116a92cde6088f95ccc8c5ae19a821fce9c316b2c74f07baf29511f3f608e3e8a2c276043e2631a1fc651d622754384ffc10045883b93675c7e4aa8453692b0e984b12c213f31a225c77d28fdac426aefc523f8c5e55512c3a44f4e75b9bc04da2befdae590f09463a0d0fc417a4ae8eb31aaa5820324450b0dddcf8a9b06bb066ccb333a4bf445dbd10c025333154752ac0e919f714deb58ec58f38742fd3379754336ce9944674573cafa81bfcbd71e49beb5ecd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "889989d3df5ae514b1bc95c5231248b30e38d08e48b88ee8270db52c2cf65427b3f7c59ffb718965849e774e40370587dc37fe4de5eafe74865e8c84ecc7a64fd3ffd657c309db28516100f7b57e70c557302e49f612f185f11540d1cee57f643ed976fcef5c71e0c1db38d12c621b8c80e7cb2a02406ffd728cb3029c23d402343f3040d4fbc0cd2439392a93d0492fd90a89176cd72e6b8a434cef5ac4511ca14d4b7d2dee0937bbf5daadee6a1bafecfad41c000f06f72f73c6426fd540d59b0153934fd059e2dec7a6dcb29f64133b856c3b18ee5531998870f3cec2c375c44060778adc1b159e9411bf43f391f0eb82c20e8ea6c6ffc60c4a0bf27fa82e5f79857ac58de7107472670292c66337781070e562da9bbe023d2396d5f75b852551d721f8aa1a737918db641520809e0be68f5aae43994d6666d31805431b9fa146251424600fa08466622e970f520b4bf5a903e329f21c1c74945cd6898f2f8464eb6b48da5af543bf1937395adb0e4e6b4ec0f11c9ffaf0071a453db37d6e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b81df2a5f0d8b8d3c5cd1c644f3e110597fd1d1abfc186f4c8012a6247c8102cae07155a7ad2edccf8e6c505e7a4ff0d29e34c8a5ff25aa25e7be34306844f49bb6d90e0d8a7ae3191dac814f00a2c41f6e2eb8122c199d38189770721b4dd0737286ca4456cc771709f23b198c936802c40f8061e6c971963878bde111f3c1f3e1a6503c5e58ddebd395966eb100e6882e71aee84b589e23278f838251092da897ba9ca862cf9c4d20cb20bd0094273f9cdb28164ba3229bb121b3965a02597919b7c75a93ca7e54c2a1a436a7172be4197d6819ecb4b71eab5b37d58600280951d6bb813f7cc5df3929d5b02860f024995311097e42554bb7083e613ba519517abb87ffdc39a0e5f4e4d4dc2d89e3c1b37f98166e80bff7be83f9477211b4ec8f45d8fa99b0dc836101c5cfb385072793698394310ba85772827c4c0774ad917b40fed0418864bff70be1b63fe4f401c411de9e4b57be72baeba53cffb807a7a9eb9c2b4f91049114823ad1abb83787b5d160787cf5d57d97dcfe95c44189f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0d6eb76e1cc70a4a16d760c0a518defa2bb0987e2d43d8d294a55c9d60507a62236be3a6ae0098a0b28bf7030b373242ccccb88e4f5d4ce3567d8c6ebbf726ebcecb4ef0b26a696b68e59596e104864e5c7c985342e93bb40faa0bb1cde596556951431af93258664c1c1a0dd44e620b2ce0bed8a37014c460c829e0ca104e66cc5a5566394b3a43e21661e5d5fc0497f52d0d8a1c6ae3a57cb689d75e6d94be30c756e9b4d6b7f497a60a897b83c289f6abccd133b63837cee0c2ddba2b2092c29d96831fb14175dc84dd1c5dd1cf42338225d3be6379dc2f0b51b140f5407baac7177bad2de991ca6ed246b53c94381aaca8a299569fd664234d4fe928086383fd50c2af8b91909bf74a5fcf2e2ef30959b7fc0ccfa5d41953e2f1d3886f77ea6f145550b99b0efa3212d2a927db2b3f133a9c45ff5038cf5321fba0dfdbcb8a6abfbc65a2484692c1a89f49a39d00844fc2b4c6d488dc78da5045be8b560228c1e9c93f8f3613555d15e7e39bb5f4160d6e8463ad6b2cedb4174c4813c8d0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3bf6856f73f6ef422be2e247ca197d3d7ea3c8aac7c12af4e26ab047eb7f8997a97a3b6afbea78dce4ad26aef24568640643293f338dc2a0b867ffd71b9e9a30e9286aaf10281df870d2413b20737eb8673ebe3479685459ebac4c30c123291d9eda00cfd580eea9e77c88087185b72fe6b3b0ea201d9b770f74e24595fc02d40db9356ae20d226f9fc09e59e3f7f760cc3aa855da72d510fbb8ce1e6586588f3e79a64bbfb2ce1983d813fa1ffb5890a5e59c8066842f1bde986b7f1af334cdc1db4d97b793d631d1dc67fd13207198106f58bf80dc1188fe571507b80cf4ca18ba4cf7b7953e937884344d4d8f525db151cd5f2bbd856bd3543fd5cf71bc7e5a45e10553dd1ae47d0cf5947e8dfdc8fa174f6642dfd5e3f4ed300d7571ea31c28f14bcb37dfc6e98ee6b1162d72ee1eab9ad21f4e976510178b6ded5d637b1245fdc48458f6928088d4fd792532144f737a9d9fb157fd22225a98e0a38e8197d4c7af95e2eadad8235ee0800a5ce584257035a6759ee0d70e7216c06b6ad51"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3428832b0a12ef303ea4510428a001d6c54d3c3cb4008cd07f57a3b73acd1fcbcef9d29f84a4ca1b70701bbd193598aad70e7d64d187da76bac023ff909b338ca75cc5fa7de2eadff33e377814de682aaff232975a1fb1c36e401fc40c4ea61941d7e6d36af36ae0bf30127f2d05fdbf95c8f0e80a27300373c055e3f5aeddb48b57936dedfa58a3712a2041580abfed8d214ee35e08a5c2d06e9bd9487112ea9862c56eb2eed3f5ef166bfb67bb76ddbb1ab56fa60e7e16a34f8d2dae992a255ba12a154130eb07c8cfa6c2d23331c043332c287528239b7b138f7787db620c3c908ba150dfbbf712a51d5e56bd139824ce046c598ba323ed3669021308b76d70925fdc7461059eaabb4c6776280bf985c34f1bc035e65024629f47c2026ec2c9242d840b037aa4c634659bbef8283c39785ccb596185689abec72e7ed527fce49264487cb40423fea92fec60bb547695abba011b862db538684fff0c77823b0df95ef1396dd93a5189c158c7a845682848455b73b8822a9c27b8a3e789c98c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "264ab320b777d6c33b56c4a61d1beec9d4191024268a32d3ec83c247bd34bf55aa60660adf5d7480d1082237ee5515692e6002051900b87ed499ed879d7970028d308aab51496864f2d87d3ce95559b24646be209921dd147546203bbc38fb13f38120c4fa5cbdf5b9e39cebe2034588329dd0e2e393caf14d17135ce467397ff71db128316a7220561c6714e0abaa088dac39f98cfec71f14f6b3bb11848a4809240839eafb0b9695967ed8e9ea0b7b2fea9ad6a60c38005e3ce36aa38a4d2fb974e57a6482ea47a22b31cbf9ecd73ea7d63a4d5321dabdb1d9a1b66baa754805322040807982cc4a0fcaa1b30b13e3b8b1675e190c76e7613db3e57f199964d85ef6b8a169b0d70304355fa1633097407eb30e5c5ec6bb2e356b79d74e8d7a516e1cfa1e105c4e9409dc87ca041840b639668ba9819f3150929d2114ab54fed418fc940edd030c481292c90070542cacb0a7efce531f69ba818447fbced8c622524b2e6fe57c466345c2b74e7c6effe9d9a092e0c5a6b1b7f36b11bd2afb58"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b6921141cacd717d45fba03ff01be38cccfab166c66121177ba660551efc193ab187baa767d12936d1b07fa736240b24e8c7f6bc02b10d82eda0c20b80c591ded6d27abc97f0640147e7c7bf8dca3bb250c993efd3de1f1f58b3e6d5baeb0652472af89d3a08dd8ff39bb4550eb2bf370d6c4f79d0f093c8e3d99953414a5f92593e00448130bf6b2466212d108cc0cd01621658c401cc55700a4e51da8d02ca634cc2560dec5210f28bfae4bcbcc62ffa10569491ad79e9a1b383b55291b8e9b431c51b0afad99eb5cddf015c7d91930c99dd7c47708f1e254ea1c8c09c10c796514478634a9a5c8ad87f6244903c59ca5cc374fb52b244c002dcf39f675caef15bd1329f6180006106111a1e91d4d9c7ae56d065d36fb9843d74b7f4fa8a789cebae586c072359002fb0c3698bfb74439d561f093587fcbc09759b60964578c3150fbfc1823c76804d6e643d2d67c0ec6fd1408d3a7e0ff92527d8c857a92f3ae4400b4312db163ac889b0634f424ee4fa55781e46219ea25b1bc08ddfd959"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6467d159f5a3bcf671e1c4442e5f1455533866ec8053a788b7e15a0fdaa7d62dc93e66a5d9d9c85c11bd6bcef389174caa3aa9d54ad3978963bf69b5ab503e6243ebb515adc2bc45bdd6126446095d0c0bfd7632bcd8168147b141007592b1f1fdc8e6fb826094858685f627bf321457a8cd9df9c7290baaee6480841a5f2c6092a084a52f0abb5edc8a4cf750494b8d494f69b3efa970378ebe6846fb83ec22ce56ae8c2146ece552925d2f3eecea726d02f56ffc23c6010b52b5240119ea326349bbbfca1c799dbc5c24125f2c41fa21718dc5549906c6bccb748e10189d6ce73bf89158b47e6e44f20f95d3684cc710859e61d878e540a53de45388e98fa1a1acc92283ba3790d7b52b22e9ed671c5b661ae33ffcc924825efb90962b430e91f468b9ffae07e0bca510441b73db302296a170d64e8e024170bfd0f5396a369080c4ae8e7a3d23a91b021e100e33a2a1c1f303252e63c62b59aa797f5e61b453c45dcbd69ea14f9e8eea4346d7c4957740d868860d7ca554ab88bc47b0058b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "16669d358f0681b0f7f54c5840192dbfc462bbda4e2e13ebcb23cfd554f1454f616d156a28fe5a2ad2690897a1d6f44b4579407eb7486fd19b5f643a599eaade6bb6197627f38b7fc18eb6e42fdedf030cd4cfa30587e3100302aa37e6840196e1d48be48da0f51e9f92ead2cfa8693b38cb2a732a3fcbb27d2aac903a594c567c2ec8249c97ebc89747047a5315f8b5493c732859e5793672548eaf0161156ff0e96fa7a6d4085aec19c4a218958686746eb0a40d9a6336809ea435e6b45c4ea97b771db37b514415b86d57900c59ceaf4541e0b53f786332ec055bfecc1e14ffe67dcf41e9350802416f31b3ec0654b87db474bd4c3143418de724eaeb74b95312cfc6bb64659a2e537c544673f9ede21dd5e343c15ca7a74478d06951d010acf69a6befbb224262c95c4ae70760d396958fc3ececf8a8c3c42944575e4f4cea5d94dfc1c93abf18aa8a9ff50b96615e8aa8c8649efbfb69e0d1401c0fad73376a589790aca696ee8f92cdf8680a9a5b9a1fdea7260392d9c7c85262af7fd2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "33eeef2f8424d783c321bf75d1b30a57454cf54d5a9c43256db187a70bd58d0a807d807c48ef1f15bbb06d7e908f2160cf36f14411360de927b86bbfa9c726fb859ba05fbcf1614f3f26039815b8663fa715c842ea5613e1322164b37a9e7dd521b1dc3b4cdcdf2787b4aed9853bd1425e951bb16cef49d34fac2c792184255eab68e8c23118baa26a7084ac59b0ca699cf2476689e0bf28dc7b5c7fee4538c0926cc394579e8d20caa0de2548ce9f909abbe6a99cdf4e2ddd7ba91becb620b16262609b07cc2dd9dc7e9594ada4c899de7808633955a40eb3cbe7cebfc503e0a4aa9e89a738ab86033724f5cac153d4fb851b73b6857bfb569cee78c849bf5905cbe09e3bbbeaa5db4b2f13b911706aa350403b6288b53b570ea1223e875343f3f1e4ad2da3755007dcb7cea413dd7d3f8b5a995039152ebaf5617d6e40d01424834c6cbc352b2f76a6b763d8be63013f87741232f6b4c4c67f23fdfef08a4362bb16531dbefd3c7ca514e78ef0b8b7837e5614558c28dfd6fa8c4ad6f11a2b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "671cd766a3875e4734591173bfde1e2865b532f48ceb2d8af037335cf1808c53259b3302c883083c52a28d35126969f71f3fa354c1228627046323664a5cce06d58b7b9a947dfd0cc0c44f4f0e26ccace7fa1b7c3b219101a022c6cc4b6b7579cfb7b187d1d56c7d6060c39b248205403b8f64f67a8521934ffd53fe80fd92be28b87ec4bfb602edf08534eb69c77c0dcef1a9912a684e685e610e58d58b03b000bc7f82253ec251edf239b88bbd43884192607f947c66cfbc3b43b10f0e6d1586998b86834f39522ca9fb30232ce9a7715045cb02bb2bf232d5615afd8af0fc5e3c4253f912a7015428246dcf73f1e416860570c3484c561730c852db31f9dd3f3515c315cfee97026e80115cd238b11208772077f3c8e45d49f0d19765268e12d0b17c077a937a3606dada3077f4789a85b29000cc45c6591e44e73174d4ef47bd417fc67ab658f9ae179d2403495cd50e488d679cb062cf5b193093bc6dd101bc31334fc5abd8ad3fe8383f5ed14f9b148e6c4f7d390ae38920da2e10f070"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0679679d5be320641d3f545816d0b04741dcecbe8a6c0d1af3ed2faf80449ed184edc4d1b58c54173a5b26f27ce50d8e6562d9dfa425cd732fc08f47eab900060dfa975b2b4a7b30403557950cbbad3414e61cd7fc004ab1ad7658840d9eb5d001d82fa8ab862ccac8eb2a96fea79fb58cdb05a0e8d601e95fdaaed3c4362d1d6a4e8a396668f9a5d119ca32e4a1c926563231e39bb8d3966f2d986d8ecec22f361c7430636bba2031c60a8eab06ae56d3c491a301a3a5be0e0e0a1daca0f0c90945c2b81d0c873e4eae4b1790c61720f0f7df2d56b9c3a21216d604ce550c547e75bc59c401ef1ea588aaf43b7a17bccbceaa47cc62090df5a7d5a0e908c25d589d54be59b2800a5f6ad29599a01a51b82426528f311824e801babe52f2ca2fb058006f61c7e50b621fd44d4d0fe5e4cf92b48afbf6c37254b82100685c6f57b0ff32ad9a17240788366586a5c3a9458bb5169026cde4f703373c7895b3c86173ea9f24ac89e7a218bea90c1092aebf4cfe7387fcd61fd1f13f3230193a009d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5af6ce6cd7d8cba3c9be3478cb3ffb94b16c6e6880a2667790cfb8818ac081edd53d49cae910f9e3461b18087504525fe0a97f8d6536829eeb16b0311bc0a07b8ffb061b8d749894b0ac1628a9d8bbe62f69fd1b19222483980145ef76be38f6b497fc1749387f99da7fb5cd0ab7e1a6a186a199ca9f86902c08fb495b5458198bbfa57637cf86fb4b12f7b8e59e0af3336e2fbb2f82cf36193a7c06601b010387e86ef6eeaa5aaf7be0a1b9bcb4a23cfff0fec5f3ab645cf9ae47569cd15b55811fb65be2fb83f4c2f376419fbc6d8a2e4c7901a97c660a05cc9beb925a7dacd91bc97eaab1a13f3728187779635c6b9f706e59a1589ca2974fd1195cc07528a024aa07624aec1b0fa39851e77fa67d36cc11552f4c3c91dad62aba44b989baa54a4dab606559b637b6fae9eab10af9ab5aa156b2bbb169a3a8df4bf546aebcbfb87b620e3aa4530e29b9a4a2e18d859db2c6ac8378ea9b36c3c83d292dd6db85a3e7a5f2580d2615027db3731d80c43c917c2771667f2f8fc2a105223fdcbb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "369197d34d2131d501babcfb49f789ef8ead12e732279f06d99e87336d840294a40ba22f7f303a4dd2738744e22779ef753ae9eb7bb996c1a10f5e70702d4688334319ed10f9d5159db9f4f58b3a7ad43ec531cfa9238e3e68b63551f4809f6619bded70a38d70b7fe62e892172d1994be13dde2b2c4ac86fe2ef5897412cd665ebb9e26d7d450b05bffa1d201c460fe38ec76b80c7a3671be4847535226ac9b8d8cbd3ff0df537eadde670444cc61c88724178cb4513df04e10c5f0e5ae6d123bf8f966d7cf777eb4140a3d10146ee687d460414f6c883184292a9e3bf052526433d9053957818188a2ee0a6ed8a0f2a4db321123a367d2424960ac462bcf109f65861cb62451066b7aefb5283a6ae50bef219d151d9f23df8f66fc0a8128219770fbaad551b4c7b02c6b3e20380f1e65182c2db933fc5152da8f22b3372dd97f454230b3fabe4edda79562147df5403824d6f44ba5ba00f8649db460fdd29c9b67d32b0d88d56af66f06272a401bf872ec639d5c79acbc020e930095d52f4c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "935c94aff85633cf56d8e3dc3f58edf03cc95c14e721d2f311f944999b8b5c413f37a5ab1f3ef809683a436d3efe95a679828b8bf6f2d40b17b553cbfa7f32d3d9cbb6a99f8f41efa09a4bd2d17111277be2121c2d85da600bc7ea8f26572bd70d9b66c02a89748f0d8e14520c0696b7f0d18521a632dc9620c19d411278b6a13eaeab0aa84275aea8f548a8ca25b8d59775e61ea2cd4eacaab836337cd3656629c6d896ed289a14c109a4019b8897c9b6996ff7b20a2a1db2a58ce5728a49806d2630b8b64d985be2c2ef14c8b791269bc387355f646ddc19db25cf64d2b2b6eba30bb007959cfed2cac0292dbd207126adc90b8758a65094068fdbec21ff2db53aaf969692e7d0ae22ac850f853b2892290ba6f198aa6754e713f549172d154220fcd6996deefdbb14c9329b015448060aa0152a08b4d1a5e32d6fc5bb60a411ba8b206fecbedafa9883a3bd5d9fa905119656563df1d2d08c24cca881a6ab2222440b64bc12a859a9d20c7f9ea02322c436003c55723cf8678dbc8303f97c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71601b43bc8ce6f6ea74985843de5a2c9f71ffa37bde9aac20c59abb025b0dbec4cd8d3623b515f0d098803cfa01564a2d319c93d3acbb5e3603f53e019ce2cd2975905f9faed64ea4756254bd064985e5245d051ba7756d4b1eedf928f9552e9854b0626639702d3ec0c40c2346af7572e86c128d1aea0ca218e63c3bdeccf290ea995bc2a0bc7eb1229395ebc6b9f8f9b14f3d5c1191bb6738ca1d250965cc80c73b3fbcef29d08767038c5c9ab006b100bbfac35e15f35698f6f8c6a1ff3c9039bf4ac984e2429540818632bd02015552e9757f363e8317fcf8998a55154f6161b67e00910cbc736daf7fe738443a3ace0763fd6505cfcaf11368dbe5d585206ca41d76e39feb68519d309dd92a54dfec5791311f5c00bd0bdc7fc5f2f47d558f51a5f3cc2c86c33958d118dfeefb8b531fd4142892e28ccbb2c574b6c115169981af4c3ce6e019fa27c2efe4aa34c0ef104e16c7f02a3b7bd46390039c7d4ccc6b27deb5f6796714d67af88456a8da6395e670b513f45b62ba0aac65579f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "241332a0e34ec700cdf2297c8994ee0cfb848e6f5d6f31216524bd3d40b1539ee5d4955d405497fbf19f9b3681306408a4ef5eba87e75799dae8e86ab050b7e78ebbe9a2be1e02f9cec519a51e7880a7f653a8327275bf9a2a298678493df013d3c3a191372f5f84aeed7abf72697ade3e02d521655d2d79003932b92e26ec22a9260606954ed32c536015a8d5306de8354fec6d51b48a0f258e5742eeff0d2c76b86bdec0b42a6606ae043e86b2de8f4242be7ef65b9ce60fe4f798a8aa19f947aea9ef40fb4a467d7c5413d526aa9491ac9a98f9e6342a154a99264ef601293cd2d4a979ffb5dbb5fcf79ee727f87f9cf7cc6570dd88d60816232eaa57dd75a7f0ffc8160f65715fc12508fbf00134964968d33dd30742e93107eb74c3721cf6615fff5ba1566844ad6859e028ce769823f037a6205edadce32f3d38bf778d47c36eaa67a36cb53f572b1beb90622e5217b0833de3e6f8000adea76d4543c803aa707932105724706ca4db008c644336a89b3ae8f196b7f2b3ae306e18176c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "60aa59b8254b47199db7b29de45c02247610f3cf9cadc3f46c969aaf36ea1ecfd7aa2c6cf626a5ca11c275485818b2a433e9648c3dd8f6e100d530b215e107bda795ea13bdd3aed87b5edda40a5bb0105ef3731b44341b6a3300409db7b1bf2dea3b84507bd5fa0d7a11709ddb106df8fddf1a9625c64552b875ea96d5ab33820b9acc94a30f37e8817ba1d757c1555795cc82a26c6adea36676eac2934dd3d54e1bb0fca770f6051c108de1e8cc04c15306d94b088a0ebfafeb93bce91e283ef6b4ef88ee8abbfe549eaf2491f23e3ae13d3319c73330237e06d2d00989cbd9d9c8a095e82534e14845caaa66599d996df6b583c22c3e73f747c5e597b6263efd3d484fa75e227873f50c993eff26e14bca16e2df14098854167f0de73a157df996d0beb2aeb6750b5743b0a9f4d685ee8cfa5df01a4b924a679d14919d2753f8935b82ba4e2e4670097cf11bcd59a613b5f34a2963dc56f59f25f2b8b91e9a00a2cecee8b488d860044dc7e10f82037030d62d48e028022e7c3774bf3c25ca"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0d814684d79c28bc169da20859fef117d2d6c98a9c7d52b788d972fc098db62d46f52ba2b5083cc7de5cff0658d4266c113a8b35cb3bf04061d4c6ba6b7b4cd67eeb48d56101555e4fb556a6e90d513ebe468eed8ef0202118998b2a1c0d9879b14367f21d9b4889b9f2b41cd260d95f540dd8489b78ddec27999ba507da902f60fe1dca5f7fef00a85829166a1839162b8e61436bf6723a136d765581963b812b0005b4cbda844cd76c1054c87f69641d5268abe4991afa2fd98dead30ba26d747aedebf45a96bd1002aa3b8c86cbbadd86124817595f123a39f9cf3fd26543afe54c6fcfe170060af7aa096ee2aa16e206303f8579554b7bb1f412062eecd486219c94798737e9ff75ca2c1f34cd03182c9431382f0e12cc7efa13b1c5ad367f34ae84af42b4614a7eac8ac7f1ca10695b88bf6ef17006f06975dfb4fd02731d5cd8a6e429515c4730d0aec054b3533d5d429150fc9714665e3881c25f5850fcfb3e8dae79c364d58aeaf2bcb0ee5d899af92adc93d632eacfe529ff57a0f2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "550ce3e78b5e1301a0b375e5c6bb6ceff056689221188d00c6116eba6920eb8c6aafab5bcc11e52984e05f68920d44be9dc2356617d3e7ada79d51865885262defae63a4d34b8c003ef5ff324b59ed6657dba99765ae425ed2c9bdcf11f41ae0164a44c1c41d98cafc66ff4e916390c42c82244196887d18121eae27b6e21c57354b0d37e160f324b95e790956a5093a9283dfe9a72922cdfde37d15bc317bd05909ed8d1c8dbcbf600fda9d26c810da486a865887191e1bfbb21a68c17c217fc3f8aa2efde650fc8ccd3fe5f6d7270231ab0a97e3d5f3b63981e09d0b8201ceb649505346ab22f664b9b6a63ab088bf4ea01fa26142ea3795161f933164bfc4e2412a2961bc09ae13257df7171cedfd2fb48e5a61034a2494b3bf70dc51a3577de4a948bc0bf35036b0496cf79c9b4d1bae0e9184068260189a6b5531715dd47b9e4f011622306ae7cccd7743eb42b4748fdf46bc5e3285373b385b5e38185d9990dec73133a9b88bd3d7ef0cda141f2c6704ae967af791056ff249c3ddb7ae"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3b2eb94128068de15497d0fb6d8612fa6b900a7c8d38512eea2c579b9f62c45d1bd198ecbc5b2facd875bc0291b6df8de78fc3367529d2e36996f14017f3ef71883d3b95f2525f62ae32d294a170f664d3ce1cf5a5cfed4df8b5c658e45ed65a606b238349cf1cd53d6f74278dd8e0d898c1375f007b8d2777889a104735ab7306df6751d9539447e86bc106e83ce6ed856505e5ca3d9eb58d8f4caafe13a07e2d3670b3934f5a08d1c76f723bf2b2130fb8a99393338912bfb06fc6974bb0493a43e14549927215c4cd0aa76ca99754fcaab897f2cc7a149caf0d2692a82e91c5ff0bc9d33e2f6620544b7fb0734b304df20a1e4389f1da4d8b1f40f019060708a5a05582606970a30ef75606a1cc46609615404b7689520db0dd22434052d6348c01cf8d7a2bf80e19b1799e70d049cdca517f262f754e71f000bc0f83bf9fc59fe3865a4e75f275d514cced20cacf10bdba843b824bbc1c9c9c22e4a8e234be197cf90575f132e1c53cac7d87979a84c612b6ea0c2f0f1cd1da0559661e73"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6496f96674d13a493992dcf6193b557680962c4152826f35b82befb713a5e86b09ac350b36a4b27a730112b91faffd84eef3e032628e5a06e98600e49665c9755b2f48161edafbc9ce527e3403ca919e1614708a7ab697a20a398233fa23f32ca77a9c81e16bddcc4058015518258bd48b955fa81cafa34282bb5e6d42bbd1c82fc30ad3a7aeb1d4381cb2ef951da28941c4b9617be518dd3616a0472669c25ed43acfb5f55e58a87fa6181337efc97256635e7c678f099c2d62f78aff5b54663061c0cb3c6c330c43e8a4c4a50a8229839ef6ca0c5943e87e9216da644aedc80c698f9eaafdf81046548bdfd119cfaf95667bebec6ce029ca0a4c96c9a17c8ef735d43af9c81bc82a9317046eb8444a765cd4cd848e61370b3014af893ef92faba5a14b4217f076872d187d8de12381ddb7e30e40abc6caffb5b267067c411f9d104dcfd1e395e2b73c67b1d884690a6a4ab58aba1e7c720c187604864440b6dd87d85188e94b0c6fd99038f299d44e161de8ca7fdbae62c3a8b6ee003afed3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04b2a5ace2b1f16c675b02da8a8532511a25d59b2f37031baac48b4b83bb434df89ec93799ca6e3a9125049c051a0f9ba89dec99931cab9786c2bac52b2a06a6250ddec383e3290f423ba899869b4eaab192793d15156b13cee7f7d618ba7a6acf49c992d381b59be6f020812d5a0f90d12814ebffed3a02994a91eb3f2c079f03145576869878f641ccdadfa2eb946c84c122bc198e3d343f0bbd6b041701e7a20db8460a2ca79d35923497028b6abb3d72a5a6fc4b3e9092c2118e248140ed2526ea7b5ea56a2ef04bd40ff27436c7ceb1b3b29a887988d009167dbf2b0ef5ed2191d14ad2eb2d763a7f03e0d733c1f2c27e4634063c39bbb0234189d72bc7b08695e4b0f5b88d5a16f02914c74dcdbe55e7f8a773c9a7b9c9780a2d2ff0b0ba4f9adb0bf263afdddcf2fef8046c605d9e0ceb8b3ee793c41b4b320d7c71f9835dd6a604d5216f55c9a83f67b8f5bd28de1c7b499b7ccf8640c78538c88e00edc66b2d6bcb24bc4018d1d731c05d250d4f3c7b722b38c74bae05c1bae4976a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "050789f05b63424da4d9bfb1bb9a6e816f2b77eadd4e127b2e0b2b5d16e0a85b9af3a7e42ec2b862f477261787e4b65d849254839d88165033edf953e954deb1ad3bc6a0b8e45b97ed267f8104e69ef0db1c740e5e587a4cc17f48e10fe240dee9666a4e71d7c58e54518a5b1d04cfcb9b67e76374e7974c44c88b9b4bcd7f8e5a10132745f398e3588b6dba5a4d680ea8af0311f9a3c78ecfae00217706a7d7acb187caa7883b73058015a2b9c3a663488e1a42ef143337acd5a2563feb38faba0c1c0be567481107402715ed56707d7d0015f9cdc38a9098d4aa9806f790ef826dce67bb766c3ea6547d987a00d5ea252e52d9f536ed2b7fcd39abdf93b43bb5110d3c472cc5df4da021e82ea132cee2646a302f6e5c9952c56eca12bf31d29e32bf810c9ff5c0535a9ea3264223874e1406ccd372e05c0cfd95b97cfc991a13c63178bb5ec5223e3b25e055188c77bf05d1c337617b83da328804ede26b599a76bada43cca9c3b271db2dccd7be1259cf3edbb020a4cda776084508081a24"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9bdb19ee8de8003f29924535f141da242c069d7d5efec9c46044071834d2d7858e794591e277b87e1fdfa6b3108ec8b615fe76f3d374381562ce3624e35802730a4bfc2c54385da6eaba8903aaa8475dcadd67ace389724b59a10e7ba3bab6f332f44357c95e2e84a2741337a253bf85efb10cd9e69cc656cde704aa20681f993f2324ff323582c1feaca59ddfa26d696ae43b09832d2d34d126c40be89959dd2a353a2f3722e2e0c1cc070cc1dd0cc5e3dba9e9a7cae5a7e7bb20a58b37366c624180b2b1d77344351508a47ac5cb46277892f0a88db74daaea7a03ad8ac60a0e212ac5e18d01cc81af472d7bd905474c7596c374b6521579ecf115575eb90721c78c741bb48d4081d914b2cc9eaf9e7ff6c898b5c6d70117b2c8870713b4298bb88d7cecc3446dd4e10208c09cbe89738078f573ebac694d6da770b56900ac7e4dca41b7dafd8e3c96a63e79a28d9727a831b05169bb1debd17fab657d8b52d8f915590b3a67963ce5c5896fe6569ce4c90859cef89c79d1c9b8e48a46ee4e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b252d9c77e84f1274ac8019d0993427574d63a80a26c6e93b786fcc8ec699bb64306a9e425fc7fad43acf8a4fb40cc7c54bb29312430a67c0c23c79d34f2ccbbd3d196363901316bcb1fb1a7b6edbe4e457be1f9e92e272bdfd7b35310048212b8e8059d4dfcee86bedb0d7bb7bb0383d0187ae56b56851cee1f6740cad320af9fc25517d729c09ce30dfcf477a0f5fcc71c7342e99b17d831707150be963057a203b133e30adbe10c73df9079cc0d0b5b535c7a2f1e545352ac80473545143251bcc77ea46ab72f3c4be6ab4d5770020b765e900f33512ebcab8de4b9bae9ad68002abebae75773efcd84748ffe4be93ddbb736bc3cc3e5a81b5221ad4405adf4dd3f5fa9ffd5975116b56a0150fb715d22abe24e81af90455cf617d290873d14cc1b368f0fd969ad622b9bd299efb40f640507dac6bd6d4c8cc144014db6f74f71e751e7349176e549d694f68d4007ca6c51f6f58fc5a6822a3005478d5d890e1919990118ab5eb61535383c6aeebe1f514a793adae3c1a91f90dc3261279b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73c5e90d38f0fda07b0dd538fddff64534db7e4e7f0be09b62ed828c49c616663bcf565b2cca9ea19a77a5135d3dabd86bfc831c2b03d81817aae22f4991422e228e315934e993fb134905e1aa03b3539100d9293b8f68177f4326867bd71de9fa47c8e9f37ef46e1b9f3adcc2711892ce1f1dd9f238ee8e1cf2ee0c30408179cc290dc895cd46e2d717552f0a4dbc890fb85dea92554553c50f7f93b34f52625060b290860734cee378783b32453eea66b5bdb3de41839ea69d873346c710a114848eb0e53b26715bd143fe3ea67c3303d1d238be8032242f622a030571bf4726162788004541d642de9ebf1d4ad7ae7dd84fac1c3bd5215a18d65e982bca38342df82463cf606d7c30ea3a5bca3971f78328d0e55cb0bd99594dec125e73547aa6bf4fe22edb30fbe4ac4298752673b2a4bfd592a75db98a5a6d73e26ad1de4b63ac83ba1e29215125e74908bcc888ce8590925cab290711732e4638443a6dc60e705f3c54706b5cf23a654001de4e0f0c40a0078bd6b071cffc2f9f728351"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6495b6ed3efb642c89767686ca55fc7f0296bda99a2c04cf03f269f7823de1f8da9f67d0ea773c03a9aeb41d8c56e4f0919c4f228f60d1be84dcc68f0448d95e3028c230ab5b7cd807ad8c939ac83ec77ab5ff44203a6b7ccb6e69a6ef0c902f1e70f31d480737e418b3a73b9b0bb5ab551e86ff80c3e4e9dbff385a49718d7f00b5063c4f7deabc566494314fb5297968538771e0b3a5b27a56f11f6c9f0b9f6ec644a3ebd9b6e7acf668a1e64dbd3ff84b860f91c3d4965e657804e6c5c92bf5921e10bb405f0d11740aa4f7b46a82224e0305e312cd4e17a30757eee88667f2372cb4ac971b774ef78edf1bd299cb172867352c574cfbf23a321faaef28774d65bb22b45647b9a526b7c4245b6c06f2225151401a77ecdde12e767066935c0f9cc94320d6afce02afc71d30a45344c79ea22c72a247a1be6989e27d59ae06295fc69898d5f3d2877e166b9227fc1a0172ac8e367828ba3f6db8ba29fb963a205e897fd2fe1273a6406551d9b2eb4aaf88a7178da423cdb4eda07b2e309892"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4cb5a50291ed1e9d2514f4b5c8d005d81608ec004b035336991259fa908d5977ba8c75ab7f0fe0b31dc7127f9e81441e11b1fb94ba034459622b301cfc6918d49648b74680c0dfe79e455fd7c0bbe2d9cd0cdf8d28c71b949feb817575e01e3fef84f463acbeec12f1a5eb6b5af59d021413fded81f12e792ef3b4e29d3787f561a20884dfc296fa4490c40a790db98bec78be02d6d83907385a6ae8c15f9ce8b30315e9c0d1593b0a5efe03d25745f00f507aad0e607e5c81ed05838c3b4cee63405ac6b6a6034051479cb9f40f2a6cbb0c82913277e32d5d1c9c55c63aea1110cf6ec03fd7d908083a9aeda83db8bbe72f787af3914408d82ddf9d38e80ebfc152b36ebca127f7d82cba622684d44c150d46149dd452ce322820316bfc207a3b44a614dcb0f9ceed843a8f95bc7cd540df590dcc9a451c39d8d0a9770dcd7950b339990ec5100723bf07da131bd384d6141e98e18600dd44156750db66826d65faa991180866c752858536992a16cc0c89e56dc6cbc7c0972827e586757476"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "82cc73f7a3bd65b0910b012bb8a90593f78230d0b9cc0e3ad3895271492acf1d520c231aee97e20084edde67572b4f3f4d6f42f2e9b9d262c15479a0bd176c0767b1c89fb8e7776f18ebb210d353c870e4fd2ba3c42ce8949ec0c8a5899a3b841bd4f8de8b549e6736b1f3242ddf959b637d1be3aafc4ba7c46f2cae3a16228180e33796ce759aebbcca47a64ff2cebae8bd1dee8e5cd46b602360386620fe6d4704c16e61cd4801abef4f6832c1400e99c14a7024a46ee43e3f729241ae677c128d9b5c548066a8d765afbb42fcd3b491b480e2496c5ca5cbfc1b93f4f85fc5eb3dd81d882b86376cb800398efc25389750704986e5b79d1f6a22793cfa3519e519e0cfed2ff9e4ed454f87367239cd24cce8fb5b1bb35f9ff286ed565ccb1bd41c2c98094cafec4960e59e5c75e4f03794b7ff913e848c1ff0fc5e19d61b0cecf65cd37c95658e371a8629b091ba05135ef05cf57e7ec508be6f978787d9fc7fbc109132c2fe0efb8c3fff622b600b3d3fcbe46b79db032052e2c082257a05"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "943d197f031094c5f4938c130e3b9778c44ac5708e2b1346a77a9fad73948505d9630ba4cf537e9c17bae76033c7c6687ff256967c51d4241489440041a2956efeaf7ece62c3baf68057cf72b576258c79793ba81a1f726158867ea20cf1fcb9632c7eaefa0fdfc728c193d08e57a29855f2c4577c566f48cc1e45a6b0af10c0d68dabe814574a131b8ba167e1c7495955edf33f90043c9fa5cfb312b8d55d08689ea68e2c27d1c65188bd35475053196e05cad0ce63b9432bd40770c1b1dfce8ca497a352030c1178c6865b6615103b3634562b7ab1ccb1a08204761574aed2da75478f432add1b2888e21ab9da9ce2c00259f6a4b541388bb19a48daf91135aa9b540bd362a8ce1c986bb609056f19d12e4c56b2031a3c149ceeaa767f57939cbbabf1221d486c66ab5209f29480f63b367c8619d90f5e7eb3116cb87930ffb1ad45717480f00a01c6e69541523b998835c5d81633be9b4b82d492b1d54b2e6b14da2cb33b3fae8210611fcf15009fd7ecda3e135113baac619e8b74d70b17"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1301f1131b35def827e8d8560f56d7dffcacdaf65df2200e054ab7717ca7a9f7f19a3628d8774cfaaba6a377e8b854613a4ba7c6237ab989976b0d1398753b7b66a724c91abba885fb77e908a2c6a3ad8d837f75d872eea76d7fe0d75363098a4c7af8bd831de55da3254b85dd199173c2708b191670cc659cd491eea567d633fc256134c2b47e1d1d28db03a5e8294f20a536cd7280e4fe86f750d99d41cbe5687217a55ccf7bae966caaea313258333d07fbb0b00859e5d9e21d71f190e4079ccb0026f074e7e4a984e8f478b298680470ce6338a2b25ff1da6f0aca3247c743c384d82406e44701a46a4c2e50312c11088567788d5743cd3165e3536b693e54f4c6ccc4586e462cbe4796eca57baa70b6296013d9c1c6f4e2e02a75bc6265900bd382892f4135a13ab600c764c546fea14febd51bc378bd1145c2282c94228db5e97d6ce7f29a505e46e373779b50b3856556d8907f07b61c2745ee4051d0f274947fe06eac7d4b091fd5476d6b7c54924018ad7acbdd252f1024080dd681"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "742a5c3575b6379d7166188aa6c9fe5406b157db778ee0900429d6c427fc530c4c0144a189265dc78ca14715a5a0e69995ff914fe0316e504802be88d5325af9344cc54db76e1d75030b3c41a27c8e9eef0c82d05ca92488475a109c878624133db6154799b4c2820997207389c610204f17d8c2b8d7cf61e49cef4b2a44ea88bf9c3026e29934be4afb3cff846482c5e76d0b581ce2851e4ebecf04f537e89c42f9ff29e0d8c94fa6741ec0a81fe7d3394ebef89d0cbf2824a374283a4e142ac6d7338ca1d6467df4bd97f9f6471c4e772995fceb7e34df6c7b583c73a6502677f23760369472b89e0051d6813bdb16bdfbfd1b9a49f474b29257883d218381a674fe9c245f3c419d0e0aa796e0c37c146469dc23f655a287370727da3a42e99f05595fa3f76165c6e5dbd0f0349daa60086fa30299f5e811c5ed4e957d4f52ffdc902a15fa97d2709f95f680ada1df9ac17ae1703471d00d2958f6f5642635570ec77fa1cf70c17e12d3a1202ff4106bfb7d51819f381b3c8f0d40b3a2f345"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c5f79bf21ab84e634160b5b201ef9fb0b2aa17713ce440c58e681c91ae777ad63d7ebdd1c77dbf90ce483160ed3451921df200e3eebff4a25a903e0db6c21a2e921a1423a2a23141a841444213524f36fe99386ef68ce319b9093162c475cda89a55487d975fac01318756ee64b70fc4bae1af18fc806acea41e74986716bc47a73293c5d3c55d267310744999e533904e73395f2c77fea30268f83318c6ecc657a4f4e87b239404c72798976258af3b444afa2049763e96072880f3d2a647e586ba284f0a50425a1deb8bbc0e52241d6ad589f5c20f09a2899fae574a4bd29e57b604a2214afd024a54951461af01d4f0a12f497136124bd3806244e8d8633336dd908c68ecf08435f0a97553d2943d060873411ca5ca62fe8337c526dc8146c60a0a1cbef0cf7b5818d6a2e96df207729276ced557b1fce70dde2be3a2012a6f6f20a9f94926504a593fe8dc6b04efbf559a362ec8a401772828d277d8f1abd9588441d575cf166752f57c1b50251cccb0282c75f0145df04e68da9f408b1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3743ed858c007e5f535e567a2cb63ebd669283a40d369a06df23068afd1bf91ff4521455e45ab94b0751c4c1e648166c7ea571b415faa4311a1598c5ec0ea75472040040994ae32209ef33393f040e05646b0ab14ca0309e1bae24c0bb8ef467edd7ef74bcae2e8ac7e22f5bea0a8537a907f42ab3f6bbe61e24084642f3de68b73c979645a3d43956e7c738ae3621df707638f8b0ab0fdb854eed46e8e307c653b894393479dd1d0dc9f7317bfcc736d51af55aa036e83752a6d6433a6538c5b31900401944288fbe8209728ad1f5394ea66718161511beb70a20bb3e67a464204bd34da479617c8bea4e878c842519655dce03627d833f9b9add861d5ea89e85fc6a56e623719a163159302dc041c7c0c7c493131e09e631c297cfd00388f9bbbcd9a216a8aef364ecd579719bdd5ad40f2dfdcaa3756f574045eaf4f8b05b4b78a7294b77b420cd317f1b74e40afb649209c769d82e434842397749fc5f80b89a1cfba4d532045459179259e37d3506265fbb1b54b0e0d55a036746447dba"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f63d99bd8bbd79dc7916069e234578e8966e7bfd0ed9b8dfa181fe5c340c7cbaa50251d4cf253346f4c4333567f754fb828e8e19399ea645e97a7006536d76198f42af8f57a03ddff688b83d481a222cd6e7f5bce75015783749a34fa5f20b2d0e17610e2c4526dfa780bca5c8d50d08b85e5377820ea657823599a32cc55d2966702e8b3f199f5dce42a2dcab5d372f6f30005e72aba34b149c89ddb14c7c7f5466902c0de4cfa2a6fcf2d297f76d9300e76ac7070091c9ff6a56bd80b9f09be64638db7c200dc455f0437009d3549f543364b03a2178bade56b1b33751752cf7cc744f2e69be572d56801e23e91e8a6f9d3260ad4d42c66cdbaa0b2252785f35500fbc7a61df87b09eaaaa4adf08cb42ed7414928f085baab1991fdbd73aa0afdf7623e14751ae28df8824711cd68c608bf6cf4829c2cc7db1159797ded24d017b9db6d284b5fa2ec7c4e22f56630b3b8779816ef0c77d6be4b3fe40cc0b286284a8773975327f535811278ebeea8530137385a8957964b33cb3489ac683b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "661b1580ea4a54570440ff74a751624926471469166304117da3cf7c9ef2784c547f29d9c18cc3f0de876b259110180e12570868ec164492b7df971eb6640a0b8d99dfa4e40d1c0b0e10e6945428b2e7e4ab3cac129f34165bfc1e5f370390c865ee44e2e1eb011ee448cd547c6c42ced8b776c9d3e4bcc32106cf112f5ae94e01d8a662e350bd76aeae070b9ef3fdd0b8a9ba01277fd9a5b512e4e3c1a0509b725581959abb340422a0953e79002efd49b72354ed8e75999b633d399c7b7f4e6726850f05d655a600b99f0cef7716ca11a8ca98c40322a1edd15c6e090748994e967f381265705971f9d397fce9a6cb7ce5d3669ddf6c08481a1322fea8c3f030d53514927b269a49cdef8fa287985c3d6f877cdfdc221fbec2bd1f38b4c3d01fddb4ff33e872cfaee30b588102f8ebd97ecca29b695e528ab0ac4c01afa1262dd4275d8de4712a2017dbb085b24b99bfa0b1f94b3d24abd8bc91eec4ed21958602d01c85eb34c2f09c0823dc523b01098c3167de5746fdf6f2661e3c2b541c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3e124cdc65f1d8fa0ef490cb7c23f812f28175af02b82f168e59d25e80c27678db0a49a1c4884368856a71a4b1b2f82eb6e3141d20c1afeb2f1c3ed827041c7d4e37d6a2869192f9534158813b0acb938610624de4cd410b49dca8a99ba03cbdb5095bee0f6f9b7925e7fc75d3173e19632ffcf0a9800cf75c2676fa614c8218ee996c2914d2205809a7b5bc3cfa6f90613ed68691927aa46a026bd7b2eb59d6512092d87e613cc0f0e76225ac3496051cec1e2d0c390235f814bffab11f67bceb3fcffcd03804ee6da2adf173c1abcb6d1c55960b3d4caa45be02d668ff29a063831bed22985cf74a640420beca4c08d2ba803b847ff696c364aa9610b9eed9a39581f382e76cae1fbcdcd80372499292e302f662e19b36224cab65378dadb6859d9daa4fccc239a61df8e7e288d7f4f4d6332764ffd3790fef9eb64b8c0c14c781f65507570ad29d7afb4689919d3cd674a119bd703cb46e9c95617aac644d71827707f11ce9886ec67211a68869bbfe8ef7b5bfb6af446e75d87aa6d12dcf"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "67a7cf917c469d5b4e5c5a6ad0665feaddba9246cf577e4feb2cee49eb971cd41e50386520c3c22e351caeb8d23103f61af2a6abe15753ce14ffc8afa3a66618617b8c2397bb1b14d3c2c39037260e55b1f3f837b193bf39fa8036ff74f9a7adbe5e6d1cc39d368cadb823ac1f969ccfeae89808eb383c89d514ca122f96a7d56f578a3f10e4725b152ec06002eae7bc2acda9728a3fe455dc5f639c42c09bc6517f92dc223f1f08b3367840506c80894edc65d5163fd73d20048136f10f2583c6048c7ed8e82f44d0cdfed868197884dba5ccb4ca532907eed31d3678ce82a0163f10de20e4d5b581b67cc10f7d6030d2477d17e29baf828903b25cf2f77c17d028de6df352674b288aa60a3437834d70c57d40c853df98ef1e38e6456a7cba3d8082c5c212ce08216f604a997d632e7d0f21b1b462df01bea08dd484e0a9e150574ecbf31dae214a8013c2e640a3b01b0945cfb4d0deb5c83a24438156602058b1bd6c30aace6742264f8ff7682e18529010f25c93980a5214a90d0d32dcaf"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a7f03b3383a083af9fe06879d4200e5315d5ab86056dd87ed326fbf48589f95da6b5465158e1b33099c26a962b7b5eccb81fc2962188181a167c6552f1c33ec35ef6eed346ac46b4ce31be3a1726b87387a7e5e7780900f7c0a909e6fa3a8299f5629bd8d2da3e6339c181f45d794879ed812974e5203f1cb745a1da6b34bf886928d6fef9111cea3bf64bb57057c885d8dbba5951a23781993c1670b75404b990a01d4eba230b15a65623ff2b2556077fb91d846b098e16eacf85b541cc23039e9516b465b07e2b06783019dff98420fe15caa3546e823e423c5262af7f54b6d9ed3dd854e41bd1ac9aa4dd951784714e5365d76c096395d76a647090f2348dfaed99b4ded7152beb3798da4bcb533813b653efa5789b9ba863cfe1522e5ed0de68e53b0382aee6b2b888e33482463962a3f9d817a2dbc26a070212046d5e6b80e49767cd85bac25ce2aa0d02c5ebfd4c75ab733d87408c8ef5d21baff4dbd409a4e6d5fa7c55cd4b63796ab79fbdab7587bf234f0690d8e9cd45baf4857ab0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "995096c669017cf835c7be99440523256d5e7c11c06af56032d785d521b68272771ccbd2b403d7ad18d73905a63758ae3a5a5edf49ecac57299ae74987f79417b9880e66a0d9893e29f31d609ab1622cb357a8d19d95d037f5d19c41dcb586111355e7fe91dd51959beca4dc689b36a7f39684753e9284102afb229d50b022427925c2bd4dfb15fde2d2a18f7df3069fb97605e02a341e325b0bf163fd6eef8f7013b4aba1e6f3a311631f5cae20bd48fdc3246e63215838136c402894bcdf1179c05e11a76adb92686e3afecea8ede7456d05f62b7a04983c46fae7d2718515e875a11a261d54d30ea4e8f4db75600a1af0c884635164aa72bc129c1ce543dcaedfe62f7ffd72804db58066613c2235fb4095869975196c1d5f423207c8de777673832aac6e129f7532e2fc16d7034a1255f378c504ab10d149e8d2e79232b01f6261fe8cd73f9f89c277aaf38ddb71ca92194fcd569802a65f4325a4f6aa5e56e0bc5cf2156c04ec0aa9dc63278ae48de9a1657dbb62153c1392e96d551630"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4205aa36ca11b03b644339d978e1b02228e2ad387aabba21fc649a8c75fd9a1a4f29e91b4e607b4b5e3b86794cf9242dec5509bb30e456e4f5dcc57e83028c60b461f748b1d7e79c8fa4f934ab117114956da7a2693a4023d349a68a4cfa0257486d42a0b6c348a9f77b2eb5d8822569e3dea0cb95c66d68b7c955e98a9df4e921bb2731855f35f0327142029f8ef4306d42481406de9deba401b31481597653cca1234cd20d6cf0341292362a4402dad4ee4807b38728b265ed0d10d7707c8562f14b6eb890c5a1d427725d39f10802c7e865638772a9e0709641a22809633b9ae19bcf052b40fbed8a00531e869761a6312216d69fad97a7f58bb20be27cfe75a776a45e207b6cf1a10215da2c6ef89f540006a2177c840493c83fdf616ac8c9cd647a415532ada9cefe067a81393df8bb94a3449ef74bdaaae0b120165f4a64703d7daa14e8dd13fe779b794699ad57b593ffdec9202f9852c33a4336cbc0223e2117b37118bf9fc4fa6204a7e584db27cb009b800915b4618548d24b3b30"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8100d8da45f6b2d77ee4c5c5b6fc8c617d85867eefcb861206a991f50638b0a582908846c8c10eab4b694850b6e440d85fc256fdde3fc4092c262041b28e1daf88a54f48c0bcb5c17d9e76ebf5f86c87e3b89478d679bfef8135cad5394a8e6211c64614f6ffc813707273b4d9496276dfe6d566582eead31eff06769b4c6ca3de97c0a622fb282c646cf3de6fcf8a12317255d724f099f1efb4a7379f47d4f13aa11d87e778cdc79784d6a6b5a2d68b9e4ea52bd507a7036c575485c8c377b8db9cf662e6eb973053b3630a94aea288191d9f26ee5fef5f10be3468c5a721421a07d9b25d5604a190d842fb3b92e70f247bb339295da253ecf1c9011d8d49d68552e192eabfa012fdacd63b9756ffd508c04e28039df08867e5d5298da5e72bfc1f0483129581b25ad3bc69204f2822fa5a34e3af4f9eedc0bb68b66a0268532cdcdf5365eb5162d05cb5619041a2f9dde7fe444fea5e9b3c524e3760ce1c633758ced22d5b98f0e1ccac9af15cf825cbe9464a5a5d45a8d1ea426f9499db8a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "118bb4ed79ee68eba200bfaf9909e1af3216904d9dad25815b2052da7d6e057c1fd8afd0929e82ec945e9dc17740790f791a1eb546dfe8d382aff418b094244382b97b8b7dc67400c99aaa5c68ecacbcb429a151ad0a77d0ebfcea781cd3093c312758c7478d4b50682702ee37f69df129f0eb6f19d80e88982700cd9bc81786fadf5f7d9d37cb07aa4ec7c863ab706c42133dbb79e34a22cce78617d86806ace0b4fb28525a1b0e8dfb8da4de2b5792531709e1632e36d8b80c5bed87e559819b5aee7613f1841e9f4b1a3caa77736eb71c9c2b190a6c6ebfe97c922b7bf3c1ebff0accf555d447812a1677d576f3a41a8bb3e8062c49481222c8c53bc00ac821c1cea8b909031f23cd1647f685260d31641177b29096f426816337b70bec98cc0d911b0f926a5c2782466af2a8cc8e8ae78243c916986bddec9169eee2f7d84a9d070ef02878a3b15204aced6dbab3c0fb6f35d07bb2514755c318e92e48010cb4ea5e7b9c073fed05a2a5dfacc4a94b0d78ab89fbc5f8746ff440dbb229a2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1613ed80cdf3d91d6705bcb079fd15ccc29373b03f84510edb0d74b5651b91967e60738258a03ad3dafff8d83f3c18feadfb08e9a94f9f131d3038288976ef35b9c8dc41beac539dfb0fa1e9772524f512a2054e73467c8443abc599c8a58b46ec2340fc4b26f831af6e09b8d5b876596008aad2c4045fc09bdef06f445f54e36f591c73d798a6905a993177b094dfb345a55aacde1304b05cbe652a62e9f6654b24153a7cff6daae42a55272fc72a8250acdadc59f74dabefb9d321e80050ac1f211ff7946e56d14619355544058b714a000d8b4b096f56338201f22114c81370543b392725b735017a550c7f685b675263f8f9b43c1f8e8f8064764dcc34c0d581efea1647dbdff9a296f1501a1614fe9d53d52ed278a8b017215503c1e648a706c5e6c3a4eb26f5eeae804ff5ad0116fb9d2d246723eaf6533ec71d126bfe7d08273e587a025c97c4d2a55a1d850a730495af8998ed35558866bc580d7c51212e63841f33829156ca9a938aeebf3a38bf67495b686d484b02c4a151bb2661"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "906ed74270c0bdbdcf086ef69dccb51c524331e79d6186a8ad18f86c11657d77d752763141153dbbffe125f9e26c30f1d58808bb8628bd1e931262e872fb6503bc0c919b2586c4c5dc6dd53cb122086536a87541d61dc33ac6d437ea1b9a9e3f4476f7e7c3926e6985f3b8df8d7144f6a81568a04a6eae2977ecefe2664806fe144d9a174d53734be7deafc737d0a3e6e54891d85acd0fedfebb55d069cd3d3b2d6a1594ddf65cb433291ca4f2283c21a5aa4811bda25fa9a8b41ca9c5670cacf721bfd0dfbf388f683a7f87c39654d6a8c2f85196e23c915219e92189aa07f60dd6db16afa97cfbdc9413ec33f3bb98020ad58d4895f4959646727521ce4c2c0df3360fa3db123c455b65f4f0b0aa88caac6da5877b1da3c49a4fd587b3bcbf7fa0d107d69fc415842abc860c19f32dfefc8695b863468b112f0f886c8a249496c355740e07291493bb08ce9c941cd624b638b3466a4c2c51863410bd22488c5b7e00ff636f6dcde4ce7ae66614f8a283709b07f80a42739a0b2d7092031261"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a761a8c3db6207c8385574f6ab3d42103e5c9dc941c02ffbe0dc1369900360155cb591b32ac8725b01a1d9686ab442af899751d9c4d3a8cec2cdc6725eaff56e8a13571506690cb2f26a0530dd49aa380fab93f4f0dfa7a1e6b1c8e392cb8bffcce1f5ffab5f82ba45d7dd922f082340acd1738a685abbfd598772fd4d0a03a44c9166d807364437464bc3b186733a4aca3d746ccf84a9cf512fa66f2cd73f029ea837ac15c71b2319d1adc9fe9b8e430a428c8f3f2c4b4ac525f94d56620e3c6aec7c87de0afefacd6fe8d817f25ab990ca16d4b3339f15d0fe2de6a0488901e4aa2844e42a8d63b46eced84ce33a346ace4ba03daa4f5f978df6bbd956d1d9bce89a5964da8eb72d9e3b10de99e9ba54f6d24d59d31ecccc213aaaf2d902fc8dfb2059eb2ecb3e17fcef97f8ff01aa59e4c615bcd4811afc10db1d1c04de71d0556ddca363b8a34f48d97d540b045fd0026655cf0c37c4c694fcf2423e0116165d4bbc7395d72f00f6650a787d6e36357077630974d375c2ce292ceeb568fc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c3599d8539a560502121ff97bedb8a1c16d10818a49408f6152ba9d914b6a852710088e5c48826a099ecbfd5cb244ba16c04a71f96663930854a64fc5ae461677dba9744fffa624e64b9919814383ed0fd947e355bd1e651c0027697c8edf76d804394f30e6598a8c805e4bd80641c81f2c78e9a7255535451186c00e963edf2ca4fc7d57dcede17b18a1a22e2241da6b71bfaf24c9abddf9a4542feca1905dd9048491a5469da8fc22e46785e534a53623fb550072472b46d0c9e6f762bb80947573e269d785f6580180bc977efcb3b9af90a974433ff7aa56674af989eff32ed8963c7b202d3332cdc0285f67bdaacb0a41c5b59da507af942d9bf59c504aed323bc22d8e214546820fb32df77e52ae9d458b1d2994006c12f31701bc09b448198956618f89eec20a2e0c916d40c26406258becab6907bcc348b46e7195734d29ba4846ff63aee05e604bc2df75cd3cdb3005f9d2573838a792e68e3cc5f2e6d447cff1c2d0324ab8819031e9eae8923478c0908b0cd2e9b80bcec076c2a0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0b5d0e26ab8bef0ea2a577c3ba6fd712e5863c3008e85f46122809262efcd65658ee490c85c7945ae06b6fa342d7dfe01aa5faa9bae877e9bb0bc0cd608670b54bf4ab8593720304e2aa0d2bd62c568cfa6bb2eef302e15769e5054e95bf7a954e8d2997c06bebfb9bb25ac6f52b7b4e79c872b425be6b731a4fb9bea7c408703c768a30f9cb455994bc42a200ef17c64f4d4d6d7269f29bffed1ba755fe4ba3233a7ad464932abf831eef5245a18bc61dfb399c7b2da6455b6e023342833b5e5c7b255c8e06fafc78266856db13317af40b6df8990f8ff37344029e731a51c937a1ca4abd66e0fe90ece58be527dda10b3e34ac0bb661135eb04fac8b90b0756bb47d2453be8ff80d05a6596a1b27c0a33f24fc79260e9dc0a6e099f6a95a22a4e083a5acb201cc654d2fc6e21cfeece62eee3270e6c6211c2025d738953e4a8d1ec7e4cee254a8d2eb446429aac5d8ac480c4305b32e566b5a017348fbe2422246f0696c9895c2a72db471e058fe15207c40ae84a46cc7ecbdbbe9cb9100c0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "37540f8ec9398571bbb6f153c1ff17055c96373b7e75e41f75d959c0b937d635baac3ab200f7907af63bab90b7d0128d603353d5628653bd067caf644cbd4b4319adc964869e2d7933a3c4b873bd2a4b3f8c0659943058293e42963906424a2cece6504fb8cdf76c21e772ab7a0359b191177d2c2231c4e4a5453a8af346db0e91e057fbd6b70dd486caf9516fa7d6f408d10b55fefb03a5795311b0722ee2a5d40a11e29316bd6fa5ab8eb34ef1a0375c87489a8821d0ae554c91bb051b03e8b3c3f301927d8478bbd62f3f37213c734099730c582bf19095e39ece2703ad09a7af236f175706714a80be282e262e7c903c59795754e589007648b550f93d4c7bfa17d116497b258014a86fb00403f05598ad588010eaaeebc2e81f936c5a9524446323a890c69ee99fbfc6917ffde3e04a591957279c334e76dc0dbd4e37a493de9ccd9fae9f3962e5342816901771890a22437f56bc201616359ba68c041ba1daca49e4c7bed3849f9c3758b47b7f90a9e2d03a2fb116b594e28bf74eb1a2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7e851fc3f8f1a61a6b0c121f6a59c098c88f71ea2797445ff1db5cf27b1594e14b795160d174bcadf3abdae48d901a39a177608892b4f421576064f2d07da9c5edeb90ba607062e950c2e2a89addbc46a55985d6c7aeb9be9e58a0dbe9b72e408162a87710008cbea6c28bbbf7efce153b2777b171c8fc06e293dd0d1b08cbd2bd09d7fd9d316fba544dde143955e90f22f2f65f1c81b99bee7efc8724ea97873d18bca62496c708e88d5b3cb0ce64b6308e568b5e03d80564b2b182b428e7e08b4a50ce12652027572110946c8804ffe5230c9a063eb74b7f64c792c3de430d0ec5abb89e6f1176eec2aae6f0740f1ac24db0ab779217c5bdf25f1509f21b50cc2ca1cf0895874e68e4564cc82cb270111d524e948ea627538f6d9db2e41c8cdfa7c2c505eab96085400437ffdbae4097e059b41d4a8c577a33e192c4a73f8ae51a9e7f5f8f1dc3c297b0abe204813a704b7eaf2ffcfba0d44055146c4beb9120d832e86a57a816d7c016d48dc69e6e5ef5dc55c43025967a6c6218788dda6a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "481a84b65f97038ccbc2f835c37f207e72edf255c5c5e3d0d14c581568a1606422da5f51e73974a01ae95f13c1763699267b0842a2be727217e53cbb486cb524c04392e4eea943df6c92898c9631bb88ff52c2ddec1df6a1a4daf50b9cb0676ce16acd8f173eb0663192d2057d5360caef3e122d05414cd95f84be4fede970649f00a93567d36059c4fdd0eea32a22d18b96433f0cbde398b0de36c0ded21dab5eac71b6fb167dba28a79a191c3447cecf0944937bd6a58a511c058a681be19ec373ffb9f0cf7f47676253afd605c1e7be41a6b7428cd0510e9a7ea2249c5e0b643af6fff232e8fb99ff9ac728b32932889c8c96be9e6985ba6556a05fab4760ab0f3df599401a41e0d7f3bdc24a0188fc4ad5b7eadf65f32dd4d1c826b76b5f04a62e3f7722f10528771b1d6c78dfc559b4bce32257a4cd56754a167547f56bf985e328c02f4e65c3312d480fbf165c6b266ea1081db095a1df32d7d0a29f98ce5beb4dad78ae09774805ec58ca0eeaa9c17541dab93302c49d27bd4a1f6090"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c548eb5ab00b32b5cc200edb95a1f617fc9a2b82623da511a092c6cd7d428621016ec0e8be4ca66993a079125a4af990df598d5202f73822a5768de5c79af28487218d0f6a23960db9ea8f050b4da444a44bf116179c2d01c4e7b438ee298bb5769a8efca3bfd4492ef4f45494e1540ba279056354f5eb554193269627bca912f0e770e230d5e3671292059515d163cb52c181c160ae8b29de3e90c069cdd757d4adfd5014db2aaf8371a390d0ec6fdc19f37d78776b00b55db4d6e04e0f047ed08a3896cf69bd155e1a95f33fcff2918a58ed0b377cc46d1a09825d06799812309f6473b2a378ffdcb4e6a6d774009085f4cbeff43b542e2bee3aede395f3e0b5c878c303b6667c34c2ee6440657941638b8356318a9ab5d4a072ca83f7482ad764793add9f100377d750bce70b9d063d26ea3d8f29576de1a3795fe2be290623c119beedce6ecedc86804f73f3c210550bd582a98f6a7e86662b6461efbf0e518bf28d9100c09e44c8c78b5158197ed2ed1675291600a6442cf2c8c038fd7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7175635076412325c1aafb617fc38754d4a33800c55f307216233b6824fc26dae7bf8e4906c98ee4a22d527ba46e8161df8383e87018a12735d2036600b79217e61f6b76bf4cc6c50cdec487c28ca9fbd5cfddbd8f3021cbfda8d238c61d848eeb9fea97cb3e0cd6a56bd42f565a1b635f960d786dc229e5f58fd0c4465e32e39e5f10e21ead60641adb04d88f920d0458dd9cbe15214070dd74b1c288d8a1ad83e526bebd0ca0c35375b84ca1e05d9db0992c6453307b8c4d64e02fda6af6a56a8f53196e8bd8c1ac8fcfd699542d6f9ada11fde6a2c25ce3727118f05456ac7cce967726bf1beaa1093d8021b4dfef6cc765696de57d5abd4407ee2d96bc7439cd9385cb89a9a06b2f4cfa8715777b421d9c26e35d314a242c844157f61888b4a57c169407c180392e21ceee821a82d9ca8da77051d7efb1e1ad08c8824c7aad904ccdcc0884272d118bc7200fb112a709c4094884336304f6ac062eacec72ccf143c6dbe181e61c3efed13bb9cd0c7c2901589fad8fdfc880e24d9efe23e9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1203"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b12030000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1202"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1204"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e28f546283f9ac74cc99c6bca79bc208e47220cfb0717aabc521ac55119ec6bbcac880bed0007c04eef92a24b091d9a09ee5d3b5be790abdb2c98a07313d505fc876adcbb1089026940e03dfc10fb46a0c2a764ebe86e51ecc2ab489f56daf38764fc0a36a9cb4529367c9880bfd7631c340fb7fbac0edd2e1def00d65bd52e597e2eba1be1e41bd89a00f5c66fbc18b93e9cc1b5be962780f6d7a9c6d375a28556114f37a8a3606dcd68c8128bf7a7e5f1205778bcf3048bd4f7c10cbdb4ae759954c4e4db0a9fe4df270c41bb86885dbdd8cb7e72a33322238a2d29615a2f01e9fc59c230c2cce58ad096c2de5071e020f76c8c39874f1de677dd5d2f96ab4dc145098d25b740b5279f05713daff54ba695f950039882059cfc2f86c35a0501b8d0914aa59a806e8d1403fb2eef163ba1d6e3d1e18dc99c622f8c2d360bfab2c9e8fd9d74a027e466fbcf4fa56777ee0fea7e04ae1901e65b5361f97146d7f4a550adf77539fabb7135967dc16f8ca99e8283dd69627cf27cb9d2df20bbbb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78d3509284dc06b54583e11ddf2507d9e50bdbf079fc319d107bc2527c1b742f4c759320fa22435d74e94253feb4a379128e7f33c5f3462fbfb92ff40c10b23f8bdc5890114757364207768014380fc16ebeaf22a7b1a9366f3fbbbb912347f1ef595d742a976b69377533e7b61d3237c3693cf43b34f92773497b8df7ac0660f67439aaa66fe179b34d9dd4d013e8fab958fbe2a27ce84b6d1c3c2998a50d41b6b38000191673c23792db2fe47e4ddd3b5396c65dc44812e55298b8b50b5a2a01d508b9d215986113b099717c3a4ee930f479308c20c26630aa5419c2589c8cbbafa7eaebd71fca9e751793629d767be8709fef9177d6631a48731f5e59fc7e98cd466375e8775ba935f12b45575819ecef4d78d85b6e984d90d41c93bb03c832fe415fb567a1d951f7dbdf407beef8caa3a741ca7c7729c8d8ba98896dbe52d9785feb49332e646771e7d84b75476aafa0a54512806339cb54ec1c70943beb508966741eba4d39c2fe535aa82a9cb92eec99d38540efa3e39fbc02d757ad74"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8f9ac1354af4161d0e55b5674821d02823b3a6b3f79cefb98cbc77f9ac2d91cc6345f989a7828132f73f3630a247a936b6a057b3e5a2fda0c5999ea7721ee8880960c24cd2377e869cca1799747142d57ad6a8d83ec9254d89f591add11a758e1ea1e29bd08f624d0e28cea52ed5eed7c0f5f49d3533eb1cdbb2af837dc42942f9a86b5f4e2d5ce506697ef067a344949bdd89afcc25978af4d50c300bcd0ffc9d93cc559e3ae1a13215a1d3f6030827340c6591061a5ab7e65153b1df8b25e1421f924d39c7e6f76243c1bb9ae4063d9a475cd2ece45f4e288fe0720074e87868d70a5584a9ac2b47a56417cc76f15154315545a3ed6704b365f15d34320804469c3b09ed211cbc9e9e767b6f21fa16f8641d8b78b8dff8062a25b5bd3b6a38cb4706c42c1fbbe66db1c05cb57531132eb94fe1569735c33ec491c318a686c837ac810be4afff605f92bb390e7ab3cd24c0cd997cf13f112e5aa01746f43902432639e1eefcbd37b413c586f057bcba40a8f1251251e84cb7c87c53c1d1d558"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })
            }

            n = "ab54a4f2560b9f65faa2f83bcf77d41803c080e4e5c3eab3534210982bba8a5d7e513ba50ba1ece33555c5457c41ba58f3f605a04369408f586c26dfda464c7b300a01f1616893264c7606daad4ced14df9a894a1f34586181294297e3ceb9580b0c785c056d5c566467f6f227f3084918d1cd17ed156e7f9fcce4757c5794f92770771ea5cf3101ca0425c846775f56938c1d1cad4401f4df2f5e0d3a3b2770f99e3c1cb4d9d4896c7ca89287b45831218b099add4bdf1dab6e2fb55d2775429386c85dff32c07a6dda504a9627529dd82c943554aaf23c5a5f6cea9c301b4b1f066b86bbef2e4bae9dc5b5e82e1fa03c29ff8bf38556729b356d5ba41d37a069fcc8fc23ac715bbea04c1972a2d50c57cc0159a46b5919fb670fb2a502d5ab66f0aa99e51016b83a406943ce9bdf0ab9b9e946574a5b32ce95d97ac8b1fbb48f0bf7e3c0d4b7a00d131966d009997a166a6630dee4a74c141cde0114aa423351b1dfdd3893a856fc632b6d90dbc79c8a61a9f9e31702ba69fb222860e60a83"_hex;
            e = "03"_hex;
            {
                auto m = "34333630"_hex;
                auto sa21abeac8409398319e65c8656f8f72e179dd1e99358c7531fddc037e47c1e688cd70eafd6eea01c823516bc79f89d7e52ee1eb4ffdeaad1d550dc0a47185bc9c42e47fce5503c3370a60510f834b4691152ef668deca633cf3873ce6613951784aa7dafde118f37f1cdf1a687ac236d5c956bced564b73cf202e3bace59667"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallModulus - The key for this test vector has a modulus of size < 2048.
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "9f420516e9d063e5e2961accd80e3eb0198b10f4d64e749b5bd39a80f7356d2ca0fdbbfe5f5b2bba92da7616a83912b449e69f8ce6e35a27e9e553279d6a9317a1d07d897dddd9a8291321359c6a8a31a4ad7dbb54432bebaffbe8940e40cc875d941ecaa10196e1aa68b83e0db67e34f3937dc1dd11cc0e5b40cdb0b90ecdcad793d7279dc5b5f6cb356b805e6357baa1b3659dbbdfc9a0f042131760fe1b78202f289699e04b5c55f3ec26fa25460ce3de5aeff0b1f5c435e022e1168f9fb86147e7a8b0f11cd988d59c81c3fe74116b350e0396b1cdb2b4e0326b5c90dc384529c7f794c4c2f40958f97ea203d76a75076d5360228e7ddf166842b9165e8e"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "b4e0a273bbf6e942cb22ae5ccbfd9d843400ba451c5e086fce9b3b1f90bd892fadc54ac45b61f3b3b37aca67d835fda1b37d5bec427382be2348062716d4592c7eb5c9107cf391e1cec01c74d64dfa5cb7052f2f8e442a09d21c22ef5484cb045c25a05b3057b266335f619ea8dc43b72e9abf38c19b5d71c21b9bf2eb8b63f2fe0fa868f7dbc9deae9745adb1fc26027bf5e2770b2d250c7507faf2fa63fabc67eeada9f2ed8f724dbd99d43294e5ec11d1575101d32af1a308abb56f7f15f544204b533fbd96fd3fe9174db3bc2af67c35401cc4003bbce360a7898dc831011ff0582c0658663a8c2e7c0e7a0df7f3c8ef95175bc136c3b49eb7a65023b08f"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "9f74957ef2ec67062c5064143d096610d04af16f23189bf010f560d49bd793d619f70125dbef4edb4d4c923f8447e48a744428d8b463745d84a718d3c5592cdf6f611a735c7e04fe3f89920cc61e0113df20b93c719df7cf62013a2db3b497c033704352519dd51975eb156ee733d7bb342093bf494e6d7c8e92537adaf8b9170c0a2f0d76af847f716ecc87e8cd3545151387cafe062d5a2db83c5463b84d13b1ede8656efb3ae9509b449f4676084042b7c9091fb75476c8a866bbdbe57e125d7c64f2f7f1d4f732666bc7ac09c8e767d145f22243dd1f10943aa61b75e85256c52c522426c1dafde98af977c8538f7441ccdbb4eabff1990304c087070b12"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "257d5214d02f48bf63a6a1f2604824bef64108af97a6032d9eab48b7964642e104f13c462289fa889109274360dfedaec2ace0f5f190d2e9ba0d2d522dc763dd60fcee52d513bf9ca7c0b29de279ca8b401bc2016c10d837cca56498dd644e4d350315819767e2908c1c33b71acecd0143e2913f9eec1978a900a3326bd8bb7574521c39efa2e987327c9343b9da06b304d1e4688ef80e6c285a6dfb64b57ffbfc786f69a2a1c0948ee6781dae288089a5dcb7fcb1e53a74b828b34867b8d7fb5a0151e43076772bd53a537937f8ad6e44adcf96a18181b460b63e530edc56a773fa3adb252cfc8bb664ca560a054f374c2a03d7532ac8986377b76ad0a4f1d6"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "339b527aeec23ed9319d5c5ee671e8e92fde09932648734b1ded4eeae420e113a7ff1119686aef90c0bea5248ee1d50f5081515fba7a68a7ac8e2ba9828ebd58237d211c8212267f2a82363ffe790e3ad5282bef3842ead902cd98194d440cd1a53cc34121862034670dffd82aff9bda7f867a3893c2ba2d60cd3d5a3ae1c446c718e99bda195e8b19af734786c62908e1e18b155dbf791283c1bf3e02ce009e08415444d56f5defe78200557d513c8d93414228c4b746a10262cc4dc573da6801f624c5d99c200bd5731142e49d69f9cc9d6d914be18d09bcff4411f62bf028223ea559a41c71a970f5e0010ae487db94461a662d56e124d7b275e8266e55f0"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "6ea7297a28c575e4348878b928d6e938a2e3d77dc46a785611a64817fa0e9c8ec71728bc7e8f9eb3268aae0f3bfa23dcb73d503e0147432b4003400167ddf2f9fc8d09464e0b91a44de12c1efc8c38732e1ed87f91cebae036610c43a3b8bcd5bb4beac4f9fb5e39f193cfd4bc00d4c7a3a98d00c4efcd1bd64f260a2a957fc730df6dba68d622441901c51f5788d6c3636299ed3eaf0bc23000650ca97ed62d367a844f23649bdc23efd0349dc8d58cdbcf655aad1f9d3a21afa02930d68a2c2db68e364b0966b005c460b682717035fd43f0cb0e7008a3d841a90c0449de8d154082703313cd9abdcc836e6c1ae5b1887f75d2e4b6387e7971128790a62c00"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "5a7186589cda0f9fb081dad864032ffd26a775fb33c7dae0ac080aebdd4ab53bc3ed37cc09f0a1b1edee78f0790ce0d1b656e4a788172db08900bb1474159937ad29a7899d6bbc87c743945c798307e61141ac21542af06bc2f435a47b505b2aad2619800a97396392f141772cfa97d762c42ee8afdef27617dc8056fe75b23ede6c8f4e9abe31c8344edd2c73e5304621283021ae7003cd760c3e34caec5b4b5cc6d291cff1ea80e5b9b68c5b7b045c04714d3dc73e150eb770d3d3ed788a4ed039117881ed5cd03eb3db6e4084679e09078110630aa6895029e7a6dd19d5b77952bbb06de26c2179fb06c64d184caee0079287c7b18f5ae7843e3cd01eae28"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "38e80b028443d96685ed76d4574b36c43cf9722e5fbcf08bc974385454316dee326a308c935a6e612ed26ef4e470e5f3f19a223e2866a2f1c805f74c804e2184f5620c1e84f894b890be7d46420178a2a5ad97b4bd3d31db24828281587207041a96792d8ee57889c666719c769f759c2175361434b18f188de387c8c13f6fb3a7e96f1abbb6124e94fbb4c6bc1d88caf54136b8f01c9eedfd614bc35375f33277d2e71a4dc5f65254179bbe75634e9dfe05aff9e1f1d792f4e6caf88e4299ed90d212d3d7ac9bfc71a8ac85ffbf2f49f77b41d36a64bccd3fe8948054cbad480451b0ca5f7fe35b0f6c772d64b70346f469808dc0057ba1c25c6ae7ac8450e9"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "33a82ebc17f79f56f79073afbe0ff3f984f868684c529ecfffb3bfffaf52a99bfc057b196c3faeae3cf722c386c224ac235f781d9025ff8c9dcf10c4cc7f93c1f1aa5e1db9b166a71ac7350134ae1a1e5537a67f846f8c6970c269c4b91bc59ec783b7710afbd763ae42b1125eb9d0fc28b4045071c72320448a474006eefb256bb403b30a67c253028a2a0af7e4e36e85aa70ea73541ee2694d2bbe1415b37d2210def5ec77ba23c6f5cbe31ee21e072b49313e6e18bc6d6f2ffbd6b28267a5cdda24a62edd2151bff87ea6858db5b863c13a8e2a6445d8d31fd6b3ce8fa5a31060f97545f1e04df6819648a1933b1bcfa2470bb14844963f53175f1b26b612"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "37c62aaa10e8cb4bcce5fe466ac8688431e8ad2105dc12c6b7a0dfe8657ef3dbd027d04847c7d708c2099d7d38ca2b21aa5146ec0ffc7fd1a44c91c24689fa37475013e5b30c92c3565e3d53afa73fcf269dcf3b2bfc48a2ff026130bc008a724cd29ffc546d1aea5aeefc8cd13779b3b821d78bc7b7664fc7a89ce0273a8eed1e4a683c739005640c2edb756ea95f48d9c91d1ae9f57f24f6ce3193cedbcc52d05eb0dc8a9634a0ca8e12a446e9ac3378cfabc37b498aa4a1a9d1d3a6fb308411566f9c68063c0bc8e78621fed3a22073260aa87c76c5768c3db7f674f84d8826381fc3491f46d417a73ab88587d905d1c090e37913c99cfe29dae491841d31"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ac3c440334308e0eef1b3c3afb42dd050c77f1bfe9f3c3c83d466a46bf708502f1866f423d52866147554a5c9f86f10c079d2bd47192dce0968e8aefd5f43a2892ad21b0bdb92be45bc380c11565ac7c01be00cb1e294048a1efb4cbb19be44fa4b542e0bbf9a47549d09e456f58ff377adafbd68ef8d86dc2d7d56c5d3be08ec6cf12c0d04bb7c64c13f08f75377ba896bece7f409d50809521b7f6496c992c90ce15a70a8f8096f8f2cbd3e575acb618c87f56324885cea1a6ded33d2f09d684f8d5a98c78f94853d74b9e6ab503918fea323e5534d3e45d51b3097e082c5da614d03a5ac422e5dcc3b764bbc02aa633a517bbe391d2662d71ab851e4eb3f5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "65fa4957fe03c0eb8a6680ede12f009178d3ce357927c8586ae056f209e0ab0c110871fdf0b95a2ff684748beb4e5a6a73ca3c657b23bfa06d362a300f260f4d60d459a066c9f5311d634bf96ac7ee4c80ffec2fca27eca7dbd37025bae76122a1fed1914da70f2bfb6bf2e1bf3a624acf2a6377606fbf06044a21a39ccd55b2cc1f0ff184d9df95bd73942a190f30028e770139d38ef3156f64fc3eec68ed5170c41f09f110f5a0fd195cd42c4dd8e394f32d195c159c7c2b69943ea966039b20c7ca17cec610be60aaf7ecdf3511590a662b74a181fb89135604d84cf9c4d6cb6cc0b4c24f4b5e7e9e9cd969855cdb92e3b399f32cb31319ac81701d056e84"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "36f62f546a36d5215548e6a770a14fc6edd4a9353ff8ed6231369cbb6598d25d86018b8cea9f1a87c150fda18c7e89b2c907f0ce485c8c321be467a97febc05dce335db88cabdb99ebc4c187a04fdc8e879487f03c2aeccb6ddaf006f0613d32b197c79b2a8cfae015909e02746fecb9ae9da3f07ee91ba70c0356984dd15d078cd0b93dd9e3c1cc03d6f255c1383e6e949e529ca4408f0f453e7e94c17e9b47f841f73dd62e5be047c44e1d9d7eee0d9f2a56bab13d4397494812793a49e8dc0d237242bf134aaead8f303226e532afd0c2e9748be08d7b7fd74f6f1806cfc4092af39d6eada4e0b6d7aa6f06592f6cd7dd26c1fcc84fdff1bf3086e8e2c81b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6e18d86059eb2f05c0c1277abcd8d2380ea39ea0c4587ae140d2f709363eaa2b0b7f801a75fbe15aa329129c4abe43ec0fd84f552a3aff7e4de40a5943ef13cc3b2d02a1ad90309e8091d5c2c6fe3b6dc2472c94116cd9adf367e575720906a9fe41068a86c15214e3dae39ac41b84f5fb824dbf5c911c8c640254cd19910e15a6488c2a59179f271dbde468d540cb33dd5add9a864780e27a3e55c87402d9e2c0e12d70c9a41681bda6f9f337e7a26dd2ec06580e6fd9cd4db40a62002feaf5a4c93dfe05dc392b63809d4caebdcdac74a7a240260a6eb8db8dcbf25527d4297e4c6145decb0a888817b4f949fb66ee63e5cb2c2477a9373d1e30b4d71cd7c1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "61a6e5ea6b3c5241d75dbf0cb397da7cd9d5b2c23ffefa183ddd1d34b6cf116b127045f4681877fd58907c1209528a6b45266cfd5bf4e95361b9036c77fd6cc7891cb2417d081ed897ab97588dfcf975992ac9c0239aa9fc19dcf6d6d0f3e4bf72da5ab09cdd4b205b41a27e6b36dff608a638925d13e3ad7143b1ea9a2758c787a2f33790ad423749c1b79b3239d1f96fc4690b19a0b8edbeff446b148fbf39a890ed8e4a18ea09d5e50c25855e1a4a4c28c5437c906d1a9c371569936c858c29bd16e98af749edf2f048933d706068928e81ac7e219fc923f6dee8a411f40ede593468ada31e5c647d4a576ddb68a335bd50cdf7446dc722ee711b5c71ae93"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6494a47f97d18199ce0948b2ddf81e408e2d4acd58705059454b728b1be79842ca8b9e197a29347bfc02a6830aa7189ccd84469e696daed24fd3e45a403af6d38a2bf3e5e8005b9535a00a5b1520a9665676aa51a1b274a3c0270a20b86a5168e08000fc4cc60673604564f8620e9a2a2374ae148ec6fdbf7e880fb8be7bd85131a3b2cc08e85ff3270a4b433a6f58583a16e5b18eb2a093e6249e0e5e27c13e1cfc3fb8e078ede70034f52f4540f5fc69dc9124671200c5dc6961aee740d39bb5b6ea9f9325f2dc9eb85be46b998b29ed3dd9c7169d58e33efc212c9cc0b09e356e65463b9becc52e7654cb22a374832ad6d4e219e0fc5eddec8debf779031f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "55d1cee3129381d3c8526661a5f2c9b59bef9972a8d3ecbddd3cd859db06be0971a181d9deb7a7333b3f40eab2e93a67342da7880961fa3b931b3ee94cfa5eb7cc76ca8f6f013bda5b1dff7a7d8ec7afa76fc6acb7809b411e8d77e97fd11f4d13af1033a04b949ce35efdc52e125394759df4f7658fb4c807823f80c01b74c5424744a39193c901a8b7238f77c330f0c37877cdfb493228a600dbb5694ccaf9521b0e2921cf84fb0a778d6616ea76f79d89ddb344834bb34a033f2399289c35ba4b5b70b1aa6d504db3f15cd1be6215678f01f3df03a3a38cd2f6e9d18755c484b4b4ee514c976a7a3edb9d93f475c4fcfa6fec43e6f815095d4dda75a5ec81"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "759135e8b8f94d853d92e75bed21033eaa80c88e1cfa202aeaeee96fc9dd8f5430da9baa436062c843e2a6d06801e4397c93a7643b52e4e33c298638f546be9f8b2961c0da08a172ab2a9185eec9b9b859a8b46cb240317e66469882269a53b34c9db60ba080e1831942db3ad65d3779c7205aaa366c00b6372496d71fd5cebc14b885303fb7c9e968f7d4f9f0511bac5f273608c8803db4ce582eddb0c672d579b4d1d67cb5aaa4fcaa14d744acb8124f3715bb82417ca020cb1b2a597f149364f859d5f1dc17dde4181628b96438df017e9b96b87f45d40383badf6b6a89620adf601c9c4fee15b1a868f8bf7ed6f59d1f9a960fcc1d961c8d010002e238f3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8fcf0a72c6fd0f9b505effcd2c074051f1d25840f8803a68f1c149dc43af6b94a114efa7ce2b399a91aba823470b9f32a70fb6631dfef593dd312801062c7f64d7c7b8724bcd36b05df16838f9e2ef209c2dfa180717d9d1bb59c10d30bdf6a0c0041ff395d4eee8a1c60af17b8152906a58786ab39840909508f7a8f3a05096e92eb57b31c07e79500091f119698bf31bd14399e122e16c3f0083d0a9a6f6413a8427dd27dd5473a9060450349f51ac265030778dbb04d4a35aa98dd72ea38a548be905717b46a1e31cc0b2c9247b7a64d26c027b7d09fdc5f2c6f3f625ecc3a5e07e37d2623b099aa776c48c66d62764def44896651c6b0ab10f1db7105f8c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a34534b9e1b82be8c7a70d643c85664cb3919ced9c6b6cbf470f4aa8c62194d3e287077d3dc03e9e49d9069b69a4fc2caa5c9fc0ff1f08cb9b8370d044baa4be1b5918174997d74579c791a4c9d53f0348d33b6dd9151ec11823fa765a04cf03791f9d8f89048bd702f03247e3d9ea4e9882d9c768166e60b2db47a1bd76dd8cde45933dd1e4c3fd2bd46bbb8b2fbd6a2630f9db7e09dc342a3e279927a68f3da34192d0a283e2df7530b06a42ad1680b4a33c8b4bed2a8e799ff39ce4c5853a2f9d016610e58ce819771cd0ca5cc286134fafdcf36eb6c0f198e312e0e2cf722c47487a43cf4630c0703e65f5cc23972d5c16012b0e338aa6bbaa9a6110bb7b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "87bff62986cb2cd250de8d56fb4674c65cafd441da9dd4e42b1e7e14231519b63fa59608cd70d3ad761fdba810993ab3da3ba5d182dabefdce2c383e153df2b21c4cd4b58ea94e353d8c02bcfef4d565cda92975610207c9c30754cbe22bfe0f7cebaad0b6fe1d470d9119090adde8587d15cf27965f525d92ccb2c8778261f9d126ffdd8b90bd00acbe648979567a3ecb1fb5ceae06bbfb1df595e2155889ce62b3b47bce372a7527fd59ab5dca37378d0a90f4487690385acadea3766fa407d277ce4e76416daaeeba1591aa31dc601efd0d9e29b50ccc68d1511581b00f75de4c05d145b7ce0f74ccc509748fb1f8c636e1a56c9c412142d5c9a95efd0b8d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2fadb8a429803ec2956ae6012289f15f7ed8d535c07412994204ade72d2e7a5548024390e1356d432b7e68c1a8738382f5aef3cc7739f926b44f9b9905222323a97fe7b303c130eb4147a5a4c69a031bd0c459779f7c3bc00bd5ad616421d14aa90ff3f5f4f700efd19826d89c80c6c4ab4ec81ec05498bb543be74acb3f61e6e1bef48e61646ab962da08502fb092961c5fb324026a52abfd1c47b9ea76187f5134916c5dbfc18668933c2a562a02c102b6efb9ca2df40869e920e84f8e73668a73c1cea83bc8600f7dbadeb5babfa74b99a3d02794b924b01dbf087da3d8d579514647633d8d6922a59a3f5625687a4b1c3b5cc67858e9b78ebbc7adc20aa7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "85ec33234ac05061985a24bd9e5e13de3fc8e8c246f75d85abf8021cd993f97c38ec6b73d713c6417effc7a751530feff849a5591ca0c4e6dc5bf6bf97c34bace7faa2e448bbc81e3d8551d4f82f7ed095ecdb19e91498e357909f090fd8c215f830b2741a4a4af518341c312bd6f7fef9c1b563cd4284f785430c538234f6bd3fceb2b49ab872cb481447b2d45a37d45dafad4d6de26246634b99b926e37832a8302d24b35e315f0b971cf52c60ac486460d7678152beff5369441c84ed54f16177f5ae560eacac13d7f94f14764ecd42adeaa0599a1a47e7f500e6b14e0a3b198aaa18fdc6d9141932bb28b20e71f69c173c2b841fa042a3fa0a388e164fd3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4d28f0c7915b1eb63badbd931675ecf29f8d69b4b2e1b1fad776fa5adbccdc17bde98029059d46b197de49e061ec57cce2cb77a63deec3c75c2cc14fc9bb4a2ac29d5f4a05e6b4ff97ecbcc26a0dce39760423740141e675b52878a83aa044f68e84d9abd0ea6bfc5e6fc3acd971af258b7b9a01079010e68e70bd7bd31a9f9bdbb70598758ba274fb8feeb8ff46a4b2331a4da03330cf55910e6ce940c1a95b6bee9adec351354774139e3b213627a6d7e8381656362b4c6f83e97f93630939d22763f0850f1b4d38a8e3ed213d2febeeb125ec03854a4b276fb59087904ffabe83cfa66c1af413af6ecde5efcbc5241d5b958425b66ccd31500ceb9b80d793"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "02d431509bae6e097fffb5e719b16a296b81fcfc9fc6a64b85b337c88049fed54971ef61e635388c2653554685e652059c769c5947af49858439d9c388a40703a016f73cf231726853f498f94a0a9a98e14e0cf8f0c8284b4d992f00cbb8dde41b07679c7bb7a2b4b7b307f2edda65fe3e002c7235eb85dd2ba41483b26131c997793ed64fe92a9fa9198eead1e8506385db0c3c4dfb93b87e2cfc09d9d3b00937cfc0a35bc211cc8efa4de83745c5eb0bb28ae52a22ae4ec8712be72bcf420476fdada50b618f0e9576e3e7ad8df5a0ebab78b1bfcdcef594cb7ff56a895b5ab5e0a30f82453880d394bad6ddb92231e44aa275f945ba6220d9f226da4d0aaf"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "665e80a08c78f4c8a2768d1ba374bdd5e5101e61a594300a18a071d7c98c68cdb73acf32831ea077734e2486f1b13f76cd779a80fedbd76716fd022006a6faee19cb9789359e5b7013a59cd671a2a91c8328f4a1697e14a085c897eb45692d0bec074b400ded2820c6a5dbee2feac84cb6a37baece0ce763dfa7ca3b3fd4a82863a0eb35fcff709ca401c0bbb73f27f251b627cc442dd43eea634942bcd8bd72f1e8f192ae8dec1b7275c7739db254ced8b57332407f8a85285a190c94ea7f1c9318b7fcf67369ed23243c2454dd2ffa153ef12074a842878b38695336e8acfebf2d56d3560e43cdb039c27b207ae35f7a527b05baffc73fe76e57813b484f00"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "58bb9a11f29ec8bc8ec7bba4c056e09087fcc881d8fe8e5dc58fa74d979676a20e00468e16238d8e2a53e40b4952ae47cc857807558b12224b3ab06ae355fbbd35180e555d7d468c23c6466ae74c8003d2b1591fbd529cc479e7469f5645787b8d7baaedb089efacf7f4395cc1382a3068770530ae97729089100960f22a13d73883a3a5ce6867c77a9e833d60f8f3c79fc2f36e63cbde5a02cdb7e226f387588456b9161814abb84c638aafb44f293e19f1bd5093e36d68386e365a5ab076b64275880823bb77502924d26bf443e94e45921866c68edaf5e66b24df38155b6faa25e531eb1af900780413cf5d5d903146a9cfe9350a3a1509beb679d7b75cd6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ab35fb3939affc42b2ac00248105dbd3da37b59db5d489d1ab1962418e6bec3b6fb4dbc03fb47c2a64cd09fee70acd723a50402b47cc2a3411c716a1f380138511d693751e37a0bf23751488293a68382a909202b7d18dc3721521f9c8fa3554dac15b20ce5ff9638edeba6ae89afaa100cfc92f51326b82e8fea27ca216b8b953afe00d0a02c0df5ec76ac494c1ed3398144a2654570d8daebfb27dc698bb5fc3a69e7b3759c1f1c7d5e807f509185a17b642f8b24934b5efef55287dff737fe633f19e0d1af46a0b4675b300583f96a3670b1e50f1c27441b5e601b8c4cee015854d680ab544900e65f4e205e2666ac0087586012d8ae52711a9cda02ee520"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3f9ed26d39ea6b13377ba941923d1c55544c4ef8c9187dc6430eb1e7c8b86292e528fbc74b7876016ff3cf8014da3d85f37e975810c0a7a8996c91533567e40b0c8464de887b18c9adf84571f7703147cee96c81e5eaa61cb3c40840d21cc0a280991173d5fb1cce01514003bec10e28420ba01819ff003d9ca8658f41a6e02c3295a53613adac27ddbe959d90faa58e33c3326c4b5b6a5a015955541531fc62ea216a4dc54878b65e6a12e0fd548046e103d8dd4516bcebf008ae4d5b971e9e2eecc8379356ebf76b69943b6f0d87ccdc19036007f7c79f363ace8e85bb97c40f7b59bbeacba0325decf642cc8cb8e51efb55a7296bb23bb12a3a1b334f5ca8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "748e7f86340f83dfe05a19e73449b7814398c6951a649029509c3072b6ce053e6176453d9046677e4996ea9a490fd602d8a735042b29d2a17f997817c6d9600bea2d5f7d7129a361bac6b7f76df520f4971790d250fbf89df5c22bb9e7a510bb6fcbd18251fcc5b77d61128f27adb3784c9c363eedd2c0acf9fbff65c9b4c67d631c98ec6ad6ce56389420a9f7e78973e3b55c90b3c3a6b37ffaa74ced4889cf306eb75e87d4b34519a349d1b7842f81eb588c3137e80895fbb98d67fda3621c7510815a5d5ae512e6566088dc333107a3a6f4309d6dda5417bfa795c72d4e70253775afeda3940d4bedb9a094502e1bd90084cae6f66c5f0369d3ca6a00d4f0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "672bf0ea5541b809287c9e2b6a584da21271f24d58eb68cf2dca42f604bf3d62fa9d5a52ea20e234002ceda5bd919ee8ff344c8f84e2cf4d8efc511560e03f930b6533cce2ebaf14203401317fa8b0fd17807389b3c5449ba24a8a1f16d143ad06c1dc62c5c40facabe64faf0a9816d51a831b648ae9c99b465535b342085ebb1aa44ad23c08bf4dd9e0838209d4805f48cb16d9bca302d161ec3f6e66ac734f001e232c3133558c4b89c00eba40bd53c37c5b03ff6fb3f323d0b79510592141946a7a7b16abfa78ab81d886d7c4d4090bdcb782efbf0c4a76b47abb18e1fc9259cee098929a1843a04ba52704bc9be25a2b96779a2b647d3ba7c11e2a8dfe48"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "94818574cddac115d352d1740c4e5581ce36f1eac658a7cc9c0fa26a1d6f5f43279c9f2af313b3e0df805ac1e24976d58aee16e2a4616cbe421e46f5263ce46e301d8c295cb8a807a9c65610b176c61ae03229fc6601cfcffcf90d53edcfe869a1bc692dcdf88ce84f23b34733f9c8046d1cb7df77f1eb29cddcd4b420dcc8761169f3c7dab4f04e2eccbc046b0b26007406dec7505a38273e3bab522a81a054241afea6b6576cb1fdab2569cfa605c0cfcea0f4665f489273b92d2fcaae21be8f2d37dc40a38d847c56c3df5a2d5cab476753c91bb4e2dfbf2bd9ded2010e202976055c78de4fb2ec3f2a6a44d6816c7cbb829c83646156941418b4f060e196"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5c54c39c0a079e7a842c8b7f5c6bc63f4b90873e1379132fc1a52fb78fe6eb46aece7f5ebeeaf2df8862622442f0a470d2a8ae252c5c5d71702033c6b5e6e983cf44ac0e818d9453b86b91b5d99a1af0fa5ed8aff718d49864c093e4cd5be4db1fd44b6ed38e58df96e70cab32fae1889e091be25eb9f15c07ad2c304e0ccb881cdbb1e45ba993b95e169358a169c70e7d0915ba34955bf20fe1df2c7aae78fb78c893d184c85a56524643dfdfc41e62539da005751409a18fb4e59d2877c6cc45a4b832fbfa8ad2880775d9fe92b6516f8458bb52cd5820710bc16ca32cd7bb3998af0299778a2dab50d62d73415294a857d92bc5bad97248e70cdacd50dd5d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9b91890eb53272fe7542c2067a4e9295b8c7b8ddf1c9ece6a75fcde79c9af2cbcbcef38d342032b85ccff9d6c82d3cfd68a7b27a38eaa45c78a17741c230391b3df0bd79dcc3447c8717b7207fa1fd04e917b5282e3a7dad48e8f2f6d1360f6c720f9eaf1d1d59f061d71daac1548538c0a06fa65b2ac87abc9e6fed3a6e15f48422bd9c4c681fa98a27c873d7efc5c100e708d58141b60e5a691747df4036162456bb11f92f2a391170233ca1c03e1786a32fe9ab8a94246dc643a884ad59edc40e2eb873713e84816e4a7f7857126da3f063cb9a3dda0547207c426f7cc985b5a3b6374cfff51d0d542ce9f82ffc07ad24c106363ffaed12c97526394a84ff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0f07dc8786a46a7ae2fe2bd534715044f46ad17b836b00370996258aa90bddf563b5f3e7eb1500ed0604f9380491a5a6c6c004b560b0f280a2de30d191928bf5aa0378fd6beda830beb1db8b6b1c8846079b6013cf586e384be0e1163c62b526fbf8e26992afba6ef5e5f15755ec7b5287a149b19e577e79bff6526d72616e28d921661752e8cd0e4b950d7ee9f2414e45b3069a80a2e089e46d0b3da5cc0352c07305f8dfef2e1e928e85bb76c5a0f1516383143184f66f31c69adc0b8219f11809501927744fa37d1c8cc1e2a6712d54ed66dd177714b7cbd005e6a6f83db92041b595dd934b0b19fce5db369e504fb45c9df1e645e81bef62cd4da3497e9d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "70f9515388762b320cf84e90eb571b27eee58a43ebd4773573bffbce8b162bf17e6c0317636b211b2bc56aafa99b968ec950466ae5cd7b10d94c993dabace14b94bed501dacc0b40feb8a89586eb1a792e92115ba5430ce1183ffc6f538ca657fed3ea684a1b9d998c0d9ff004e150a0a32d20455176e8db3d96b5063a60106a7bf6c9d0baa8879ddb77d9a3037400348ed1ee4b88f8256e8e632b15b0dc2611da3a9faab929a0bd4881418d7fd8fc7760c523e1ca4cd3f25c8243b8bcdcd51e96a3840de589744bb8d655851b9cdbd8b7f2d47a57144d9c2a7ea07d49c0d141cf918a4eb1507f8a7b11cbaa28c1a35745209a5fad2bd1e66f7929fe0223d505"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8804d661bb17ffa73e371d134984ee95e426d7c12af978d9ad00ce746db4a3bad36546709f029d2c9ed13e6d27123cb7a1954f1f65f3fa46eeb56f449ba6b5e0736e5dd2586d642711d98aa19595d9da1c4ec20953009e2711738263170b487072566558de1301e0d0253f8fc14d12c8cfb4644b50aeb3d3a9fe1a26fd3bccd72986cbaff34fc4fa38ce52e65821f169d54b78037b8ddcba141ffc72797023c802564989a20b07b9a2ba6a256647e937b1c16df2081cb61bc6e6a2ec6ca9939db91ec2ae62c4b2d0d7f61a0bf0c693165175c91b100c195f3611c3ecb797c531439655ace9aae18e53a69e66698fb593f48084117ba288a134fd0389ee0f7544"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "47004cf187bd2a34c6ed89f6f8eb9f67a401a40d66a95c8cddd98fa0faa829bbfc9e62a854788e4d23015a68f098a77cc5daac7e23c6ba56167518753187a8ead68edc686c393940f77255fc8092c4c65a01aa6901c0af96830c05747791e511c8c01da4358feb38bf5507543184fe887c5821c4af048c5082bed56c7934985d86de2402b37e16a6f3e23d5a1e838992bef2a46d4fa87971f0cb01a470e185654a6b174d9bba81117e8df24b19a7be0d1f8e3906d3029b5ad4f0d8c152375dfc4fa490f9fa3a5b52fb929a7d41a84d61bbf60d80162b16334b4958ec879bbc0098962d5d3220169c8ccb338d31c664c23144cc85bc371b2d9da61a69f0b4b658"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "24bc364503e9aa28177f9fe7ebda884cbe9494a6b589b0db875541174cb1ceb60f514b74838a0df3bfa8e59b06e4ff83e4a4e336b41761da705b5ff9c0fb36e522cd50ead114067f58b100d6868581b69ead695a5c4b15198c5ae35d67e5181335590ec176af6eea69dce2a69e87d9f4a03f351bdad1c0c80dd1d27b75cc7bfb6acc7c25bdd87d0233ae4ab186f1b11ede86139954d9e886b910c3030d372f8900645b8e17b08e61cd64e520b882203b57723f00e96a6698fd65e7d99664351cb797ed2ed67901475169d47cd64fedfcfb6b67df5fa5d7c5ba53d65dd86d26d899df5aa6811c53a3a28fecb72df39e0eef50053d674d521acedbf6cd17ac2108"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b6a1d94b0ebd824f6b5a95f6697af65995eb388f3ae12c87399accdc639cf5b7e71bcf436feaaf8bac9f3234d0f429ab1b0c081f71340ecd727d9b94c66fad1fa070c4b80350eeb55878ba427e4acc5762597039fe1ef92ce29aa9919607045ed76326744b0e361cefa24a24725af612b40febc4f8293d4ca9faae0d19f1f2dbb5c4f0d27f92eba41457b39f9cb2c75695834992c326d5e39f56adfbdafad08589a5d4aed79f0abd8af3e056558afca803e6d75da2379a0cc52168f88e88a2c14abff048ee8174c0e2f31854d6687b7097d0f3352fea3a02dcfcccbece2819d4b5e1c97f93857151aaef70cde099a7226fa39f89a8c92e08de354fa80744dbae"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "32fdb9a7898c2281cf10104e74adf455a4553ba47e96bcaca5671c9ed13180140cc8556d7a429319079622e352f5f364193ce54528a3d3906628fa8945b9050f1365e99a58dfbe50572dea466cd9dc96d2c773cf35c5f1e51a6d2da23a5631bf4aeff50019e1542cac38e71ad2a1580c24865c8f65217e330415df95f83f1a29a41e4a20f63ee1f06a3ab10ed2f10994291f8d7c80032adca004094dad4b2d33203c09b134dfd5ce9ae577f8b7edc7637046d5c59036362ffc283a7c297641d6d7a36a95843661266289365e021a393d80459e5c63cb71e504661c814d8cdaef3d5cdc0ea2f95be650a0e14af9fd560acee1728fc46f5253557e8eda487e4659"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6dde567bbdcef450502b9c76daa040d2ab0cbbbc79533c5576287ceaf79aeaf587c58ce90974d555f4d7bd099abb90d61a25a6c064b58826fad6eafde247457564f8183ce79f7881bb2ceecc830c8891c35704ec66694574838c14287024eec643d7dcca4c4990b616c8fa98b0f97f914230e786a102a4e2ecb926ec89f40c69b39b54ed8890fc08edbe50f338c909b7b6c816a44010addbe65b527734e0502c59aaf8bb7e108999c540a023b60a9227ec052348b01bb1bd5ce7b7580b18f40b5f39b556bcb560ced438c84b2e8e67eeadf4837340d7c913afb7e0ed7fdbb2c58e3d9a71ccc59ebd8a63a80a8049bd9df49b164219fd87f345e1da34a929546c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "97c4a36c30fc317a6c1f712fccbd699f3de5a7420efdabf17edfefd790b90e20afc914d7e0aa34dbabf736db460eb697abc285f029d784b2b394d689e1a383af8a51f153b4bb77e199441ce622e6d146a842244f35d5eb3d410dc78c2c85dc73c570f848063de0445871e7210207b02144f461b7105b3a74ea3caf25412eb92d1058f18e9afac51006e859da988c733293d1e64164b733936d563c4edd8e81f57b4c463934ede932cc93237bd26fa0f86c5745d804722f8b837b19e50d415889d58fbc78bfd4eb35ea5dece233638689c11d212c47a1e1bc0b733eff107ec9dcc90a7a7395e06785e75973e0d4a20dc0c562405886c9603daaa20f6763fb9f7f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2fbc69383978c97e1075a9d8f9ad1e01dfc6fdef216b381ae5349f005617c739e086f45ffd2cdb45318321bbe77e5a2d67fb1c6b209c81eaa2388c38b036f66575590447219b7771a92bd6c594d8190339dafaffdf2a5a8b73e0382eddb2b2f95a42fe0235042965bd530584fa9db7fafc8c14a417c84b1421c63419610ebd67d20966e1ce9406c4e938784e967ca37b9499d9df4dded8b74c55b08c6244ea8285b17d55a6c51367562563524e6a45ff7956e656a1bd46229db68398f8a0011ded00f30f6bb46c5599ea3fbffb30746b56d83b17d461b20dde2bab7303f92ad9a322e41ea9962065b9ed683f56e31a58be7177505dc35a10e6703c4628933a01"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "94087e73e94662f9f925abc756bdac96a520ee6d5c8baba1c8947ff9d7a22fe43aac67e91986890b83eac61de630aca7813578e65a2268d78dd25982b89aa7a9d693bd868acf156c9cbb70779bde1cf7fd304b040c428d7aa48f972f0ff0c24f4d2aa88b622e801a1e2011804f331e80d17b3d15f8410b8cb301c7ef4da7eef69089fbbb4aa05433d16e673171d881357f304cb4ba929a7ccb6690bbd6911f6f5fb7d570345719fc55a5129dc8e870a7083457cbaeb86c3cf51f0c5f605645fe40410055942bbe957d9911d84a1d423978b37ffc91eadba802443cae32f48f7d987eca24719f0e77d568f56726e24e3d85b1a1d13a0bcf0c72f0424650ce50c7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "46ebaddd8f38c7acc4f2874a34dbabf6596e42b8f62313d12f9e01d16cca9968d0b73a5407ac15cb3ffb232b925acad2d5b29b7ac1907e294cba0107d9b0fe46f728695f3be72df258e504771ae356ca180cae5bfce3e67b2de72f8d7d13c63772810162132a2d512c041fdfd49b2bed59942ad0aa9c11d192292f945a36f6ff267c5ddba7dbef67645efaa8e8455957dcf6723e4d1df6e5e3fd60a43bff3d1549d0c89906b4ece2a1cda030c7ad644748610182f92ae01b65e2ea9b006af277ae685c4690827091346e1f2169a7dd93a520fe4123612e8960fbfe3367583b50be4f3acaa5f07ad9705a48640e828f797d37e58fccfbc9c39b9989e7b5a5f827"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a4782205277bafd94e1b611942552b9d6171a15b171f75c3d13459c6d813302941d1ff03536b76508f333ea3736dff38a0ef61dea1e83cd81433c683ad4568365617f603a13e1fcc2813b08915eb681140bf52d4f10ca4e9d95811494ff3f2ce5c27d3a6f43f21375a8bf5b70291b57b24b18a99b38132cc002cfe5396e7d3ce5bcde6fd82ccea835e1ced230effa174a1b8b02544222d9e3ef6ea13433c2f2847bce7c4c55320c849fe9a21f558d3c2205a550b4d04b3bc49f79e4f471c44d4d8a34eb674cbf5762089494ca4d7d8528d61098ddd543bdeb9556247e3821d91954bf493edd6888c1dd23a9d06c44d0faea21f146d0f1a310a8700d66b4093e5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "67fcd94d1573d0712a7da64cb211d9049b3dd043b2b17cd97662f837226379c1c94022bbd5d82d1c67597f510f15959033b63bad63fde6c6f972b60337f52aa45e34f826da9a9040ecc6c268179dd1d10794edbf5690bf834a6a26d07023ad99794e71b675a8c6b202234ae9fcdf43b04dc9c933aed66222154ba7c2fb324b6a6bf9c4eb0535807eff2016b44002a3557564559141a34719b142245fcfb3737166ed7f83227d257f5accc579d20f4fd0debbd2ebf7fe4c8680847aaf17514dea444caf74dd0fc67dd07b9067ec16093d7b21db72a82a35af2b71b0c214136af03ac411b14bdb5a9ab2b3b603becb1fd808dc36a9065c744faae07f18b8d71195"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6895daf9824474538545d9e1c7288bbc938bfa56cd6ebcd639a897f45624ea7f409c2fedb2ad09cc98143c461262f22f9646e26aad9325af0063024e29bf63b2807c41d615ea8902de10357c747b37e8264d55f48bfe8cefdfe19ac93d251634453c4a0c00dd9a0795c3195d047256abcfec964cdeb3ebd663ad29c457c307e0d05bad643a160e343b516da6a015193cbd2b28b7eeebac2f1a2156c2e62d85f4883ddef31011628d680d4d608e5074574459d6dce4bb623d059ffd39e6956f7243382165fda42cf1064a1bbad91ef5d0a0906785cb8c78ee641a3a4c9afc2030ee4188b32ef2dba42dd6ef5c86e43a9e413303c5ae978b41e74f646ae5185c35"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a6a996451e9217ea6c0ea0aa0cb6442620847d85a8c2e9e8464d929e91b5e8fae333cdb81678fb7f90285f8a4e77f6e249ba2c342cf5603df2224df31bd9fd74a244f51b639c5f0ddb85c51eae877426ea611cd8e01082e783604c38c7dfa882d3c5b4c4ae59237a9bdba51f1627dae88e9773ccb94abc6113217163ae11e6590abb26038f651335cc6dacd5db4436b1550a37dda9258919cec2c72b78c9bd4205fb3776e7e785f85518b4d2e0529903b39a49486aed55b6622465d4ca581a71c86c40ec96e2300fcd438ebd5dacaf8c585411d8978ddb8d040f4cedf48969791ed638eb5666cf9a77b0b27e1a572447e3b0005337af99d2e5dbeb96bbe06971"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4e1280bb478bb46f4e9f49a455bfa382b4231eba33ab8d7861d852d2a0aab225f08635b73c3602021c0d5aba603b09b13c4b1ecc53f702d21e225da737e87b5820d628277254ae6d244c02068f2bb0dc532e7ed04e72296340d2241f0cf508f7a96f3683614478dad9923610f9cd285d2bbfa98ba86e2aefe49a52dad162a36fa2a763ca4a09c1afd3ab86de4986ad0e29150f070dc9f5330c62d1da6c2b494f2d8d97caefdb508fd468d121a7ed36ca9c1d7612d386e2974fc12f3f701577cee82b13098410cf65fd9619151f2f69e0cbdac7d3838d94345b5d3059fdda42e527dcc2200193789b347f90a273b06106abd0f6fa79de26086751d0289ce4766d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "09691e7bb6a322e91962d6868e380fe98ced520bf556cd085fb8e8d41efe7ba220a67a13bd72c7fefed3e1d4500e055398b29dec57d0a4eaee6e1016ff7c65b837fee29962fda0d65186bd317dad959dbef96ed34e2c89ac2b5841995b2d78d14945ecf01e632c19325dc77fb879988c7ec2f6924abc8eb0a6933bf091617add696c186aff6bb811042862cabba547ee91b8000e92fcaba7edfdbd1bd03b3d6bf5c2b5d7fc77f2c0adbc398de8995e8bd1c4040a73e5490372bf75a33f111666ce9d69b0f61c9a01cc541b4c0e6a902988ae3f876c0a0029d2f0741523a49c12034d572c6dae9b5d170208f0ffee12be344288a3c53519388dbc20d86066f5f4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "128bf8c66a90e5267f7aa9c89b8713ce22c118845c5cb9b579d29287ce720c747608b68fbfca40747178e1dda3cdc3921fed5ccbfae5d976d286e9382fbcef3026eb988d537bfc9a67470094f8ae30e4da19fca114e6626811c3b355d104ab1f921c3ed8abff6148e817f5c9f21d270b2ac8983c6acdbf789ad54f32aaf9773f0b2570e810058b0f9f12b523cc763975884d13902580cd4f9981ccfbc84fb18f6a9670876c3a120b6907211b003b035a1846cedcd7a414dee37cd77b16c89ad22035c3754b098049ba72b78259c333bf88609184571955c74974083dfcf5d70d940bfd64a6c575fc52b3b8ed5571519961f2356b7bff6a127128103ba24c5142"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1901af3da39f5eaa20edd6002255b5977d3285f99a2bad2c4d7a57899e8b19d89da3bc5e418b39b744138a0a60dacd84542922f208b0e7fb0e1ab7b47891aa9b95921a46d2de54687cb2a79b3a7f3a640c2b21a139ad7f8a456faa22c16f27308ef95ffc92fa9b70e5feb0e317de4bb5b0a1558af98d177c097dffd7ab42eb8520935fa87512fd6f0172645631cee29187227fe01bd49dd0f6a28d2033276d696e0631ec2da88f7f1128a7a9acffda408ab10c26cfd6a3bfdbe4e9afc93001deea66d443137936d65bf31ca0a940e25c72b2f8c3cb7f3bce957539136cc7af0e6e5a4f9d8dc0b5fc656952d225ac9612072d037c07f9909261c02934caf542b8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1ba99c4dffe02d72a6a5abc06d7aeeb7478aa057d8752ba59f72165e12e740160931f6419b1cd5a0cce4871ea974453f821cc43a0bbd7f541f4320fded5ed89c1abcf32806c13aabbad83c09173a2f8dd1fc15fdea66e9ecae0f92c376ea6ff1c2ffaaba304f74425e3f2df4a6436b5b1bb15035cc44466c240a2a2fb41d275ea8751136686d69adc53373a0eda516148aded67f8fb22d0985f92b6fcf236e7782687ac95cf5ff0104ee3de37523cf6faa1c5b428489e11a115f502fcf56567ba18e3e39830c6653bd29abf86b3b842bd1f24928277f1b3fca68a525243fe1bfe085307802803378d9854cc0f90318c79b79a4e939de2730a08269077fafe57f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "89476619f367778d5252add21e8a22395c44e2bbcd5a743fcea07655c3ad3a7f4c8c2d4e871a1c0c3787763128fe21d2d270c07c8ef0aa607dc2e9697d9ffb8263b3e0c82851e0a5a884b23fc4842d60ae0eef01670f988bbce5055cd8d7e613ec8294b9ed61459486907e37ed816e7c795bab8dceca60e476d01cad4dbb1c00336003319273f85b57808b6f1c8d8d8d1f119faa4eedccf3c98cbeafff20e54e3b101c094dbed77d33c54f63932ae49f8c584d66ab61373eecb541fcb89e788a5e43f99c67f4921d63bc54a2cfef49cf4ade494d32449db5c8e0960bff24e8ffdcdd5e4a71bafd1e3753786bcf8a8388fc9b9c53f95622763394f1ef88cfee85"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8227c6081b51017a528a59ab9a2d5275ad7769fb418a2514965a9e2acb1acf807685e57fcc438187a01bb5d592bfdfcf68ea2ae3182ce349c5bc5445131e8693bcc63d6abb96881e112b0e0a9b3d85c0ba5a463e6d6035ba18cc395176ade7fdcea30abd725d6ed4ce5c3905e0d12d0cbc7622e44ee8c3d343a3e6ef046c4310ed7d12e7639436176e2a1b7faf54e1bd97d77fcbac40368013c8a2491f2c9e084ad110dff1a2621d704c8f5e8ab1654220e959fb665e6e6770da6c23a66035571d844a1dd2eae68001169bb95253d7e18dcf5c376b5a31e9ccdf7918715d281fbc027d0b2510184f2a4c454805b73aae89370cfd80b345c8ed878ad1c314a7a4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4360d9bfd89ed3c5c40290142efb667b2afff6fcf53256660409959a06c24d858b3999b2b1fbb8d9c7da7958a5a4ad9c2d9ea617c5f7edecb7ad302b0004957a979d6eba0d56fc378946fb5145429dddb6d12dc2245d4a071fe162947b67546fddd5efb1f277c9e0ffe4281572c3f6ccc9ca5d19c8c1284a5b2816b529a54c02e9acad68fcc71a5d274cad33cee0c2826d0491eadb1e4d0f05776aa02f00fc702b50927d333c2cd9ba753b3e70c26461a0c6d374a20fa6a006ef77a630ffaef2bba01f4bab3314f7f110c4b9c56aac18ce9fac6ffcef3fc140afcc0adda45473e241d592fbae6014f701fc58bbf655b519d2315630c4827e6e16d9f24e9f9407"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b0939c12151b60d2302513c5901647b0800a5fdd45ee42009828610a83b017a32ce042db7257f17f5504b3347c7b482499d3547282cab6d35360b88b88bf57f0b6f7051452f309a324be5792ff00c0057fe3936a9d584ddbf64b8590ee3dbd04961aeb0fc11598a4bdbb92453b3c646e55bfba321d1d21b5ff883a8e7b22afbd66de6a273cd3e4bc5d857af6c55198358f22a54fff26a903e9fbc3af78ee158dbf9a546dee4b5c77c33980619eabf13dfc72007acd263ea2cfa3f4a89f97b48ca684a1be77925e051184387fb0b8d7ac4063aa84d63b8846932d220f5052eb91debde89aeb6533903fcd01a53e12048990b506773239c83e891667dfcfda3076"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8a439878c5c694fb16b51bf584c67cea27287e51e5b259efcd62e8ef1c7441555e788e66bbaf0f508440370cf04e87b9474cf0aefd15a7150fadb809ab4bd981036d906cd3bd6eafada91632123de1c38aa486c9d6117e6a1b57099a8fbd78848c7ea47be3125c866151a8d46a3bc0d8020b34915ba17f3d835e641bd797b1e55ff44fffef98a4820063434229315035165196377dff2c5f50b7475c835729bdce9b63d120bfe27d5606fb051c7c946a0512092e08ca7e800abc734e0d8234262ab56037ffb2e8ab3099d1fc11a202bdaf4c7e322995ccdd5efc18c234e1b6139d84d0193dd27751e0db9d077aec1bc23f978d2127fde875e1ed7c992a82d051"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b95dd2dafad0610015fcfe7d8b5c83c34a76dcefe627c513011d953cb2238ef20273feb8b8672475fbda75112c85340e7ab08fac809b6e2b4d314110866e61abe8d15d02f64952036525b0069f2cbf61042a39810d37b7860fb6eb1c423aac7311fe7bc98d6880954055a9ba7d7a1bfb4e45255f4cb68babe6bfcee6da47ba18d95b4954c3374176782f841b85fa6e773f58c5d56fa85f85a4d8c7b8c6412ae83e26b3fae582c3090a9fc6d2394d1a02e3864111cee49ada14e5e625da3650608bde5a5bbc0b99a46095fbd7c01d87dd6c83819c13825bff3a62cf893af31d03f44875388a4f8e83b7a7f360227182b26dce8b310b389e2c672016a166f71557"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b4fbe49100d4f15bea29586e58d27cdea5270a035432d89b245e7a323cfc19f77afb4f2652caa2afb3acf712746710e837ee932e9d315ae21732c164835fcd77f8498109ef05704b081df7f0a5566f8c176e5031b184ea6aa7c590b0eddc6037d642f463f41f61c00f4b12d0b4bb7924b9caef831961857854ba53521f2b9da0210cb38132b46892ec7d44bca599c5efa9029eca8f1663ec301fd064df65f9fc35f14ffae2a3794a3e1519ab077cc761368014acd84989e690449b95c5c8c59e4fbfe260c64ff044be245c33b4fdf2f44c87ecc6510b524927a296a1f32cf57024f07a8609ebd164139ebc129b5eabcb0a84f24048673b7c9ecf89e24099121f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "963142f737aa6b8eac11c6e52dc02b3ea881f4a1a29dc672b8392f4eabf487d9296c0cfb3acbc6d56c1b4eb4378b6f118e6e754d2a16ebf20e9b66f7961d7af4e1a8deb9e4d089d540496c0ea89cb2cfff8220bc7c5bc7ffb8a002d549900d773d00a7cfbfb9499523f353a1dfbfdc9e28054bdb69c64d2bce0e172b586f6ba615e1af9c822280324b1b9db915a50fd0658083eff495f1721eab30d3be3ee276d33c3177aec8fd5dbfd9689195e7a944108ec8e734d524a27e9bc67fd8ade717c234627e2fa25279bb216fecf1f79e1d724e65b10614f334c161f2a2cc50db7113f9dc1c73bca1c67c41f6f77f80c3950d4d4e1252b64300264473cc904b0e61"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3d1ba856ee722aafa5bb68d8b2901c95dd1ddf22559f05b70aa3e92afdac040e08819db5417cb8f551cfea76e622a2aabde7863c183d41c23f4690da5983c29db4e0d603d349086aced24d33695a788c617348ada9f68baee069c0dcc43d671382158c70f0f91134aa4d2bca45e1e5a106710025240d496d79c3e6bd70e15f5a4d732b37d53f400aeaa0dd49cfb24fb7af9811cfceb185c697d70c61ff454672128a0fefc6dd776befb87ff0c7f248373a17f8d2a08f138aaaa986182c084178103897fa8ad0e921ffaedd7e650637cc0c09a185eec68413e75a6f80c9fa2cba46f328b00d2f3e414f670be8056a77810240eebba03e923c01c096fadef1cfaa"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "582b5c38000b069573bec33ebe6d4cdd9e250affdc8b4c17937afa464d107f41bf3ea182b86ec8143c9ce977ba2caa3d5656323d4744556f7bc85ed4054d2ca170d35e8958bbd299aed1bd983a7ceeadb2454bf3f5c19d1e3d98785d644585a1ad3a914cd40401d587f18da2c05bf2a9394902254914ddd4d2ec216bf791d87a8e8cfe6518d9e7520d080376cc35cf5b8cc92995f1e825bd5260f19b0185fa9340f1b15d6c7e0d0533268f8e269295de143449ffe15cf03a0036b17899bd18cc48ac7f18bf270f0949b659dbcea7651634da97e27a2ee1da78b10ca674e5c38475a7ecd654e051161c95fea16c5bd8aca95773bbf18f7f2abff4912bfa46e388"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3ae33c56969f5a2b11e0a29698e60962db13458531739d56a4d30379aca857b0d33d48a111865a010a6a6942a64bfb2df5dc3f859f2134b7ca6a9b48093187f3554047a95d22c5d013ee4f5a65ece677229b6bb830d5e33d8bcd749c63d5ff41c1d48e6de89c4ef43048d8be79ab7b547ce1e5731a4a5fa0f71df485e514978dc34cc297a34215e519b944b59d3762b71a5c885fda79481a886b5b587bff0e604d2cc1a02f506f1e9353d3811b154506586af833bb42192ddaf4c78a1f01f65999ea602f79de8f55e987c5bd63f01f27de24361df86173f3d4a2020b440f32fbded2dc62bafb7f77c5b1bddf4b774a820d45d98076bc456aadab3e6b55a50568"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "86cc2f6da999d54a27f1d573b192e01350cee91adec8f9a02b67b1528dfab632160fa962bcba95594dc342840cb4fdccc3698cd4e186c005c68d342432e5e7ea8019469becdb33a76f806504c26e619a17d8de1b79474f669e91e0bd07b31444e53cbb525b0f47ec438391a3587912805c485dd2909e14d8289310312a7616cbd3465c2922a00c5afe88a89d3807c614bac7c5b9697e8902bec0a2fd9e466eeb932b668f6e643a8109292ef8bdfbca19459715dc569f3f12b90faf1f31d7f8506cad98bc4742b47ff0f8f1de840e10e62afb66e93df34d43a2dfeb3346fb3e0e19402235e00c4805bf6f5dc6bb10a1406d8eaaaccdfd118cce8d1a62eaa4a97e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "18d77b56276d2a2960630b730edde16b0a26b6c65b28fa20ad7982b8b48d1de6038a940f8c543d7fb71181ea2feb85592f608b20bb93ac7c06ce725026f39c645c7f964a14d68ea53de398cb64cd0a26262ed6fd5091332f8b437b71e98ec59122abeb7a27259130b203a81da5577fb0590e2d6842e22e943256c0093d143f58c023e719df92454a979bd76d08c550de11dbf7085afce1581c31a2214752548af5913485c00b7466a1cdfc60e7d857a913694fbc2fca13d77fc5b775f7adaa79668a5afe0b743f13bed6078006e6b7b16ee6ec576554aa2e864f77b43e4e61786780085edf3c6e8deebfcdc057a1de8d8d7d8a6b188a8c771e347365d25240f6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a2066d53103e4d5ed9c08d7dbc8be145d932bac9d6363a146784fbe172ad2e02216cabce279b3599b5f3858e7179561e3c489b87f47f33d266cb019b747ec49d3dc1069cb078419f6dbe7dbf640500cd110a93e54f2bad919e60cda6401f7d88e52b9017b7675f082ac349e4fa4e49b0a0c6006d2821382fdd00fa0b9d4e948db23c1a4d3d658ea857ad829aa7a3474e0f8f86520970edbdb3035ed195f039c807f8613cf333a13a14c22f1a5e4b77ebb0db9c98c35f33b19c914801f4aa4459af043a39ec5e016af1602bb795bf2c3655c9f9e30ee2f49c6e059d0d616eb7bf7c9650581ab0f29d1e2d1fb06b4d78dbd06f0d3155494a6f3d7730f55a03c1a6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b1f2b2ceac435cb3c650e8214ed70a87ea039da7c6730ea29958c375c85d88459065a8987dcf66b93e732ae5b92af964e7341eceac3c252b93c62b2474b54a9477053491179986eea94820ed6ea58edc7e758177c1d150aca2531651963272231f98daaf1b90e7b61a02c7e61b25f9b7c33d7f57d846284699a924d11c45995c9b85bc3192f349af5e669d893eda953272516c1a86764f46ccc17569880ccee30bcd607a21c306f84abf4b6a5fe6839ba00b73b2df062b1d9d7285c4f3b7412b8ab5f68130000c95761a587818811e4632d209f34c4a8c9e13e78358a37b696cb444ff022bb1508c299a6eddce1f8961bee97c5eaf29267d6ff4f6ef9e30061d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "012e5e56d0e1bc77798b42190ac5a15665cd5f2fc1257c66553d8d00acbe85cd2b42e56f344099da06024c5578851c3463d86d00f7c43c4c959569e2a0657840305b655f4607bde3e44ee1ade5a40162544c9e81a94612d600c069f3073c3e9710cb4006aa5e4a8b9083c4cc4f18fb2fbc3343075c8eb8f7d8b7595532d52301944cc79054512141bdce292d339f85008161af499002dee163d01eb8211e6115e637b7d3ad074507e8492f1a524e39e1a5151802b44b74e1c78dce275825a67d3945e80e73c605ea44328d10a16a99f4960e8f83ca5c01c277beb245f4d0758bbafe969dcb497915d787d760673c86755c1ac38e06e530d24e54b4dc90b67e25"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "51f6196459dff03d29f6fd4c7477faaa392cdb0b2541056b94484fb8a266c1490e97d90050843010629f7eb61c3671daf8fb5344eca91dada6c2408d3ae9d6a66fd74c725ded0a4470027d13a09402f0d965a6177ebbf0c24ce66cc463892ad282ae07c0231b394725ba8f14705f4cb860495b2df5bbf143e3e48bebfa3503f6bd2bb56f4b5b589e5be883a0fc2249b6b59d6dca99e13b14868df7aa7fde62b4ef75bc6f2e90c18685922be7335d4d3f55eb629e2873d66305e434180701b805f832be5f5757117543ae00141d49d094d37e66091fa4a0b06c630156f99bf2a42d7f9315b9e4e2bc66883b9a83e1bd83fe9904642f66b19b40ac0c0a9ad27aef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7f8104fe5b383a7745e52b6eb6cd2404abd1d6e5ec4255424fe802ebe76b70594c3f5e8a38959ae9e72076de7ee5a485636cd59e51e9270ad5ee38af4c5b295855d86efebb2678a66b6fd0328479b1b75461b9eac59e71ed9441cf972af074f20320d5c01d93feb037cd212f5c9774ba65754a003f1380ee0c77d3f7fdaf753adc1f7912ecbaf801959d2a70ebb5c24a68ff725ff8f9901a712ec338d3a798294ea0f10fefbce5a99bebfbef2ed91f6668d8e25b676731d9595d679b8a7e8c35c918ff0bc6b080f0f0a187f526b55b450d069bc0d4b47c59f7bbc58ac3af21180ebd6707d7237c967454e459b696842d41841d02b4c34fc964677b0116a22879"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9bf8795b877ed9a89e70af142e44cffdc770cd2ddee32ecf32b962840dc26406b1449f03ab16c7c9c72e41e2ab24bbd163d2b7213ff7ea8ccff463cd41ab87a39232383a6405911fc9bf33ea82fa9fee0954912afad0b50d80a70a52cb043f5d8fef8f80249f4d2a8a1f47d524bbfe9678ffd3a3c9d307d9c61a909478cf87d45001d66f5786a7d22d8069884c3248a3e5f223d6988e6c595009cfe24947a564f43964a1ac7d4319a446e7491230a3814bfdb80ab2227a2029a36b13da4a584c7cfccb337bdac86b5f727169596bf6a53467c06eb94b7d168624847df7679f27877f43954c4593cc4e28951dfbaf4727e3728cc9b9a59efa92c3249a4e796f33"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "48e200aab82c1d2798b90dc2ddc522ad5d638699b2349b26596a58aaaf7d14f90f52f44a320fc424ae2ef781dbe5ac12de05b85a02866895329f36b1f2e8c78b5a8161ccde69de9c112682331363398659f832544c7848806a3f2076a3127a9b4813e6d5c8ef31bf7a102b136fd5f9b3675c5e8ea7df25bd9b8df6cc46e9134b5aa185c13e40c935add77fbe1c1853ca8dd28fbb53942e7965a44d9694b96dba9ddcd8396d7b191c7b385629e6c391242ec76a916cf038cad4f5239a4c17816a39deefb43ceecd31fae33d3afe50edd8086dd501f6b72ef43f21ea1858dd46ad56ed63402bb92ab06b85a0d17fed8d9028b22f528a9544b8827dced2c778d082"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4323f6998549f0c6d79dd67cbdbea827da1ed45026bc16ee020d42b1d448a66810677b3f0278c20213a3949b204a773b533e5e203f2eb48b936b01ce5b151c32be13f89c1f56b20b44d5987e1d7220c67d07578f8af642b6d504e1fb11bf1657203eef4f9882488f68ef830be437a3ef948def0a6b34715056926504439262cd5e971a91ec5b2948498fcdd5fcb1e4b4f5ba04ee2631546a5454f28304a07c5c14d01a75322bbd764cc452aa9042bb03a466b0c62a8bf945b85c63b6726f378a72555108d27029268706976de496f7098d093a3a542db8fd5aeb805ef3b547267234271124e9e267f27a9525bf224e3f5d33b67a64436d65cdcee729bbf28897"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "225c4bec4924b6aec5e2524258edc63007b35b37faf9c735959c9f932f982f5d5434fe0f11deed690f9a023337a20dbedd42921f2a019ad6ff033ffd297e8225269bb6a83bc2fe8e08b7d0b9af492917bd3d0cc7e3c7bc213e0be8401ddd2e4b5c1687ab6da434ca3870f0ed3c2c1b08a00b9f52715d2efe0f4e4097510395a087b5bf389471bbce2e85814a43f10d68d8d77398b3b3fbf196cfc35f6eee8b21117fd6c0d317674a6f89b2f7635c7b5a91301b6e64578fbbfa327fefd9d8e4c992bb88a23f8561298c60a075c4f29fd737387349037c1cc360238dfe4e2c3bb6da805da25feb9466923e00242dacae167b40c4c4d5f4473e22adb0851162f7d4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1e416fa2194a2297866cd7df7d4db6477bd71e2b2159313204dcdfbfc69ec84f826f01e35e4ce6bbf43c8377f34e7d4bc9c339d20307ba6391c2091698885480a776628addb3ad0f5a7fbcf944ef41fc2ea9ab078ed8ea62ef4ddd1067d8863d61c1b52534d51b2473a11208d260460008da01f8c88540a594b3eb6c2145472efc20770342f2e17bd2a0025fa2b8d820b8d5fb41eb6025ff990b054f741a8f716f354b18064902e208648b9e3eb312f2917782c0db5c8ef49ac0707a82f71182e8a21daa75d36e0d4938cee289742a3463133082faec3fca8979372957486d5410b90de7e232818b839882b513da01b4cb9fc59c0da62b70ac5a4de1ebbee89b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9801706c663bfa15fe7877c8d09f58d4664d3619471c27d333ca869536a6c4f4e816c905b2596c71a4ab3bcf07b550ccee0e8ffd5f7a9fab3afb5b8bf76f8e118b7d07170ab6f82e7e33db4a81f2f9ef1f86d04a1b2fc141768d9b4e44792ff9ed882032ad5578560d51c7ab2fa96128fd147bc260d05074ef42846db7c8feb7ea71ec6755efc554e46ad4c9dc77c259aa834fea03ccb9b931c7d3c8b0316e30d25346b682df91a6bf68c6266723ffc77576abf8a732ce1a7368b71d740677c28029d2854797fd515278d884f4eb0806f21752207b103de1e19d357e480021d3e28ba9461b6895b777f1b6a9e08bd4cf713cc41f4e9a5bd7071921a614f0c3fb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "71c756c9def03a24fed38e597b1925905783f0b25c974602d982c1e7413e7bd82c78466df5decf09100b924ff254ef01b2bd425b2e0ade75ee4ec58aec4f3da80030eff25601f3ebfec46452e01cf51ecc6c0d2268f754795486f7886b8dc181c96f6fe4dda05a2b54e6fba77869fe347c2eea5b42081d2140cb9fa7a6bf023a6b9f806bef65038aa680fa6ab6263d756d3cc7acdbb93ab3952998b2cb37aab72a50657e276d70dbac6be84526c17c5c1790f0a1eb0dc0644e6c47510d3704fbe9e10c8509419f6c49656e06f7bdc4637891afebd376f1e1be139a87b2eec9063dcd815a17a08f63e2a4e9f9da822cd0cb5539c4623da6d279ffece0b8e58f86"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "50d70adc01b502dee439ae57f59ec78608d05820f858a6f0e9271a4372b47042613aef6ec2f36da7dea07dfae4c84f57435980b4982348e2d33c4df6c3384accd7c7e3892184a3778943ef50477b906c2890b5c93322c065315b960be0ead30bfa496960d53a4dcc08c8df158ac5090c10c395d18cb33c8faadb7b8d6bab8fb9997e017d5c12789c1ef0b285761d2e43fbd5b4313726cfc85061f9ae33e3da0addbd86e267fef72b966ad5286220b2da94bc1b667016bece0111dbd2ee4943d9d0fd041b666d93bb3dab53e16995d6b10d1a3b4aa07be08dcae8f0f5cc03c6b9c3419d5ff8268103a850c2f2043842637f54468aed58aea06d6f2dbb965a3208"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b96e8894734529229c0830d77834f5a07060c22186c2cbc7c0fdbaf405b466fb9727694a527acf3ad0a35223254efe854789375311ffb6ea35d1335216d7b8fb215241cd3dbbc90dd569c0ae8979d9c0a2dfede3988c85e18756835734d45974dd50aaf649c1b9635f0c53dae4e44b0d2315897ee248998f6efaaeafe72a41f2f13a1271500bd6f9be8ef84421f443e68488a3eb40604cd4f28f7e9cefb539c8c5e87de966017d9ab0a3f01275fe25677c0049c0fcd7ff5799b4b96cc0490bc4199da554daaed28ae235dbd3104f9f2462468facc932da3bf2e5822a8159d6e8e8d9ea96ac200113a60a57f3253b8e05f3f0e8e040fe3a55b1a8ba749d5d5ef3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1b640c511649dcb0d23df1fd808a340415cb87bf3b15ff5e19cb6ced922fcfb4ee376d6dee61df8aaca7e108c8a0868c8a2e99db2c0e769c80b7e5adc3bb4cd4da70f7fa68933470aa61d50a793702a49d3dc635670fa77f2dc282e28f4a74aaf5a76c9383b093e529ffde33e3f8f947719c5aa2680b1ed4a4c07a72189e03cc0528a814a6ccc7cbcb4148667c9170c882ecd4bd6cc8dee957b9f334e8e5316fc4041ccd6b422cf658ca6cca6f27972f818ab2f0defdf35ff5e4dd87de52d6a1d2cbda5f7649a13d83f989d208d95b076a1984b548b71232325469d111a8dd0b508e4affeb2f6dd42c90f4cd1e10dfc4e896e483bd9e96c3e951a51519a19486"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8dfc2c2577dc3f36d36430f25f76fc01ffb2af51e1f5aa8fdafe6d42f57a0934a106d88254f834999177b204a5388543a49d638af70d52edde954fc9a6a2a0b99bc3d3e2c148058a72e2a50c1c3774dd83f151e8fecab64e1bbc6095cccafd0d1774b8b4ccd8d4b995af3e1ba9c9430fd8fff39bac43b0c6bfd051c5d20758900c9e79e11c7918af1a38523090454b2c14f01d1aa16b6d3c2d94bf4724a37c471e3bbdd710ad1f268030ad3b3fceb83e808c1cbb1d3b4d3a4de84f0a4f6f1d7765b324ebb81e1bcd08ace01a4713c6b376069114b8f0cd236f7bbbf3bea3bc583412617d97d508a511c54eb32f166dcd7f80d53a5c0c881030de35266a30dae0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a43fe7407fbd017415df9e194db645a0a5744bccc05dcc89044e7b978a97090833589251d57ac70f0591ef9a787788360602624dbf50209fdf21f578f0839b9b27c9aab1bd58d2a17ab1da720fb686420fdc17f2756edbd8eed82502a1e66c3b2b90c08dd4150f6f6d0b569cdb14f7cad5f7925d9c8a1fc3f0a6092219ab6902599e018f88247f2e4edebf9050104a387de07db955bad9cd01f2b189d9a6a2ee9369bf1f6ba272449e26d4a67712a3a22947ab67de53b1a416f38e304011dd477eb33c8191d46101b17d9e835d9816f76dbc540a2d6a0ced2562325b9a21ee7c90f010c22fe7723ab4fb16197af8fcd507f61387dad1ce8ecd7a39fc84eb8da0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "852f74fc801faff2486afa44197fec789d36c1a40ea41b55d46b6fb6a5c994a9943c6d9b3d46165ab2023124271ed5fb34ea0299b205197e4d8432c1dabb40236a095c05587e885e6f8ed0e08611c2c7573c928c6ba6159541fbe6751c04486ebbe2f20ccbe8410ff39d7db6649eb46c6f0ba552f0dffcd183628e863ce2ef8f44faadf3fd94659f98517a5e8b5969aca73c32ae22c433887315ba8631f4f10cbd7a0c3204e377e7366c136986d505f1e8855f80c5f8f97b9ec76a69e9290734e80906701372e1f9fff6f22d15508e4393539dddfbc78471fd2326e7fbfcb5fde066f437171329905fc90c95eb174e9bcca53ba46b5c42b5f3f47f1e0fa4df04"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6ae97ba33d02719f5e4a809f5b44054331d0ec1b61c34067c6c8996d126c972df2eb48f2decf74623116e4b54401bbfc05023501e00245eb98d86aec6357697e67cdc78e0eb37c53b3ce06cd078af9bbde0206ac5d63e8a842726d4bff489e6695c6539de3bef40a4fbfc500bf932c35db6d8185ed3ae713ef6f7931b8e4a76834a6cb59c4114c230dcdefaf3b4460775650e03d3461deb3a229511bc97636341c0bbb1aad24f477c3a1658155c338d37aca1d6b5ba039f3a486535a2e2dda68e4bf1998b8931a52781e465d32596c6781612af4a6f495974c023b68a0f537fee00a32c3e499da4f8b2e4ee677b68b058f99a104dde579ac31e6ff966679cd47"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b00ec164825f457f144e3208dd887c0b69762a2877f62d8795ac3eca14e49988f898d3c939613caa5094e21ea361c804c8ea0c5f6a0e09e118e183441b5719ae308eb95d705046218e7dab336e53fb30a7c1ddc59cba08785ce9bda385743526e6b7bd15b3cde6bfa10f8ad4f6f20534c388d7f61dd04f34009dc4d6266f7363fcc59853f24e0ea5f9ee100f0004adf75767d95c12b30473594f67bcd5ca63cb76a4b837509901dcf0bbf5f2d109700bf04e2169cdb47ba4de1019fd595665acb114039bc75a62cc07624646fd1ac2bd71625974567a9508c512b0576ecda69a59e950802331002662dfebe08d2548968ea8939364a27e202184380cefc1796d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1778c178579119618a407ba834a7de8ff244d4da6ed2f979c54684dc459257e70240691ee844f745d72e64633200b800be5da738484c0258405e7319800c8128d023db5227fc2e348c426a026c3f84060a4548f0ddc2dc92be1dd42bf7a819a9e892d318eac58919a01f1ce3da9c17528af6022b2cd088144fe44c3dbba60ccc83970199b758fd49c2226f5b742668d6685dee1a5feee173aa8f4428118a18701ac503600e0704410595e8fd7208e22c161c81e108056b52da131f1f806c3bc118f934cc78b8e047c0b181ee7386d9c283a3dd251ca30a81a9b6f562b3364815ec3d247e5cab8ccdd78e0653e2067c6148b76191bb797e800f0d6e9e282409d9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "13b647d93816de9c2fef162f8dc37956690dd40d2124b0b7b724ddbe5c62b1242369f82851b24cf98b1b462f6f5fa40c248c02d778ed28d3ec8d2eeb1668081c691f6a3939f72345f0eb58fa02737ab0334693c6333b9e4593eacd3dcb71586623d11b5230eb624034561f3c6c7b151c1f18d3311f359a166500d78995d6ede43421058a571c639f228a804e33deb8aa06e646c7aa425a8d0ea245e4b2c2a5d48413c6ada61d195e2302577cd517876eea82b043c6741aba882242d9c97fcf7edf0d0a3ba6cf3723f5d3006790d22dcd8ec6bca701568cecc2420284e140c84d94e4bcc72861bb31d61a9dccd53857060f7f6bde1503580f2d52424afd1c0794"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ac52288eb0ae64f6897a5b383e9e4d734b45685fe3a75e2f5c65ad8235311a6a2fdcb5a8aec47b430a7a84efe10bac9da10786badd033089243526a4d9ea57a9e7103ca9e7dc889a9d1a4e4b86deb34ebd3a5b454d0afa940af71422a4c4dae4e1a5bd1e4270ad32a486e2a1334db7a511f3251834d112b9696979dcb0abf8ca83f304e4e8cc6892c4dc5188e416428570f0e3e56e4b171a3ee741787384f9375019fee5cda1e161d4876e9ebb349fc1f33ded8a733bc5c7b719c0367ee44ca8212c517eaede6689e1caae2b5cfd347378efbeab78114435986f95add85e48d433074288e0cace49de21c0fec2414bed9b01274a8e8f6959fdc29648bfceee70"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6b31d3f3d9c007718c2a7f9bf201ffc003581b3fca2371fc15aeba38214e51d6f72ddc632a7632ba95f79c868230c56851231a8fa178cf6cde67fc25cea8c8a811d33e451844b86fdc11c1a75b03de5084a9642490d5e9b49de50d51c93c765bb36388f1b3506a098a8a9d58f509d48e76477bdeb4ae2fdfe410c17cce011da703b47035fe2041fb82d82a158480fdc25d8e868209aec6f788e575635a7df9fa58a95919356d52a38e678a8268f3baa2af7a6efbe3af72e23eed354bd43472ef7c7a877842efbf3d9f08ef45cd562ca3ed4f903d7d4a571bdda531a00458387135e09d276729ef230297c289d9a0010d6db66c40b96d91929e685742946a4c05"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b72975609463db5cfa161a7f29ca78c1e8ec6083eb055bda72fa7245d71d565af2855f175ed29dbe881e2106f90a84f3abbf7d229db8cb7be2a7d5d29cddfb16468d9f142e07d2e5f4780ab52354504743ef0cb4e32d3cc1c2e612245324afe6604004518d8fad3ea2884104ebac9eaa95e14180e86c54cb801ba9b8510bee1e2df90fc49a005b1a26ade197c63de5f1cdf8ac8a84f6c67768c0adb54ae853388de71d1643e07d8bb083166efd077251cbcea5905fc035f01919bd143fa8d5b600cc9062d8b61eb86d118c0ce9f98a3622f90084236124ed6a5024b0b7a61bf7641cbc7647008099decf493b56c59458a1a9dfa19c13ba96c0e050d3df512491"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6afd7245b1521c942c1d38b8dc0b9a3bbe124833ee97de0b50ea9e537973e3d199376f1de834ec239318389e479a89c97b5df2bb08d3fc565c33903aab595f4005461c833bcbb5c04d90a21aa7c251e1342e2d8db768ca1c23ca473adc011f40eef9faeb783cca57657b6fc4200fd54694ad457db2942c8a9271b61e3cc1aea81f97052c3c4ce968b5c6b56710d5733615d960e29a636bb959a4fe3644c41f7cb85987b9112df1204f81c69d193f10b5ac2aa9d8f223c77641ade87567469c07b82918d1b44df6d047a0ed9291e489abd7050cf7ba1adb85cc5fd079cde65e8168c2480121ee7145bb094dc846517b6490250648f9b58398130a69dba9ceee10"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "582dd05a81d329fb7c4c1bcb5716eddd21334fd2f7763aba0de67eff550838dc7f4284ea5e4b94bfd0ea823aed8bac214e3c9adb0144c7ea34ad98cacb583e8f5e2ceecfaddda67031de748b3edea986dd13906ffe06695b7fbbdc455e350b64a459a8cb260ee87b0004433d5dfcab404da5bd9a116168d8453071dcbc13af9abdfd009704721e65df950984b564b957984108afbfcf1b6f14ff50425a16da4f1d043778a50b91ff340d94e04d9cf9e7e3b35a7482cd2096370b189844542b2976713466cac44b356581411db0bad42a5b0898d05e5b19d062e04d4d22e3170001d46499a20ad125779ae95d3477cf2ec3d39634ad787ce1ed0136bc432cc813"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "666430efff090b85acbd66acc054f29a8c05720e140a599c211fd699955c8857ff68dd8ebe56517a1d4b10ec5cc175b17488161d8de9c07c3263e5c3c73a9c649d85e8b4cca02035f6ed9b8ec80e0fb1e102a06ba60e30a2d2d2026b1efa283b6744c1f2a9b5bfb2aa054fc061626bb7c5d18cde129e1a188b62f440abb78ff3eec10943b60c168c2aebddec92191d04c2d06fe1af82e9f6551834f2c6142b7e81bbd4b4b501986056530602489d59a338694b08f56b83089c76ebbd0d2700ab2b1489cdf43913586b426b22574d20bfecfa1efb0a72b72d7374ba235c8708eb68feeefa9dfeb71c94bbf999b952b2bb5d6f47bf3404427f931360e94c8087d1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4f1b6b6f44242c393d6047cc0c52f5f11e53ee6f67cda2ee9995ef5d85846e35bd501adda9e0e274147b3898b56d80a78127569ef977872f46bf6f996ee398a489843d51216b90dac9bf173ee966cde1903c072f3da2551b47930d0d4c8c74836e2027ae33a34056c40a9bb7d811956463dd01aaa305899130d180e61532a604910d0eb25cb14a6e46ebce99914f820e64ca685a33a2409b3df75796cee1e0ea4e907265d4478327cea93d2779d607854d3f327125e4fc641f6f87da99b9138afc90965dcd95f95e54729618cf0785a115a0e7d9534fdf4442646602b9cc305eb48457f692ed6740ce315ab8a6facfddc36077a8bcf0ebd2a4cc41565c71bee8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0ff1386eda5e2e274e20fc68a2f2e04e0b299b99ef4c3c043761992e669da54a51d9ee1c1626674ad35b95e7c9cdd72312616f461bd933bd281f3ed79b532b54a39f1ad84602edd80767ce0e89dafa6841fdc9c4b2339ad0a28aee8ac5859881e23b4ff38e2ffc9648489b5fb61f64c6201c0558858f01ad97ec7fd40965567d7aa98c03ac0b3615c2d17d1c7695df50e03c362506f2a7e0a3c95e1e5be6e382a86bc66c4f1fd4d0972af088a3fa7f9dd439ca4b44cdf40cc84370d087ac198af66e6a99415c3b4954cb6893d1cdef0f7329ba339e01fea4ee4096b94bda9c4d0c74351009678a723402524976dc01e70f81bce36c4d39ace0d12111733ec1bb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1a183748037cc7201b866108573e83611953f72b96a56a33eb7052399614834d04daaf3892bcfb194aa1ca19df3a149720a0ea970fe9aae1bdd09c0548071ad50d806d8a6e40a8036fdc5803de61bdc14ac155d26dee61e1c23dde867c16f28cde28dc6a357010ed1714a0d8c6fbc5a1894d1dea159c3a8f4c5251233ac2cb1ee715d42b15360bd045a38be1fae6f5b5c5b5f8eb97cc537e18d71f506790b35e69faeb43b30a80ce6c291dd2ee4b0fdf6dd97dc197df9b125c59809cfec7045698ecb700cf99f3feb6099f7516dbbe17665ed515ab41e7154dab04e568e1fbd1b419d9d261ba35f05512f181f87d23143f0649ff5711cc4c66d4e7b702903fcb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3134086af9ed8e92e0dd74f4a83807bf263b3bd5ca32fc975391091016dd632b980c1df91854508164088e61c8af8ab1cf2149a8e8b2fd7d223e67da5d524cd6dfd3052bd307c991761bd8047c2403fc84871430978a0099954bc4befa89c7281ae62b10972a06b5dc8f4cd6d7e1ba42d19b486392fc2f1658ac31fbe9f0bd6d7b7738ed9f7e7f51649989de4817c7e4a613e357e9d4d0cccd5fe365ca4505f99ecdee8b0f9ad3d76deae39de4a815493611128919e344ffef0776b917541aad6709487f4605f1aab878c3a62d881085cb1ff1cb55bd6436bbfc4347c0ebfdfdfc6482581bb1402bcb787e9c6fbd3c96d9dcd16245f1935279116223aaacd83a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "39963c8d72f4b87502bddf258c441e3b7928c0e99f5f4c7c66e45db5cab0aff14102cc66de1555e6053e7285e53cbe1c4645883768d4e3e6bb18dd87eba514f1fce3177854b7f58adc573d2f14ba065f0cc36d62e62988a85ffc4b1ed6e7e7f3f5c18d185495f2ddb1fe32ac0dcf2404cdd3078ea5986e293e2cc28b36f4be1c654f8cf86d0b8fea5be318bceb08d62594255273b420ed9f6aafc9a639fa384259c636132d8297d92cd9bb4e8f2eb77785005683905409978b50b97685c39274299cb9da6098ad02a66971943f0e7c6df90622e39f2e8582770f252fce3f1659ad742e68dbe4dbc6562c065f82f5cf7c85f8967b9de92dacd2b05cc5d1ff0457"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "10da62f2d21b08fa1f0a9c6be729d60939340de884ee9ddf15e37944517b9c1e692193029e3aee69bfe92fbdf91bb7018deaf025e75944952b379e85c35d079cbdc1da17f97d844c78b0f0849b7e81e284bda48f0e354daf99fe5ad35f3b782beae791966d2d6cc7d6ec262a86089c385fd56d1e8e21ad69b85d305b43a271fa410c65f2ea088941ece8fd98063d50d6bb07e50119f0c4cd9c27775bcd40803124c85fa7dc2c555bced956e131a473a0e3d357a8287c0aedc6bba5239d3c8e92421918b137c08c08b424040e26a559b8cdee5daca596e7506109515e822d3de3d826284140b935683483185f8ad5684b0ed648a2cbc9e549fc4b0294d7384684"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "48751b8bf25b88354852664446a3133204880e38e9bb4e34ee79beef8b464f138c83a45ecab05ea954038ffe6a2fc2f90dfd76f2d2a6c3a2acd36f63c43569999d54aef4b9550fb2406344779d695c773b9605d189d42a825ee489e4b69d5f1538e4853132cb9fc97a56bd9180a0ec32c2fdf6beb855d62ef6b18ea45354d49bfa225145ca639e57e10248a3e947c84d35502f6b40a64c44f813aa34ce502edd4dea72ceb11d453e66d1175d9ccd5d925e087aba6e8e34ee641eb7e76cde594409969752061847630c7d7f8d87d3fd019ffdf5cb3fb0ae5c51a8e66b03fb1f6a8601c1cf79a3596c4ee9c66331e159779f7e7c78bf0462bbaee953c31ab6be6e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "17ce85f7b037ff2f5902e3df389932e95b3814547414bcfef491ca0aa9f6ad8eed3bff73f240352410bd67caa01c77994543af721d1c93beb57a6b5ab348ab51b75d75cc4b5addfab9479ec0f852984b81ad6eb0ac7005b24ddcc43723b37e24f509dce252e5cbc3dd5ba4fa43385f773b9d8a49ab07735db9a7aec91fcdef0fbff7a6c3dd8c8e7ca1710f90ac3ab1594a20e4421491cae9abce372b2bd703808363e26feef7ae93d40c298865de766a4de885f2e9efd2ad0b465d569893b15b194d2d8c9ef66b5557df770ea009d1520b87078b7339a53c84a3dd477c185c2f7e3e0370346df5951dce75d4b9e49092deaf020e0651d409d7ff17a5b5439286"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "299a19ce5d0226447644ee011e1633135feebb8765072c33c18c7786b93797c6ff66f182a698d291f50f60bb20d244721a3e1304e425e4caf5d893690fe555c45f2eef068fc829d313499c0e2301c127c032caafeecaba6e339a96b5654d8dd61dad1d31e594fb538042a7c14c2953ed843207d628cde26453241edea643a2a50eb6a9446ae1d266550f558a5c8caac34ab4e812a2afc751e0033a16a1bc09eac9118ac7bfd39440926da48867dd1baf0cafe46a2f3d588a01fedefb7e8b0fbb294d9beb78229dc2a1ee2b045517e25b2c521c0b6431dd490376b7e3874da096535ff2cbadcd7507d048c82e550b2da59cdf3435dd6c15d00b81072d0b0cdebb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5047ce51895b102150c34f652bb0e6f683189dc2b4c5baf7787d01438f0b24a4fd3120f6fe958dea1aeb126ea1c93745fe8d0d0f9280d701a00bb4ba9eaf35a4694345b9d38f724f0dfec600e379477999ffad9122980ce111ad4492cb4349ade4aeb85f3de7e71be992a42240a78ec9355d3a2bdc44525a93d66a41cc18a6910f43e11a528d67237901a4196383f64fe6ce5f246ed02ee2b5f5ffa86bf16044a20540d2313384cca1317cf3d18bf9269f3b539b78a6c84cb4df1e9f2cdd4d9a9b53b11f329ff7db8248d23ff3dd53e805242ecb307bcf2cfe23d90de16c68cb3d33a5e461b3a6db28eb1ee25bae53076df190e6f9cd23a4880514264356f02d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "47e9373136f0034afd98de6e5519770af7ed2bfb4926ede7b6b774cce7d8df94fd56de9b5c8a2d0d3a23c2a49b171e62e9233bfdd88a48d66ef3b1007cf7425b46d5823b3e11a4527716f4cfa9bb4b9ee0fed76c00a6f5e1093ceb2117eee845b1daff24f8da60456d429a94d180ff40600e29088d1c181a60a233dda2c01fc3bd24f248f8d55d12c9b818ce608d8ef9194ec2379ead30addf1d88a4b9879f5217419753d036fe39e88cb0461b5856af8f2cf0b5e6e74ee8c0d052b851029ca7ad23c2eede49a3d916d5ca5a0190a92ff3b2f9cc4e41dac240620afa6efa358a9f1539abcb1073fd7a5fd18552437bc01cf5149506359e822cc405f5b474510a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9de821d4fcecd5c3ec6ebe88582c61390c5d471724a7c9aad4d4eac2576aaf133d92e5c53e45d43bd707ad80a5d3bcff1d45599e048ea27899f27a873151392afbdf287aaeeb7020491c835050c7d7fa3a905eb529fe2760e55bcf994bdd25f4bbeaaa26653660802b4131cda45e1a51fda7f6ae42f38ff688c8be59a70b7ad805e30186177e094ea2ead3b1dac4c24a42accb112155abaa12fe452bac975485fd8a40a549b484fda7d078bc6e443ddcc0289aab9f99061b083676fb00492aaca801cae31578247487fbaed775a74fadac298be953e0a108533211088290b3ed8af563186a18976ccc04e24097e4642d0e2d5242a28ec13ba321df4b8705624b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7c566a9339a3bff1a30d14b7ce5b4f2b1037907657106945a1159ec0daa86d687fc3db4b0f434bf6f5797f3870fc935f0aa1a67cafdd57b3e260a5ca95f17fe9e745a8aae891860e98600b835c0e18d119f41053612bfaffb9c780318d8628a965449b38a508bc2ed5e9ca208f44189ee72ccf5b28208eb27968fb5613bf070686d638e48d8f2dbd3b8ede717f350c41e1d97e9dd4d3a82bd0fa7ba4c49ddb50ebb1d522355f0307297e7d833e11125efd6d4201e6ed7fca9f0db1813c634af35d780769dc08738bfefe32fcef60014d5049ad739aaf7d2b885c2dbe97c726c269333d592d0c35d0a1b448b972346dcf849cbe370854ef33270e49b17c93ce7d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "92996c9f61dc7e216d111ad097ddbee4cc15ae29b37b944ecdb2976b440c5e94ab693d118d2c129f10b327c46ee8225099750df108ec8f412796dfe607c2f0535ef8a4a66394bd3d72e242e8182c3b1f9e8b2e29420aa6f1dc4c6268d982931f1ffd177293223de1e6c8bf65e1593876a6865ac228a898f475510ff938ca9f1568b0a90560cfc79dc4f05734013cc0aa65602aae3015dd83a7566937808b1e7d8d64fc0db46a47e35185ecdb9c086f4b857007ac3649a7e773b04dd8b6775adca21611b819e4b90f9315d4769771cfc674c41c054fe8493149eed9c84747b067e5efdf289a798368298aa12628a4ed8021c0827b0893c3458eae2f8104c12999"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3abd11508528361765b79ca41cdf3a114305b9c481b11eb71b742694d5f9ba59f3010c066971df5b80f969fe1971449550031ed1348de43ce3bd9fba4d1b93e1f7d1e4e0f79e98466ad37cf0e5ce9fc01b7e08a9a540d458f546bf53fd6f2bc215366cdafb9572600c0b85e9f3bbe0dc287b6630d7fd10114ff692fe2799959f6777daa709fe7b42d70161cfdc86c03a9cc815e51febbce992104020da3f7abb3c800f4c8ad7f7bb56d0c82689a32764a3029210913a1f78ac54c50af92fbd5df563dba505235deabc0a6e6a39c4f8b211747151e3a677eb93026b513f0a121fbcf4b533afa41c13378634536173b1838fb3d436ffab58cedb48bf2562d59554"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "70f8af936746d605b1527960344f07f63c2933c32f43cfb0509f4461b897bf09fc7c37e1828b4f63c55b9be11cc9642c2c1b6d44e388857207676e6914aef480ea49645296f5c0c01c63e1269ebc0c27544042ac036af2dbefa2eaea0be474d534e34995871c4efb9ae6f85b0f0c724ec191b3fe46554094a39d785441dda07713e51f6f9af8116689f65296e40ab21919c7f9a67c33be44dda122771c2fa1c5bce89e07dc739f671754a99ca273e256bd2a6c0812b9f3f3e76c2ff7ed972be9836a8a926cc680df79361dc94b948da882021ea1e1f5cb6848b2ddfa285c5daec97606c029c33c1fa312b409794c8e701a414f3cfe987b08f37b635d1c68ec8d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "53dea4ade112b2919cac494c1bb1bb9027ed7a70685451c21d3618ae862502bc052ed40a0000471085792a636ab95093b73f4eb4505ce6896fad47a27322a245cceb730dd53365659cb4467308bd001773b20cc7a850f48e78a0100eac31052857ca323dee8ae643241dcc33dbd2ac098aa5a6c87624483d7ff51b1d1d2f2409ab2d1d0aafd29002bff4640f8dd0d24375f7e0d5789bf71035ebab7b6ccd23cd0597103ff93882e58c0a5ae2899bbbac9df615331a9142c0d39a46d57a57c94ceaaddba6beb5ec6027b096ef3f8786d498db1baea9bf8e23996c8ccc17d6bd5b8f4a616ac31b0f5ea1181a092fe3e5b960d309497792eb5046c4ded68a460fc3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "97b5788236de2f816fd21cc21cc39b04be38d51c39805d98c59ef4647523a5fba15f08c7a2076fd63b71282ba90d14656c696f312626a17db5d74e0ed8234704238ff0dcb7539a846adb85795d0ecb407457404df35fcc04d41ce92379c08896eef2cd5547158431e71ee1cdeea4e1e42e41abfa6fb13dce3bf2955f8ecda8bc4fc7e413a21988d189794eb5ceecc722203b9154bae7b14c3c6f7e51081d7898eaee4d4cc84665909ebbf31d7c3dfa216e854c305c7ea42e502af50d6045ca3baf89a836c7f11242aef492586d77b4e6d96bbb7f428bd38e583768fa67ce9622a8e0c8d77c6af211eef2e2bc1418141dcb8401f67b8321095d623e00a3d65bde"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "41ea411be09bb58c61d4ef960c124d68e9c2e594c9e2f460b1fc2259b20678418e2d0a7fb556464c3cbb0df01e1eb304c64a9815c992640679559fa3b2652553072575804fdee685121efdf4b49d8174ad1441c9a563ce0d02ee15e0e418ebe86aa1bc75cbb91bf910f8bd7dc1544319d0c1babfdd331fe6de6b6999c31890421a3803a99679f70b9b628c7ddff98f57cf2d4660feecf3deb76c35862e90a3dde6ad0a7e09d38485cbdc6c0a86e68bd913e09478f2bae177d51650f9dc630775f9b91d81c149a1e1db0367fa321488501493a715a8a70b406bfdec8b1a79843a63d6c5db1dcbcc7244f3576556081432930f152f466495612315479a5c2ab3ba"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4ad9f71529be0829b7a89c58aec8bd34e251f6df8e50aa5c51c57ed1611d72faf1cb114a8ff12dde0ab838583541a2abb38109f82e248ca8522cf7c4b385153badf5140bf84bccebf88f549aab8ce6fc438dad7ddc87eb2797cb8e7cf3d46e7bce4c853edcb7f0ca2e7dbe94444a3fe45d01818197ddcc20803d91793cfc34f34eb07bdae151fb987f164bb27b5cdb7c6867f2340ef14b900af51c335e68185997174534acced5d97db67835c03ec2bea14c3806810155a1ce916ebd80ec112515baf25f600ceababd9e06069176619b4c1bcfe7f9c151fcad91b018dd9c5ca6536ec999a7387519c42bf71f3b088d915f5150d4b388349b310644a5dc834cf7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "72ae997b4a0bf2841fc14c64a0c44580607eda384aea73eaab998708b2b79b44815ceb2c907ee4c49c1f083574e3476fe1e3dcd2c581596af38ccff0676c2cb24df91535b22e49e8f0723238555c748675e80e4907261b943b167ece76e9d767b64585a1ff6054f09dd5e22dfc7f743d691704698e778b8c031df4464004f2ba03e642654051165c9bb7fc2a1c5ce3054a8579cfbc710bda13b7b2bb2f23e6eb7221fb51ef2404483e914075cc4a9f8eb91f247a600675a9411a6cdc516e5f8b9b4c9900086a3733ef932255235c4e5b4484f49bf9f5937d3d9e1d0ffad627ec0ff0aabe08a0b0197d430abe67929bc6bb1a96b907c34b2498bad0664b1eeda6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8d6ac89a1e6e7d09e463eff106d8817d50ac80e101df01329d64f6001c7b713ffb4a96159f4cafa5ffa0cea9bc6b1a25dcf6f01572666382e546c0da556da811b5fac121a200825964cc2e90e8147c846ed3a4cb4b25151e1c832e3fab42d140bcab9f17a247d1ef819db5e6decea280f44cb4db5ff24e56515317847b4849acb6e58c16beed80200b65305270859eef3c5bb2677dc318e5841092c21dde882a02b16071a5c951a7edab12e3df75f4c842bbc48f876eed02a7f3b878e13a213c18fb54bea46fe8e9e397817794ad24033188b1268c7ed4255376f7807f9491c6370a3eff6021861840ebeee2bf7dfc8bff45ec9b04db5099a586d44ca71d8876"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a613eb54af4df4410229cfd628f646ef26dfb7d610682d1187e9696d35fe5849cd9ec3d48f0b5b239628a08cebfe9c539c6828995beee9788f6aedfba31dae0c7b32221b4220cf5b0d53acf5d8de4d80cfdbd2366203a68b43a72bdfbfae12b96314fef915d1b6fcc645ca935385d23d66418d47d60fd4c7395afccac61c4a02df3b0edd3152c2e398556785e9c982f8bf55e2417e614ef694c17082e556b4a48ff9e7155021747b952011abb053dc09e487450cc7a8a02b7af672b776ea8561504b8b08e2e219919ba8cc7e24e605cd7ef856cf25f3d3391311415ee67dc369b52d676f425c773d72baf572b3f5829fc76925e3386cb770adaada942dc0a4ef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7104a754fb3341262f603e5695d700b35eee82e4ce5b5f82010f7b8d788cbe44230aa11289d739ab6478b7336772fe869eb5e702a6275a7c385b7488cafff3d7d8f6843229674a53bb6be30c84b3bf58c7591c7374fdfdf1f5fe8c948f7d472007e6c327d9f67f44622af44c55592946243275e5cae5f8ea8590d6efad7820a06181e8180cb2b9f5f0480fbb4e7ca32ae5265e019acc39b46d02e77e0f09426a2b211ca4420a970c805e61fde998d39b14a9ecddfc852efc8d52e669aa80405647330e284f87206e97d4db2e5f798f77a83043dcdbe76a9c876bbe7a14528bff82c35418a6fa6d93beda59bebf2ebc050adf7091df4a20b03ccf9cb335875868"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3a8591323375e715c95eac00397c45ae7728b9a4175f8d065e402c136e6b555c6ec86917f8d5406e620f8a9906fa244e472cdf2118e4667cc43a6b1c34c18347f2e8ff1a1b5c0d8151b3d9d43f973151fa320dd8b9535d4cde39aaa1924bf57cdc7fa5d4244fbf36689f54db18691700dd0be2e5a50e57b1627cd91e59666a60b40abc0cac8e784e361b35a2496b3e5edc88792044e271ad7784e22fdcf7f2e08a6b686eef758ad9c0848a2dfaaa7e7a28a33cdd43405ecc61c013fe6c84192d88798a1499c4a6c370bf8cf297164f4be0c42dea8a0ddb4742773975c6059d7ab59ab13d25c6850d2b55f86568721c777072ceada29685066e4f60e3066fdd6e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9736632040b7f03af98df385f0288f74a3f9ffe45a390853e3f1d1f413b95be56d5d979189790d954a22759a4c10dc9acc8f4fbcf67031d002bb8877071a579df75d34e5803fb8f084911487ff650d1449eddfb60d66cc1c3a0c8271c32f4b3b3f7e72dde31d52ff876dec63c5051fc89b257084a8830cc7e388deb38cf6de7f04413ceb274068374040d4091e8a72ccfeecef67fca6ea0bd652b273a883ca1d5637bbf25133cc09a3d9c992f5cba12bc132fbd9adb6ad1f89e9ad11178bbc7b08d0dd6d6329319eddc643fec21a5b17595296d69ca6ef8702b62d60b92bfddb7eb01bb23b204ec0fb27ae39794893681796fb16f47249493dcf199c8a2d74f4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7c26f8b91b43be4d09cf5ee7490a27ce7bedad4575fff6980a07bcef5cf783eeb57aa1863ade6ede8dc95d07c1a3d0841652b357be04556a549fd8234ede8f5e5083a3d4af273e3023f610029a0b3cf85a8a2f276e4f57251e2a6338d2ca0305a685dcb240f36c966dd0da783176313ef7c93ae6d13008099f846438ad2c9dcc0ec9f8c343cb3377d5d14ad23bb25b11c19a5bc460592591697e92ea088160f87c0418b0903bca2c7567dc76da84da000233c391f93b05e9e8f01b78639bf95bb21f74b7fe1c00b64ebace8458d292bef3acdbff89276702c547171d8aebd56dc24f98d832feaea03cd16e977b99382040f2ecc1ac45885c4f07dfbf9fe61d35"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4a4b7998d9282ad4b458b6b041da104e98f8252b711bd07b7900d4acd3cbc7b1c90cf78eba718c87b9b6ad94fb35566560d6d6be59e801862505e908ef42c934d085ea82fe47de6ae3efbbe1dfcbaf99005ef250ed6fb74c09095a031a30fd33e52a7e7d0b73736f3f7516ee96a08f61e3df85e174650bae50b4dc632698f6e7f1efd2bbf10464153ed4dba71757d2fc1966d3c80e0c555d252d9e9dcdf59534175feb7db6d9d17f30c82678d6ea680876c2ed71447f127dc3c75852dc0fdf0e1c17fd1bc38bcd25501f07a5c0dfcfe295f0be27cfe18a5c596960407623097cdad148e5043433bd4567951ded89d0bdd8528497b8525212b8affbcc976a50f6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6fb0241a3961a03138b8473f8bd3ec202979a98f07d325909a2e85a52167fc379ab164c4a03986edba638abf1f8817c1cb89f297387f2d5938e707aaa53eee6bbd6a9a7fe8b70a31373e675f443c902dc1d0dfcdfe4b3ea83cd575bffb04071220f1094b9a3e7cd04fabd70c0b8761231abebd3f4eda11f74f83d77a1a44e28432d05da33998419e5cafba0e81960963209379a51fa9c5c27649ec89f8a528ef0a885f055edf3f66ab1d4baf07a405b87678ed6d170ab890ded0e8ee90ca1ec0e9f6e5ac247e01009d6eb7101da6eded84339ca191bd6194e3b6bd8b094da788c1ae068d8ce7322fc7e22189e6cea7655b1ae690da05a0aae46466800ddd6f26"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9300a86600b600330a19b750ceedca9da6c96a99bbf65ab7dda6a5924d22a5fc9a2162e3375172fb38f62aa52a9fec71af1007ebdc5ce29b02163d9c55ead2141959eaea28f13c482be046d676770e02b71268d54d52839ddd929117e4857c9a6a17f92915d0acfef9bca2c40819ef58130eec1bd60359bb8f47ce67f0663086caf2281136b6076b20310203a9ac1b293c511a53e10ff880ffcb7184be60fad58586bc9a11fb51d7dcff71b401e42c1c7e92cacae3c50b62dfbea390c285c5feea91c288fb845401417fb01a09b3b6f0a1621df5c172632d40fb2936a7c2b62e989b848a06c098e69a333759d9ba2d270853f65daee1f7a81bdaf64af2347517"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "875b9204a6603968f50d6e4dc13d3192077a286c3475165b0bd160ff3df39fec5859a512886fc1e06916c2025e01ae2f7ab3b341b6372f819a625a42c22cdafce031d9635f95dd962a8f202b52f9925f07bc0c94434a2091d861729551e37d7c6019e16a47ce87f3f4051b8e9adf62444b522f522918c391d82940418cb3976f0c30634bc5dff2c4c3f36a4489d00c5ae65021b3bcf5abbef9257e3c976e5fd305fb30ccfe13c43fed64c371f8532dddc70a1f411cae257f37b6743da2d9567f9dc3513b267ee26e2da1a6ef005526fd90b6ecdfaed9a8d9e2bbdfae25b0adb81004501ff32fe1e7b7acfa18de5a1ab876705784181b1336288aefdc91186c3e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "305b0cb38db7ba5dd11c1d82195313b522f57ceb7b4045249dcf5977b99315f6708e9d8eaef6a89da0c11fa6f8dff3aa9050369cd520dd6e957226144fb68c846255b923a49ce896fed8828f8956d0d7aa5193123940ad0a5225e921ca0dc0852aae48507c7e22ca007f403bf0fcb6553d0af0bcce6be17eb53b0e8401349c8d144eb1ddbbf8215fc0e06d6adef096acf52d71978b1bffe95ffd21899256dc944fa9cfd4d7a25e62843f965d55515f6c45b22a825288773e25410582f62b9f1fdc1e0c6d4c941b90de7d8c3b18cd3eaf5319862d7ee160a5edba133cbc67024771817c7eda526c92d146e3b38b801025d01871c3efc2591a32ffaeb7b20e7dbc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "99647015158993892da3dcecb4fd837d0111d7ac81efac2e1bae2242e6605182ff1ed43e41b81b85448367815c6549e363a635b946ada99ca0118cc35f37872aca53b024aab1d809909d27bd664f32be9501c3d4b7e3539c2ef10bfc340a89c23cd2c25e51425e2e7f989076bb716057078c968632e0d47ec81192f37dd5dc4d8a0ffb5e9b828b08b47b350801bb4d358e91165444e8ce8bf5d59d4dae17202919f67c7ec8b78105e255d1714ead968b9c075c11e69b5478c3595756858a98e39f321957b6ddd63b37c69d34891beadfded732f0ba587fba6ca62b0e932acddb5c5a75ac316974dc3b5a27cefd81d799a8a6244a9a78fcbc403e6fb41e4f157c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "629e5afc04cc1f4c602f030755deeedb0a5f5c271b3d52556e81c44911296bcdad7f5d223cb6d72cf9740554bdde2936a7e3cbfad72a7704d27343240f68e2f598892911e50340c2c29a41c0d10ebb996c7e92a94fcd23a03507488be345ffd63db338b19e95d47a1095cb6894079865d299ac8101a443e6b5a9557acb9113552932108565d1d3409aa30b6c013c54bc571a08fe9f39c6a3ddaad948656bf77e7407cee8d74a037ca6860a466ad06082c39f9266f7ea16b62b5fc149a7d23093b5f7c48f81673574c8a68b75503c15ae7565775160e16d0e4035489179735c0c9736e52654d4c84c1a785f8b5a9ec2f42aecf88cd925dd274ceeec7e1d31ce4f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "829207379fc900183437b9794d8f7fe9ce67bf4dfb66b04c5e841575ff2ca607766acd6def23b5e22d25be703c0126be641d72f245bcdd60ca0fa8ace694fb8866ded8d5b572852ab899b5ed8808789167ffc699c242c7a6124f6aa6754b2b8c7e654f14aca2446a40f64030b0d836562ea9fd44adb75d235f1b7ea86048b4094aef96f0cd76c31ce25788aa9fae68c1062ae48c9a6b9130652b50be2f98ba64c89a987c0e566ba74bd3616f79567bbdd867f0081e97d0fbc948b6819f46561281061a413b4f3f43d5eb4174052055745d950caa95c320c4c7fc5e02f604071bcc361c20d72dd5509aa496a9bf1d497b61a064893880e052957353b2fab31476"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "615fd599966ab4eb5d30e60eb0fd82ceff2eb244b4888442ed7f6a1f32005ec8818cfbe3e6f4ed7bf9d51775635307e281ece422219059736e938931dcb7fa1c0aed81808d39ec396acf70766e918f017fd41209972ccc55c1e31c84eb217a2d82dfd84499c4499cf0362ea60c40439c3d47e8a05128fcb5f445f08f5d92a29df6824d7c8bc735941ce54f464e44f2bcc6eb3619248bb52d04da149a5f9cbd9cf617257dc95a152681656f537a2e2053170cb2114dff07737872703914144acfa7f26b148c59258ef72e2061dea6c035853a6be96063dc05109ec7f2176a4d601c41caa637eebe907b248922c6fda83bb7e9481ea500576144355dbc98779944"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "249c65c65a3334eb4be16dcc3db0732547ded2ce4ae6c10b1e1a0f474298b2ce230c59e7e746ffa173d5dad3b16dd4325e5469daf6ffec2af4ea23db279601b014b54fbcfb3578b078a8ec53121038ad666ac9408d65e8ff4570aa3b5747041f4c3a45a0e9856f2ed04b3c2060925a5c77314f7bfb5c85a71155df5b23f694a9caaac2fb11dc6612bac680d7494ee19bd4945ee82c5d1f5acdf6b5ab46e937a90bc4d6d3f301373026edeee725da4ba5202e1896b716bd8c69ddb95fb364d697fc596709b0ec48bc66041df7127aed311110545c4aafd228ff55986781780455241830397f8fb6764e33d0262aa65814521ec71890700a093f50db4659cc5e2c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2c59c0f5bf7fa3b6bda22a75dfc3ba14c26ff3e7ad24c1527ee7ab7c032dbfda6ea5171d88df2de56c1ad6d955dc41bcb8395e83518e40b840c062cfe982c0e42065d7e2a9bcbf91dee53949bb6f67c99d1e1fc44cda982a3df171f9c35424efb2f6c0cc169a44b6e5015df5150796a9c669515aaae57076bb1fbc9480a8ca6954990612eb0314da7efea7d14223081618f2225ce3ce43770d457e84b54a80cb3a35f14c511a2fa2a4d295afa6ed3996d47b5a0c6b1d7c11ab14bbff13af67b7475ac543307626598d69557255bb3a92c07e36c3e9d1530b21284b3d5c2066057035bc753894c01e0f33764b51ca3319ef32d4288d11c7a1767ed7ed89433216"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "31e48e30de0cf259d0273991b633da6228289d540d84c527d5f12a13d2d6fd489b1ee282ff5261eeffb8e1c716572b207eb59c1dcf04bf9d4a9ca92feccf318254aba5fbe1df1dc6e3101f2ccd0cf329d23cfd9fa19c2acfc98c319be1c4d9831e86343513769e4dded967f512d5371ee845e47544c303d52ebeaae15e139eb2606989268b1ab641c44efd8b1ee3a5fea73907cafd4322c00d666d3d0e11ebebae763b0bc4948acb034eeec91ba2b90cb40218f8c8f4653338eef0a4d31e3dbd29a3d90b9a11c8fd8e613ccbec221799fc2d98625215ad28ed9b7c38eff27c44fc5cfd408a6ef1c7af90465cd4b5aa424c48604e2d72bc10d9ddfafc30129a42"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "300282f3e571048e6a298d3b1d979961d17e5f460510227aecd83d7e8b3e21c76a1a304bf464dcbaaaa3e134bc5b25ecb745b78829fe5d7590c1c799bd613ccb8e1e55ed89abc0fc663599e77ea87515c2446091cffa063d6b2df5e3c623da69bcdfd9da5176356f76b05c98413d762cbe0f47ab6d470eaa8dac88dd55890a8c386d5ba195bba8751af133a24d204b7e7077e7a9268cb9dd7021d9348f12dcb46f145a19f0b408e2563d5487281db1c2807908ddd125db751b735adaed2f8e8cb55ea470a45383e2991b80ae0126f93555908a9154c1633c820e8942d4c37c807ac6a94507a3b9e1f95ae5a712cb7740180eb4e56c15d4e1829fbee2bb1e642a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7705d76a011d696708921967a9e86166528d77c656946a5ab0e157a78073f4b2f2785a1feef6efd8d337a22a8ef59c6e710e984844498f0ae0c1f61b5d7057d09e3fed79922d492302e28c0c0401100049ccb68fab95feceff0acc24a913840290b27477b295f942ba232e6ec76d112632c9f02f9d40505323d81f4ff1bea14f42d6743a3c2867df273f80274fefbb20346c3f1cf0c2f87b55e8de277a8b2f4ab8006346dc8ceaaaf0d4af382337952e3c55cadab336da343723bda0ec0272ad6251995d58764679135c1a20098e9c3df54f161bb16bce5a600a075b36022f224ad5b4c7dda09bd94bc7eda7a853d96b5100e5af8fa2dc1a6964e4e1fdceb826"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1d35c1575269b1ca4e071f2fa19ae31388f4cfbc7875449b2027984d2b363bb2c77c80819725e03ce9f3db97cf939b07895c55b93cfbb204a3b036dcb69470e9e99a5584195ac3dd24214758a82f354338e50c69f3a5de6cc0920b845550fcf104b397ab4b4add6659efd34f64b9b673e73662ef5fced6e7737147e41b48e36410eece6db65f5803b16d33c25cde6bcaeda8930e7635656d9174d179c74f5df33b08d5b90e866624180f0a03fc6a94a8c40731658a5d90a071c6f77e460c6ae1e6d6350869db442219bf3730cdf3e74ee102d6579fab4892e8e410f06bd4cc19d776c47ffe667071fa437c80452950df7e12d909e0d2f7494a8500e1bba86435"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5cf9db664d1baa241293db08ee7c8d4cb7cfd374d9c4e0a4fe3c81fee279be9f0452e6545a01ad3adace3d0843ccc26826d446c9bbcde6dfce30fcdcdfcae415b6771cce7f1d7505c07969a8abafb200828aff641d0c07cdc4a9621c6d0ac607f950ee0652c138b4b48f724a632c8345b2919abc24fce3d815f82b99026f258a6d2cae1fb767a3d20591aab866640b4fe821e010e19db0d696a513db246ba42603b302c64f17c0296414dbc14a41726254d333f1dfcf29f55fe22a576eb6bdc65c7d0204d22001e858abb48069f65f7c1d8e8e84365429c01c048d4319765de14c48e68a4f7c898598597677b294d71fa2b5278a0a9eb52bb627c118a5bf2163"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a15fd53bf93274aba318e4f37dfabd414a47c27631f0c779bc8cc1223621730380817ccf1147a18b778481c64c48edad0815988e6942199d0b0599a1e33636f7e83e6addd65d87e53d734357b5d2111231cafd3a4e40845073ae50d4506f37d671b184246ce15a77f36f554607f016e7f7806e5099cb2a69ab4127c893f28cd8fb8989863e787151cdbdfc9e0be0b3235b1057a39e656ea482aae6d7c3aa08bd06fd38bc0f9b21240233624ba5c767b5f3f48c7fe365ea1552c5a9e64934869974ed2555ae81f9d5cd20f48579f238de1e150fdac4b321a05938638b81f0b7292a61e12528b077949f7ab3e6f8e1f78be81da0602fb30b47f569f7290cef3366"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8db939e248a2140b770acfdbe16ea6153d968ef51c56b024dd1ec56cd600ad79172a14f6253d0a9bdffe9ad10b6ebf57eab8528474fa96a06c9284e5fe08c48dad5520730cd182dcf1bac660ce3411c7cb68686b3b91c5a55b8627130f0e31cf340298117b3a0b358a42e9deaba700f8d2dbc934236cf81c0c4d15017602e82545e1eaf9d31e4e8ee51d35054f3b05b7a7cd121854a0661ca19706ae95cdb0582cde723e389d58579d02c679f8d287a2d0ea51f442df0641682458ac6590b3df77230273eb779ae4b827c09075c7163b993eae72ec0596c2adafc8e20201e21eda1f4a13c27dd9ca7b3bdae47707b362912979357aa587ea2d86c9c2c2587ac7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0c985f857ac4219bbf98f767f42c7e0ba886889a0a7612a3e7d7c8bad581250aa7ec8a71567490d0c509a6b927b8ad714107e7248ecd5f1ead25828707072c87913e7cb765fce62d175c4335d09d764bc5322648e53a73eea7f55371a9a73a5283500e0d1bea254d217fcccf917d5e0f28b987e9a16d11361dde37d699edc524714122333d897279eefd79274c095c2d6c9683673318e7f3536296c6be23837d69e7222683004d7e52b017e61a27c5ff3c8bd4ccd8622a52de0d24baaff3c43116e4f043ab30cf8549dcccab4905f458ab7761792e7655c6a66eba7668e4b731c62ecfabefbc31a1cc8b3e8f1a69cdf9c8f7825ef266d9c7e34710f6af936670"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9957846928b38e0fb520a2786df5307373a096bdee5c5605500791321564ab48283a682cac388bebab9212a6429f9e03519f4f830719df9b313d62f2c46b78eb936b3ad13f3e6ce3429181678359ef6392e68bab0aaaf925721c6f991d989fe1a6edac5be9faad908b0ffb9b0b0b5e32cb6080bc9007a5da47fee8e343803bcccd4352f284df0e418bf6c8317b6ffcd7b4d9e82a911d654f0344b28f39f55ba9f1955d7976ca153059d5de7bad54e21d49bcddf8051a53e4ae496759504eda1ea3ca3bca7f6d47821440850bf44b2ac43d4afc1620b150b77f288af03b41c4d32977f726a91c80cb5c37177bddcd5fc5e206c4284537d8eb740f3285ef1a62de"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2d99760b2853ce20a37f51045006ed11d83b250d54da4122e200179a564a296292479116406d69b858cf15b8575bfe9df9832e484ca8fe4f0a24bf62aa350194ed642c68bb074e70790d7e18209b23dbdef6756f037a3391e6bf841f7b6dc763547565fee7e9416e62504df61cbc00cc2ba5907261e4e39bf9337e7a15594732f08ce136f37752a585e286c001424351f30a9bd585e3c2e2d99a6c91f3ff3081194b24f6bed3864b36b14d1ff3a05b584e06a994df9dceda839ac788d08d608009681db0aa23931d8f4a3aa1b1f93b6851a7899723e858eedeae4d25394bb7954bdffb975a3a1e4d46339a0e25f8e85958b006cc5f0d5b60c9fad1a829e81342"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3e0270e701eebc757862ec646322ab99511bd27d1351bbc3ab0584e218dbed9952a9074ebb7c5fb8f846a0f5d90dc1040e2c45914c86ae0b722f1fb95f7621b986136d7656a2a4300df494c0235166e51e3c9e9fb98bfb4604d4838adecd5c55300332ae0e141eebb328524f1fd95adfcb9ff7fabd203e89775f94a2e84ecc5efc0d9626920ca8a13154dd0e97f2527d6d518e6d460299cca0db870b0834d5b99e464760c390768e97c091708887244833117afa89baea5c1641b88d45bb9d711bdbd559af73bbc8eb91ef377a0140cd639fb7e8024dd3c48ddad6e37e31ed0a3fbc47a6c28b5fa3df0f38a912a4fa2895c2e25f0cab70bc5e660f725fe22da2"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a781bb3225276cce1858b9f9316f6dc40abdabda8119931faddc5a871b5ae9c7c68fb1151d9cf477a66e4a13a6c3f114087bbbf219beb524e308a91fa88411d450053605f9f00bf28a146c10b825ac3205174ec57675035c8cc2c9f411fa1df596d1e33a7da0afce271c6b456c665c430cb619c971d60754afcbab103ca02aae079b3803492109ce37c800051ead6d47a4e0c30b8cc147c66d5eac20399249af4082e70c7d5556d2b0d46508e2e1fb805b6ded365c2f0d20f33315a8d49f62896ade6e0ac9187e186a73e5146cf8da9821c2e5fc5ad4ff0b28347322c09da2dbb196120762093ce33fdb53d8a9579c13fef218a62a834d5fabf53e1ca8a751b6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5032da548bf0168a4b3b3f99c144e3e13ce14b7d539e397f37847ffa8db34a0dfc0d73d30e6e3f2a23f0ac92bc5643af1adaddf9dea73c688ea98364c1e610835b62f1ea602589fd44a8a2cc73b00cebc75c212228b508634137c1eed7a942c18bc6ed4bd0ffd39961f54bd4455155c08a304c2e05d78950e42e92275b2f02df29ec2b2523bf97511a0ea3126c1012ce9683e175a45f7ee24a721707b7b7534ba8441633faf9953cf120dd6a13c8d88cce5e0b374ad2a3366f1e96f823128bfe6b830345e94d611e1d923620a57db4ae51e5d17b5d8a0eb4acea8377cac9b35553b7464e40190f40cfabef9bfd393d0f87e6e5bb08775d9d4768e8f2f0cc4a24"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "489a6107f0052ef49f97222aa666c8025f2a30eb4bda5f47c888d256dc742094b2b03aea0b087d3f27e6df02fda958780626512441910fb83a7e4412a3aaac388933798922f6a4dbd48b851680d1f3f84e39fd30716921f99b87945001d26955ad33ff1047b5771869a6f1519906e461a7a50d8fd08d67a9f9fc272699e7cbc30a12aa8601fbab4884878a371b3c1b00054e9e585df1e2a084ff3f6a3be5f3e32cc6295939c1cdcd9b3aba7e58ec73dedf0caf5d3f5618c6909435823140b29635ccc13f658f1339fb2a3b21e1919be181c15edaf1cb6feb142464e6eb4dd18b9633f55fcf370b6c0643d6710b875df63a6220ce340a97987e577aad0fab4eeb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "41858f3edb8f7fde81575c399fd90c01162e6017d0c03b5c68167fcb668790d054b40d4d2438daa0411034ddbea901ab1924248185dfee64d5944486530fb407cf967d171110ba8acf00d1dfcc6c7a330f5f828fea17a9168e083f8e118857d29baa32351dd284a2efa0672ccc3d0e917818663cdda0e5dac638ae150c308b8737a50cc9f17a595800ae925930319cfbff91c02535d3d35d3256591094a38b3dd10af4f51c2eaee0f8bce27aff7819e22a2191019e419f4e45fba1272d104e0c278654ff6a21b9506ea4317832e7767f46d97c64e0041c767ac1ef88f3ded74fca09bcba82b519fa7716a9f7c4a2b78931f6805b4f914f6e6bd0a3adbde2a88f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b1771079fca7ad8ba3698a9cdf7bb5309d55ec40500fc83424f1469c9fb77ed08082b5ad1e66890b51465763d1deeadecfaf9c8efaabadae7f7fec17589271ac920cfd1cb32135fca21ead942ba15f09a38414a796f67a5cb29f877caa6ff8e1c71755fedc58485dd9d4d62455c7a8b2ca2d1906e8045e60f681c39a0a162dfd63a9fdab5954352515a926324dfe252aa1a1e576b4dab1588b08344aa40f406f6352317055a8feb9292b9611c90d417b0bd42fa7e4a4b82c63885423283ae4b2467fba84c34c391339a5a3154d70d9543401cd260e9db236b1f96e705fd9704fe557a53397ff99d74d9d97847247e15ed410aecc0f74bd7bdebded30e34d3412"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "9464a738ad70b16f8621a806e95d4d2cb1866383dd6c0d61ee85bda1ac8b56c3833373257daff4d360b1c366c10938929a8ca0819ff929311346501c67aac447500b2fe5b812d7cbf93db5e5631cbff3c498461fb446eb0f25c881043b2339b13c373012d7546b9b194d45b9aff2283d7074f6119420bb6442af9116236b91ef37f5abca8aa9eab2b0ebd44d3bd302ab51a67e1d9433dedeb1bca87edce75d02ef149dc5784e1772c9ce846c17e4f7ccebbc908c46cd062e0e4bca76a033125a407919f7862a6ecef7f6bdc279fe65ab938be35858c98956c95c396b15d2a17c1c2ac996b5bf0fc345321fff7dfc44fa4b0b858db0f556de1d477a85a19f1856"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "06d0a8d9247e6e39a8e09e7f8db128c23225d88e831068cb3187a6cf657d709710c129f688c3b1560448986e1f9e83a56e9053e7e7ec86f61c597d3713ba8326f7ac0098fb51a49ee64e306c249a09533f464a59f2e5ebb3fc85da8be6a60ad076e8091774cdce2742d5f9112d8089fa8e3071283e2bb7b6869f3c44d6dd9803ce6e467bcc8122d1e96832d05033f7ccdbd6bbd0666bbcf41ee1aa077454d0e136b725e7fe0057b2e5bca0d9a645cb50a67ea0b98e7c0c60a91c5b5098638a3027bba417ddf5ef968ab5d1695fe3c2b1fcc664624a783cb5ed2c6261e0627a26f351d8d2eb055098a2b8540791c2e763ef27086b1f7cee54837514790defed29"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b06563b316ee2d9a41adc5a99748b373538f15a44c3c9227e46ec05f99bcb14f4316110b1d1a82709dfa57e6a81dff1f3f692d27a96ca51f44e7b9fac9d2d87eebadab0a2d4b8d90427af8797ec5819dd451787ea741023f2e208ebe8542dd95f4b24cd86937bba642ce66851a782588fb2bb9e2d8fc9cbcd20b79f758537799740fde8e1a8ac4888abc363feb341758160f0d21498eb754e5189fc556448621a4dc095a47ba5b2759315beb9430ccab5deaee086cc87ade1cb243a8f4d9c63bc80f200dfdbfba9624e6084046e05dbbbb836ef5e4b0a06a8a26578faf21eb155cf0adca6b72817dac6c3c992a80c708137422b015196169bed668cbe78a9792"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8848be6a99395116fcb45143dabbf7f8a95b800c269af5a986430190d9834502a37839afb083b66a96713159ec17e66cdee5e4110d0f9c9c17697f38af177b93b17c0fead88ff2dc53a0b5c502f96c4f3d402c623dd81408b06426bf6ff7d602ccc8eb21db91c6c0d614d108703ed32026de99e1a5c411edd7c6a66976faa57cf022a34111d791f0e469080c7eeb84999e0e9040def04df707fcc937095993f1a8bfa889c45127feb9de274bbf08a805d32f4830b4c5078b65a9340bcb9b74b9368c02af63d2b3481da5f57eda94ac2e5255d3b72bd1a19e45edcab46a119736d7e2508111a0838d1e6fd5bba4eb67ef697976f3cce044d29c6d8d76c2d92e1d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0baac664f223ae40e336ad610b804b5997397b46a4a2905de1287481aa43a5bf059271b6a3ec648faec7345823aacf1bcbf09189b9dd349bfdaa979df8fa78fb199fb7c69fe824f83f83d566ff49e2ea28c704de66f187e3a42e90663423bdd0c8b67dad4e92cbba14a1ccc1810a43d116347ee7ec21ff9a8324a4c110e661092426769a443627ddaf25ea4d144427993a2e82e0b15f20936dfc2405da8ab5a6232b9552f175331e220337f22008033910dde7bdfe87b2f7f3b4847e665da5e03dbdb866b05d92c5ba490bf5a75903aaff4f657bf734d284081f52d81e6bfb040dfd6811bae2b73831ca3709b6044134200c700f2946f234f946a69886be2bb3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2394109f99286c6d9cf82b46d1015a086f826e3725998819ef5e1d99e504df76a7dca903360567cc58d6bc327e90d7555d646f42f7c452777071b3e6be8ef1a97c0b33fa50709806d83fb3b8acf656067050708ee080af5a85aa2ca3f871324759d06d9a019b8314c66c15cb0c314d807026515d46e2163a19e89a7808af30a71acea51f92dc5e39d237eabdcfd46abe7cb8af5a47bd352cd5b1d0dda6fbc6fa5dd19b3051ad13ebe75462080bb3b7f23b013085e6f6010819494b5b303c279c2cafd1595831daa558624ef42a46a4621b6374cdb2113ec5d8e8a3661e19814b60b5394d9305c7d02073a7d930ba9bd912cf72efac5feabb8e69f34b74ef7775"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4469b8e895fb4340328360414352059a4b701d2c21cc2125d91f5025b7b22ae7ba840123ef45ba9c8c27a8a34a74f010a4fdd6be9474ac270501bd96a602afb05df7becdcaefb29df9be5d090af6869a4311fe94b70bcc0c5633d69169ca038b2fcb2a4abe60c0b542b308527781d184d06966632d7404da5e3494d76bc72e9f87d006950e7a4388334f99e212d5f253c11fa8361179be7bc927d9437ed11b7685529e832162e41a72ba3106b9af7acf5fef70178fd83ce3598683ad61c27cd1d69b437dfdf93ac43a1876d594e0eb8523a0ef8f75ccf1ab079d4538bbb726d04f45ec864b04f57c18cd6984f1a3a08a7c3944c6946c3c3e090f9d833c5d3d81"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "50a22bcb4b87ca221a77a31b676101cdf3ac4fdb41a6c17fcfaf62352e036bc7cc7e19e07f929da6529ba390d4c71d0eb8ae6cb64651156120c4886b34a146a47311897a2544e6ad96feefcd21edd7deaf2ed45ffd433b2704bac651140cec87c9fdce69e1b21ad75288af67e3e82ebfc38f750f68d76f79b4103c897a26d64e2153ad19a3b26d1d726203985de4b685b7987ca9748fdc1394fb57af67f261166cdf9ae2df7a85a7e486f67424db68292de83bfe9823c84e22ed29ff05b56955dd15adf223927f71a9443163facd531c1e9cdfe0e5ca1f13e6ba50f7070f4725e58ec76b53f0fe18d89c6042885b0ac441977158c4fd9d956cf3ed1a39661c45"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6e3aaa1f1d8c661f02cb5ddf2c213dd3dd1781752a11528dca806f23d8652da37aaca30adae3b8baa57abc9f9080c8be53c851c47e0597e04a63b8ea246d83cebfc668ac8b817acf442e2183855d7732fc5a57534c64e4e5eabdf7f3ab347b33930ec815968932a22753b5283bc055bf1e8e4660235879bf907a80ea6e610ddf907f24d4977722a77fb56023046beabfc196863ba3d194a0ad65a84d716acf1ca301365f47f68c81fa70b58d2a581ac2ca7f2093b4d5d5bf328c2c3903261692fab8c537a50644b28363d1d9b295a89d3d5a175c81ea1d94faa9e0b32da62bd6a9727c2399fb5fb4a8be239163e8aa129467870ad54c305780b76f60fe43aa56"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "26fa8cf7af569c2822cabe48f61d0a725c677520f049f3bb6545983b0393380c6d797f47bbe586371757b12ad2edf066455b6d669fafbffeca4f8976e01c3635241bb31a091f608df69e7a4fda3919bd38e2b4d2497d7e3ff55563a2c18d39019cb85a5a3ff1113c083cbcfa1fc59c6585ce7e8d40f5b2b79831285f7ac420ac2a9155aa15403f33c10b5a4f9449b1b7e8fbc7fe7d4fb647c19c312273026543b88f6bf6e8712ee5d757f9446f012551f6b9c5d9d20900fb84ff2d19c45e36a2823855e5ba4eec814f8405179606a2c152107eb9f0a655252f28d500fb1a2c60c2ee9bca94a7b121f96caa59e7feb3b4cdf6ff89d8d616f50fb2971ebec970b5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "64ed62db69a8e5d33630cd6006d25bde415234199f7d069dde904949c952fa0a83b49892703b6fa68143e0a7d115cbca5d3aacc0272c1bb54ba657b4d5d7c48cb5f204439cd677f2f3721acd1cb721738a47c5c88536dde522a42f7a4153b36f98583cd3ddd5189f317fc670b19fba8fb785e8522b898fa3c95de60990c5ed3c773ad51f73d9b2ea9e57f99f3009fd6e428ac5e790f06b9a2c14f63b3e7e251a8e4866e9225c1407b66d52753fe7f1a2517d7a4725727ea02241605321d2d6021b3bcc16ecc7abf7b6e74a3ddcd92f943b343eddd77a3b7530f451ffd7e2a112876c20bc250da515157ce5b037b68b7f610983d77c1e042ac9cce0712954a885"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ad31e316059ef9533f8f6a5aee91fc316fd7de2ac1b3670fd5d97af17948aaa934a4f0678ae85f82a74c9ef459675ce352183b4daa3a49462af116509f120fbe02e14c2de7d0f790fd211228e491b8f06f0d0d1978036bd75c573037c43935991cd75c8518825d64bc309014a36a5497abda965ea1b1fb67bfe672f0e0de983bb1e83054d089f3fe5a1f531c497ad89eaa03bcbc7566d2c64d4929e24a3b4227acb540c9065454b842957b8db45e52f4f29292ed7185ad32a1a8ba420ee21987262b83e06d62ff2d3a21c20cfbe629c68ba2f6691181b4200d2f960dada8fd309a7363f1958873d16a87767049bed08e465450ecb234547b9a4e570b7eda81ff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a38dcc4e8070333703ce26a8b1eaa28d242bd5ff4854fad67959caae66db5e6654aaabf81eaf31441b8c5e7419a3ea5b04efdea91fd1910b5e5c6f02ff77b7cf42b2efc55b03407363069b8dd031c56d6d0ac54838760d7ecf9f3dc03828b27a73b827f394700558f160c196503855c255332efea838098e637cd1c7eea9e687fc552b5422a62f6c6b49fb16ad56509dca5a9148ed9883f1d76453f8d607d9fdb7589f4b07eecdecca950e58ccfb9e7784db9592b6406691a413caef5e994ca06f21fe61f0986644be041878429d721e403ba6ad8dd8629eb78cf4fcac5cc42ec03d51ab64c051cba22b5cd4b160aaef28646b5776a19605cbed694e0d6310c5"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3cba108ad11cc9c6cfb4b849b1533c37557dd1ef2e201a78da42e164458ac54a29f0b11b1931e72f57266264584c13e910267e52bbcf15883e109a45ce14a86ac8e700cb04ea0ccccb55b01ce699275190b98c77981d2734d35d8ad41f94edc6481cc831a44d38a617a32855df03fcc44914e55b88271015c971bbf051d878b3ae7a8f53582ac8e2ab5d10e5023e67599725e9122b8ec42a96b40410edac51b26bec597b727404a6b1b24807e3df2fca8847de8b7517061edb009a40c8b3aa82cb22de080d3f7921c504965d5a23887ddb54100bc81894991c1ace0ee2afd1c38c554fd00ade0240c2067f01977326916d1708af027453f734b0a22331bc9453"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "69c99cb5b397c6f9fa0f38b0d311f8b64eca97b578302912208bdae5c04244da7cae594e59a6bc0935b8878b7a55b90acbe73ed2adfabbe561cf104d2a60aae3c4fb58cb69a11ed739dea095c224c98bb0fcbddd44d4e1e4b71a8681730c4605d93a93e40e27e6b1182c57fe5f4332898872add7e2e7c3b39e0b45d07ad7cf3c90ea5bdad70902533ce78130c74ded898cad1d1830414951f33ecc0119ae785722d1d4320781178f393ca1fd11dd96da6f44bc586fb4b5a911fdfbb87b7d88833a9a1e036405e205013e2bea23e663dbb2fa813f1d8420f1c57b25dc5bc09fd7dcf99d0dd4a5b3bba8ff2cfddf2f9aa9ea78b8f4132cf0f373157b97097fdffc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "278b61e00fe4e47bfde76cf6c436bfa0e7fed104493a2457ba41ba5fa430cd417ba2ffd345b27d739f6fe7b414e9498e1e44a0a5af8af2f9091f4b42470da0cf09fd1d3542f8a991f4a3be0ac6fb499290889a0e5ba595ca1ed9d97f4407dee17867ca650a49e42c701e3429a34a8bd8e934aa8d107f1761a6fe774c70a974c4ba30990b55a082c87f39266b526c13c4021918196797336e49de36844c908234def2f66aa82e84715834019cbb906011d8bdb29afcbb31dc7503ede0bc39124ac7fe054536d4d79d99186542454253f94a604559a6e992116230c7c9ce4137308b8a091f31843a87e39e29c4ce1520803beeff3fc668741cf504754bc870908d"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8daf99c4f0ddc3b0eaa50d674076e2806d744bda24522938c6e4ee2970a5079586d866f0c1abe824b16d40bfe0239aebbecbf67a9155b2855da4656a15d23fc3f1d3518567deec75587d7ea77d3b510b9dd2b1672c8d4774860535f8690a286ea8da3636a1b65f38689b25e9e9b0ddadfb52a0c60ac90b376af968fc654387b5d712f93cfcad8f571ae550072d42b77e439cf28ab0b5857646b4bf2f7b57af7f0443944943828ad174780e1ac0d182fa92cf992991f8fcf2a9d5fcf72eff4ec1847c30f268092b87825fd5931e5306955fe0457e1b9f7162683218f6a9abe5213442a7f8f6a5f4dfbc6084b1bc01f11558fb314a0f07b86b0c6538cd3c7d2fb9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a9648dacee46c926af22555c2d4784f01f3565949f177f5cfd4c31659186645d115d4a24dfbca04b583ce8f0c1e452a953fb081fddfd61b9ad9e59df2d52be9a6ac1ecfb58c211a8182f93093ff4f14f5e729e15dc0690aa612a09dee2ec44ec05f75ddfbc0b5a88e93e098cb8b0f7b74a3dd07ec559f964962f83fdb95ed913f2603ee50b36482e8a379522d12c620af2b0ac7537a95417df11430a72f72c0ab16babd7396e0c348f033026dc7239e2a61fe75b8ad4ba4ed154bf05cbfec5260f1e4f2cc0bf5f39542e12a3cc8e490c20a554d3b9afe73ac65c0a4c22bd9349ac39ee25d0feac57b6d5e065d82a757fd1fea928a4e741aa8ca724269415c1e9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7d2652c6ffce45a2fc4d740db90e1e87795e38dd5f58d3905b9fd41a2a49f3b6c3c14db49f8378fac35cb67b3593a0991ed4c2439cb7890ef727b94833e455edb94b11c2b0cd7bf5c11f8a206e62f540928f873fc6c6b0ea4e520e85f01140d21ff2ed65945e602e09d6880c275fb9cb0cb9cf7a85dfec032f29d5bbb4303256c0cd02a99a3433186558b0ee9bbd93e5e2a89c9ac2b8f74b94e0d9b02438d1bb54dde5424893683f5e74d9acd1424456a55f74d0654b20f55d199d17d5b3184930d5f95068f61c6d1ca4b0e75f01d56fddeb13a9fc07e185b514ec05bc657f97e1ed7c25670a1ed4e16172ed2c19c7521914dd3001d23219c8b578c566eb2c1b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6bbfb1ef162a8cc8c140dbcc73e922e1b25c0a5f29e59b879315e5336697f86dcffa1f26c435ef3f38657a501e1a3dca7dea9226ae179eb6e7b4604c4a984da95421676c0a1d5b5ceeedcb02def8ca2e90f657b257695e7f87aa948c7d54570540657f8b79f3622347d4c3aaeb8c8c72abb45a156b7facb3ec3c4abaaed5491b84263ec9614a08dd4ad2fc81682e11d834c328ab21bf6af4f25cf26b81032ef1aac9edbd1879b64e04a24f36f6bbd1b317a58fbfe6657a4450deb0b07386be1e4c9f692d6e96740e300905fe7ab3f48ffa279b581b98afeed03243779127fe57d97d7313ee6b2ffbb5ec7e2bfe5d1509b9e8a794cc3cf45ef488874c3e494214"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "681e2eb5134130900a52086c86aa16e20c7b95e7cfde30607e84e467fc67797d01674240cdb189aee160f8574f773095200c66c96507524f612e0d00adc1b4edf4c5f6c3e499a0bcb892e917c01c2c0ab9bafb6ad219ecf4030f6aac5253cfde1c1e71f1a7c1de03e65f9751d3ecdc09e4b499a96f9fb22da50a8ee8f4d62c9b67281848824d787c40fed31dc0036577e17c2d9a43cf7170c52ae92311725599d51957364da73424464d63c0edb55e79361f7798dd61d0c4068e4d0821ce80e27054459e9ec3fc0f202e9a30f4ad01747c6ee854b1f3615059d4bcce267a857287e7a9cc6058836af04d9f8d9b4adde905bb455901418e2aea9659c65aca0cf8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "2021ef89c0db9b47dde3df73014ec88ad9d33575e64ff6cbd46201b45811b15f197594de8e35c26139be07132600cd48459e0439b93c2fe734337c914fa87c3913887275ab41aae8a70d60c1690ddacab4711ca0f1949fec70a7173c39116992c051c5802d1c1f005cda7f5b1dd61a8ebabb27563313f6d25347654c64437165590e29e78dc0bfd5491d02d6ed45a0f2ad58c46367670876050ab385f7af6e9f9bb06b279e360519d047296ca055429935b0a96d6b1d6ad1e77c130bd99db29531b0bb6a6abf3bbe1156217a94d137a76736cad06e5d53b9671204a49d54bf5371b8a3d7bbaaffe7871dc8c4ae8165c70bf14dc6ffce5ad74450a564f21f59af"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b298cddbcc889842ade9fc8a116492416b2fbb01b3f414e0dacb2a17d386dc26b1c046192f70ebcba7475445c7794e137afbf0c252077272b645a91b9cfd8312a83d75a696c777b762d832272c544ae96be8e28ae5a639e7581b1bb1c395e693c0cbfdb0f2706e2b93134aaeba76de19674c6a0317eed9b06119fd3025a3141e06211047468e9a59fb8932dee92db824b4f3a8a11ef4bd0b3a015d861ebae48f842203a79a66395da42a4b2f943b51c8824eadc11cbbfb34c4a82c553f83341cdffd8256871ee06f160852ec6b0e7a79c1f06aeaa474efe6309f7caeb4a26fb33364737496f233ee6fafa5e13dde525fa414078271cc439fe5ad0a52fa6401ee"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "202c2fa04697b4c4f5b9889e67c90e597c403fc7b97bf43f3b7fd9bf648bc13db56f02aa517cc5b8b79ff90529528304c877a081a634de4007cafd341cdc19152f5d117a422b5e2df3f4368f0aeaeba2e242823422e3a3e896474edbc636b491baf44e032d5f671f45f599761530b18efa0300d56f0f141b22f0ba9a8187dc771b1575ddac950948cbc7d043c1686e4ae22d093ce4650a99d88752a2748285e935d46ea3a69e84338e1afd57fadc2fabc1dded35706759af7ff32b9f75664f50ffe23700dc46eadece6c5ce271208326f9342e7a63c852463a156edfca011df3a1889ce94fe8be66b125c80540de3aade0dc8bc1baa3f33a892cdd6099560562"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "49a336a5a98444fb1617e4dbbec502ca47a888aa84ca700c5909da12a4ae44f8831d2e42fe711c5909533885837ef60be1f37acc7a9a2023d63f0f5252473568aca337f672983058c35df36c4880b17ad15b5e2c1b289ca30e9af9566b5844a30685d59430f4f399188a22fbdd9a892415a7c169cedb52ff274b5eeb25a0f1f33e327a077a98342ace7227710a3db891f579315cf772dfaa142612f5bdb612fc31d940cbe338e6fbdee76ee31fb6471215f176d2f3c884bdb5f55444adf0fa6ad4015b25f494fbdb5a2bd7622b2b9f77b84c7e37e5df8ee553db37cd07e1f0c8003184e3f6404efe27341f41ee9c44f5acb09606ea686fd79108c9d6970ff80a"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ae3857a0e8604a5e8bf4e70aa110a9973da8d78853525b265e9189e7a495ddd200c9773c2b733a50f2e748224966ea27c2b87d9d15355a9b65ad02cd04539cf92f257030ba50e63269c5586a6103ca8abbc3c30fa9d232737d42af86a598ce4c8c591c70c3af322a29397a17c7dea43fb7354f8bad1c14e63b9e84909dec485e17e4331921d091bfe604d5aaf14b014ccec2ef23ba477cd8cda620d1c44f5d9c2e67f96f0a9920ea866cba0661f75a687e4d08e731a6e7bc52a79e08210bb03a33ff72e2b791c3baaf760dab4abe08c8d2f6775b03a3e7024cad124b5bc77312777bf24633683cfd033b459ca0115503a886c76e0af975f93a553616f3636154"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b9965f3c8202794e341e140f1801c29966c67c758f01caf07c0433821f803f6f3bc932043a5c42d0d1a90c9687908c428c3bdce32b2756652862c647c4884af0ee00d55bddb5a56fb9c06ba0e29a3c4b61febe6eb09df43c607f8138d7d0ad2fd49398e69d6baf9764cae101a6933c430a9b45f981769257fe3e342f8835ae8a1129787069dc008dd40eb039cb0e8e1ce0965a98959b7e69001437567d0f336666cb6c8e5826b12bd5f195a18833428dbbcb1733642d129be808159eee346dae44e3f5468859c34af260d2bae45b92e04ec1b5ddaf950b774333c4b433c797ae1ad53f4d5d4508805d663920c2d9b78517dade0d3eb6fc17bfe08d0b2e314c97"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4421d6cdcacef33e31663941531d1253765b01cecc92c741fd5a4c254f088b0d95a478f2ac913f408862b107f82c09c11867e3f27e34a0c1ea72010224c199a942383f4f6205884751091c9f4b190fceb7eff09110fa0a1546a857b091b930326a1f774a0185332a57185df89196ad4f56a0f8394fd6a49a635ebde48bc8ff23c925f846100ada2c3bd40f7d1a92fc31c1327af4d40933de0ab0c4a94d0d47c4d53e956716ec96cffdf0669e81bfe9552df8dd72a687f670896d7279b4ea5c9bfc26e93cbe50449776ce78753738cc9de7ab7aa02130efda3599ca0377346ab3b71bc31d56a8eab581ed70967e9e05463e19ff372130c5a1d9c2217f0f5a3f58"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a71e400721490c8e2baae3b0c49e3c3af9bfb341db3626cb22d2137c5989081402e440cc7e0445a447e5371920a9637ea696a482c0ecbd8eb93a16ab1ba991359e5bea0f6ce0c0ecf927bf8dbb543e307dc17840a0ecc17eeb23caae349e1f12f95abe10fb85695da43e8688855bbbfa842b4a73543fa61ea8076ca3a63505430e7723b39f4859e1cee10e558f2e54a671ee2f040f1eac7d5464bb8482dae2690bed114a6e56f4816e7413ad6ad05cc803446f65c5bdb596a6eb63491709789ddefdb51d461abc777a6a0306dd8a83a6a7792c42559fbf426fa881e55d45a4d346b302efba670443570bda58b9963abec39e6e49d2a17ce572c16446564ae339"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0bfda5d7880717ef40cce0a8437efa8404ac1ead0472a7d4cf54934f8f3432db4db9ed4c8d98cb606229902b383112dfd4fbef54a28e7cac91338b1f591e2de4addc08943596058132b3a75442f44ad4d18b663b1c1be67c00aaab52e92d87759dbd89b386666dbb4b67429267d25c1ec12ce5cf03e4438dedcdd591c442459eeb86d6e74a937bd7c470ef90dcf8cfd497911413c4a817e7dbf826858807059f8426710ac582ca9d7c657d22a07289fc6c1bb37bcbe27ac755dfc50a54232c16eadf3b1694827ce435aca9061d21699029edbcbe05524d6bb35a866c78122f06f45b8a3615ff38c9bad24b9127287e5c46b73b7435a7bec837c4336f61e9fd01"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "05f2928db82cd2f734f233d59897fe873f57714e5f5abf5132b33d924038a9d0616b62aa25b9353e69dfa17528945043da1d38c96bb6161a34c2529bb32d83fad6b65c0d186105afd1f27f92626860ecf18c7c865a02c3bc16a89c38fa9449d6e23cd389b6083e245b894c52507d07adc123c131998e8dd768b72c08a94bb709ba773d0216c9ffaeff15755ce005b8dfb03d1edbe75780cf3c493767d00b679facf4b188394e3218118d39bac152516dc36c4cc5f88ea9066bf3252670a5714fd5021688ac6b94491012666f0a41463ab265ed62939320a7e3c91298c82ab31f84a3afc62fef61ccb03c011c0317a93728b896f6f8da1ff4e6a04df5cdc14097"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1b02fa06a93da1fe5b74c877eba5629fa9469b01e9919016717eb8cd627f05fcbedcbe2fee00cbf2c954fa7f9d6f001312026b96209fe551b736a4c25e9203be7a706ffde8df35dc7db4add2ae9aa3ce76bc055b5fcdb057139d521fd94a241b2571fd8b73d7e07502819291b226f560b01c0aee7210bca486f623b3f7f84b098bc7bfe9a1a46ff2b6d114373ef988cbcf8d87b3eb7b8374b13b85650b9b894183e589d1ae1646c144a3e6054f7387c548632870f14842683830ba1ab80789e3f8b3e65cf86684ef73cef5dada6a93b6dde8b836ffbb79703b39c3e7179055ebe2071d19a49a8b85af694d9d3cdc0a054073a579e054c76c74d851cc08a95a2c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5b7ee2a4176836b60e6445dbed8ee5bf54f1eed2362d7830a1546c057ab9db845d21e05d9a46ac1fb3b7e247688ac4eec604100ca32bcdb1d5c2eaa4fea773fe5a0823817bf1b3e062b2c94b79d872b235e1bb4d6e42fbb3210032d071022074a897204a06d4c3dbc7287864d2c27f622f7e052c2a8ac88c693f503ae34e8e1f08495435e2439a2363dfed31d6276c5ebf2def17380d28a28ef8964abceed94050112734a6d5235316f7519c1df4c377b65e2f8755f4a3f48de8cc1d67dcc5edc05c1493e4099f83b2fcca14e727c9e3aa15a4847548683ee0f188b83b7613ef9ef40966771f2dba53927715327cdcc9cbf9dfe5597b4af4765a9a35445989f4"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "50c6c70b2cf065c62b8b69884ae779e08b376574fe9307e2dc4ad58a50c5b2a8b74c1e8929b190045dec835e5f26c73824ddcf1a4b63f54b9f90c5f80c36f6a0cb616fb8b63926cca91c90761f960b83381cbbed3f8ee83eee92324fd9697b7f2cc0e784c956354b58e9243495800235156ca1698c407dd9b6332281bb5de1ff180dae7bb3393016e6396cbc7a02ca159b5eccee507a36ccb9338623e050d217be8d9826d0683d59c0acbaa190ba91da6b8579b6086d86d32edfa0f6f17ea5a58d3b8bb9e06ac1517eb66a8fb38094ee19e22b3d6d3cf8c1d001635e3c7e18823b69b9026d81975cb209024b8ebbdd88accbd9c5279c7a2fcd824697907223ef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "29a239412587861ba02da5cbeae093ff6217ca4b1c80eee56baba352290d6cf721260021b3779a009a3050c2e5fbf19e1e717f906a7f62e52d626c4a31e259c8324796e63ac75bd04081cf2d1f22a5687ee9464cd47ce491eb7ccace2b6bda1ad3c99de2b4dae26021d08dc270a2e84d4467f7a6a2cc59888f3b74cb107311c62ccf5f327c75adc5bdc830c2bee5303a1c43cdf80e00374fd3601f122b19ca4b2f36476abbdd0633561eb3f05265282b4d637647a1e8a2be47b4ea40e4248c3e2541950ef2eb98a487569a35d3c8d8fad28d42ba57e3134f828aa1222c4d13b6fba906086cf8f07f5f3ad539cff8c0cefaf42d89a884444e62e408e36236e70c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b9709d62db65f1584a5f0dad0602cf2d1ad02447289312f59d001fac696d5b52ac9311e0e5266dc04f5a382405259f6568274a8aca4782d5017b97c765742c6a3bec33c8f3cde398d55bf7ee0b2d3fa768b416c0b1a58e70b865c39057bf6ccea37112ba2d277159ccdbaca928fb4fbf5970296462df7b8ea7715f76c14bf1ac7e4a48a6086e7ffe71653e4246aadcf97a9999782596c87ee5098d788a1a82c2c52bda65ff5c417f9583537aa52c5d8151b3dad189dc0f93758c9e3d45a216359f9952388dfa3eb7b5727774815647b17f6feb39d963340aec6b37507a349eca6c677fdec97d9a5d21a87e999573be5c90d71cbb1b58946036f3f4e6c26dcedb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "7cc584726f5874d041a892993bcac52a34e71ba6fe4c3db4d48960b1abae664549656af526b59b3018fbfe7447c4c6730f0e93cb148c0f0fda55fa0a93aebab07519123805ee1d551f19c4c69c09549ae56455710cf7b5468206b820672a0d7221fc7972e958e241d4ad164ef1f90cbf769a1ccb466081cc60877d28a05c91f90eabe57d9ff8d097a3a1f59fa69761f0f3b356c2ce1fa7af8bfc70a1c4753af9c715387a5b3249cb792532d1cba87be23624836eb33f0074e927122479a9d71f1962ee6e7e7be1ead8a514bfed9abfd4cbe33ac2d3adf438bb86ec47734961292bae4b61224e957e331b794c22066cde9e51847dad897e7c65d35c98803830f0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0b93779478f1ebd8d0b018e0db874d2f639834d48d2440cf5215c9b914acc3a7eb9111b5f77d605903a40c7020ec8a4be9cced3714df84586d5f9e0fe44fc1c61a0ac529e9fda9863086b77555e68e290ef716b9add9455b2349d9e14d7d2825af2ed0f619636c50599616508c79badc2dc2c47489028c5bd793022d189058f559dc272a01ddffddb8fee9d83c259cabecd93398d48591d7acc2787e1b8598cb0218b007440ee11733100ec3a3a9749ed81b3b62d4b9c32dddde30740c4875e451e3cf89fe5a970bb92f4065aa7d43fc6e08eefa416aba932a7bde5a10df11b433527bafb2854439b463f6a0a13ae66265dfabaeb4d8de6eeeba4de45e0be421"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "174cf250f8b41af4e2bcde276dabe55d193d51d80db308ee072cba6d7823e49ea26b32631a18316f48a8c933ff9660352917d5f197d44afbaf89808fdd16853786e3cb3a348009d58056e3ed84388ac73789732105e0c57fef0362b38ad103aa7eaaff599fcb07520ccaf39aae20ee0e1bda9a604e76646c72c9b4156efc0fc4a2fc733a5c080f50d9a5bed24a35ec863bbc7297c2a7ffdee9c7b3fd614da2466b9e77a72af6d2dba40bab35235e14e520278df7260b588528f0b32072aa532d09471f4e1992c8ff3534e6d0723c1664e8c6ec141eee2f7439cd57cf167f1b6dc681aac0a6ddfceeee9a81c53845ab87c145452627547a0961e0fc89b17ef70f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a47037577d6a1480d07bda7574648d9b4d613a6d112f7027e873cca188cc41ad35cb8c931928d2765b60c21af9756b6f0acbbfe0b44b4eb63abded9d8547fb1a37706ab562b448b47f29a81673e27345c156e0fa29a353b90c3262a8a48b0f002dab41aadcd0edbb016973fd85ca98e53116cc3a3cda5754c76ac8c8e44e31aac06d1e248137ba096237d14119538f55a1cff1c7a93e1095eb40918233e5b33e092741f658962355541af6eef3bf3b84e9b87fac775f53e7bade8581804139b765090051474b08c82555daa5407fbbe998f29fa337d21b24b6917d4cb315d035dd397a84c47b6b806bd1e7812795d653073cf349c57193397c542f3fdd512bcd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "790911646b9fc46991a8c1fdd0c7a5a8b45a078305d71eafad2dae2ecfeb5f7122d1ba2c77faecd5bab50b05b355740f93c6cde64c42ddb3be48362a741fe29173d58d950b2c242753ba3db6f4dd576c2240f490f53ccf9b6e781fc610966b80cd9700f41c8bffc87790a01a45f3623a82167ac42e52c5ab5ef539b29f5d19449e9fb0b6749a559010daaaa19d15f3fc53b58b1a912db79a46caf10fdd5ea81256842acb1e06282ee66c0bccbd69131b532b3cf7ef72fb725c910338e24cdf2653d443f209efbd03573b54536f98fb002e57a27f62fbb117cca57d9d6a2ac04cb0211e227682988c64421a5f8ad6dd3916d0d84b441847324c03451a4ba24fd0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "876fea7a5f814cb533109f000830bf5d8776d57b502a86f1df6e4dc50125a18e08f267edb7abe0afe44a5e75e8f4fd5e11fb2691fb73735617bdc5dc270e2b51adb064f5a560a4557c0b925e6af7852a110ac3f8c33150d3dd1d5253b7fc69d11949a8e80aa2e240cb3eed5a44afd0ed7a651ff6205bb80333cd060a2d2dbe5e37de3fe38c342c1635d553a7bab6be1b6ec1bbe9524944ec967200d35bfea076846b8460333d17cc90be7c6862695fab2cb5d02beebd6b1b86229e48d64f391ae3e506a7d252ecef54b61d4c186ab9fc8f2b32e006d07d9958292b6f4735a4c4d8e63713c212558f73de273647dc37bead249379831979c8062c0768148bcdda"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4b06f62bb29091d0ae2dc52c2443bac02e9bebc68f84bd0186e0e565483db3fdb2ee8c3bf17e2fc256f7df3810c5c597fd03dd65d9726f4699734a89fb5dd88176ded8f2caba4c1a869ba85ecee2ad4ed782006bb5d1f6e9a8ced64a9a74298a9c512b27cdd93b7f3fb4845bf2d95af41acc95a43fda8784424d3ff5ce18292abb0d43ad644c28ed076011947a317a5543fc48becb1836a8f57a1dbebd5dad249a00e01c102b98a799b05c2a08565c5778e629264727a9cb8fb4ecd71f8f3db26e3ebbe59812462d6c2e042a4f92456df56cb9caf959ce3181aaa1956109a0dfb8524ef802891e80dffcc2132ee1cf380641c7da5d1e3ef1a3b37c8b9a7d4c05"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8b15577f817c9f63a94b9633fdd36af378d9f5f471636c7b518d467a37aacb5013a3640d4ad384286c68dec71ac5d6a4ba2578fe2c61d1db0922108bc777703c8f09f251cbec3a6d2a0e26d7e4f271efcc3458e96c710cb8b120eb7d5d8a5a535e823b42d6c3d59f8647bb244eaedea2b91e3b4e3e4fb9f2b0fd4d877d4fc10f135c54ed5f6228a48605016c7348ac4d7c00246be44d9e8660616bfafdaaccda021c33bbc564a5594ec98472b0f559dc45ea57b254a6397685643d1fbc1e074fcbcfcbc5de4f5833a7dcfddef6a1af5bafc6687ac8664d9920f9be8d8bf9e3b404db41b1d3ac1c87e9627a4b69a2b04c0ac751eaced3b7fa618bd7c0dceee17b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "abddf6c8fceec1026b0fe6799db56b01e0b2eb066f9e5d0821f6a954462b71e1d22ea111f1b69bb86c1e4e77b6cf035573b9f6e0894ca4bc0990f9986ca209ee41bae1a48a764c5c464ca4e5de36c8fbc47dd8865775f9771ad6c6bb82f6b2802bd045c1f2d4a1845798b7dc16ff37866c90a613f1d019e53602fe2c99ec4650360ab69eccefaef07f9156f58a1f5f65fa00bcc2a544feceb70adc74e6710ea01e9ef4829a8165d7ce24647e6a8770eb8247bfa87de15ac560b6dcddcd112c24bf9c694090060bd9f0b5e50a59ff65c135f0bcc527c8793f4c84769b7461e9e2d755f99aa13b4c938f8fb7816e9d9f7f91159779b9d7749489b549aa263d8d92"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "35446aacce869a91a157aefc5e3d4660a7de0272debbee1ff6253f74e38e8d54637cbba4412c0c211589a477eefd3dd0106cd878c46870cebba6e053a990f3341647736b00b5691d6b83dccb6684ee35063e2da6a6b1e8daeb5739d96291522d7c9fa54aa7d9208b1d73828c9a0f657ff39ebd09c709a8913b04a83c7b610fba815c222db8a2f00b089768cb4ae9ef93441c1463a43a6a691b407b4c1266e0ad4e146b0f8d06ccff215d48b513528f7cdb53a3be1be8031a48d092751e195b09a65b26d63795020c2a887eb4af5f002944b878962cf87a08c676946290164c667a3817fd8ad48e508d4a1e4811ff85b5844ce0af7937eb48fb99e8cf7e154c4e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b0fec4f0f9b06a684c9816bc221f888860c1e5ceb40e67bd440bfb322c6026120b28af4905183d0ada4043b4f4a0df4710b20f37cc5ac9c5ad391e379f12784135cbab2cd7e3770fe1bc68fbf5e0e07c4fa07a5597d5f5c3f682e57cbf047cc5d8de859e3e7f997fa91c4a16026f43bac22a7afebcf56c804f656ad510dd03e6c4cff8be628a9a3fcce0034105152ebdb148100203f17eb37b7165b03661e5526f4fe1bcefea270e74a2bd9afc7fc00e52c9256548f36db3486b7cdf6fa9bea4d558d592fc6ed7869b8a59ce26608d21328a0e5001c273c8d29e3350c9d69d3b4a57d5574f1b18686c66598ac6de82d50af4589d53f1c5fba9e103ec787283d3"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b21fb36d1ba5ac09f4bc9c9bb1c3b08ef4b5e39d5a13bb27de6d949022262723fc6f96e1d0f76bf95e1f90eca04fb20bc65262233f6335d8a0b8211f0e2481819607354700ede1ff85c8e53413685ac5d31db4fa5f807aaf6818b9531baf1555db3e062a3e74ad677e9f378bc6020a73673decc9f6176f4c2dcb02859932b7a7a9d12da602b668a14846eb8acd2abfa0952fe5ec78a67a8f6d751ba3b420464c10cdfde93b96847b9bd05504b1ca49121cc92db8f2b7a33fac17535fefe32028d0c1484f1aee86b4260b668d9dfba6cf27a7faf2bbe0df47267108a84bd5cf595f522f9a2ae52e4c4b7c9c08b39200683bd33043f14b562d37b910dd438f714f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1d582d82ca0b3db426ca8adf9465e46531e60d71b2cd7276f0d764e629a767e61171e1667a22c1a1404adf7e87b2617268c56e792d9f9653466666a09bc82d4c1c2c04fb9b8fd6c532f169196009598b6efc8feb2850f4ba8adb75d37705fe07bfc2e67356231f1845556ed8f3f8793f4c7e58572fe849ec0148a840e442968c1df6910152a5a4c0be18e3a7891ce2e16e53414366e8d92c1de75073818da1dde1c3c3f8f5c4d31d13da73bb507947e986915cbf3d9edf92a6bd17775eeadd9d5b363adaf1a33ccabd441267a476b314aeb86a91837b5c9a5d969001259fdc5a2b69982ca41405685379e758c255fcf35267dc2f1075ccb57ba0c339dacd7feb"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "096a7f2148458f37e9c6589c25e4e90626468575849037e8f62534a01e08dbdb34332da17528bcd83683e1d05a6b159a8a629225e9067f20b0c7484bddf978178107128855f63a29c727d2a49ddfb650954e5c9131b98fd188858b595a2be7196921fa872ac945336a47224a4f572c85469ed34303bb23a5822b1fa87f5b5fa0a4bfbcd9927c32c32c349c0689600ab4f616f31dc19ba9b5e6f45ac64bdc8070863358949e10a46f2af51a071db4de3d7ce5a9b2d76ec66eae8d1e106edccf72d27159a113d888d2f3c73cbb738bd096fad53a7bd3ead255f928b7915b137152bda12b3365a1fb7f9c4f53cef8484b5bd59c5c34c692f6ad20e129651a7cab69"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5ac9934544425ddb9678fcfd28245b7f5568eb1de108e7d3e99e2d3810ee261b877073d32ae8abce7279f2177d6b11f36234ae2d9d03e4fa51907677a950ca4c644e64399ceed4395b18dd89a152f62a16520ee8ef27867387b3082db40e6462baa7ae6148c9e3e7d069d00431dff74b38556b31f3622b79b3714bfcfb6c662c6e92b3332f7e029debfe21430ea04fbd7cf75e410d1be0712fb5f754a9610f24f34efef2bf4690a589d387001dc652226775fb81b726b3c036fdce3a52ec7131d1fcfbfc2d6bb8434699d9905d9d7992d7977ce0a599309040ff4cffbff2028c9d6ebe7d0f9de0d17876f2da3a497b2a36170618c82e3f169e0ea0708557f1bd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "13731f7476ca8813b66d36cd6cdb93a48eb42742cca037b828774ff5971c173bd08e88542f2c39f53ae8700a56be54755b64e1e81a00097cad58ad21b2ebc59518ab6bc345db326572bc0b39572590c90b2b72894b33cb2fcc37fbe549405a7fc656dee567df49bcd93fc4d2c235e2d14c2107952de0e635ee93cfcd167d4dc5e3ea1dd0cf79973bc96cfe43a738be7e1304d4c1e318eb32612cf3d6784e1f842b8780dc5e3a8ec369eb8226ffdf9be69b54867f2461c810c74187d72cefec60a646c4a576d8ab977d4daea3422007454a306e5acbf3f7043d5d3bda70752e4979d1657918fbb863d4eb8eb58ba6f2a372636871b75af84e645a7f49e99eb300"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "0cbf884a755f8ea52d3da21e3e88fbcbe2562d35440d1fa0f8c3dbd4f27aabb5603e6d1b172af543c6739c8b644a4f438df55be7ad17a82c69a03d08c628c8fdbb7d1ff9202a7fb7bd7d4f4c400fbcaef8aa463f1e0ec72b1df8834e07cd4f465a97f7129fe9221ed3205043d2ea4597b857088fc27e95da84900e87ce9578d8bcb120b23096b1f143ced492cc966e2ef60ffe9055f5d225cad682c12fff248347f234713970565c532cc2302965bc69af16acaa3ac8b59b9f8698261a1a6074e3a3bc2a6e87dd01f2c0f13a628c134aaf65500681f1a002d921725b362d94c5dacaa8726c0a029749f9ebb699028b48e59d22dac2aa27ffdc35648a57c57f70"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "711f73de0bbe41e3296a1473121f47a735d093a06c9c7be63559987d98f5fc52c6dee6de2a3fa565e9dc6c75308652978350e5dc407560474ddefb45f8bdadc8dc89b5640aa8552117161d8da703b52948b08596b92dfb4d343320aff80af3507d11a27ca6d2db3e2f028cc1d53adde20ae164f602ee146bbadec7a22b36eaf08849e35425a88bc1d6c8f1434a82f31998f980579c287bef989607c0e09977c52932c9d1b1a7437a3c87d09d9ce521c59fc44c51a279d9d3c94c88405ad38c3122e2e993348360490e1698d4ab126b05066fbf764f259c69fbc7d875eb69a78bcdad95e3ff1eef50183791acec694449e6c944bf2bebc01e5f1cc62d60b83966"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "3e85dff099a3f6cef0b15f86f749cfd21c5ca4a6d7ecdfb075a9dfce9e11240599be07f5200431771763469e1d13eedb3914c2d991fc49f32769ceca68e3de4ca53c1fee5f27b54c05ccc69d4cf0ad3ba62202bf7f1c6fd5cfebc7a8ed29e489f6350372f439f606d0b1e879438463b400704ccc2a323acc70ac4f46a621f0dcb49dad6d72cc8f4225dcd9e228f0611e28847745d0f24514506a91ab2a85b4f8f0fd02850c37e2e923ec14c2099ba90b9cf72ced38180d94cbe313215e19dbe46923e2d573115443f3e98bdb96305dac90564c4e667cf3430d174cd077c5533ecbf3f8ba08e7ac56c0b03c4d2dd0caa9d13c968f6a4e968418e42ef4f52aaf77"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b9861f3d1a03cdd4f49e90947a21e5da9fc1281a816a9f5b520a7de27740504d43333f5facf65dec5bb06699c37aa1aa911bd4e8acd7aaeeb6dbe50e577731b4babd4587504821be0ec4798b14124e9adcdc2831d8822e7768302338953584147af1e323a9982ad01cc79f46e239c804b6c119a022e1850f4445d98dc27e83f808f33f8c0c81bbe16d5f04ff0128e34d03ff6a65260a7ee6e10dcd08d09d9db7912fbfebe0304b00135ab184e063a884992ccfa5d64953ae98f050c751817629fd5491eabaa52b0e52626bfd025c926dbdc25af5727d92bad2acc5ed59f5f597606c9752579c57ed0e015440ac194228323a71f708fb92d5cf36c841e8a07366"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8729c630297b010164e90d0e99fc65eaaaf2bbbdf309f20bb48037bbd40e59ebd8d6fb7e23911051731b5ba5a8423bb3d0ab44bcaea5eb03f56eb8f3ead1c3fd252197fea478fb4b9b9b4e0649503d4f45922ebb72a4cc1716f914b3e8dd8fb111c9300e946c0eae83a2e6c40093fd1f55c684e4c4b2b0f09ecf03ef71a01449eb0cc2c4a274cfdd55efee7ff136a28626eb86af9d88c25bd0ba012d8a0218d43bb02d9b6b1273d3d2414789aaa076da4dcbde9444a151fba9c25ce225876b63b09e17b16e0e115a7db6860afd08c48ad37aa64a54d8b0230314354f1c943fdcebc1607e66121fdb7390f131ba6bbf8f88375497505d7d3ba4dd9761d842e937"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "6385c6d4dbca9ee08e1f525a8b7915831a732854c7b26cf42681bc90dd49078873025b62e1830ba193445e129fd419ee12cde859032eefc5758c6c12ffeed3ed049322609d2665b5e1eead21af5f354acf336629e62cfc4a740bf9a51fd66e6b72287ed5558261252f50dc925417c1e48a4552589a7099ab0a3371cdb1c209573f7f5ac9436d298fda9606f9582e8c873420e7c4edbf5ead17e3c93fa3209208b91728c208b3fd10b27045be1cfbf242c5d34cadda97608271326444ad35d309d47f4add6bfc5ad95710db6d65f82a06a04bd7c71e335c2b86cf6a466c311f7e735b8ff8c2912269c3b1f2007f7d1369a55440a5abd98a46a4389756f73782ef"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "1eff927cfa95030c95547b3f3403636ed63fe85c99e21e64bdd8593f56119329fd7d75f876e13317aafe540b79964cdf62330cf98be66ee41ec92d7ab9ba7988e8bf6eba3dc95ffedffe09b382a9ff566f07c61c06944de3b68dca4c4a3b2076e778286b50c6ece0dc066c29dae7d824969fecc6d5f8bbc2731e875ed9780428d53591d2f2021aa7864baac55d276cbb14098e9af5869e18c29c89d8732503fcf8e65a384454785ed39dbc516eba130e2add655a8e7df260a668ff9214194681033fd8b57202fdf627270fe4f63a49fbaffbce1520562ce53c9ecef6da5e942ad06c8ce3e673524b84c19da4f071d9d0ef9e24d4c8b0dd64627ccae7468372bc"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ae443b008918b477cc8f80c54afc175ea0935ad53bbb2784fb1948ed4186f0374b760302dd2346c3797e79a080461c802c39cd72bfc9101b408ddf8ac4e449e2f2f0f03cc1fa5dd77e72becd52a36da64150edcd290df30fdff2a4701c7e923756eb4700184af4e06078517385f9f52d650a46eb94393b37761444fa1d3fc925579133c85e63b25a7a7d1587dc43fc500e54a70ead1cf872e47b33f34ce7971331007e5e74aafe18895f4e5b1faf925437af5dd7d5ac520eee778752130ecdba9d33a792e189e9c8d95770a4d5ecfd71647c99470604b269f14921b1fa50ba063b47bc6c490e9926e4065d5602555e51c9cf6669ee53b7cc7cd0da607478a5a0"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "5189a516b2ff014f527ffde7cfd65cca11f0b907160ff901a51511d4b94317e86f3065600728ad0c43e68a6f1f7017708bb8dbbc84e388f43a9c83acb98eaa6b4532cc68c4c6a44f649989b5d254f89fec6de1fea45e3e5b83e562608a7867f0919a2320a120c871421eb164895ed4bae27d34227b1e8cfb600292d208cd15cd62068aff9d692ae8088c9c08a51202694faec5d6c78e995e5e013f931b8a6cdd726357d0d5c6e9a83dc634810fe383ea1a89adc42c2bc675f075e571ecd3fff8581a0df3f83b1959a5e64b5eb1cb9bfb5c4c4c17d47a24a2ab3da66ba62d54b74624555c19c56ffa94203cf78101d181ffeafe8e8fed9e0897b27a88419aa540"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "8b009088b814c2e2a306b4cfd72d87db4ca1ebf6ad5f37e7aa29777b77d93c005922168e3634be085c9e4b147194046e38b7d32fe6814652672cc6eb724742a0a22fae278a9953e665e7351281c42e98d4fca8237be482080b9fbc471b9854ee75ece636868c6b3270dfc7dbb32cfd2e28901ff6ac699dd74d8bf096bfe89c22c228522474df25d13e5b7c1148edd5df5fbc06fe165729418221c610a8fbac579955b8625eeaa8e00aea009b42b2456c9316c5c005688bc060e61bf302418740f0be9b5a30df845608a9008804e89d1a5233d34b6fa84c3698451e472fedd9f4aa6ffbc9f4491256df7181334ff181cd66dce7dc66ef9d3c511ae5e6e3c88083"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "68a90a62da7b0ac09e26ca8786723164c0e6535e82f28839d12c08348aacccdf0218d3470290665e6d6fbb59cafda63c9e50d596442b02f4ec7b55753b13b82b217e32fc5f3818e3fee1a6b89855f5902dcdba3eccffddb7491317961af36dc74f5b6a4477f57aeb28d57658fcb8e77f8e223d2870b730d53ca1aadeafb389d3f934ba609689ce50bf82b08f31dc2578d7f076d26be5b267e87d2ca4df8d57c112831f45c46b9078c3ec13b01f0b5d67e82579243408e4eb29a154314cd5c68cad6b7198a02c522d87aad93e17aaf8fea49d38e39314c12c816e73d997c0fd10cb12d47aa7af0e82fa4b939f1209085c01a88f5cecd533901d5b1ab2866e753f"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a1060a690b31b1b2feba5f0b8ede1c8f025da644da1f1d66a6cb218226ea6751a7f391ad063d80b63035cdb991e6a549d85c9f569f7677a40becf0326cb93297e23ed49dce7a5c1a4866d788aec24d23cf9c9cf15783ff5692a579db8f11b7e1ee8d28aea15f358b4d01e127dc438f5edf53346744594c3f946492a39aeaa17352a6791a52d4812637c8612323a50af3b7dd4216100020df91b653e5e4772bca49750ab9844c8cf13d651541d2a1aa7c74a673e645971df9acee059fa981ad39e8011b06bb39a86cdbba9fa544b8f2460188ca04354a95effed4e7c5905d5bf25973589809360d5e154e7a3613c27f4c5c920e71996063c2f86c44b7ad12a376"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "49cea19f5adb723c41e895337a24ced9e685736ec060f2aeef35bbdcf37741056d5f3ace051b0f6099585d82f576591da0c1139a590685b3e35ff9053bc6c3e381cba077700558328fa785128f78f5cfa481e6bf581bc9424f101cd8c2efeb4f8f00684776416c309d217df1dfde8f1e4643aad23207541fafeb5b7d263fb560cfade4792d716f68e7809cf8478cc4dc6a4c14e4e5df4f137d7a05270c6b0ca1f73e77eac07f5e7b60c8574b5c7487db4aa334173fbe03d93805bba291194f02f77ec0eeae2373ec9fc467a621feb77afc7d3757ca98b4f3fedbdc391f99df24663233f7394935b14eb81cf5b24d169cafa7506bcbcc2a4166fcf8fdbd5f7f3e"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "b1e5095d61e4a986fe3425a08401ca726bafcb778dc818254e7ea5d299a9ee3e8c303a51ce19644b60a7f6156850b3325f4ada0958ce9a0a8cfe2a7ca085538b9b9abcfaaaf7413c810d6b2c03b5a3bbf98faef5374053cbff979815e5f1a38980087b291e1cf1683febc32da71b9040bedeb014de01cbc794ee40c12e7d44cbd01336ee92884d60d20bb0c9a5fe4d7dbc93478dab044bb6f04050ee4a3c8d2577c0e8443781f1ba5d8e763ed7f879f0bd970045299d2e2bc00ae47598e822fdf2461343c5c5f2111b099823c35b7ec4f07d337e52729c19e1df28c4bab6e7fbd1abd9cd3052920875e59ad251970e98c7a944ee6ba71787f65eda75e84cd048"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ba0ac1ff39b108015703583afcea5c777ec70df6ad11f561f23ca84eeacc73b7d93375f5e44c6c84e16273d442f93e36d474c7190184a0766e5b2bfe9896f0f0906a7a0c08dd78f0a9702cf3f706040893885f1e1da9cd01aca80de8c0c8197bb6e5e34562c37ff3256fbc6e99d1e9a7459a2cb1f49eb371a9e3cb1e87a460880664adb76e6bc3f2652010a7a1dde552dd4aadcf30366b0de3964e85d76bf79e20ced2aef87c9d31b4f2756cea23d9cef75ce07cea41204b42260a25ded448df639a0493d24262e1c411b7c294cabb56b95126c44d333385a63dbbf9219f22499812ae99772ba6c30d881c4bfdb3d074cc8f6090810546e64b1dfff6847a21f1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4ab504da964bee491512b40b79fe9befa7e5960b142b619db35569cc9387265cc8fa8d4505b3b7cde5e884853bbea5d47ce7d60aa7e4c81853f0ee3f6b357dda5efe13119fc42f464b0cfb9d3506024c2c884eb57373e16611a6ec1eb803a61300bd248587594d081b501d5a141d2ea38d9ef69a87a3ee9d8d83aba410b8d30765c81f997d71457dc8ff1d9c3ed83f06f0156826105bc0a6fef0260ba6fb24578de5f58e7b0a64d5da1512f525f41e987a27e4d59c7d4917fb60586535341bf1644f6bf6a7e3cfba1c225a66bd65cc90b1eaed3696eaecbbc24a318a2e2ad711af85b02ee730940aa3dcb2d87aa8dadac182b5eefebaa3e729204d04e8ebf09b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "81c337ab36822c157502b85c88307bada36c39c4054e1be4b0f9b847e1cfc6d2c7dfe08df6a3a80ef3aaf6ccd0bbd43df5e2329e89378bce30503d3a619acf865df1c43c793776ccfa43f51e6135de762d0cbf05bdb63f664b6730baba492e0ecac1906a5e5200a9af1ffbe2fd57c70b98a608ee05c7ea9660983ebd090b77c7300de733adb5b0405cf4ef5c0131bb2452a0d10762fdb7ab83786ba3b3f70face9dc7477f3444c985bd9f0b0fbb011f855ddf9ac4815624c140bfa0fc898bff63699f4b4c87256c4782cecba69191d03d4feb158887fd7def30286950f352863069001431cef136a23b2ed2d886f2dfa36ec7834d94f690f66713cb49f84c941"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "50d0f2063c472a07d98a8a9a607c0c1b154b30622839fd571a3c4cb9916df86e9bda0ac79e266428cc3e709d9dc3bbeb0f1993f836fff5ea421d59f2f469a1b4d992e8d0065ac375dd192c1425da17ab9936bd3df49853b2ece3ddd00cfd5cc57c5629276f7ecafadf3e68057e384b2f89cbbe7d053add2ab8b979553e9cdf409fbadff045e6e0a5087566a8036bf430724b14b1b55836311a2670816b0561dee07edfc6ffe8d6167afb1be54fbd3c4f17ecc68efabc1edead2a1bbcca4bd6f9eb839ae45269d8c7554cd71e5ca9823c120ed78492f28b7fa2fa2031b2f61697b0f62e486d16f06051769a55cdbac2d39388d985797ac8a62a67967d3226f98b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a5280543fcf9276baba49a297f0803ca4782cc05d35c53a7bd692b0356991d1ef6211efd591ef2eaa5d39b00bc193f3a5f175dd55de90f04396874b799374625a8af5ac162f9af79eb5f3615dac8a33c8d41182c6183db82b9e509ddcf4de0231e419d0e07487fbbb42d84ffc9b4f4c3ecdf6efe2efbfc64f3f665978ab6d210febb690d05a4c9252f97ddca64884df93fbcfc6356954ea7c4f486f2c201e6988400802904f61c02acf066698ff5af6fc8eaba4f81ec93d886a47e4652aad5df2ecf463db049b923a657ca629ba91ac0090be3a1381432ca2c3abccfb85b3c251776b910bd7ec4283d7493e309d251e07404324de24d65a3dfb8e3c5cb8a5a83"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "4f2688932d7bf6ec48e50c69933006d28b055aa97621fbebf3ca336536b8dc61172c8ad52e453c4ec203dbb2904557012dcf43da92f55d62baa56961701bef821240a5fd2d1735ae14be136ea92ee10adc650eff7ef6b5cb08c3f4a9dc17bcfc66cf50616f305908719f467af5abb45beea1835f95544f53cf2813394767959ff3440da42757bd135806be3ed2698ea3d903e0f2447916c94deacbda484cb1e074114dcf3b41bf60383153b838f018f8b2e35e3af68eefd202a2b3d7ddc1ec134fff746f1ce9548f9e53a3cc41faf2e991ea1b5860c55f5c000bff72f5524bed9cb8f9e8dc34713f3ce443d202c8ed3df13dec385e8c19871508804c3267b67b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "89fc7f47e30072d2f485e598ea816be5a407427210fd3ecd491ad1a63bde51f49ffdc1969fbdeabc4b36a440ed4fa01b16cccf32fb87478646570e5f65ab386430ecdec93964ec2a5def2b0b9caec71b39d03be76f54f7eb665af9d675c24f9aeb390dc9276198d289806c0ad114f113f0ad97fffce9e673e793dd19b989b8dd2242be5061c5877698325b2d704f6c67c66b1b17c92ada00ef0ba306a8fb6c4bae61197dec2d7bcb7ac7215ac260d608eb6c7235f407e38776632638c431d5fd546b42003705fc309ac484dc99c46962b789452a595eaff3c0c9b7e661190ca0d5037251b58d0df2dea1209cebb95ced5e87f2088d021fd0ef0aea0e7bf61290"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "a49994410ec70f260d83d20f5e6f281273dc9df9aba560c8859677a0a756b31fafd7aee913d2301cb66a0b78e0d7aee11ef2ec11757387a32b8ce66b57daed49a75b572e82ad23a26815261af3fb5b4d1d59e7a99483e068ec508a2ab915e7c17722e1d88ab92c0df59daf94da36f611232f40077b373af44179df00e69f3e8ad3e5d9945e586611434f8b7be9fed67f97d004c65b8dfeb91efdfb26bd0a5b3fdb4e4ce6d1accf5a6fe37b085c3694e79a858ce64224beec9f2220338ac5417a2925fa3c72cbcbef630926299f974882d2f3c87d136e90b8c9c0599a3e8d38a9a77e7b0aa9be7deec3bbe962422bfb05377f2f6b3f4e7909776c5bf3db6b4cdd"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "412f631c6df4c4402f70528635f4ed69094f33b198499980ff880e8e5fbdd22236c7836cc65ce18c1b3f183b69a47c27f3699fe7477462fa8d17e8a247e6ee9e994037ade036583ecf4497c083f78db36a15bebc291f164568655c27752f2ad27efa13a7fb897e658cd9f6aa1515bd14a4793fedb7722fb148c3a0e48cae63d14ad939a99a90f1dd7a7c09d478c9217e31f083c12dd3395332af68a4231a15069b1f43765584f6aa094645596ecb4923c59430e6ba76ae7ac4aa724b0fa9b5e2df9d9254857df70423f9323bdee97d74d662793ac72a0d089a79038b8b85e4c0d3a6f616fadca300a77bbd53ec69287a1f0f6fab0560ed90a28262bc310c14b1"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "77dc98b3302f80235104cb8810d290be782529da8d49c7ed804c59f6435464668dc2d1fc3040ff31d7da3e31a472e218e7f8bf20b626673cecd2a56d7c15af20b42f3b1e155cb5bd3cc0f15c71152a64a6f15fa3e12f6060c2539f6f635c56a0192be82925c277f5f317b6531f1d5618ca95d038b4df9c1a99df4d09e6f5eb8940f8c5919051180822ccccd49c88da70c9c0bc1f206fe8a6d8e5678c02097f821b1d53a26e5542d9287442e9f74780fdb40f10fcd06aef31bc8f14de73eeb437555c4510762fe6bded19a21eb5e94ce51445ca10a6569f2a92bf70caf2e442975611c6f02b3e2875f911260bebfd5131956c98c5932461831313e3cdd9e7ef0c"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a7"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a70000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a6"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "bb0d4124c20130688b8419fabecc427d946c5096dcf69ecb0eb69fcf5aed15d7e1e5fe4e34fbe26f8b244aa3f088d546a00a531464ba4b8980bcc4d5e54bcc20e1a51afa9044f7fdecbc6edb751b5a5fa7ab403a04e5f77ba7865dd6d211da0afa71262a77a63d9c06e8b00b616ca15f11ea5b4948973864183f570347570553e3878376ca4f7536ad5afac10c0a7b34a5c11f8cf16115fbaeb4b323b1ad6f75c7ec3b954891cab2611cf1768cec983c1717c57f67676d721a955bdbbc216a3345bb31d7d63e06bdac96a6b991ba1e0113d01e48c77ab327d36b426c2f8fe4825a37877425885c927e92423b6977fc304122a2c397cb74845fe9961dba22c1a8"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "73094b0ac0f0ab2aaee54cc43107896080ed245251f290aa87afc0bf5e7d27e08836f8f1219ce138fdeec02fe70c2ef698139f296028947be751e46d2f7282f9585494a7cd9c88d70834f85f995d7ae249d35224dfa04995f2bf697c25571f1282a92fd32d5b0b83ff158c1420c221f477a2bfae9ef8b7fb4add58fcd6844e9b4230e48ae1be1e7719b6bae5b81b1fef2a29b4c5f29ba447cf9870d9bf7be7554958cf86f523fc12f1abfb41b77171a7751e0d0f93e94fb88656f39561e2a7cceb9bfc3215fc1cbc22f5998c40436225f2c31b161c0acea0936d5d70bff12e1c8ea2e302dd5fae16d2490b58b0cbca91324c01f3ceeceb892923edca9239be0b"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "30723b607da1b977dd09924f74553e35fa7934c5cbb2ccfc3f799fb52ae3fcbabcd469be9fda10a12477f9dc052499f132fe3c42d9d387ed806725a359d1292ffcad82a35ea24c22f0f5d5ec95c1e5002d47fed010083b699cdef90e39a67d37524371312490b2033a2c3a52b1ecc526d287f27a894b9538f106519928f7814fdb21cb9cead15d3d1d615ca1fcd11534238c779ed7daa4f94fad8d354b1ee5dac1fbe270c804ed449dc59fed498ebaf8153d2dbbea44a8394c051fc5f8128d4503237c3475dde2043298af520d81f47589da19f604618b5313de07a7493514f124740f95f20b547bbded3f731a64e6dd832d50634e2c9ae9ed633103494ecd24"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })

                m = "54657374"_hex;
                s = "759257fa448e399c70b46320cf0678c33fc4be0bd1f9b197c03be6174bf3b3f1f64cb27387736dec92dbc318af3c97134e0334ca49e01de1b10ce797ace008f1f61a2f559e2c51d8030fc54bd999bb6cb9fef02b110f37d659da2267872671132cc454e6ede85dc3bafae81e60645402c59a8c39db3efcc14174eb467cc90d1ad3e248acefb9d6f7e048a4c800389a6d2a49744b2ca0d8de6ea4890d32380300ad8e5bed3783e51095f9fa278ee7aa0f8a14b890e218bd29508eaeaceb366436530b484d61e599df8ec78b1d78110056aefe2604a2e60285373689e482dab077f6a5837e5d4e6fca4e6b45259654900359475cf83a92b9ef97316f2cbba83ea9"_hex;
                r = false; // result = invalid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA256 signature verification failed", [&]() {
                    assert_rsa_sha256( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA256 signature verification failed"
                    );
                })
            }

            n = "d0941e63a980fa92fb25ed4c7b3307f827023034ae7f1a7491f0699ca7607285e62ad8e994bac21b8b6e305e334f4874067d28e304230dca7f0e85f7ce595770b6e054c9f844ba86c0696eeba0769d8d4a347e8fe85c724ac1c44994af18a39e719f721f1bc50c46a39e6c075fcd1649f01f22608ce7dc6955502258336987d9"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "132fbab52813cd4404e16812639221c6886bd0122af16b814b331a4ce18146ea9071ad0b298d952900d6fb7e1255cc2d619b207f1fd9a48a3838275fe1bf3400726713175fa92d784778790c214a26491f596481414afee858ebf394da0c18a005f76c56b454a95ff555341a8667848f23ee65ee2814e2d7b673fce167ba5618"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "54107d4ec803c8cab6a0e74103ca3cea53919e484be4be88e6299aea3245289c6e3e5368137600a15694937b830b8d4739f69fe8d3bf8b8a6b4cac119548528ae69367f42f569bf7e2663745a69191312a2404a183d6a849d9d112f8ce18709386bc5c8cfa823061d37ec0275b5a9e4eb11cb6cc82b12465c1482e0b528bc099"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "a168c57dff281db4be76f1840bc8b1976f34c6976ce0391be8f7807165ca1b537fdebf00852bc5a7f46b58625148af5b6dd68a4b3e845737655068776ce64d8002cfc914e24178ff9d86268c6b0c97d49853a9cde82d7d8b1fe6215a78905adee1c3a19f01bb3763d504ef3ba11d0003970cec91ff0d608b6535fe3c032fd293"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "89865c4a0e924376ba619c1b0cd28c0d1a5ddf02cea1302cd31e92aa71b7224fd03d5780162a594c2124ecc8f64ddabbdcbe404030636eebe94e63875abd414f1e8dc754dd43869761300569de975adbde0b1ecf9c2b5e1c5e806aac8047ebec99e8e20308ece862d92b40366ecff58fab7a25795a52b6a8d523c640f822bbd0"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "8c356d84e4156d2ad565be16b1980b5789e97430fad26ff38aa8533f282b9189ccec1be64fa2d7b516abfdcdc4a3870415af68a1efcb19d676db0704cae192bedbfafd00135958ff920062f57b7f4870ff0cfe7116ccbce9afb0c3bb9c841bb6e6d09c455b36b78ba22f82161f08490ed2cf1f3c0008aeff27fef40c43801b1d"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "4d9654e213734adb2bb5c914e7b24b7f8fa8cb019349bccc331517fdd7c63420f6dda59542bfbbc7b1f251691425c166753792797aa7c16474ec79a0b844a080fb951a27d8b0b9d5000e54b0e928bb3cc3588290016392a802d846c5872107c8c355c962d78f7993e95c25a26bd2d84a868abdca42c7b967a8fe67307c5295ab"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "8bfbc9545d3c8dd90c3de13107a64494b092c2c9456aa3f2aa5e2bade6a71c4b1df78cd3fbebbec441c01b4640fa8380390692aa2ff90de7e3af89c456ad84403413d05c29b0266175893eb3afb7cd7d691e1ba3e5a54a1a13e5e3fd6578087aebe77c527de65dea0b8801570a3dd2a708f8d0d1edb43e3a4bf60436b9f88466"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "dfbe6f882c8b0c42c3229f29cd858bead25c213b5c0346c3052f844b045ac792c81c1df5ad6a66e9d4f3f7c11096f069f5fc0d1d7da555c6e685cf672ab2a6599f01605f50c93a91d6882f5884e4cf3e9c41a790b0c44247150777f95acf69312b0ed68f3c82693e6b67f0e1ea5927c0eeab3554c2c157181f4634e77bcb088b"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "da3e78febfe4c72621259738abf6db041d526db7a942443e94383e21673c9818afeb3a40b28b6dc190e7a3eed97e821de37800d20bf15815a07c9bf6f305bb68df96579f5df1d0396a45a190e425782259ee5673b5aa13f89036f129c03f51f2735037170144acd22b09dcb409b9ca2bd27b53bebf384bb647ffda195beb3a97"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "d65f87b5905594493a1d1ada8566d6fef74193b2e66b1d8c72f7dbac2574cb07d07178ea6c0dcbce03a32dbfabe4c9d9009eb54ac9b7c024a4ac85ac5b8986470bb11c39d1b51e953c4ba99bbd91382962e877a8f33ed8168b342552493c41cd3d01f4125459dd4f05d9def1000ed58b5c99c9652d882d4c3ddbf258b3aaf749"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "4c8ad93ed06934da7cf3f399c2f62eebc654a4f4952f19d3c6b857ded2fa13a09ed78180167d62c16f0c893ed900a33ff22dfa5f04f571ed23247c58cd247cff7ae8c1d8266ee2e563f3dd53768d51c2c571115c15aa422b39d90ee13ac245b6c866a76edc0ad9b96ca07cded873aa70e26a8537de7372c6d24acb5af466bd46"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "ba37f892bb52616d65cff715943dc7d53a5d4a0ffb787bded58cf5ddd2edaaf049de7b80db185e12f25790d157d26a636bd1aed5964a5d887f5d2c5f133dc00014a245f7ab6f28c8281740119e2f822507ff8aba9532f41d1ddeb1d16bc363254673343ed3e587ccfba7b72556685ceb87df3b0a6bad26ca7c7a4f3d84fd3b8e"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "0f973bd8aba9171348a1371b82db74b7e584a9243d85b3a07759253f18e9df44bdfe3bae725f0e0153836e94a9f6dcc234c9e80832a80049e29c7a359eeb5281ab092c50c60ad2c9e2656e2f0b34843b6aebadefa3d6c2b0d62a310688fabdbb01416bfefcbf2bb62e778f23abb22c994acf427d41d15373a30d0c64f6223ebb"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "a566ee4a974be5e9181a98c09b9c84e0cb717655643fb8326540b22d884e70eff104a8313e0977e5a9efdbfe913c672ce91621dad54bcfb30cb5200f705238c76ea31b062e3364ea855c88c10acf658355c9cd9b598ebb7905e68a3dce23dde6dd77d50c00bd8148160f423c8c563f0c5b52e5aac784850ffaa5a181055d64e8"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "d821f083507540839086dc8dbe171a119f7605ee6dc81d480a273f725c1d4cd134c143194f615e710baa82e52010ba1716ae0cface42b4d6edf68d9f5c90bd9b7d338bd8af0cf25911ca9169aa5b442c36f854c6c65370db4645ce3552e93487aac3cfa7239a1abd9ec9ca2e965c02f280920e846b4945d74df9a99f81518f4b"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "ac9048a7a4f560af91b4fcaf62a14595cb9ca9ec12000fc845e48572113cab2890adb011a919575a40760d1f23fe92509c8a5810b6d05990b909dd0f4c6014f2b31b6abd805bace99816e2eda41fd7b95405db7c5c8f4cf6babb14f550d5d0dd5179b54951fff6aa9686f30f478db649b7c7044cc202dccad00343468eaacfbf"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "a0abd165a5ef8733ba111fa0fa092630222d809d8ae811f24f8bead4968b7533af31019663713ba134e7dd345c38e7166a037025eb34adcd6891c9ec941d2e3eb1e4bded1d269272b602cb9b53568b992ddb5103914e6424c75505701a37996c8318b0b6f8640cb6b6e770ac44314b866a7c683a6903f7bba07b6f197ec554fc"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "41339884a9b3940e8488d666bb158063c6a2a2717cae7f564834a876fcbf7098ecf3acbfabf37d38a8e6127b1e313744f1f896e165efdaea0b2e7673867842b9e94db0868ed9a92bcdcb370a4e20ff275c82595e4400a8b9e9f12482f014846b48216f321266ae6ae6338dbcdc41b711e483e6e3e728772e7f9f5ef95c30196b"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "8883676becdc27878ccdff53dda011e5e2f886e31e1e88d520bb161cd63aa001fded9f0656109c1507bd1ba5d3bb3e725029a236b4c3c0420a1fcfffe348c5277d6aa51bf75d9af26fdc15fc49d637b078a8b0478b5b0a9c428756d260068e5e622f193b9f9a2c1d979e3322d7f3edc32053541c6efa2485e42e99a804f94388"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "9f2e01b92bc9dd32dcf24aee91467797396649a3255bac943dd0e03c9ef416f349c0cbb728704730f3c7a7c244066a94b229a6e86bde7753c8940129626307b542cc7f596583932b4fe6ea9384d5353e08654e966a64b63bd6745503f7e4383dcef74ad4516ac25c8790db6702ac5b8b057a8fae75669b6a9e689e9211a337b9"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "3cb9557d9fe49b889319e0d41efc00cba34277caeed2b2c54fc89772c669200dd63f02f340cb6ed579a379a3fd6a568ca9d4bce206655ae4586850638ee6bffaae2bed7c7afe7353d22418d7e4f6b15e198c85b649d3e5a67f00702dd9fefed7dc72136bb4440fac58e64453e4ee63a81de4270446571b192f414116e165efc0"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "06e6fb568e366fa20d48704be40e991a291d47a464296a49c37718c1153b0fea17ac18a01ff97b32a92d07635dfb9143d011d003c9153020f5ef7fd3ef258cfe92a7a2120718fcc85c73acd34cbd50670c2e044dc3b82fca29b1017912b65d8a844515655308367d8797ae5b7fb91042df573f32de69c1842a128ac88937c0e9"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "327238fd701dc4a829827550aad98f9bcd75e9f3831c3679998c869c1dd8381bc6b74b721e9d3377034e059d6637690ba3a184ffd98af951d43a22105a51838f72cf592d658af01adeedf721cf2eb2bb2c90c68311cb267f0cfacca903c1a2a73f7228badb5d86976f5d3371fe9b00cca048a7a0b0fc4b03da11c5a098045e07"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "a1d3912e65d994e0ba51135f78844d9a3ea5161e5450d16a8cf0173a0a309a1ee94e94385dffc5e27dea6692a1713516af86df2283c8e327e60ee26a7b7cfccb0af3f4b5efec358651996b97d5b25da933b063490cf7b67073d399b04ad55c0a89f8ec36d7f5cae757dbd3d6d0f5b77f7c94e28878397cb45cfd178f3f07ed01"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "0aeda7c92b470df777748f299de6f4b2e9ac2cbe74b5488f15e6e1e38e5a625b292b293d5ac04bf60a51f47f89741f38723fdebcda4943850cfa333bdf9a80689aaac240e23d5f7cd9f3b264eeff491e391a0b8931a705ccb2d9207d5a39edcdbe739fc8c367910070f314e225de55079c5ca963b404bb7ac72358c578e9135d"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "6d20db04efb28fbe87622aad88b51d9294d33b55e7dea653eca9266caf461ff6aaa344f84671b8e06ae3cff54b315b3d3bdfaf762e168eaeb62b71d11dd371ffe141e9effa0e294f7d663302d1f7b260516682de975bf9bd873a9ae4f6f1562f9a24de696305f2f4127174d762b59692a1b4245169237b6f3899bbb1dc8afddd"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "0428bad54ff7c7a35f094d44543a9045da24feb3da97e7fbc600667faa4eec1b28c8ef3b1fed8bc247ce85779c7dec0197c901f7874b3ff0b4d02156346511799d22c5182f0f93b531138e0ac2c5645747670a5e9e2c76dbcd1b961bb6d54a99c1838bf872e28735e778051563e139c278f22ca071a7cec0ed95c29d94d51d1d"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "4bc7a3a501e418fbfb5687425fbb59d02e4197f1de865631ed82e8188ff3d854e25d64e8b770cb40bc8902a80e26349e82b63096705e900d235ac3dc44744d29c0acd1cec3988a04cd341a76dd1aceeaa56b6e02fa53a53a6437d208dda2faeb46f70e4910651b0cf9b31049e1efb20955f223957906df66a48bde48766e6fe4"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "6cb2195bbae362faa881a5e3ea3f8921784f81f64ce2d9e578030920234d0ef020a0a22bda4285d74ba416a06bdf1c4d2a4740ffef857958eeb0a5ea32dc52a9b01cf0bce3b5afcaa356bb0258befe8eebceadf0d6123453b195ecdf078f684047abe49c9691bc0ecb81ab466616811378d80271ca3c598ba75484a7b11c8a08"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "6f2d903eaaa24f3c5971551682bbe3e76fc041d418309bb2519de7bc3b78ac9ebc07048a901ab213ffefdcd39eb7bb640e298000665e5be765f886c320b5afbed99564f8e3bf60bee38ea747105d375e7e8c10f5b932847978bf6fabbc9ea2b253ca2f46a44a50a06a6980dc7a2f653840c777e5c81da1691e521cfaf588b088"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "57ba5067e97774fb26e7ea9ef0f4dae8afc5ec455d47e6e8a8d4f476d338cf2e697d938282fefa5d1eadba220f3fab2e0ed33d2494663ad0764c05f0acaf28465f5d2fea34bdc46d89a266a5ee36c4c9e9bcf497b5c975ba200f0d8c8549d073bddccd5a1474e409e3c8e4cd211ae1388d9ace40b0384359dc9295cf3e81372c"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "b8be129638e9c805359e6169b263265e2a8ec4b849101f2a321ce523665e399954ac3865ee8c85d14f3d3f24fbd583664bf09394cbc7f7ffc98aadc94eda35ca4b9614fd2d773c782086a1ea9ca23f357cb2cdc465fb85100172845d6b2906dc9315a542d204bcc4dce68d90484198e2350cd682eef9313a13df3607669aa4dd186f563ba0ae3ee054f857a92985f2694a54e1a87ed7327acbfda3e61ecbfecfdd1b7b2d08dd306122fd44268f08463306760f40dfb7634e71d7a72f1224e611"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "39272b0e30fb83671b02d1986e9ea30ce3c7d9dffbf495192235f408e2f28ea8f42aaa25c94bb808b8c9c4c886146136ba1afa92dec2479e46943d8b7c96b0b6983baaff7421a5ba44f8a26c7b2ff8940c647c7068cf521266b9a2b088b6271f3af48d6f4fa6ae94f1c9267947ce625881bfbe886b86625289ade51dfb677a042250797a6ab4f829341bcc2385ea0e2552bb9427f9391647cb23bef53877c69aa0143c8496e9eaf2475ab49746c290c73d484e06ce483df0e60e47b1bb4c66b4"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "8d0ad645dc973828bf3d7dccf94edea7b31440ea5f5ad27686bbd34293d7fd36b524d20f27956bfbc0aaf947e9d822e5b5a9d26c502c4b1cff5e3cbabdc27c77719abe74027a589b38137ebf435ffda08f846feafac434530b25f9e96b718480c49179d13eba9e20f986ac3314e416e2770d01dab69b2c21ceaa0ebf353a28ab60b2cd3708a37b091ee0cb5e7fc5cc654a8096d5aae1803fb648dbadea2a9481847be11c2fd60c6fdede268b24af4ee8f47b33cfee135b7a7f89d9421b220806"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "1b0461cf5fcc7efae2dbd53011bf319389047852324c5637985db3e7d28c0d40a2caf87f4aba79bfc9b9e44719daf1068492f57a27ceaf26bd7a4b16145ec5e7136ba970dc231b5aabbe93244137e5706d8053c94aeee2a022a5eccd25f695dde5d649b6f19456173d39aaf6757fd46527182b0f37964ed49f42e5cb7c02494d38aaa99c8c627a03ad8f054a272cef14be6f6d7b14d37499cf4c928b86a307873d6a71645ef2c49fcb46b01fcd1b7c16536b96f8ef8b0b1dac30aebf352b5ea3"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "57be7f2aa961911f31cb34e9c6c0c65117fc1ba53b60b77bbc60b1ac7607fc299a79d62020bb420ce55ffff7c7b9c07035beaee2d9d2082ee9060ea6481fd8ede27975b66a7b5c66db873540393f703ba32005925ecab11e6241a5c7e8da39b43e238a2446495df902156df3aa23a8394009f501699aaa3400c294b1227ac6dd5ef70e22a6ccfa61119f0e29346f10b659ae8194e262ccfe390c2ddb4738cc945f7b0bc1203b43df76831fea24b1234f193c3d9a9541e72be5b593df2b0dbc7e"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "79ff385f6073b2574f21d3b28282b5e822bb3f26d51c5654142b6d5c718a4ca0d7129a142676ec4c833d281b8403253271e1f254f71f0e131352f860fcab9800fedd7f1aecb560950d6b15e1c4beb99287205318b308a12e38ea4e112f8ff45a84c12ccfe11ee6741da9a79d539e697ea9b083bf6bc06aa97d8029093c42d0666f601813a014ecbfa988b44adce9ebccad311b170b446156a91776dd8edbe92578b79edcddf11403aeccba696764ac33b75b70ceec71997085e5d858d01d04b7"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "2ad9a66e8407294555000e5125054c323f93098c33b38fbe7aef4c4350ee76147ff6ccf80ac41d5620ad7b452d5f98d197b277c53db82a1ad757c913a2c4e685fb6e942d1a0c2db092aef8f80e99c76ad02e9d0a2aa82bcba1305d2590db790f8c138143db1545887db744b2c3e2bf5308c1fa1b9948553538801a95a113b282623ef26e19eaab22b8f31126692d650e945b9c195e2e57cc60607fc3136a79816b2d9d5bfa0d8515280d4e1619e81eaa17ab5d9db4625094fb6f6eabb94271d6"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "13a5d04406300725b9c7ef91961257d094d08d8f40e4133fa182f476a209bfa57082f231e87c87f8286d0ee7158182be811ae5a045295d5955f2e73314476566ddea15e35c02de35abaf83fcf405e913e5f27fac0d288b7959a9612d1f75c81763690f869826352b3d1d6f02b4a8e48347a256a46c71396ae6fcf436bf59cbb83164eda84455d357a046576d58b72a5b4e7d4c9a008bd2d6006d17529b9c4b2b3d20de77805d41718e26865264b80cacb16c577782f1d4eecdc303a03f1f7eb7"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "eb477c90d46bd1896cf4930cf2615140e029a743f0649ae586eb04d51f21ac5241744b5872ccebc87b401487a9c859176c9fc8200b2054875e2c811a56b5d9468e6d3a99c058b1c89547f55a3d7b1d08852f673d3288544aab906e57364cac817728dcea18bc1193e62269e04112c19451702cfaa46fcaf716db14f2e1c9b8d312bdb15dde506945395bdb0865f22ac0553f827a27719c2c703a83c6cbfd949d06d4eb560a8fddff052fd6f0a20f6cdeb2909211b75f8182e58590d069a2a271"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "e4f7f0076b4bddb632c470881bbffe95a148573a75c014689eda7acf5e57a546327d4bead01da0b093b2c4eb5b048fd707d27a4baf85d610e4ff8861feca57e1ea88ff0c4b803c4b0d62ae0cb89012b0ff041b438e49a79680f2cb30722a5a2a3aa9b516ff2a02947ebe27186aa9ffdb35e15328c0f49f172af51f764258e909651469ebc6a59cd98c996fa3417008252e3386b9a2d059d3c67983ce62ae2d052733c55732320679eae156d0e4b89da1022bd052340819cfcdd7366c34b65a01"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "8d2611d4c79f6b2087ae8bc76610905c361b9fe0a6629388197b4293f9e14ecbeb377206e4c1db35cdc0ab163dc5c51e8a7370a059e9ee8014d18ef0937f7936879d7825c792180a4f10a0d46e0a954f093d703b82bd076dcec0b8a66fc3be9bdf79ce4550c453015dc1c7397ec1bfceed040a4d777915546b9cbcf1eeb13eb71ac49c235e69cb07c315d529442f4863d61b7d5caa5ce07820edf649a9342211a26f8280dab9c5dd11af0752168326f8e8d5e834ddba3bce063f011eccc8f46d"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "e12e3540e7f20fb5533772e91b708151c12d8440ba9bc994791f5916d521726b53969063f9e13114ab89de0b0adf119cfaf19dd74a65b5eee32f39e69ab6776dba721adb2a8dea1495c51d5984b6aa2b5d216eb48459103907442f725410f53ddd5d006762dd3167c2da3bdb19f07d27e3fda712f444c093f4c8126d40ca7c381ab1d3875294df84055239ebac5039490b597366b58c2806e52f1f259c9ed16f829f41851b6ce7e390ea73251395bf940997d47bc323657160ede973f2342b91"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "90ea80b14758fa12319e54c446e70bf5bede38f5d8d8e978531e6c54c567b63a0fb7b870ab963f979c4015c27714dc9292a48123c0a1f13896055f6628687040459488bca149f410cdae4249ef918f10329e902f1344a666fdf96085b7bbfb086ee2f4e5891904f945d867a50289da018c245be31b684bebb8dc367d43d53448865dc005ffd58e2f76f1ae8ac51fa7ad723db9bf3b78b82bc5b0e209ed216575009c27a6d46bfd1d9ba35fd50eaf4a39afd7b3dfdbd2f437d0d97b5b08e1870b"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "3ebfdd69af2a561bdf4315d015d397b8af75f6c17a3e6e1c6b52bd6e812bd9112e1920f6cabd82b996b1b48be3aa40e447d29689be7dc64b8548ce5414318c4288a6ccee97f55c523661e629d3cb124b97a042c1e77a9b039a8631815c535c8216912ea47684a7220a63c198ef2b80568882e153be8fe92ae4c786a5fd56a1e64fdb235663f3a242c121e59df3a19c29282e647a5123583378577925f399560f6ad3b2a4c2b18ca2547aab5e3ed4030c6585fd2abd1d65fc720bb30354c966d9"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "7fbb42d2bc1c3e5a0f66fedd581e5ce3e555f6f1c736db24b6e963d2ba72118cc989e2969c21bede87ff3f4209f2b009263b7ca3716a9d3e7115dfe65bad1ea2a1013304696248dd2b1d70764dae248bd1e9d49623826f2c6640247cbe8bcda47d882e298f30bcf3db1f496c26b738848e9876e4b70f0ca8259760e919e5c5c0a2ce3d05b5804a94b67f4c719fdeb3ce23657a26635f867af0271736ba20abb7fff18bda006c48d9c3ed774365d00aa0340a04906fc07f00b18a572c96f986f5"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "b9b478f6ddabce2b1ffb306e2135132df09585be16eaa5182b8476796c10b0eecaff9b91100882f5872e00e3d1df2df40969ca4d00596b6d6c9c13d3a956dd8d91decbd3a48728aea05b8f7707414a8a5de3bf0becbc20ae0ba852ee7c4f2c177f3d95a4a8375ac50e11fd2be4da1f94608786fc84747117604138d06956387924e5d7baa2c97e25d1b0125122c0a13981559db80ac2d6848f4db163027c4484a51ac5095f5653b12059440dac69970b5680e017a7eb2861c857a607446b9420"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "d1060fe7c6d185f09c3c1865cf6beaf5dc9306f2f3646bbccf19e47fadf98cfda7716c797d15afe506d573f19163ae2ab0ed9964c7b125dad7841125d38dd9f430b30fe5ea0d24083cb9b09f241b0700821cb5e40dc781e72ed95a2a8cfd33da065c58db8b8166aaec385a5db04f473198fa3b27d4de0a3267b11769af1178d284fb9ca6ac2ffd03b940509dbf2383838d39e0d5c93fe29a6802e12716431e25965f5b7b146663f4e5567ac4c3edf8824913d26ff2dd03830c8a0645adb04d7f"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "6ad0dd65817b10486fe56f76f21a6440359e267eaed42efd149363768eafb8744b23d5041b9b8a38d62ed614217c034dd6021b56bbf6591fef3f3fe94b8459bea1f4de143fe8a8df26ce11e979629ee0b8708253dbb30efb17bf5697874767fa6076147419305e9d2b8fd708fc7d2ca97faeaf7d555dc65337766b1150dd3020391e7901c5b170d3b2311cef2f849f5a6e7a0b513f4f9cadf8be86ca9976772ecec71065660974e923eecdb273408bbb438dd16e92c3a50521d44b146d5a4e9f"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "3abc0bb585283d073261513c0fd160724f18cb6754d09cee83fd3e2f7f75b5f30219df05302708aab7ccf88457afcedbc0bf822a9aeb81280cad4c3077e352ec05b2146edf2a5e60d4019552d56ad9db03775b7ce532d7a75a5edeaa45193a91984d129e420b4c660bc735204654ed332951ec701cfa6093772608c448caca2362351cfe02178c2e10c1f4889b42c30b807370589d30dba7d0f1fbf19f9379a37377193e59fe18949be88b7fb7454bfdfd70d4431d02455451ab041643349d38"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "bc3fb8fe3e7a878f63a2773776be6d7ea625036ba977abe44e4734d9d69b34c6d988f02db4de9786e12167c6a8879cd17f960b1cd30241c37c28a6517a44c14c9cf720ae5669bcf00ef562e0e8f7187173d804586d715412e3b96fb6e2a4544521e7a8c88c626d7b9e5a2e860df0e73e1e7aea674d6b24b0738c87636fab9a871ee163e911b7ff6fa056b730c9d6d6b3c22616bd14bdd7440e3958b07f462ce1aff8e0e774964e33e2ac34ec9cc018b6e487dd4258113a2797916e50e80a607f"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8de0a726953328ca953cf5c947a7c9f8bf1388e8caadf5c3d7dd8aa7ef69ad57fc481f9ae9edcbd2c5d9d5eccea94736cf5be8eaa401588ab14a5e73277525ce3944a4e27172775af0d386b9ea00f7016cae8537b32bfa74d454ad7008db5f82c9986cd9e6312803dc60285fbe38a4cc40a6b9304f75968891a95a9e0b45e589f2a7f20e177f275d5ffa064e629b4df7fbfc9e004dcdc27ae17994a9bfc1db7c6eaa44842fc7916d93182a9b573bb6b70c593c4a77087c2f6ca4ec851f964450"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "b1f009cf8cbd1cd2466b157f0dd94bf389fc43202fb8d4028d9a22152e9f20bc24d7b5864a1e0ba93f21f153993fe03ea40f208473200f9abe72fae78cbc23866c47937e6133ba36753f5c86f6e98868a45897c9782779b5118b5d15f83c9029b570406d86ba4cb64f4724de0ec073c63b5b7cbd3b551a31f260d70d1b83150d5481298df0be246d055aced5eb952c4f63c10b1c73aeaad9088cb295c2ccf67b85dee5884255caf9d43edb8da9240d0f81a77422edce7ef3de6275cdefcf3e99"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "a1c38eda275127dfcc0fff930a922fae94ade9dd62c5a06e7c31cd1744d39432419cf980631f49470b6e252a920a9227ec92ca4c49a922eff890095f9898f11b3ef51e50f1c44db53ad3cfa58d2406377e6f7999f18b2d5f8a0b99531580fa8b83e542e196ef779825d3c1213a6c0400270a34c9ef8de104705c093b8dcc256374ca532db77eecaa5c7c6cdbdade86756a1c771c4176e5e1fbcd59de5cfcb506217d66bf5e7ae5f67955261a4032cebb1fd31bf1a48e6fed6ec287bcbd8244e6"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "9bcb95b7ac8607d7b468fa68640c9b03fc66e39970b96789b61e2dda56ea42b0c105e75e8fa3bc57e975381a348d6bed64bd3d0ad7d3c4ed608324751a6e4c3b66fe755763c8ae38f00d8558519512ef089284efb144d8cb9f28f597b1ea6f5a270a615ab6575e857dec62d66a398c03284160cc910f6f1c44a6497a9ed7c0d8d99bf3f35dd09b836f5a3c552068eca9b7eda3721cef01b9b861e3eca2fe20341272090004779e5db2da98d61ef1c306e7b7966abccd01fd611ea6931955d226"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "d1f33c4d0c3b127cfd4c711aef054e291cb9a9b7b769d6dfcea5ba02d99f0807ffb63f097ed7b5c5e2ad09578c749863a96a2bedc3e72738fe887a4a1fae6ca8c8e722c8dedc065a4df9f5c38e950175a7e0de9008f3a9a67e3413f9891e2f8a70b29f55dd21d2cba16f8e2300ef7c35ed1e42ebfbe70645230ddd8c067dae9069ae5f32937a207e0e7896e87fb399e6c93bc5bf6c2504fbdb3ecfc281f8da29115b2ec41eb9acc4176e311fe8dbcac24b57f8d656600e5fb4095eb4bf90b6e9"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "5d8f4485ca79ed8d487eab377326b138b29948f477d3da0ed934d299e2b06b7d9409f5c312b17321fa20b2c66ae8ef9d084fff2e8cc596d6d417887e04e2ef8a2b73dcb1a04400cdec16af177f8017047c3ae546e03e6fe31ad3bc6d89862d94229baa49f6277392b252d4f715c7a41e41a6200a200f7343b50a72e5d7a3ed0f264c03d381963ccd16777e3d9cb4187e7a5a9886680581c9977299df16d06318f5bb94cd157954792a71976a795da8e6fe088802823b6ba69359f08b9e42b891"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "4d98f3a8d8bb66578c89245b8a095f043edcc4429b0fea86eb673c5f0da52acf3d16e2af500c18b7b53435a98222d0f9fe299cf4156651f629b24ec525be4c409bb583f371b2803485cf6ae37849a46ebef52895225e9cb671e6c9055f2f3e3f74cbb6fcc222361822552191026d372892a531f05f3f81884213d093b008c988f01941b9a9208c2ffb325f2028e5dd31710610bb7d48f5d0b34f4dd83e26e9a88d7c030c4df0e031ca99ed46975d0d893515eb84d86cf39249dc90bc0e08a7ba"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "03173d361263214f6d72afb3dff674613ae3b9712ba4b3f0fca1193843dae58f38ad514cd5f6a46d0a6ffaec4fdac08897d0cffdf6e20c51a961df24ed1982b426e218fc52ba8919f60fa71c156717a5ed9f3030cd864fd810acc9343ad8b8f441863bd0bf3e80e5bf874200896f0abce8af141ce61f2d5e87db31a0f19baa54e41f75c5df29853e1fe678318657a217649c8fa2337c13b0e514fbb916b5747fccf7b6bacbbf0a4d7771a00d3ad88289bf854d5f9db6fb8954332fea68e8e746"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8f404e26dd9a51485d1546e9bb7f56f68f0927f2f19b8bc0c4db218f3df28e1c9674650ffcf9645e02d1f44d98404c8ddf54438bee61524e2d69091f76a99dfdf796a83499f8870adc182e55712a642922b8e98ca33ef0cf05903ba51f1be648220a19194dab35082559d5f1c087c6702f102f526fc0de1dc98756b29e817f4792e3d0ff40a931002c077e0eaaa5f63a5a1be90de3b9e6800803cf909fed91059e83f4bcde83c6e528808e20c000009bad95f8030ccba058a21073247c3bc3cc"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "3b96356882fa7825599f7d5295d9a367158d4729887827522fbad2f7a741fc031a9fd66f70a9ad398eca4054ecafdd7da2d821b5a940d633d2a7540c18ca311e9cbdef6fa5148bca6bd2ddc1a6b4f9e8665b49042baf99de02fa86d68f0c0f4d8bab3f46c7e65b6f9b7447140cebd230a8aaca90d1f6a5725dd3e85874f10a6564b897f83a7b2b3a07cf758ca6cea8383ecbf907a1479fe8510f22b3614b133bd0bcacca8f8daf4016cee0cd2f9f69b628d4d45ebf5d0cb545349f6f94b0e4bc"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "ad5baaebabdc825e48072ef1cb22bf8d697f5a86a2cee89bd0313f7edb02cdab90e31b5d83a33322b8987c0c3dc54b110c9a2f0f56429d39ff96f7cfc7fb2570de2efc918f792fbec177a95bf2362429b936b3c65187b13c04304bb660646638cdd3a9be2e4d47a11b1ececcfaa99fc43359e5e4cf435730ec059203f476a06bf997ea7044a0a8b2f55cfc82d24c9542a0a9df9a584a148386d8a03266b71f8ed8114f3fc0dfb534a3b44778c40d5a3e44d04f76eab464659d53204abf97a8b6"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "91e47e671a2e9d0e68ac78a8716e02d68ccbfe350677ae53ba1b0bbe085e71e47090653a7b7d18a3d80a67e4023ce56ff59d9565838f9c0c74503addb3c9787977de5286cb6b602dcfe0721fc7a3998ef018b56d4a4e3d578e8021d08599ccc8895df7a9324e8abd2162e81576fe19ea678bdffc86660fd7a180e96ed872710e6ec96132530b16afc47427f91df4ab95300633c028f433ba0c308638992e61ae8c2b6b83af10e622fb1cb269cb453ffa4a67d211f23029e093d4dcb434361356"_hex;
                r = true; // result = acceptable - flags: ['SmallModulus']
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "bd31c7a02691d2d9587ef6a946ff788544ccadd4b2988ad62086792a6bf96c8616b4ad13317d2270b901d0fcd1d880cb8f52fb87304a5258c11b38dfeae8df670aeee7ea1d0d9df8e00e80847e41e5989ed402d44e78b30fef17b5671d3adbf8685e4dc204499ecd1863e1d5aff28a7cf66eadf31fec9236c120add13451522c647c9832a672cd64d328c1c322183f4661d09bda60b8dd5f0328da5420821424afdabb1a80c5d12763a1b0238cd89d0742bfc50b6a2fcb701d824218f9826f4f78a23a2b5aa42ace7f175376fb6cbdb2bad293ba583d4d31c6b8f9029e46b13689249855f505756e00e225a6a45a18769bd8d2b3a4acb9f1c23d3e51882561e5"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "00b19d8a2b9227ab7ab63e9c5dab525e1908635115c5133a2d89f56ceb3c7a846e1aa5422f866554561af81200edd66f349516267c5b42b5566b0c5494c9898855d2a55184ba86e36c1f758fb3f573d2c8902e086c5af308df639107433d862f3054825d229afffd2b6c4d66bb424e1f1917219cbf5e2feb2a15009b211f8135c0fc764dc577113bc0815348b14525d9c766f4537b499080747ef28d9525b27f2a5075b37cef52c38a537b3a384ac85ed2813207b126a048f8c034c06e08e7c9a9a5598b447669ac2b2e8febc5c04baeb5c1b073d379e5f6a636c416746d5c04f7b4a3e5f9489de27b65307bda9c082b24873c75024d4599c6fa3b4ded40389a"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "1a6752d24112f3faabde6771f96d63409fc8cde9b47325f97ecc3de0d674a0eed7960b8fdeaba2921ea0ffa17ec341f2656d8c748f7bcbed783b5df1cbc7e7174fcd2a9a2062c206e0892ed1cd6fca9cd1b68599c38282c8976aff6539856e99386cffbbac707f71498fb66355d95aa8d2b0ef622bc89a847c5c6c9973f1fb047b32c88aaa8d0e56c9da2d19136f2f0f4ed215d9f1555fa850a713f1dfdf7c988931200b81691c4ff13010674400e53396098355754f9f26cc9f6347c0242282bceeeb304e95233cb4ed21dec228354d0b80e691ce9ef2122a55862f50e7a6b0ae081bf6097e1c2ed1efe3cb78258af85f0139ad9d5050b3f186776ce5871f21"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "93248b4218cb8d188d3af7f5ebdc9badbbad3dd5540d01124c36242677905c59d4e61a1906555660a934e61536f3df3c1ba1d7deea33889cdb223d848a14337590bb7df6b6060351bf6ca0d831918dc333f150af7a60649585ce2b4f9402bd1790b7e0bf7c8832ca482fec7b26d3f1c754817dd287055360744eefcec54eb80734e3b226ab54f95a057c74e0d3eda41303984faea940b7040cd3e9303b2e22a3fa2e3a0d13f6c2b81d92be3518f9027bc0fd099268d18e3e686ca2eace1f5c371e34c3a4910d8c661efd7e25255b253d9a14607ed22ae0076b2c7012b6c61f7ddb92559b0111e2eed0ea8d0529007cad3fa6d4919e5a00c3d8ffbd2658c6de7a"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "201aa402275f3c75bfd46a1f099c0b5613e862461adf57d3d94a95951d44a81c0cddd86ecdfcbeee7c890ab999d05ea0795f4bcf7a62e2a1807599b33d9548a8bdcc6f1d0e8c06243995e64dfd9b2ecb7175d0062660f14d5da369fc56dae52aa9c07e18cf8314989973d3433e15691c469eeebeb05dd3ad30e8c496819af126572b14f73c173620049a512a789f0caa515b04100d49b43b1044d70d7eda9f68d7fd227586897bddbeab4499faec6417d67108c88f27898633028341426774c3b3c3bca8c4d3e18df8c0b07da56e6c00dbd770f3e848777b273e0d7afa5394ef29a54c3a6451e571ed9933b54c2456212c991fe8c5cab8bfcd77a7c7521419fb"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "253499849e32ae10395edbdc3e54e1c4ec0ff26b607ba3ab4932ab5627b0f26a8384fa91b3949db51a363512dc9a64f40ae9f27305fe397def3c6a17d5b7899580c002efc960bbc6fc005dd9fff3c7a69177c9ae8ec061b352a8fe4a342c6b3258423b8097b26fb743417227babb537ee08f15c3bbfc538af8c1b02dacdaf18d1c62fc8d120ab50d6dfa0d3b63eb316ac375c8d25bdf0c653ca5bcc6939ac7ecd3c648f6d56404be99565b5f0e1e70dd3b440b3d07a4848182c259b471a7ef2f34fdba259933cb58c7828c70537107198e98be174f45ad0b2da87550ced3639abce8c9df2a5a0e73c403d64e0e0326e5313d0e869c3080685c4437f659b241ef"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "6143e8b796bffea36e9d58716e3e16c73a792a60c99649f954b0ca7a3b9922def9a115517a56f0f9ee64230914431ce5c2281829eeb245054530e0780605385b6b0876e5f70691c6041f6fc7f8e282998038a20bf8a2c4f4983dcf4fdd4e10523a6bb799951244f385aa2a753e6a9d89588ed03dcd65d16ea605a06b236197345fd9c25a72c5168bda5454a2c933a71005e881fe7495c82b654836873307664480b4e43e842e1a9c616734881e824afedb59a08214af3e15bb557afb8d73f7574ebe294147d5183eff6a53051567825a96cad82095d830f9486ad85601d4348d5ce92b6afb07adc8efc22041ffc30acddb542381fd584584509d37bf49db7957"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "998a9f7b1870c3b05b22f9bfbd70db2ff671ba7c8cd89a86f180ecd992b790cfca1b4e8569104e233ae605fcc741a8ec62268f39372c3323b0ef7ed91ab271308eca524592cd2637a5f2d77d31961e7f44b101b61360466044e208242a7dee9024eecedf22a8402ac971e5297a94fd96506c090dc695b36c5d798049d9f583660bcd0fbd7c296f5e0b57f0018317697b7926c4bf8e25cda19bc52932de6ad9c7f73e18d73e603c090eaca5d256dd06138c3366e89f3cad37807f456af40923251a1b69fea2ef83b2da1da869417a1b5b5675387c1483141697435933d0c2a1ece2e9308f760052ab6d96858f7f6521844ee9f22aa2f12446a2c3e7a559365be2"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "c32cd0e1441fde8a2896ca3a133735be2d1010777cfc739afc77b6daa66f367d4876dccb3021fc22c25450a68d6cfb1191d485cbfba5ec45b49286d7cae2bdae553f47e10b94f867abcc6d0affc733bacc725e5ab4de1aba19a39d748b4c1355d5a6a710a52bd04c0c24e7bc3bdab8f3ce3ae86ecb31c4b45e10b40ddb5fdd40cb2411bcf5b1d392e1eef959cff2709a6e02b20ff3b4343641a6b78599586edc9b673d9f3f5e9d339ceebf96a1a31655876c39fcb00b1c3e571908c9b744765047abb5c23ecc42e551e13755e38cc9a13e1e02bcd5dcec9c301fab75be3e1a8ee9c42981607aba7855f4bbe76c8c160e80468b54bdf9f438b177c33dee30b0f5"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "6ff210ab793b24026c588295e2e5d1bc475aa24344cf1ef7000a3a24d09f7e16c9b3d8617355d0aae1f233794d7e390dd442eb93c2f8abcd5925698de1347dc5c44ee6744409fd5d4e07e78b477fb3b44506eeb70778efd7397b632a233454abe0559c602173869680ffd7cf0a6b68ffe4b358d8db527649b6bf4e237461459103edd10357379e5312dc10977d631010b23d608c19e1dcc729ac6bcbe3b0c032e38e1036611cc9214c0c2dc9587530eba67b9f6b4ac3b4722efbe62190ed906bcd8f971ac6c072bd30f4b7a93522571a2d427677f052faca80a21aad123e5624f11762b792088ef12c39beee64022ca1911a35882f8e7b5b450b6f2b76bb529e"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "0ce0ffadde896697cf5c838393e394eaa6eca678f21a3b048fe1b1713478390ad6295a99bd35c0e9aed5c97382363c1a7bfb587c76fa4acccf4829e7a13dbbdb21811ea6ffe66e23d915c585e655e19b1206d3828b94aad5b58f7c15be783070b381b5f32d42069b55061ed6de7eca89e895422856808798e8479206b3415e597d79a05c93c94db34c5fd4d711768c9a7dd35e18b0e5a23748a97ff6449443c793d674bc94d922d0595514edad1065bdfd39a6954047c5d352f61ea88b266d8c3665e4452a1cb2f5319db49754174230716fc02886b01f795b249e4057aa8b7997af7b26045225384d619b82a57e9ea991c40a902e74948c3e6b8618748d41b7"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "1ccff85f2458039505056afc45029f153d761e5abf7c46bb8a3646a1007ec218feba50c92b97e1aca8329ee98e0258bc9da0826611d16abe1bfece7dfec2c07e681f0d2480f79164c3306bc3de10b89a9be73cc12b3ab9924a02af9d5932e8ca4abe99c860c6e963db22717da284be6aa6e8a6e2a08ed7b3d9375455bbdf9867d368082a8555d5cf46cd7fb4a10be36a7c683471f499a00d62f9050c6f632ff659535913ae7214c6583e949325a8d7c257caa53752d8561fb1256e19f930d51551ba00fa4c16cba64000c4f67f81883108772696d12a9fb726b883752f23c2493b6c9f9d2f68835c9f787a2eeb98092d526c3d1a8b659e48590dfe42bb52e08d"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "bac5e1663853e0a4088543eaf4cdf36e8b1ec7b52fef42081d31e3f294dffb31276834807c4719a1cfb8c7ff8db7020b72058d4dc481da66ab60f40db119cb57b66726329194f8a8e2a22499bb53c1346778b9a02f92e015b82b4ef432a13c51f93999fd3bba3723698bb0724b2cc5f91dcda79e29c5eddad80b7d4a08e3c549170952eeb03188dac1c81bf37dde0378f66fb81102aef841a9a69743f4c78a8e31556fadf5af56d81afa825d37d2f6d8516795abb7d5804ebeab2fe2fbafd5ae355dfb9864c996b147bb5f1d8c1b4ccc3040b42876a27c83df2068f1ae264ba557a6f1c5e0436c04fae398ad4200f5d1d5a872f771934d4a22a1c7785d4bf347"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "5c19e84cd12131e91ef4ad45d57c6a239f127b202bb5703c3c3b410c9738d62e902f637f8a09fa6c6b7380fa4084def5e0c64794892ef6def44f28f448fab60b475f876b55a62ca09e6fd98ced80bbe2f3b697c25c143936609f4af05ecada3fc66c90567606e0d230c3cf7420c4910b41427b721d3213d9509757c855af7cf75a3b96b52054a57ec985ceac719cbda5dc8eada64c5aace659651b4f358f5e2f2c09d75dd0cecd279af7e2367e02c0172a5b8df807d88f75562465c233618039c0c0c109a58e386fd22dfe3259536e37905a5d9f77e4e52ce6d9ac14886d0eb55f52de0d4810ae92583c1eb7fd8d4c42bc03f24de9404697980ee68860044e1c"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "51a7039a70e42c6fd2b38e2b0ebd7c28c11c5ed1fdfdf375b18c6f82a7a8865addec5868fc49190d5d92bb1e0a0ba2e5302159e78832e6a4682ad68229eaf6fbbd41897bc38bab84c82d05e0349591d48b8d66831e9951293a45121e0eceb85c29f3a1915abb7480e33c7a7a4f9358d038dbc95b2304bc9e9d1f3bf50d52ceb5d34175c4e14da4ab57e4ad6c670c949b73471c626deb6b726d6ac3e90e6b207805902251fa0f1cd6c9b3d2f42163efca8e15a1ac64beeccb9151df02e244a80ec73b731e7fcaf25eb3812549244292c8a9fc65385225155288e812b9393932a539bb925811196914c86f0be543418d32c187b2ab859afa640e9ecfc05fe9bcef"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "9ad84538eae75e7400cecd0975aac5da3d05f4240bc480275a9e503b72edf8bd11748d074802c3bfb61d30a2ae5feda7241f5e0d78ceabb7a0995bca46949b357fd863c1f6ba786140ffbb3da07897e58517809a7296e5b7a4f840a75a58064946638f909e5a388056df1852c35fc9f304a6c224fc75fb32a602fe4576f78e6a56b1da650749a87396fc3f607eed5739a24ec085ff16efef54105e02f0bf895f8bba7839b98d051d737e43b7006723737d4f64b7c7b59739793766fe62a659472e1694b8be22135c734071783958dc6555683761e47f6702ab5f0efb1c4923a9e9da8af724257450fd88b7aa83d5a94e141c6cff9772cd1547ae529fff736e89"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "a2b451a07d0aa5f96e455671513550514a8a5b462ebef717094fa1fee82224e637f9746d3f7cafd31878d80325b6ef5a1700f65903b469429e89d6eac8845097b5ab393189db92512ed8a7711a1253facd20f79c15e8247f3d3e42e46e48c98e254a2fe9765313a03eff8f17e1a029397a1fa26a8dce26f490ed81299615d9814c22da610428e09c7d9658594266f5c021d0fceca08d945a12be82de4d1ece6b4c03145b5d3495d4ed5411eb878daf05fd7afc3e09ada0f1126422f590975a1969816f48698bcbba1b4d9cae79d460d8f9f85e7975005d9bc22c4e5ac0f7c1a45d12569a62807d3b9a02e5a530e773066f453d1f5b4c2e9cf7820283f742b9d5"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "840f5dac53106dd1f9c57219224cf51289290c42f20466875ba8e830ac5690e541536fcc8ab03b731f82bf66d83f194e7e180b3963ec7a2f3f7904a7ce49aed47da4d4b79421eaf937d301b3e696169297b797c32c076a12be4de0b58e003c5123051a84a10c62f8dac2f42a8640008eb3c7cccd6760ff5b51b689763922582845f048fb8150e5a7a6ca2eccc7bdc85349ad5b26c52137a79fa3fe5c29ab5cd7615013219c1941b6708e9c3c23feff5febaf0c8ebca5750b54e3e6e99a3e876b396f27860b7f3ec4e9191703c6332d944f6f69751167680c79c4f6b57f1cc8755d24b6ec158ccdbacdb23107a33cb6b332516c13274d1f9dccc21dced869e486"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "8a1b220cb2ab415dc760eb7f5bb10335a3cca269d7dbbf7d0962ba79f9cf7b43a5fc09c99a1584f07403473d6c189a836897a5b6f8ea9fa22d601e6ba5f7411fe27c638b81b1a22363583a80fce8c7df3e40fb51bd0e60d0a6653f79f3bcb7ec3e9dc14cfb5b31ab1735bca692d50ac03f979dda92747c6430f8045efa3513ba6e0ce3e9e35570e1c30c8ebe589b44192e1344ca83dfa576fc6fdc7bf1cd7cee875b001c8c02ce8d602769e4bd9d241c4857182a0089a8b67644e73eef105c550efa47a40874289395ac0c4e02fd4ba98e130a4c2d1b95521c6af4a002ac3bdc6e52122ae4c08cc3da1c896e059acbddec574ac0432f6103dd97273d8803c102"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "264491e844c119f14e425c03282139a558dcdaeb82a4628173cd407fd319f9076eaebc0dd87a1c22e4d17839096886d58a9d5b7f7aeb63efec56c45ac7bead4203b6886e1faa90e028ec0ae094d46bf3f97efdd19045cfbc25a1abda2432639f9876405c0d68f8edbf047c12a454f7681d5d5a2b54bd3723d193dbad4338baad753264006e2d08931c4b8bb79aa1c9cad10eb6605f87c5831f6e2b08e002f9c6f21141f5841d92727dd3e1d99c36bc560da3c9067df99fcaf818941f72588be33032bad22caf6704223bb114d575b6d02d9d222b580005d930e8f40cce9f672eebb634a20177d84351627964b83f2053d736a84ab1a005f63bd5ba943de6205c"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "1758eb94588e6fc4f50c1be1afcaa41027869f304cad513b1fb12c2f446d63cdc05c4830a7e3e630da7b2da4f7867cc173bf6420f9732277282596de41ded32e21d0cc31441174da8765f57419c7764ea758f55bc17646eb100c435d1ac0eed6fc7ba6de5f832094ee2f479979765e05ac9976788db3c241a9e32a0da864f0019a87646ba623d63f4411af5dee1be9ec488c7e3e1b231479de70b9ac5f78a17b1f4120aece45f26c07e7bb345fdfeb05e14bcaacc614672a465fc523624cb19f66f9c6c3f642b832ca44cb25176d679f0e05606c3fed022cac24c2bf960a406d48818e3eb7ed53b0446032469047dfed95fc18088c92d91d93722c47f88163a8"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "513a5abde16b5e0ecb8659d3ca0845800adf75cfc4437d42fa34e7aafbbe35fc5984d3560cba938f9a622e932bb6162b7fbb6cd8c1cf8815f28c495995ac18cdbe8fabfdce29c17aa021df192ac02d080d7c5eda6bd4c99154178a9d5e1cf3ff4177106315f4e6d74c991b601069acd60b55b3bb4dbf6316c35096a487d6756181d3394944f1c742a2f4d608ce4f6abbfb72347ad7d342ae15dd6d1049fbd0ff55f4d7c43ab805f81ff1fbe9256b5c78c2de6beb787f4b6d66d290a3d4c4857368aea5f7ebaa1296020c8f9e3670441a08038bb810e853a654e44316a4e52428745123ce2714020d00e55a9eb82f7fb41c73d852a82b003670246c6ca2045fc8"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "38c042a00d6f27742a46f1f963a7b2e04f0eac637849631a491b8e4e58fc721c6ce620d5e705dc8e73409c3909c1c68b6bdb2b30f882cf2797e65030b38c4e7daf6fef9d1f115c890086cf54ca3e7c2b21dcbfd1250ed1d925810970f17dbf482d1784f296adee9ace6979075c1e12f5580cfb322e8737db9d127d38e1b99ed87ec49448a18a6fee650d3c27e4a2a86a3d6e3ce4fe64120be60872fa07a3f78a112715c167fb6c900698ba1afd824087a4cf733335c4a6d5120e3b29bc42f3b3d5db79973e4e321e0910a288d18cdba172d060283c4f4c6656e9175a18b756b7d06251e9060bbfcab04978853eec6032850a0e757bc0c61ad38aa4eb6bb6d907"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "2ae8d95b19cbd64d0e343ff413fffb85d8e6713c06ac8a1ceba7f3924fa740f8d2b3e120fd71f22711e795cd6468c5e263b1a5ba6ac6b8fa9e23d2d6e7243f510592a61d134e68b8ead00612dbf38c5b7302abc3bf33f23e6d4816a6e3ddcea6482566e84f57464f7d56de4cef0b2256ef21874dda4c131a47292ff8ef853f93804483c8e6373d39ca3a22552e75427b812b861de6a310ff4c366f6f6604116efd9770170aa423554c4ebbd2b5c0698950e66bb5b7c5c346285d9f5c35146255736b6e818e8e77983c93b21e7f60b04a7a525598e7fd8049b181000bffc7f3753a504370f6bb70617ac8e914deb05a198a5758a459c9fcd2fce1aede48e8a852"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "cda6fa5ca76bfe0492ec57e0a3bfff7272dc8d1e25ad1fb338aa050f02c104e63133d6b5b7c4985ebbae9ac036a5b9c03074d60aec8e25baf392a0c430ff05b88e948805d3dd74511d8885250a7b574215ada015c559076686e253ccc96c0815b1291ee787cc3363b4f77d930eb998d7c582b24cea9ce21de9722791989863a27ebc80a00de5bd2f9228775e5a4ceb054d58c9be36a054336971a13642dd9510dd696aa268db3aab2299d5d88f8e562434d1427094d3df8e72d1ef69b4ed34d12bac375223b2a25cf227f735f816e85e17239304769a6082154cd15899fc1eaefb69b748a3e5ed24d38372597de3e4e2a27b951d6ac7db182d6809d8ff511b7f"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "761cf7ff1ecb38e7741b946896985d34ac1f0122ab449afe8b086b2310f730056d7c5107355b2a17736e10824046192490e2bbe239b49d38bcc5f34d0b817c192775a40a57887343ee7558d48ae90876b82b6690435dcd9611126a99a27c020c3c0f914ac33a6a36fd7198dbfae23033a2b2435aa7183568c7af6cd7ce30edaa112e44fb88cb1b61ca555b4d5320997a5bd3ef02d6d049e859646bab7cd46c9dc6f3c7bed342ef74aad8eb4dacacba64628a83431d4954f7c8eb2cff220481242aa04167970a33d3eb65462ef4f4c3ad5fd4c8c312ecfa8a17cf01f5e418c26840f6b9bd3e5335740290e6b8c79998933f22632335aed0c56a980feb823d54f0"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "ad686a97bb6564e4ee656f12ca9a0b237caadf6c99b869afc7a6bb97115c97e2456d7672ea7a7072f4921f6cf8f73f00222b36a40e8b5eca409136ccf97013a4b0f07a6406b846f6a548d800ac19a07c1d9164b1b04a8606770c8cee4126d23abfa7ae8f1e4ef9bffb3debdab03a650ea4824be759f849199faffca95a94784157dfbb69a7ccf8cd760cbf9c728d2183d1d410687ca35b8fbdb3b6422271408dba8ed3c419ed0f3661897b0a65409b54f0f6a609d0dc48b9c9282837a02517d86e8c3b48174df2f82e06adb5bc6e86e4b75569137209928ff750e83a4bab7fc071fa7b01aade8df75789ee726ac23d6b324b662daddcb2f27b6f486ef3b7db8f"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "7f5a839a46d78ed9f4f469a5022358a5e43c855946b3409c66b6b982c07571f68c9f3dc5665a93f66b6ae4fdc05ee416a85b2fda6232a76ff3841d7f99c301b3ae0637d985000cd2a7155e3f2d5aa558af2fcfe30fc83fd4df731a200f0b6ffb26cda6447a777f918c9f9fbff1aafd759f6c605c83401e31ce25c8893f1306aaaaf36a702a1fca1c421f284e12a6f81de723e6eb7b04fdf4895e9ba7c7732fbab82c4072450d612d153d6c362938b50774aef8d3b27bab5f3a3809e0e9104ea91b0ddb9bf9c5ef3cc58122982a7c0c79e9c026b7bddf28af2d671ef3ed6407886cda332335ba1034c6b4efe61635010200e1c7c4f2951ae523e37e9df7c86f35"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "521e5af2451d73b61b7af2d81eb427bba3911a3f2e61105bf38e15c74196c8e66d52239936aa1a7823606fdb4d243b32dca2c4a95cb3b302fd34a9c0879711095b4d1e75c59d005836c2b9a05ec1daa63148841b285c10bb70f4683994fb0a598b927415ab2004dbdd6405d57804ea142f21600d5bf5487f3f7419ee2c2790a122199cff03be53847cbda28161f37810f046df1c54ffa9e3070ebd1f8b08b3293c6a160ef6593ab497415c2a086cd5242f3509b375f70e12435b01c21bfee65f2156448831050eec3da4df7ddb04acdfd89a5cbd5f9afa75a8e3871378933c1483c28c1bf405c42625b673bd0de4737ca144285af3981fcaa7302534e8c36e9e"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "b731e0b201119fa34f59d4b32590213fc8838b45ff6b207d0efb69dc27c4a418a01525e05bf32de71ae5022c727efec973bc3ba7cb8777efa41fa1a99b917cf316543c192f389f2d67500200ac54d41f691393f1af58832f01cded931818feacf65d87ac0ff5e5e6fe3178f64a3a710db308f3719fb904a9a6499a0886a9766c3eb51e0e9ba2a00057151dbb8bf7bb23b88e29c55e626ede9ae634b9c133ad443999901891d96f90c9c559e783043cd3c9fdc4aa56f65884f2f4ed29be1da21257b2e42bdd0ef5520aa02ebedb347726ea85897bef9b4a7992fce9075dfe56abf35784ce6a7e9905ae56125642e627b2d330adf071afa04a2466df637b8eb706"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "2a64d02e8e4abedc4cfd69f9256e0cf15c3997b0e242dab583de367b2112832717065bbb2b546ff3347d00b5f90da57eec34a6397ba202072bf8d3d2416420a48f5bbbdc299487f45ef01063d520a63f2528d8bb6b1f17b2f7b85d672908c2718ea7ab8bc7144945bf8947b87754b20ae8f5f252a06b71158af7c49e9eeb5477b4dec4d7811e06dd3026943656c6b99d41eac564c3212360d7f123d2f885631b162c086ae1eb03bddb481afea40af58c6d2d822fed48eacd887192b93895d51814ca7fc1323992494a65da4cc36cbcba56fca8fd1a55220922071b7e0f1bd9ad583dd84ae826ea68b2041a2e931f98908fa1b748f211b543f3766ef6ac5f0efc"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "44b58233a3935a1d488c5d2edd0676cb9fa00be0ec9b0dc9464a6b403268d76dc6ce623b2402ef96e14aa6c124bb9bb3220f5ee4df98e834a1b253ed3ecc3eb08799a9b630412ebabbe825ef0a528c6fa5e837211b940b2f92e4fc8374b1ca63f5e4feef95cf7d4d049976096762c659d99317d900ffa8a1b09c10b2109305effeee8acbc7d50201020c77ce8b2f498324f47bae84a2d5ce4899001f4369c4d6520600537908b6f23ba90ed55f6c07cd22d3bc5f1ac66f7b853847f041c7ec999027db00a99188b79d5e1c9d4e5d79cf92267c106a514f18a9e34a6dabbcc572e3f6ef654023c507bc769a8a9685ac2f85dfcfe57bca2fc0f6a5a149388c0556"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba749"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "26f2b1e01e80c01766adcf56263d6c01df403e9669e78521274a37de7a006644fc1957fffc0276d2a93b3e9495b2a0e049a95789cec16989bc6178b0aa8825e83db9dae5852b3fd169d205d58f4fc9eaf71f389148f703e53a96b0d99884724bfb9193bae6b4a597ef303c8f6ff1e17511e23a3b3d91a191f22c08d5c1a52516ba6110e6d19577610ac8acf96fbab7006fbbc6dcd7318656e976a6f7e25b8d3257b85260e14473314ce53906b65f43c544d3020287ffe66a4d9ea82e25504b549329590b9ae74d7fb9b836f83b64b212029bd6fe768610f816fece61fb451250fc24d725bd0ad56f512f282603ca72755783ca70280a7294982a1452d89740e8"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "58aa35d98f0a0be06186122b803b2b2bdcc485ac634ab1772af47270830492f2e3967201529c32353edb0eab5b98182bae1e2a99f065f54d5ea0d7f1e286cfdfe68635dece589542e04f6eedc425f268a172920a4212668a06668af463e565d016825f16fb2b31d9183a2c9c6820516f48d3a7f85b64381ef4e8676f0cbf51caa8e436a3e9450874794beffa26a050fcb5c48b98df365effd6c715d78dad2f2596955f87725377a52bf3944ebc02f20dc4888c2ba69cf39446d1e4955ba1bf52f60132cab956d9b3a770a75736ea43016b1005a6580814e6c910d4ced592385b80b81a1bddecafef0db7a53df6725481c181f8c42a71408c1ee4651b70d09093"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "2432bad850926fa58b1cd04c3e6c31373a6d81f15e69ed8c3dc27c904b625a235956e083f6dc51b66893505ae59d3ebe984e358a457bc1e2e1a368163ddca9252fd0c75702eca0e81009696790f56c94ee329b54bd22a79a5b4b565d397ec97536a4c9b88ef2b275a501a32274c0702f33454c06645400e6a3ee683905790bfaa08d053c39573872542db4e1cbaa6a68b7e40ac20d12384d1f72c082c2326bf42a665a56dc72bb853480603f4e7df014841c48f7b7e2b8cb5bff85aeea3cef2a7245bccfb74699e3d8024f29c635e65e6f74f1322c42408edd92e8d0879cd9adb37b416d95428a760d9c6652f0f211576f05c50245f929447e81e9aa5385845b"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "aec1eca91968d08b4bf15b9c5fddd9e7a6a20be74486502380faade04d84d9a5916a6c0ef2dccfd5ac7397e76a301096732584e8442f20ae80627588961cdf97e344e131d79e6894be6fd51b72122bc2654d00f943683a8db630d35c6874ea56f908eea64902f18c0a548905b3c13114e3526f3d6ed39061724c8e9df498545ac7f455c37d2e05beecd47c15181161873925049bfb4a671e4d1901a75099c7edd6499268229353073a598174fc937f856fe85f950e9059496348d0a1d9f98aa94208d66ff3f58792ab0afe27075b241a636f1b5835f4a4b330c6f9e032a736119a1d8feb99f6c22f3490a82a65710abc3767e81ad70a230ac4b1db9a327ede40"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "053313327ff30cbfa78b59ebd4de78cf5b74243bf03a30f74e65b2239fe339f989a90609a04bbb6014af40bfbdb33c5f58b077a25d568747de477709bbb59f16cbe3a3ace7698371025c5af106c8714ae3f923d243b6f75218fdc1c442810c2c90db16288335866dba2fbf195c1c54ef944839fa465388411f94e8a0c9265663f92ea2a9d2b17e803768a39828b4aa7eaf6954feda78d90ec94eb1c6bd7bd1dbd54a3e80185018f18746c2d61f980ebaca6375e5d37b37cbd9e213c52d2a00d146f2f3601d42b1d3e41323338257d854827aca44ed28fa5f3fbd46d4aaebd7b4c39b03ea828f3bf7e40d58316e431b6aa1209448347de678ae6e1d860422eaa7"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "60c7a8906d8230d206b22d377cbb35ea97d9ee279dafcc7b60050f160868137afb45e357e8c9f5d8fe8bab6ce8952179848cac9dda57f84fa2c0222e629d2ea265df3b3442ef41fcdd1ce0223def4e3987738b8b56b10255fee391f6f1559004046115a8f5c610cabefdcdd5020a41cb4c1d377f90a0852fb4dfaa0ba25463ef997db4442e47a03836640ef4504e377656b130477a7a4356e67fb48b716de4542599c93334c58b8b00b71dd20746f6e3130fe8c5ff803ff261fa6b862134b421f23e3420a2c4ad2aaac1bbef22d32cf67eb126b8c68fdee9e3a162cad68afc9826c0af273c40511022c9aaf6126ef879f3d27bfacf3d6e0add2098cee47d4b96"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "2837fabba04e65e8d4f140e2575d557fe41e6ee280cd371bfe3f21b14bcba4c072eb0f156d18f396192a5d4bea5849ce6a4d1a2854395a1b05ce3e7aaab379f65449e080e490dd2a0d17f2e46a5e8c347a4f22abddfeaee4a62127bd0164a16c2319cb5cffb78a34a5d1a6828f25940d11446b689315bbac60a50a372c5b81a755e40306e39ca2f2be403e99d2384fc1d6b761f57a0ea8987a6be50f397082e6446f901add850738e1118ddfc87b0e1af2eeac73d80ea91f68d779f80422ab3716be5fdfad58d935256a7d2a5b7b32ece4e288db9389b3f48bb3956af9a7567aafdf9f8203daf466bc37d62749e36a6b6a3bf1c4bd2db15ccbded7eceb83a4e9"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "c6fe23792566023c265287c5ac6f71541c0994d11d059ee6403986efa21c24b51bd91d8862f9df79a4e328e3e27c83df260b25a9b43420affc44b51e8d7525b6f29c372a405104732007527a62ed82fac73f4892a80e09682a41a58cd347017f3be7d801334f92d9321aafd53b51bffabfc752cfccae0b1ee03bdaff9e428cc1c117f1ac96b4fe23f8c23e6381186a66fd59289339ae55c4bcdadbff84abdaa532240d4e1d28b2d0481dadd3b246557ca8fe18092817730b39e6ee378ffcc85b19ffdc916a9b991a6b66d4a9c7bab5f5e7a3722101142e7a4108c15d573b15289e07e46eaea07b42c2abcba330e99554b4656165bb4c0db2b6393a07eca575c51a93c4e15bdb0f747909447e3efe34c67ca8954b530e56a20a1b6d84d45ed1bcd3aa58ec06f184ee5857aaa819e1cca9a26f4e28d6b977d33916db9896d252d1afa762e287cb0d384cc75bfe53f4e922d02dd0a481c042e2d306b4b3c189371e575b25e0005a164cf69dd0976e4d5be476806ea6be6084e71ab4f5ac5c1b1203"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "157ffb942b1363b5989ec4beb93fb0187ef016de4ce055620825d13c3dafd4fff621c71920e884ba28c5e98b328baac29ad4bfc4d2cae2f0ecb9d1b6c9fbdfc385aa565aaf6c5b3150e085e0316e21d7d440a873074e5d2700d961114ed420478647a4769d832691f7a004d934a89dc249c9343341902d5d0c3d1a623001265634216beacd5f756821f21c3b58111790657690918a2eafa9e85ab1ee44edd3d8bb89e892acf411ba9eaaeef88eca37dffbda72751c117364fd1b38c840d7b42318fcd011a4449aeffc2de32836d3a4f704d4c8ad4e078315d0d1758f098f2ea749ccce62aac592ac4041b5e733ba0431b88332a39a2af7f68f9bb1f469a793b280b964f285ce5cd1ff3adcd7dbd464a7c9414ed45791073f08415be2dd9f01dc2fec8c3a26fe97d9778e2b2fccf71a1ea5e9ce017d2d46778d7e37bb832ebd5825b3257a7852db5cb6c132bcf9ba3522a670b0e866585444ed3601fd32a922818ef6611626eee3ea99cfcfeeaa4c370567cc65e0479bd35e091b772d7445cade"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "631cb4bed6b79dcd3827879f6d64de3ae17e0fdb022be013e733bbfe0031cf204f0508ab87a2e2bbdfaa16cf24acc96b3fd2e72bc4a224428e515d6f1e0ea6927eba6ed7282a959e5df5e52eb3be9a39cfe139ea2fa45c21eb81b3197eff655b918f7c5fff6abab33945557a922063f9600a372ae7701db686f7e1fe4a6e804a0f624331fbb59536733bed3710dcacd22ec74b1a1386d045372853cac91130703ecafad7f6f42ec1aade5cb865339743c83e882f248b0db0855f487a6d3b55442f67773611a11813ff46a58c762b1bd70b5e870c3095507f23758e90b3c84526f47a825f0ae787acfd3ed349ca6786a2e84ec500c6042a9027a994c328c7a6868e6a81481b294383edda62773fd224af46e782ea3f00468515f6100486d94e818afca1bdb81851e62b3bf4f9236f061afafb3e399b93e6f6a295ae200c9bba5ff5aabcac8361c84f2e69aff8a8a21720b900d52ea4bddcfbaba3a231bb9b0dd48f0a4ef1cdd255b3524ca0633d04907ab672314c5e3173108313ff4a97df3772"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "5819a699691c01a7f35f0bb1831a1cb65631ef693f7c9ef89f1e8460ee2ec312f6fd38fe382b3bf4db8f5d208146c32c5ed2d3b13105743767a73529bfddb5753c8cc13148d41db97f69ea1dee0ef1e1de990ff565f633bd3cfd315a7dafc70aa7f27d4f6486a2f1e2711e7919c5c73c518069338c0ac984d75f58b00fb0eee0f7da6c9c84d97955137417df8f20c02b7893b5cd929ba37f6b3278a1bd35748e14086c5f7100abf2edebeab5f767bb83d999a61cc27531bb67e44a92004fba9944b9c5f770bc66671d2efc74e01fbbd2885c5175a1fd72b91937c324b8d99d3592bfb73efb9641b87949266de441b61d180e141de510ae0cdefc2160df918c08c53799f050ca4eeb3a8b6b5ed35b8b59d3acd13a600a8a137eb1b8c1abbf55f3e99cf52d7092d1e3acc08583b04aa25a052668bc982abf060ffb17c1782daf76fbd69e7fc9510c5c6a68bd525719be5b81d0f2a8b961f1aeac7dc13aeeeef9986c7a47b34f8b96167d79f7ec458fef7345c1c31bba599d09b3fe33e738bc7da1"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "636d31d8d5dfe0fc6ab01ef2ccd4602dfea62d386b002c429e7e846e7a98d0cb1d448d25be039d5158887ab46a9dd49c41537a89036a065fc10329df051e5f2e5c1d4436e84790ff6db4d3f31575e5f0fbdfcaee625722c5492fceaa3fb29d0a865200dec06e117b04753ca9450a7ca7f7d1a1176cc38ecab721864413a0d7a22d8fc1595b6cd0032fbf154fbbb31b56d3bf963761ce8ec9fb38bba3419716d0d39e976857e79b1faefd5f5a2ce0ebd94968da1ec3a387804694d90f37b34033c7f70ccfb26beffaafb7bf56c1b8385d489217458e0a68b5d680f9fa45382fd1c227ff3c11e3ec82426ec648a564f0e886e5b12e695dd2fc8465bd9d08731fb140084c79be64d915bcb4ba10f1edb4c37e35231753be2d9f339d37d7b5f22c91584a68a973f9cc469a23d3b5800157dbd72a8405fef4e444ff01f7fd23efa143c1887504e81773743843d8a73209a1deb66c5f305df539bc30e871332e82330e5b66fa6ea253b2b64b4c9781011d20e80ddd8cb83916834eb8fa696b0a4b6bcd"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "08e0ae3dc0d16c927c423f12a87313afd1d66fbd5d09f48a4dd1a8b52102bbdd208284cdd692932869803a5c7f041a4492ac2e664bb6dd981c370e0c79ee3f7c5c6dd37018986fc2cc618139fe3eb85c0616f0673403c4afe7cbca49c1eff27bbf6d7e541b285ffff20b80bf61dcebcc4250068e25ef5a8e7c3306e49fcc2a1ee0f500a3ec603b472082f12ce4a6a12a6ac66cd4da8b6efac0796e9dcdc66c095a6282ae9a32ad274efe63f43e725410e6ed4c480828ed876b76b71b1cb8c142d0c7a51dc202af796d7bb55cf544dbde2f564f31994911ec7307015b0da2c51abe265a04a74b9afd0791a68e725cd7d8b473296c5d948157c10bc4682f74d843ce72e9ee8719a7a49d9de2f982c5d4490451eaed62c305eae3d0f9cb3493bff056a0dbca8579b7b41dc8deb1becfd5abb455634569d58c5b5535ff1356ccfaddd14e0f9f7f69a7ae9cb9f4c0c9f661fde349facd21f0021423d3a9ee5031855dd242f27009090ff0c15d1655317383231799b18c01fad231385aa5020990f41e"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "9858e2557c6b99fbd84bc7eac3e31283a4efb351ff019343760a1e282368938e29ad902d3eb6cb29b35a036dfbcc7e06d2f1d15548df59ced35326295375bacd7a9d28a01b4e8acfb676d80b6295e19c6b7a259df56456e1df72f6a746e9cd31fed9b79b35d7a30a7aa257e9e8ac60ea886042b9194e7a383d1c9f71c84511faf6c96f7ae0e690112b26bb60cf7bb10f684e4fbe2a3a1b1c0caa9b1bdc79fde23fb758c2ba57880a4de461ecd2bc696689438183e2b9724fa68258f461bb4405425620a4d95c87ddd83e04be381bc743b05d26ede2ceff8a858636baadf56ef1dab54080da0f516307c579833717def053c8906d4f102448ab22693e7f52d5850193a40ccf0d68d1303953771a73924e4bcddd8486e1477d96250bf6b480a5f4b822822183694c52a2edacb331564444f0335d3b17d511ece59889b6d961767a3192d7f081caf7e671addb3757451776d4bd3b03f7b689843dcd59019ae4f292dba54738a88b86cc6ce3b123c61a446f4878b627a7f3585d8ab7bca9b258f10b"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "1294490626bdb36a31c93fa7853d93152d920b022f1b473bde3083a99e11aeba8c03218fa07d6c4a5f8b2504d2cb54505c40130fef5a2412f7a5ddfec5e2c8b5058f7cbde7ace0ac01c7ba8a1bd897e8974d991ad2b95c2f03100a34ff408a788c70ab5ec73b5356a4e3c7beb44fcb9e2f3f25d1c974ed962b148167684351dc2a223a174c9744b092071d58dfd39c38364f47d292651e7806ad7962bbedb64739d7ea298f0254244790e3971c15b861c95f00f65532aa1c77fba5c04ad078525128e92ed2b4f1269ae744547e3efd4ebb63e9df844df152a098c47fa492bfe0f1917ec973867c7491f64c172cf3ea1bc3f97b42a397e6ad88d12e150d3dbe360071a3285d6a68ee6e736eb4d7d637c649c2f545259ecd430b25b38a1618d69a4602ca8a2a151066f12c3807f5dc7cbd06bf095711e4483cb0a89c26dd9e4b0b03e05beca349f601c894f9a245aca3204584a9bd844772dd87b83d481c8df18b615307eaf643cbe856488c160e077458e899755301749d2d27bc190d68a5da11"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "a07887f373378196b0b748cdf31c14735ccfa0f117acafdaa21fde4b6e7559390b834e7b92e9e1cc9d49fc0fe6cfb60429652b4bf9a7768f71fc4271ca6fef4e431192ebdc98630bfb94c5baf18b4cf7881d84483e4c44c22db15a9627705a0b42a26d6f3d6009aee0d2a71bedf4d4b0ee6b6fec2f16e1277ecaa3bdedba406473a476d1688df0fad1da795526c7e641981b4812b05b692d60c60b2bfa424c8b620f40dc9dba59e2c710e7ee750b3e134c1f71f43210688aff17aaa41cdb5668753f0006b1cf951bc5951f4d89a31196985ea55c0966c3662bcfe4e4cd34f12e4afd7e5c4a130739b1017d6a583882fd72db1a67418702c8b01353ccf75b7b93faec0e0be36211d5f2bd910e1552323711bbeb73858f899cc1ec063ef67d88e0c699d5a689c52106f06e960f09d2a3cf84f53bbea2a473edf2e6e0176801d3fa1c2d358e1e5a26f646ac93796ec1fadc6991c0ec19c9dd90b25a2dd3bf73d2cf1eea8867f96caa5a2df54973acb2a2da0a1367ec74afbb968f517765238d1769"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "7fcd504ffe34ea33ae23471cd6cffe52e3a51a36d9d9b8512cb1d2bcf4a6349ec8d19ec319f21eb089511482a2e449dfb093fd67ece3ecb527e0ffe3bc93db2ac96001c1d5afcb137883b0cffb2962b4a2f0a6ecab110d8a636982b685f6302216673431a9f81cdf68b7e759d95e7bccd5d308a6f06f1095eaa1fe89503c085331c06a5a7aa65a8e672161d3e32147011784eb7cd752211c603adf994aa4db668eddcc1f28e96bf86f1a57d1ddf499a93f7d91821eb6d6b74ae813359a03f3f2b77ef47828032b6a57691a502f78595cec29c88dd7ab0ffbe34d96989e43278915b9051119282e1d9ce4f412a3865e0bcdf46020a225d78d636d8def2759330bc44996826db26fe50bf7b9eb4f5be1fd1d983f90c94a42a24af519732a9f2696b2828d4f28bdc8fdbbe71a92a454058d25c8b755f49126ae238ad0396dc4d4417577ce436472ea3fccd55b96cbc1be2e61d98d2904cfadc2b9917095a71bfbd65ed06187f992581e5b57e8308b10980edb791ffc1513b80221068dc3ce1c3d59"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "5ed2cd31c2cd198f7d9bb1340818a1f832f734f0962759ddf8fbcbab7565c0905798281c734a53dcaa6e224a8aa825009e4422bc93578691b266bd0ca257816ea08d4641690f104f93908e0a6dd032cf311bcc1086ea5804bcd91f3638a20164681561242277aed421b3417ba93649a96b768c4f2d297da2a433d0723033bb826865b35d459930eebdecd68afa88c9ecc06cd0d699f8ef3085e0a6deb954258cf54cacaaeefbd1cf64fed248c6e45676b796089b115229645e5dd1078f8c64150b9f4d4d439b6a38c0f4d223a84c545712c0b002a8efdec6f8da91ec60b7b2997c6733ab7257ed0bb19c6bb634f1045c6041fdc59885dc9bc2ca885987c40b18ee9315e0ac7d15d3b7d1aa1bd77322d43759b89a279f144a141a18da647f73f8de1b46912f0bc61686e6e05d12c22130be392f2177eba82bcee7e351967208f0b270d1f68298773c30e4ed01dc16e8d0df24510778f0ba0e8d92caac7ab4e3e7b81a09b9648e696c2c2834e8970fe7159052ce51603c92e30b40a1260bc17067"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "977e97ab0d16233a711b22b6c0f1295dac753e3228e81e4393caf9a6228c05783cf4a8d9785e8968d3adf84cdae4267bc743fac68dfe3b997e9b6dedf19c8dcb4dd7904612ffc6aa56f5227240152ea3736d62ba18f0ecf5f7b5095fd95819262275340022a498095ae82105275c8a5e977927c681f095142d74e1a103a9df38bf51c81becec8e9c624d537a466447c87d8d91920d42ae281348db81f1c241dfd1ccb0d210017459b03bcb6256376158ee51bd17d366c4c61abd0bdfc13bbd0caa00b8f9d57ca27c7de84e5f381c22dca83b6812dfa71a57e8ac0f9f050f29d102f9a580e79b27826c767071eaf9e6d39119e38d22c6c3854367fe819e6aeea71cd278b317163ed910ee1cbdb27ac4e20935ca7a58333bf023b662ecf3ce50a54d4d20e6b690b4bb1e23a5670b454d011dd1d7640c20dcc4a779dd31bc37966bd6ffa4c88bbb8565924708e4ca2e71d78d531d7d1b81988f2897a5f9ba701ab51f2e9cb860d274eee477c0f06bd8923941419a78b7e019fcaafc3d860dd755ee"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "56709e7ac1d1b37f162bebb32a9cb9f86c8f9473e5ebeeff4ce5506642688f0256b5f1fb06108b0c3bd89bf7956e07ac22a4154ee4bb2cf5672592852f24d1eb46211f3a9dc55c515fa87db83d5a747aba9a0b8b3e07e1be26bdb462a3dabe7312350e6814cc857a1cac7ec6e1789f69df392d13fefc49acfb3463ca61dc59f619f34d75de7c7532a1c29228a57337a139a08bcb376ebeea36fe92d098107cc57c1ab328226195844a8cbc292dbe31523a842c5e222271d1ff98ca8ef5985bdd7f8c0c6f9f1a582e07ad46fa64306cafd2ee768baea1e2cb5aa42443920a6ec40e168e5de50dd2a94243f717dcebc9b4ee47a5128369b41fbee068f848b8a9069350dce0b83e6d5a9a9ec66521b11b735ce4ea3d8c7b4ecd8695cd87221d1d7484c9a893cddcbcb304fd203e7c2120ea5104c0d3e8fec59a6e0d1c44abec68d98f6409be5da8aa8800a93f457ad6b085cff25f7a51602691f8465391276e71d7068977130668aac2a533444bd6cdf93d8808aa44f3b79c9930e276bceb33dedf"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "62918c23b5be627ad47921e80c8e17b16ef869f46950d2dde3edc55e09015af3adf54fdffb81be0c7825eb0d34700a2c0864bdec51267beea4bb0db1a36324f296875422661436915695d83807073cb56f911b81ca98da18d50c55dbfbc9da7aa611a8cefdbe45b634682a2beb9edf69fdef5d8fafc0c07da65c0fd0bd1ea5779f7be630b0cf55b4c68ec9e6709234daf933eafa209795146ca3d3e31d338380e91f38d84bdee51c2d678e826e5ff8d3346ec471405996b4541f711c6c4319bf01c8e5d5c79a54144c3963dbc5b4302ba3c813d7234a684afe2ce3d8002346291af1a53f9629d24df957e6fac061b2f68fe71a5a218876445b3669dde2a7ffb327a7f5fb5664ad6830b5faf57ba9be1a0486ed66f6beb3e48d05cb062142379c610b457002fd96d91b949b4f45491c7effb4c224305392720da3a16d3d1bbdc63cd8f923b7a31363b420e150cfe327e34d57729485f8746769656c247318401ec584df70580380f77c5e4d5afe9e9e8f97edaf19f197d3c49b17087e37e06227"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "2aa6beaedf46b42ececf75c0fb62fbc0909397e96022d19bf2e5ba0cf0fb932632c46551287354bbadd0db12f5339f5f316908d9526eb61571fb54644ebd2a5cca792a8a0a09da915e14ca140631d7a5367aa9b15f26b7ff21bbf534c24d2370f0fffe966f827d36763b4f562bd2c05d8f0bb77a0afb23bc97c553b7a71782e5f11ae3c4790479bbd5acb6f5b4748d4de6e42e475565688e30471336527497f90007fe3e2d616061702e8f29805d2a948f1763969e1f9ed261edb81338457d3c824818cbbed75ece77a1a8ad153fecc94ab5c551488da042849ec7aae7113e376f9f143a95a7e9ce4dad15c0207da963328bd6de98cbfbc7f36eeacc92c8c321aa0a86db296139f4e53b77f4fc6f2b084f8b317f80fc3ede7f5f2eccf58fa921c874b43fd21143217474a5d4e7c900a534df99a1ea394d793fd0b8172076d8f8dff24fd23451824c2dbe95ba46b0a1165e464698ad016b7b3308ef540d2e2ff4c747376b7802adb7d409ab0bdfc87b407a7f130f1c8a52281d89859e67e0f883"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "1e7d1af86754f6434482e5817930d9cabac8903547e184aab1cc156c4c217d9a2b2328577e74df353e0bfc95221dbf18b912adc0587a387ec0aee5b77ff4e1d9d9ff4b0711d37fa21b7866e3aeeb44f7bb4df43aa5cacfcc4be7f2be77f8d2a890e279838455a2cada2fbbb9f6bcff5e39ee1dfd17bdf96bec4f0bb066fe3b529cfa8acf48897c20ae4c622536cdebae92449c761aed868581a17e3d4482d500f25e65ec7cecd77574c86c38dd346ed0887294674d8296315250cb404ca144a10bdccecb0b30fc5c2d5843f350d03a0a99f861b138cf1d754bd7e61d8ee03283c04a74c66b07d8e153a11e8bb47d16710d186704b11b089e5a7cec2fa7b5876fc25df8d58b65b125c3e5ab4088756b4f9c2fe44227c478aaab4db5a17dbbae0a5c548854f0a7801b7d43ffb00940aae99da12b6520b8e53d0c1ded21b209924aec202ec7fc75863203328b66e8ec426f121618e5b5bda0bb9c967321620885c9e1142366d1940389ef9bb1ee57991019b38cb685a5c86f54719d6d5bc9d5a108"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d5245"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "16b880609d1cfec88b79e4a1eff78c12413d7a79ea9bfaa8b1552a2b05289d8126002e61e1bfe9e1d4434494c4849c716f57040d62398a64db6b4ea3003e3bfeb8427ecdab11673842bdf900b5a1fa005fddf414ee8c5221ed4b4234394c9296ec4139721b7d229a819abe018b6bb200f2a9aa144bb76be44ef095edd1d26610a9590d88c487bb531b2d88dc0b89216f33dd58d42d2ac045a458ddee2569ddb03923585d7bc0c8dbf442ed5d9a54b637712a712ab162bcfe0da0a9b7b58c158683dc8c457877203f1da3fa736d2572bdea649e7bab22cb5afe8dbf27c50e7aad56223492a02a64e1f3f8b598213004a75fc879ab68face2366c4269d9ee0760a43e7f554d2f314981f7b0936e7e347825405a3e2e29f531429e6f9592461dff49b86ec41b0443095268dc0f5f62d0637b8ff220b5cd53bef406e55f1739ed5513a91912a25bc2c55b2409fe7cd4366802eec3d6cf315323c46e0f1db2d1d327e6b25c85cf079a8675f34af60d6629aa3766ca9e4e25bf64faf9f29f772545905"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "6ab1816307e42aef80c2438297bdf63b6992212dd870cbc11edd53b7ebaf9ddbd93daf8d62918ef87337982528962d0c758d1ba50a088cda5878c2f270a1eda033519dd83bbd9643ff61d91316f12c7a5c8609afe703a27671dfa32919da6e578935afef082636324b59d73144c944e27b7253fe4fbc74670d196a93e14e619fa4ec0f5b531237c03333471ca968f5d64c2c87a952984e69a75061a322b14c140eda3cf914e62b08f4fe339d5b72ac93a1146b1a70e8ca6b3a4099046a4835c30a6cdad3254e7944bcaa19bd7577ec3fc5969d247421ff67466691f4638e553be628124e5a6f514ab8054456bc70c756c866a7e208fb3f2239db9a0614d30387e2ec7da2cefa2e99f3cf98d8996d7785325b7dc294703cd44c10de12825be3db147c08a3d8cb0b669368c2a82abdf75d5ff749746aeae430a4b6bf4db159f0ed9cce1a618af515ec5f8711838adee43c30d8573efc49413ebffb87e034e57b1ff29f2a9d8cc4e85cf62ef40ce0c822dedf5f7dfe1078b11d0be95b02f93d7cbc"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "2565180f58745a8530e5003c6a879355d481c142d191d38fbf33e1f1f6dc65cf488f3691c6969444f54a40c37bd9be3f33ba5c65e5ed8421c228cad22e4962837dbef802105fe1ffd5a76b353d9de43763ed31b4258b131b4956973cd43f212fa899ad8cdbe0d3225abeacfa218758306c97bed7d3960aaef0d513a29721c89f1b533981eba50d98672e99923be57bda4e6818eab39e8634dbc38b33a18acf6b8fcb2014154960d79729f26cfe9628bd5c9af4f7751cc72394fb2be947db13fda1fce8c8120bb55ffceb7cb26086c8efbcf072420dd9b594b74e8352ee339b198a16896fb199957a1d89ee56bc13dcbd9d03eb307265c1861626a6447b3d5bff6305def421a7f59882a272434b54d6f33591f59bbd7c852d5b761f3c4fdd8e8721cb99833ac10ef376b7b7914eb7424a6f6fb3ec024ebdaf630eb2951c0a1841067582dad1bef509c0d55eb82b78ddd042dc937e938339c3aaf19dbd342cbb6d56562f1daf96335610fee3f551cb010748b428197d83a7187f5d85441b6728b2"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "a7ace057a106782b546816f8dcc81cf41216c18e587d8a5753ffa780fc51007196f37a816beac993023b41d192ac88cd30e2e9719309aedc367defd2893d767dae6c6148dbbe6fd4ce3636bed48b746982795dd206d11e603f77fb46fd56ac9e51a88f26c9c9512d3cf851afbfecb061bb6ffe7510bc4a8f4c17b8a6135f9b80557149834d18f4bb23822c1384a48a62ef3e3b723fdbd250d25d25177355ed361d54f372a78798cc111d6374d40062c5d4c5e43e8df75af841cab36bb15c5d4031afef9ae76670059a760e7aa610df8517deedcc6d616366473b8193fea07b3226bb67c3989778a868997371cc4f1242c77e85c2fab1c342ac49131937f16f4f0cb4342874374232ea1aabc7e3681aca47bdf358845f668a8844a7732a48075caaad959354592f5f3ec413cdddf337c64d0263b4096762a7eeb495bc7bf9868c9be5334697f7118c8c1274cdf300937955e36babc895745d02c22f1874159a33abe0cff3da62b76b3921b24573514dff80505c10c530a78b379da653dbc2947b"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "5abe9417ab18b390a23ce51345cdf60038dcdebbefc81203722b839434292798b9101604a828b160d3109541aa52f5d95f0539b8e0eab6391e59a5385bb4cf123486add3e10f22d92b042dc3be9c9a8c4f93a0976b352e1503321437129c627354261bbe00bb3941683d81b9cbe6ad0ed570df5b23b64ccb9bb5a29545ef48dcf1876b6c614f6e4aaeef1c95849908f49c041c06e11b4458573f2015c92d5549d4e51bba97e1ed6f8bf3f0440790113da9fcc014e962ffdd8b671156dc60dc197a2082204670da07546b49d3af4792818d9b0960038bd0fb274e1358de3851c0f9d3c1bea37fdfd0b3c277e53063906a4e3397e9f21d040b1965d08f1a2928079672060ffdd153b9af60530c2e567cd19963628a9eddeffa390cb66a1ee9f645387082adcf4c5c25a3823906dcab7d0b416bb7b5a934e6f93af02ea71cde8df71a57cdcf69fe8eb29284bdc4604879ed322cf7fd70e011a231f7a54c44cb99ec1b37dd9746e061806dbc7a05dc8651effae59a1bc4402ac4763ab421620d2d44"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "5bdd4aba744fd50793c2710f70c7a5ecc6076aad1b7fe1272726de87d981041c2ea1fe58527a39a62fa991fd5614df1accfab3d20f584030197abcbef1f175d9124a3b512f5baed3fc6124b18d4b3501ccd57ae3cb0187409bc12b19fbb89aeca03420c3c78033bd18bbb31738172757cccfd95955feabf1a3eb552c9f3510d9f3a6e9eb908fe56159040aee44b92ea9691dc2bf6ddc5b3ef876eddb3a34045de54991217247c644aca7238794fa63c8c73206477c3bbabbe15602241f59c4fa6101980646dfb42e8eefe8f2c1070324edfd2a6040db7c769f0c996db474d0f68e2c2f498d61d277615df445a0423ed6eef5fc10fb11882287a6e31b2524572ce219b0c7d3045ed5dc04dbafe7f5cdf18038608d553147940273bb86178b4bb4f58b2c05a45aa62ca5e9c6e13e3fd0857f5956a70b646e5ab4af759edddced019d10914f416f2a95969f3ba29b4f041f91d33e5d78c0488c48e7a85581c8d1479e1c06271e232b4e3dfcd7571783e32e6945d9e3429ba9c476474b5a689656dd"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "a0eff5758088bfd882cd3202ff2b2ed2feadcf2682cf3d5ced11ed73713e870a4baaf6942d0db6f6f7314c3e084135460040d22c29c10ee8033b9355235705db987206b24817b677a9d5ce452340fa56a53eb4d9caedacbe69aab385af2a5e1a70306461c4b7f4d44efefc6c301dc00d9ab8273c6e13e47232e84e58d66c32cdd80ebb7a44374de73bbb72982144f267717797e83d7a702959fb039f33307a6175a3ec22fbfa95e63b22339813b388ef55c98f2654b94e3dc10a791f0100684b1ba10c0174f531c91b42661011c98638a8c8676600381ff82d4dfc2631cdc9ee9fa6baf81c4a942d4105b87a4c83b837b4f42dcfbf34f8ec2ad704aafc769faff594d2ee4650d8d358a49841e0dae3f2a2e35fff3f1b869f024275c25c08b15f222b0ebb555247907b5215ccc65a7aa7818fb2ffa436ee7825233b1b6b03e4091499263ce08faaf0fff49ec56480dc9e307e861f1f9bb0f9113015e4d2c2bd430253a00d54372db2c5c43b6442aa944f0054c3cca95c4861486069a2d7dc9c98"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "956353ecb7561945dc5544e4602466078c93f28507701ffd39e2a9813c8ac8740e6ad61c955d484e513b3dcea527e001a018ee2c207c1806a96763280236cd3c820dff79837c9b709cb4b522d3ddbc9192242259c43be75ea244d37ccfa8a4c75024a2cf7cc76e842ea69cc7ca1227405b070047387a5068e4976e4b8ed5f9aadd7b4db024fbb8d7bd8a040d8f6610c1c6eb1d4b606dfd182235d0360880304d5a750603af0c424b8c8e6dbc12c3697d2d609c97547e774e2e362ea96d1690dc9432112c535258b3db2c4c32ad510d6c07ad0788357883869efb8b629298724847925cf42b34386be700f02903db5852276bee2370941f397bdc3905e30964a0b5e73602703340960c3ed6078263b611f197955fecce4b9a32e43cd1d2e5e87c4ceb65edc8853a7ee31d28e16e5adffb8ac7b760fbfc63d5f174f4d0936461dbb12c964a6b6d6cee752e5fca1ab4a9fd238dd3e8860a1d763d2019f9e7b99ed7666d4e038710f90e0093bc566987d6c0092f571376e705b342d066c54e6e2578927b92c1f0928de44e9a6e1f49b907c6aa4f605ec9c398d55df81c67373b03cc8110162fb417f96fd321048647dfcbb392455115cd912ea83351853e6a185284648842adcbd25e67174a3b93b8a64ce2ce9de0e8577b8b662ce32e2565782665dd38e5bb5fcc4fe12e4320dab7773b545a09c6d39d9dbad459f21f3e624ee6ed"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "368105195f0dc82c2cd37e8edc6ddc0c983dc13ddcf6f9db9a24b52921e5280319a1bcf797f774066d643e5c99b811f0ad9df2a3f430f4848a03ddb97e06daa4d01ddd50bf2b638935cd26b19d6ffccba884a4e7cba35830c6cc5ccce38bc0fcc4ea421347e241711a551c67923b3daaf2e9c51635d416cc2393a9a4f108f84f26990c11dbaacea75e39dc6082b539cd2c0c8dda6c78cbad12e14a352b9dd5c92a3702d8538fcce0e92e26489ea83d75c174ab671210fbc6c397be2167864b519b5136d23a4363ef773ebc140e1da4b0a788d7b1f15a300375ee42b27261675fdfc60c29bab7022dc2e624c7d1f31e278ac089c5880e701bec41f63c8f897c0cecc5eff0a801dbc58d7d4df6e860c20e61f31d9ab2d50e8fbec7471070d8ed06c4c9c725cb63afde0cc4475d3dcb7dcad7eabd874ddf7294cd9d2a66b13b6367a14dfe3827da0c6c8b9e734deece80fd79609ce5ce0a16de6610fd04a09b0b2411bae2bc3222ab4c02867838d0c8346c60589e6204b226efb401841fb95da05ff32989ef935425b943d1b5d2f8af5113491a36c60a98c90b6453144f5fe00a0df3de8d02f0f59c7b94ddc7c8895b1dff8d88f69a9a2cfbb55eda0837800950601fc9e230a5514c9674fb576df8391c51ba0febc29c267462ed5337326b6f40d243ad7d81459ecabbd00126b2142e6ba10d9f903a9918d2280c63ee84b47062e1"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "46a6c9cd78e38d5567795dbea71872ac16da06725975cee7d8839d2de665ec3b8411277f3e026fd2f9b836d788b48539755858bc8be0804147b59c09354b372713145e5a000ac15744ccd2db5795727e2f4d5f67bcab5e7cb1290824963ae88528aba0e6785989c8adb86084d26dd1faea3ae2a6175739fe978b576eff673832e513419806d206e0984d1ef0e1c8d8981084ee2ee569806b003fb7f08e775998eba1771f1efa070c00a769363c6101d5c5fc6140f102469574cd09746130ed80d14eabcd0a0418a752d5595b5f40ee0fb05f5f9860e600d75fbdd53461f5ea18be5bd807281f9e8fd6cf7eb31985206c9a5033cdea631512bffdd977fee5e692b3153a2ce9c7708a9c7d665d84762740cc9ea374bd32c18c2d76320e4893a2fac374ca7122e01e08011c351bd33725a6adad96becd44e4ec1032fbfb0c8dcf13cae9556eaf419211d0149c574b8d12ffe5bc59468c7c549283be541697258af847e52a9aa8063557dfa40404adbaa95e38ad28eba053aec3c123e98ab1b947bb774841e9040dd5409068a2c8a84c530fc4273897ed845d76dbafbf45af1a8fd2767234fac1e852453d8b7eede02af228d8b5821238a50a321490dab74d687a3400c34f215b85823424c9d966b516cccac38fc7f08769f47d66c57b9b75ea67be82508a513946bcbc809436efc4ee85f139b143c5bc15ff69ad1f3667c3f69bcf"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "43929c2fb0986fc4570a3ee7f6701b96a78ec9297a997415a142ae539031c0e196add5e4c6ec572de0a2b109cf23a42567ebe98f42cf312d07538e4a32b0f20403b662c652ba9e3d6e38a625d6b5e91cce5c810d7a02262338e144a57db4ac4debfc536e8eaca7fe08022a2f64741d66d25e3010f2fd259d4c6b00582584bbbdcde4266d86eddfd0443ff24b06cf7ade6d733c637a48a398dbb28355ffb9bd21a49de6b345ef635b68d917b5bfcb9016f7c64c444dc0036ecab8f59b0d29098facca02335df44db87d30d02f08553ffd0379b33d13d09a385cae7d63b6db52e9b1eb8fd549e0e1e18210de1d3e9527547e5c72f816eb36288b09d96db772f955ca46fc8cbdb6eea93c841e1075c00c3c45e9442d28095136cc5ce8212ed8c60c9668898ab5d64734d4d0f2311f104cf8a732e6d88fb2064cb57bd54d3cdef7c11c840ecb238466c747289233a317b73785778ff4349949da47c9b4b2dc9f89bd1fe7e98b582500dfc05dba3fa410cca66acd854669940543c22ed1038eac7f0212b9ce4aedba0eb15ea1e75a73c45c1ae03fd241662e9cb89b051939c468db3a0adab822617b5bc669d1e0226cf6b475445d9d5e77ef54ed646cd81f0952b949b7f4f37381ba6427e060966467a76e1d9261a5fe8c68398a89eb5025cc39339885b6c33dde898a159f0af4acc81461fae37f5f4c61de4a888dc4f6b1e2b7336f"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "0e207de1295caadb15098f51f5db90f9f000776055b107be58bd24d52a01d4171cb9e47a40790254f86a8a56c8ae38252f909aa3b9bbe7b7e1fed008105690d9afa647067ac122a272d30ac28213d2cd37b45cf81dc48d59e87d9ffaef6e1c9cf6ddf4ea5ff6123523c9cc885344b7e1ef4c8096bb542bc0fa5c47abaabca9a58ca85bcf092924741503a0f3c54c725c48855dc434b09d761f729051fb15af5612bdd387b4cd5019577327bb2e64edb065f713d50ff4285f1d184fe709207f809b9c38d064722897a868f8a09bfe1d33c80be0693e98d7e85600befb643e9f713584c716306731d7f8087dff66be1c4f6dddbc51b6ffe6034845cf0f88749e039ec314887c94648154f7c97235323bf78041ec2c8ee98ea7c553ecfec1f9fe89279c9c91ac6acd12ebe969da4c67fa6534ef9ace4b629c7b1de8c4ce1dc2b0f5bd7d416db6eb512a4dc8eda0322138cb7c65b9a58d712284e4aaf059db80af5785af4d83d391b7d8bdc4071636712410d1dde662478eada1a2f1f35786b78eec77b2788536108e7463d676814a91f81fd5e2084a8c1b1cc33988e73184110c6e6b0ef1de874104602eb33b5276ebbac95d91b943e25de6dfc66b31d8091961c78dcddd358de7f25584d9f74dc6271ff31294bee2cc9b2f97a2583c9b33243600500bc723b05d65839de7442895bd57a1dd508651a20e20f264d8dcb59d485247"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "0a882c367ff495646c21ef0489ce268d6c4e6cd0176bf9488d4b8edf04e1706f23d121b500b427eb8652099689429a08e73294cfd29694f9b4f33ebc8a7f9d0f9d11f114d0f848114d116ebcab828c7ed4c64d5ddce9958bd0883ae82ee2be0a185d54ae64690accd816971ea5ef80d7d601e72a814b9b61e8d00727a843ac90639f2c83cc7e2a9065ebea3e7aad3b12dd9ed8a1ee03a43e669598571490fd92b699d2941fda3af7271f8864c844f8efcbac20066c7bee682c644da2329db721ff33a7a81869a7bfb7a910fde6008e1bdb4e9ff989ff78fc0a9f43b38399083808fb3f38f0e96d4020bf8a4b329bbf81d59dffb03f5d1ea34276ddcccc2a4319393e1777488c843f9b0aef1fcab7a97e00d50f7f83bbfd30272c8ea4a5b0d7b74e7f7b70a9295d0e942e5b6e627ff8457d0f60c1aac8fe10b7d7ab1b8cd18d3904bfde2a316a83ee2b7633c3dee3141fbd61c8115f88ee7ca4b2b677d1803a1a35361c956c1adcfa8c8e10f0422eb3347b4983eff3c1c79e7da80a2e7c6d55e61f5af74254bd91db0d4bc10c3812513d832bd6a603a6bafd29cd5c062d9e3b74631f873fb3ab47e59791446e5f795d6ef5bbfa267a541d4405dc09e82c8b03f51db4798cc96dda7a7bce7ba9c679d851d5dd2e6b3735aaa2fcff0d558d68959c6af8b283fd383315762767cd0e4ef6e027020148cd3b14833cad4d92c2c9ce15"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "374603f5d4728526e6cc7c7bfb6f456bd33bdabf37d942dfa8132a9479f6e4a9c2dfee515d883ace45cf1d660190e442a9ea7590d67aac9bde6951314af90baac21bed537c774148afb7927337d626525e13fa15664cdd78dfa5e3886ee1fe7137ad5f69aadcb098a0d49475b0f76ed1bb86cbd08a0cae9a6ec120eabd55b7e5c4456bfac2b2acc3892110b7f62c0dbe7ec7e491474c5c641453743fd70b15f7a726a0ca44a78bfaf3445a979bd4df362b7f29d4ed9189bfcdee01476cf1b48c2edaf02d226b41f587a8db161bd36e6ea20d64c8773fbe8c0296b9e016ccde333b380161a641d822bc65d3b60417534072263cd461a4f77826cbd0508ea11720081c34b12d80ef0963857624d48c53748f279bf6ad338ba564e35d37d1dea27d19ad5dcb76d6f4aac62e49eededb1121e06b9f78eb285f7d7ee2cd475e791cc04c029cb76e5b33743aca3ac3adf5e317d95aa79a2f0ac3c328e69ea4692661b8107d89eeaaf3be01122544fd9d0c61511e87c6a5507c5701655d35f71586badd55b26363b51f019896c03326c72332de5be8a0f146d630a6e747a906684c7dc59d3bda667c8a92432e879f6a4d91d3cdca89b9840285bd8a22e5e5bebc32011725f64cb5fcbade8a5f5f9ba372a9be7f0a4907e40b4d06feffee3a558fd023514b504308a1d821c41955c305f550ffdf005b9bd5dfce2d16d3d09bf17c156c4a"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "401bf4e63be4259b54c5909797b2b01fca18a6f74d76fecf75535f2876079ad9ee56c653dafc3513eb02114f5c96efb4025cf58c2cd576d003f688b11458fe3df1657657ed52b2756a99b48c6722708ef11765c8da2f3b061c779f26a64fe13e4be4602d0ca2553793d36c23f3194705e34a75b9b91ff7f4e554c5907b85ecb561a8d22262aa3669cc7be2fc5c21b9170869ff52dcba46b2b1c688e4c04e7a8f099e3a4196863bd1e828fb5ea5443b64b190327622055d44ff4c9999601338e56c175c716abf8d6c2ce6b9ef17930e846745e751f882ffb3f0b1a20e68ce9083d1466295caacdce85bd4a34615d09f2051839ff83650708888db818aca9229c38ddef86848a2c0c88b86a2f5a1079dcf0e888be62e116850b7e8d06785627fca1899f6d7c02eb60c3bae0d538cde8a05ef7281bba7f35757360ffa79fdd08642b6af5aaf8c71a32aecd0e9f3d9a2ef164da1740a5c2dd7943603bafde05e38f2ba78c15c3eef13a5059f3f242f07af2e6044896d1d6d9810ed3fb8203ca4efc116e95d2f53be8c55fc1ce653f02597c0df7d4a7dd88b41c2a65e40bf5dafbef2a97e4dc3bb49445774cac283ae131c08492c9715712f998241e16eb776915f15b7e9544ccf1dc220a9e139defd63cb2951090808395ce56555a7cdab4564d82151ddc0ba00db24454f2174bf0fe7ffe6e2d9d82a92437890bcae1601dbcea29a"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "e3ae7de5bf44de7d357e238c8dff063ca713470777ab786b495884e7a9ba1dde65de7d2b5be3f2b7d1830cf6ca8ed5c05d3f094aaaeb1dd2e4b2ede08613109a9ba34c7e2bf8450225974374459f16da2c14192c637985febebbef01f0381e78d0fd63b76038f5e3d35dc7d2243963366af5d7685f1bcfc99dcb91e94c93019068353122edd03cc3e615e17c1bf1dd7c43dae86f47a40238fb594041cebdba25f3fe9593a6c329b7f7c476eab7625d17ba7be7886936b733f8dce6e6c937f588da1315c1117abd29c83895d95988d17f9fd7623960d8e433d7c6841507ff2faac36e0e19a41eb2cccdb2a2c0fae966719a99d203c924349bc0eea1374efd3e23099b2d187922016fd014087520a67363687322b90d7a890d8f4464a8c794d2a3f2070ccd3b0ebbca2b42bbf8eba6f2c0bf8008b5616ee7b81629ebff97a93a5b861989daa10da7c8e3bc7b0cdb095f6ce1185cf8fd3dca035eb3e505cbe022d81d93945a144806b9fe0ba07f3ab9c70e72b5fb77ac6e4c7e03aa2dce7c5ef227aba1acd48c1d93e0e26f01e8f1e43aa97880d15d6c924b060d1face21d03a796c86301f4a74339e472b2f96cd0755741cb9df3535077381ada84d1bc0846a6c44c8a8d3cfe1b7a9913d1f3d7af2c5ea4e67ce0a7ed3c0058206fd13ad9ccad5a8212f3ecd788368a6b6148178c7c5ea8d6d385227f2c76a047216e5e206b1ed1"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "49159682861cdec7040deaaf7ce2184e53545f7475b0c68fe4daa1dff32ce2d6ef37808866e218bb7ae2f7070ace0d0780a7640bc20dde742e25be8ca2a555f18d9cd5e5881e7e1b43544893eb11e3ce3ba8ba832d531712e0d4f4b41e148636cc8e0f7b18e749ff481abadedb3adf6c42553087fd35b13c68eac45bf09713386f3a2c6fdb1f0d824ee85e1580ad3e1b2363a23cef1add8e2f80659e6aa0bff14231d29e06afb4e7d11465545e8b7349754de170043d9513eeb72f5b3a68a6ba2dec118d52b909d4fb3018536a9af8ab9cb2c840211b06fe0492f77fa2d755d43e6266a381d45600ce5e6e16518b6b23e3810562c91f5feb8e6d8ec067e24723503112aac776600eb22f2c63b9151498a215258c65b86d7c70629028cdbd97133979dc65908657ebcd5e12c9ac4c24d9053613af46e2864929d3e9804c538c87b83f73bb9b71fdd5f8f04790761780256fa25ce6671994ed52f41656148b72f56ef9ee76925807cecc0f54e425594ddb320f0a125e1017e1d782fab6358d6d6207d8079ba94f6de24dcc4d6b1376d4f04382cf449e38d544c7687d73ca6c60a92257cfba3d37a503f49402dc873dea9dc3ce37e3bc5df56c01ab82f2bd5a8d14486e3515dce51154c9467e6925caef87c19a17c4836dc37f9f0f6ee265b195bd5da4b3b284e6aac237ee1871982a02cdbfeaf07073606dde766dc0320d6dd4ca"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "b2726a742d6a0c27d3fdc54d8460a9837f86a3f56ec678b182dc4a92a94c9a04d8826e7892e50c3cd2c03f725db8de0ca98b3f81c71489820e8da55753bf0e108746dfe7dbe85cfcab9e40d1d297685e454b819081691e6a3e8722f22228c11fc7a4d424d71c401b2fc3586b3384ee694945a4e9a426dfd0834cf2d8bd6868dd28af317e8ec0562dae6ab30cab28de0f1681019e0714e4ac82604a4118e8e99759a45faab189cef0f8a41ff44e8e83991dc08e8fb88cbba3014c894b4a8c00c8f9993ba4cf28fc2812bd2c1e86c3e0e234887dd681eab04dfba6e61db43c21d35787a4f6718f72c456a618176b84f1330a672e3562c2d87b699757819bc2b74e52f5ef331df5f38a32228968eb37665e36e8fbbd80f8060bf469158225cad2a057289d0a2012bce9a2fda9225f87b40b06792913c1b83d699a0db712989fedfae21523c22002d8282b50e6cb6b9c31cc8dc4171a2d21e11a4f177ab57b0a5045649f367e49b674c6304f0d693d40c296397d0333585891dd2d1a29f9eb101036068e6fde8e517b1ae08a35c4c235ea68328eb15ac40adf11fff1b9f452d9026c33568fefc5a2401f662a46f3c72dece50dbf5aa4e52efc29ad4117732041829ce255474402afcfb4a7e0eba18a31bff64ac2ac9a47e0019649a087d0d8f37c2fa5fd48c0ae0b2993225509c5037ffaacc618ba7b0be252a67eafbe0be70b4700"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "d5abe6a99112b6e2abe236a5716bb3fca53ac1fc312c7ada27873b0296c41db962d03ce69ee55bd37f3df24ac8529284520720170e5f4411ae16eaff06a00a0d7c72f12af5e2e59d2ef57209082d3499f3ae50c9fb0d9463973a5ec51e64526426ccb365c5e1ccde2df0fa5d629d8235121d8cebd875c0372aacfba9c92f11b0d66ca3611fc34bd8274a51ffb68962aa4be24689cf535ceb8cd27767786bab3c67d9d1b4159d46d53866a7fa0565a69f60627a6efabccc4e6e5e6cc6c5622de95a334a21882420689841ae4c08c2c6c8f5a6b9cf023119d7e00f1d4e5e19c5f4e186b4723613b19a9d44bd56751a1154dbb06e534f71aa8c6a94adc076ecddca8d48d8c15a4391947bb9edceab04d14e9f9803ae305aeb7ee72e00d5419d87594a5ca5224e838d40c42326b8e18e7b22deaa2018a6c6570015902e6ed14b99912c6925fd0ea6bd760420ac976bf5c0b96bacf9c3193279dbabc2d01c1d504fd3faf69bdac5a33c70f2221c0d5fa0be395a4495cd3b5b8bc715e7f6350def8b2795edd04c3bf3af49e657d78c44e09482e6951ebf9148d8e4f73c83d8706f21c59c8232ca62c4e302e6fc34a85b3dbc81e2c563314a92e7aab1a7b14f26feb6dabd136a866a214441e37e084ee628476848e6274ec79dfb62e9d3973efa71b2510c0c979d4b5073fcf980420817c15042388ee9146683efc93405f9de5576e657"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "05efbba03b90bda7ba280c6aa2bc8af655c884de2401c9ff9dd59e0d82c8502dca3d90879694692ea2b3e77c6dd3fb0e1f180777b237e462bae0a8b35cc21497c36818a1dc89dfa64bca89cb07babc10ddb98538aee10a4e59b4040c366c8413326e79bc015ca2ebe0a53ee6a4c49f5d9a87bac550e4b6a8173fb49188aeefd28457b594420cf2d77bbc044f6f4f6a7d7ba52d657f5dc6b631ad914bb05bcbf2901293e5eb5a17a88dad2326b508624b698b31d1fa08d00a001db8cba4a9f42bebb0eaba07e87235a883bc719513aa217a36ee016832b12cc4ca0d628598212d5da416af6342855da7d77ba153e5435ed7ea5d04b2459d68c721adeba8c071e979bf89c04a3c8219d67eb514a79b3a2f6926650c55e724b62f800b4f9060110479442e4f8b82ead56330e2374cde8b335552dcfdc3d0f940186192fa9fa6daa8156b1e55005896fe74a3b7164520823e7b7f21611421c281242b37da0ded476903f4b44be8ea35b594a2d97cb0c98a7d2a50123be606c3e3c11b4984c5a55ed01b1848fc54b83f681ceec448dbc4d35d15c389283b26de66c713f05a0d31993ad3e6e1b3aaff06b6f046ab075d93a8ca75c3e5558f8f2a445cf10d5eb813bd6f2754c502c93e81b904d845fb55c9e0810ca7259a012840cb0c85056b0a7e141e8d3a7fa5849da50e157c46164c9c02ffc099f42cffb71368f0ac3dac77b2ceb6"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "268d2edd3cca14c1dd3a768bf95d392228358f1d10bccf617cf507db1df8505e190035b890eabc94c3557e9117f4f3945fba36b1e06f16bc304b8bbf7472fa35375ede40530a05d43e3e88084bbecc931b69f02e83b0ca317d31a5f909dc7174a0b7fa7fb79b52ce3e8ada833e9c6f5d7cd1cc42d96f32a79f9bd2bb7a8de53faff97735e94c57be1be6fa829d9dd8e0dd06688991a5b07a514038c747c54ffcfebe8b3267049cf4ad335f2f6c52a2e1b0125164ea8dc354c2f092cb0b62b60c5c918059e1ae87e9e95b982d106fc3b1d9a6428a8e235a542565e4f1c9658763ed70b2a2bc7a4779bbe4624835bbe6be0bec348aa43823e87f9de89beb1593bed08cc6012ce054221abf67f7f98b01b12de8b700d6636e1c24332ece065c3ebfb087e6e1d8ca7e5488c1923724422f7a99af55fab29401a3b19aa985601da30db5430be4810a274676fc82cdaf0e145aef7adfaccc6a95cb4769e9f787f4c104a4c929014342474a5369757ad2752a9f7dfe7b37eec46831b9d42518a0cbeb99badd4249b16b32a7c371fa9429921e98887fda911413d8b0f5a5f70a23748e86738e90bf3d62322299fb361e7f10db9b48b818a50d2caa6598adbd9f048d0442e4654e38eb29343715343f951b2309b672ad67033e4588ecb80112438b366a2d5400da81e9687836e8a6967bf75585d95e99ec3412a9394c5faf8639be5387ad"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "2575098034bfc7c6e635162041f8c9a2466f3f372411629dd9f9422dfc5d298b7f5e7614069272d712c21904a0294ae3610406037d170a1e103f6cb906a96d5a70d54316d3c5078dbdf0a0980e1789537c551ea0b5afba3bbff9c7d27384e7b51e97ad9a3cc0af134067abfff9250e0bf5d7d682bb8032c56646f92b6d57525fac5c9fe706aca60a8ee20e429db971d8e6204a0fcac0c8ea3664b9710b4d49484a4cb49bb802e356c8c3907939d085014ec9d63df47508244a9eb86c9f47bdf72a6c3a47dff909c7b3d40263d866841451e41e163e1b90a9c520e28ac47b34ceab522e731aa934c8c9e3d7541eafe5dee83e940821e5430ced0ed54f52c2a5f79fa1257640a73aa6b4fb6ca7d74ce81fe4bcdfb5009b7cd0df3a618b492b652574aae9142efa1548f94aa8c97ab152377bc8791611af5d63e4a19834a309ade08ab19767bc979f0dcbd2ed343830b38553850c7cf499ba0a58bb7228b16e539e92e3ecfb7cd3390ed85f92a536e49fee88aaa04827e37b02c9e44c5abf68cf4fbb567dfa8251687f51d01c9f779311c07d405a92afb5df5cb6607749fd5dd99eef66e4588b9708ca4ef8e98ef0c987b9d873f3bf43bb1c557adf494f6022021ef9589e79941db266c8896ece404c8cee5e45d84027505b017db71dc6f021fb1db0a583de25190c5d273e77f38a200774972b0bf2ce14352de01fd4f9bfd0e5bc"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "1cb417d0ceeac22a7c3c424579176da1b0cd3f348fab09805b73e2fdcc50669c53b63eaab0d256fcbfeb6935bdb6cd1b2b9ec65973c9eb53dde80525df8fe7ef6b5ed54ef005bd7b31e9e9aa0e9f8da5db8aafef60a48b2d3900b7722c24ba48679ddfc11b87582a9fb34af90a0aa4ce57aa1da76b5cf6bda2649ec99b07a87fdc5548f7bf31a5019b97e0fefef7971f96d2551c9b74e164a6f21fc760ca2588b745f5ad51db304b123e6cbada39efc309a65029598d0c559014c6107ea0626b525880fb1eaa00e0a902acc6701df142f18d9ca1b885c92be618888bd7252ec35b1e8e5dd43825a059cd60d5c4edcbd678fe0495971a05aa7fc7bdac584e2a0027068ea4244204a0fa4b66d2ef49860538dddff19f650b54654fd835cfed4d13bb3fde99d866a4ece7cb6dd1c8e02f805f7916e140275248f9d9e7113ebe8b7bcc4e28816eba44df20ebdd08dd7206b8b5d8d9af74dc789651dc172adeb5c6421cb8abf48460ab376845253e62b37026f7e7b9b2cfb6855cb9f3040e4874175fb9cdd6f550c3e0eed89baab7a0b170f334eb9ae56525a0d6c38ea68498137fdd9c2b7b4511fb0a69aafd30f0e4c0b0a0eedbf80bb63e3017539a1cd41e6ff22625e07f0326810e7886d4ac31f621d4b3c1a80c914e79e63b330a7c3c0e5aad840128274b9f34f5653003175962b2f7cddfe11415ade74cee07c61cd2db2022e8"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
            e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "89789b9b0a97b90c4ed9a414879e809012bd328faf15b723495d1e0aebbde882639097e0dcb5471b1a0be1217cc6c34122595ffb4ada75e26c362d96c7408525d8da4266b8ffecce06c2a077b383d85df196b7075f2776795a95c6b688cac5f7bcb104e75a1a701f60b0a545df5054ad538a4c76c34336ec532e7f6ee7b999a1fc7fc2d1445e247f71a9302d9dc32a59340ebd6feac843467cb4a9a52e3bf0abb7935a3aa148116513114395bba36142848bf5a04f3718407e4b93fba02290b9287023e6d873a8546df91f5f967b49e85102386e59db91c5e51869b50fdb193879bcb01e6d2b05ec6f0c91b64ca8edf9d5aafa7359e554877cdec6eaafac80da15cc47d1a8addbe466ee100bf8a3fee75f495db722e8853b4fd21b16c4b62b536415077754e851472ef604b777de4e5c82d1c2f68699db340636f748e3433dda9fc62297463fa0c3a875f3694a79ae325b3cf31dc8f426306e47643d119c1039e77b5fc27cd8d9104f9cdd62e5e42f8dc1db02198797a58133198856cf490c7f2b22f1489e7eca21750f97e949982524ef09ee033d838f3e65ed175078f3569d787d599c4a7e7b63e9a25cdf6303ada48acc637ad023d65b901629bd140b51c69770e9e79ec8dfc21bb1debf3c5bdb7a1ed2aea297677033d681ce288da698e22538cfbefd950dc548c8f199a8b5a3f15d07d538734cd9789ed42317e0c5f656"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "3c8cb7e2f9f2f41e36b1df261388179dbb3bb97830b7d74721cf4c4d297fd126abb9a7211344dc52b36964c666ca72194c0f66cff5d2a3961888c26d394677117fec8babf38252be81fcd79380431647c2ad63bffdcb004e9efb8c49b3d775f1b53456581a5c2c130b5bcb47c2c0157fd27bc167f8897a40e72bd4c425a9114cc1195d15a97965aa59c74f0766f46b641c4229a4dbfbb3cbdfe6d20139cb4e587ac916c22959549ca1bb2986d423f701080b1d6c5f287cadd63edf4ee635304730bd5618c6952ec767a97f33c6b9d712dba4da8e3152c2249a47ac656b8dde87a76f0b22b484903b888b0c287728a0558d4961578693745db407b687bbd9a38d5a1597bb7d33a1d0b8927aba09a9d047b5c9cb3433289b95bd1563071feb622111d2c0ecf23accb4c0253c77a461cb7adcdd55d38e7b1232efe997908fa24054a82e62f113c5d6bae2985f7a3166fba70ea998c80ee4f04f5f18cd9e7ac580c44a6f04d671ad5b002359ded0c27edfe54c62ebf94908a408d370e36cd29eff2c89ea4050b256d4cd9aab0db5e7e29f638a4c81c0bc6130dd72242950fccbbc70aaa63422ba328eb39c87f2f84dbdbf365fc11796e686d9eb4a0ba429aea6798e61b1eda6c17458c5e5b48ae5e11baa6c45c34968ace833ea24ebe657978741cdd2308fb6d4548a289059b56e6d89cc318ab1b089ec5980bc938e33aa77ce02dd"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "54657374"_hex;
                s = "8c34f23e4883beb610394628cf4bfc6df148755e51c34a936e37018e9fdafe4bebd87bd9e423d3b0a746e115e99b6891a248412829fdc0e250611e8b785a7635cd1ccdbd4dda56e2cc27ae87c96ca0781943cda269f10b613995a3dce5c3922dabbbe37dfe87a176503886f4766700e377e47295175783dbd33899b7f1b2003c018221efd5542c6d520efce5ae96ee861f03a80cad2a70419fa52537c8ad5c130c5874adbeafd84320aad9f56b4c4f34ce85e9f3b0ecae803cbae83ab151ea66c163cb334f4460f85466f33a699924f415c067d4cdebd51c43e8fac821f138c00111480e3e3ea4b216d8de08fbaed39824a4e4f86fbd0f9b665f9b216b00a5ab92ca4751e3f8b04d000e3eae18a8cf5a9d655a5a2f6816119219081e7ee2b2ff1f57b226aa096248255bea2b58e0b119295b4e4fe1c572ef8783c2b4e5fe4023cc5934264fd900d53404b7185df382ad6bc07b457dd9d3d201f0644b9b6981a4f146209726a2bef1c7e95b24c93b83364439050d4fa78e808f719ede06244fa6e4b7ca5e404156a65f274cef637c62f67a9bbb69e894a6d34ae94a5a602662f8e7c091c6fd3897992dbd6e3985ed042e4c0d8af87b3f1901308efe60cb243c62c7c89b3ec920ad5ef7aea85ca981f434c102def438794fadd8e44862c1a35ef95d3638bf8185dc10dd5a3c2d8d1eb000018f5e77b1d251c02b83f1f6aec62b1e"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "313233343030"_hex;
                s = "8682d5bac51bb32bf283b8cab1172d6e8054dbfc672de6f35f33a9f7b3f0662fe19ec01a74d5cbe6d90351843e2b129d0ce30884fdbdcfc962d2721fec5b3b7f6a9db4a95b13def111c737cfae72d13aef4d0ea9c29181891505a0d28c5c8853ce5c37476654703ea2e7c68ed52591c182bc051b5d837ef3be064901be454967be52f9c7d406b7409e93308b74a826d3d1e6aedd8aba3f5f971824784167df53d042781b7c2d3cac29428c7da1fbc451680cc211517f9175ff1b2c00f819916d6d25581542c8f05479aacfc245e5894763db8e79849d3e2dd8d7178a38cd4cb7b03436c150c467540dfcdd001d6c8994b2f8b332705b2b5ae0c841708c83dadc7d647ae15e547403d689a00a6bd4de8602633443e0b7edf060bb7b529e0afeb1b4171f70a943a14f69c59720b4b5ae59313325685c102d992645fd23af12f3b8f8de79399cc6c80f9a0c006c316ff7a6963a1f8ef58a67d107e5b49fd8d7079bd45f23ef67f6a83127da157f54fef9dc01415a6cf7a957f5ffa15457a1a8bf831273f48f927ba8bde79da623a8a2784e7d8950c5fcbeef5868311acbb793cdfa54c702209073ad8599c4c74b31ce3b662399789febb36d922d77cddf63c1de3a6aba21d6d8ed54a1b48f48955602d0f6a4f5eb5546131561809236f0c71b8374290106b893ab70f6fec1fbc3bb6ef5e6c0263a7c8cd90c289968671744e853d7"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "4d657373616765"_hex;
                s = "3adcc06e29c9f1f08ff6ff93472eaf9140d4b47f86cfe645c507788ac46d6402a01b19483b48b8274237b08fb944f84bcf33567fa8f5e115e17a5019422cade552d14bb78fe007cd63a566fdd258427cac46bebe1d8c171203d75f8c228c11198a2529012a27ad35d311c3e65b422096e4e1c826959deea5958ccc7844ce1038dc26b8124a354e27624ef022a13ab056054c9f736a3e99d37334c362fcd2c394153a0eeba909a8f46127038832e89c19f912aa82724149940a9c835d7ad3e6f9990b00d7eda6e635c4f342a9a91f301dc3ecb1465413675c5df750603b931ef646590d4abe8685a35223443afcbd8b693313e3560af5107bd8faf822f6410188ab47ff0e56aa43175211a88ca339f99444f589534e49c2f8f971d9c5d9dcd77b4b72323fb0a76f90bc1547fa187abd59c96236c639e5019104a6d3a346f9545fc03f616cfd5997b19b10d5ada0e31847e6dfa28ff9ff28efaa4e52d6a0442308240bb70657993a2acfd9d15509f139c7ee263f3359e08bb987697c914365d9c0154a47e797f4d329f8a6d805228df2995f601c8606d03046a4a8bdfd512beffb4db4d631c254906a1aae0b6f32fad34ab555238262e9deb4acc1d571638c25566f96eec072a43875da82f12bb952584905b2eb88bf400452933eb5bc9cb07e7f138f1581df01d0a71015d361902b90b86f45060754f027ff2c108190832dd869"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "61"_hex;
                s = "ac5cefb29cb810e32c82f3e71090e2da0e10300acb638ceb24f49a588c54d84256d50584f87790848623239838865395bd3200969b6886ce38fa9761e823c6a5fb7f500636ece098df395eaec9405ee0ad9bfd6aed2f8503fc08a5a81d9c5644bc053868355af6bf01bbd37490dea174f2e0259340a2956ff00968c5ff5659a5f132537972d05acb491ab148be7849384434f50e584b371ff3f8675892ceb3b928e8bc7d49eab9635538817603591b9175e51b6f06768042e100d02f89d45b62401de9c8076b789266d2a40f0f52e527ac501a13e006afb364b7e5fe58f13e309bbd414a2c7fd3b61e5cae5dc14d81e60116c1743b3a20cc9304db044d73aea74ac49faceb321feec4e8ccb04b9d3e26d643a5badcc7ca0a4de4c7d69aefac5311d3915f9dd31a309cb39e4a861d0c9fe93bb7b010396ea1de18fee6c530a5dda73e8f05b7a7454bb5375ef64fafce7fdd5a65d4dc8b9868ef437c71cc5a27eeb09c7f7e7b7f24d6694125bd474fc07b48185975ece10848ce5321dd27b5598bea4718a21c39b5a6148504dd785f382d46733cad2de79aebc4f6481cfbe214d4cadea18cfb0b5379e669609d1bad7b2bfade7674113644568519ae78b0958c4679014f9138b3b4d5f49520a5485d2e1a2897e6cae04051884405ec873f41d6a8feaf42ebf901f404f2bb39408a47f5cab149cb725da17d418d128a9fb0287b1e"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "32b0c4ebbfe2e84043d48caab328e00671e523ae73505832a6b65349501e485731c8372d54c48026ee0b7f41c8a3df6167394c650ae2d74df1aec9559bb55871915fd7d252fccb059ee4b7b566792cf39ced1c133a3481e36e63d79b443f424ec0314d12fa81e4e6d53c7f9270b31a4df07a22e36f6ea5cfc0fca32188d2a2639a2de48e41b10fb5f5bfb900541d6d560d079f1cf94ce247b29445631272f0260761099eabdc0d44643f2e57062d2b2c020bd32c7861e6e632114857d0695be9573e803de0958432c26179d7311b60ae0ed89893566ff45625892e431dbae0eaebfa787611e3ef41baa7dab31bd3af98a508e1fe0f7e3255d980f40ea4e0c77697f726fd5bbdae9ae6f44915d4875db5c81bdf4cf96584b204613e5fd0f4be664955620f73e13a36781d8f2f6303801b4f8e310c6e2a2c2165f5f8a502fbb543a1c044bfa66010bc9aca960470b497fa9da703d046d266a1e14bc6880d8663c289a03c501d439ba0b4225f04602f0a2f67d6618b45e32e3567869a2727aae298148183c09ddea41b15acee6e9af9959f06ca3486c93efa8f539f404e908c30c8299eefd5014674d42fc084ac1fe1edcb12a26f66495d398abb0b4bfdd4c0206f30b229dc059f6fffd351489c52009c898edc484570e6bc1c6275a02eb26a6379456cd47a4654f2f2cd3b1f20c49cafe4b6998c9d2bb91595ba11cf9d54760f48"_hex;
                r = true; // result = valid
                d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "89863f6993177d65e5f1b6d41e183ebde1fe8c0f23fa8c99893ba0267416b74d93bcf04cb77f7bbc5015f501c001fe81eed5c339fca8d6804c29523668d57b32e2058b20366c4d66c5e1684b925bd7c71959ba4b022a4ce4a04c7e4ff13fa433f81553999ed9e73dc6f4e0cec5b00452391bb7a742f5b932c0a4eccf802120cf"_hex;
            e = "03"_hex;
            {
                auto m = "3831"_hex;
                auto s = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020c68149efc8a4a913a26c9170590a1ed9064323c12b6ebde15ae8c05a0e5205c91f57f5753815ff39c918"_hex;
                auto r = true; // result = acceptable - flags: ['SmallModulus', 'SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "90a5d7aba2c8dc828e616fc1fc45c7c52130c8589dcbe2913da187572f6c23217b89a5186b6f90cbe053abfb0885a91f141dbe106ce6ad303904a5941df26ced10478cb56a7bd6cf1313c4966d9cf7c4509d9dc63566aa323e110af219f3398c04e79bb486de8703793473136f5c9051af24bd2c0208ea1bf9321a3e8f24af00aaca1216842eab248d58cf46ac786c49fd3ca8557e9b53993a4b9718cdc5c474bf1cfe58c07ad97b2c5acb7d86accc0fc7bed147adb2e77b8697d80150948117714b806ff76f9d88147d84e93987b724bf4870429e85a7a7b51486a78d8a88f1688f60e215d43d06221e2b993b5c12a607b80e9e0122472b29945f76b55737c1"_hex;
            e = "03"_hex;
            {
                auto m = "33363730"_hex;
                auto s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000989e7ff72e67e680bd21d5f966e4ad8a48c3592dbacc4a2f035b4ef4d17a2f25f8a9fef7e78eb99d76d68629ed02d67c43c4b7ec8c3badc32e3d0a524c326537739b0fde156723b27c23ae2b09895e470c64d700f5c"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "ab54a4f2560b9f65faa2f83bcf77d41803c080e4e5c3eab3534210982bba8a5d7e513ba50ba1ece33555c5457c41ba58f3f605a04369408f586c26dfda464c7b300a01f1616893264c7606daad4ced14df9a894a1f34586181294297e3ceb9580b0c785c056d5c566467f6f227f3084918d1cd17ed156e7f9fcce4757c5794f92770771ea5cf3101ca0425c846775f56938c1d1cad4401f4df2f5e0d3a3b2770f99e3c1cb4d9d4896c7ca89287b45831218b099add4bdf1dab6e2fb55d2775429386c85dff32c07a6dda504a9627529dd82c943554aaf23c5a5f6cea9c301b4b1f066b86bbef2e4bae9dc5b5e82e1fa03c29ff8bf38556729b356d5ba41d37a069fcc8fc23ac715bbea04c1972a2d50c57cc0159a46b5919fb670fb2a502d5ab66f0aa99e51016b83a406943ce9bdf0ab9b9e946574a5b32ce95d97ac8b1fbb48f0bf7e3c0d4b7a00d131966d009997a166a6630dee4a74c141cde0114aa423351b1dfdd3893a856fc632b6d90dbc79c8a61a9f9e31702ba69fb222860e60a83"_hex;
            e = "03"_hex;
            {
                auto m = "34333630"_hex;
                auto sa21abeac8409398319e65c8656f8f72e179dd1e99358c7531fddc037e47c1e688cd70eafd6eea01c823516bc79f89d7e52ee1eb4ffdeaad1d550dc0a47185bc9c42e47fce5503c3370a60510f834b4691152ef668deca633cf3873ce6613951784aa7dafde118f37f1cdf1a687ac236d5c956bced564b73cf202e3bace59667"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }

            n = "92bf17cdbffb42fa9957ce37826bb451708e7cdec8752b809c81a8d16fe5fe4dab6a9db6d11dbb12086645db7546642b322e8331dd7f29eff68bf40b24f80884f5152b1fda9b9f7ae2fce2721cdee0fc48f85a6e8e64f767ed9727fd2dc597967e276a5e2e768528afdd9df4b6ddda4c174300e4da3c19a3c32299e1e7857934c14dd6203d8c2671289bc392711597155364a59046b2b9f1905fe717ca7efebb4c1969b804118effa240c11ebf97cd68c2aa19c787b3be21e68c0e397c7f04c6ef98950e27e0e19a40da92a3ea10800fe9252b77026d14c2fa1eb4ac102491e5773279f07d856d446f45169b09bf60b8a2695f5e4864eaaf9590aec8c7c2f86d"_hex;
            e = "03"_hex;
            {
                auto m = "32353934"_hex;
                auto s = "92bf17cdbffb42fa9957ce37826bb451708e7cdec8752b809c81a8d16fe5fe4dab6a9db6d11dbb12086645db7546642b322e8331dd7f29eff68bf40b24f80884f5152b1fda9b9f7ae2fce2721cdee0fc48f85a6e8e64f767ed9727fd2dc597967e276a5e2e768528afdd9df4b6ddda4c174300e4da3c19a3c32299e1e7857934c14dd6203d8c2671289bc392711597155364a59046b2b9f1905fe717ca7efebb4c1969b804118effa240b8bf4bb1a6d0616fd5be2f081dc9ef741a9a4ae7274418b791432de470c4556463108388e8e8ed5dcebf3558e4650c2ac97c86fa682176f09b5dd8cfbf15d19c3fe4f961f4607c12cb3dfad9b6a0e59c92faa1fc8622"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha256( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha256( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha256( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA256 signature" );
            }
        } // End of Google's Wycheproof tests
    EOSIO_TEST_END

    EOSIO_TEST_BEGIN(rsa_pkcs_1_5_sha512_test)
        // NIST FIPS 186-4 test vectors
        // https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures
        // CAVS 11.0
        // "SigVer PKCS#1 Ver 1.5" information
        // Combinations selected: Mod Size 1024 with SHA-512; Mod Size 2048 with SHA-512 ; Mod Size 3072 with SHA-512
        {
            //[mod = 1024]
            auto n = "a9f1795fc64a9fac0edd4553ea5b722b34b5266bef29594fa80dc8c64d33c3459edbfd36fd7b85203dbe4ca17cdf7ae53e5fafdeed8e8a688264858db18124438a3bf3110a721d94276cd47d7e5c2e1547dd5cb80212d594571432506987dbb4a250de62eebdc19a79f876228b2c4d04a1b5910395a8714520e78b997b3b6389"_hex;
            auto e = "d43d27"_hex;
            auto m = "b2abe66d1e6dcd75149d42445705b71b7509d393ee38b7d69821850e4268231e98193c91473b88cf61a94e97021d27a9348e04c310bc72cf26091d5b1f8a9349a15e4bc8733ee683e256b41863537acb79be737cd98894d6cde614cad65f2c3b95221cfbeb9e6ef7604d7eaec1d03ae80d4127a493c5a55254607342ae0e755d"_hex;
            auto s = "3f8ee147643e685b325c13557f44945c99efeb0aeabe719ac1da3f6923d02ee74b0767558225548f276d4bab34e8f09c4909a251cdfd7be3cb7f57f4d8f4bcd01dff0fa532ac3116770f0527b56c4415df19fba04858e70703f06b6f02cdd6420d255a21953ae328aa17eb9e151ea1fc0916fe3f3506d8f14ef8e8e09f6e2e26"_hex;
            auto r = true; // Result = P
            auto d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "83a029"_hex;
            m = "c4d94f011bee04446ce78f805d6950a9de2c6e59f7afbe1fc42ae619bec5c2c53b070614399125c0570c72e0246085ba9c26e1d8f061d45e86689e9a4127d5dd028707896f2ba26cf35d114c054828c3ae67c24e453da8a07e47b53ca32f384220429a89452441ef48c2b3ed8989ff6f1ad659e27fad048eb2ad75266b43b59d"_hex;
            s = "4052cd1149655d56d50c46d65c8213a81bc71140558a0d6c0445a180b64ffe3a91a0f3e6c3e9312966927d68fa2b1cdbb342af9fe729c1710076008c123db4901ed4e4a68f4a6c17b8938f2c99a6ae81c821ef65cf7d18a1271291d669d1072581c34a1a4badf4be10b00d2a31e0d611769cfb8576a17760656a6f64dd6817ea"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "d43d27"_hex;
            m = "abdffe0b951a91c54c7f00e1ff8e98060b413f131d9cb5589a861a053ed7b1e203b2e3414415873222ae60f527f1e7b529674b737149b7401d4dd3afc3c08d8a57d519c44f3d36af04f7b46f5c6a33afa6b12d92c53637ec918283b37a53aab06fefa87afeb928a5bc020337e721035b4ac6ec5a618bbdc6becc33f9abb98fbe"_hex;
            s = "5bdf363c7381eb660c572eaecc4325d0e977244f0bc229abffdcfe6a5e69b29b905b7cc83aa19ca3fa5c50917575c51fc6c299fcfce3d368326bccbc40b2437525fb39c103f32fc9e1aa653e2938afe0921c39a94110443551872b17728f8719d6ab98cd188d4182b62f6063720bb0550bd4f468668f4f4fad1ee3e5c7327fbf"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "d43d27"_hex;
            m = "b375b0e73c3a7d7013a9972c01b240228821261ed4c3eff6efca15113472f42a06e52152c25cfe34f1888b9dc3307f3cb91b98a6a1302f9cc7dc0f916ab487676d5cbe7a4fa747df5dfff5ee2608f1fd3080096fe96a4beee06bd3f43574e1904fa12f67cc6181f9bed87d251481bdef5618238296b76c71a33f08427ff9292d"_hex;
            s = "5b5341b5bdcb35e167f488f1510513fce5a01a813ee593c97264b2867fbb0846d46166d0eb2e07b0d3804bc0d3e75349a6687c798d82c54333ad5cbdb4d13c452bb479e08a7fcc2f7aecda3dd3946f68c6f02f47b69869246f2c5edd608ac18aabefff4891dc3eafc561a8b4d745c46052fd352ee63e427f21973836587ac4be"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "d43d27"_hex;
            m = "2cb9740e0c1b8867866aa81c64122295854ed681e8eceabf0651bf7a65bc23996acfc8566f4bf42c151b7bf7db94eb57f0fb065546477549e829bafb8d4a67086dd48d87533378edf41d992e7fcfc425759a9c36bb9f4b32eed7767af6566f68ded0adeae25c7a70ca78ec09774d16c8bc357f6d6f7bd441bf62d942c768a580"_hex;
            s = "1aece09a2f10ad4a72dcb389e771ceeaafe0d2b3ed89423da09784089f210e375124e65c040f67c44d2ba2f65ca7852d33e508831ec58e592bb4c9c440959337048072fa09d38b515e64940e35bc2a84764c4864970cd6b7dc6c63d284e6022ed1661149a4bf0c14c83b6f6f5d9fd7e22baf43e9b569ec26d8c42c4a597f026d"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "d43d27"_hex;
            m = "0da95fc957f922a88554a6a14b2be6d22599e1519c99f808c57797c30a8417872c0ee326898fda109b25f56cc2422a6743a590cc9089c3d6ca1c8a428432b7a7ca3b4f0a6172ebad51585e29a16198bc62edcbe4ef79cc2d7217bb47aa1be65bec18eb9f680b1d29aed5290171effa798a59d9c13fd3d9b6c65072fb05a86c4b"_hex;
            s = "96c37595427da33321b72448c89addd4ce9e63ae6e32a089bb780d57682099d35c92bacb405aa0979fb70725dbd06af1a9f6e9ad91457e50deeb5b91138db45a6b1e082fe3d9778355cabb6e7f4934f7d0d7a1ce0b8face619a9ce78cc024cdab6ac02f3cb6f8b6adfd1e0b245b227f66441b3863e8ee04cd83ec08b456b0f24"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            n = "c946321761fc295e104cac20c4003e8f6b29ba1bfe247458fd006e27da27dcac8438d1f1b97dd6189f5d98aef968c1ffe5e0976d8a6cb93e9e703519bace48c0cdebe292174745e9fe24bd1283f004a022d2fc3b03db09a0c38a095d064f9dc14abb0490241125af6744535e83d11b252306af61b7d231e843463f79ced2f60f"_hex;
            e = "a97a77"_hex;
            m = "046a758cd3cb2c2030aaec074068234bf5026c6de0940205461c7ba87581b30e58d406744ad5c24028b9dbe4aa2ae104f39030db668f67dbbcd01b935305ccd6c927171aca022e1e26f486d027f2cf6d21cb29ea4ab19593ccf5a9f2191289f27fed1244fc5b580253e453925fc7d5cea83dbf6134027574a0128f8b6fb0d2a9"_hex;
            s = "3c2a05b92025d230664c230d8546de1d970458cdc68ee8100ee53d5f3ea57593bfa3547a8b91ac6cccfbfe61013c5b313303016d552af8d6c2ef239b30da5c5560539db4cf242edd91517724afd9882f0377536e095f64d7d61bd3b3efe27433717c2d76802f13d676d5f14b561e3e12077c774840dc93d49e9e27a1547d13f7"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a97a77"_hex;
            m = "eeb93216aa9f6030b5baa3eb3a4bc92d941a0aa2d5bb3a16a2104423450fd30dfdc552ea989b170644d9db85a3686e4a1ddca8187ab2a3f7b0d527daf967667e29bfea953faecb243a07252a2e5ec982960f330aec83bd0577ae12be65dce46f19aee260c65fe4533d4c692003b4449da7bc92c052b6ef08a0a2ea18aef5b6a6"_hex;
            s = "41a8bf967f62204cf9a0e94d9e989907e4d07ce93741be7de06d5c527185c80d60cfb90557dceff13190729582c3fa8af4c28b2a6a43af6e5a13808824541241297af16a138dd281f72a170a00f7d8ef41310ec904477bdab2c32f4e18b1bfd6e3d6d7fdab5d2a23e2450e0e2bae225cfa633d7949cf9d4210e7913d49e5d5bf"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "030339"_hex;
            m = "f9ea187db1584bae05ec20b78eab1c5f0537e2075799ef8efc3d8773853eef3975e5dd10526c2db1fc07d58a3d251b1ba0f206a0872112f078ea27a5b84ecc7d1ba299001a4bea6326c7dbad3ced7018ba7513ba71ba4464fbbf8ccb4e70b2e5922b3296307feb8c2c341868b48b811ef9c6f39e3debedb42dc69c2c722d093b"_hex;
            s = "44b4e5e060265ab860dea7823d1a7d53a1f79fdff6ef2cd4e93ea86e59741817cfcdb88a5517a21b69bd9d73e2426c9429041c40a32845dd098a66cba52d147c32cbc5164144dab8d8642dcbe3dbdadc1cc7589de3a35383165eed8fda2602a54d8a02a9a0a992c95732933efa30c0cd3f4d95519e8d661247ecf9bc5464e543"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a97a77"_hex;
            m = "e4ae864a45eddc459a59946c7bfd18cfc119394fdf2520bb7612873923d329e89c1c76c3fb6a8cc95943635b9fbf47e599478cc04c9d7d578a1c9589c342f24f1e6b069fc8df90908c0fcabea51ce4f0d099b2f8a592a2db26cdf032994f1dd093229da55656d0e25c46335e341dd8398d9813bf910d778f74ac00fc4c0592b3"_hex;
            s = "8b7a625dbea9214f23cfcffa0554f3a4d64393f80daf01d01422857dcb74772f48b1215750319376cbbdbccfbf241d4cee1f190df04e5bd03e0e4e24e1cff426174a3ad1695ba0401c01fa6711f99fcc91a6852b6c77b2284ae5454d5819278682e6667bde72a69f1c111d1aee504c5a80dcdc6747d19bb287e85cc785714eba"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a97a77"_hex;
            m = "bb825caec83ec0fbb33fb18c1afed63805b394a219bedfbe0f4650906420783751f2752bfd98c2c3f2c654facdefe2723a6684b920c47fcc19895fd9250647499f7a86fe707b6ad982975980783c1d5e9cd580eb1836192d6a3a657f12aa1a918d61b7b087ae60474dfae9a681ab31031148b1be69dd54eae8a1890891d69715"_hex;
            s = "064210dffdb7ea65e1de82f40e0bc3d450590dac4a8ad44427c2d6f13376fa9ae291990023fb678dfbe04a994cb84ac4698d71a613010d886d0aa6015aa092d52bbf857900934f8616444f69b137b651b61105bc64618b1fc69f589cf257d74c0a199c6a2bed8f26e58a0ba72778ab10f4419ddf5b9f3c5ec1c4390c8611713d"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a97a77"_hex;
            m = "6d47a76b64deb512410e0e8b8b53104e27125fff792a2aa0cccdb006f48e038931ba0c0057ecd0ed2cdcf1f412787892e636d10b27a817a45b519313aeb77f34ddb90ffd5223b2b49180955fd22f687defb966f381628f4946fe3816c706c6b937ebb74a9daae2d136a1ffb514a169770c44239fcf8119f7577da9f885a46282"_hex;
            s = "311263208e8021d33f3125bfcd72677f28e6a807b359ea71bc87b466396e98c6bc5e361b26c4c858ddd129a8dc9cc4dba02b1f39b87a51d184c6a6a1652ae35759477f7939b275e71d09ed52e4fc07900c3ec90785c6b2d6edfe59059a8181aa07a00a56c3bd5dfee7618ac17e0f1ec4e8d252a2c61aaee69abf62212c98f44b"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            n = "ed88e482e9d7d30dfb6ff2e20bd93b5cf028fd5e49f9415b72f77602e688e9ce0d153c5131cf1223ee78e322f207edc1eab0832efeed4146e3af7715a301fe847605e009d18c05db26b3034ad84ecbf2728a6d384694625528e1002a83f47166e46dac3d0d7d146fc06419a2d2a64a9482267bbf30d666e694e5b2180c3e8f09"_hex;
            e = "22478b"_hex;
            m = "079d6e31776603dd6cd9f0856940e75fdf130e4846beb3ab6ba33ca30c635c64a2598dd77e68ba8417f73bb5a33907d8e4b2252645f7648225b54ca473f454767b9d56beff3a3ffe8afe0b980105f1367bdcda69524418917b3355fc121cc9523970b1302365fc136cf64778ac2b0b414b9a155b972e379e13273ef4126223be"_hex;
            s = "9563554bdd55d7eba323e370a74810726a6357780b763aa86d8c1e0394893db72bf85cceb76ed11e801483717d746169cdaf652c9cc11e0fa006166e05e54d1c2dbea9f8a01402f929d8d8e8eb0f1f028b98a779d9c44642df01ccc649cac24a4cc760cf52bd7eb4bc0f1809be7cdded3e0965f3462841ae6d0a1626e061bc4d"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "22478b"_hex;
            m = "6284989fb234eeb086e39dadb61cd985c75ff1e00fb88c561a9632de4ddb0f89c930f470939b9feaf1533c0317d32c2a022d042aa5a1d95c436ebb1a1ce87f764bcbc22cefcf2ad6897cef5fa5409ababdbf0dd45a6ac4c77c535a503c3f4f83b0fd08bd0ff717db1507bda9a98cad9dbebc13c6773cd5ff8eee1968f60a0717"_hex;
            s = "0db9d569fd848047e693ef1826fc1b7aaf1fe449882843455dab2829d418fde0b90b6c2a0ab2bf1122ded1708c9442b05a6a44d42bf5313ea793ca1482825e8327247d3f35a7fc43457a3f55c60e3f506d9df6b7037ab5db46b440edf014b4def3936a3ff7c1feb4e4ff366731ef519e4408863ae2e8048bbfbdc9101857e893"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "22478b"_hex;
            m = "310c04b35510e779f1b1e7177d18d32eeaffd15b2b210054f4ee5b33c284e1111bdbf3d7173ffd511f045884f5756f42f40d21fb9aea67d6437e37003788a844e74256dd74dc0888712a90ddea9af3dea568cad1a715e84bfa153d8eaec8fa141eabf66c75d05145708b57c9656fa72c847894845d8acbdba21a36822e2b21a9"_hex;
            s = "9029571a3b5a0c4c5cd165661cec2868c896240281172a4089d5bff1214d7721a692383bc733d131ff7b5b41f1c8a15428b4d80bb3b225bd381edc5df7ab230e499116e4b336d1b0731e55782b088eacb9c7cc4e31a629d29dd81a31d87f0d169b975f7214e356d28366002ae65dcfe857cb1be25083e8d5c24303a52b73fdce"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "22478b"_hex;
            m = "a86c47e276bd53067d97392bbdffc290d338f3b38fd8d409e22176f1fd8d33ebb7ab38052f2a4197b333a430e1fd91d00c9b9858e2186b3e4bc5e68594d24cedcc1cd4676e4664cb410b9ccd7dd2162e2f83ec2fde9a7b4b6f7a67254603e0c0ae6623ee7b38430beec629ead8a9d910029af820cd878b9716e602b95c4975cc"_hex;
            s = "85b7f16f782fb9ce2bc1b00114aec5fedf2e279ba0bdc4ae6a0e38e41bab63353ced11ccf3e55c8fd5dc99736f97ff891d13ed59c1f123ba4ce3daffbe08aedbbb7a0a90ac042fdc3f54253eb61b29b64f194610d42087189763baa351e0fa61b50a5c9875c0ca8538bf2187ef37d0cb1e6b5352bd017064955f2a0740db628f"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "22478b"_hex;
            m = "155958a8c08e561a69d5f41efe76304ffb0ffc658a2c8765ee17bd1521f211b3bc027ae6184ebbf5b369e837d58c26cb73e7b28853392537719ff600a2a9402377b3c5e9647334d921cea72e51f07089629b15e4b4bf99c7fd4cfdbeec44070a0c144297ec24462e7dad39ecbbcb96f38fd32d5ff4e66c7c5ac6dc3647e9eed0"_hex;
            s = "5535cc093d3e54097bace607a8f75ec913c4d0219663ce6a3b493480d14bac47e85d23c1b7562f91df292725965c31450558f46904b8e50b42bf2e0b6308056aa83691ca2349e39d167baf17d069d11db8390dcfe04b5550137dca253ed5c614cf9e50eae496bddb27c70ff6615a5c5b8a340fa314dd672dcb5d214728d51002"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "903695"_hex;
            m = "0a87d48ac27cdc05dfbd93afab38c18a339beb5055180e5a196694c0450880c22bd1ec67c6a8b5630589753e67ccb1b3c8aa54577bfd5c7b9847d45297f602571ee6e1e91828d23807028e659b365fe583879027837a2176c75ac020777ef5d88bcf9d59e184994c8c30c76c70ff31e80c3c85089617c6144da640720b29c10e"_hex;
            s = "d808e2fc131998e6ac727bf628dee867b9849f47bb92ab663192e83659e5091511db6bd36bd2e5281fee2157549212982748584abaad8b188e389776896f5b60b82441b6fd83b6494ede3f6bb74a795a10c344b557b92b13d8b7f172721720664a5e3031d218ff2dde8aeecd21d6c96ecac396ef78001fec388ea8ac9bb17e9a"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            //[mod = 2048]
            n = "b6515048e1f7a3506d6bf028ea0516592078a2ebd6db04af6040bb5dde8888787e1fd973b1d160da25ba9095450d866625aeb7cf684b522af4edbc20adfad09e9c4c42919b7691e1404afe8815f229001bf7f8e2b1c511d56207972e3efa588f04f7bea82b64c45bc28bbc5e3ca3b1be8652c54a3393e95a58c78c34c7c7ceeca983e91920467d184ecd5aad0114f83d0517e6ee82944cf134e9efdb68f14322517acc10285c892c94e6892c9659fb85af6d11322df94edeb77a379e97c7608e5d23c89b56a722b54d91f0811855c21e0c41ed362ae144e2f46eebb97a9057c673ddccc0f2ce178c3af086d1f93a092a2ae58bb0703ca66318913e69e36fd997"_hex;
            e = "662f3b"_hex;
            m = "e5b327e067ed7a242749d21d78e0b1d68d288595dec82a55cdaab1768a5260b4346ff95641b040a71fd9b7aa1b16ac0a838f7550073cfb5865fb750646e0763562cc2af0eb41dce52974bc1662a4e0d2fcab88e4e5d3a60a33ea9ea908994abeb9f141182f4759c58d426aca1232551742a345b9403335527fa0b3c69925e338"_hex;
            s = "488df2a0a8775e6e65c6f457cb9e29dcc8ab6c37a12cf820308732052bfe068e3c6f3c4e73c17615aa6319b76d62df6cf48378b834dc412b9e5875f7fe16bb2670c4ee51cdc259df813d5faa541472581103421a9718e79b8c671b1c7b50f6d4315b96423ba6aca9d060a32372c4c237f02eef44f54f872bf91b5a390adf9c5a7a884416add7d15afd8fb8073243dd587ac8011a88d5566cac84d5dc4ca3f2d6938e0d03a9e8d016b4aea22183425c2bd4696d85501e264bba7dd980c3ac45d77a363955565f4675c5246802abc015236d69005d164c0f18a666d43442902be38fcc381ffb6b5a046af05686b0ad32b25c1e2d82707797016ee63fc9a952d2d5"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a3e187"_hex;
            m = "6b7450077038ca8478e7a380292151ad413c1949d78076efe497beb4013f036f7242375864a894d5732b3b906feb1ccd606315fbc79c5e8827a024fac432743cabbc5b35f2894c9f4134c1179261257034aaf24d16dd17ef42649c4ba80488601dcb03c7a343b88cebec7d3c18e9363fc6faf6684baa68cb3cca6ecf341d0784"_hex;
            s = "1933ff9ae5c520efeb711fd17a571a209c2ba9e0469e39a5341a70ca46c6deb2359005fb21c9e914e8a5037345906204261476427ddbdf29212d84c6e4e1dbda61aeb21ceddad1c3789d99ea28ebf72c4fef790f838191b30587e00fa841d63bfebd00bf468b462ae935eaaef2f83ad596b29a0d538ad99b44d615217f0643f0d9bd755fa281e35bedca37b238a89b78f9d911a24c40ab3cf69dade4ce4a30bd3104f890a6cf410a1e76e625e28495f6f9b385d698e6f8a6eadf0df3af03b3e078f4b0c984bddf525f220635cb2993b72ccae40ad3378cdf775431c2ceaa1aaa57f355eefffc0f34b5d70d1a41aac9b052594f0132308b0e329e34c0d2fdc519"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a3e187"_hex;
            m = "8b618f6669b9f0450a57cdc57f5dd0bfcc0b4812e1e2c2eacc09d9422cef4fa7e9325c3f22c0450b673c316929a339dd6e2fbe10c97bff198ae9eafc324133702a9aa4e6b47eb4c621495afc45d223b3284d8360fe70680359d515aa9ea02e36b5610f61053c6200a047f186ba33b8ca602f3f0a6709272fa296025258556880"_hex;
            s = "ac87aad4ce85038b8552c4a6e93ed94368bb3376ce17ba1d08812e004b43a952e27fc50daee8929094e747dfbe02584a7654d950d21700605e699561c03e64d2016404da7b9c0b0011ff64f206225db1c8b5f974bbeca720a7c2ec73e6fbf58adcc6f5cc24df6d09ade74416f30df70c4449820f24378b90c176f65651ab1c1fc82d3fe834e7b66d0daea47b8d1931a81d1fedd4e6996c56edbe496fa237fbd41876a460780100e4e6f0864b6f9282abae4ecd98630548b5cb42e66cf9eb890e0651f159f356283af40c02913d2f3bbf6d8ebaf6b7d88e6699f482d7825428ccb7ef8129dbc665bd4df8e9a07c339a1134e907e439d0846480ae6c888c1e9be2"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "a3e187"_hex;
            m = "e2a14fdf10cbe13b0afa4294d073af00b19f02c2786987c9e3e80c79573e37aed1c01dfe20570f3f5225b7496c6c65fd5eaca387350c0fdf93fb6a965c17eccfb34eda8c25435b2b23f38830b698c2446ece487e9cf408e2c0d5b62745871cbe6c94b10f87586c0667aadace17bf6fdccb4a1a3013e81bd754bc19b579566f81"_hex;
            s = "0e340359f9f1fc5e974d8ad8c189efdb2849ec93994b152e497e15289015d915014c73503bc69b83803dfa9d8216181fcdc64782c27fe9d464ce12359aa60b44618119df19a8f5defcaa171c44c0c0ebe1991131132aab4b19c02438b0fead22bb34e51bbd565665583bb6eba36e82068e2e3040a177dab3c1d3a6f81d0a3901a934c10e2abd73e8b9ef7a1be29a7fe18b304ce57d073f85b1b6873ab6b8ed94d5a0a0f3e5fc9b4857aed36de4ca72deac235861297fdc51fd9553eed189335935f23b4058f293c8cce8bd9bfc8fbb374ecf4eaa0f2a1f06ccea4ff3071beff69d70efbe07513ef0bfa02dc2c6b19b5ced674a16b6672b6e04a32ae14157fe10"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a3e187"_hex;
            m = "fb200350b60d1e9b4a3b1b4d7341c55c635bfa791569a438de3bec72450baae8144b1f28afa2e6b5a5312862851a10fff3437e37fa5700b9a40efe96c8af34ea24d365bfab6b4e2e2004dac7e44a94340dcb6118b7fe6f3d9f8469efeeadeda3523e3fdd53723f50e53e984639d93b42d97c0ce4f467da0ef62495455c0fbb5a"_hex;
            s = "624183bf2abdb79689a45158a4876a352b19077de88aad06fadf3abcf4d2683b126fbf84c01ef614448c63e8a78d1e8749fd89a9b2550078c18989fea591c2a7c47e6a0bb4491dcb1868a43e75351ae2a7afe27782195f453bbf10643e6c3a23c01f2e713b6ded81e1db7ca4ecb3554fa9ae8005b80316cacdb4530a66dc2a073ec494bc3419df2f275db5a33871d0a8d9cd0d8bcf90aa24f096a79a4c8f5c0dfd8b1887535e59079c974f87d26bfeda7022399685748414df842ce04783b6f57bd2a2dbbe2e225f89c764b9775d7721157498446ce3d613332ea2cc589f7043afe3cae32b779ea8f1ab22fef99f67a0720306dcdf2d2cf7b35b0bf3630e03bb"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a3e187"_hex;
            m = "64ac0940e3926d11b78494ee758ee6e7f9f034ddb622a99f4a15fe5355bcee188ccbeae909bf0dc4e51e520c0900052d41ce777e934af66bcecffcd365daa7af7eca69f547e401bc899aaaa07f0d9268e8d08de65bef0b1fdb3048acab98c2606331f02b440b313ec98103707ebd75e1157fdfddb719d00398bf48a6cefd2773"_hex;
            s = "3853af577c8f5f96cdb01de108ef8737886118ded95a315a5f2c34ae22f8fed6aad5cc1debcffa3576cc0a5050f572cfd171413275254455f19312054f06e9bc50f9d2dcdd1fac7ff2fbf456c2c9a1217992acbce6f867b48291911de8dcbde4e0b85a92536157d939dab1a42fdeeac9b15e5ed3ca542d1cab43aae3723349e405f998705fd0edb19d9f4631e6c7cf7ad1962e99fbfe11629226a634eacc2ec2bf3ee2d87c2f6fe934a2293f5ff81b4dbeab62eb4d94bdb4ed481bcc4bf400c2050faade7375c811967596ab5415cc6f60fb6169faa95303ceed5ff261a93e0c2a2eb657501db9866fe858694f57ba25ec2f514d8f75980247597a006ab3df80"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            n = "f5596b5c452079319067a1bb3fd2f9c600abe8a8be658285a99b19dfee65f03c52d7e826943a934bb25e79542b7a9e179b6f95698bcc83e19cc6db49bdf718957206d83621ae4e384eccdf283b52fa3c4e7c0859859b574da49cecdb87249f20f16f0a9d63e6907256d5db57ed3cf12675b0ae63b458a1d4b64a2c508cd6f18a4ec57e5cdf2c62edebf1b739bd01d8a280d3bc88a8a81f9627e4aa83f0656b03ff04710ab4531f4f854a6a9fb326728b8752f61acdcc5e1d8f523e69b32b1aced6e9850a777048f294365ed98fb85fb4c0a0829279d0346c8efc1ec6afe7576116d15339cdcd1a8fbf4999264bfe22e9b6e5b6dace317c7689b866a72152829b"_hex;
            e = "534f11"_hex;
            m = "142565e97e8f5f95ec31fa8325beec222b3eedd82062bef364146ae2fe53cca53d3e51829e6e00faf189b7fbb814b757d089627553aa4447bc14517b4c176df6adc5327ed649edb62e7be950f4b1f17eded710a900c29b66f0c171a62875822cabe38e45ecc82fb3eb2c1aeaa13aa27f9e4f7eddf151cb3a484255c958151231"_hex;
            s = "ec232493d315f0c4ad232653ec9de464c33f956af3718c5b9f1266e7402c61c5ee9c177f14f8dcadd1d074e8f4087516b77b2477e4fdaaf48fd138e89903ff04e11cd0fb07d832ba545025b921496443b52978e215239474a031c44bf96ecb4aef393fbe0fb52e819cae819af3ab41c48b80afc60aaf41eefcf36cd00c2aea08dd09e5aee0056ed1b7f15ba237daae1cf4fd944dd09596e5dc0f029bf83b52017018c046e0cb58e3f24593117a624064d5c9afaf9df69bf92c816b72e625bfa5e9cd96e963c62b0cf82eecdc1852c1c02147030fe540dc270e454b4106f8116cbed3231630c7c1345be5f8847f8627fa082675c680a98ff109649fc4399d40aa"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "534f11"_hex;
            m = "53b72306191a180e86830fd37a1f13847739cf6ab30149ca6b8ccd0d791d261e29a315144982fb117f96d969e0757a07bdf5ef0dc0ef3cbb38425192b21a3cb9c9729c9f3fd759e24c6f9270353bd7ec21999953290ddedfae40392bef49fa99da2ca2f123a09a4a9416242ea4f691f94a2cb58213e398fd73906e205833c9"_hex;
            s = "6f17ef5b663a05ad79a4fd77515845d7dcf6fe5eb928f4e6567d7d615277ad7963595baf26971c1ee8db870c9e830d5be09732b8911476b09c1493aa1ce8faa2b527349ebfc882eb93acca56f5c0f5682c784c4094ef86aca1bf36acc97b7a9a96aa349c5f8d2034b92b8a8725be2091f7adaf8c3a1ff14a1e900a35bc6f2eee130595411a3c94aff5d7a0f9f9f5a8df9bbd5b28676ebc587c1f1e26000cc8b789e8c6974cbd49d58c139fa5847a924f14074d340b7bd4f325773f09d82a0da54da2d7df251951c5950762c9a3a0d2db10693f4aeeb97780367698aca99a42fa47b5f185e4c607cb0dda51aa2d93611e2f5bca343baef36dd6b0bac18cfa6b73"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "534f11"_hex;
            m = "b286242ed447af64ee029c7f33b5428d440503773f30748ff843be68868d45ea025387a58bc546668d31e9084377208d7bbdc76e9a630d2edf39d535ecf05cdc82cf1cc58ca7f16d5f097b0440b6c37c265721e0c26f5de7bd8d14c941c65d51ba62ad33ded6f8a1ebf319192f5c7481ce3dda75c03aade019a644c98df69070"_hex;
            s = "dfc19a45dd3b67cfa9a47615cb7f5365f28b85d5c11ca965846326849a2002e64b8f0e377be83641ca5e795f190aa609bc03f94bae4ea25e681959ac85e0ba28f6d298244c8c6f5c18edd868005c375221729dc434ebeb21e5063fcb281761d2b626276dd14b6e70ab53c3909e8df9f70f8a93a1485ab9794e7ce5c424a530329bde2834b8363e1f857dd9ff8908f4108c305ef2c303018392324fc600617d5ca4d041eea9a77f116ae29766ceb75a1c5f4931674044c5e48c7b214a2bb6f1da81ccd43ca056776da7b1c0702a9f39ba1cbd861251ea25620eee495e6a8cb00bb0a0963b609086ffe552bc8badaa9aa6a06a9710fd96f6047b8b1660a7680b34"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "534f11"_hex;
            m = "a5374f49877cfd0734fe20ebe12c360d950416748ae3788ad69cb7cc4ac8d6c69b5ec23fbf84d6b19aa4a4fcdac1f35a200c049660b21a798af938866a8b2de7cd11cea6e5048320eec005b712db65c88ab451dd074f93235060da1e2ca5bd9b8279fde6bfa70a3e787cc9865120953d1d2684b04661eb6e6ff924fd59bf8ecb"_hex;
            s = "2e985464b882f7c6672154a107154add844b4be163ceb8053be6b6fd632cfbc86d934e5aea7d11878b4df6e24fb0dce099c5b52bfec0897dc57fb03465adc2067a779d011e64ceadfb1e0a7051c5d248094ec8cc239d80c6e70591d617e54f503158f2b22b93eeebe017897fcc8f44703c815f07a476bda567dafe122bc07363818c83eddb6f777bb9e84f11549f3cbc283b78b3f2277c7a54072c13032a416c6470395472303c84adc17dc6128cd82c6ccd907ccb93adb0990289bc5b2eaf948c2f421ad0caf2655cd5839c86aa854370550ce033bc05b7638b8edf67bb5ea997bd904df293b89a0d16535134b66a6fd5551aec3dc09f29fdecbfc6f474de6b"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "534f11"_hex;
            m = "dbed25e65429b89264ff6928e6ea9424b862a2df1daf870660fe8f4bbbb55b5a7604260f53bc4ee62a650fb3d18b91933e582522f068cbee8bd8f92cc2a097aa79234e052b05021c8a3d9dc4666b0fbed06b93e67f2a33ac73b88ec8d79fd92a2c742430a4abde1cccaf9cc56e33168db6c27292939ec62960c7d888c45a28c2"_hex;
            s = "d5c50cfbf215c17489ba4d29b5e2f84a4ea244ef0dcec72c3a077e12d74d586574aa9683cdd0546c3581a723ca048415c6252894e40d3bd803138f78c7c493fc679aa1104e2844bf51618c3571789175828cf7d59addabeb8fa2745d08a247d5937600f8bc0dfe2e1ea7abd257b3e1c207a3be3e2fef8344979c4e0dbbbbfcaa908e1c9c6da303e510f0bb455f4b91dc7fee576e358fd5b2aa8f1e6440bc229c004c31e6e61123aef01a0d382852689ac04424007f55b6fa6aa298b9a93b3eceb6e585f69a5714231e60e1db27b2cf94f7ca5f6fc4118c0604ee716f41736c7efa6c43a3af42b27b585cb9c6356be864e0514e2bae881f4ad5ddb9aad592d7ab"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "8f3795"_hex;
            m = "562eea18d9654547cb566556964ead28616c18e0920dd7f691883c8bcf1cd6f90826deafc597d13c24a65fa9dbc2840c7bcbf55af281bd7d543d28a6dbdfe0e52c0756f7db88635f321930b82e4e5349cbc73ada81a8cdc60f484f52772e853d4a391b98251e43d87c189f2a96da6106d9c9b10748684ffa4a137935adf10f2a"_hex;
            s = "4df68855dfccab1e7a94430bebb9c631770e7bd75538a9017e2df5b35117db59f8c9f620c1fe41bbc5bc65155355a83c1c1da767bf7e6c40ed61464a53009d7d8d1ee31e7e82c4b97c520d74a60e0de0597b977d07ee95fbbd4e5486d7ad61ebe302de0cd634be178a04c8b9498c89b7ee1c674a074e70ae0f93e7e5dda89c165808a8ab55337a048ddb7eff91a8b5309ed9941ecdf3ddc3b1e235f7cf139b681b97cfbc584d9c0359b26a8011dccd7d5ff0475d52959d35e30ad66735bfdd06e63749dd775e65d9407375ee9f5f9e73bf77b75fe0a5923fa7fcafac08e10f0563dfedc2aa2abfaff6f73ba293497eb0159cefd63c974553a24cf0602353fd4b"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            n = "981ff4f5e7569dde9ea2f3630f0463002799dd234a423f6e960c4b55a57ef478e9bd58b94fe4303c5cf3a97d076e3ff845fdef29be7e9ff293acb652e86a5a260882cb4e7724a44a08ebd11a168fc389588f0cde26847644febd1f7c6c031ca1eae47f9941a4dca32028f1408eb96db40a386bf922a8aed72fa27a937e181f8dcf35c946bd5405897a0f0fbe00f18b66de336abd51ee46b8ffe4cee6667f3de4dec041774fd79a08b0a2be1fa16806c6b58ed795ab9044b732f69a1cf88f61ba862f24462bdb036d5d5701ba205e37c737e8da703e9dff2208051e537939e1f2643efa2261f268ee31021379681cfad9a1c03d91a6f17a316cca2e810a0ffcc3"_hex;
            e = "08475b"_hex;
            m = "7120a0657a833d7f9723b647eb6867f5d9f6f1fb1a77e8eb0c9acc954d5b3b6f8986643b9076bfe3ac23fca8315c397b555077ab42534fc16adfe1a91bd90e125316e716d51e641e7c305a00d086a76bd7d9af852e280dd257b682585552310176da0f40710295f7b052b899ef6e1a8c069a82d1037d8ae67c2597eb244c0e05"_hex;
            s = "385f2fe2bb8e9483bbc05c316283ad01f8aea41bd83ad941fec99bad0f066fb1c7dc960d536d4ed5302958a0df7b943836878a1c906b3f3f778e7335407676c7766183ef61624c32da8e79640ad5390660a46610b2b172dfb7fdf48e556408e0da06ddeab4468a00abf93d6e3fd71c04478b49f394e849f1923d4a57b76f6407675fe647f7bcc59f7493128e62c0cbf999dd4b3c62cbba2accfbf77351abf76927b89cb6f57d900d631d2445231f75b7d2c3ef303a51b38f9e7f0d69a68ab397674628a825ae74605f32deab2a0ec2fde1fe820b48d824b68acef3f0bdbd7804eb15899029bc9d349951d732eceeb3c42ed02ab35d112841f8e411b28435ddbb"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "fd8739"_hex;
            m = "77449a132998a90b149b91bd05fb1e53c85e28d7923e16a69cf7a122111edba82a156fc297dc2a9d222ababd8fbdb6efc6eedf7f3488a6ac6edaee59170b120505ae2afd9f968ad089ec8c04847e90078f5a4068529c1947bd84270bedcc0f534f38532e076ed28e93088efaabe8b2846ccbd4fbb6217761d31dd49f5908da78"_hex;
            s = "240add12876bc54e013030c890f3abf774a109f687effbbb6a03d0b828e8e1ada27e424db835c78dc0d6905b212fbfd55885417d571e7da1cb1566a1cb713cb04a334eaa68545cb17cfe55c037230a5a71e941fe51517530392ed35b844ab7e891e9230d67250c7fe73a9d969523815dcbdae4c01322648cb0c686aebba24c4e57cc4859fd0e38a23dd43f86373d7c3250bd03d8400887926df0f98169c132f819180b9fc482ec77304b8af96a5334401912e6d210361218267c21f2c65d3a83c376516b869466278841e267d73237789b33e5a7ac3f1feb2a1a3e9bae60523ed5f814124805f11c151357fbb8a717fb8c858c66e647ddcb59c20c2bb8e86abc"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "08475b"_hex;
            m = "f99ed2fc9e07ccafe0704660b1906e93542e3c7220d8551c81d8303f3f6477e90315b09b179b1ca06daedf9ce3476268c511f61d931aba6f05cfbe3d4d2768659c1e17dde7650700eb5875256f300376c97a5d00a3c81d06ffa6ec9b79cfea70cca151ea98cf557763564e23ddb218666851ba40d7484788764502824bc4c5af"_hex;
            s = "268ffe2eef8407c215d1e0d02d3b23d387900877d4b6ab515a9d35e30d6c64830e748ab782191f2f9a9c133765ec3863708dbdd36d5e4ce9dd262f040766829e365ccf8e19b146355770ec4dc3a059581efe466e59fdf1d6a7d0c6a24b052c54b5a0f02e73390cd70ac56c0a004a9e45ae81296b3f5f1677db8c0dbae012295eb884130530215c175239e7160182009b46607a71a6186c48a1b8cb45c1dce3fd2f31aba568065e8e490f021454a674b8dda3e436b375f0daa3294969492ed269e9156011b133de86ada6a84225b1c297b71b3462cd3ca037585bb805179d76864a9083f927e8e1360d9302a2be39166bd5411c997000d882b268623bdc5dc9d9"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "08475b"_hex;
            m = "019d049056b4bbaf6c585c6aa4b7670ea52fd6814e6dad83eed6d334b82520d67156b7d56cc49604b88e6b2a983ea9bd33addced8d213ae5b6b97a4d420be913f80bba6bcf2f9d1416d094ddf2d402690d8a052f8dd506c4438d8f5d25225c90ff82b45a653dfa66ece77f8c9abf9a999a8dfb4e34d13cabfd19b96d4bb3a2d5"_hex;
            s = "772e888d14c70c4e546fa77a85d1be25ef85bd24ea52db68c2c0d3889edf96a6d7d31696536a12fead53f44a055847be51567a6466730991383e5aee41da40c90d6c951e36c865fa4638490ab44a27cbaedaad7d415b80a51ab465c8a18df567356988020d7e6ec0404577ce8f02d581e48228bc342f6bfe2d2eb2dec17f66fae7debb40b839b1085c16caa417bf31a7bfa540405f76671c8d80dee48d8a1cd44b456ee61ba601938bb3626805c232ec3978936bd8dcea073ea483ba8cdc29841b442fd28b4b4b1a282298776d83b2174114766b2017e5ad547a1021fcc3b829ba30f0cbdcfbae09c5e0101f8ebf1fdbfa1e1d029bba61c1ca1920fb36ea6e2f"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "08475b"_hex;
            m = "1c0c43b58a3c85bc56763bb26f8060b645988d11d0651bc6d32e886b624a1b38a2d8cb5ed0b05e998499ce0937bcf03e03585792abb877bbdb6206a0b192a86c7be6cae1c35bcef089786986cfc94aa85b8ffdc2b8b60e3c7e07714fd39f211732a008e96b261fe6eb7dd6d03e91b61dd2a5454afe482a724285911fd15bd160"_hex;
            s = "5be423f5b70087c95d748e060004afca6b49fea89dfb37c2460578af2484c0b9ac384193dd47bd06736c071b557aad22684016e6d97e9597f49d11edd8bc7e6dc44ed1f94403d171b215b00c8f3a6721e1cd4d37cebf67b705dee052a2cc97415fa9fac97180fd60ae20667af437d3caf6b69ac87eb9afc3c951a49719f32a9e12062500b958a5b48136bb41e4d6434d5fb59814384e06a4e4d0a779f044e873d5ceea1249f9648153663234cfe9171f988e12926059c896793bb56630432c5d3305d70b436f041c3eb1b6377cf01b27f507a9a8389f57b2b17010b808123ef23201da72f39febf7ea3841cdbe376d3ac89471f2494e948702f618ce382fde3d"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "08475b"_hex;
            m = "21ea231df11ec8a62b2bb1fb3a19d608e3ed32a531cf62d4b26c6e43e39ae719e83a32ef8063231b39bdce35e02a99d43cac9699fc83106fed956410701312cc2c5a148600176fff3baf075710deb7d0449ea1d62a4ac33cd103ccc97c532df3521072ea5783d3d89bca0667b27b5885638afc64a46da3c4c77d4d74eea05e16"_hex;
            s = "20d90f8361337e7196010e8778794c721c881492e63ceac4a7bbf56daa41fbb9c1716be12b56b79fc826b090c3a2a73f85fe761c9249f0be8577ca78385d11ece10270c05d07590b8d3c889f4cf9cc0881c066957974804f4a74aa9eed9a7d26871885260b2d67c96b1cdac2a6ea61650d8324dfc37105b916ecc406d604f79bbd7c8a7754cf805cc9c74914dfa1bd2dd6ab62b0e228673ac84faeb9b38c94f3f1a1b74d83188837dc7cdf8521bb61c7378c3db6c2305bfa906ab1c6ba3c2fe557feaa5c97e28304a64f3b4153265cf51910a7636b3723cd56131ea16ab4ad865224088143d36f7fe25c9f18363953b33692c10fa3aed59eb70172d7f4708b"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            //[mod = 3072]
            n = "9689eb163a617c0abbf01ddc0e6d88c37f8a6b0baec0f6cab8f8a683f372a53d028253a6ba502da462adaf4fd87c8dc2b03b6c07c2b6aacab1d8c8bd043d89f4effe72ea2547c73c6366a2efab9c916945820fb880890bc085564e57ee76f7107a008f71e941e9fd631aec78f82e410ea9c893faa3d553cd1ca628af1087ca1b0c6aef3b66edcee14d1d7dc48293ddd7deed1ccbe487c957585abb9509151038d53f46b068e3e139c7689bf8e8d38669896b8d082e65e458e1f82b8e8ec926e7aa0f97d08526e9636f2c00af4c2bd3d8bffc4bb93cd47b09af18883e11b639d47938d036f7cfeb77db74a2c09a6dee9df98b18eff2fda7d3f4135083bb3b59e2172244ec37bdbdcfe6e199d36dc949cda1cca123fb2be07803d003d76af3d7164453df77d44c7f2599636ca44d0b7a46218326b0c814ed322b9c4279b060f1b9e14b70f55a3751c4343763cdbf9c14637d2210c59fbd037be17ea6706846fdc7b9ab90278c01c458e64442f9256f3ad1cbceb22959d495063aaca1a3959eae03"_hex;
            e = "4df3ed"_hex;
            m = "54a8d256702239dee2ebc1dc681938b467ce4740dc5fff1796b5b50fa3f31000085860cbb568319bb746216bb065eec9845fd3d95625159cb359d9720cf838de6a3c958a5dc12e8b35e6f2e5757693528588db3fa7a343182c26c2c5e8e7e375e31b1a9a51765834c593dd53a1954ed7d10f077bb921b2126be418101e08384b"_hex;
            s = "869091f55f7e61bd18d88b974ddb408df8a724ca72232b6326de301cfc985e8db211180ad2057a4f4f73c07e48973b00d2833655acf393b31d155c11e9ddc05dd5f4516ac50fbc674cd0c577c79b00e5567629cbcf880b729a7ae0ca9eb040fdcced198243d40f5e3b59f35f2992da079e9f174844f1b2d0f1307624f4d868f558dcd1c6064297a152c816db1ee5848f9e670d8d837911c85b221430b309dcfb4853c3dbf6a2d8c8a6cd3d697ec325da6d8740081bb86e98d092a8794009915f5f55ca9ec074cded2745c50f328af98f78edc94cb6b416cf543d59a4d493824462a21fa6e368943d9d541ac233a7d708fcc7248be670051abf60199c656b8595dfd29e19a207d5c2d33a97dd7b66737023e62bbf522077b8531ededd070a2b17f7d1f9dba47a89585eb72d21c3dc6fb321614604899553bc0834baf3b7647a4aafa046964a805f05477c9e1def5c40430e82d635e7f90713e822e355edd10f2a65c886c4d94bb306bac35dbf307400eb7d8caaa36e167760209c80362e8c763a"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "fa3751"_hex;
            m = "6459ea1d443df706907ffdd3ca2f193f93f5a349b50357d26748b767cde6ab5cbfe76b1acb2b9eb97da5c4d2ddc8d18e3a3b1a0326d475c1c2c49ca73c0fd3fc9540cbbba85ac52d6811fabd693a3b09a281d535715ab784df3ad7292606d15a70ccd1a7e2b1b48ad92a6a3f736f9fd5522d9a869c7b654446102e9493b3ed9f"_hex;
            s = "2b72942573b825cd1f0172119c23440a2b384b7f2a3c5582bb02f764e2b159ea9ad880ca61b3df7ca249134f4bec285083c7ebf984b192808e916af687ef6c6a9a6722a4fa9189fac1521d03853f3dd5a95ff4b9dbdbf3c7077f720650ead01945ab5bfee582ac1643526fbf68efe1bb3b6f7d2b4b01f2155aaea38a2c7ed29add23ee791a703d11e3b1b7c500d9a6b647c1337bf537c071e5bada6faa025bcaf5e5d1196998909c3d64758826939ae7fe1466dc6efc10a2b25e21186c2d135ceace33cdf490b13a0d10c2527e04200aa70bc1d4f3cfb04b5d2bc17aee881d3a788401f45443470bc639232088a9553c8d792aa5707654f075476a66b86368d5a92b4c84a3b4baba1b0b98bdebb85b48b82b8409f2e9c1aa500670329ff3b6e83e25c561110d47b2fe93ea2946a74f9730da9b7d126f8d7c3fa4a51fc30144a827831c186390998d552a1b677afe5afee46e9d4a5774a56355a4d1967677e75d176aef71c3fa061644d7a9582385877de67f87724b0a6e868f3a2eeafb68c53b"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "fa3751"_hex;
            m = "e4dcdd4e122e9466560370fb59ee0c4c323fca47e57772a029ff1b216f194f411f166af725ca43d0ac3d0e4029a381359c8e36f21363511b6f0a620c6aea8d6fd915e80e2fbf24e543f5707c538c9a744857775f3b9d86d539c9d0c44364120799411e3a39f77fcda2945c58dd909f2ebe005535680c58f50fa32cee026e282f"_hex;
            s = "02ca1d1fe97e0c3724d649dbe493c4bf8825d72f0e1717a6a8767453a3ef20bbbbc62fdcef7b816af229dc1ee2464a19b63825f47dea9774745dfe4ffd36ea72eaed7137412bcf0d0d5a9ffb02ecf15309aa047fde0a32a16876bcc33363b7290b6ec9c019d82767d36dcecb841b6946dac889cf3e11e614c4dd07e594c50e1557665c6ef76ef2205d57a2c8e6d0950ad7e4e476ce2e095f7e376c21f96c38b53327c94a9c4547982ce396eb2070bb73df03a09efb3bc6fbe5c35dd89e3ce54ff093739c678aeced539f04aee3c4d391b1399cfef4e24529033098a29aad09e715daba9c4323837b48b5292bcbf32b39cf15c6430714a930bd840b8c15d7467e71e99ef6726e1ab3d05a0e96939082391956f7f0492676a05771f695d24d7c7c22c64d7ef99a295ce34cb882153162400a9d6bacb4e1002ee51317477fddd9923fa1af2ef60e40da01fa19a43e446144581b3eb8f4d44d16b31c0b155c7e95ec52da4676c6abc1075ad271e5b39a5b3ac7672f1c65a1f28d402c691e8024559a"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "fa3751"_hex;
            m = "eced7082ee6e916e753959e7dfbec00d9b424b64eb90eb2be7eb22e9c648674859bacc26d82edeeae158cc14beedcc19e713bb6dc71603e1c35cc22f799b29d34549221d0a5435852f14ac3ee77ef50eb69a495c31378b8b05dd73863a03eb9cb982b98f0c4a5fe766533f8ce3d7039410bf3c5aae5b49d0b3557b1692e8774b"_hex;
            s = "11aa09883b9f571237215bacf3ea7f100740a1bd72748804bca39e9ef8527692b5a8e1f94d255cab186edd16fbe76bb9d673ecef79f2614fc0bf4e2b3c28a93c39e6fb31de6c21dc93026f8ce717767d57bef1c91839568b9da11c1b48cd7e53e132ea7f9b12f80c3bc1a6b9ba1e7d234ffc4f251e6ada2588b21b457d9bedb51d14b1214144a81a3b987f00b20c6cbb314840363fb4a605495124abd45ac3d7e9d65e8b95dff0ba916d432749dfb24e5fadac418ff716097d86943a6bfa8dc5ff27dda853c63c1b2ce3383bd78197af3e30635d0ae65e203300ded374a790245cdf4d1640ba5d0da8d6ea35ba0263efde90c7b1a8ac1e3cd0f843e5fe57f681055de7ffea80e92af36bc183efaed08a5842f9bc8369626d60ab2c460de622b9b3c36e6e559787264abefaba843bf443cd9443eff990db82feece2cdb5e336f84f641176f82b41efa2377737089792b4a9596a32cad5450a5f6a93f947d249dd734be9b3cb6c825af53c27070eeb7c1713aa607fa89e44a542dac00b80bd246f"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "fa3751"_hex;
            m = "404f0ccd8f6ae6f81cd7a4efe9a1f630c56ac1987002698e0138507e85f09a89e976347a1a1214fc6addc20b36d217a9c52844d274e017b1109a7a1484ac3d1eb475153ba8efe459ed843a5638231cb44d9205941f062be239f103cd5c1b077a6af4b7f98229de786d7516b639ba8ebb23500bc7bb9c2d8842e5f48f57648205"_hex;
            s = "11368e0d1b3900af8ce2fa432a871bc448e0d49a71eee2b201b67b496ce00854138386c3cccd6e4210f84c2e1de653f70f16d0240666fed5b9fcfb247d8c77f0ae9826fc32d0ed6aff6e94eab735ffa2dd108b842e59e7d04e3eddcdcd087b30a3d65cd9f6566dad10bd2e9d7bd2b6c20167552e77270ca43a1ca5aee8c9e7bb5825970ab74ea79d3ae73b12d34274d58117b568aa724a6766ed40afe8d2649dffd5bb9c1c854a70a10ac5459fb9bfe4bcecbb04103ffba4d314c2c5aebd805acfdb113f5321ebfa19d0c809e8713e35bdaa8c7930c2f2ca5792206aaac8e44b4cdf1434f04acf6c1df428843b14e1c8401555742707bd5f9e4188f38206fe11c13f29947ecd97f5f576d4ebeffd1f29d38e43d76348bb43840d9044fb7785a0d7d04bb27206b2907759c29a70acd14dceb05d21e7c8bd907df3746b666a40e35245f7bcd723446b4e88ab0e2d8d5b3456041ba111a8276df1e4625e5863c5dd6b2c7ec1ac55aac7eb8373cea752a6396558fa7adea9d8c4fe0843241bd67f2a"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "fa3751"_hex;
            m = "abdffe0b951a91c54c7f00e1ff8e98060b413f131d9cb5589a861a053ed7b1e203b2e3414415873222ae60f527f1e7b529674b737149b7401d4dd3afc3c08d8a57d519c44f3d36af04f7b46f5c6a33afa6b12d92c53637ec918283b37a53aab06fefa87afeb928a5bc020337e721035b4ac6ec5a618bbdc6becc33f9abb98fbe"_hex;
            s = "183fcc6e78a7811df1b7442c3bf543e198ce6c691ea6b3aa1952bee39d3218a2b1cd55af26efe672b11c640af1de241fc1289cf10643992fbfe604e1e965d2eb9e19f3399d9fe174ec4129bffb0e041b15f8b7e7b25b535882cbd5d6983d8d84dbf91daf22078579670f70e1f46b723e5a0004f1870d88daa8d7d22df709226ee6d7b484ff47a44db43073f65bc6974493a807391861adf95535b560a47e0ae96af5239aaf1e524758ab6c7a2d3bdccc2f2cc173251954504b837e27f32e699e7604a11d8205893d8cbf9a5852af1f65f8e0b1e1851b4f7a80ff929d5f4f796aaeebddcbfc4c3835d6381b2341404b77d90c78be4d97747b2d6fa9b88610963795ee95f70bbc897b486cf4b313ade25d56ced2e8b6584b921567d32cd627e9497f39f743f020930cf5141668e127152fd92df34b44e3cd142c1668fd71f7f83246f2be3b2ff95bc1ed7e193d75adc5369fbea93314f03a305a825946846f59af8c108a14888e894872e4c0086599faef2f5a0edfb4e085c0402cc56e69930f59"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            n = "dc09c7fdce01962419294bb4e9c7896347d9bbfffab1d7f35b2e36671d7766a4a4a6b16e8bc12adba6503d4d967efe51e89be652d42b8e7b1b12c0ab34d00997b72a5ab3859bd7d414c72e2997521384fc0ce01f2488f443f1afeb043b14099b3b1efb0154020ff10c50eab077e534270cee6e95fd9352c2f70350c0103a252fd041f9583b67bd92d5d712c21d6036834392b72e622fc0f3d3e1d1c09d512fc6486e7f5465999dffa16e2c5e3fa25267d8f52dd639c84af6bbbb76afecba35b8775ff1cad59e8280d73cb3fbbdc084a60429f7dd9bbe9198d2c8351c27c4ab61ab68d54e9222ebd9177550439a5b5b9ae13c49467aefc41afe435f0dfdaef913238a1f6ecf4692167c19357a2625b06942a5c5856100a6c9d66fb4ee37173fca4ff9298d4d4ba558aac53a75f14be641b1701550fc2a1e2cb4b2c734d29b266cde310888397ac19667fc577422c90a897c3b2e65ed62cac471595b18bb124501a663b093d1161d697f9df6bdb151bc9608534a25f983b14117505040fb481d53"_hex;
            e = "5a75ff"_hex;
            m = "32e5485f4834ecff046b3f554de9f9d02aa8f95b2812d0d4fd1683c06a7a8d3d667324377873bddf6542d2590b50e3b58d4abb21b0ebf45d8515bd6f4920db978972ee85894ff6cae7f3158d7cde977f83702f11fdb583e45482eb803ec1764ae4092fb044729ea7d3a79157673c1c145542de91d6198650b086965d1205673c"_hex;
            s = "4f8d07925bc0ac7e423a824b1439cdcc486e9612f54c93f5d4fd34f64ad67369b172388e06da52ed100d278c77d6efecd3fdaf56d0a572dfdb978b9449d90951494809c2e88b4a25cf879967659db47dbd43656182958dfef8bc9c54c3a4d62fdb48066735ef5aa39cf89834e479a99e8d22700d288abadcbe28c6667e437515bb47c3d1662d9556ad98abc81bd1ce1b8990155c369ef3827e631164ce8d710c193246bd625692086d0e7f239ce3aa9d6b8d6a5728c64d24992465935aed196ab1715f88bc36118c52ba3cf48cff4e61fa0080282645cde0fbe9493150752093054f1f0889ef7a55c5814d6cf667913cfce4aff2941d1999dcaa5525bd497909839223759c62fdb1387dd4c84f72a32705ae7fa14512af2d7002b315c8c183f0bcaee254ad976270d035fb9d2f4cb22fa2e8a2535d9f345511b22391171aed821e754922b2f6c797debc339264fb28a9788a1d385f99a0333ef388113be22c7b93e18cc80b3a91d6dbe9dd46587544eef85335030a70ab73283e539498f2761e"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a1befd"_hex;
            m = "6de2659492e82a0541143765c7cb73d457c9b695b608231137e3b81fe97b23820f5ad7b3d05660e230b8f3373f9e4a5d909eaf41edac5617493eef9ff6ae7ca619df60cf5a23b993e05cf0877c628fdd24a5522ea4148077903d7b617db596c570ba286f9717df22374856dde6dfe95dfa26c8e341064a37f32784ede4591be7"_hex;
            s = "1ae7122bd67306b4f3d0c3c25a6d3f3318b8ba13c64267f1c4264eeb974131d51566fbc71108873b4920bd48bccf493558b63ded97441cd674a3f020e1fe2fd09e093a18e654a4a379443394e540a53f5c24d67cce5f15be955c446ca872b2505a3b07be1fec5847261e76cf708dcbeef8db95a6fcc87bced3f7cdc1f524616fc0539df58075f818608fc38809ae8e489a35d186c8053f9cc26e869866b98347f888f701635df245248f29982efb7b05e80787cab12cdafe54d065b2ae3e0bb3a03ad0a727d77f6fc3cec60a32c5af590983d08b0d2d0a51dc50f3a6bb2f9786d6c77c37a32c917b91f5b29c65a6911a6638222256ef04b4bf76269f846db847b29d9edccae04effa28e357a76499389b831d5e8dc7c42036bc4277a71b4bab0edd152ccdbbddb8957a3bdbbaf1e4cbfb2b8af678ac7706d16ff6bc40c4e8fc4cbb30146f66b8e035363c935c5c72d78fafe2c8ddd4f0793b98a71a6b7ff6b6892c7ec193d1076fc243ac061801a72cdb78ba2f1c34881c6212af2a7689ecf51"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a1befd"_hex;
            m = "d9fdd81eb8d725ec727cf671386e9c4d7968b23e4d37a39414cb6de55a8ea401fff5b92894547c7b07f6e0b1836dfe0b92275d8a8542715f15a161a34a400e489cc450505957823c46b242c8897b72d5c6d282a78927f250e44e126c59d50d0ff99525fcce87401877d9a41e1241ff935f92aafd218d2e50c8f908a94ef6a93e"_hex;
            s = "9658a72570e4ee228863702a79115dd33a0d562762306cc603ca2c480aec784df73a32c067400e5539c68e34fcbac59457b0d89e6eb6faeac716234cae40a5a40593be11cbc9100280663007ae815d4515210f2f6220a09582fff1c085ae1dbf7cfa9ecbd3113b0f1803c47c65893e8cae0802177aa0a056007bf2863298cf172425c61d4798cef950e632f1f6d7618521dbd7aafbec3cc3e41c3f4bc9e80e437e71b4d6f924b15509cb355fa2d9e91176b861b81e4eefee72e988e7ed8e4eb7b93c4ea35c28332aac9de918e49a7575473d9cca1f117aacd06618a1fc9e1c6c6f8a7b0d4cb5d04187bfe930e4fc5a080ada4888e6aa5dc3e984c7841a225c50fae637369150863294ce5c0398a0c7d045098c644256ddea27b63b921fd87f86ab719962b71b5d8582a91f762cdfe3b1b2c714dda16dd91155fc9b5be378bbf2635997ad8effddb3869bf0cddbc113cc97d67fd69ed4b7884246cd18f0ae3a63c2db35ab7cfa4b73777cd8e005d6e222215a4d8818bd6426c4adc9b1c69565a6"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a1befd"_hex;
            m = "f5277358fc0e0ed9c50e381423ff803035d7107e961281ffd557f42625585ede55fa23cf02b6e7dd0b3ea0f24564f0fe7038b33c6a71d4b6a30f640bd13eed70e57c03f53dfe1d0a1b50a341563d48554fee9a6c2756d7992fcd03a5a0fa370f8df73c5115b05965dd8c6888be502f3eba40ee96358735af61d8f87bfb56e5c3"_hex;
            s = "d261372ba60cd5812e0230d6103e1f9a777b77f8bc9de3f27bcb3d32e23a60f56f4631350703e200ed9a97d3e2d397234576c5f5c1a347101f62142cca0a53ef9e2b22e724c9d02e5bf4fac684e2803e95640fad841aef7626bd6ef22e7a97ffff31237a70118504ee8bfa0f0e71fd80b195e8221a296d62fefe991e4be69785bad174ab44728605a3d1c41918d33a60fd5a002465ba7b02341c30e6b058b47cca3f5c8a289f5ea3401c2dad9b32ca2f3511538407fa5c03045528e977ce46c8dce655f445588d4a1cb8cb5d76e84776ae86344963b675a3428ca717e4f940ad29199cbf87d27334eab76b878bb015143bc2537fde09a8aaf2649ed29a5d09570959f011778677177e4624e0ac7d9146a2493d5d1299a408b1383ba61df26415d64bcf38e1441c4e0123dbc5ce22e7e077cf9eba5d632d308c23654f0453758a984700097044fe48c61f1873e5a3274c7d5cc7d68b392e26007a534cbec0167760adc5f8b5fea3e2e949e963fbff9ed89e844a3ff2e145d7b4b1193f724aa014"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "a1befd"_hex;
            m = "4ebfb0c3c540ba37f357cf30a2bc9155305d091f7db0a3d608477abc54a5d6889150f3157827055c77f678a00e487ce8797cc1b28f1b7fe6ea69ba09483ac4b331070343da41f4d14ae57064bb512f6543568a54b38e85bac0f00c5f60a17dbc770d67b3b337927eb44d3fe67180b0b5d713eb6db3b1bc3ad103f9266582098c"_hex;
            s = "6c640306e33515434ee5723d46bce72dcb4c5716311c9ad1d0182987a3090c1b4de97bf8c7323cef9f7d36fc0cc929b2bac1e7f6b1456409f51656b9ac3b9290fdf7910f28a2d0f72e56c94b1d1e5a76daa35e62c93e373b6c6b4435dc1394e131af3c0658e41dff438208bf6b159bc54f5dea67d04e0f794a251256f915e8f9770815c8d89ba123e0c057bf5286e95f017e65492904975b7d493286a634fbf3163a18adab3caaea230c2766deaf36243a37085377f3db5f091cfc707805cb8a9999a06eb3b931bbce312bb2ff53230fcb0c920a816164afbe947ef666617e39ac521db2156631b0f1ca24daee37a521e938be66d36a8819d2c648db87914cb7c7db43ce885d1db4b58b99b3c0a35af19c9cc4e0af21db9d133cf7a2699429fd06faeb3365e18cfe8d14295584167ce708a047b2eb3ab1c25bd1089c4fa5f9ace5ea02a8e7a5f170c398940270405eb6fd2382733247f4c3faca94b368d9e104668854bd3b3db5a5c8e9f63e5547da813ac8ae5b020013280287832703af91d6"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );

            e = "a1befd"_hex;
            m = "6739c2996ed518592cde7619a0a5f361c09c51c36a738c189d80af0ce964ebdd24ecea5f5f3561441814e59ab2b4ff952281828fea451c4d4b912c84b65fd39b85f54eb3e80d83e52232d9caf56d4d415a21c36c763499fcca6f82afaa289216f01e959cf1a4a5c4b002fcb2521806edd244ba63f6862bae82e25a95ab064fd6"_hex;
            s = "bd4e9adfdf12d10d9de2d3c1d5324cd2048a57e0cac12ec5cc054f2f4c974b5c5dc3e8aca34a2a7d2907d3b930faaeb194f84fb6a9e99a2a7762346545f70bc384181b0213767f2a7381565cf4a17f3fd52c0d107b12d964605b576f2779411c38129a99300c902c28336ca76920b6c8e52e1c366fe92afe8c7c0ad93f38c07a9fd83926c1e634e026dbe67ae1f3df76a9bf6c75ecf6ecd660e68b0bb571028504bf233443e238aa573727713d659bc1d15171baed4d962017ab5689ef894802a65b4d522bf3b377aa2d3a42b718c8c7f205cd4c9c4d12f4fb2657bab0460c22737a5ee6524e96430493610178f19eb3750cb56f27e6088d26424ae13e863f410c7505899705168015e14ee1c5a1d4112b097f1e0f9dae32f64b75e82558f8f41bae65ab7cbfc400cbc1fd45601b53d26abe2f53a6ac660a7e940584e7fa90a0b8c4d906c46c4bb3a6eeed2327ac4409fd28b77b24c98e5c5f14a8e3678f965c46b455b02d7d0d58f24daf5f7b03362554d6809da7a90a3da53d81148eacea68"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            n = "acc1658b0b236d34992af6dfcd916f29c532a00faba18ed2be4835b1dd03951a5e3a46f2da3bb27a955606bd81d2be2d797ae651af241be9e84a52242e137c0d2fc5be00d692d094fd1606138fc280c113aa7e8250a484aea7c7e6f83bdd76d4966a5d1cf1d3ad1deb899ed53b9a633ed6c4617e38ec226523f6480bae9397b34ca5adc6e0fe854ce2e161866bf2621afff61f32b7dd08ce3ac931346315cfc6b66ba37e292bf0b5d274cdf98f175d247222843ff90e63e3d85427134dcc00fb20e51d84ac1b1132393fdaf7596818b56a9b019d65cf4b4302e9e11057ff90508d0c0c2c7b5f9d57e180e71b2f103a60ef6edbe40b1da27d16018bf6d4a4fabc9c73d5827f0e52c4a16e11d4bbcbc6cea5ff5bb2284ecce4b6080064c2794fa1cf6789565e16842882a7d3caae5051a9a45327b74bf4cd5885736bf5bb9bb045082aed3454fd40fe3c83397bb56115035f358735c290b43d5cb1f67b8853651dbac0cb9a197b46abb1121736a17d917dc2892eb2c5b3c4881ab472db54a5c4ad"_hex;
            e = "c4d755"_hex;
            m = "76dbb0c0d2069fe7c8287301f57169ec11c79fdad4191c4913f111362d495e8da5a058e5104dca6a32123a1a64f46d35384a2dee60154967cc8fdedc1307d51f14ebad44dd277a9dccad2ee9f35518c8c1e8aa72df777fa959f29decfef6f7ee09e53646013cb868dd21d9d46c3c728df4c8a0cd1aeac7f70141d6cdb6becce3"_hex;
            s = "2e34f1e2f8064b52d770593345194f13460cdaf2bdc502e14e77ecffd093bb57fed459b1f1a26c15d58ef9ab1da879917cfcb2d5793b8c774bc94f0494c66010ace1159c8b546f616125bd79111d81614de5b0f6cc42d95c41bee3789e897adc94aaffbb3bd51e5f022d0385b7a1956cb013353c1167dada2a9c7d0052a0e0cda5eb0bd30f310099c1dfd36c809e0ed49d14ada4d39551a02d6d7e6db2a3a1ab499854c9445d2e9513529b181ebdaa6f97a3e84c246277f4e9ad6428a82c3745c050951ddb16a074f477cb10ee2765ec436c83df7342c6055a4c4206c88d826d04c7d342d5fc46a90c22a5b68ed57de78287a2047149290f16778ebbd253aacca35602f2b2f855a277ea263fc2ab286a42f5531248ae38adb65b8ce4b28185933d8a03f4787ec35a41d9965cf8a3a46bd970831842b94c99dcdc748ede26611f151fe33a64921e197ea329e26ff3cedddc830198a94c1917e8b6200f453c69e04cdaa9e872167aeab367ef9dfe7905581ab0796d611b15b97e4f6b351869ef3c"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "5b1365"_hex;
            m = "3c2cc086a13b1d1b232f0f131032f1ef2dfd616ba03641680dfd012a00c221c38b59f1cf30509c620080643f05e22f4bdea44341a97c4ea6263da90018a8dd43ef84678ca5f1b811e6f9805873682ca8c8ddadbefd227cc0eab9db778eb75db8b2d6a823c9c57a111bc2eac7226bf1f034d1284a63cfd39fa29a1ff72998a80c"_hex;
            s = "51fb0f16194df6288533f7b91df149c79e8d474b4d44a51f903902700fa561836c4c6a09c9c5211737217b2de1d6d73106f4709ebc219a4c71d02516a9e42dc4ef9e372db5c3d05e3ba2c3da25e5e8519cbdc3998c0ac5187df777acce31f039480e11d745c6c0b235075cf1805498ea1f15bc911f6d94b3d332084ffda0000ee0d72572a5a24f303857447081129392a1693552c5da4ef6791e2a0f6e68a889e98c1ca7d8dfadc7beb60e8ca4756cb8f56efc62d3accfa16462f597363441dd9ce27328ba9014ff366600ac42140e1b4a4b9a068bbf05fc37acd0eb7c9fc6803a4f87d706d72b570e0fd405f6fd5b7a3926f5e7206d23bf2dd39598de89fa1e66a2fc4533f516d15f0e44bccd0e8d405ee95f1586d17ee25feff7bacf0f3a008e9c0a15129ded95f5a50fa7cf129517604504ba89fed73cbd4e96da21e824b93df4cfd6776961d0d14e5c3a11cf29a836f5c87fcc60e9c837717a632d070737b470f9a374c916166b5df2afd7250cff6f03ddaacf68b067bdf0edd1ddb82d2d"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "c4d755"_hex;
            m = "9a3482f481638f436c51f7b74d3bd19a91e99b02473c7f028507d421071fe80b1ab6fd87b8e491a9f587e3499a4db2b40f0f48a07e61b7663567636b4ceac0df88aa5dab80f622a4fe7bd605a85ae31ce07d5e43e82a42124ad8fcd377422d36aebbab471fc1c99c51d4d8d3c189ed3cccdae5d2cec0a7708c04a941cf51b679"_hex;
            s = "0f5c8dfe8b67996bb62af65fad25c816979b33419babafcfb3d35c2887a0375ee7461487d4d65b1c03306919abad43793a93643b912cf906c4095356b64f8a3e01dddd2446ff3c07ec62bd6c1b39fca4efd95904ccd0cf87c1bc5f3659825b86daca6b46bfdba8790c4f958ac9647cb1991e2661a01925c79d1f9b23856e8035507b1cd66956a47e97e756443c6ebd46105f8788b0713f6d3f04c3f16849aae50dbe920a35d5e5c1345af610f38ee98c153b02dcc6a1175762af98587c203bb6bdc93300af93a64798d8f621a0805a3212ec9edc90ec4bfbb63d6121ce478a96fbf3e731285daa14a638d5bc9dfd2c365e9d1d70b80d3cc461bad93e7b2ee984228206b52c9bd1ca44561efc558a6133e93d82079b1d5bfc5006742848b95a7e50fc3b14f3590f76f1e86decfb7af82d49853b3b1a8b54d8bfc7bed9f50c78ad01a1b8c7a24ea959efc8c54e0a6cbde288d36673fefe3a3a308cbe895de7e1ce747073eeac6df67fd3e15b38de300d9555450948d2c72c592f1a3182be99d760"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "c4d755"_hex;
            m = "adf9b0a89d93e05bf18d5610d03d9e70474d4a169bbfe6abde2f2e4fc1587e3ba9da89a5053b4ee4de2b48d5af0ce57d78b13af00e66f571b53193daf058d33f98236ace2ce3f8f968333bd8197e82c82fc265591493b4673c62ad86feff72a4a25dbae9bb96c6e2b72e97dfb49c5e9995063418554d0bd49c49e41b905643b2"_hex;
            s = "3b62f0d4fb1b702eda45e08c47d87b2caba37728133b54bbc654f1e39d4290050392a412226429384178be20a2bb8a2d737f08bffd1396052e4c82d625e3ff46955852b4ac9393ff7e620c8fb7ab5a7173f3cf67978127df7dc4496953488365e500ff13a1ec170ab95d48ae4b7c0392c4822f531a7a534464c91401d40561384c0ef1caab31f449a926e2b39dfc1cf0a048d121080ec31776da00f2c392783f15dcccb369844d7cec262fb6cb755660b0a08f00720b059b0c272262f2a943b6253c353e6069ccbd3c70b0c3a1474cc1d6f878e7a8495b4aad1d963351f9d23b69af996928a86f113ad50b327c26ccd599425c67c4f7bf8e495f7945efd4b11b952c52266ea3ebb46e445d18c596b8d2d6a9e8c70f0e3ceec51784c7477b662b304a5530caf18c3c8a232fd11c63258002714c298c258d724d8e8d4f4117bd74d2d92dc66fc324a257ab2f907aae0c7a8ed9e1aef7e9d0657472349eeb3da29972b11a9005fd93dead2361df7273adc8b968e0d608d782878ed75fd7113b7d67"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "c4d755"_hex;
            m = "8b02e84531d5623e528e208c109a68ad04ffbb6ed29d075400b41e3b08a7673dab00d3d589b31344efa70934f0727c9cb7650fe31bc874487466dd81ad4db3a29bcf8b418dcc56d82534d76a66c75b6a0d1fa4d825f126add69076797eb2ff4b0377f7d167a791c09c3b74769a206ddfb037609517a0854bcd38d06ba060b1fe"_hex;
            s = "8a5503759f374b78b8bc654ffda8f1add7ea05e24218f9e9c140709a90c5bf8868f081bb2a01a43d724c99e47ebc2634859dd11653b1c5a4d65dd306719b7b4cf2b66f7ba3c93e8731a7adf715c5b0365e0f9453b14d08dcc88052c97d4fdf05f4c92dac2ade4708abe6fe752ed57a5f39281b0c5aa349e3c4ca056f66ccb6fa07154b12657ecd5a94db390e09320dbd2c452e84d389bf2fdf4686b21905497830aa57bc5ced3d23b519f6d6c300ca5d3903ad18ca426b13dfd5bf56e7b47300f88ae7fd0b085807951db84ca9074ec40d285334e85570f0df96afa9d85c55aff0bcc2ba28f2d5fa4860159575ee84194238424213b7673d0f50bf903351e274eac603f2e4218ea8c626fced0aa08097f6630d92139feeabb747ae20e2343c3d8c7647ec48ee2c0d00031b9c882f91efbc7e8487a0010ad3c51f160b902b59baca8f19e8fe90402e1e0131b37a936e101e15f8e4cfedc727cc160c6ae206f3c70ea09f08f00c9bd1837296785536d1bb9785014c59665cd2b930050161d946e6"_hex;
            r = false; // Result = F
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                    "RSA PKCS1.5 SHA512 signature verification failed"
                );
            })

            e = "c4d755"_hex;
            m = "379b6b72a139346febdb0fdce95394c509a6c5f0876de862e47b922594c00549f76dbb298a5943f05fa44c5bca9a00c05eda934f17b71b98d9dea24d19397949da14d0d2dc7f841b10f3380d4e38a7474a853864c5ead47c00ebf4ed766efe5bcad7d1f5ff719efae710fb7cdef43265b8f1dfb7f7cdba1841eab18d12243a86"_hex;
            s = "88f3e8e1b41671191471092d34520f6a43742702a629f1cc9d2b806c9e6cc1f3ab47fe1b0281570a0825c0de59b24554d4b78b00de2b807a92c51dcf22def3385635b477b9129a34c8543d24173f13167ad7fd7bdc108dd5f8e3f364c3f53ecb26fcc59145ea6ac74aaaa7cf0f1aff4b1462256b87e8d5dc9cf74ad2419b965217cc9ec90337cc01c7d9928ecd310468ca69cce111a16ed5bf7a07d3fe4dbe0b34b59645527547ffb9264ae48eed86d05d1caa8f519d5391bd2ce830d8ad0bda965a735cd4c061797ae661d0bb0431a8189a35aa0b4d2a6a6877b703bea7f09422372913e4ac4e2981e3c917f7bef9f9a1727fab29af9320b9ed44d5229460b06055c2ae911f4eeaca72de9c3b6269ac23943b13376e5009ebf8d349d34a28a07ba2f85466c2d488b6593f7abdf0f221c7aa51e142ba9e6828d23283e39671a41531f01a04fcd3dc70172dcef185e26bcee509a143150ca7f4e2dfdefd2be9dfb98ed0c7b12de9dd8d5653b88758ee1889093dd529657042a86507426caa6488"_hex;
            r = true; // Result = P
            d = eosio::sha512( (const char*)m.data(), m.size() );
            REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
            assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying RSA PKCS1.5 SHA512 signature" );
        } // End of NIST FIPS 186-4 test vectors

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_2048_sha512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_2048_sha512_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba749"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "b03dd72dc84b305ea811267a489aba10a1dc54b59f92e58546a2f0b6883f543512d621951352ef12abafe4bd6e10c2e5b0eabbbbf1d081b66e535fc9b8ad379040c3c71ec8f2b4f5d319f5d2a0240a767ddb4de1fbc878b2c5e8e1e260217bbd70971789fedb8c677fc8193f67e4637239607c7b9d3511868ccc0df372374abc685c9b4b74b2c5f11758f809b19bb3b5c464db870fea61ddfa5e18be2c4106f3e165fe85a7f8241db2806d0fc3c45d8a7f1eb4ca411a46ac411b81c04fd8c4ced5eff497da6bcb8e2fbe1f95cf4c3e761fc3037c82276f7ebfb7e6cc8534cb4fd34192074f580c6e31008df4f1404ae8dbcb111503d4bdfe6e7107a1ab5cd8c6"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "4de4dbf82607b36a5c6778ae6351d83b7ef5b4af64c3788889eb10ef1838822847ceb531914392360b92dee055796f73e3cdb8b3d50910a537dd2244fd7f922780356ea3f01e99e5bebcb1b6ef398d2399bd02472a871417daec3bbe6f89f45f1af0bf819a446dcbbb75c56958d34ba27c8120cee6ff97242921ccf58de9216995fa0c49cb3e6d60e46411b2df3b01b78fa81ca145ce8be594ee009031eda672eb097ba5ed6687a703b154ef616757f94237f4275f54738cb59d36b20a9c84ae133bd715747952f0222573a91faf740e4b7eb4e88abaa91004e72a1709b401616b2edb2784e491f671fcf5ebe326b669facaa5d8a0f6f8469ea995c4db772f06"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "54657374"_hex;
                s = "a0f46582cde6be215351bb7b29e8ff24398816fad9e7e2ed6ccf1d0b5296bad827316c18b1565253291fa1c0baea9a735357cff8920e1024ae5707dd2f0cfcc9e6cc81402217d9b4f51e10def2bc2f4924e7d22c022fc87d6c3e772f4952050d027b003ab4267ff227a15cc7c884cdb46bbc7eb38852d0e6d8a12f485ccb0312157097687debb6feaf2b6dac998224c6047c1d5727195bb8ce05a59669034e88de0e4815af00c65def5b9748d017455056cc1ac6d3a77e31fcea4e726eda6be7bd33e509696e54d1d1858a1165fa9ece5d62e493c1a33ab3c94d294838a19f367fb799d6b69161bd9532a6ef317deb919923d78e33309f14a97b68023d600b4d"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "9922f7bd01d7ba6b2de255b91209631af92e5537a4554b3b7a50e39f2fe9b6085a7e418084213d445794ebc19be43782d9f80df1daa7498a1c67d935ec00dac6b7a194033a14431320acd1d7f3d4c2b7b5b1649dd93931c49f538c94e34f44fdcb8dac9d31539f87e6720dc887c6605284a6a0408e244325e35917b1e1ccdf5959ca87091827c8157bdaa31239e2103ca8a112cc76a8e7e90f352fb8cb3a3381e52cedf4d4188bf881054b80387605e7041ab149cccea1ac2bb6560b45000601c33ebc31cebdd499c0b8fdafa7c1691d6dcc48edc98519d55d126a757b2a753eda4f2bf35cb191face371c9c34b2ab57242053b9ecddc91e4b621e650432adc8"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "4d657373616765"_hex;
                s = "99996fc01a53bca03382b96e9ad83a3139bfacc5d37b180a099fb5d515a7b78a5c21a339ae6bd2bee8e0f503ba2bf892c1885ad5f4940a99d8d49df6f4623da16c337a011fb895c006100286aed82977be3fda054d1e935a872939b704750c3e2871c33768946e65a737184efa50060c6898247a6472854884fdbfc2533c936fe9c922d881bd5f093851b46693cf633e25f27efd6db65da3ad96f2e8154ac39f2a9859f15c919a92c8cd22285c1f9e87444e61769f6833bd0d56106f87825e472e59caaca1fedd8d4065fad9dbbc252a84c196bf5d6c40bd8660600bc6c825bc7470aaf4ad118c6c139a5c6fefd5223ef490d4afa6c06269ea8c0054aa1f368d"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "61"_hex;
                s = "7930ceed4b191365ccac54cc8a5bd38498c0d0c1fa5a862b6c0744edf9bf1969ec4f3c7c42aec737438acc797b8301aa8b30be2a4a4c1323be0427411dc8be84881036e9062a55fa2334176049305a44b97f90ed0b3becf56f8c9f164ef0bb45729f9fab1d459f690c58f07ef5ef89f21b15da14a235f3012e6f83a7f226e118d3b7fdc9356c39667e1cea5c667b54ec5ca6a0d58ad933484f447c670e5bd3647361c81831dc710360a90692eb7e4a57ad225b2516d9c3bcc77323a9354d1b92d0b3f5ade911f5faac4e4bdbead32f3349840ee66f4010789a84f0934182c2b0cb7d6e72e2b2a6839d03d7c9f681bb7148449161ed50b4466d60002cdb7492fa"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "16b5ecefcd0167682fbb3601a016bfa8bce9dd5855bf305ff00b45d97e50fecd27716997c37ebf8efd8b269558385b3ecaf2b6e38313508a7a14546107b75afb450b1a0e39cd0760151b666451bab43d7fdbd93771e9d98152ac889bf1abbe1c3f62049c4735602ebd6a90a0361dfa08417ba03c55fc6b7bfabb136851ab01eacf528abb1129bef47f2b04e2aa24c0341720f728bc9fe12cfa5d4248976aaf7035d19c18302fb9ae2443286a71198b500034d48113b705c83e64561762c583dc013cc099c7e5bfecbfaa7b971c8f1a4d3868fe0a4ad518372ca68c65bdefbb726b1fd92ad92ab739d2bd1af97724dc076ba011a9f32db3979ca4cf94c5370b77"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "b73d6d97834d8d14bb4536b050dbe47db349dcf6847586f80624425065e10360f9ce491c38ae5e48f6640bd3a314eb097f08c859625d3b7e8198b0b9dda03920ce5fc4937adf8c16af3dea2cc3137c2c200cb8538baba5bf36c9913784e079d8cde826f615313cad093d53110ed616591e5c38f32e2873225634ab10fbc7393dcabe742ebae9ea3802031ffdd6356a30aee51d126064584db555657f11cf742b8ee1ee41119b5c2e65c740219bfc36e6f65fe8db8d16684ba4cd7a12b5bf22551192fa75362b142b95a0b0d786eb26c07547e73ee3f3a3f0b2f2f37ba562f61e86c4bb25e7e059ea504f0ea8f5883382d7b17c95c5297a934479b4d40b632e99"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "93611a697f527bb2d6e4193ea34e079e0b8ec8e4a516962a74cc91c157528bcf4654beb487f5eac5ed445f858fcf8461e63fc657a57bd8226d980b212fb5e61111e0c654e0a6aa0c959f20001f6345a60ab14b8ef5631a81cdc552a04ad3f17eef287b011ce401be17900e79b4b045c12a90412a852131a1b9ae7c31051e8fe6f066b4f7e1d8e9997aef10a8c516fa3d782c9aed73dcbaa1d9794de7300c607c17607740f091c2dde354b58c0ed9d4b8fdc43e249847b494821bc9560fbc3c57f363e5d2bfcc488c041f123fc379c7bc80a9ea6ae98b7fb76058f9260c0f5fa1000a7f865e5a63d1d279fc7f452775186608cae1f3b640594d4b3fd8af4a5a4c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a98a9744f1f1893343ba5b702d7d431e40900a3e3948d3e6630fdc0a8f391eabe2f4b5521a2bb03a16053e87a15015d5bfbfb0e7ea4877a05f491bb8df5893c867070256e8bc348f896ca2c8ce4e0ab6a9adf10ab98412e4ab6a4fb8440243fd34749596855cc14745d7096842c48db0647fbd71361ebba7fc263a2d191d719d23e727b1ce36e543cccd521b540cc42e01120994a06a95f43cb83ea51f73dcdb9d5a90683f627a070ba8afe67f9e29b003800479b6b8ecaeb6f2e68bf19f1eb568b170e56d70a8ae41d2524a0e76bfd0f4d27ac8cde9b00900b49577c55384e948c6c6dce081d277c3623b1e749748488e648d9349b9f17cbf072d7083c377ed"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1075928172057bdc681a626808436b13f556883057c93b452326c7f51316939cef89fe3072c6f1365120eceabaa0c12ce4ce05762843a09debccfa01ccb9a85f8b0f1f7f030ed2a0c1514ef1c25cce22557d30627cecbac23f9f1fb645776883fbdf502894cc373e18ac6bf47d655894b528369a341ec1e56c2801a30f4c93e5219a24f727b5d41c0789d01b868742dc9225f5bf3b588e5836aed54bb009e44b9598a96bb36df4bf3521cdfd792c2bf9647b01f77e80f8063299ee26a9a36aae9594536b7b3d3ab2fa8df3dfd7e4380eabec23ea09b046d9bd07a11f084107bb6caeaf32559685611791912513f50b0fca6bbc37f93b4c0048a41758228539e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7a21f13f8af98f47bd62b03985a2e91ffb3c7c3a5af6ec75c2269e3ab11d859cd45a214b48310c7fd7983c8577d839cf63d3c3815302ea649a17f813d6cdc75803a6caf2195fe17a5e84d8a59eac0651232dc793d9b7554eb1123e3594e1f6a57a72e2bfa6b1ed9f1f9a6168aaa83ba2d8b408f3c709354a278b991751207075e7e5548f0c0f764d58775db3143191a210e702b69dfa8d8946b1a65d67b3da6f3451f70a65d29314ce5b7ff13b95cf7ae68854f586140d97a0e9de4ede07be81fe20a5b6330bd9c63f15a3d4904b3a4596951ef5c591007ee2f6ff94fa90abd1093d4dec45a9904eb656713a110faaeec429fea9d1b8c47133787ff6aad3f938"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a7db33f68fd972b3e122e2dc8c749561d14e513e7df9b03f285422015879de35021689bccca37b31aa7d156f39399063a06fc9590c58cee25d83e1debe90037a8713eb0c58194e7b54ddaa86baa0e9f83b604afb5585aa1e1a45fe24f38576e644eedbbb86f57031cb43f3ef1428a33998c1decf44011b63763e47d2b2fbdaa90deae270455607b928645b3f5ac39553feab8f5115c9e2f26497155076c13d76d95af3ef342bd1828e382949a63c54cd0d4c4c53cb00ff4b8e285034e78ee0f7dccf9017839c189ccb3bb8b92f515beb63345c9973e77dfb388b373b8076578e41aa3bf3e86bbd4e1875996ad19c8d618c8d69f4eb06b4103cceb2b8ccbd8a58"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "72eeb72c3c87040a35b98244d6d93cd309b65bcc793bf9b10d5f7501bcc4dd8030eea73c4670de7ed9605b3210dee4e53e758fe7741c6410dcdda4769df6351ee82380b5b2387c1cc8935a60d58408fa1a51b485949e0a4d4a82a27e8b2265ee634815b8fbe3778a00fcdef0201179bc4999ae16e1849027ecf92d53f53ae3e04c9d7a39e71f9be774036d40d38777fd6e115d0bb7d8b538e57cbf16bb4d5748ffac01e1b20347bd688b0b45448fb5028fdeaa190e3c288df6dae55ad078b50cd64adc36d471f0c31b574fe86680afac6a61ea7c2fa5942687e1a4027833655f88a123b50e7ccafb7cbb73c8ebcee7f915258b8ebc47a792832242176e2713ca"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c280a6067d62ed84b0f9f44bfb322bad0ed92fd26f5c8ec7e91d9a115eec2dd6f5a589c124b50b732bc5f4e382ad344a3498ba280d70a8e7beb9759972fe31da8ba57b29a13c17004e4336207109385a5e27d53f12abd5bb6059fa917afbd45ca8a4322928cccc776cfbdefd7559eaa86326c21cdd6ae4c40c40b1659016520e5d34b1b63b7cf744a37bb795ffb86d853dec82a7c2c57ec5b14f68535c12279841fccacb94b35049a5feed59496db1ed372f968a4de1d70dd98c64e3e17e541d0fcc971a735cc610b9504680cb615301440cb211a73b6bb9355a677be77de6330dbdebcf6abf3ca83d457dbb951f3189d017022c354d08fd7a5d0f8f63aac308"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb7d11eff4ebfc47082969640c3883ae3b2a95efc08f0a4c4cd59c61fa5f15e1235a3e53a9653186f09c21e11757a016a671db51ab597959a437f26dd1f864ab7c67306fbc578dcf614c304f8ebf6b745967c71b8093485f74348f81865bcbadb39075497e1ed9de3f9e21209d21ce609d2d11c3fe837dc7381ef8aebf4680e680276cfcca5506d3c1eb5fce1655b566ed63cfa69e4e186140580ec9c7a51aab286a54fb674cbc1b527ef6d778ad228109a93ec4a7dd39c30c5879e2517a540ce7c0f4989b7a930899c1ff51143e7d2d3802c2328000331b9c6e9c887fe8242d2dfbff5f828f604050268c450d74779f8a512dd0632b90c9b5870c541b45d163"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4988c316c1057404e4b0b1aa3d0aa039e0b4dee3917449c0cb816c7d738db50c5e62275770f2ac0372fa84e88a20a23b9c36970c6065c599ab4c23b5b28d260e95b7f020d760e7b7e00f0e7f7bba51ba104ef62205fafc6226c95c0f483486980eb163497d7c33aa1b856ff77bc1dcf94c57442edd91923417afa48fe718285f358a24bc7bba48707155e41145d16d9e37a12b8821ff29c581dbb2f3fb64172633c6d7c1ff6b78debd5fa8faa4623fa3fa93352834c7948f7b68311fd8f2189e54420d73dd5190ab34dc3a8efc9bb7787603f6030f0ea2eca2aa7e87c4373c9b0b3c8d9fe16afa3922639501b62459c34012313c160c8707f740330870ac2273"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8f9a07ec03306424540f913dfd03eff0567cd419dbc5be4a28b3dfae5de126a01d1fe4c6147aa4f1a2f57fd50be2566ef8ef52ad8ff816abb114060d6efcfa64abb0864e613907ee142a4f96d965b3aeacc6c870bdfc316c72d43a5c9172fd2a5ba0de6c521fd82023c511c40700f7b7651e8e98a0a20d84f7be365ee540a403c9afc6087dd5ae8473006fe4203a790db4723520be38fa3b9247075c93e6b5499fe8ab997c7267e495d1a99d5865333acda265c02569040787d5aed0bd4e492e3f76605120bd41840473da0e4fe1a388cadca7b4d543f5beec4be9c3fbccd0442dd0b11f9d79c6e910177aa1c997028d675980c439e61571011ff9b26818a69c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22f3151da8a6c4d0b32ed9d6fc8fe090e218f18289b5a7d780b9cd78618f57415b49ed7a2ad1064cbeb8a20dcca021cff65e5d51a6d662f947dd2286e4734ea6923ff40acd41cbe4e6b33e4661966a8de0673e59958f71fdc191b24a9ca7b08a78bc318de1330ec7025f526cc6704faa7923c042e561f83719a7edcae9a3cc6ecd91d86a94416d2ef60ab3e74e1f587c0b5c26fbc4e2f67983d4845f907e58866936c80b3159d352383d1deffbb9bbd67a2eabdcc43450ebfda73495618c6b5b8093d49e1c0c32445f5e945227de1e8ce1cec611cbee43cd6956944d6554b5e120ff63899755836df131feba79d7fb06fc3a3b0feda121243ee00cf8965d4acf"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ae0ea39ab7ce7af3075d67f8edd5862508eff6170b43c02e4f592c9101a7da1dd7ef2e4be53ba3449dd6c2a6c1837884f12fa29dbe8e9d40c677d1edb6122f61205b203ab0f342f21ef8cd45839b9fe9f61738e7ed0915ff398a679a983124009fd37fd5bc9891d33f4830aa6f89cf30b59dc3d84cf955ef960a0980f524c686cc8123dcff7bb9dc7e7e1bfb3585bec3aafacd5a0c7ba63f6af332dcd1b5215f95f06d2307cd75dbafff2ac5cdcf4587a68eab0d3d277ac6e999ede44a551a0d266f9358074715931a7787f4ca26a94ece1c963a96f6558a6c8611fef31a5d459635bc2781ecb35e75837829864001074dd585d70b7e5fa6abe2a6e28b67d48a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ae177278bf000f22063be4bbe62c28840bf0d293096cdbda95eb2794930c96544817c7af9e92f22dc81ef2b64f43fc50243ac91a99ff41d05a5e38005a32c519473de62f05a5250643412d6339b44fcc3ff2eb671da073ef72832cd9a4e892fa67c59f8dbdb1b5564f1c8b93ec9e9a1080670e649450b006afac18937a62142e2041cc5394f87325e723fee67bea8385eb8847058fc56bad33419314e4097852994286c2094e4d0360870aee0a6fa2a3823d27eb3650e727845df9dc1af0e475a8325cb9a39f0a9ebb2104a3b66214a7cc02b2ad3be12f91fa434553927dac42aec55b8fe2b5230b0951d738b42b73063b97eb6cf1fbebf76f5f7f5619c730c1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1037912266d26bbb66bc872403272075ebc3c0352ee5201b189db701f64ef193dc2facec45af460a38b8d2a71d1ccb17dd0f8532bd87e5d7f6b8e1414367b5128e3f6035b26054d3331ece1f926c2685f5c286ad0befce4be76df6c26bae8a6df520ad073a058eedaff3d5fc6906e8e1c864d5b989ce9319e87fb121623a27432e2c06e936d151b7657d6500a08e8a3c71a0b491cd3908811b18d00add825f848d6a0290f4c0ee2e289274cbac8c8ee00168631d43e7e637609444c18aa4cc0a887bc104d6ec9f699119840a99a9e6b7ee3dec0d0b4a1f6a1e022a44721066b0fbd6a7c6b4f51401036e755924845bc94de315f494c5c19901b23e62e9db6aef"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "47fc62936a9113548699f3133f7252e4d2b060969d2a992e4e83e2cc6330f4d3c9e5cc2005ab49f26cebe2834b7febf478cd01d0338a56f262955f61c70bf662a55ecb8848374f38bbb16b0b25bc012197e2b92d62b5c38bc7b2b570b376f6aaab95a134cf6d0805f3e5823bfbc5f57b69cd84fc103d7f3fd7f87186a08dade4522cd32a7cca292d25c02c90ea0a44f6c38c13eb58b71a54b58e42f17245f1881087d32df31be3e83a2716ff9487e3b389e2398d79ed80c0cb355322358bd908d397b7365185ec4f55a50a5879bfa87e248d31a6ff51617b282dd2c07e228510790babe57b466e5d7e7ea6491dd720e98c77124354b3e544d064895ac845c35f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "389f60a3f7e33801cc6067cae353b16263aa75279d0cfed16c122b4ed81350538039fe7f43859a1f76bff62b613bc8abbac257ee6eb3e5088e6ec33815281d6f6702f05ff75f2c6260c8791e43dc168f69eedf1d33d42fa5da0ddc9d2f071ab3f9dc0654ff1a3db8c855cdd9941e6c6609aa29d69f6b1b1254c3437196fa871f443fed2b2beb113257da4bde8aa7bf232fd9c0ae7e7419bf977f14c4f2c4d128e5f79f6f5c63939e7fcec231ba64145f8fcf6f43b821b41776811a848d613b5da4cb8418a1a95402c3ee5bd7195666e8d5b13f12b08cbd730938c7ddea9d65ca45683e9de28d618af1b618aa0bc88e3d1db4521dd069be105b3145e54004eccc"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7528546f84b9a056e49a848644d876452449b0e228681cf1a83c82aed6d1d68da0da6b880e31d71eeadd4ff2f59cd55340d630c6c548b4b9c600de0cc4b18d0e6144a5a294216e4c9901250ec8a6897eb39517212fcb0ba823ed763427e477308194927c7ceef49c440c690f5ed33375cf29d697da0fec04e4bcb0d2bd0f52a3bcd209218605eec678ad665e8adc2ba55caf883d14fc6cedb87634a36b0fb6019849693fe47b0e5ab62bfee78b415397887cc3ab293b170b5cb4217f912e13ffaa27f8ae6bdd4210dffa0179d723a53ecf6d4996992ea0ac9ed6b10064bc793256bfb4ac5aab69858d9ec4cf9bcf13c1bca969831639fe8bc372ca67b7603fd4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a736d77611787cfc46ef5e49ca0d39f9a1249326fa77b50e024c657c791da09ea1d363657fb7b9d5978dd9b75a2b7593528e3c19e6e41abbe0e71273cda50382921ec6b366b07f0edc0aedb048484d51b603d062aaa18c404d6bdbd61a7bdbcb32e917a79bd95799cdf43a992ee3d93193f9a20fd113cbe168df7f884067825b79fa73c72b9168f7b83002096fdaf613919ecc40422317fd14b5ef8d2561639a3bcab462c3ef8e0f59929c43e23cf21911be969afe3548c1b449baeab90a8f6b52be5f6cfe47b941a625d4020785e8180eed315b7a6840986b33b6ad6d519c53179a2c3cb180583808dbd3ab5acd90e4ee01687d0946578ed9d7558ab8de8a8c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bea793e3475943e123a0f811de9b3066d85d6cf394e1e8494741d8449ec11eed7b3d796ac69a5a3ee4279362f4a69decdcb1dbf397c7e0e46b9b855feb3b125f3ee8c735f79282a9efd6fb25bef533a9f3641f47d1ee3bd647e4b8e0c1bcb48ca35468302cbb32ece10135a63b4d4e14300d0a30b3eed9412b24139134c84cc2231dcaf505a15ebbb8cdffb96ba06b24f8e85e4274588f20454175752d94b0c71aa8d50a776ad13662c8badce5ba74f4d086aab60f12cfed831ee562d3b9d9bbf4cab8b53071dae0ce35644b425202595f155eed25a8d651349a2dc734130e0bff2f09b12750977fec65c79449b95957e3602104b4b0936d8e41d5fdfd1e2c72"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9740ab49e35c355c40c6eb4839c47c85a27231b2b96133015267e10a7b0f786130308be8255c68584aa3f6d4c1ac2c304130b5bced81ce26cf6a0a0bac293f23b31e2f04f5f91d98ff17750b299dc521cfc946134cfc76ab629f9abf5275739befee3fcc9c217e6e7c81a71dae3cf3407e5362ca0c0db20386ea943466d59ffb9e512022df97d666cb15c35b0d1a0cc532e408727e8f76cf9955587bfc1e327dd5f58d1f7edab6fbc7232d1d2afb9616fb5a5de1795cf6e93896a55285f793edec78ded83560b34b4102f505c4f2ab8f15f603a7fc73b75cbbad2bff29c374fbbd9e1d1a6a1dc10a09140bf0cd5aad2ba8a0926b29b3d830959e6c45e8d8fe32"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5f76f1fd7a6e786981f7a4fa8430dddd9a27ac86f683d4c7abc383932e57e5b15a30d6efc79cd266acac752fa73ff06e3f2169807133d3f9813932cdb7c83de7e57ee196f1785c12341142cc3af2048ea81b4b265ad16408a764b412b7ad96dd29fbf899d8343b01e74b63faba19c36ec825102941acfdb55f8388e7d429a89a5d10e96e2e612e231f8cd857127f6b19c7766e6d0f79d54e9ef54bcf5bcdb457509154eb5cb0640de286e2d4fcdc6941aa4d97f67fa99a1213deda89c78e5373e40a0fce38e71e57da2030575271012c4fe96eae29f65462ce293943952db34a93abb2719226592cd3c651d3d4ee6a36f8082a3f325290869bc3ca5f02de629"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c41cc918d7f45458e0bcf5a8e4ba5eecf39beffac05fc670adfca933f8e997061fb546a2faacf4cbc92f7b6da6b7ec97bc142b41f38476458836df716b9b7597072f11848bffaf7ade3871435f2b06fa0baeb08d3be31466d6c10409e3871c92df4a6a5346b5d7c3e82b90539033d170e4950320169c7d9db5159201bb5457e9b3c02c9aa6fbf2b5359f4b657702d37f34bb0ea2841e46c73f6d30ac546c1cc8a83c72319bcabf4ac741a542f2c45fbdbde6f4d8be88906a24efa7f62cd5e7697ef02a76c3fc827c1d2969d8c4ef05658ac4de9ea06dac8c6c0a65bc3d05ae3517428883a0c219084486c8793e2d546be6c8cffe00e07eb7b82a07449c726c4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b80690c323802241d2b9fd1b024571fce1ba770566018753d6434d0927336d9d4441a845d629ca275502d14bf818ae7a58ff7af427c3b8ec88997473537cc564267270bb2be0030e0cd934c417f814091831fcf776331daa9e73b7e426f73f0ca9c1733d015f37cce5893723f1ce9fb2fa0bfc3df6fe7ac28549983fed2f05b70eae4648011da36855f892dc65c06c909ffa179a8950501f4e650fc6a1b05ab988edd59aef685d5b05224445d9603d5b816f1ea3b3743fde547de72f15ca60c305c6f493310d22e84523b036bd71b1fc3e38164ef7b954b0bec028fba60c4720710356d080917c1c5abce6d27d3ff35d63baaf685db37dc76568e3b35147d54"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "596d8e9730030342f72f0a850fa5ef746f63b89a1e0c48b67a817f775ac937454936cd8400653f4d1f82e315597b9e5146ff3fe4f9412f81cf6f8516d9d440c9c01c6a8e0a56838e2a206216b2f3e419e5fcfeaacc7c9be4fffc7586ec21d8bca6b49a2efe44d66266f298a3b70c4310eb22e64366bbd5f324a1c9c667cf0d970ecb37190bf7c98977f180100d3d6c63e3dbfe382e406128eadcbb99e45407a858dc6a443bdfef2c9531bd2461186ce21ed34cf5715b764c5bb4d4cca9fb59c7f90d9f71f43eafbb256906095edc27679b8c752b6232ad374c668d4ef2c55bc6fad362f8538b553ecea8658adf73fbee8c6c47289d9ac5c4471f74847697ed26"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "766027246bf7d6eb5d4a137dfc5d537fe2446156834428d928f6c2c927f8e911fd57db474d55b4e8007a0cc65d40e7f3b13c16ab4c106550e5a89059862a86d95b2de4dae32d29f7fa0ab67bccdb74f90708153e5c726614ac33d61b3ff90c90a2c8b7277dc33e677647cfdd303462ed192c145264f253cfc403bd55a48855ea683b3e0d39b866c9408f149f76beee227a9b22720cb5eafe4ccab94dcda783ce5a15c29905c2d932b57eaf359e1e066ee4e41f97ee2338bd61f01bc0516463a6189cbddbd083e61f82e6ed918942242ca178de8ec45d9c3abbe0d6a621fd395114ec2f53683cfce25c5d5c5758f81bda5f2323c4f5897e7bdb5e0b1c9a2691cd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7465093e55ef94f127a95582587d4096c69391e5fd935f9679cd2423d5e4e2edb53e1c6106f12e57fb372f0ad6f0795fc9619651568834be5f78d4614498b79615f894058d5e9be91138895fc5f38f4dea435ee9d8f9a43cf3bd98778b1c6d17ad4285338b26ac1288b97c4b2fd1ad27d02c152f38e2cab73677de734e56e6d48f1cb5c8bb5cdce8597952fb63ab5801d60acde502e5583825173646d4ad4a7f47dfe060eb7eaf34e44a45f621a57c6afe57a4fa2bf785b09f0ccaa2d6179f4169b65bd8d71b1ddb3ec92807708354cb10d10a4f198dcd1eaf8210079b12ec50a0b759e0f32103f46d256156e8635c99c973a03f70f31e32ed7c441dd4d7e36d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7925db05fc296b0d369a6695038c4196ef66d47f0a389ea05f0904eb9c048eeb464516de247437b2c8aba8fa6f95b563c982d21f5141505d2676b7691454a5f0c9c9d07d19b81c901b01f9c1cf5bd9b0d5e0b2e244b8475a1931efd5676bc18f84a8bf97031e2fadea1160ed8437c2dfd9a8f7fa918e93dc8803de821a067b0eeda6a6ba7c0a74f403b3fde78b182c7a22b6ca779513e0955a8fcc69d9a6d7d1e7960c032539f17322cc40e8698c146df8448ec2a430203dbe53421f2cf19158bfaba36840a5336a775200395dd1feb4363a4df2d115b6508fb2a52a7e1896a85fc778af2e014d485bd270de8727640d7e878fee0ca41b552241a83c1531fcff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7255b2ff2dcd7241daf5c0973f37f460e2ac85bd20d4310c2797f2e263f4f8df1a70eed714bf5fb19ccecd66391abf0d3d6266313cf28b828694ceeb9846e9adaace75f691f9af5818e05fdccb2e2dc0c9cbef64aee2e058a0954ec3ac9d5146073796fee6f1fbaca676a5cb70b00bd0023b7d171e4f79d22d16fa3d6886f7695ebf19ef51d0d6e193ca73939c620c632881a26d61a354184e00e805e20326173fc14f1e0ad0e85c74272138f58345c365e4e46623c624995bda7eb6be14be0d276d6b6ab770b1d1e424aeba562e80bec509fe3c3646f455ad9f3ce1db8f8b923aed9ac89a72505e608f3ec9e58be7bd130e81c1e7d3b0bcfd20bdcda9e0945f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9cfcb1b8abbfd5ca02379491ae39e3982ac9fe8bdf9577957ae39cc3b7c82815063a179822657aee3670e4b37436d47d7c24b79f5ac06d14a9ef51d5d48be524d09d1b8068b1af518ec4c80e2da596d9cc5f0fcd261a366ddfb191d0767e02371184ebe7b5999879ca805a79c428315ebc350ebe3d832fa0bca87248be57b1c1ce72df271cd7826888c43dbc4f187640ee5cde3ee3f004b530bfcddfc0eec7884998255351c7cfb7ae5d8356fbce910df9ec471ecfd15c3666b7943ddbbf3c688289ce3375bfa8a0fbf3f6078376c5f310690872c7e608b87b680be66d91630c8f3a71e44906c75560855ef3f341bd8cfcc1e49cbf77b58222ee1288b6979ad5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "67c3f8293b514637ca21417422cad5f3c5f39fa97cffafd617ac72649a9026047e6d8ad968e48a9523d0883666dcf1d7745e2bca246f01dc285c34b87c10bae061e8e9e9b27c673e43c311bd23531443960f132d78e667ea8d22e118ada4efeb34a84d147b9206a5c462f89c49c34785416575e7ec1d61c0cddcb4aaca309b44cd5a5d0a0266e7dd71171e160b761dc3f12024b2508196caaba0102ae74c7dd1cf1c1f45127cf532f274489e9af63c02b2d5664375faaf1b7ba2b556d46b145c28a8d123b5c88c0151698f7771b790c00c17e75bd63d48406b4b245827364fcafd4fadf605bc5f68a78323d362189ce601a7919e7927e3c62c2149c99025d5b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "584ff1c5a6668279b29b0e4a49fd2eb654c7b6466e76501a79cf204540da66e98d74abb67a990140e2c580cc17cb0eb9a0eca5d92f05c742eff0a037e841f22baa1144e2908df2c2dfffd0574eddf71eefa0a6d9eab16d29acba2af2ea9c6b28f9e577cf24e8fd68b160047d01601a407c048a62af4380b2bd300277f3f95531e0c4648567cd043207e8c80fe93a763214ded5c6706fa2617d8e0e6cb27cb2727b966122ee5031197c1c6f3f84ad1139d867f8c770c3dc0de731ed67e3fbed068ff86e39cba44201a309fc75b2f7c7f99e4282f8e1c7376a70198fc8d3564f7d015c7930658456a94f594abfb6eb6c87f41ab340029c57c761f415f5e5faf6b0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "19ab49725adeffce9e1be9623d1188d5449e62403909441891a6179d5803dc61e3c647858d8db24ab61aa8f1160db289e7ea0787565d28b097ac975e5602f4052b703de1211f112380aa9264180ca1ac117fd21db9c2fe6b32dfa4b9e6fc42a94e5be8700577401b0958888adc4ce5d2720ea79b1e869b42b22e885224fff14de367bd9765e1e426bea325c7ee7982d7d234209e9f07115363fceb459572fb14c9b2c1477d36d687dfb2413fbff70a7edebf86a7bbdb99b1b6de454544597d499b240867d2fb2b5efaeeaa1107ef4fd62f5684c44d1aee075e52b467187c3312e46889edcc39f3e0bd9b57490c98022c89e5f61a2dd5931685e5d5e8fa1cfcce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bac3340b1498d463629f91de4401adc8794d07610b10b81ef8b936e4a1dd4e7753ff7befb08394ec3d2213a969adb00492ef61247fcd77e1bdcc4f5bff41aaf904ac021b194b1b53e8763be5331e71f7d0f30a70b12c5e1f11678767704f925827e90097d8116e3268a67b77ba40b2ce3f29a8027e06d3072accb1638a08d119819350135d7e3713f7366becbba4797b294e7745476b57504a9464cff1d43bd6ac7b9eb17c9017e951684d1d851737a4e0785be8f50e9981af883baef33dd4bfb293d6e86a8ec34582a5508dbf1860ec5906ec9b18b2dd05ec3df360a5a756cd0328d2001e752674cfdb5080371a9bc62a56b3247f900eff0c98b426cd5aab1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2fdcf46433528f55e55c59db36b48325fb1450446cdf238c5af6edf60d96eab9e0b7e0dd7df8978e61afbbbf98eea261eb18d05c008eb994ad3a4b819d3cdc530bc26cb7e20ae25784fe3b1ec655370bfa5ae8fe9e9a52d4e0d1ea59f579f774df7fcdbb1bb0a46ca9f793bf4955aef584d361c412f488cc4cef9306574dc9c6ab9fd39846b823b4baefa37ed955c882755656c415a4d9c30ffca9da196563154c0935ce0b4445328bd814b2df982312a688faab1b6db92fd6b37d5a55e0af70db5d5cf3e35e5dd626341f53fb3c28514c9c6812f725d5671d9221dce918c397d7484f0a87d884bdb623003bde8eecdcb87aad7227df07b6e738c3db1e46c932"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "671db30f2d644b954f940763486a3153300b841d03f3879e18d4b146c850a998e8bf284ad997b5c1bc91b053be869a93ddc439c1360ac22e54247c770fdead309dc2b8ee1fc192528751ca97c5cba6cd833e65047e1b136b9e16c89d339d1c4611deed08d78a24573506729df3a67ab6273d653341875cb15c4aab9e32685cccd6d73461605f2d397cc7d8249cb374ef065aed42378c939b3875f64f16fd5b59db0158569e6075aadd5206ce7650a0095d3c11312c3e5f21dab98917b59aa5218b69339853e29fd50949fa24302c6475ff232929562f03980606412ba6b58bfe4baacaeeabd8f6cbe807006c5a527f368cc7719788bba8f5e3de908f40d2fb4e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "02889387aedced02dda2786e1b3229958823fe9784b81f0c19bc61920ba00e34aa392409c582fc9f18dd2db125bd47e25820665a91b4832373588a0d2fecc4dc2921da9860e148896efd00c7525c64fc8defcf53551ef8970662b43cdaf14710055d490c031df27206adbed6b4d2cc5e65200eb3e37eb7b3fe5c8897a2d8f1f1546459f1888752cbab6657bb9931c5dd6cd106c114e9f15aad0898c72eee9209db93e8a3f4ff595778fd0f70e205c1e21cc37f64e741dcc5240d9709115781a17ce1b9474bd96e6bf30e320f95d9cd4f234bbcc7d23f493acb5d0a58dd84e1fb1622c08940fea7f6d1c842a948ebb5f4f478b02e8282dc55e69cf014509fd770"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b9fe93da30f53e330a798d543fb4e7fa92130388c55091d28e80ca9ef40061026a0138264c8063187e1fa37baf41ae159d1d3899ec9f22a6a37325e807ac8df2486dbee7f287a896e9124df0872a941fa85138333fad7619f010533e817c23dca7e86c7e99c191e3aba443d80e4c80fc45fc0fe53a6e01df3ae620bc6a7121c533091344c52fe496c349eaeadfa63ba22c58a9070f8d4e705dfff90acb355b789115e3c79e8b146587b06b2167a852be4622354152d24a625bd0a176ea2d3a98fecd4f455fc9f2ad3b4b20ed21bfdeeb498d18fded0d4383a9731b9ed2613dfd13aa2e603e9680dcddc3fb5727fd63dc34da27d3a355079adf6ae74f37767a8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6461025c5ec1eedde863cae192d8a34596d7d620ac1e14abf94d68ceeab229af5c0b966e70e54cb0257a8e26d60cbfb4f40d3ea675e7aba2ce18f2754a8130a0f38018b6e0349afcf63ad02b7bf75cb370b63f2905f2b5326be8bf74707b69487293fb206d4dff1ee0be775c259bee1d862e821c10afa60c3f6e9c610af5c84cded299daa97652a1614f649a90c188622b501dbcdb3ca4d13e19221899e49579a6c6f36238cb3f3d67d87d2df3b824e64724f8c3b8c2755e7384ba0b7cf31bd1e5ff16cbde4e00e5c5b866702467502ab5c1f226f7e2caca913d993755eeb6289af7b75c9548a28f9d51941c5d62ba37b1c76dceabb705fe0254d1d603f40015"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3047b4b63cd0273a80b6162fe1d13a5b92c1f93ea91bae6a3573975e98016c13299e73d8f996f86573e389a8554de79a9dc873bbef1c849b9643f6f75537fdac9e76f07e94f3777f97c2872b351096a67d0ccfb3dd6b415480d55caad089fabfd3a3de04aafb83948734eb9b56ee5aedb66bd539619d9b5e5ab4fd6c94f74ac3d1980ed1e126a7452b4dad5e0caebfbd7d107dd0c3c0ac654fa5808c2e33aa50598334ea2e1743f45ec1f8a037c869d69b8d6aa86d27720ff214b0a6ec8cf5c775fc2ba8148489700db930de18e0fe5d9e7fd8786d604cb7c85cbffe32ea16a749eb31a6ddd24aaef9ae0edda02b0e8f6bbd1124e3befd7ce56351c4f5632e82"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b45aa577e7ee5a6e0b230fb3a2676e47c064c14007ff5d3a56db38ae488e66f260e9c1e9a49d771cdf507ce9cccaf1d5e864f761134444cff79b78ecebb91f60884828df831c38090e718276fb7a57189c978bea9df2e8bf1e9c20dd402ad88e1e08dcd2036821cf47efb29ae10a7507c9d4d6c6bb902230ff99619e9ee4058bc360143db9da02c08a6fcc9e4fa2e068ae4184a166a64f817e1c5e6ef786ce0eee5712dec4c604588d6f907b4fe8a43a7c0a01257566f93b461c8fc5ffa4d55913185979e93fbea0263cbf99d6af7e4873a57da09803fc435cb233aad7b2b1491fc9a123be89378b4fbeed3f55071f96fd9aea7286625769b18a982c8c3a3887"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "090dad9560cbeaaef4a311285473f5cfaa4a264bb685d583f50c4b2c13025ac22959e81fb3b253a0e20199e8ec0c50a554675df9846ee579de3e40e72fc4dacff0f847d26155e2c0c42dac136c2ff5f427c63228342c56cc4f56e588dc4d676fbda7d15f59b30197e21feceea75b205d01c29e691a840e884a2a6b6d2042367932c2f71b42ac28f685bfe80868956fba265bdb96a6c8bd101886f7bc6b92111e2d5942b25f3660cdcd0254f09920ea4fae54e40862d7a71be42a2922f8dfc708c1ad4734e6d3452c902da9ff7c9b653ff5ee152fbe0b039f3b1f1a4b125f4a1162d12ae067d614f6b6cb46504dfaa78535c1f5705b4094176a1f968b4f4726be"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3327d0e8a13c15a84b8e77bb0b6aaa8c437a7b52bb793d00a992612fdbf9dd30721884fa7d96d614266d5667cd4f04e665b2d9fdc07c74aa239d523c01397043176ee4fd4fe542198c4ca9575922a629f6ee6f5d23fe57a7dbc060ef98425e2d0c7a368d2dc3126410233a77f2e9aeb8e0ecd99149bb55b4fbba4b49d968d266aae48d88539cbf64ed738c834b682b1960a13640afda6b760076dc84f059f4f4416aeb62b5311dfb900ff945d7f4b597657d6fd0ff16741031bb36c892e403831d99c250c66f54ac34db3f548029ef2443469209e9f36d7fe6f79af249cbd56b30b767ce09dee699cc5903bce7905878db7e62cf9cb0a0e889152e8589e24d3e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "54cacd037a775ea0004e41ccbe0779d22926403ac988d1490dee91bcccfa442d509eeaa6f620e09bf9088f42a3d32b7b726be3b4d5e8e9562314ba96a95564ba1684ea4d132f81c14ee67d4383eac8d6ee984ac539030919f81806be095831db118b6821cdf61591517b38e45daba68fe2d1403bbc79ba77d721a9cb45192e28c4292f7ddb61fa3860ed3bbfc53cf5acf6bf9dc01238bee8083a25d93f7959ad931d1f47390d26c3a417eac4b73c48e6536662f41aa8986a65015532d094d85879051611337474abc9e3eaf1c97850e204d298c8c38296d6a5a0058e6114023af7e28ca7fc94eb70a42d37c1ee69775501642bedacb5dde8f7b75ef096fba3e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "87493eb1ca944ed8d38710e5231adbc2d21664a963aee4df2fc2573b3839a6daa9269dad4d1eff34ab00931d2e4cc939004ddc429b0c780ba2eaa3e937641468fc3455490906c5c0ecb3c488d3f69a5e2ddb29076a2e2abe36a9542e9b9920db662dea73c1818a71b9299f8e26504a8e2e81e87e713100feb5c75c3b222090987fbe851d53595648fff3490cf6e1b978753ed6250dcb3aabb5498708c2555db98ea4adce3b2a0cff130f38839669ebacc6bf86a177804bbd93155c71f6a754e41e731bc67142488cff417aa2d4d5232eec0e55590e6fb4dd9b22d23803941b922e31b70f2d9a29a1dea5e356719b9fe15adb9bcea46cd935133e2bacdc635e4f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6dbbb9ae8b55d0dd42bfd45c8086bb09950143d0c0c10b26d1d3d9005fb48830fcd0d720054638b501a2cd7311db9cf664e6c587688193e0fb62f897b295b051c95dae9054770c5d165e2f37ffe4d2cb7e7763381a69ce7d3e0cf8a1ef95d26da58d03341d7ec73c4f843c4b225531996463986f275f9fa7fc18036f69e4e3c3ae3d122c6f035f9a36b7e36e5a6ec811d4791fe7bb603fea4cfcc13044c484431954fcc61c2d103b302698c6470d6a8ae181060d02ee36c7104b6984288718eabceb2c52c36992503fa035c7bf4e37c468fc5783b33d1bcfadfdfd2b04d4db985a4159f7bf08d3a50fe23c1bd4bccecc79ecabd3e0271574531e93f11ae38ef2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4aeb1e493470a207c0ba34de3a752639557db9d7e86424a3852c927d5ec5f384591c0440b55ae33db33b1c3380c96f72d94a93760155a259abc7ac068d86c44285cf3280f75087c5bab487539c002b933638a7851fa491366e89e8c33d27a6ba8c3bd2af0269bafe24abad6d57c86c5c70f61ed0b3a35594a73322997c49ac194eae12e00e7f5a332146786992c431203f836b3ffb1cbd02cea793fb6a133354436d78503e41055714c7cb74351c4d2e51839f42bbfa391ecef0b252e9040454452aafe63b57d4f8c6620cfff49005718454830976fd6dee6cdac55212a4f91082b64f5968f05d405398881e1c27b1d9fab81e63b21725369f1ab7bf29cd3dc9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5e005e27f9c909819bca7e39bcb9b83725426ee28521807cdd06c42265a4d0eb4a71f8173edf095969e3aaddfb8c431120fb50d5c5edb9c0b136957245593aa255f06ee0119f301f9ebddad5a826c74c6faa8b2807cce226aefa07d0df0e0ebc92f34d42cb2a0e5c44f150bc78c822b2cb3715f9f2f59e3104e199597abd4c54f473e5a5260da3b826e769b2b0ea0f086c397fab96c727a22bd2758ac1e180e1ce18d0be398e640994b144504f4910f2f437eeb52e597abd1106ebd80cccda505066f884bfe991200b88b6816a80d8a5dd1feced5622c73e1f3964b0148a17bf0e326719d71c8f15189ff676ac154b5c41f787a11443de0e2a953e0a0cc1e937"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7e9e9ae62b8e55e530a179b44e1dc4b2c8ecf08c8f7461bacf03fd78aaccf5ec7168220785969614bb84b44fe5464bccd6ed1073785c8a51d3bb61fe0161d335119ee807298ed0eafe9e248adfdd90ed3e5b5b107db429765da0246c669f65f283c81ca959caee80624deaf312702f407dbc7b4c856b6b28e64f9cd385c5150ceab551f1f17b245915d25795592c2b2486ef2e0095b71413ad195c10c76cb816cd96fd091327821dc40c9ad0b4190c7ba912514d51b8c1191b8b81b7a318d435bd97e50c9c0e459a874230e99c66ec5fd5d9f4af360c744463ca2925df12a47fd76592927d55eaf60014d652527649749509ed6ae24d554cf31b0c3fec8f944a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "45ac5b2611957ad7f3949c0f86abe649e3b6b08aebf3ead9df022741b87c09ab969bff2827fc96ab1f569463e889e2c42e37718b9ccef9670ed736d90a6b07915070f60bba52c53a1c8e4b56940ffcf628184d410da6e413ff905dba8f38813dda5de7d7aaac84794edd80bb597106f239d1f976203c704abc66bcfe04518bc759c8d40a6866c41f56d17a29c81871968ed7e591f0b0deab4570d2c8c12d6bf815acc3f4e281280e2251195b85d2e8713ab632018b1991e381dbd9c750f6938062460f79bb88793e7ac132219c426d39dd6cc691f5c081d705f13e66df9a4b51862d83e1a5add751dd85ef883db58fe7ddf8a501b4449fd5cbc9c6c1b14b102c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22fa9a0051d15ecc5bece4d6ebed89856e69d8142ffe9a5f033dbb1ad51be298d41706fcf15cae260262f41c847e8685126d300a7da7346c6a27f96f4a72f55fd49d71291ebdf56b3bd6c89ee3cc2583f6e437edea19858eb9c086e248c6ccd5f2ad5eeefd907900047152ed760a5a6f4427cb7c3348c62a4aff532836545a9f98eca5862afe03e1bc4ba9ee7134c8cbe30471331f90da43955b3d25db691268afdf18bbe76030e276128b94e6937e1a14b8af87f4e9de84fd0a38a19d86fda4bb952b7b8b11421c2fe700fc58902a8938d6918f5fb5936889891ffc88a8e6996d39af02c21c4ba9b75c8c0ed1b38596c0a8c271d1b598248c15cb27a31f9402"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "97628cf0b4a0b2d52849a51742d35739731c3572082681d8f4a6a5e3db87a9c5af93fac70109aba06f9befed48f069e1db2bf39e5b5645860875ac5c1c09e4beab0793f40c3072634a1f0ebf121d957e4ebeb92b5cb2b42c387b6d2a31612570c902fccd03c47d7ea38062905c2f8ec457d989833d6fc506785a3d86f6b077ef9ea454fa1dc2f8f6ebab997aeeb5c5a275fad733e28fd5f43c44c46658a7193bba88d1e2bc515740c1c9804524296be7321768fdb0879c6564885b628cf3b7288caffb1d038d446b6e8384b94f6fc14e5d7d51f07468d4356a9ed16c7f7fa1ee899ba579f09d65ad7c5e77311287912d9069ff93eb05297f8d24d7a7e37194c5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e31f57bd445e460399878f65fd7ded779319a738c1577248bd2a35e3c6e527a51cf920fc367beda727bd540beab689f0d1f82982f6d5c22a44bedcd1fdd0bd8980a09e4673110dc4ccb696973110a428c978f9f73a96ae984d8a3546e0acdf68bf6cbba4d8436717c5c4f136f8640a2ebc5b0596d2ffd677bd80df4fae538ba27c838b76e4eebd2449bbaed35bc66e2dbbd9dc591086af4ec86d66cc2185ec871e9964ecdbfcc4dcac7ac23642f688dc67ce1391174e7158b06afb5f4b86e0b86ba9dea277840b1076e9a71ed9385af6edfa71cdf8c24a960d5d3e0938b75f15a68bc5110b2c6d2785c1eef49e1308d47d70daf8df22838fc4adec798a322b8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a6038ff3fc350ac0c54bf0a0724734565afa24e28f119245df0fd0d64780d9a814461629f41c8df83bbd3d1a2af15ea3a6a80999a10482478ec77f141a97a6fae9c58b0984683e7695a6a0353a5ffa8cd1ed4c6f5a0ba56d1351f9b26c943f63043ee71323124de90d2cccfa39d14dc269fbfce545188489c4a15bede668855a81caf4e2ec544f27862633d1e5275e012ce91d80289988d6fa7792011a20e1081d994f21986d8aa72d2514f5c9baa1b8fec3b543e4e2b32d95203f274740e7ef56c3721884897af0b41116dc06ae3d7bcfe7656b333995158797091e20453eaf8da37f20fa52e234ebac3567b736053b211cbc73c8f4e753f000c823c84742ef"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1c2a1a28043403ab356f34272b37838011442562695e66e8af127ee75b71ac0f3dd40d60f0a62331e8454f3a422090c24209201a954227cd06eabc05d605f7d6e44a97044e61b9aa40aade2e37611dbe470a043f0df3ebf6c54f715b89dcd88c63adb710386a839308fa1f71abfafa56a9fe678c7d2652e4aac60884cf54b14376d3be85aeb8212888f372d5800f5f25c1bd894aa460905b5151cc712bb3792a0d1b1b85519234b169354f2ed16b3e1beaa7a9da7dd574e1b28a993b4f9d3bf32854ca4881bb1379b11473268bab5919ea3323ed95104049197d9095947433e9356ab2d4800e20fd54999185ae51cb25a50dfd799b9ec575e73d411f373d96e2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6efa13c513d0ad3fd5e633e565837e59ae8355453697efbf04256bc76010a09fd257488df9d8cef8d78b2e5819182119092fd483e601a8c4d984cb5e8817b798bc70031bd7325be8a7e0b44508a9350ee179a4792b351d370259724e565e60df9b72186ce2800c4e79511767f66aa84cdcf70e646065c942c9fa2dffb16b0d819dc861cb16a52ef1d5f36833a8a9312189898b142426bace8bc631b1b74c96d03669eb92f1ae83fde6bd1f7db7e94a93d117e21f1368539c3348165a0126fe08a60b8f170455d67cae0c1c5e651a635392ad1818d51412a6b6f958a5a80553f8cdb4be940f78a3366e360cb3edef88419571f0b5ec1f1b5829e5584c2c3d6195"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "647d39715b34361190bd842b775e7b53052b72f9e85a0de8be0436a2a61ab402237cbb85de1466e702562ed04084366d662db011aac0dbace307078ffbba1b3a37495fe6e604fb5bde54ee9afb15f45308a9a3af51f6c8e79ba69935635360cafec26986d339ab8641a1bff1f1af0c1196919ad4d0c9bfc7ae3e43296c04fd5e353ea5f754149cd618172558263d3f17cb6182befe4c40816be06045e5428da0ec1c3aeb71460802485b390b350b37b8ae1264ceaba74b21c052c295e36068e685cf9601673baa2d935ad3e323000b3397bddf91e64ace3669dce6c704e65142773a27c5a07eaf74e850bd72b9cc464dfc5daa8b6c396d0add2937bce611beb0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f8f298c1628a3d42d4a60d93d269d2bdd2aec2b894aff12cb2cc2edef41b4b814622e0afb0f893327e157bca9ac0edfd1b76eedeeda70c0a0c2e8eb85f2098bf9808a0a4e9ae4c738c8f721ce33452c68d0d06ab22184af90bbca42000a90dcf5e3228722db3a206bf2cc6e31c90f1ef233898acc957433760f380137586415056467d43900a7c21d25fa20253b37d7288eb88a9348343b985409843d6491a9e12ee6907233cd83cf8b5b6b45fd22f4b5bbbbbeb152b44e22c3e03c8c18dc608cb5ec6643c17f9165eec5b8135d14bc16a0e70edb5daa70a2d50991040de1f0cf4382ecbded2e6adf8ea5acea034ab00c33b1eaf0f6ab10f62dd30406d83667"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b0b831b5ee661f4eb43b906a2f9ee652f7f0a4346a9e4049555d8bda185e195d8af881f2e36304c8b66abf5f8f030cc0b7ffcfcfd67fefd5e7efdfcd8caeb1daf441f834004a610f091ca2f8c974d51a0b7ca76563927f19d0e120a90393ddd6f999dddd766d2435ca3e526247cb2b649d4ca13d43d898369730c6fa7fba937a274721d21e2e0578f4af4824d0cdb377e292c6d142c26494cc0474a9da3f57c60eb2bc8900347b4e619bae96eee6489dae5e2b94cef512c9f2e8a17d277e02ed744c71215e21e6d95896a5e10a982b0f35621036308ce9f556726d9a83fbdd3ba6df047e56b4793ecbcfd57db1f08e6323b3d9ffe3111f7bbcebb46eb33694fe"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c16723c96cb88b871f9ec6edf3b008e2d003a8e90b93cb0a1927adbe736a8109cc7bc70f9bc3dfbd656db4fe779167306d97782981d0639252d3b498408357d4ff5828dadf89f4f602462330d4c6fd61d02ba17c39d072a87ab23e926abaae6528c2817faea5c8c02befe96d93bfeb86c5fc0b5ce1c24e3a4986a512f9b935625107165179b53a137b013b0717fd203df902631ebe4331fba1631214f1eac855f50c6a5a59eb8aea944b138dc6c1e92da8cfa514b254aab63395880ec4cb8117779c6a46faf28917fe77c399863598284dc3a5d8671c0d2856dba7791c84b207a2ba18be5d685dfa1b3f9b5582afe9904b2d273113e015b1f4194d3ab070e095"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4f0248aea56b71437bfcc7bb572c198a4f9f120a8ceb9a0b2fc2e61af786bc447b49b99bab96d009cc6bb8ece7d66f08765439e5fdb4ecb771193bb8b99e20af4435446844252d29e054c0c75fb0baa20760929885575998045dc6840554212ea6d240af67eda477923499f7f5e7d9c3d95d9fc35e40c17e7d5fe22824ec3bcaddfd71744865f775cd7eca63bd615d718518b0ca6c127ed6288b7768445ef8ab6eebf0a3bd0fb5a18e94d28f09e45031c3e3e8c4bc0bd230140de3882959115af01bc6b9efc05554318f733da51f6f9b66c899324eb2a3f21cbfe64e4772889dc5f52dac755d640182a1ead5e0203dfcf1746b64d6d4f4337228698ec757e0f9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43a674e2a0fe1adbc05065c7a098244c05581303352a797e003c39309b09d4f4303d1757aae29cb2ef361992c28d955af3e293b98c0c977744971c6996c1dd93f2da8bd46c771885a4634952d0538789406723048454ba3e88d78ff44126eebb0a7d850223a02a64285f678d961b4ea77142bbdb1b708db912425c6f4049de3b75b046463638a6abfc463265494ded66db720adca38aea8f5f03a930ddb784a3731124209ece721904fc66d4983a36f6a4d5adbc109a4d66c7b861ba92fa57f846a811a9a4f56187b507488bd49265cd017ef1721e4decb3b2c66666977b2af010ab1985bb6b8b8322ba564b60052ddde7f106777da138cf0013dae91887d71d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "91c7ca442c95b09a08ffceccaec1ad24609a1593c2a89dbba9f30de5650ee6d534a9c476251c7a601482ff44531350e87bd070bf8d8d3f716c3dfbd635a0719c5bc2a5f042baa13646266d640b414349f008256aa70a8c4ae0fdb34be64684547548a6794d4cc1677fbaa50eaad7cd5ded53c07a601c65358060423498801ac9d2ea1d227f5467f15accd6efd3662e344a724a5728e651b199fc20cd62c4144e60781b458c06bb1521161527179d8fddf3a2087757a0920dcd2e75f88d831e95b246784c765cd21c6ad698bd059d96aac722a70669a13fd3681da3acc784c79924b9b0e6ef4bce2d9d2dcb994c41443b932bf8e5d15797f846b39924ee6c0658"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2447976e684d4f5d35e1c33ec207f921ff9767732e8864cfbac5da51db7533b11d27c07e96f278979da3a6d3bce53807bbc2449390f5ed40bbb81c7517bebfbdfc3f1c15a3b22a8b2c08cd7efccc90e39c2e001bcf2a58a4e29d38426baf2ee533f1cae67c8c1f4ce24d6505ed9a118cbfb192fc4e378a9b5187615e69296e1bcddab1cf88127f05c29f43606d00ebe259868668708de9f5a9bc51ef0dca83e8d73f0a762015100553a440688feacca6364c4c68226582028eabd275692e133054d2f70d8c4b3cbd2ee69e17a571d6a3473cbb2c3fd8450262981180cd1c81194f09bc7cb3a2f7a949d8c56cf69e13af7d981f170073f2ba8ca55c9d1c9a9343"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "10b900848ec8daf64fc40c57765d01462225893d6e5d46c21a1b7de405fd6fb505b678427a274d1e8954f866f3abc6c7d5ebe78af88de6ad8ae31f42827dc7792b160b70dc4d177e7e4925ba24b75fb19c131d443b0d4f0ef73daba868ac342b79209e313b439d5a18e07e9858fc6ca913fbcd1256397456b47db9d987227d84eccd0df2fc2f4ae8ede958382200dc867731a426c80e83f3eae20134f8ae7254c815b1ed75ef2807938b57993f5597f42a0b6542efaba2f5d3ae6c5035ffdfc9adcac7384e53ec601e8624e3471aa6066796bde6241f9d9fc40af340f6bc6a82e15c338706ac25ea7fcddedbfc0a77a852d1becce0ac8fd7a7ac3f376d2e0b56"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bf524f0f24998c53749025f33201b8270e4800b6798ef21d84f363597299657c49dd6ac74e0500c343b5f5f14d31a422ff44342001f79067ab9d0b0d69b461c687bd4deac90e4300c1bf1f2a809b55fb870d0f52b751c32f0d824e73b82f8186b604af5d5847fb95a4bf4563c65e460ca61913081398d57ad37fd81e652dc13083e9debf8389cdfd564b00398c965ed85cb4f5dc8fd4661215b3a8f7ccfed76eff03085884f08faf20c971032e13483df6ddf78e1bc0c50e77ca69dd678f5e69ef376f206410d9f8336b3789091679e302353362964650593cd1049cd0186dc3ff30cf62f66e3b37f2768e0e5b66d5c7b858e4aac6b53fa727cf42779e0d4ddd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d0891ba0fa3e7dd890ca0ba77fdf832819d40b84cc8c90940605893e44aa22aa7780aaa3c7f7696bc3f5a7286c270a6b0cf1b0e370b6ee868cc1139ff412ab28877991d541d227092465e034bec6e3fbce0d763de2e0eb045dff2e52c6bd42b4920f13fccee1cfb25e2f54a8221bd733db7e2577e88477973ebf8d3e3e23b0fa4ca2ee182cf65e2bfd3826d2ac3f34ce5142f949d400ea9f3989f54bc852ac2c37ac4e4bfe934c552ef428925b92d5ea23ee5be3cedf0145735203d4aa28d6fec3889f83482e57d16c15e100f35e9697af561dca27c435ab99c99407eaadf200fb7e8172a85b5ca9e080f290408ff81d79f318540d1ee4138adbe3079fc5c1f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7097201c4ea62b8711bb9c5fc1f2f360faa2c1e975622570225cee8df555b46645c4f23de2f6a0a8b018123beb401b0baacdd4f1aaaf8736054ea781ecaabb237d7ed6f0bbbb2da8b8df63f8009440f4829312bb167e035bfbeb39cba467edc1c1bff6d390849046bf89636a87201fab64d04092e13db975bba25736ad560ea297752ed97f67f760acad3e01e5902ed1c768578dcb57c61a17ec1582493ecc6f41c97a439e3fc46ed0954b9b799b88d4f58219f4a1b6515b08c7b5584a0f304f2aab4292dd06f1f616c5a5cd132be50f4519d7d51f0b87e0e0fee39e3ef0e984e9fe489816286108315fd0c19e9fcf2334e00da5334bb7afded2892ff43c04ae"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2e58069359c7e48521bc0bda40aa98647b81840e82cbe107ef66f1ff6daa1ed22d15c01bd80a39f3bf9f191f5698e1f1dfa43f8c71a4913db2c5186dfa76c405ba83bdfe5011736b6478f598f0f0620987f323b52ff9ea56ca6953a039f44ee0f61c8bbea923978ef1fe2e81ff8066f4dde848035d377f192b5e856539ea875c76df009e1b4c9c3c78ce31b997fe842aa34ff2105ffd54266092f1e8a6c33e4087071072c3f3a19156e1fffb2295fbc741a958559439bf84085bf8641936573576804626734ddd89c889e9ca373c498d84de52bb7a830b4f1c6ba54e66f0869bda2449eba214df065738e823249c0fca1a88236cbcb4381f1cb1930c04f59187"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7fc58ab285b6bff2af7f3ff1036f4d2fe8483d4c36b89e78b0a39f76719eac94c1a7cd1c44447dd408e201726fc7300459122cbb5ccef288b57d42d6efda841945892bec222a10da5d92854b1a7d86fd1ea6fd25f097a9810e3237d8cd615a3acb7a800876f473f6ff570c41a62bfea8d24b7fd4e2c46c0d4904496e536b0cefa340eafc1828d2a0c872788a1046fbc6150ed9e2d15fac878730d9c5666bdef5d1799d43985e711dae99e19996a199e33766ff4469d6cee3687b6703a4f9a3e70515c0761822efb22bb45292b84e8908103cad9c6bb83437088a137db76ddbec9b5c8c80d68024cdd22f16d3deedefb9da927c478f0755d042b662bb34ffb5a4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "648115f0266f9c2e9e891088aa19d63b52d0834c367d525b1f904c675e2c20c84c687465119fe51493a0059377239edd310bcdd2265834025ddd7b9299d733dd071b682c301ad304743c2c18fe4b94708917ab131a4900939218715f4d3db8fc9dcb4c7c0af77310cc296502a7682a050d6a8285fcafbc62a8cc28f7f6d404eabe263f9732a4a01060a2c669a3e0b7e17e6da44ab7df25876852de52e43daa09d9438988cf3c5b410dd24f1b72e557f01cd4ff15af5b3ede5d6be6de21b19a945b563ad0b6f169e02ca11a4ca96a80e7d49222f0e4103d19c1862c27a79593e54f97011e67205c5c6b9bf5119b9031d4003be3c17bcd4ad9eaa499f053d92e20"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f4df0a0623c2513a39adae1d5719ce01052d7b72cce3f70373d8bfdd0bbd37ad89e512f78a3fe5ed907b77c14db1bf7ce65d5ebd04d48fcb5a3b475d3343bd7b56cb61a7e437d1532bf4b904b874369459327bd0e9150c709421e7bd54fad085324bed49b3da6fd5bafdfccceaa39ddda0c737b5c3e284c2fb2dd31ebc770b257aee15e926280132e698acc60aa2352bb2d27424707c05ec66905a6294cdf70487aab1798179c125381274850a40c118d65acef6fe7f6d561b2a1723d7ee3c20970948452f308a07cf9a7fae33badafc576387fc993cf37e17726b05dc619e35a6a587a81613dd0aac82d9ea503688f9df225253158a629d674f90412285ee9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "37b22230608119fa91a6c8b10d573e0e9719570cd0e209abcce67a3b23751617b28518a681ce66ac24f6ef1fcf1f66f3d0e477b85302b0b19852ed3459333511bfe3e589bd567d77e58e411769bbb2ff52c56969cbcddec971520d7461746d1ef920786e099477c33d7584d23334ed21186cc9bcef7edee82790ea1a20f91bc1dd531a9de124437f9f20e6660994b8d0c1b6d60bb7b261dd3d23da6c38115b95af518d12fb24bb930cf2a0378e89bb620c02364f6dd3c0db53526cdc401fcf28975fb4327bd36b1b985d1d8444b7cb63146b907f74a19c96cd3bde356bfee145f25eae40e1b07dadc5b03b3ef7bac252e1197fe64a378de32158bf1abb1b52e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "325aa2dfab66503c6bfd45e770465b03ef7492c3f43f4d5169d907fb85b5e6e00947b11c6ba28d1e45ccbd74fdea67552f2e0362035aab025cf583d274377dd837293178c69c97c9f31b61c128fb19f333f72bbe13643cc389d239c393c91bba05dfa0bec8ea8e13deeea943d5fc91e06da014ea5a7b76ff62f9b53d62e6041b0a53c0ae7796dd42666dbe65c12b1b4143b33004cafe7d69ae76a73943c5d41604f0e9185f758021ec71495034711d37d9bcb5cb3aa302b03d36d79e9fe9a8785df1524c2ecbecda6fb7221c8cc89e896db301d572e6cee253beb7311b0b1fcddc33b2bd84d7ce77af9c702b8ea1ab2d405213f08af17f53a95571e95d14b1c0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bad07932d5e267ceeabaf78b85715044b99e7a85afaebaf15d2a60c6082c22b1080c663be9544f44f3d70ebb32780465b7a35a3537267f09c65072c1046784c93d90ecba33ddd0399024bc93837e4aa214fa11d258d35c7ac30ce0ec6802554ccaf52b86e20efa055f4c1010ebc3a6cb0b8fc3ad5bda2558554031a7ea9f549b53545b36b658bb3367e93ee619bdfe88e9299fb4f7c6eef5d822c48a227b839f05d23061b2d49481a4a9f164ad3fbbfe2b20806fdaa9e16a465b3e721001002cebb9b9939c605841c831ce785c9c65e866e6c00606518ec08e5598c8b789923c3fdf4ce05524588d3b0b5d9eb56c5de1f20333cfbc7d8e7d43e46f9eef13d6c5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "66ff77a8056aba526746d6fc1d6962795512f6cecbaaac2197374426b0983eaf78e00dc9a895f202ffe467f9705564acba03d8a5c2722a2d9cb27a59e0ede7f71614b3a03f32bcb4f10ed094d258e7e2c49dbd0aae647c0578bb4071017acd187a684392297dd8b422b5c0e66ca9c6cfc4c3fb52b9a66efee32c1e2c0a217bec3eb030bbe97297f01389ed3b884d7623dbea779d5570327630f4d863071e3d2dc50b5dfd192bffe5b866c3ed7d3442ba282b8d3040654c97d0f89b436576288599845b3801be28b19d27f2052c0cb792104d58f79eb87c43b626ba46ccc9b288bd8a0e09ed974b2eaa6ac148cc97e5154feacb03937db217a1c3e3e8117b5d92"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b55443ab3d8eeaed33a73c1b2f7874782dba51df091d3a6879b050493c43ef8feaada78c06fb4842c690456f5aae3a81871b6961a097dbbe04f63fda2c5581902a1671fdd82ab35efc35d07af64f9791f99cd31239f070c96b34efdc68bb311ae5398271378d12892d40a54c15d7286dd5ea618567f24bec646afa89dc04a1ea5ee770cea923dbff457d7f2f93f602a287ed7180c0ce6e70cb7f02d1c11fc8f9266980a97e00454f9b93c6a06b8132ed7f6d2255214678f22fa2c0a3719a8ca8e685b4b0bdbe59a890c2e11e5608bd049041834a450f4b6eafc1411536f12adbac2712c048ec11ea556a3bb5c98c1ff72c540fe9a9160b4bb0dbba8c50a38523"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e063ec0ba113694f86e107a61b79867edb6e40ba1053fb5132fae6a665c042f371b76a24cc37437bedb0835b44ed8f7e910303a565ab6985c3233dfdb59bd29fcd514577243ba437add9a584a22b704086857b92da088ff72f13e4ae29a94ec9c6276967075a8dd7a51cfbca1a70c3d7d624a6f1f9703092740b3d552cca1e3c69850e88b25d0a830cf5ddeab64e8f856daf921ba8692e3e34c362208c4661d171ee9456fd8be4bdf7354cd6ed703366ce369a81a8c445a62641a1e57fc1de6d3cfe2184eeef69473ddfaa556de0270583a84a60ebdff77cd31f73cfdee04362fbabb3320b7e18ac00e298fa9c502236040423a31ede48601df77f26c7f0090"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8b00079190ec5ddfecf3394edcee7c2c7fcf394ecd185c29509d6818bb7c401040c7ebbbe806c20f2c414b72026dd058a12aaa1a90c6d4254ce2e26f98747778786057086663e3a50397d02887af11694718091b0aaaae6ab79740c8285513f92fab0ae112cc25e739fbf7438e2e48a37a1cc86c4443e5ff53c49258878c2d9f08f322651bbf9030a8563a2993d3e2e663b0d7d8ac2cf871fb67a7a5d9ebafb35dff6329c1929e14a66ec62ef92c3490c1daec8fff67c763b1686fae7c4c79993f9c51659436e989338430f4f772aeeade41f4711802f7b5110379b3f0104ad2c897f182cc148d403955d3212b226e99cb6b4bb9cdf89f43198898b5453a4a91"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "02b469c37056f5f17eef3cd2f3e2bf0c37f0c917f3fd0f5341f610cfc5ebbf425a4950dbc42fa3d2d6499f44c31012b8c8f4d26b6aa20905fc198c9ab2642d8208861a3f363470ee499328521749ac7556c3c9b1604fc17f37f72a732b26c9a7fdd5984ed38065a93954b57238a3a6c3e0fcf8c75f6010c1929a8de5e1fcf4729b9ca804251c0a04f364f4f47a042146d13b1e016b43fbf7bc1193307a864df078dbb60449acc1e9621d14057f579141905c323ee6198e3b63f40d75a78e7adecc4b14e0ba346061bda490258298606bc28e8ef33fa041ee2b0f69080651ec7717ad1ff14f1cdd8435d70abe5363d5e4f320339285916bd84a2ce88f890ad8b9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0de9009bcfadfba4e031565e32ba542c22d890329905cfd7dc4c46d86d87b992bfe4c91962c96354c5369ae60e1960a9925671d2c41e5da0fee8fac65ae4c72b1d2d3dc8b33aabb5dd656c1652c04faa17af753e9ba332f74e0996666dbf8a0a4e2634f640c9f2b7da64941f6c81aaf9b6fee9434ebdefa89694b378278a5ed71524c20f85e33ba37c15984d5663f0a5733e65be9fab5655bf80d7b92b231dcb4743dde798cbce8a3ff059f70abaed958719f06ea8f55f18f71bbac78447f3e4e775a7ae02676a3cd11b1493ca8715bce0687959b0cd1a9ca8b6a3792f9f6377ed1f488ec8e3ed95f87aa932f79a6412e2cf5a241b24107590a1f1cf3e7c8545"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6a505dc2ab0dd4292cfc68fbff91c28f49d079d02c842db9e9c2078092bbbddac03e8c32efe8b239a5c8570268b86ca1de0dc96c8b550c14f2326c779ab44906c1dae63c3b1c9fc0fbcb03afd7360ea6297b10cdd098131b35ad271aa3b2e39c828ebbdafe97b3dcf12b0c41bfc577fdaa37dad459ffea653dd5bea70abc624fddd856ca9f023116af3eedc18f2747b2e96032253dc194e2e40a4a3257e5c6e210441d31bb826dd70423d12acbac290849ff45dc4ecdcdb07fa9e7f9c3ffacef0800e63979fe70daf04566250860a974eb2297c46d7478108f419055c0223915e8a4d95aa58440e2af3a6ec6d44c157579ad851a53413351c4b8bd5d9201395a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "60f2f9b066a7329fa2c0e01bfc7d0ce06a77f08fda918703fc56c43e8a4ab058a81a13225af87d7469380fedc9ca5966a29d6631b88b3c1d0b9802f13c4a8c5e3049ec3b3ef4b79b7e03846f96536638a82997d2e55f1c5c3cf5b93685dede69aab95c3ad10ef59f878a69b96ba71421598157048705826c96f6edd6231b4165767d94dd85e68beee6502f0f91a3803e247c22030945ffa665fcc5946d022f938e8973e231be9c81bce34fab30edc9167288bb2bac0fc13f46e3f03d0d76a501b7f4adbee6300c66a13d1918d4fca30e62ebcc16ce97bffa3470929ab65889aabd4b18daece2ede653b85fc070f309cc381365486a36db4b2e85f27c74471507"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25a236f8161ea633d5e093cddd5fcd0905bc8714e1fd26ac00ba021a8af1612b0f678a9a5e985b32abd3fd7dd711f4eb49dca5421cb728736d074fcda041608ba79efa9fed40ed6d4c0dd0ef4ae6eda4334e374966f079453c755149c7099ede7c54f595c53a83fca7e4f74a546c7259a7f0c62c82005d60cb49a4c0b43f119070aff6429e1f6cb5a7ad9ac34a0863340f8eab186bf4b923d2481c1e830c18933ce28b8b2a847b1d5f515e412bc3e71030d1beb5cb12879c0f7ced790234a3059e3e964b9b17d7129a6c83398f4fbd8c04db7c33879f1475e3d5dfe1d891f1f7134108375c0ade5627c53fc9fafd8a66d2e204fd3ddfdcdcebb6a6d5d6191db4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7e0fcc77e2df20a7c6d81aa9a8368d017203dcbe8c66169c10db0548f0f0fb3d17889cd4fca9952347dfd9bf9ddac6627dcf4c47856a47f4aa1593e4a4483abed71449ab1cb0475b1d039ce7aacdc803a6f271e89c47adf14a1b14250b4552176ba2d6fb18332ec320725bde4df6c347f3e41a81ac581fe519ee95dee3680a0c638694eab145ac5d463f48876996e4e650c0b677fd926cc093a274506fbefd3fa70423f7e5c970437588c228cf9f0906ed05d707596244d8b85424eda776018dff56ab788c8fce1c1ef1f4507805cf6cb37be6da10904cd24ef8fd658c1b98840ab4d24d6e8cc3c282fb9245b76557a6d5258d8c9f1d973b10e350577a675a3b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7fced2a61a55dfbcd398dd25ec813c30f176fee22fa5aa0cf832afcb8547c4a73dbb40eb723cc3e8248d3f0d9e395d79dbd82af8be5d7dfea1110394528ab9fe031677bf914225de7b325ea136921eb48c206f681942a5f15287658146b5ec959bf86a4244ce34df1436f900a36ebbf4bd0abc28b1b20d5d560e34b634812f54360316a066c4a4e284bf615e6280251a194eecab697e2d0eb8decaebe574a3e222576d394c0fbaa7f4dd97e1016a3c0ea05efaa50c768310d7e2a375b28d526dfabf2ac989e4693bd5a61ac7bfd53704b8538b1d85fed950ee46adbacf820163e03f71329f4285f74ea05777c53c51a91e1c69f1d3e6f0b34b64df73b1b46005"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "89e1130ad970c6e236c2dc4152c7879aef47c1bfc3ae6401342900cc53f2e1854734194509bf92e5a533724b27d076049d701300e5fd2747d4c7b90b55cfc7110bea516e380f37d9aba8007d942fa504365181a4c9cbbc6ff7fa0c9f7423414b5454e57c225cd4a15f93f1259a8de85d9deba1c722eda75192a080214e1a039d272eb0ae0be72d45b35ff5d61b316a62606a58490d86ab5c1bce3a27a10a5a0fb6d74f169fd0a21d1f841dd564ec0bee3ff6b8be891b91adf4622aaa926a60de08c002d71312a5d2d4d1a7ef45ac892bf0a6fe496fcf3b223bca3de0cdfe52b0885ebe288fe5bbad0c84542cd0ce0446615b604d47ea3b2506030f986d057035"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3a8075727fce3bc85d1b454a9f53f0e6353bc206b8ea30ef8e1354c4420abebb103ad6999184937c412a037c24c84267b198238fd25d55b5a3c27ac7ca221736786b2c4c18139bef13f9ae28792d5f439e9bba6f710e074d16f589f0e2cad2e319a6054fd91de2cbaa657a7c22a34db8561e7d4919e2263f18fb3d176178d711f7f1ed5e0945b5d36456400b7ae43ea4c379916e549221e43a1746424d1dedb0303fdf074c3209d172167a7af1b0a4ec6305decaba57fdb9aedfece4328ae51c2691f578d7e9d2a1c8f4f0fc4626d37a4a1d507766b82f7688f997b991ee4e27dea8631e36d9bdfb24eb5b326b73b793c82e9a0c7f974eeb34843304f000f02d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "247f0836500c49f74256360eadfa3c00b7220ea7e306a7fc1f5d0fc5a214d47d5c0a03e72a510847516e7c32a72a899b7a0a840094aa557bf0671c6607cb0793d15586004ef95a90f076c27b4c5d9eed04ea3c4a833e05529311189387df81b2d9a17ef5387ec87d6acfaf8c2d2bce866fe324d6cdd9905eda3d63d1083ef75f29d72b005cb073aaf68fee0c9cf1d8c5b639658c49f65d5cf6f9d0b8c485d641ecb4374449bc823d3bea8c3509eb7884ecc275a3e95c72f3ef5dda3b47438a554878c96048d0278c5c44d8fcae61cf69630645aa595636fed3015fa8617dd22a5d36c37f9605c5a4f386cd194942391ce99177e42afc52350656501e8fd08133"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2874dc4e08a70a652af91e419c2379bd874a74ac75e6488653c99f332825dd111d3cb498a34054ea1cfb5588df892a3c34dd04f29665a0c939526591493d536c6f5ab9e72518f3965c6d595cab132060faa67c031c3c5dc16765ccd2e7fbfe5aed4a019500c7d3c06c31b6605e658e6f88b126d2866d78db75917d168836222f7402097bf2349b5c11ee4b7338e97041b168cd2b0a30e7ded7980b7dfc95e55cac2be1f2371d2c69ea025e59d21292903501caf243b30aa30b13e3c65f8f439d63676e5486e1d9c4827bcbadb73bb40810ff8eb6fe8ff5635cf5038a52fb84112806708746041c52f7d27a6bc7ab5f6ec54ce042ed7e6c258df7fce2d00bf3f6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7ad94d2bb7b43fc3312c4932adb8ac70870be57207411e39174d5b1a8618e94d3369802c8e24ee87e5f0e340bff584f05a4b622835cc75e0ca7a02caaffaa3a7bfc2e6bbf7be33d55807d01c00ce0b3998a1fefa86814651b97399564a862216c57fddda297bfea87aa609dc878e527ba84ef82784f07b37eb7c16b2abb6ed3e7784def03f1623d553697f24b049cb1edbabdf67347983eea902ab3d2cae2d88cdaa98f35dd179d2a6f2617bac5b9694f889cb9a2ac0891db284fe346b5f845adcfd69b76ae7c69d2ff26fedb982815bcbae92a65a5db9dbec68c6ded7dcebea20acb0ade92ad148a66bb2a568bdfb299726f1392345c7138a5629d52a0aced2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b46f1ad5f9c3ee1d131cbf92373916b4c45201c02d631be04444bb6892d25371e6c78ff82286e340d1844c0db3ac2bf32f1cddba51096fb6e515eb466fdcfe47ae84b6d5a080e992f1b3149c23bf875b694e9ab0bab8e3c855825c55f8986e58f8d856a0b153145a1b378482b008af81b30ebd73d20cef495f97e548b5367e25d4ae335233b98c051a4531a65dbb2d18241e702643053113810a1a56b9c7e4c7b8e10fde8aa95c0f1bd5088b39b5c45e3393c2cac01365b78a8b455b436805290f1e43ed94873b5e1aed3e6a38dc7459e82a9de9e0095b67af779b5473fdb12dd95491ea7912b5d7271c88ff6fd5a887efb8fff685900d8dcddc031fad7c15ac"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "10791ebd2e8a04cf4d99da2cc43d296e7d2276787d8c0b1cd2628abc74e54c2b88543dc9f1885f2c232be41d8182867a2011e8f28a2d2ebcfb053a31b94eda6974eabb6e8bcb8c273394978a3771bddc8cd21fefe814d32459848ba06672f46c83bba26ce69101c865989d85e5b04d8ca180e1a67ea816594eb71d6536bc57eee88b9ba17b7c3f7b85f905ee1f1dccdd57b1ee6424da71b7e466181befc1e3763d1a367d99a7f2c59939d30a552110f7395750a591b1237e1bfa1845a685aaff44ea7bee45bfbfdfdee6d2e6277a77793e3ef9c5874b5e13ffa9e1725560d5538211fa7bd658f359f085466cd6720093bfa3faecdd137ea0cd0155bf73741044"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b2a06b54e578326e41c2c7f7071dd8458b5fe9bbc42be12b068fc10ae51dc9daa35ac85239e11c30c5a714c5951d09dcb99cf7b400f7a81274ab4409262b3c9362e735cc1dbaf3f4e7afe32b73894cd3191936339e5cdd78b56eb84d48c78a714af0e710d60ea72199955c5f8e9ee9acbc1492e3c1bc2187ca9f77cebff25444622c28c900f213e97100a0653cf8f6307729ff8ecdca410f30aa8928533a7c6190dfae16f63df83a0461bd72aea5f4200c9a831ceb5b0333f1e5c42805155abbc387b271fc4df2dcd4e0e597f616cdee14d364d9a6dbaf5d145581171367b1db517b9aeda83dd731d36a83b1444ab412d8f0c871f72d01f941c7c68b32006307"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "086b546296bb96a5254a28190b345df408924354f6ebc521e1fbc82cc113e6f2b9a03c1cecda71988665220c65cd269b40a36d452ff08ea2c5f31914a45c038810c0e47171682e53b93996ee958c091eabc84c95530a8707765c1a5a783b3c022648879bd8caa4392139bd7975a2dccf6445c8a2c2ab084e72e87bde250091677522cbe71f9121b80dfb365962f97e6108c4c8449fed8cb87561c9f6178a0b96fc7bbeb105122ffb75ce2fb234919d86bff858abf1ba37c9a3ec886cd0cd228afa01b83857116eab734c46031dc485e503abc1a9f9bfd126c887c528379205aa1c8910c94c0c3a1e4f1fb4a637184aa5d36c474791d37e01981678cc63ec8ab3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a4b495fdd1120556d60b01459a7935c6eba0642474447fc76cf0bd691a1cc0170c409a969e3d69907d39c9a67e27acb13fe875136a1f466ea10b6b1d2d5d1b97916359851156d085e785128b0d5bf1484c3a44c0c18cc0799e5e22e1f87f33ef78b89d7a21064dbe26974dce5451e60c5d885806c8126d539b1bfe668600394efdff7b840f07a2c3ef8d15dd2c0624bb6919f1862ad606399c8b94b9a19a5404c9857e029a4c76dc1c02655c037c004885c2c16fc727954d8811ccd726a1a4d9f14b2f5d11feb2169aefb7c32af559fd62220fc652f1fad3c5dfcd0679adfcac20ca484d9847b4f9413b0664b19151e6cb42a1cd7ca54c1e5d8a8ba024a3ae91"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7ea7ac9d5851bd2e33a6f39ffa512c37eb07944de484f5e000db07e609ff86eb759573949440cdaf4846ed2787137977ba05a17b06761ca658b931089afeacfef78e4e2607a9043253d0c6e9b5a8ea2b176fd3aa835927d4eca9dd2b470296499b8194908c505459d988d492d1290de9a9125d5b73962aa9c139fd18696fc5695d5d852d8afc03ea536f3f77988afa16b44ef9d679bc27e1da7e0673d5d7365a46a3e87bfac629069f820100a13d22aaa88ec010a0b931c9221cbb329b1bf14103ab6623ff7e198d7287c0b11eafdf3bc0aedac23e37f4d97830a0ee3d47cc19c21f13b55d7928ca3baf0c66520069db293f569ff0722fffc9032d4be928bb24"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1342c8de4e6534e10fd55b7a7dbd447d55c79c6318bca69d9f2b30b7bbcee67ba796bd4c38199835c9e0ce6afc0c649c1523a2a14ed9d50f512c4b64eddafd9ecc73b96ad03672feb599b879c4cdc4da4b53606405177aace48dec044f32aa18d23ab3277ee0a99bb87879115832e45eff8d6a653542f879a1c6a79e96eab719b7fcdc19669395ca95df933242ef299942965e2b943c8c5754c6f136535ef76f4b679a693554e8e3bc45af26a4f5ee9f6682734ffb5ef822b62a5e448803b97b7563a0893ec098c0501691b7fe6a9f367cd6cfa9cc8494fe6647f7eefa941f56d14470e5315c9081f3d7a2f5e688ef43d14d1ffc0c189045754d1ec4913a462f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5bb15e1401b13223187ec4b9069edc1b7c822f300e09b2c49c8b3a76d6520a0361689e2d5535311beb55fcedd905fa834474dac5d4f8ac7f64ed76e864100dc262abf43c47912f6e1233e8d0a327467ee31c580b42e36c81e6dcde10a5acad83ddc4c72e95bc8ff5d6b3ddfcb06e43cb673c00d855da419d97dc72ac9dc5ba84e59c566925649380c98dc03bdfd94b2178aa5088e4f3a87ab9a9cdd3f6e880329b66940a13336b83746ecc122f711eeb816b460927381bf72367bc4c07529802e083c589ee2d53f84163847cc3da94cbe807b1fc12105f9f1d3e7ade0fbfb86b6e68bb1f67d124aa9c93c76fa6fb95438464173fc154db866e35437f6668f8ec"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ad644f64d1d3da05772de46bf9e93aa88ba29b1caea1805f4c74335ac9cb8113dfa53fa4e254e6932a3bdee5024f3e4522d0d6354a84b11d8a7dc2d1263009a3ce0b1631229c62c3ec537cf819b052feb88f5aa3cd4901488e1ee51db8332a15eeec5797d450afd5f49bd625e425678c95eccdbf91c24d9824f28258d8edfb4d7af2f3b71d4dd9cc14374069e5d28168c985e1a5485ec7720992fa5cd6c1b8e370ce6c583bd4475304bc2a70e8ffeef40a445cbe9f0d506c3d73814075c9156ae44ef62f2e40a319f5e09e9b39c754325ad59bd81e00bca12efea07c6ce5dda532b9b5c0390db56ff096b73547935f00ac056166f19743a24239b6bd4dc5d38e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5666334ec38779802e7c1c18e9b7be98daa86bdbb44b12bcbda7348469fd8a38b18ce25fc6a2e12f84274c23d7d7a4cb9f7b75e17afc5d3221c4224a49e6e32e2079a95e36302ffda163c3eada3aceea77bd75bf57e5cf87071d2b5568204ace66aa58e12bb127b11e9e78fa2a79c7ec738483df8d102db54e9d16ca6de170a5b5adeb9340c5dac1c9c846bb173e056fd5f224619eb043f4916ca1667a11be65811da6c0be2ca2722e858b2ae14c79616e2a558416e1b6de240f8f5dafac00d28f94aac8bbb8661f0f648c5dc001e10488afc6b5cd8604b028faabefbb26fb3813a5f2dcb7adcf01d946bbb17adbebec64ded62962e98fc3931f61ffffbb8258"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3d24d14d20e9adbcac72a678f082bb084fdc4bcd099d8bf85ec7b2cd90ba8d89a056fcfbcfd9e1fd8f4123fd44b8d4074e52ee5ebf3f8b9a016b68743cce84606c09e63ae5106e9e246b54f4e02d0aa3215ba37dbb7e72784215919d24a74d8f057a4d5bcb1df671c898933f32e9cc475401179ea2231c12582ea13a6acca83bce09815ba8f783c80d49d75d610e3584058e67c581cc8c9d268f3b331fc150a436965f5cb4bb9808de727473131aa442c08fa98594441aa3409ef0df3e108a02dfc70f06b9cc89578a0ba0e5cf4bfc65f5778a95bec0d60864c92b8716eeb308077922f7f659b706beb27a0f3b82395c5d4ba8335d67dfca8a186c0563dc37b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "202277c26e39060d39753e47c8e93266d73b7af28a7b527c4140258164ccc368de4ed91c5e6dc2a84811da2b9fc76f353bc508740d93f9d81987e3e54d4a42c4389b15a0365dd907f07cd44df04d51fe14d60320cebddd3f68b3eb4b2618b222f6c9afe51646a9992247d74fa5313b5e332802ebe3544ba551af2b89c6860718d97a0d36c9fe132410d6215ee90d28b8ec272fdb332c188eae4ca666090dae19d97784601a4ed1f7390864762693f2e3c68465125340921e6f64319c2aa54d0565b6b34ee935f10e69b77c439ca70b087f8f91d6fc656c8a43f05d9319132a67d26d3dc9db37e78cbb4b92bd6165cf83b94a876b6711aa9e430848b257ad192e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "38600d6c91ceae4c31e08d7bd27e99f5da851a023eb838266841c2d173eaee4e7f59f1729d11491397bac90137631c14fa8da9f7bbb84e6ee70823b6746dee0eba41e80c25860b62201e1f58bfd4a941f26c8997a1237ad12fb7e3d5f21b65a739f3955a04c76be2352458e3a7b7bb622b135238bb09305e75a068dcc4f5cbbd15690e484176cb07a74333cb401b0975fefe772bb80332025861aff08aae24fe6f58d1f59e02e6af68b0532c7f471ba0e4b5e25ec4b35a38e09dd0202d19512e7e56628377d8fdb45f23694d6846b1d5594c1b8ae858683f3641e4eace65b3996b893b324e8b73ac16f4a9c518ff833848d19aef8d3819835a222112e051436e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4416f75cc33c479c6115de4fb437ed353bdfdb231aacd1f4f13b229d7b25f904aa0ead240dca564d9674c6a979ad28244fbf274abc8998461b572901f21e8ab60a6c61ae6d0ea0d5de35a1859a123e8485548aef1833863ca8228aa40ceb202cfee1cb67152a31e4ec8be5d8a24b83846e6f2c05c819d0bc37bffec2933fab9601d072eda2d6f704d80b235ae5b91bb3f4a7173c92e53e144df171e021c4b13889ae0d7d99ae80809c5a6ad173137b21aa545a902f9e5b08e5c09c9bff264c32ea0151eb8a5498a8f582215217c7cfbcaba9ec0f8a3ab1821e0b6cae644d7b487947f33a72d4f050da5f31cd9ee6d18aab50a9abc8a34cc2a6b45e5c23fbd9da"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "911dbd150f8ebe9eed71419dc8f6bf2a09590efebacae72f7e6bfd912280b1dfaa2fa7461502368de5f4c609bc992ab8421c86bed775befea591ddfd9701f6bf46b03c2472a2b802e609bc02707d33105d7a00f3f079c4b3b542b06b6d5cbbef6521fa56119a39e1b0e1b3dd86c0050092275dfdaf13fb3a453332888afeda4c376722d45b71e2dc8ad12610dc1a11cea80cb95855dbe120fde8bfc9d1c13b38684db78d62019a9536932c61f441d9d292f5277f00f7e97fc0a37cc4cc8050318475b0ed5ffddbfcdafbc951da39f317d39284c338be3586e352ca1e382b527e21b08f5ed9ae812af902ff0037f9709c5c792f5f0be243aa89b0fe467a04d72a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d2788622abed2c9d557aa4b66cb8cdb7289f3dadbd6dac50317c9a6103447cc0c333ea9f950a9ace342d82e05f4c88d7eea7dfce425160ec95fe95befedfd8d24b274a887073909272482bd9426ff10805a9d54792dce629f48e1c7f7446b1c1d542180df758dcc2668fe9ba94fe9d347c897725142083f44efe8f41c210ec809e5c96e00848c12e16a1bd792360624028185e597a62f4685e53d831063e4bd6cf50b2600870ee835d9d6067a5d81205cc88d02ebafdb014a80a06d517295b238c13bb0ae31f2fa5f68d14c4bca9015aa122f81d82b9aaccb0cbccca3751ddc8f4cf971190b765ae246bbc10bab538cea8123e81b68d417bb04233eb2b66668"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1779b32fdaf19771df92f2e365fff5f5c2f432af48f660014ef09b9c01913e5902bc0be92938019502178ca736b46fba68a513a884961ad19ebaee84a977ce11ee4f2fd13d72b611be3e30fa9926d1bab6fdda62aa031d79f18a09b9b3a3bb26a8a368ee42846edc1f85f9023c2190d844042a6cc9e5a1b274fcd075d58ad132fad05fd5e2713d0255625ba0e56ec0d64fa66d5e78fb242af25f12d41180cf2d651ab9c812f683262274426b4a539fc36602860e4b7543878c582ebd641ae31dc2e8ff5de9576e24d878350243120ccf800e608d9bbae41d10b8a1a6c3957529b263c6e80d7c8b54c32b15e3ffcfe85fdfc0df5698fe9d6afc677bafc1e55bd0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a2fe05ff3073be36aeb55e736b7489447f42482f91c7539b9d8ffb27f7dd6d58d1e6274861490f30773b6be750acfbec31e5cab7be070630feaaae2ea35b0cca36c67b544d709fa17de1145489236bbc69fcf3637b1c4c50399e34a5866ccfcc7c572143cad581184eb78fb1e84b9af4075da358ecded93288a609b2d5bf9c159a542fae376e438bb947c8139def481eb308f568345e1a902b433a5766c266b89749bfc4dccafd6b53a8b6c5df1af7eceedcaccd9809d94bacfd82c82a0de376971b6454dcf0dd70a2d94364c73f579b78242967b28bb6e4e08bb1efc47281ced3d0b2d771820336bacbba1388bf73edaf9b140c4eafc18cc16856b78599b63"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "551797652916d3e62a0cd534f4a0e6bd1552d7aa38e94ff522e8b4fb39b6dff8e1698ecef6100b4a2e3d7063ef5abd42ccc0e5c49d26e353a903cd06f8ad3297bcd60a8597afb2d7aaf8b70896f1f3bb1d2953fa76ba3059559cac7e5378fd129ba8bfce5851600abe78aecbbcad2516747c7706bba3c835319b1761e237ff593d8165b5a1f58bfe2d437f1b8230f5bbfe61b3c9eb56c60a19f70816dd3c86e28805823106b3f1798feb36b903e6e52340d559721679bb95700d9969367c50997d6786aa10e7614eee58bd98dad66f81c7084068946b391f08fcf3ed67ff4208080d8b093be71d023fd0d66d7e2af5895f5369ff76493f51ba67712ddb085d42"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6a9a4de61a2a54615656280ec94cef9204224fc0b4d0ffe5a25177030d7ed597cbe199c18b18667d54830872fa0b2ae363ddd44dd07941268d5760b8808ff87c942287a4e719f7034d223d1baa21f6d88b2fa52fde4cb7abbb84e1e07417792206f70c208bb1c1d767b13b9d675c5756455bc27852c76c1ce924d7e981f2af4e770969ab86e5f01aa3820ffecad848c7be52e85ee19769acf17e0b5117a8a14885a85eebfb63d4294e87a24fc710e8e560d998da812c7de3fa0f531f2af7553f153cfc2780db420c7a17312266eeebb7ec04c0fcaca815f092156cc3bb65bb7d7e1db3b5db955851b3b3415f60ceb487bf74696cca2eba09f2ec9636ca59e390"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ec47c244218719cd70bcad5ba1deef15fed2dcbcf4073ac3f05cc32750842bb74d6ffd506224b8543d562b2584e944cf4ab855da0e4f3336c97cc4636bddc2eacd66b3398ef48f5fa74054035475526733ed14bfcaedf421c3165e3a40a5abc098136e687bd7c7ea7e935f5940868cbde5efe0b51c99d15d4a64c7e4ae65c16dbeee1322f7cb3bacb4bf2c7c8a2f5bb03e264824de55eb3510338494dcb1513557120adc5150afac38bef002bdddda43b5c14891d4aab66ba50c20e229c2c3e1a10d5f194900abd3c217a7f5e82b9e77d0571589a51e9f56384d67b4865a7031f57a250d765cf19018dcbb335b856e2376c15c1a78f5ab9bb8836b820ec2e4e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "68f20b149aa70ca60748e1c95b10147093aa384a28148b31799839fd0d087121b236503057fcaf6d1f390cb8ac6fa92a18768c6fd04844db995f073e893f08a86a86d003d508262bf01fca7de1e082ffce53308e6ed5b462211013f151c16a375a342b0c1d2fa607a720242558fa82a403b8443360fc0f1b64e4b7bbbe74b10ebaa715087d71fb4539cd1f5b3a72edeb89235c56018a57e04c5ffa5291cd1346cd7cc0feee2b99a3770031aa4319af0a365ba77978c486ac174009a2d3d97d3a113952eea3a8691dcb4b716460365341256b2dd5c846184656135162f38acdbaf70a4c527ee751f384d91d09ca7b618231edb72cc725a942211b00c58d4ea7e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "33eb8006069a2d3d63afe5a1eff9118fac6e3556d34bf97431db5518176ffa1d35d61c6010c25980c6df9d9cb0be5a9878c4e79503367bed31ae8a4244562a46f49e6ba7fd780c69b33f776d130f19b609116aab8c917c798024fbe5ffabb33b2048a16a6a72bf189f7dc6a94edc66c82931e02907113fc4e254fe6009ae9a716ae2e5f7d60b1eb2bc8107efada0f3b2a325a6574603f30c2a87b5661e007f07298f0ee74d4f4eb85a0d421fbcd0ad1a33bc5589dd72730df896fc3c3fa8f55353c9e88d58cb258404c28b350acbd17a569418e350436a83cca0a2597aaf6592d5169ba927ba1d687ac70cd225f0c652e10c75ee4cfcb3a03b9d4b205f7c7b4e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a1c66b956d58196cfbbf706b8c9df9d9ee4d36a7df18017dc132943ef52dece5d48f83ec06ff011a6917434893c6c112a1ca203eab0b64bc027a390921e1ca8f553352847437b26e3be6dc8a0b9febcb93dc4185c687a2fde4302012b6da58163ed67a842118d6eaf85661702729f3aebdb9641b5f913bc687d0d7f5b1291e137673e88ce5280fc04b993d45cb731e88400f8e5cb1a40e25285881a7b877f75feb17d68218aa5ca4ffdb2318d5e01e3fe8606982fc40fce771f034578bc67972c5ad392e7d3c046d28273696f737320038fb33a7417e6744f17a153b4ec8112838fac3c18ed4fd14159a408befa2a0a39ede900a4952bc2bb163ad90ed961f84"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "13b9208bef3ecc8a4d327a3b6da582c2ca2326f84d233cc41e962333612edd7d2973305619186247279bad6d849d7dc7426477dbb35635b0b843e977cd8540b078dae1dd156644c4b24bb75fa8a8d247f95842483d9ad0274d5d9f7aa29002f93313bbc277b01f1cd0cdbcc9462f8b984ccad2c05e95b50e1dadf8e6c9c26574151e720abb9747e899812bcbc6e43b40a233804a91a6f50420b309d4291e2c2e1250094625d59079fd264fc1930f72fffae6fb2e3378bdf30543985690e61dc4f1262c762881061e59024b2069f53391ca16b215371e6cfaeaff1815fdc6bc1a8b7b53be114e157b6edd2930e0a7bfdb242c8f7a83013ecbb6c583f0a041723a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4eee2b16048f104753e25236a051720c2d73ef183d70c084e792ad6ed52b0a2535a99c0adee80c59577f2d25d257f790830221711fde591ef71beccd654431a2de33887cb2e2dd4aaf3958806740691448351e5fa44fe869af58bbf15d2f489994c5c3d6b8916c5725b4457a2c7e4764a9043d9455325de8118f9dd60f7988abb3e52c48b40b94d2752f79e203bb75178fad51a0220563d98e798825fdae83f698b8504634c380081179b64042a44f146712203843c7291bce264b64fb3b8ec44854e046c8c4cf5ed786701e2be6bfe8d015826ccc430e79b63e718c8c0ba6ec1cbcdbaa014d5bcb51fe9d74e01890dcf827780a337f495537385311262e9a71"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "459cdcf7a5a6ceb515027f05f54d2457c862d780cb64e502da7a2c4b9eaee3f19391494771811b1d1c60b7aa3343474d16648b85cf30af69203b6ec09f9dbec5942559c8fecfcb08624438415772dc439c62ab785ed2b246644b8f5050a3629a1280de7e5cab55a0b1c22d79cd1a851bff929d393ef521a3bad2f76a8d12435c6c5b83a0bd977d4fcfe3afac7f359cc2e45472adb0fee40aaabc6ffd060963453d96f3f34afd24e95c17cbd222865eec529518746c2815ce6126ec6bd3730e43dc701a26e0c903c51fb5166db09aeb812288ab932cd1ddf42ec17ca2364561267ea4b136198564d768e4da6b19d51f3ca3936451c25e6da102f8c4f10c6ed283"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "308be7470d0c265794934b0f211ce54f7d67936b6a1760154d585a1ec6b05da313d942847fd3a1133acb8fb9c5eac471e342755268bfb7f2c762b7d25c4b53855e9bffde4f68460683d2dde2723b0aa5e9705c4cb25bad26bdcea726c9315c2c9341515daa6e12e714c6011eb152a050c903d024ae8e06742c3c8c86612d207f5288093830a83761ee40729ebb2c5dbb0e6e98b785040b1cb3bae9d1463f43e39d752b212aaee52753fdccd6de71eecb17dfe486b296d6c455a17e5718fffaad9e82f999723c8a66d0fd2457c3cf3f1b3df127bd73662651fefdce95f91f1a6ebd370fb2163bca19c9759e7f5901bf177464ffecb8dcd911a4d5ed5d5e7402fb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "13e9948a6ff7595299ccf4fee8f9bc52ca20d8899844c1fcfffebb64052063bef5d4c03460495a475144a252fbf30f00cf58723dc1d4ea48f6d961bdd20d0fb20ded4c90fa9b0384c0de08a2fd4b7f94c6f66a8f3123fffb296cc430ac962001d0bc7d211a80dda72be7e73b84c8b40dcbb8e84722f19ec21aae93924bd2f5dae584d0082ae6c4c52994a7431ad2ab3c80710b089cb79a884d8b40f7452a1874c9fd2f22cf46fbdaeaf5894efd3b0d96bef147b9d600cd0400412b2b8a5fd939e14516e9c2574e02c6f7e4e8f2a5cb0194a34d64a4c5160c55ff1750c5912107805d2c5767a260be1223bdfdb509f59782570c7ec093d7f19f5cbbaa64cf88ff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "608ee7dbc573b80a6fe241bfe38854451a25de5ec32bc17b067f9cc9679382c8ebaa5607bd4b9f540046129ff555cc203728551001fd45487edde84a80f6c4b035051553b683881c17ed34bbd1e071f28e73cafb9e679489e5c73b02be7698c733d5a6316735c57a4c38a820987d934c463556183ad25f0d2a69e882acd7ac32cc3fc229e0ff80a1c5002095c417a559f84278dd75098b75370e89ae1c6ba708c453322f9be79e74530b062a098956dc6727a515a5e06c3d528f1a8f46318c561ad68060aa459dbaad3b8d8502fcf8109400dc3f1ab6e2bcd0e03c11d6c659f28953d70a9403c12ab154b054d860e534ac5c322f38685239cd20b367ea6b5c77"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "423e0dd97d9ce8afc746250cdc9d4cae42ec240e53f08a32bdf9028bc5be2d6848ce48e13655f009e719d19a150923c145891fd2ceb63d2ba5540b658c18514f660831cd9fac648a487cf74075116ef2daf99e8c65c5b3acaeac974769dcf693b535377d69e55162b3c77c8bd92e21d874174e44f6e129d217c0aed09894f4cd75c7d370516cff3a588d4c89da64e60ee89abb4cf28ece616335ed3efe4c9d6f1fe5ade4dc1bab24410f48a9eac864699f4d3dd80bdb34c600cb53a4505613245df1e0edddc9a09a4d7dd540c661a5cde0a32ae22ae5dd63bbffd6fdb91f4bda8443cb8f8dc5ddc40d62859e5cf5911c2f843dd62b82f0c1f39e0bf3e8edf094"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "16526d1cb139aedad31a0e397aa3fab0232b3d6432dc7fe1bf223246ea35ca6576c224afdabc95571a57108bcad87faf73136bc694f16f44bac788982382d6c46ab751683a13575f917acfc9830585c9961a61de138bab17171b6c8466fc35065e08a9bc6dcef84e46c37507306d60d855e661db7c41dbe59f3737547063796c618b5c9983726dad445edd1a89a5960758b99058e3fd0159b739649e40e9bf57f39e66f7bf23ef72252079d1527e9099b0f2be56b36c350468202562e33489d1531bc5188640c2d3f4f2745cdd190dd96e3e9e0a578da8132cfaa12ac736c4b5f9a4d6398195a88626f5c38b16016c9e97c2246175f8a1ae5660629e109cf60c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c1cd6bdf82c00f4d1ac1bd38ee4ff5929c7651095587293d97f4afe324dfad1c3aa111abafd30cbd4d9d61b68430e9a88e016a85866ae40ac542c2803e0b0959d3a3f1e66b8e79dfc73f69ddfac4c86892c2da5fa2c991ff20cb2630cdd0a8a38d1c4dd3fa623c219ef50430798faad662bc15caed462513ccee3a1aa358d6e55790357fb34221a32796e0c6988dfe18320b3dea14f3423aefe12bc4bf1f78fbcc70a1cc15e8653d6a591bbd662859d81df47bca498e5649c07cebf9cb26d4bffc1ed0aea7059767a6b47dcad293dcd24855afecfdce49e8bc885511e61e754fbb8a6278582bdeca1c04fac5465f15a14d28cae2241a0be7cd662ea87680525d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7be6a7fbe11828cbdde67e5e0f2580b09adfe1b81a564875bb522eb59ffef9c3541208e520b4e73b597a30a526dd954272cf936033cf88891b551d1eb9bfa033a1cdcfd0ab8f51cb8503995d18a0acfb644d5ac892f828166ff25b48dc4ebef7acb8aaac10baa402c8db37698f048cf407df57bf27383db2663ae3e208b320f9634af208c23cc23aed64b7a6f3078f4b873113e75457e3f6baf23d3f49ac6cd64a11c90469a6b6fc9837634c72763f0cf35505b88fae96e149a0b87a0c71820c5696fc7a6100138f07e65c40b2384dacb0c8557837d0a5082773a09fb0ea369e7c296cd75a5e8a4dda61de1f923d31e4d8e48783c39d5eced7c7e82a6e36a1e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "70a231ac8da499eca0f1f4abf682accffd04f7a611dd850cf5241f13759592877b8d43682a1f84fd01c86247f5fd9fcec98cda26d9845026f15923a16fc6ae438e718159ffe1180df97fd66babacc4b97b156ec6ec500030b0fcb62c52a208cf1ab803a2d8c52be242075cf4f6c84abae285ce2259acd437e7764da25588bc6dd254456158e2ccb9c5f0e89bd899d97621e9c2a6049a60c978428fdbfd7869e3b12aede869d7daf7e3fcff841ad88b6c2be36b7765e3fc24d996e83c592c32fd1c45bfad63acf0bedefd30529dc6f57877ca0c72424474dc7eed3d4f502a45299f14d64f79f3394e00d160c4dc0a05f57664d2cef729b93d37654df8f1cc010c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2dbcfbd059d95582e3c0bc4b91163fedf41dc471aa1fdaee288eb6aea12cfdc6445ad75dc1906397516180884219116bb4415cbc1a45d08ec53b06f3c823cab4f633ad62d3035a66155a706f36f5899c9ec33ce22cc18028311c121000ccb23f34c4a071a8d296466452453787e7a955c5f83dcb3e0c8adcd58806e4d0fc5c90a18f6b570d007c7b5f6200cc96ee8b78c457fb3be09146ebbf7812a747d7d2aaee76085f6f6a14aa7aa7757b17e1eaac0885b0cb4532f46a4b0d5278966db84f5d7513cee0e269d32254e9c041bdf77bc4c2a08020f015f19fc4ecc74ddeb0e58c2693e42c554a7aa9c83a97e8851aa408a39725f123b10f47c4a30cddce2fe9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2675d35e89ae0383be3c9c622c1dff2963444bb319ab7ac8dbda22abb32296c6a5d09419e054a2c8740f79728ed0b1fad7d6213bb7fda21ca739996d97a3d5a21205f13692c4985e360a8297a011432e09c7c4b39816158337319b1704f503b96f3b9b3e270f41a840deda4c869036e456849b8185e03c2d88b6795a397559af36f479d6a5f95b93cf3a87a21307e8bd08b3bab11d0a3fc8342589b0c55093d366af08a3cbc6c0b7d324f09c21670dc50cf1ec1222e41fb114ab4312ec2cd74662a96bd79fba6d6cc9c677f19dca6fdd22d8ea7009fb330844496138f0d119211d9c4dd54f416c6ea0db267ad5077fa1b5aa4fbac15f7f4584922494365b2df9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3008e12d14734a49882eacf2cf0b9dd3b4c9d3f40ce7e2fa02ec0577e473171b2a54bdcb8b2ce3569bf95034cd27487d8d90f0ec428876dbcc1bc858a97f521a61149bb8009d5a4eddf55c67e268a53fbd381e0b918455ce7b71a0a8663bc16d8fe2812a3951389db9a114339b16a13d54c88fed79a8c83042e3a436bb4488ad1ab501cb878dddf09a2b5a76a5d065b6f2353bd264c12692aa1dcc463afabf760e55f499110352f527fa98c30feea6d5b0591f4c6639716c0134855df6ada769fbbdba68354d364c2c19bad500c00dd53d5950d0344df58f5dae54ac532b5cdbc78cd5b25243378a903b7b5c9c2f03a7aa9e7b3cf5df2a5a0040d0ad993a0e9e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c098a958a53b531cf766bcd77119b565fd9e943eceda96bbd5e9a3178bd8b01f71169660ccdaa440d0523c03a455af18b27ec331756281618f9e23c29b088d2d2ffe0854d665279d3cf305d7b1bb5e5d50341460c483831f1712801496371d1b406a14b6317d495a4042c326e21d578bcbad406589a2bdc3fc0b4fd02dcc41c3379513b370b7c3ddf84614ecc4c3bd9e623153447f1b0dfad67f783f30a2e8c0dded1b085530412cb33b785de9b919f7d7971463bc89dd390aa46970df198d2a25d718c8af793cbb28dc0468190e04f0958145a76ab170400fc2ea35f05b20d2f96fe0f4c68031516fad5d850daa1d2dd2ac89a0eababc037619884e87379904"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "64a7a262c21daacd9a5650b5d86e0bdc07ed09fc4a89e4d3fb260cf5f6e2e4ad529982a0e677b37d8d945c0c98a802f10770f6148ec47bda1b59f63229bc81424e3c53ebda28adbeff58b0c59c9f96721c187be69a6c38ae4bbe664c185c297c150ca49a51812720429438e293a646895e4d30bd152097fae13f05a3b63fae91ea15fb556cece63dd9616e9550af7c2f9e9732ac288fd42258c34a48cd22ae389b9f38a9e16528c7d8deca2b11b609af2259393fb28b353f082ee9346a5aa55111c3362cc245bc671704746955f496f58b574fc193be8581a5aa0a7ee333b6d9f049011b306afe9f99d2ad01545f278aa0fe20502077529849c0eac95ad99fb3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5ee078736ce4de46ba4afed67454a5d3133044607ce2a5efc69a20cda031e4418b15de0765c6bdfec1e27577624a8d188d3c6a2942a6e9c77afc4d851ef1c489fd400f19b1da93bccd00c43753638944436b0598efe8aea545bd11391062599e4733ec4fd99cb59b16a57b07d7c63e245b9eaee1aa637195a04c51d8b40b33d00a08419365a69b2611e60430352c4f81eb423670b76c556bf3fafa602a4cf97caa580f646bfe6d795d35c547509705fef5c5198b878c467eddb9552051d9c9eb0e86a28d2e5896adc3048a97c0681048c5654081160b0ce2118570a76c648344dc1948a644b7fb745ee47df6344b22c8969d08442885e101efd5e66a9de17a6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7ee548d37ad707c16067c91cd1b3f2d9c212d13c5b228c04b904446aa5d5ec13718c8fb36a698a644437dc0ddf1fa2519deec3316b3703edf450df964242b467b01f4162f555de37b10748dbb26f1424ad671b7aec5821b5a9e14a1c7e321924157beefed43d2effd1128416e93f9a4c676e7c564169ce161cccb4a6bfd000d40ca317beb66905fe2a5d0ceb9b65918070c18cb338dfd2718ffedb160d2dd3f321c025ac8bd8b31fb87408ee0c1100b7ae72c731cf3625601e13d23e6ecac8bd5bd475a37b32fd4e8548a268d7d0df133a4e2c417d124572f6b9e741c4df1dc2c2cd6f660663495d93e1c506310af8dd3cee5c0116702c5d2484ad281c78e7ef"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "369a147162e880067ff3543d2c4b2572ea1e79629851141e1e1ea5a023bebf1032177cbf07df027b655d617b752075f12276bb40ce958c43c5ff61ad88d6f057b1f38b0a5692b4c8711d886e4608ca76a7e4e30492c37a2590ce8b23a9c78fda60d8254fb4d5dc3356a0c6385fb045e78467c6caa333af9c683504a1c5c40ac7affc005bfa3cf75c4cf9f6dc281e701d18554ec757cd62b5afc3a260ccf19d9047f09044c63bac9d3e90164208b3d69d1862c555fe8bbc916b3410584131ea5f575bb9ce15f17dbeb243764f62288d3f92fb3213d94218c84bef34c97ae2eed3a454a4fec5a69852ab12beee94acf0979a1549d2e975bf176f7bb07494f4a1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1e31c9be7dd863bcf2c486c18f350c7caf4a46fd87fec097c492aa0630760a3f8c9aa729cf2d16d1f234090f194f03009bfaf5294006a840f9e6ffb33f3c7c8bd5397dfd1ebdc8d0b755a0699c8cca65fe6127bc0176cb64f658d9ef653c245da12b83669625a585a0afca004bc8450c4e8be8cadc0f7cff7b7a793a4eea7d9334778b6326d404cfe6437dcad120e2a801cb408032e0b617f95cd7af90df1641285b082547c6a55c77b8006c6f575c555ba9445246fd5d9b1fe351deb9be539ee221bfe8a0e1813186f19e420766251cf73028cb70bab2965ccfd67c9a9d8b137045230bd976b666df73489f2af2b5bd1d5e39b1f063a8a93f39ffce0fe69113"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b6ca1d31f2ebf35e1410304bfb2841bb600d24f234f163cbf2dc907088f43cacdbeabd0ceb585432286947e02edb6b5d04af456b214023c79d22ab7056e674bf6f124653e1adf12be8805158bcbb4aeeaaeac13ca909d89121e278931ab590d7279e1c720809db409bc484b6bd388f759e9581dca851a97767fe4b017534c1986d8066386c8cd49dca14ad0f00a01db076c79414261a97a353f824a7e07a8eea966bfd87b58dfb93ceecc02d159659b9fc035a29391292571ce4defe1e54f4cb37257401b54f560a4601a5fe39c6898a193547eea558bc6e4cc1d675d46b86b38fdf2f629df7d40bf36eb7e4a46e025c298fc582252b2c17ed7300e0ff4b1673"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6522df9e982d2032265bf683bd586618b9b392d81fde606d9b5f629c170279967455c46e4024b0afe305f245a62cd0460871a6d470bdfbcf0f5296e59ceda6a5444606d7c38491d1ae76ef0f2c26398bbb1850138c8830d1e2baebcb8ae05b81302f490ab08252f2dcb13466437f2b196b4570ea78f34bcf9cb464e5f43dc2e28c3819ef744e5a541254be84f9fda3bf688c7b2181fc5943be1e484f01ce80ec01474e09f55fe6ba54fe92b57613fef41d5d67d4e740229842449e5314125328b6bda2eb3baafb623951ea12b1c4827b2d395b5c470ae83da4af41840dbcf2d0b3eca0403995d0f5644f0f6d9ce5e18338fd097bd0793d60d749dcc431ee429b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "258f8575c6a1fb31f6979bcbef23df0d12da874a5f12c6d59225dc388582571f30e0585abe7970b0c57b7c4bbf5e41141f9a484a8c01eafcb1b87d612fce7be6a45d7c126e186fcdd108e9b2a55a6f00684c561d486644eaa9653b0f580f05a9876b9d7e7727d82a3e89f9b5bc790939d5546f1404bc34756caca7ca873a9f64fb8ea553dc6c31a61e302bbaa731982b6faf0f44e5fcc1a7aa81a302597901d772bc3b012b2e10eaa3c6f1668d7dc67ac2d0035155c3e32e4db79af54db3ff78683facb523054dc8274f01c0e52f658f62c62a42ee7c05b9426b5a0255689c579aa10875eea16cb14a529bc0e37a17314c37ee81eb99c11f2497e270a9e187fb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e5a02eefe35f7cc3b99aaafe148aa6e904a832f61debe61ab99961df933ba6bfae5010db70671fadf05d7596fbc3a42ba443aca4c046e9dcd46680b16eadb024e822b1c973bffa4a6147c6907e7e5cb5108ed9b710f3a27ad57cd2c69f8c246786d0255159207ea83ec93bd84cdfec3b9d7ad6bbdf3fd35ce4c59f040df0b9f549c03c37e8c9a4a77fa63dc8f0fecae5a4482e766e3e8e7b4509ed700ff3248ed7e2db11c04c8423cbbe86008a194dfd6703c4e172b4eadaf7d179b266e33378809ed389d9cb879d22d9b881442051cbaa5bbb264a3746a15889649af13d3fda9f59ba28aa569bf2a8e79b69881a6abe310d49967edc12207a98431a9c14ab3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d3451b9055c5922fb6956a1296b243f2ab1c3b689fb1619ed07a812414bafe3e41c2b71ccf90ec30a7b7c6cd6499611c3517e0d91cfd832cdeaaf016056fac2b3f458046fb8af03d521d07fc8649ba62331e6ad894d760c78b95c7369c84f68bb573660de2a08500faa131261a81f123de87abc839a8a6720b0ef0edd98113592818e0f027a0e0e5f1d9b6d924949073d5d061296504f4480029cb2422e6505aa119a5006b6b37e68ce866b758366e4ee8b00231f61030e5d221fe26f5ef30084e04c62a7a965cc1903ed0945dffd830607ad579446bb3292d9a84a1c0172486b4554677b64e21bb9a00bb33df7664dedf10b06d7f691ed5b0e9683ec6fe899"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4a3c11a32aec24532f92b8a4cfa5390ccf67caca60d6d1a5512225b80aa811bc4fba8f323c5d71dc1941a2fe02e97bcee6c7a936ac1f95e7817378eb78a257a25dc9ec3a446503a046fa008df571c53301e8bfca9dd4bb9ccad909a1f1899e4e012246824859306011c9a48d678ebef2398712df229988826cbe91a458077f6e4f7b9af84d2ae5901d73e7ca778f8e9635b37f57386f146202be3e95f42909840a4348757085c8de8431e4e1c91aa667466d899b1e41e691745d73d1e2fb9968ab197ef1aa97b70dc49c25bcf62bc0746bbd5a97921fe851d96dee01753fdf6272cdd86ae5b7c4b3f9817994f898e2ef39738b52e62e788bc878fb446f1f0f80"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1753bd81f2bccdd8ee330df96e0c03345951b813c551e72dc7d101f16245723df7105b3e815f0e23fd08254158f60a9bff84c8cf5be766d7c150639ed017264d30e568f182c74a7e0d6f6c7d32ebc41d4cff8c09265fe60e8d52f204e6128a57e54a18fb90a587897ed16c50c0b901072f175ebfb20ba3670a5422908043f4e416b5622e02fdcf8d1e632d769d2d1764a537803088921175cc1a7337df11eb006d946576cd08934caab187d71c2184f0502e3827db97976f7485bc34760bee949346d3b3de8ff48642a4ee0ae7f9dd97084ea6f70118e0dc3148a428cdb662b03941f6a505da8a77e00be2013ce2762703c72105885ef2507f9146df1ae15341"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1ef6f0daf2eada9eb09ae8b7aadf70dd9c511eb427d5edf04c62b6584f851e47228f0e7ed71cb7a0a1729b62885380f132f63d54782b4c5981593bb4a270b43b2a93e7cb727e11acb1eb649d8f77d9615751d1de6f9b596071b61c19cea2d3941bbe66ec7bfb2718a16110f90f9b852d0d69ddc67923a9861e51fcd22d9faa859b94feaea5b3339817c9e6c7a6d8b4a907787279e0f82174947db7d110690e0bec1ebd7d4d36dd0c8c67dbd54e95e78d150ef635e7c7b6ebdb443aba2eaed29c1b6cce426dbd86dcca2ad0c217fd4d22b2806176f45bf7873839d4051bb15cf0a3bd29d4e80ab39b3b92a1b2e058cbf3d3bed89a8c688f37812497d37aefbd23"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ca8aca6df10b57108c39833e880401c593d24594f3f0b176df9bc948171b84b3d1b80fe11770cc3340cd9d77cf61836f5f3e4ff05b4da313e41fc2dae072adb596d43da649280a85933c7f4044954222f06ef58979e2ad172b8bf4a77729dfa7780adc59a52a255e664a85b1f0412246b0e85721275524197c77e03f7beac12b9a43f3ff633d4458baedc4e6f37ed566ce67cfb4fe392411e086746122e8680e3be330c9ccb2acff91ed8eabec3fc84008d8d3e9a3f8a379f1e5d1923a39ce3ecd69231dda661bad8779ab04dd93872bc3a706408fb5e23a4d375af4637da1dd0437ed9398367e3418972f711021db80ca9eef88823c35ec31cdc1509f8d222"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0230849ceb04f40b8a6e42546816fbf497fdef532670ca9828fa9f12b127d7a97c5c2c56f95048c11b0c4c0ffdb1bc5af25dabbb09379b707c7b9902f0a730013437e8c5b20690c58a131f77a57320a8258b3df073c63ba75576a552f65f3834bdb7dcc802b4a92dcc81b1e6091cf0f1403fd376cd53ddf62737af6ea847978cd8edf36650ac25cd741c02cc0d1bd503af90ce0b8da6708e8e83ba5cefb28a033b04602999d38acbf03ba0ce675e3ea4833e67ddbed6eea332b6bad6e92973a359e2228cd3020ab4fbfe9056d18470e15a52de034f7b441cbaa5484a6a5882d706ca49a4621a9c159cad90d2b3adabd71df4bc9c63ebc631ad5cf6e5e2e1729a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "61bdae14771e75b523505ed9d9f4f276f72769b723ef6de8f0be6bd482b89a55af6cbb6448474c58ab53f25e0680d8a37a0cd6e6d7c1cf87e6d94e88e405c9044aeeda7380504ace1fe5fd1b8241e74708d513f3396fbfdde9a81a814e82413aae10920610a7e4ed2b00d51b54886a811b63b18e6ffff58549111d7fb5dd0331831ed3be62dd4ae704e140014dc83b57298323af840b53fad3ade4d19086243b433fa39375d32536f42747700914c688bd74244d8393fcbaa6a321abbdefc711485dc17bcdf73fa259fcfac4a5a37111145cd2934ca80cd786117073ac7d42b2b8d9761c6130aab683bf5549f79f95a342717679e67700221ab4b021e5855644"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6598c1239a83d0c0723b68fe38250516ab689a11a2f61c027f8c0d23877cfac192b03d3beb50c4d6525195383f01ab4a696885bf0f7221f2a4481654019db4a8c463033a8ce16a7e05fd9c93f931e1430be94d8e9d05a62d2d0c3aaf6c4d559b1811b82aa9d37f82d194b86e593c94bac6450ccebb8a6929217b534c00e3e287cd30eafdba3279c97a614153e187be4c2da60167da375c736bfa51239f34690071e0f1f8a73b631553799d1174f36e0c7b7785cc768812f597a69ae74b8f6973084bb272b5fbb6ca56a21a7e0370f08489dc306b0854fc9f9e5aab570d4100d90404f4d9b5c7781fc791759fda49815782b38ec9f58adcd18cb70b2a651a18eb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0ac9696f7b0b311a6814d3e5d63c48a445d03c89df77884af972961f49812506ec8456747ec53e288937286f14c2e41a8f74fa421f4e14996de675d9751200f42604dec63a68c45430a575da116d77bbd38d60577206c743208fcd843578b575908e569514cf93f597075ab0afae8a09200a1743bfe3610736b70b259becdc38b67bf73721814c0134da8e484ff272cb9326bbf2bb769740132f0b2e44812fb54fbfc5ab96123c0d13eb62bbe115cdfe33222591e0286a09a963e20bb0afc0cd7bd2de7aa36251ba7cac6997a52186cf28dbf31ae3f571f9c86bf26a05412cf1e1a4114db0d5c8ea4e6b07ee215e3189afbc0b430d9fd8a5d2d138ffc0ecd984"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b29d1a63166fc63e249b9375636e95d9c054dddadd20e0ae1a3da348feefcca44a27bb23164136a8ca5964afaca45fd0543657801b1ba129c7afb554172abd19ee9edd058018e4dae4968372dea904afc553414f45bfbc26a92172437a699d3040389f0f507ffc9399f5c36956a11aab1e97aba595fb424abcca14ce28928bbac4c4e275fbc96854189509eadde522457e12b22c4fea0aa6a5cc751c87ba30ba3270bb0b6aa1ab580b663e46090104d55c5e9bafbe5d347ec7116676d1fc9100a2eb7c0710f5225885a1796965c923dcb7be7c25ca95458dcf3e48f42373fc3fc55353a029f9dc40050288ee419054203e840ea14fae81fd81ec55797993f076"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ba75b94a31f9d4cd88ef2cd76ffd0778bee027436f66e9daae2859c331fc57f0ebf6d8843e5897dcd8c94cc775a1546b84ab6e1847584f418539356e50e59863ab15e56a7ccc96bd96400e0b6a6453bebb6d7f9db6e23c59048cee4cb6ca099cb4a67d0df948822195379d01c7b5e3349c4affc78c402a02572ae152904ccb1997b96f030f68362de99a381c6079e4e3b6b0707d17227e3e2b4baa1ee2b35c434295deed6f30501e5a068400684416e5bb0966b4ab74c1bd139cf8b7fe09c2572639c5b87794a89cabf9cc47f35ddc6ed5a86933c564eee6e6fb4590ea20fa012133ea6178780a2f009af14b9e5fd6c298f986f61430b279e933d6d234d3f41a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "61a425423adecb5f5f407ab11b80b32f8ad08ac6a1a16cde833f2d8ddbe6bb311ac30fc71935337a54af6d1509ef70a01b7fac6db659c8de7c5839a700e98e0f6ff4a2fa9b60fe3ae1b09dab7e8f56ea96e326d2116bbf65016b7ed600339bc43c4cdbd05dcd20d8d46dd324833f2c3b39c85aa7cad40313c8523a5926e6bd7dd2335136f518c44e745a178e92b71199fd6c7395462bd9328313d7ab45b3fc45a91ebe4f000b3c84394713a52ad986496bb2714232d6edb11c8cc43257553526b908838ac81f2b566bf5bb193d7ce7b77109c9bc71f70b04e52d0e6d106dc148b61b6c758b79c7259099b09615d43532c8845cc136e1ffdadcce785bd406b785"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "334c93438cf92f60e2f92cdbfb57dfdbcf2a7e1369c0dbca628b9f8ebad0f679a82a43809d61602784fbde2af8b8a203eeddb543f32f7891d1a1293465da2ecf88b3cb6c4025b3661101e2c621d06835f63b7d007aeeebf0265c6221c296278bf32039707613950702b49208b734d9835f283ca349630595ce39a283baadb9cbc7e950b258a527c72bc62508a3be68988f0749051b6bf7f3d303a5350f6bb28edd4359afd34ef1bec01af29b199c36f0c3cbbe1dbedaea37a8324082dc084b7c532c0912fb681b371680829e504d4fbf03001a2e674762edad44f99f15f69378c373a430a8fc23177536e2b6ac38cb962276e885375d7b3351c8c98453b9c222"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25f9f878dff4b8a2632f808cca5cf03836b85446b99a0377c3f462eb512d7e338f4fe3645b2b075a5616c24f46917617bcade97f8863a59cebe7554316bb6b7eb46f2bee9c4a986c1e58d1189ad3075e5c1fe30d6f760b0037ad5c71148095155db297b11026a0064c11545469acc7b607dac606e8d1b9d83c059b0982065f30619b72c64af721b424328df3e18da905e2dd61a5f60c5876c9ce617b05be80827c2d27c21d2a55c751ecae400e4a45b52dfba39ab6986a1475f87f217b30837bcf10f4c564615b9e9e77fbfb45be9788eff010ea6dde7bde2668c6b5f0dea060b85588be2e00d26fc807d2c8c83f965f58d3ad3a8ac55a069853834d992edf79"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2ef2f37b36dd7d580ee5bd4e5fda40edb669ac2c994a0d3bc593fed96d30f08214c83fb5df338f34816c004b1fd1a977e3802bb6834ebd1e4238e9038e467a63dd4ca53bafb8bce7f1ac85107516ac4b0c350d2871efaff0cfcf6e8102e8ca8217ab414ca4059a4eab19bf2080cea23f305da8df8b0435120b98c7c1c68136ed477b6c9506b570fe7cdb7f49657e426fd0b0bd9908a1b05fb87aec53fa2a2cda540e99593a91c5f3205271d6b4b4f1eca1d5653535d21c2795422f757ea1a483c0aa9749f74dd78d5fe0cc9fe04e5adb35ddcaad79f9ef49de4b818b2c1705dfa295384bf17585968d19d8f8d96f5a367a2f493f4a72b6c93c33b90535d968cf"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5ceb75f65f2b9f4b326ad50291182de132776b4a4e0fc6f583377940727dfc33cddeca6b045d12486a3bfaff336f9b0746b3e9adc1a03651c4632e343f9988bf9db8098afb6e17a1e000e925f6fdaf6b5bd96d7cc1c7ca491105794b0ac064dbf9d78eb9627b3c2cf8fb5f1847d1fcb98ebe759d18f9d11f4b014240b3b1d88aeacd2c2ed6d23ffcd1927a0bb6dfc144d791dd447c2801c4f01b6f4e5b0124cb76732dcff0c582a8158896ec059dd041a06962102fe6bbaee1f1288910a7adbe8c3a2dcdb48a7c255b70fab8d015decef2a3990a0be9b94ecd2a1056b28fe3f96ac29f14ca26bc5de7a5b251e332d17aa00b1ac5f8eb3bc30bbe85d46b37ee3e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2e029166647b30902b520354746d37fac3c2a5f9d20e693305220609c3ae8ea0c2e52caa1fceec761b17ffc6c8bd28f41bff155fe3c7256e3315a66b93da4c97240f67b1687b259c0e227806c2466dc720a57aae407cefc34dde814260ba824433d1c65025b57dd866e2fe5abacada1a4bd0e0c71835cf798910cfdc1997eed34dae12b3812b1e7c97aa07432d4fd728b8935ff8ca523ad209531ecd8aabb2ae741f8c27bfeecca7aacf940356c025412d9cf969ce1dbc75af6796b9b2b1b5a20a8b9e363c310ba1707adcd4172c5973a9c758af292300b9458a8c0278a7e95053a3b9c2ab8dc206f6c8b68a47c24b2b9b09184df993c931655d1d9c232bb81f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aa0665f8b14da337f7212640e270e75a75436ada44375e45e6e976b1549bcb6d5a1d4042f160d5b4a3e7ae6cc8c5485450f94cda3c8c52fc071b4b5db3289cd68a4c48045375b7896cb6e8456c33b5bc4238f92ee242628baba30bce1a8856bcaeab25076414d4468d72d26914b9216bd23ccb77e1e5863481acd26bd2d1706c5f9c65ee84c536bf674eaa9d480d631de47bb6c422232e544f977af1eba39741561b2932f286a22681fad7faf5bff4d3f2d9fb22e9fafda6a677ab7eaa005dda5a67228dbda74b043f80d2fccfb0955124db86112cbffeb1db382218151f4baa2837c0f1692ef9a08529f09792ed0b2324157dd39daf63fe972748810c97ce0e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "81752aca9fd0847f603186aad9e57149bc9971f24d1e11b7d12361f989c9ae6e221ff02ad4f907c8cc31b55278ff51d900de8b1635ef5b7bee09b41ce099709e63078d7c0ef58a2dc5c2b5aeb7fe27a283087b9e148c97b29cfdb3a4ff4debd22e60989cecca3fb85c6b5da660bf7d00b4d88d65c0c74ff879edc8ae2848d1e2055856832d05b3f4effdb1c057bd1788e67dfff3d96cd1a4a8b04fe3c82c4fdfef4f91b352b6afc47d5f843b898908c361511ac3980ad1b83994b69400b7702c1bace5e344dd0c5eba651466c2a76c5a8bbefca2fd2bc258dbf424a5465f33bf0a410c606fa3de882cfa5c8038495e3f1ed5e919e18cb107505771a346bef3f9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b06f06dd6e71e4cfd3191fff49312e1e89c9ff09b502f8d81c6710bc25480e34519b70f1282f56c70ff540b507f729702dd6b25a33a3b96848ca94974ffabbe7ef753ed5a6b08459a1229e163777313f7208e7d4bc30eb8221e832efee50fe22ee7f915e6000aa8d38a96bdd1bc87e432fa10da0a1cb70116c62d894d05130aa2994796a4b514531b749405f56aa84874da4c25b4743814e0de174401d28d822f0485b267fd77511eb936011bce790fe8742677622c97f6ee8f749c57b254291deb8cdc759bafd8b8e0e95eb26d2e25097beb24e7b752090549a5f12c276ca182f911b095afcd87942504a026bb2ba3511bf4d32ac7fbaa8e44dafa39a47cb03"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "27e34f147a216612af33b2d780da400926ebabd939b41b6d6acf64765087231c6ee9c32398921641dc586048fb2e5a6750bea7d99b1c5d0ebce67fdbe7474fcdb67d9154971556b7dcdd304a28181123b05fac0b738d8ae21dc84c0c7fc6c152c06628579e708d4d7531eade2baf0539ec0b3985cc03f9e5325c093a46f2f53a4a0cd9a4209ab4d7100a06cb446444715c746c4619d3f32a7516c8c13638ecba66242222d3b636a3c609fe2618e080484ca741bcb755d217b50fe2e560d6983b8f708597adf4bcd0b948766f4390d0c1409cbfd87f8e1e1208561a849d79826cc60f380255dc4949af3c4857ae626e2e0dbf4dd5fa4de585a9c0ddff5decc465"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b8291b35c54446e9295655967a687ae59a795e96885dfbaa83cf52095d2ee55646cd939ccd8473a5f1fdbc8c10a77e87e65b6741ef2f854229f0cc7f8771ba6ce56391061aafebdc7b4d65d798b4492cb5d58b106c2e9fa5705016e22067b9cbdb6820159e390b8ec4bf41661a224581b774b61bee9238d5a8663217f6bd57e7e3405447126fa0dc3cae2734da94b2d848b9602b4a313c5283a5a5306ada0387589d1a5e6ba004c949dfc1c07350ded30494829d46578251c8a777867486483c0af6f6fb96a137573a72b81872162d051603362e873e5923ede5f418626f917a53ff66cf0d5e35a8fa2b800b8fd2fe68e07492da3bbbea36dfc282f05f243271"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8c03145d0ab288cb35d62df31d4d9d3f7e8f3bea809f5fd2b02722a1783ec778bd38b861bdb5b5d1d3d283493a7f75a7e458b165df40bc6b370ff901e12b5193187d85860f391594f75276596155b802e497a7b7c0bfae298f8a7627f70924e5008a0c5b2da24eb33346f80d85c7c5851b67e1aeab3124ce64f0c3298c2cc8d3c7ad46ddb945be4b2cb9ee37d08b252372731b0321b617ee2873d187898e9079cad56a9953f38def6f318e6e9f30eb79060dcb82f3013b16444cb10fd84051b9c9c954d9af65ce4f6607063a02e179dbd67cc0a98cfa50a78c75d7e7ab53f5bfef34e0a0afcb782ff74f8846faabf24f3073110e4b1f72b050644adb386c0c84"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6ac40fedc37ad7d9529d4327f81b3d223adcc7050ed1a6cf060a48035f01fbb19f8f90f17b1a5474ba1b362d7d826d2a62bb6cf0a6c41987cd624f887cb259e3a5d7606b479842b4a3dd69421355111df9d1230c2ac9e082cad89619a34d6eca3f317992fc3933b3cc29bb36787102b077d8b87911bc8376e68ee1e5b405adbf62e5ca46d8f500223a386553c45d5d085cfda0b68428eeec08ab0fecac33da41c30062fa4e7c89da57224522343df9c42d55b5b806d02e6ba11b8b434f8f4a638a3d78f4e7a295f17063e6bd8fefe1e452b6a7ebdefd82aa399637b804722849e6a3950df8abcac54e7faa656e52678ebffc9b69e2e8d3b77590ae592bad00e2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0f6a1d4ba914e27eb6df8dabb7d9e042ceec17d40b54171bfcd150278c64d64d4fda06ed0895920a141696a1fbdfcbb4df8ba357b81a8053de2ed74d423ad46220f6af244815b02d44fbd45b31cc2dd26145de9100063e3b1f24cb0e001837c0ec82fe739fa46ac8e75deae417e4ea7b2cf63a1c6d013b2a17bcdcce9a740149e70dd890acbbeabaeed4fb85b2c2c4037593c68769ee060e270d086755f16a2c4efdb84aa690c2dc105d47d0661f794f9a5c2d8bfa01228eb97ed79105dfe80b3bf8c06cf0c54749e9dd94ea26463d3155a268676123cb4562473a7cb6b3292d57fbf65c1e77537f43ea13d4429c76e0efb922b6954aaf481a85cb12d242beff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a8872892622d1126133c7de0a0a87f9f31ec8dc37969b81f93f9e43434d305d2bb1d1d990fd3f8ec7068cde599634b42b67529c5ec3585ad9897b45d6f791413d160de78171506cb7f2edcd530ec217b62bf47bbcc4a56cf11ee5f8f736a3a14198784534882b85f2e5533d80add216c9e5d0bb7696f318761f2c0ad788f2894d5aa70f2161b1f9a26cfed2922ee04d05a4bf11ef7800c5fbdf880fc1083ea7482e50133bfd3f514a44ff1d34cebc78c4a3db2d2a244585a23a587b38deac25fd15299deaf9b0e1d8df689876867687f98e60c250b5a0a35ea60763b0d842ebc5c8e3e572f72c8b9c678d17cd65322e1a9288c6b41190b2c39bea774dd02060b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bbecd925ad43825c692249dfaf8d329e195611162f5f92a9041aad022b32d3f557c5492ac4b3909a61d4cb140d66290c5237c19989dbb97f38ca1c3db2cbbe557c23ac33768ffdd28edae33452c84d555aec763752322d285de31ecb8da49d8308aeb978d0e64614411a28b21a848b864ed36665f7490a277f885ac3adef86cba6e09161947f7555d875ed8c09c1d0d2b7abb8305b30211b7cbb5a948ba7f4b4f1b8a3d95112b13738aa7a8d76a65c35af1f4ecf908bc2cff1201e165be270b029ba6e47b9420cbab4bf354cd2e5e617b031c53c4d3d9b4e47084e25007e6dffcd23a4e3372bb52ad7ccae4dd5dc856fe0b1f6540048644290468132e3466c9f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a347a01df709ed197c3b2d2cb37ba7b47b77c04ac8f2c8b210536635ca7204ee94715a8eaccf53ec5d0ec2de0491f9ed35f5b8f380e0d4fc97f380381312dabf7bbbe2b8916ede4b6172b084a46ed834ac7c6fe891eb165d606dff803ac345595e2c7123b827d16a3f0aa3ba10a33a8d92b30840a53a4bbdff30f093b2cb0d77fb4905458cf56313d4e13efa8c4322f75eb0247ca91a3c440c367de13808624c6accb006aef61812217aa2821ec82503f93d22b56029ea0c995982c82aa5036fe63663591165c6be4d5aa357a98cc8f70fd2d7a68aec6c5e2273933f954d7198f073c2cc3263a38d6b4af0079b5f3a5475152feb2d90c1bfa2c859ce909f452c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "54bb859f5b913bff81a26bd83526899cfa36ab1f5d0d3f582aa414ad08629d279d694e4d585646dd59ad3fa116e1b7e6ca7548bb8dc81c69b76058b57a4cea6f8db185a02a4fea5a173768faa26c8537a68558cdf8b4fa82b4384a04fe598b1612a7ec357be733546c618466da5175162ca99d9323dc89e9b7fc0c99dacc3c7779fcc1222c23f7375d4926d2f1970f4359cb3083321216169cae055686364c77ee32c339d89ce1884d815cb61702b738436b3f0f9ac3e774c6f74993bf1c7bfd54741476ccf111791e353a991d707f77cd5a52d470a187d6550a17bfa13c33c7dee5da8a07a201ad5a1afdc33e863c7bd80382989fe9a14f6b6314af53cfb71e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "450f42cab5828ed1719c100259528c39c2ea655b86f1c45fb8491914f48ea1dfd82b368b09a6b53793b7cd65e1c363a886dd0482360c366a04ac626c6e24717df9ebe0fede2e50b2b2fb5cf715942670ce7ca417f213f6500429ce3953cbea17d1adf4422d56d1598fb194026c40b71499462f240bd778de1162946f3af9c6f72b9daac8562c897d32339e40ac858fda5e5dc9abd6caf4af1b01ab5bf4d99cc86d9d39d12e5d85cd4892bc149da4eea5aea46d37641f3b1c4c15e9bbc9498649e5ff00f329514b890e14bfbea31ea811330b3a3587a556ae2ae53c46e3ebe915d3f3885e6c75f3285c539b95a9dca59513adc89369dda1ef18b064bd74aaa2dc"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "816256d2f65d1e78a763c2eaf69a6923d2c6bebc46278ac9f4f005b40fecad7f9f0d2a06ec69b08195b76b6651d4873f5acaea9a122b99d381b35fc08a790c8d88ea63c102e4fddf6f923fd5d0b048598fc19bd35e62ff0b41ab729d167e2bb33ad8dee0b3e33ad8e7ef647f51b4e255f677b99e491460f26ac488cd35fc73147d6a18199839b747c53f15a25f14ea56ed0a5e381a774ef69c69d976a0a2847a6ed865a6f402c9eabdab4a8c03956213c19a9783aa8bc153301aca3acb538eece52c43bd7c208452681b877e05c66c914a8811eef729185db3630ae24f0d2a7b46da2b2ee12a0de676df07bf3a84195d5ec354f6bdc5287d8b2349eed31487ec"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "840b053b40a9778db629e725103848e7bc13aa540929c6df42a55c186e2f0330d8894d5247c203c0659301f6fe8784e165ed253a7bbebd35723917c329fefdb439e784ae7aa13411b9de20cd1695ff3a084824b39c25fc6e3187dec94f28f9335b6e03458bf9e0b7099314dee2ed29228c4bc78d1ba0ee0eb9bb340242b083416afd193a93632a9bd761faf1b78444fab6c8a43f159f486605808ff35af1fa0dbe17a093d1d5f47fd8c1eb2e6789f66d7a4dc74145c8ef43b8cb3715d3c7d6f745273b0b1a7c92a6134ba9bf6d0b6670465fef1c176476d53f26613987b5f363c38fd3972e802d5114904fa6c8614fc789b5a40bbfa5cf5d4fb37e2f8049a136"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b889dd445907633a178a31b9784e0fc57598a6062bdff35cf0fabcec275138fae388cdafe2ce748b89334b54f0dea56f6bfadc1b35f1d81e19c7b633ba0065d3d04855eeae5c175d984d1da2182589e09dd1228a7bcfc118d884346fa9d2f95692f7e10b8848d90ce20f6401a092bb10145ff817b7be159506246267886becd34cdf14aea0af2da54de8f888a5ca1d71ed8a2c213a2c2f963f368a3bbf0cec495f161925418ac5eb5cea816160da64e992670bb900b9bcc1f9fc57a3506410e7e53554f3a8f06701693fe0c3df9fb4a45c1f567cf787d478c409ec97c55f0aa8c9b5b688fb2786bc0a3a20bfe5a57632cdecd75e5eb350f4ae2fc28c9c287268"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "538f60dbb84589f86b608a0457fb1f0019d9058b58c6c9578f7d49ad4c9f312c58b868ab5832e6c0f6ecf1e52582dafcfd6ff46f3fceff1a56ebae05adc421a52b33f8f93893ec760a1b52ce9b5b04570be56fe92eec59ce950441a06ed3d7ce83a17f8cad57f8eedc380e771878e8d8191b14ca783242ce005717acf9c9e05bbec4d9fc0d1007bc0aa2975ceeef98e97750e7f6ed9e91200062ddfb7fa7bb070f7b6539e4590d2c5d92b7ace0367608b9b7b879d592c9f2d0152d3f0184c2ca9e50f14f9f3edffcae85f1122cf579787cd0bd2ed2d98826250654e96fa5aff5d00bae6705fe3d95cbda5cb0dceeee98c17eb2a434a18184cd15b08804a9e5aa"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1229188a8f890df59c2f8b9a7ea411329f0f2c968d7efd14e7534a9b2c902300a48ae6d5a32b16fe7056bc697cb3a32b1bebb9a459922b37723740f0169def4228787b3817af52d441e59a548995955cb09938d83230be08cb2ee8ea0ac97d8bc354021589a20f7f5a483d29f72646e0d2cb344f915152c18c99ec04512fc5caea03220a48fe91dca9a53004b118af8b940f62a40b6d9f1876149c65ef2e8cc9a8eaeaced66e415f8de62df25d8e5e94e1ca1e52ea71c926df99e97e967cdcf5e1bcb48aed57bf66a34baabc9e773d5048cb436d9ea196829ff0d8b9f843a6eeed72f393aef10a45b5fb9d9ca99acec4744f6edc2d926d665cdd5fa97b29c003"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "19ef5e467b218a8f5dda1f5d3ab6c5c6c275d73292f3da402d41359fb61212309877fac2effb0734dddf6fe6772942d046f89eefac510a5ea511fe8ee690cdff7df4c6590ca9393bd53484630f744ec48c310379994f381608ab1ab356ed5ea1f3077e44107b5967c4a4794cf26b389d92d01b40071f023ba0051e4cb210e31972d12a3a678fb43975a8107d1bb5b883774723fa019a2197e48edc35bcb42781dbfff8cb368e27f6f0d82457ac25713e38340ac5a31cbd4a560d6a762251605badb9f818162e338393ae9fbdf19824de991f459e96b167194c50b223849f9def538507f61daa21c457a4560d7880b6996668024211639ed9fbc4fafe7aaf4b38"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bac08a201a27e4c05af0ab67c097a77dfab297546f2283c6d8179fffe4116d26c3d9068315594640046ced0248c157ac27e8d2afa2819817e1854f7f8b712bfe9da5eeac951477340b1fb59c85eef525d46e8cf20a0b9e1cf8b799ba18d9ec8cae60d6663c5a921b97d195d1dae5967b288b4a1268a66c5bd22606416bec803c426c406c25d96bb2aa7f58c3041341031368286af25bf96fbac021036321dc4418aa33a49194faefc68dafd7d2239a1d1800451d4906de61eaaf29a61f860f82fd6ed8b5bf4461e8821e91e67fd8a73513014b7625869bc5572a98c048e6d7fba0a22f4eb4a92532aec16c7b6eb762188bb40619f7ef28b77906dafe01852b00"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92b1eb5b26c69592b669ecf0f64d7bb2cb12343e687a6a8b8acc1440b8028272d49837a5d5be49dab02f92ce28679c22409e2fe6c39440787412a70d12336c1376b8d6303b9dd877442ca9dcbfe753a3582c277184bc32a9ae9f3906c1adae1724a6a479be5f56b438424d59a620369ad649b4ddaaaf53343e3c1a9bfdb222e9fb66520326633fde1b43f461bec60f6456b02f417d6075d553c4157d5712f06e68690db5f5a07a85590911f06be76ea0b7af608e8792c7c53075ed8f4b11eb0d4be557623d5d68172bdab3b64908b7b4203cd6429d2d783347f8044f37bdb5fad865a490ebc9c4e7a3587fc472adcdc3c5d4ce5685a9cdac5a43eb86b36fff6f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "73c5fb16bf8b5da488f290b61eed03b17bac3cdc98b0951e610580392a74f6300961dd15670f8e388ee9659aafccf9dcc1fb97596b9bd39dbb60fe5cc62efb463dfd29f491751b3204e10dfe9845e5c111d335a201c7515e33ce30c4bcc72a6618a9bfb79322b00b675191d763c4299f2a771c9e7e26c0bf0d6fab1f96d0ab60170cb88a101616dbad060ab079dc4ac6f91bb49776642d7b47c3b898fc2cd2d68ff477adcbfb1de10b782c554f1f963fdeead16c2fe5b4e584c6ed8c81725169f27ff371282305d4b1428b89a7a25f057763c417f73ad013e62df8afce855a38dc6f20ed68f4e37a9a4bc7395b9f3a4aa8c54252505de3f9b3e0301316bb376a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7520c52e90e539f8d2014f1bc44b0c328df96d9f93e6d12fc56c895945993b73ef01834db08369da066eda44e585c56e675b2b96801442e6978d041d0e263a706ff384abc1e9b7b0c0ac4a3602db96694608a83c799a2bb679fdaf6771f2d170827fa284acf4d8ea77b5837794ba74540f52c2db801ed02f040e38043d6447c1aa6db5a76d8cf425d7e6b85bbba2515d9de7063b8acb3bf0d44d364d69fb4a20e0b6ead6fab8c8b17e7c0fbeaf352e5cbd34b2a58decd81dcf452acddc6875b079cde93b10661b254fd04262918a705a1b28926388b069e0184ae4f7349afb33aebd1dc37296e04f116c691b14e5728cdaea04462610bc64b300e8b5b903f912"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8de2a7328634e513526db5c50c132c3e955c22a6022a904b4fb66d72a2d2aadcb250a6cfb838c9780ea047048b8a6d1650062ba0348a251f61247c0f1babbf1fc6fa5a4da9e01cdd7a80a6e3d8a566f56599eec09903e6b4b14d3b16153bc43fbdb1261bb5328056c9f95cbbe7f7072c93011f6ab837d6f3a38129ffd14c65e1f666f64c6455654748cac6d18c08b1d45481720a7834580452d1f62aec30245aa84ed8a7aeb686d46c2c512fa4e0f3f423c62f5db51a3e74a6e1c6f1450d61bd43c172dfcc355f56bf283421d3d60b2676c39122a99a6e397250c319419bc1c8febcefd04eb40ab336554c870b6dc719c4fae74929ce79807eb712828c85b482"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71d7a71edbc49fe622c9fe146967b2e4dc3ce1e3b49e022216b7c64eec7ac9294185a9309f0e2b78c1a828893f0ec1c09a4d7eddcaa60010807cc9878094fd18b179b41cbe73b4ecc03a7a9900eaebe560bdc7b92c22fe7a20fbceeb388d0bc1d440b265166524c7183f577bfcdf2d183257bb9699b529794568756b388f34a987bfadd2344f331092ac1199d7d8688dede96b1ecf279b1f2b027105439224133b43a95d2a31196edb0ba7bb5f72df9d986f0d55466fc37cebef4eb9f5b942e274eddc8f7d51beb95afc8210d88fd1578b28ed31947ce64cbea9c4e7c6a9fa2bfc3ff07f90f0b0e10a1010cac8c6768ca3ba9321c3da03640eb4909f5dc75bf6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "207d9fc28178464713a14c9076366375fee88f884707b3e30d1542be03db648007de08890e60e1a0226927853e13f48908dca2201221deee23c1ec02b8b62da8f5fe6d603ecc8e4fa50b45f65953b418a81ba9783ecc53c45d3c027d7e891c5c9ddfd4e71809370e353904d5a65d31dc083b37c3316a7e59fdcbcd9fccf65132a6736d2143e55c786d73e3c10971d1783ff46fb9d782e8849d2edcda14d9b1587117ddc0defdc612f532bee3bfe12eacab5ad7f7f4961d5a7cafe691409495517c3579b5e9afb1286f8e877b6c92180d892345569f694a779dc45ae91c7181142bc18352f7bf21e62f3c25b486690baae34759fe0d7b5bd5f85c2f6bdead0fa0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3ee1be0f2f1033fc034979a6de92c97f9cf26737f8143859b49341bfdd8263f1bfc65e246bd2bb655984b8e98add8bfd43632964a36fa47be4b567bfdb51f10817a34085c4f391717bfc7132736d05ca587bb090b9d2db16b90ae951524f30bcca9aec60f8cde84a373b06050b231ab7a1fbea4c7d1dd8102c2235437d1ccb89571678ff1cab3659061829f867787e6f70b8aee07a0f63345723bef4d26915401862449918e00f9de0594c77fb2ca13259404be5f787bb7bdc49005f2da4a6a2e5beae1623340e7af7fcdeeb7df228d3f7f5cafea8bd8d06bcffc80708e4703f64d874f702533c5642878f408db3ec7f1bf573e92080fe532dd7f68c96679ef9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7f6acb039833635053f8746feb3a6df4e3e98d9c253dbed7dcb01b3fa729aa93f7656048d094ecff6b7f283daef8af14bd328422a90c838754c92f79fbdd923c6975ea16ac4b02b9a4e9b67ba729228a35dd94e0272c759ef7d48f75f9e329a0a14e29f925675f9deb1885c1de7f61b9b95dd2067b1305149928093c3c99776c00d4facdbde91b5f975b2a4931ec369efc7f50252d58219a3c7ecefa70410e78b6cdccb96b14384809c257462434e146501cc042eb014eb3c7e0b712c88facaeb8d8bcd7274a0fed55c01d9bf6c7b9262166ab0d52c320a15c1dab52ae3199ba043c50843eb6ffa66fe147b2f1cf33f836017c3652b79f8384b34f68c7daeb8a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "099e3cefadbac010305b80308665c50dc8513e75ab7a19a64ef0c25f1d5336c73b7d50a0798b2b44cc7bfa00eda29077c52b303f1402a90ef4a6bd8c68a6304c30e94a082335d73f064e67e61a95b0ce9507b3b5c04b51380da72d15e22c4bda161b28c9cf73af37737c1d6eb155cb2325160f006aa9920f11253b03fe3a9b1dbf601d29ee89ba7bfea43d7258c91e706c0650091c7169692d1713b6cfb0a4533a8195d67ef679ddbfffd13148c22035583eaac176704179dcf899c86524611ba58640fc7c91b8f477ff0ad39d897aece17bc4248337dc1547fe8eaed37d16cf829a7a77e3d7f3b6438a37ae15c16ab1debabf6117151ba19e5be7bca1477a62"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c2bc9f2b9b0ab9a5f4a02b2b02fc0ebbde33c53fde074a0899597d9a4a93e64c008584e89b281828fadc8cf6c7a6a99870a881bfc854cfe02ae508be21e63fab8c6cf6d910e0515532d695789b2faffa1209596bfd37828ca2b4c687f8affbe13e3ca76fc421f0d76283e6ee2fb60e5460449be80bdd740a14a0cbf98845e373a0e3b0cadacff00d3803d8228d96f75d025071d71056724fa9b2c77af66656a4f71de0c38cbd382a883a92ece692c54f255c2c8552f573605d25486fcbb06aa5da4cac4acbc5831b7f68756fddd48d7fbafae05990e2bba2539a37e534e4f57fdff95ed5ce3e11baddfb4415fbae94db41647b9801fe62c9d8a1585ddf25dce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b3fc99e3edc4f81ae19855341b8625b2367e92e5c4b989cd28fa3a78d2f9b6254f314c6e31f6f5cf2ce2c6d835518b7e9a180127e3ce31dd31f896f5f910ff347a98dafc4b441d6046f433c694d300ade547ac6a509cc8a089141f32b1b58e8f87653d382bd58a258a7495d0e0b3737e20e6edff09b314ac7a44f33e83cc524d81b95ed0a2b9969d73b3cb256a0ad207c8c622c557db0c9871eccc36752433aae2393f06bceef3be7ad0d5f9875e24b3d7db00a905aa7066da5317aede4a0964dac144f556dd16f3e626cdaeb78262bd526101ad98e064f42aa9497c37eaafd4a0a2b0252de2556e20f201df34fd1bb52829cf544959f13fd380c435fbe39e8e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "376929ad5fc3c2b1692d36a18402752ee5c18aecbfabe02f09e604b5f6203222eee92f58bc3eb387744b07c55c5e8da5db88501dba16f0c2d75bfc49d0e8ddacc31de46b478916dd4ac26c98302761bada412621287a4d2a72881e97b955cbdfd4ab5093835f6247c5132a5310b5482044704fba3128f3ae14b8b4fb14a347d9f96836a7ce51346d9405f65ddb674f99c4325eafb9044c8e3e1c817cd47c3ea8ff0807a4c863398f4d9658ef729391ad36831ebe616f6fd9505741a93009748f24e849a737aeb4872f267ca94ffb2c6663d0006f22637c27eaa44dc597dfefc2235766f5f001bcfa8db334d88348ef0894732c8b8dede9b8e6801a0b28071f6a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "535f91dbcb5b924f6979f1bdb9dcd1d59fdcdaf2fba34db7ec68c0d5e334149931ab4dde9b5e711ba06adcba7b529d7dbda571cf53d7988bd31f6f9804799c8ab3e193b712bef52bbe4c2561bc27ae4a0f267cf7636eaf7afb11000e6cfd311ad5a3cbf746bba29cec9a83f73ca3db339a7d570c025e20e4416d2a4c1ac0eaf23812444f1ac0fb7cd96f62da9cdbb8febe3e77a04c09c3e64e48c0ae2868e93d42c2cfc97f1aadde8fae28bf942074cdb55e9a04d23090de87913e36407d98a93fa0785e2eff28d7fdc9f80a457bad3a780cc128439b36cf2ed021e357cfab5ab08da906e1b2337c42f18c01cab7754bb085f5857f2ccb19b055756ae7dac41d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "21d0dc541ca6f3766392be26516c1ff06add55fb6341641c884814511af5ad230d036ed7a547da9ea054cd509006f7fd11c39e97364b265d3606a06e44971cf80a1426ad76e699f68937be16cd256ccafb94ff31053d9e01fead1f71c838e05eec5c98fa91607bbb3fd17766dd56daabd826c7aec83ae56f1d60c74b06885aa8cd94ae1e105dc96d13b7927dd08f07daf784155fdaf54a42851c7873ad77b4b2508180cebbf75e0c30aeb82988a20301071f338846e8fd6981c11baa11626aefb15c2e83ea87f0b5353ed2a3fae1cd8a5c9e61a5d387aaa989093e1c58960c759d6699de374cef8ff56e42deb6517f552459a1fe84ea1a8e4da9562d3f567c69"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5a6b7dacbc1dc464698f2406e9991dcca63bae465a872f62bd9c0626e98386c3ecf7935cb1a6598fe167b61c1c0a8c0b3cbc3c1c911ed56b82bb443838174babb6f7ecead6afb94b371de70328143f367402a55e15e0f390964933e0553ba892bd03f0d42f88e1a67d47b7d9e218aaaa0caac46ad88e76a2f887439406feb886800788469a27c2b911fafec28a23a9a4781018fe491b1876fb514e6c73cbb166ea4c1f1d878b56d2029f277b3471557ca546db6ddfce9f367583c28d14491f82f31e50c11f078801317bc29f6bdd5ad6986e7c0a33d2944f2d4469243fae4d7e3bdbcf6a8b5a01bd5c094b1cc27d772d6f7e5bfd67b83269a60df11cef3b6b10"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "842978d43a61145541fd3421315fcef1e95ca32896bebd6dbaa0a0e856eb0c47d1ff7fb2eb981c26fb8f7d6f1964cdc05f856ec994517f1eee6165786eb12c44ddc60083eaaf02778400acba6702e54f891c7b5865bc0c735e5443043b4d6dd43f8c9554a524b808be58893e18762b68d893a970638d2de3e677ecf3b6c0889bb1816e910f243dd1c4978ae2cb1aac745d06b2a8add4b6f18b71e016ffdd930c4d5490257f9d0e9969900e1b49796f3e3fb3a110b0fe1a00236191d34dcb5b7c2c75a042f9a50449dc403403af09cda51926d8f32875c8c0e5903700e41c7f93a585f6a6336fe48174d1939e029f6bc30800c269fbf85997424bd2624e5c76ca"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5b85cd70c97ddf46244456e8d4f303239b7e401674fd96f96bfb8e28271abeff96f07776090731acddba70fb758571e6d3b015bb20d5e88981a9b9940dcf1d77a4a61954b56a86c22870c8ed4de7d6d991d3421c08179c03cb4d2625f2255491223c66fcf14635a97b8734c4f823adf99d7e04fe44c2206bad08c82868a25685cba38e275559fc1a8fb9f81673210ff766131e05bb727cdf45a39e1e4352f29dfd9f49ef21528a202da5f2c9ca4abf5a2041dfba41843109c22d89d6295229aeb9cd0a4352c5cd8694389e8d43dd6eee8258e57f085e9f0d39c0ba17a35b0bc036c3d568aa901f1b6a3597c43f00d330a92a39cbc4eadcb73e5e9f39b3762496"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "17116ceb9e397e3070704a060eac2b5dba73e325e5841e13209d2c3e836a081839a153d3afa6b336f9c077d9c6f4ce7e1ba77a91241e41a836d12783239d6bdbc12b1c6cc3a0959fad86d1528ecd4f18ac95b2aa0bca0bd1d7473694ce57e72a30b93088541002b92592165d516cb2797f34f686276a80880f18a24fe18204dbac867c646ab6c8b59e007da8ca119b8a0a7fffb127e7b017dafe6d21aeb112219920ca14ff16bf5a88550a7261e20cce9626191c817991d99b671f60ca8e9466868d58e3588be2254f2a1a69b810987eb27231ff5a0046ed4215433c9d8631375d02db3774f3429de73480a16af9819bf8403cd5794292aaa2fa4ae0a28c8092"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "53394fe68d3b43c6037d8bc922be22587d2ef728300b3ec7bd0da9fcb8e7f6a3b68e849a18a7720a9ecb2d93b84f913955ee7be59bfbb9f5981844ce107052a1348533ac30cd421c548f2479b978404b984867f48436256db3de8cc7f76912a796418745d42cfa6aecf5e137431eac95c956f543ac092ee53d439a249fb439b2e1e629d86ceb8139b1229355e203ed3d887a340a97748ab9b7884cca8e7a2ca99ebc7bf0d365456e2203d0b983674ebb87a8d9adde73595790e7aca88100b13fe3355d43322d84e5c41cc50824878c8418562a4bed7a0cb65f9e3c6751fb3b7fc79807c78bf57b0ed12a9341be7f5f39823d02f7a3bef0f86fb1a57569760dc9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c0dbf6f41b307c2eb228f72ab5f763323cc30ac5c3a5f027172e735160627afbe1b5e05dddef7f1cb0bd145d16d128d1a35c03803a01bb2e12f05ee21d05089b9b7070fcfe107194088ce841725433d1b59f3501796930ae4cfa3c20c9176927ce3223dd434f8dc2be9bf706020583f58e73c25d7008783bb30a26fb273efce258e802c509dd319938fef1e5f6a951649a3f461b99488dd3acf45c254eef2ce742d176a58179f720a6578f5101d89f74026bfe2710d150275cbc3b5087e63dbf37c0e7692d18fb53f5b62ab67f51eddff22bbc62dfb864a58047b0d5b83a94c44b1c0aec94f8c0e32b00f3367e505a5390a3d3dd40237ff6f148c6974bba31a6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8300a625836213ab8267dd9b2d5a785bdcfc56c56af0d97d648c2ac1e40855581daf13af70ad1f37111e72faf7bdedd1083cbf05de550ee7f43aba0869d254a0c3a6a2ce2d2a801a9170aaaf452b7e5ededbd685f6cf2c52f3f5842a737d56fc9ee99c4ee9d0c3199957ab9a7a584792c9fc22173744b3eb7076a556505751d6e08414b5e7f4b8779ce8d5a2a30d58960cd94c051c0ef6716d0697fff2d9fc79e362b9c03a2f6c07d27024a2a61424a80c331da1fc321b42834759b5de5dc280248f02d80e85704e754fe29ddf0b680672ee27a65accb8233db3775a81eb1a6126d9ee657d74c878be876f6983521a13310ed3035d8069186c2824dfd8b7623d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "be0398b3e6d268582b4de2a05342d5c72131beae600bdab1f3f13d1e21b42d0b4b60d89589bed32dc00b230102f553df95b2960e451f1a240206330d0eaa69c11d50363bfaf360312aad5d3e9356733201ebc3a69a5ae731e20426263591fad1cfe31e0e87d2fb4027de3c57fe32b15c275b9c8f7ec166ae688d625674dd4efc8b5931a41bbb922e2ef1bf7dd9bbea8e98f1556f8aeb99baf2fb848e5e1fefdbbf73d61013171f46ec4f09849d7e7a2388f7ec05491556eba3a3df18edcc9a8db46e10b13593fe37beaf1646138da87e61a98b02b33297cc0f4d7a91d6ecbac28a159d410af25a8b8e653a093a45c3ed19e617cda1709e8b1854cc1028cf886e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6bab815040a7ba6cc82af2d5449931628126eaacedbafbd28673003fe9f5bfb2b53de6700081477f769d9e5456b109250c9409ef998e334e44e132a88efd33d41c8395fa0ebe58c871b289bbf20391db3919f2b51189b2d51f900829df95f5543bdc62be8f94272ccb620a841a4ee4373212b853cdf1d079ee5256c188d3fa17f91d651ebd522b60b5f3eaeb97b302a70ed9cdd05bf1212f9ceafaae5309303e16f18c4477badc580383c13a2333910f6665fd08dca1597f216096614b2b7956142735fa800f5d74a422cb4f568ad9182e0b96e49614e129679d46b387825820017faa81087568e87ef13c89474420c613bb071b5c295ffb9487805d147c7cea"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "87007220bbef1a21ab37ea2b757caa112233a61688a0c0ef1d454b86843c434a98f43f451d6eba7da2e8a82e52a93d44dc82d2a0734c69a1e9a77265fe9315984ea2971e729abafe4f7adf4b0bbc750fa4f59fdefa59339bc838d5f6cb9556aa4498f8e596c2d50516fb540bb4ba98b2d04ad3803eddf55767ac7b121b909c9d435d49dc6ed03a9ea0a16d251e63459be47056e2341c239ad4f532fbf4cff50ad3029da8962ff09b4c5e47ae29c28692a53d492361af254ff86e99468e53887708ff9f805894896ede5f7d04530c0eaf6a2159d390a63ee154062789215c160895cc9b8c4a6afcd31b1d474b51bbf157f95e9f2be6675844cd3ac9c4acfd40e1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "185d46fd6c9c3728852a39c11a39b1e8117da5d2be36ee12d7f87c262983690189775eba623251e1d28304bdd7e94d7e9bac6114e4969ad2ccc3fc45b94cdc5904bf3f1aa62cfd8685b2a7b49aeeab673ca2de7b73dce357fa38e1d6c7bfe79329ba7f579d205b4f3c29559baac344adb2db1d5f90ceb542943740901193997c31dc1c5101fdc354b47d8ad37540bc1058ce57a8afb76cac731e03903ebe880ebff1c299d61ca2d3d48204e4c37cce0d80b7458fcf552ceb225e2bdc55c58b3497339ce1662e7064fc59c342d0ca6e6798cfc7b6457e7284ecb5684ef9b68ebc257532a8da54cc830aca53d091fa60d9e1af166aac5da8bc56b79eb9f8433020"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1e28082a4d00e25231308b793dbdec873d93340a3e85bf0b1af485c4be16514322761d6e80bd848a97d394e76b647b79bf25b23c44cc208650b7877435498cb4e7494145fcb43506e58f15b83fd2a25b3b93232c1f9cfb748b8f83cc961de3fb3dd2856a36d63af7ea488272ebc0174982a7e1f1873ff86bb219dd87e25509f11e47b1cfebb895d9c6745354dbaeb8c5842377b1e9326c28a489285fadac25912f9fd971a8ab4b4bbeb07364dfd998f774633269b516f889633d49351f05008766dd0556aeac57987f3b18db2ca056042068f1ea4fa87bd90fb06c6331ede38ed6ac3c77c3431e30f4c3b977c0e3ef635fe59b0d884495c95d2342eedb3d2266"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1dc7a0aa238280e0fc150a9177a3e4ea9579d6383991210c524db4c07871edc5b89d3c8aa45a27351581366d887bf1060393a1fe62870938805e97bf4aa055199fcccab3523131469ddfc4e7436844fdfe3c2421f1c2e4853d891edeafdcdec7b3e27b71b41e1b055893fa40624dee585898b194942ada5a143bdf2a8d04fe06c449e21093c8be5986e3409c9730b0630c4f8d2b759f50f92be0a13876f0be20e8132f2134e221b9abc03cbca36b3a47cc865bb24806fcbf9b3c862f35610e240634bf97c28b459978f7da007d29e0159fc1f3435a8c4c5c232d4382c9d2d16e168eaf10e1cf0db41fff58807c979f5102925aa50dd27567272303bb4cc8e70a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04784d6cfdd749438e88a2e61defac5f50002bb0607ec2b696e94c2d9a012e12a8a6de60a08fba0bf4e372416cea84a8e93fee36276eced5fff257747e3a535608b446cc716887d6ab64859ada40222b86dbac347e5528e65b70a2287319c57addee766427ecb491113014389409214e87029cf5a219108dda4f1cec11637c7290d3096267ef7a5c433f93cfae6b54d4af4da4568f4d88775da1bd94f93ffbddf19e0cfaaf2e200b71c68df04188678ec392fa718d89497feda1342a2100cc8dc7c9a616981e2447b0235241bcb48c0d384dd6e6c4f24f3a1e2754e7ef8348160ae27ae207c72c74866023c35685e1566a4df12d92fd5e7b44188f56e3c00f9f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "65acbb86ca80e6a03047a2ced4c4a461835bdeb42b27845fcef96711bc0e7d3d3b8ee95a87dffa2287132e01d9ad7e07c230fd6d2c1871aa7f113c42174dcfc2a78f2442355f0f10e68749b0ea097a6158795ca0b236f9c73b0b1af7de9be110b244bf8552105f35c761dad993323bb33a03b89ff26c312042073f1eff9807791449ec52a50a8799d0604fd35ea1d10f316843c1ca780cfd4af1b695daa0282d6dc743331d239a087f725fa67980c7ba1515326cb82faa07711df1675c9deb9960955bdde07c8e1f57884cf71ab4bed2b1080be4f4558c3f5484c578530695bbb2ac3405804aa7b5df4a301713c18d4db2c1f9378d32bd5a94a0cca2ceb4518a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "735758c0d252c3d7eb0d5f7d9b1fce3f3bfaac9c27ab9c64d9dbe53d5a20354a1bab7d7b1da1818852f9d8f3fd24afbd7fd94709672106d7b389c1c07f7347b025e49ed058406bc4e0cbdaca5f550e57f4ea07cf924c371ad89dd72a4b5bbfe95e172436b5ddf10b564662a36c1762a88cf94cc164ec65b538ff8c8d527dbb09aa2ab60972856f1b4fbba5fbe4d82ba53cc8450feac18a276938a3d175095cb7bb923589f54e721b836cec671f7672548392196e1b907afa5fa22f8817d628c922cc1de6c9ff2dbaf691bcc7a53b30d5b39ca8acdbebe6992aff3c28ebc00bb6a91d3714e6cacd42d99653cb9eb3f148a44fd2cbaab35336776e73657b756955"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "409aa4fae8fe1e807391b23ac3a34f9b83554a4765526b3e508bd0d51c054ea3542e6f7853c74ca5ba675833b7b7ac1611e3f4b6d5a88c8b045d45690eb7713d491bb1961be5f7a788c602fcaa558aae928a3afeec262d54cabcafb77ff9cbd7ebda3e0d8af1bfd2ea6a441b99306601a7f456f50a693e0c2489470277572051c0d443b34126cd8fb46e53fceed29101a82b5c0de4efb4dd48cc45bd383c6c208903ab4640de5e6ae7d2c7ec80590d979150775c167e7f2399c9df892c929d8c71c8f084338fac7798742cde063c51926dacd683c2435e3d6c75967b732d2040d89ec3903da1ca5a057bc2987a0cfabdea681a6cbb564b96f320170d9885220e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "697ba35bc32c2ed66e4231a7c98a947b99b67484bbc3eccdbdbdfe8c926b38c484a216bf12250a425004ddb4cbbc1e47112dbec6393bf5d19ee6a9d46cdd618cec2ac8ef12518c6147e524910e8b0c53026b44359f003aaafef681b0ac4137618c3e571ff247b67daf347058fd7d3c145c8e70f7bb5018ace902923dfb002b08922f0584f120f39d94e7f132ca30787b5663c40fcfc93fc1920496f80a4f47b37f0e668cc7a6ddf39ce502badfbebdf5db6dafff8c8abddfdb272eeef478c09a70f4c286c127832d98044e549e20901c968e3f327cef80ce581487438e76ed86d384985137f081ba7995fab6ae8bf9a8efdc8a08f0fc19dba8882ae716472a03"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d71198021ef4a0c0ed77cda6f1e7989f023f62fefd5ba81c70d31e1a6a1c0301e4004c2ced7acd9e98938b7faa1d20cdb12b9cf6ac59c9501d8f733b3bc543669440e74cf63be3d41d8b377c2a222cf1ba40cae4c24fec5033bf2ab6860d9d0312413ea8a3446e6040c6166c06ff5bd1070b5cc5f8693cbcf90c1e7ffe562240885ca18c181c86cad85971c743b1f70a4882e0cfef08ecf8a3dee55273bb06bec7dc19263d13a3ac887cbb27510d4e45cc4f183ceec9117f4b0c7ad4af6a89fd9e85bae9da3474d0be8fc42dc9fc1e7a6b98ca1864037d76adde226ff72a609495ab76c2242aa2391b21a3e8e3164e98ab6f1adaa5fb3848eeb687472699508"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aec1eca91968d08b4bf15b9c5fddd9e7a6a20be74486502380faade04d84d9a5916a6c0ef2dccfd5ac7397e76a301096732584e8442f20ae80627588961cdf97e344e131d79e6894be6fd51b72122bc2654d00f943683a8db630d35c6874ea56f908eea64902f18c0a548905b3c13114e3526f3d6ed39061724c8e9df498545ac7f455c37d2e05beecd47c15181161873925049bfb4a671e4d1901a75099c7edd6499268229353073a598174fc937f856fe85f950e9059496348d0a1d9f98aa94208d66ff3f58792ab0afe27075b241a636f1b5835f4a4b330c6f9e032a736119a1d8feb99f6c22f3490a82a65710abc3767e81ad70a230ac4b1db9a327ede40"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "60899366735cff786b22572d67c50af5f644bcdfd50c559d989018efb91cc888398ce3b556d8ed134627827e7af0ffd5106795ddf96f988e581d8498ac2c2ac9ac5195d7c15bca548ccaa070924c6bc8de828fc08f5e74b8eb7cf94477310436b9d139e54e97a9764d0750182867e00f0f9e5b4b6122137bbb65271bda16add4bfb9bddb3d8ebc063296d9ca073c377e56993cd5f3f1bf229e0f40ad3efee00fde0a9ef1604f01a24c20d67fee04fe8848cd245a5b0e69d619dffea08fe1afb6cf075c2594d00cc6a21353656b1aed51af47159ef88b61891842a6eed6c3d294c1d226009d457e4c54108f8ebf4305d0dcacb07e60b51976c35d9dd5aa10b9a1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bfa56d1f9db006144a2714fd66a633ac3d27e7033ad9d59967f816ee45277095689203f3b257c8fb64b3b1d16b6e424f1347076b6009ae56ae193075b82d5ece6e643f0e645b1675fa0b7998c6f5414511d2acedfcecd0324543f92a462b9f9f79223931e7ead2c2915a1dcccafaccbd374669caf1e2f50d45aa986e4511674fa9a5bebeac29760bb055acff67026ba83a977aee4d6bcc7b247a76bb77a345ceb97996750b77fcf979adcffb71e734c461adf3e23b708591f4987d59ca8983e0d10ff5a78199a02f02ee171c26b373160efbb51a23451bd326a7a6dcb66e4d9bd02ad30acb4719478b0908831d5cdf4012efe94aa8d87290f9e94d430e9095f0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7859342f4b0977d970fd2c30ca94e898545f8dc398e37949a58146a203d191a6124cc2e0de5d3311587b4a54a83e5855486aeebe867584d7fe2d6b559f5bf2bdcf990062c2f04db9705f06fec4a3aa3db300cf080d1493a60c63df1ffb98e1c82440b8143b816244403c7d806bec0481264219fa263c62852ad9315db8f03b255e7e329caa6288beaf7a34ce3273ff39e8c8ba449a979253b60e48b66124cce678112cdb13d28d805c6b3a5fe55cab2df194287fc060442fade432473aaf96fa331fd16544c0fb801c30f63b0864ccf559432f98d1fe42215c050bc71616145b1fbb33a4842bd3222bad53bfba487101147c3119071513a49ba753c8b2307fd4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a5521057430948701805207688507441e3ee85b3e8ef9334922c8ae9a9a8485f95f5747778b2f7db8ed3df6655e57b03022bc1244d04961d6ee57e62c762040b581bacefe7e5beee3fd1613a142baa6ad106e720206cb119c1884f41b90e3acca402b18deb5593c3f2d9d841e23b2f9443c13d450463b4e272a08fded7f00d26029f7c0478af557d41e7285c48d9a0ae3719a95a14bf8b9e25351c7513a5ddd86a2e6c124a54be07f29660bb09da8fa8e484c0c930833fd727b429ddd2b8a6e1626d05f6265bd88eb88e9783123a7720068f590d566d16bf19b474d58ab5ca9f718eb5d432d11f6c65e9325a2378c6588c5c6ee89edf7ac708c93bb9b04a1f80"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9c0eb700b26efe50ee6aafb76f0a996890ea71533c374286ded0c21a567afc5bb212e81cf80cfd6f2d26a3b27fd7f17a4c976f093b240fac274a2a22969d119ebcb26f81ae0bf5641dcef96510757de9b0e7b02db74efc1ae55c55e8135320156ee9152dd05c922066aa895319708bda1c7a9db1890ef7cdfe7de3925f4c9852a8679f4d71714cabf8fe834ff442794ba96c2f1df73641eef076b172ea846d7649e9a42bded0a7da4647e07ed4ad8c1f2d7858f416fdba4d63b7ad80241d8fd60012b3a77e7e0a759091274d350f688c8a73334a6c0f2cece789042cbc16585cc84150278bc3465b3df701533674d272c33d06ac852cc4ce6648e35cfe60da60"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4ca9a8f3f2a187234daaa149e463d1e27d78edb054e999ed19e63024e41e267a51bafc7c863b4f2802b09f1aa0dd3d6a42fb0306ac38fedfa3cc642eebb6f4748e55ab41d86e3fdc392b1a9f9b01c55215543b39e96d8603d80e223700521bf4b3030fe4f2a53dbace1d668d99cc4e57098732a05b99dfdd3326a218a11c195af7f09b829ef806ef71f3b139d1c2ab00d488cdc75576e7ccf75fad3ce9724495aca667dc41df1efa59974cb52b040fe7d578c7a4f2e71384ae347fd7dbc6f6076a86797198e989fc87878ce926fa39d23175de35b1d09862a62512fb58eacc669e11fee9aa0c08f351f4da30170a6e3bb47929edcb81ac0132bc6ca77b3f09f8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "89c5da365d5d2c22a961187ac62c26bd5b88cccebe46285c654dfc31f44b7268f38d9e2902424b09f35b7094a39ee937ab6140895acd30e63bb927f3a0e017e68a2fde529af3e1a2359ad2ca5df7c94e9e91843160922ecac8ba64d38ba0fbeed8e8fc7f2ff86888e0657805fdab834a6cef5920ff70929d66676eba288233427ab5ce9e44462e03f71225d9ba2e1b4898e56fb7949e6f788fc0b76c0b738366ebd32c58731e8d551f8f52b433bf45d6fd668548e59c41943684203697bfc0cf2c53274836aff5f346eb7ca753b3856ab4d9128efb0db77ca05274b393579ba78624fb356cb3360ea05bd5f9f9d642b74211f258fed6bb940577dddb2d807eee"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "084fc83861c80ca0f3c7d5f063916b2de3a1b3f93d11a5289ceb608ed3246bdf1fd79b7bbe22bf40ca7462d6689f1f50a53c0fff60b4899cbf86825f8e834171aad934a06687787c7c833cb4c6a2172002445389583edee72ba4d31a6c5cd09b1bcc18c3358faf548369af125a915d47affcfcd30f934b739a62ce37ee0060e568211ac255ed9481f6a3a871812ca2e86417b807e6d352b0aa0ca078c75319a64bdf4323a34f379dc2699201b1d6ab1599ad02c2e103499dd7cdfe0545716e73e400ea298005481288d384b76f1bff69dab1486921622fcabf0733c0bb392c3a9876d168e0a0ed453d0e020bcdc0432aa00ebcdab36538d616d93cd01ab3a63e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "471eccd41ca3c301cc79447afec99925611ea09e5701fbba0ea0458be7d77b35e798452fd19865903b33e2121d4f21cbd0a2df7e2d10e8d20ddad3b9f0194cdac071a3c4f4f879ccd88fd03d761d4cf0770abeecc946a3dcac65e1f4152b833d4a43b65777bb146099800ae324479d98f623c5321cf9d0aca42ea93cd9df23f5bf27cc128f20ff41d9a5f4048357397ea45463f04ee665bf4e10630a006f57833ddae1b3704a6f50f5e2766b3f0c700c21160b24e0666c54eb3661f13cad3fac33b0d63860262e6759632204f0f87a3e1e039e38c15359c99cf89942cea589d78fd3710a83b5e9ab09f1630fd7f9d7a8857efd763d361e158bed5cc85b3776e6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba749"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba7490000"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba748"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2c4a860236d3c9096a076d6ba5107e0f7bd81e1ba916f7375724bd2b0b0b63956813715a3457ab0458b71fb35a45b27f9ef7ac3e579dea45dfbfd07819ed6b7021aa5336c58442aadd96ca9ee9d32473e9d9278562b4d10258ade6a98fb1c7cfdc3b3716ef5dec58cf73b359f389599b4b5865a9863519eb001c324387da755450db341309360e3807c0565b8e2c44fbd5e6e8d04d006d7ee768b8e8436082a90fa0e837f32f46087ab4a0d9be28aa7da1794ceb0172a7f50ed20f6df641efbcbfd2aac89775c761a7310093c671c977fa18b0d6e01fb25f7a432b42c65359784c689205719c1cf6e3a65dae2da434c326dde81bb6ffffbdbf6de5c16bba74a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b6e6752a6f99a6dbc43817850a139bf61d3b983821b022758da22187af9cc02a33cc4e7b59586fa829582374031a34d8d7f3ead4d9f7e42d3e50ffa74ea085b4cd884bf637039152d05de1fb6611c66b26bb4f4543eb4680dba24249aa0e31ba17b6fb4a26994b85bb1b79bd77c59ed18bcd4d4da04e45655c0d981af616a8ef5c193135a58c9a61857e1fd4c6afa60b23d214f58a968d31486c57d483dfcf7a59d49039bca4d0a7b3469eb47cb2db77dd9fcaec9d906bd206fad6533efe9b06a39e61dc1e901fe552fa086fde96f03e58cf3d6b65bf1c4eb9a8b48b218189ff4b0008c99aed899a787cc0d4ad447093db347161ce79d1de880d653b1380b4ff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "58c3e57605deefef20c57f260b790664b8b215b3dc82d33177b8054e5a990df72fb27c3e7554f76ca5e42ee8b2eee410a6a6c8eea3634a527232d6c8098056bdbdf90feab1d123e22f8fea82f42f9b4c8d65f5febd38fb8357b295586d63c3fe689f89695638679ec3807c76e097a76be05720320a525c3911602704382854c0222e2a51384a08b98df7eed637a5dfcbb8c49156848cfa4b8b36f00562f4ceb5d7e7c6237d9d0c1dcffe3847605d1607c1665e956666b4a28df99fd7342336ba119556c6c7b162208f160ce950e7ff41c6452bedcfd5eede9bd34da77749b8df8c6925e24ebb04175611f0027253e7ceb028c6fcc82d87fbee1e2017ea43b6a3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8ddfa621e73504de33ee75ca1498cd7daa0fa625b7dea0756392f2421cc84ce10f0032632bd7d2b74c60d55fd2278bb86185af3c187953ebf6415f643974e53d34d8cfafecafd20dc4767001fccbd197a38222dcb1dba53ac8fea54427bbfc25a858e52b1b2f8a778b1034318c5f76d0f81b91267a4e37ee7014e50753956740c33796f8161fa72899c00643c010314440f026bed963bc3b5362124f2e31221151dd6273a28b21c3955ef6bfbe48eeca51f454173d01f7d4dded623fd2ee69442affbad43a648c82c99e8bd05affcd805814dc1e1f96f301421ed9ef6a3ec2c6bd6af61d5cdbae31acd48218badc1da7d14c07f018edaec3537d4462999550ef"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "53385d184121d3b7cb41d86ae31d9945bf8057e126c847b69d2799eaffc133877a51cf8196ed85e3d22e37c1f7df932f796753798abe3d3b08b03b5574ea201eb6caab2dd1a6e112fc75c92285243bc3ffc7bb20e8b1bd872c55c6f1e4935582b2653cfb7e1cd343429d693589b516c8381b324e27d16ea1569930295fbcd94c8a75f2d0d380006f0ba9702b2089394d678065540de715c7219dc16897201d61cc0ddeb2148ae691e92348c91e9c45118ce9a3d5d10edbc2081918e879c7234be129b480d5c46b5490eaef51d3e38403a36baa961d4d0e4dc9a045342488abaad93666a41bbf90039ab189b6b9cdabdd00e11fe0bdc9d52cfff469aba22080a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })
            }

            n = "f2ed0e93228f37c2ce1c215e00cce4ef00e2c08a004a39c4170dc73e5fbd9b91e7c55e596579ec9c60b9bd341e83029b1934e6493eb60099b6cfbb9804d4179c983099e19102bba49eaa28fa505efacc5a9d5374499c0c5775778317ed370de1919f38aff22d5aee8c8af36a86d036029e761f243dff3c205a11e9bce9ac1d6baf81e79ad4146b119abb13903f8562e8f3e6a918f48223465bc93d5e7d5abe3d08503ec42998fe087a1f935d1b8673c495f005dfa7453daf977e1608a8c276da2a4cd0567e4af4d18cba05fdbedcde74493ccabd9060c27d35a02f35c760b12a4deae1359f649f273fa408626fb789c916434a642d528f41db868ff93b7f889f"_hex;
            e = "03"_hex;
            {
                auto m = "38343432"_hex;
                auto s = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e7a1269086f0bbc0778ded8d7108ff4edcc2313425088117b2d5c53e9d9971950a5fe8b2b67d2bcd1be74f6b557a3f90650a96d7e4dbd63c05b94f73337eea682417c058d66ce523e4461065ac8ba990c4ecd04932"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_3072_sha512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_3072_sha512_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d5245"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "ebf3c64e4c19fcb0fd920e65554a552cc1e652312c2e0e51cdb3b92c94b2b41ee201f61f434a6aa4703e87416388f4661c04fdc2e459e199af3ea208c61b99d746f4b00d82105caf4f0196f1305e806bc13b4c6e6bf581962862dcb0eb15a0ffcb0fe6b36502320011b540799e1432baf2a56a428fad64811afb57d210d859a1201ec057dd8d2a68784b48dd07357162f21e4c82f8d5e385b1f72834dd4c0d85ffd333410f08ff28fdb7365e408a60af177c80298726940bf4c40efcddceee3945b1d921b9d04080dfb12d3ae61863ad2e3e302370f5a8858a1213dfcd500269ebef76f4ebf0982a751d8ade1aeed95f41d4560084711362774b11b6240c0ba6ee4ca634ba8298f6e63ef560a39047481b9eaa546178e69e4daf5651c66c6235ba97c231241c63ad16efe59b7b5505d9c3f1818368b9462cda71849e431648be9757620c15f99ca78f4e250afc41ffdcdc52693a1fd43506274c431caf34a4d37321f5ccf04971a25c5010b9ada07596bf9a20bf307db9d5e86146226081b25f"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "b9bb1751f2336ef5126508541b949d40f1719bd23c2f0fed64a7b73ebe1819377e6e4262f8440a3a3cd456f5eec0b1c0956bf6989add2c3d1c7ba4acf7a617d198179dd974051fa7a14ecd8093ad572d7e233daa2a9a46fe59bcf7e01c6ad8d68c0afa89a58247ce257566edcedd799173e2babadac15405e2812ad12ad900ad997035966a05a02988e11133c21e111a8e06d7ce509de1e0c11de55379482cfa072348fb41c05083529c2db86aebee92095e7450a75d97fce7b3103ef1f8598459651dcb9b6e90f299c9efc95d7ced2f6e91526ab3788238e2b5e109d3ea984189ea13939d58fd4ab896c76bca4f6a92fd3bc124dddfabef1f286583a1415d1fdb8c80de8e7583fd6d52836a22c3926f69723301904532b9fac2a37d0cedccd4b3d0ddf3550377191f813d4f92a5c126ae91e03fbffbcf59637ebbf1f30acba1dfcb0f93285381cec6da60bbcc62074075c71300f8424e0f964422dfac19d205251f227614bc13568f408284b6b53bebd7dc4adfb7e242953564763292d9c01a"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "54657374"_hex;
                s = "1cc02717a3321a83da62deb3ed0b9706cf7ca9fdf3674617fcdc3364a697825b910d54b891b5f8eba197049047cf0048ffba6425d47374ec24a84f1f7f04716b7ec54daccd04aff858e2e7c8830e4420b5f99df756018083abe46d3fbce2da6e8ce6c893fc11ce5967a5f367159f9ad38d957078dbfbd32e818a26b49ae00151350044d22b58a4a61a35fadef67e3f8247f407f026eb17b8dd4ab29d388bfb271a1ec606e141cef3fe57e2e55ae8b40fb076a06f5898362b695545124e9c185c50647cc5b83f09f406e780f626ec60462fb50caf8560aa72fbe174111142029b19f2d681f771a774afedfe2500fd8b1bdd437fc41709253ffdedc302f47afa774f5ad23777a57fe44067182f4b35a28923edc82255cce11d2fbe91acbce29289b4e0e8f5e99e906e6607637b05eab4028d85e91d060fc1fee052a09baeea759917b34855e09b8e5b67ad60f45851e991cf01dd528b100327961eefd0c29f1d1d8771bbf3bb1e7f048d9c2e1dc5e652e6ac4f6a2aef86245b83f611700bedd07a"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "a0de9c2df76523499c6c344173d944b8e02ee1520f90759fa3c27ce284091f80215a9a26c9fcebc125171da556bb732a0645cd64b05c7cbcd8c187d3995e3c86cd59468118e9278ecdb8e791badca8785e56f33478ba03eca721591930db01bc1a5da5e193b2dc9022e98948644a406138a4c7971ad8ade585a3d72e6c9de50320b9fca1ac0e054835005cd39c96400c491e1b706eca22ae2e9f1b844284226fdcdab1f2cc942a8280f7786e0f2cd069b9ae99f04aae424a6d24eb023e064513931b2e4f7629151af6bf83f4c5c58616960f080c6f96eeab07a87b6d7cef3fe6b071e49ed340b48867a5bea30dee332cb89e1a54d9e3a9a8bbb87179c6ad206fd48dab07104b1f887a02160b59f9ddac6d1f8801c1a8df507ec199e970e02058c749475b7636ba2def322160b11b21773fdf904cc665eb5eda887ecb6d9be245d3dbd85cde107d082cc6d8492a087166e23835a379ac69f5a996ad9032cc41e205078c5ec9c50f85c396822c057b25595a35471a2fc3bdd3f75eb8ecf2d1189d"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "4d657373616765"_hex;
                s = "ddad8eeace34f1eb1b0dd28db89ba710ee68aabb54b0a826c2d69355f63acf0f2f2e0dcb96f388d44d0940774d7d55fe81ba6a8a880aeee8ce842101c7e8837fbf2704971341d38bf3289dfc61a6b3b557588db93eef2789d3735000c8e2d830a32070626d079e710c943082a8bd1c0cfb64b2dd911eea76001f8e08cdc01cb072f027fbd9c72331b857d07c1c2f3090eca53accef8b3b015438942e8d2fd3406cbc54c7ec3797a163b13878881f7b4ef5ca45056e16e0c2a76c3d5108c6f0f48803d27eb4b0d55e90b19b6fe372dceaa61270b9efe2800bb259dbead955635ca44ff979bb054b5cdf86d4914ee553d7d5b1a49fb8e49f3f761224802858458f702aa4428964a32a45bed5738224517489f2be075f9ec7234a019005be922b8265bd78abdeb1d1633fe7e5aeb37b61d36b1a03a06847a812e50ed551853d3cdebffaba8b056b788a1bc452ebdb5a3f043a116e5a3d262c745fc15897ad4ad955595292a79eb85373d552d6079ad77e469f7d3a60330702125127b1ee770225cd"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "61"_hex;
                s = "2ecc537edc397ae5c3c789638204ba3393bff5cd9c1f0552db515a8258a311b6bdc88325f9072d2ae67bcf132a92c0b4d01ef0f2916349adc6d8f1b415c86bce6b5afcf4cf2d3137897d0f8a33063a0ff69965a5d2ef00dc3e010094ec8214c95c064313c8e90bd84e34c86b2e19b056539bdb3c83eec23722b3e380a53826bbb31cc97ebb8ca77cfd96d3e6a2da59baaace3883c652a92e79653941c5615bd30c77aa38ad74c49d36ceb9f76544835d57f0cd14999c2c0cf3debbee17a8aba6d777ebd9ffd44b09e093f1a894a8aee80301c3a5a59626a79e445254cb1df1174450bee22a7518afeeb15495d663af289dbb09216543bccd136abf2646bac573551cfd04e6a35b5cdf9729c8b14d34c06660a42b3ab365a42ffe470b69062d0f305c733c43844565b0b94d49d2019933de9686088d219d57b256170c137a21475d03f2a7e0783af11426fc6e64895fb92da117702e4487558e8bd21db82f263c4bdc64065c4f66d87c87889ec5aa9cee02c95d001b08636dc3420f817c228dc7"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "b9b492d4796fa2cb7066069a00e36aab8b8755f9dc8294401137efb3e2681c9b57930c0ba87b45c9d70e214979cca91a06562f710a2427660547006ead7b3e619cf4652131fd84999c5ff1c9a1cf057363b8ac62501bbfb1fae840cc963a95169c658add96c6c969d415c10bec5e2457a5c3fa4fe81e7de1afdec6f4e59e3fea185c7cd1bee4b8a42d2f22c7bad7d4933621a0cfacf0136abffc3ac54ea37c63af719425084cade944999aca3f43c7625d22af10149f39acef32ed7c92f781809aaa945b2f446a03e66150a524c7d88b7bec587ba7d6fe2db4ebb7a8c3bd46e7fa1cae291ff502acf33f003dfd1417fc60674501728e52490476d813f0079f56a9456909ccee3b76b30aca26fd4487527f4ee6283bdb2e72393d661ec0c35b2d1675f679f823fd28e044fed090721ba4c6be46da3eab26e5eb356d17d04fc3ac31425a6f6a50474e2725bd4dc30da74fd3767a122ced21671e47b1fb33bb7018349f7cbc916c6c7f4ca7334735a0e0ec18e01735107bd2ff02cd9508fa5832dd"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "7d550b35998d60a62393379e47dc02b1a4530bf60c892c4e559acf9b9a61208dd9ec054c865018aa2fcd11a88493b54935039d0fdf5371436da96ccc342bc1440afdc46eb7bfb6595303b013037537e695787324cf9593dc156881bd0dffe8d2d22d4e90c1bcc801c9bcf12cba9efb7979a293dc2ed17ef787515e2bac8011286c939c418234df353ff9a5e0617615acfd7bccf9aa31c6681950947df67690e36369c3c3bf6c466e9748da0582acc76bf15760e8ceead43b5c2e98d87eb502d5a823ca69702b6936cbe36295b5714fed51b35fad66c819cf1191b3708f398fbe8274f1ce219e8cc77690f30bb7643f9ea472811e6216253c58fbba5d19ab738d6fecad309999a4d814c19620c4ae998a5f0061fa616ec0ab96e3760dc5d3450ec376a1a0292899212828768bbec07a0e1ffdaf4d6e5fd1ef5a2e0567341b2fc0a4944fe8bca36369fdc0177885d5169747103418e2af807c4715d94c2bef45f5eefabe8980f90a11acc01ffe0453e1fed8a7986b07d8f6daae2fdf0cd266c587"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a31ac04a54a8b6ff7e56a0fd57b356d1f854de8e0f9001cb216b859819279bd80d8584bf603999215ba8debd1e9e93fba985427be8e2169924a3954a43b58521e0c79e7a858a77081439beda623bb7b96ea46176fdd040682da77916fbeb77290e7c93b2e8a1d3722587a70ba56b8de3b2e9599bea708568ed88d2f09d7b9d0ebf9be2345b81d9b343c7392701d35d1f3400f343763af8d9233e40228aaff22ace45920af56956e07cd010af64e01e1f8f63a9dcc3b7b205de730199fad3e3b2f139c556748d704876af986b98785fa5686d5d2410cdd95f1c80a8ab8e24c23f06d5c40ea5f2be6f980db62b6d9b22cf7aed0ec00125e1900e50db95269148f6165f563b8ccc0d35c9867412c21f627ed436769842662c856392d3d0daef99bc47ba8f2738b4ea9d068b20c249d43dc01a067aaa8c249d43e110ce40de060c7c68866639bdd3c6d7b7b635b7ba71b44b71e7f68651b203ee07b914d65a2165791cf2f6d5dcbeddef7bdd7f786f812d9c5515f846eed933248b4f40a00b7735fb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "693fb14d0d6089db3aae22e292e43627af0cbd67234983ddc1b077b4baaadc45bcf0ea0f36ffdaf970f99ec5ed8ae8a58b7e94db9028963e14c2f624bed16bf24bbc5aafd472915d643e690f6e981287ee7856fd0f14ace63a790676457ac09692bafca0014b2866c870227a976fff547812641a70993da32acb962a3ea050845dc533390175900c668a5f36ffd495ab7917b768c68407f4cfe1d20bedfaca38f9f609e74d9e432829da2487f957069dcc290da513d8a453cca27c8253bebba2653f82f676e663db0248af2a310b254b00219c5969f05d04fbdb9ea0cfbd746050ab25cd10de42a02a0ddf223d40e233c6a6597992576f2d105b72cfd77b2f319fe3525da8a8f084c305b14e090e3bea5c5eedac3360d366c47fe9cd60c6bdeba472d408a79031343bce42bb1ef5d6f4e0e63cb7ad0cd22e4270392ce711d7c8efbf0feb888c74793f2dd903e3ce894ec758d69644f654c5a75378b0e5c63a5f9ae05e0f4818e2aea7286416aff545c1048eb4d359ce1bcd0b26a28f55695b56"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0783d81e403f352d1140b99d6cbdf63f413a55ef9a64fe1fe019adfe807b5fa59a18e63d455e0f8fd61edbeccd392a01e09dedfe28600d1c7507b1d81bc814d1e835a95219cefaf7525fc0d03bf211bc99397bc8fcce685445263a3db61184a8e44edfe7ee48e2a7a5e3c8c7f28158a308db3fc35d822ef6cc00e8df43ab1b0a7ec2c92e3fb7fccf8f8b35e68ff6d31657aafd756782996785bee97d3ca5c37d22b44f8a1a44ed6afe5b80b9659336f3a39870b5de2385630f3fe7ce3c91bb269ecef7b3fa999a79518aa3a06fb626a5a1e48db98199c1c4d7a139497ed8e9682cdcf343dd03b4a5a056edda9e7101d2da5ed8d5b953e765bd6585cab5a27030a8c909ef69e61c0ffe9cefd2ffbc6f7cb26f64de674ec5f4395f7627adc72203fd6362c17bb1f262c430e502a258edf86076336499fa89efe7e1298c7c932b0893088430a30d7309282cc4a58c5ff05fa3f1dd664b00139c309831b8084e9f3065816844fc3074d7e8bbaa638dfc2fc0aaa74380a1282e65c7934be1cb7cdffe"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "162e2eb2457e28016b961ece8cd8aa9d4d2f4b06a9ab069cb79238f5870075de2a9755fadc5c78c28c82441c474718ee905a8d7700ff2601d7c56d7eb5a9d7019e92db6897c823925cfa75b5608c7a79e24af37abc09c89008be7b2ceb70170c6d1404a892d0804cf9abde53f9aedd13815459c3c6a1b37f7dbfee6e4b9e25143d9c64a6a817550337d0c74bb5cb6c7b5db2bbb770c67037729341cf25aa880b14d39d71e66cba9b62e1ff89c348eaf4efc79c0de4734171406295e346e9ce7562be7a5462834f1a00da1d4d54d7fd7fb12430b4096610fc96ff1bdfb88609d6a961338bae78991b05f2c80d2a131de5eb3477946d0d6f5f500a0fd93d57e0be3518b60e5688d8ba5b25c2343e894326129173b86dc315fa183a0d96845464f24cc020dfbc341f4623d6732ef699b3af9274fb504422bdbcb491c8cfc63f6cf6adbafd4f2bb671b92b6f4316ea456d9d87b8f3b2228e37b0f34f2d1ff70cfb0ed16d14ad3ab5e89985d4e30e51e4eafe69c0cf6ee5cd1ddae25b5585622a8b45"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b17c7e6b49469e75e489f9647112354316bf3ce3a58aa9ae41544f73c8e1e56c284667381eda58b3466d3ef16962a2619d718f93edab9aa12e5be05f73cbfd4d8e546bc936ff9043d5c048f93794d68c9f8d99805f85665797a27b84a3e97883e74ea14c180aa2e5c0785af69275d484e14dffb50a4ccee742e809a03da229e70ce529d0166439cad74ec6457016b92df8e53f8ed68cc71229a1e1732b15175aff54ee34de4e908e9b6f9e720417d1a619ba9c1ed70a55e4f5d9bd940532b2f58700f404cee86c8ad9c72ad7731b8c2a063efbdb96c7b35d641d5027d55e8cf6c317613373dc303cf84a469b54df3c2ecf5cc8d1bb3882dda48e41b9e5a3dae95ded93f230959c547ef59131fed18c269a0d5c2be16891071299cf1bf77573fde1535836cec1daaf7cbcc50c563d08a79725d66d3720ecbbe1db7edf85ed3c4a9160350fe94326e3f0440619df346e33aab6333c1e38b9f34139a26778d0b0e64b8c4746e5879fc56eaa4c4641171f79f4f3fa711b9b0548cffdbc39929b4ae3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "38f8952c63cb832a35b8808ca9255ab12fb5c27573f29d585cc30b94b050fc9e179f87821a2cf8d23f10d3ed6f2a8f461bd098eb5f6ab98923647f87594e2cec18a776af433cdf2b77dce0cd853651b50700c9812d2fec7a9760388f4c26da6bee3b768574644c4069775ce21e81446a9e7aa2c97865f4b953daf7acfaac13e75e079800bc5ffc94090ed6842960e03e95753be39e94dafbeea1745fa7a4fefe777ff5d278a8444c07e3c8526e80960f6e2146900ea86720fe35c881a61e3f23a32a6bbfbddf049084d9a6d1b32b9c2492161d1aec9479a8891c7b651d13e34e784e5a8d3cb2f5412d322689591a98b41ef9b010190e732a5ed0d28b695f6ab06870ebd23fee44845cc64d4ba39017047c7eadbc16a1e35788a9d2c2ff02b48badb7bc4605225b7b631913b19683b6f90e634582ed64c25bb6157f28102c4560945b6baa91dcc551b4a6bf2b5cd2adb8a0aa87e29c502b5b70bc4cce2e197479f9923c3ca35e5437c849d5264dc18cdd3f6bc7b88fd9182bed11f0cba3cc68b5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b24733b208d83a92b4a7c6d64209fa2ac1dbf615954eb99704ba9b6eed2a545aad13253234d88e0afa81277321a8662a1c9c59a7ff932c6b2889e44ee47e25e730427665a98f02b8897b24ee3036febef294a8ba02ce60b9fcd6aeb592f32daa1a79afe2a48f5097971f3a72ed3680433d93da0e3f19aa7d37082880b0c3745b86be89d184162287bb6354158ced89bbef14faac68649d995a4ba8576266bf5464106a82cafc07e4ae4dfb4ff3f6f0e8c713d3fb73673e75deb3fd04098c7c939f91594e45323432f30029122afd4e812475f69ec05248d6e2deec18e7dd02c7e9cf89cfdfca8b3412410b1e271023725272ef0d9fc72f35a94a484bdb0c1167c282dfda53a86b72922506d51adfab81df9dd257787aa5fb6033bd7fe61a577a7abe5b48174a3b2f7bf276ad6a6735593440867739851c91bb30fb2f6d279f35aced179d231dd9c5267cffd6b184bcd710a365b29957eb98aa81f10db84deb3448e2bd8ab50dcab06fdb3a2b1290eac0e60dbc4114243540585ec78473fe9297"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a336c6c475b3ddb4f9e58bda547d867c25b155b19d14746f8fe9b22cafabc05aca001d019352e8e96cb0afbadb7bf16998e5052b834a0045e861f646fcfc07347079822e64dfd5e72c2f996f0d5ae5d31596b93c77fee310b046d9c461ae9637ca21020e48c6745feb9b7a8f7e98e47be68214405b55d81d190d0bcdce483b2915544108bc8daaac9563483399a69c19c644d4cc36be4333fa9e9221f17b0ebd2885e57e84d31bd615e438aaa7a1742f0d6f3779c55ea3dedce1940e819cc140cf887edde8506b4c919edf3fb6505293921889c3d6704ca6aef24e620d87d6073c0e9f8a8c43f98fbba9e84fc9c445bff081acf6f6559dc0a49c9acd49c1adeb11ac31e38fe8319389541144dabfff498addb55d974082988503adc422d78f3e6c1764baf174c451eccb13e0e2f9791512e9a949478109176671f56cb3b8b841fb55207bdb7dfee0b7d76ae95a76de6f6ba4e953ad0431bbd23311ef17da7f4272a7ec4a34c08501d01965c4ab325420f6464dfdf471fba6f59ee78bedc28524"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84d3cf49f14eb7e6d625614743859b9c1ef5a79c23d3c16e25c492c85df8c3d8f5ed0a6e548c042a71135bfac1d209cf434700e8a6247f8d9bd3f1527ae63a5b797880edd6b3112928b9878a890cb1d0aec6e84cd5da2d3191d590a57a82577c8db2cc51e8eff17c64a6f445ba202c9f13af6b20d5974c88f88bcac534ee80eae451d72bac360511ed77d9a09952937129790dbaebcc92014bde155de59c13ce95784ccec3b4e9ff0a08281fd30f5180f62667f3a2575e67550281c2f3ee42af8b9cd94721713cc95841311f81cfd5d50883d063425b8a307f8bab6bc19441eb5eb256b6cee8126586707eec75465bf8fed4bf010f00633f2d2a216af178f3439fe0857921a92a642b83c7edf45b8b7f0e280cb362fef1e6b77144465aa06968971861a03c8f6e6b0cc77f713a1417ee76934d441784fe9df0e65aa5f439a0cf9889c9366a213fa2f9302d8a70b4d9cf7707687cd2214d720eddf7a61eb0edbe679df5fdef79f2a8df50e90f26be5e156ccad330a3f81b998df0b610383fce24"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f3d8e162aa3662eb0648048acd70eada84b12a7d15476e58e47f7720bca89a0f467f7bc2c6cfb17273d0ee66c82c2e82c7cb184d073af6a601cfa7c8df3c7eff348fd32973f8b3502d5257639016ebb24cb6011deb8ed816ffc44f262f03799b122a0c3bd7d69df064a34b166d7f138982fcb4bc2332384207117986d92bae3a5afafb0836a892a6c9403cf7054bf02a82851b35768ea77498b4d12a6e85018aa59623644e18fd9ebb4cf3490e8577994836a84ce6bca85ed3fce977e0fdac1eedc81e4aef60b9de47900b9dfd1b67a0c89b0be88ae67a5307576ff84a7f99f3f030e2133a51bf7af75142f59330e2492973373e64f34a05ba7f2262ebb91f144a89cd82906358e5a8bfdb5e7da91c2ca95d0e45cd2bca9912b27af36f45d4cc5535b0aa95e75d330cb01bcb01e23438d0bcc4207a2a7fbed4d762d6a81822993bdb42baab84a3b9cdec3dec31729c831cc28dec111605924ae0ce6d6c16ea9a605171a82cb11102bcab108229271e2167ba6ae715500038d1186204ae2fe685"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bbb3dba33bbc56a859bfe0cab3ef7ee4fd1b9b8196f5bf02f55c3fa70ab8eca32d5e2d95e3166d5137b7136d21ee17fe5d790b37f51b030521fba37b0e1aaaf5bffd62db0421bc82798e58f6b94046519adbe859675acdc9efd050792a3ececaccc3dbd774a9cf426c5e58527021cbe8212c9158baf67a8d3ca0361364d0fd486f0402e8b5a94894b3af023ecc6b9c0ec8c9b717736dab8ae1da1c1913df84b6a5b7e6019e3e53efba2bead981e49316f671816b7222deeb8f3f4875cca353351d810f271d3c2a6663e34a8ee083d80a861338e22ff97e542878760ec0fcb8dbb390834409754b95f902210be72d7104abbe1a87979c0460dcccd2cfa5a13470855ead59d0d7554eb6b5a12611c5c1ec9db3ec7d3dd795acce3a2c4c71bd55c15986562689e808683442ddbc8ccb048eb2b154a66e6e19af41c233d6196155912bb1a020fabd6e803f04fab88fc677162b0d98c42500977c002774341c3fa455b6092d8848958c94de4641a43a269cc6903e512ceea3512351a05c52bcc2ac18"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4ff317feb7f29b39f43c6dfe386347e057a97c5063007322c8ccea1761e5285a14a25cc84af041407130fde5e7e94d5196cefefc485d1c793432e62a8063557a0764305b40a7619b8e9aa9b395acd64a1c1321fed36e2187ade19b9a25e52373666cea888f5c699da92a59f2b2db76fa29b8e9d9b78e6fe42fe9d722c524a59a3ac8d7551ad5c5838c4ea92685ec6dbb23b6b69eb07e8a187ab78af4ea81c2d14977be336faf8169cc189eaac340c9578dc6d98148a14844c220ac1085a80c5e3e4c6f04a472cf1a4b893aad0f3370d56468ee1cef675b5fb77da481f128ce8aea30c67fdaad92f26db2df4c45000ef581e1a0f323ffb69e45981a6c1c8e45ffde22b4cfc0045fcb60e127820f4f1b2568797dc34ae29e916030ddc55d78629534f926a230c4144543d383aba05fd3fd1787bd70bb9fb8046d26c4d7034546452a682de60bac900337e5a27978e5b709475f4e01a1d57a00190b5e829d81e82f38450d3a21b5b6eb83ec0c491cd17cc91b6c0553d857a55fac7e8dbe378c95e5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c3d7c56f39e387328b551f8e33f1a8f6ebcd8375bf8a4ab92df72c732e73919778388f0a3aceec9f6753133626887c3a5793cfa2e8340466e8c0d602663cfc169643a46eccd913085dd1dd1efff1046dd441b1dd071a558c629573ba36631105ad76d89561f284c6321c9f35b1c4d5e588cc93be7c62b2db5b8c52526c8815c9dc5b755431de7abf8b2ae5750dea20823de561f92ec3630f80606a0638a18a7aa71d24a6e19f6ac3fa16eb77f769da4b27ca1b2bde187d10e297f6c8ae8c5aebd84e75948942bb64504ca0230a6801e58b23a7aeb2ae1458b5750a894cf6c5dbf3c60b86ee988bcef8e30f21afa7197e4103fa6f4f1a87680eec6173f480c94e11f8db980597e38c71f36e3c68215d810504ead6ff1b1291ffa5d178708ed3b0e5b9f5651fd1df9c18b21deaf20b1a8bc6de73de6e7337315bfd428156fac738542b38d03bcf1403ec210f67753e5b73db07d363ee85a595c205bf25827231df2bd576167e84c659e9276c7611a92fcc1e06af925543c4b11bac35df7ad14f34"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b2b73525c8a556fac8a98c717231601636d1ef1f6d52265bdf3da2236b35d6e673277bfa2b2b1222d6a90b50a30877447573210c87fd85a48469185198af8bfef4393e0b46b416ac0cb7fff2be11860209c340e470bd59d84dfa598b3635a5bdefebeb35feb4251157ec940a0c0fc6fd5ab97493c3e9c663dc943bfee7854f2da6f9b91a9dfacfb88bd21c15a488bf2b08bd00e311de4bb2aff850de3dbd9be9e73b9ae4af9a2dd0a7a3cea94f1badd56ae6679f5cb87cd3eb7ee6ddf7ff426686e551d846eb8399124e23d6b87897bcbbc0242cfaf48f8e08e9d5957b30bbb4dc942bced416ef50388b25208c5f4824ca875c4ee75eb1a705c1b5b693dac65e447e06f41251b295e05d4c5137bb7c0f451a19adb61bcf1282ce729b3ad581596d99c5876db7cd4a614112bc9d5557187b824a266434276c3ba8bd30c7f1541844a262ae8d4c09419c6e21881a3f4b0a8c3d958abd7ac0a9d0e7f1770d229177ad8afba36e324d254d36119d13cf1a47c93f0bedfb7d1776acca7c9f14cd56e3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "32506bd08dd88da1d3a3172ed17a6d1393f40413bbf2a7fa4f9393314b7d158a905c1e528d4f0b0c47417d20234f55e58fb9fd87344773b311fe4a77137a829d3a80dc77dac5170e32be53c212404d2802e1cdf982cf57261ae64d402790a7ed8efa42d9d807698884d23187c3f239beb3007b014e324e9f5f070cc225ede15115d07da064665f8dcf5a439cd6ab2aaa86cb4b7bd0f8d97c1c9a1eb3b416702b534ffdad74f447428c04073335bfc96b6f0528b0ba541ddc7aca70e37ba0b9acdb8acc1410bf82d5e6a8effc291f5701565d468c1578025f529be0cc7a2ae473eba843dd72ea8a6f9b3022c79d05e52964287ec9c2156745d4a14b304ad7d52da8a45a854becb8095917a4c7196afb2d73d35a7ef65748138a46c69253f0f67970daa38e0d435fd8f8763e9eca8d3be5ac96618629e30d285db481f23906e8a145f70fc8eaa71e451421501c579446c9545a1d7d033bd9ddf62e587b97ad7925b60a5a69ef383405126e4e0061b0349f9cf292641bb2050a86fbb505a68d321e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c0eb720b105f53c191b4e62f76d6e49a1c2319c89f4223f1849b0ce95872363e782531d8a1a5a45e4422ce872327a49651df41705ea48087d797e68c1fefe0b25cfc01b457361ac2f98f2b6d675c04a62aa32f18aef7c488205cd1d82c6bbd14708125d86fba57f2c54a667a31a32af54d8df6906c07595d2dd3147fe4ed42da82377c88f44b7d29c8c1daec6230fed36b4e57191d950ac98c78fcbc6e9405645b3c5fdd69111f9e3badb199888d0dfeb69ebef4a4a39465cf9fbc784c59c2fcee8e367387554148ee6318b8a23d3526266206de788c7ec4d93e60e537bc3a13a99add8087f5a33e6c8904050a9b9e2ed7efac91db3e4672a192b6d11f38ffa57f5420043da23c4c1fcaf46adf4f7ee4efaa5f72ab4560953a1e9435f93b00a8dd4b5865d714ce5d026a0ebe9dd56ba7d4b35f33fd764c04850c5dfa91fd6cad03d71d41845eda65f9c36c7117497e82988aa49f553a510e812ac475a0c510eb03e0d5d531edcee01c475b7cfe94a77bf45a22e06307a9f6c6953d0117e3892d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a90662e02c0b8f5452f56d7343ba207ac0a8141977c46b74923a68f9dc155abd0230dadf771262b1c02db06de7bf78dc40904834e01b7b8bd07d48cb1f0dc9adc5dd140234b7ea8eb51ae64b84ce799b3948a8c7e3601328c3ff520b712fbe037d4ca78353d8b518660a0c0f61d3141f7b6a010e2f7b644665a2038a63174156d67f00fcddff3315d76dba6daee07d8315e518a376b3d4f695576670546656e538d7eb8851497c6e8428dfa0a5a10e3e7834a23968021c7cf17d2610254d411d2a9996fc8052c38c322004fb359bec00b4a781e4dfb66eb842054fa7ada84797010f1dff65a0729554266086e4767dbe7c174b8540f5da25578a3865caea12915e4cacf0284495c208dcc5096f861997d45ed89e534207c79737bf420dd5c9d6a6e81a5064c72c3cfcdd25d8a3dcaf2a9968aa97f8189a37db4a228ac26894f3218c1466343ad41d6b292621e795289bbcb5e80740ff91283012a7f747e0220ab94a8ce96fb54c417e0ff6fb1795f078ef6039939c24b9dd32d31c4b68069537"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d8436c155e096de5d22e627bff7f42869fb228581273e9eadc0c3f35be02077b3d37c8c6e4fb39300a1093af1fe0cb42440caa0564f7a78295bd1f8946a218051f7257323aeb227d80f3430576da12a54687c96dda4c2ef7e359d5fd17b7d77a2fffb09480d17a60c80f30c4e06724783706b210212ec11cdaaf91cb1a7648b3d197a4c2f4b79380f356a06f026358a5381a4c975eefab6e9546619cf4df87ec106066448644a415820af3136deb86d34b61337b4b0e3a53ec136ce8b26f949a6741bf067ad69da068af1291451b0b882544ba72b74248f6f7df5186ac7da1946c4faf1e1e0f08ccafa7bae6c9224d1ccb6a5fdb778ac4e55ae414be393de1da87424b59de23d245da78bd714ac7d91103c296d4407ec50b61f1173248e9aed1b19ae50d416d9d2cc0464261ca9caf17060a0190baf5e1e3acb9992da2258c8338813b2a14dfb1da5947e694a44e9aa5ad75eddaebed2f837a2b3cb5827ace240f754a9542e94f9734d8ebf895a3175e978731726c24922daebb40ddf75aa1d1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "385dccec5af89ab079eb126efacaf253d560d2f0807fbdb510f7b1afd9bf99bbd2f37e1a35c6d60517774be91f5f182726ae5bb031dd5013addbce8601b17e36ef790c99221dcec94a5f78d4d04deb3cac59db4dc87b0fa48e6e1e846c8efa86af95f13f28b3eb32b0b5afc71e7a74a713bc9f675629c77325527212e3a033f11722314f16b6f5597910a26aa71042ff8ae271d6adf3a294eb2af5dabb0406ede91a9f14fbd8835f83e50ab2f47756e287fd4f0fe09c73ba13b84ef6510a40a0aaecbc3e2d3451024ce5e08617e8b88cda10d3ae277636c13b61c2f81dbb1ffbdcdc4b681f4cea0ae6f9d30858b9576e5c4659aa89a5a32410f07fc6fd4ffde8f7cfcfe04a9b8b9bbc70863360b71ebd1b0c9c04889a2c45c24c9fa259e51deea5c313a9e18e8e44ba8c892b7e3cc1c3877cd7531b4886dfd7eb0104ff2af8e5a886774ea7114c24cb6fd617398c4096355df008ec9a27b7bbf6220618ecd71edf86ab2eac7506de4bcb2151605f767e3d7663dab57df275136299af1e59a5fe"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "475af5abd6944b6985018ac37700f22f00ea36a9e1d6072450c5e8cc95ae37f13864b55ebbed41785a4222648e70841d3e5e702efb39cc58fbad00ef9629af8b9390b994ac91e366fc85518dce5a777553019604896d8b9130664cd5f40afcf455caa40d684ed09c3c968779b06a196b8a65966ddebd3bff289b6031bc1ef8ef64d69b9f98f47ebd8b28d5b761f7950942a714f487020a9fd23cafa893391712328a275a2656076e1ffac7ca816268e17e0ee5e71636c8757816d1f7cc199850c09cecef27db8b854023b174b8e266ff1694a05f78dfa84952399ed48102fe170929bb050f8d4b1fd2e5150a010b77e270c50c65585c36e9e6c860b20df609bbae4340070435f7a8c7acced87dec7f8bc4e2232098632794f2858f5ac5e13aad50c4c187bea9d4d7463530bfe565543079748d9f1fe794bbf7a7fd525a907d7d533e3cd2d6a8e40b26773084f0ab15aaff91c29a7c094b88d45ea39b37c14204682f9416226d11fd577dffc543066c5e954c1565c400fe07985cbcd982332e1e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "201e55e5d00bed299bbf003fda2ff30383c34b8db32828a0737b499f7b19297fe05c4ee5f50f404d1fd347c4042754f327e0aa634a832d098dc8c4a2019114569a48087dccf8e30dbebcde638c8f1d1c7c61ef9f15c478c8bea4d9ae0d5629f2a420e9d1cab335d3237ee9675ed06790865b901cbf29de2b730b77d8319ff9273aab3e041656226c129048040784edf4d13ee1def8fe4d52beb55394b34817c9fc5b64bf6702df68211b637e3f4211afecf8884867f614cdb0eab49a70d5e1e61947f7a2d71416dd72b826968592bf88feada316812301b82694feedaf8cc6f3e2542ae0a3c4023d3e8a9aaf615b8947355da990855538f256927325d65d4f0799039e911cf1e0e9e940a88f771a0e4ffeeccf91588a321e26a48ff2da5d921a0666deba235f7decbe1a3f6b929202227724032af86872ed2e436aa11712173cc0a926b31bead6ad31ecfacdbf98ffe30e1505a42036ccbc76c60f216486ff7d7286324107e95e935a9eba9a4edfdf8f6d76d49a9a9db3aa86f7439609a1a0bd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6419ec844dfdf0475c7db66d008c87e999d7ba56b4e567c344c2c6c06d8b07191f0ad831843db5cc931a96bfe30211447f639781c3563ff9d1991cc0e1ec9c7e4312440f801dda8ff5016ad5e1cd12cf69fb34f4b45118ea3baa18502fe291522b5c7f5016c4d770312d64f18401586904f1a96ae8f99c539026a3aa71967af53dfb88e68de1007b063a581d88720f7f5c7c52c32617b1f5f2cf3d4a2964456f6bc97ba97c11f7fd24f8a632a458d1cad6bf78389053c74eac14221a0adb1b813e957b3ff9a65d143b9ae9ebc8a5def0b0e8db934bc04eb7c91c62df274b50c955c374b5081af628af9f7b86486197688b7a72bb634d849be226cf8960b5cd9d1c5ddaef21c919e755ed17b4dc4aac8292d433ecd6b97826d338b785903e6d059d3a7d051d774183c4344c9119b93cdc5fa50ffeb644c09090fdf0083bfa9ef37d01081bb69e28f6d3e4cf2d8ccfe176d961e67f2ac58dd865d77bb52594aaa87be0b2979c3b569055f59ddcb5926303b3b9109c372d79850af1adf1538a5779"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c70ee1645524561876a1b311f389b53bbc5350bb4554e02b427224bb121ce8211b51ce67caece664fc45fad2df211c579e888ab20ad3b86e13b9adf5468bc161589778767486cc620822e1aaba416da06082f48b7331ab9b2c1dc32dc03fd9243b658c9d701f53fe46afaff90463ef6fab2e2467edeaeb01468f1b348d23106bee3637428482f2e8f65466dd9f9a79b892d45e17e7ebe1e0e4e0a227094aabdca782eea92fb78ca38d1e2f9eedded60f91388136f61c450ece1fa08f5fecf50c3e195ec6ab609cf5c20ef8fe342d90e21090a97eefdbd1a69432e2de36d8932b580a0e9fc7ccd027e73d8b5a580fa37a02cc0e304c895cc9f2527a864b48f531d64983e830cec0aaaa9895dd5ddc80a86529dcce89bbb69b6b8b03774e5c03f2412796dc07b5353c52420eab2664dd3ad216fb69c2a74f3bc2a1aeb8efe29602bbcfce10c077ee5768c6f26bfbe0d52ca169275fe87b26af1f2115d5ca592a1c8e63198c4c5d088f2b49aa6aa58c5c0bdf6e836c2cef0b34f7e3effde1ab9ed"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "71e837b50fbaebc31fd94343e5d6e5f8bc45c563e6d263fab9383256fd5ac1f2bac07f6c0d8d90474a1e985ecc5a62481d372ff8b37a867209db1f4389fe80895890607b01f0b44601206a06348813a7457b7a97c7fdcb1b21b2b4ab79731f351a515e2410f93646f889fd391d398a7fa5a0d21b1ce57f6d8c438262e81160dd0c8fd43325ebb6820cab91da203a988c2595268294388049df95b900cfad08fa4b8c5e7d2d4023d0c71d18604388a422af8e8307c6451cc2f206a70669ac7177fb8ef3532b0b3cd4231d350a315b340b9e6603b9b9c7831ef885a72f0f4ebe16ec9a7de4a90ad926b1a4843546f830d50b66d3652b9deeae9d9cc744d3d4f2152d3949b3e71fb0a9336fc8ece6fc733d63c0fa1141b63639048167e1d138a5e4b50ca77382996e7af183cbd330843d378371758be58a657a286c12cb6d555874f38981059a895b2c5f0e77ec0e53c97dd42d64060882bcf5d1239c007166376c0c12e9740b2ec3bb6416a23ff4794a525680d3ebb2c77fd697807044ad720554"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "376ac86131ed100ff9dcc808553ca9467e94b564faf47c37a9c383e5dde02516975884fcbcae65b294483f74a585c2d61977174f86df067f826f60c8820f6b99fc78eb830106ec1c9ff4e5706b0de93829ebda0d18924503e92dbe58f68be94fa8dbd16ee7b962c58a1eefafc0a2fcb63e086754ae66e5e3366f8c739b589cadab242649e737a983bdfe88bfe239002afdec11dce52597358d79cfaa72820a37cab83b03e23863108920f435340f450ee66bb97b000cd12347febda1b4e55bac1f4835be2a77fb164dca4c1800099bb42f20fcc0a9f36a7bbadfe979861dc1767dc3c58000fc4b4d25c6d4f929333256c5aca2f7bbed9c9499785fc623ca1686915e7f46d66a888f331dc6d1a2b34a09a526908e9b2c19fa2dfb66fa4adda319023ebae533dc57f3fe9895e523ab67125e0d296271587774642e44a9c034ddd876f67c2c1cf7599c31581b57ec97df1841b5716406fb88ee991abab2a34f5bd06017947a1b43cebe448daa1d98c47a56e813e74a42b3ad05c3172cfc394d5304"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f71ed0cb9f065dc961b8ce1a397f5c3eed98aacf7366be7a6c62ed2c770bbb675081565e57d0805547d36b8166acef4468a2e122f92504263a716342db40b86515a34ce3b99505af3668b1e94e6d9be2ac4cf8b565c4fdad32e575a84e0118113e74875ab59a627b18f01b3d85d91b679de5d18adbad1391233fdff71fd1b08a639ff8d86a28b75f161ca0c711a11ce506ddac3fa450de7f0225c801b1a1a4438137ffa669c2d51d8ebec054aec406f890ba4baf52ab45d7e32f1b32d828d3c6d5cdd673dad9d67d192ce1a66c0b0f46725cc4499b8ce302e693a388b69d10ea58fb87c76adb1ec8e7a998f430380a703160b55b62bfeb0b66ecd0190435c387f6dcc0297603b68b4059d88bd671ceb59d34534f7780292c25f0227a7ac84b471714b74be44104817591c981dc4f795f7162beb8c5af79b267552965aea4cc97ce44524f3f812d455bb7b25cbd24f432751c20557fc16a763430f7541b97c4249a12a7891b67c964e0afc6c205e4d6ea5c531b6cb542d64d655341c61af014d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "938394f2a86941956721d808ccc01920c59f3d99370036e22c8a1d381a83feb1b4bf59de0dd2cbdd74c69f284a52e3c27196706c84ebd8dd7d08f4024609114d3fcbefe06ff94df832a37c8a8a756580b5fa5dd72e315bcae7fc0f94f5aa592f0b171c9771d5c4345edfb625967467b3534cfe958a76adc1337786c634db7074126570c080839f7cf8682f14cf8e62c8fcfe86d2c6fbb5cb32ba7982c924f2a0833db59495067cb20455e573d60af2ba687ccfa5ea0b0004b8ff7f49eddac928b61df4c865377438700faa2db63142cc64378fea33289478361ed704f9d419415c6b91d310bb41921b0b09789062be03ced9fbed5587414a6c0fbdf91c98001c8d479683cb3bc3c6cfe2ea222d3b58fe49bdb1520548d193333eb37ab695a99c9b98d2f8ad2de7e8ea12dd4740e11bf1a66fa33d3183790624dec2e25f20ac79ca1e605afb4c7feaa7c15fbc8bfce4835e4e2bb60b3d4691f9c792c954cac2a432254b8e293166e90d20e5ff6de6026cc696e5849f9b1b427212241b15791f9b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d7cac36637ee8e4851c5ea7d95d46092937c85e34d6a69c88a0beabe329013ae2ff61c4753a1670cb08d7b407b28161ac50f50f30865b563e684b90b652daff6b6babd850bf208969466accc03f5a48375f7de56853dac4679f1cad8da476b306b7d007f61a1dc169d1450a9bd25959b1d2b0ba5d043e4ec05e897613a5aed53fdfb528057140202d90bcfbbb47de8dfa7e95f5696ad245f2a2061e90ce825366c1e9b90996bf24c73a5dac95751bb9520b4294a76217c6cc3e0ad4e3d37ce4ba67ba09d7fd597536d90d3e65b391d589d0d4092ca44113da696250a6981dd26f4197db7c2135c0206a0120b9b42c08a1ec6730694e95cf73723dad6d40fd1871bed3fcb86678934dfc459131c84f5418b76d1786b55513938eb069e2f788460fef763ceebff1191daaa8e7bd811fa6b44d6b7eec52bd2f62b8eff81fa3b5459ced8e8a8b02d2c6d67e20117eb6bc3cce5d77488f9fa11363e8bf99129a5de92b49e23066e5fb6da9d352cd9ff6e0050a340fed391cdcf23d416d443a86878a9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e7b23269693fae38ea2261ea5acb4fd147c47a71a67272d1b1e2ea49b6a82d6abfe840cb8f2f756922eb6d12dfb9a3c95f9b1acda189df076f6e127e5a88bf3c745813ed9d858ea25eceec8393c0dae2acbc6531df80cf591b2f0bb758c1404be3e5e61e26dd194406ac42ec7b925142b40888b4a8331ab04932a184a586260861aa7eb597d873e21a2a36066c7c7490379b01b6b378a013b965c0e0f77d7cc6ae56e5c143811fc6fcf1eaf16bdda1d110e27527bb49b98efcde70bc742b307478dab7c693c543615fccefffff2410453ebaf289a9440920d230e556766902f9f4feb6e950f88ed1b4a08320f6ba997171f56dce8789a462be0ea6ef38d0195ef98fd79d51d1943be9e1649b221f5d087f96a4dcbcdf086161f1de31e46e3f65e1b63a2176eba38fad5ab259bf375d73b6d7227da661181c3b4a13d7ed2dcab26b71c0e1554bfe57318809e32f5b09eb3dab4f5d385495a1be1899548bd4cf4d5d6ec5b88eb1b69d6c5bf20a539af5d6be5bebf29c2813f1db6830258b3eebb6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0d2c03a46e39606fd20a39650049b00f2c218a92a590d887e26f33953e9cf8174004c3bde1676d9b3c17ffb7097670fde1c99a378c49d1134c67b82867440a4b2857237ce10a947333503a63b571beef37a59b3511ac6709fa3ea5d814d457af1a864ad365bbdaa383c862c38af292068d839728bcfc1dd5cb7b310baadf1d70419159191b33c6124d2d9750b88eed87c71e811a7f65a5946ae5ab6ebc8375c6d7fdd1e425d4f48b149d2f48fae14e6b3b97f53639c17a68365cb5b270b52bae1c24042776144b9e5d54932524cc83af8eb4a710f2d301276c215477f7192f82502970d5a332f912c0a9ceb7c4104eb0c104da8fbdb3c624d7e87de20b770dcd568f097cba0dc9c1b2ceb9ed4a9d73f7f805e6aa6f0c59868fbd8a6251598617b157ee31bdc119b0444b60451af8fa90e4c0991d91d2d08189283bba14e6153ee671e83ac12d1c8474a08374e47f0687b6fcbd0b844bc435735645657fac76507a7113fb5f4140c01070ec5b27523effcb47eb426bc3231d4e4dc874c4a16ee4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e383e41e1322976da40c9e5ce64c7dbb0571ed9ade7262251f7ea21ff94c75002f39edb73f0a9f86a2070b5fb143d078b14d908045135fbc930fb79a59920a90bf0aba0d8d7abb46f619cc95654a6aa675ff822d43e22b63b06c3060fbff2873f3e9aa728d663b64f0b0b561da9c3e98b865ddecbabb990463bbac0810b5703f5196384f0c8c4ad6ad55297cca2267db1ed3830e064aa52422d614340af68a361db77de375b7bb1c63997ca85319738c4d0d7519e0a8ecd8cf098075b9bba602f31d06451f83691dfeba27503f969f70767885c4c659e5aa1957259ddfd8676f58dd5d3fcdf951bbcc9009d029d17b0eb650184bf9a2b2df5e7ec8caf3a52f1223611f1c44bc529019a1e38db9c309ce3dfa8d5658ca89eb071a7fdc13fe666a09c7b22650f07eaa5e3943568780a2ac282fdb387d917639b9327237e7d74bb88b19f53719845d0646bb548fa5cfb945550cf1fb5187c142924f11a7043493c53841da19ffe27521dd472108e75980ed1f1ea80325a8aafb272939226284b7c5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "01892d88434a5f51ab9502d5f3c41c3dea7d6f8eff6a14aa90077e495a0289e9ade4e9b1a103c5436ee2778ffccccf2c99ca4b844609cd95dbc1aba6353929d8d5b0cce922c8afd3da22bafd6f067e2444cc060c22e207f593832604fd94ba6a0c91431cbc5dffc9a272876cfa4fa83ebf1de5e2d889212818a7283433963ec9a15b3ffe486b69c6c3748b03823485182739b5e1eac0b90e6ee62aadd808160dc1ca47e2b345ade0245f1e03983942fa480a38c53c2dfd3666e2f81198cb85424224394efc0d915d7b4819c92316c26219c46c85e3e29adbcd6102a82159dc5227f9392b28b657b08fccab9233ce668646826a0611855547be04eba7dd469ba2110aafa398ec6f61eda59b620f7f95caee46b8a598830d851aca7b7f15fe35fc8e4bca694a0ae9af7567724ba45633ea12a6736dda8c014a0a00b9789905a6c1b2a38b1b270619d79532e07c8ed940af69cd7c4553d6b5938f9b6b4201b495e44358a09ba92f2c487325f9bf3a1311a47e1b55aada4c994496970f80bc2c4558"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2cd3566990157944c036d72097a0a275da39b5aea4c5b091112cf8376cc1f1cee1b06eb2000b3a2f6d5f8f952e95ad92250227b1f790b23e394a97a9037762d5e1149ffcd952348932e56811caf717ace174c3ee096bb877eea046ae40478c14f81aba9d3c7e47a988204ae7d29f482923047c85b14ac51997b6a5166bca2c73d1b669d842fb16fae98c4dac5edb48fbc7cd38e120f8a70814592cc70dae5f8a7fa8c53bcdcdadf025f674e51abcc03bd9883f15eacdd0801afdc976e61c664a250b6fb211a4a69e0547906914247008beecdd3f513ca600ee3a466b8a78d86d0c5341035acc64c354f2b68830ff8d176272cf1ff541d1609ff3799f0c3a9e6e448e0b713ece48a14db4a58df585e2d13fa739d4314b98ec75c6cdc74d68481662c48988f48d1e8d98814395340e454085e1153f6bc9c20e4a411e2c610f424040b011f66a6c5579fae1b9fb53b673da0cb5a02ded3fb37e5dc117e4e71302b360a23bd300143f7efa1a5f2d0052d692c18bb4895d52c0bdebafa0b625e13134"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d59ac64e907bfcf38d4bc3fa50b6f2799483d29879a006bc352620e31f395d8e8ee32f0689a1b145246316d27487fcf3f729eb644d9c44703aff5e57df0567035c18c3af96db6e86fab4aa0ccc0c6fb203a50941767dd17158fc4dfdc34151bae10269bd68e0777f23ea0ca8a332f7f9e77e5d95bb00cd6b8d3a0279da3078c1bdf4824c433f13117e4755eb3fde5f9bec4006a8ff9076ec5fe5247554a8e76ace12f27e819143819bdc6112af4be9b25b896b01608b0ffd11ddc87cb00f826458a5357a78e1308e5b5b961b53e8a19b33789c0f4984fb1e6d9315f9780f81e6196f908fd00da1d2fb6b61b67380bd2d2e579829edc44002111418f9ac624a6165cc538ed0ede4d7363b7f716c84e1e9213ed70f02b5de44ada49cd7c83ed819604433aaeca68d52de440183d878b0315388a884824371aaea41290221820cff49e405544cf3545e4eaa4e7697cfdee0a48eb87a73ff47f4d5d8dd3a4f8b09ed8cd2223ee83edf2d41b7ca572aba38b64e987e668bec1ce88d24fc499c92d0c7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f294d22fcc6f9cce7bec0e44a9d7eae443ad7b750a72be5dbb41e3694f48720dc2c1256e030ae1ae06ba65cbb59e8d180b222430a8fb10ed7abcd69c869ad1c8070f33d0f262085414f7985c47d33d0b398da9d272f996cb701bc6f84eaa0861deb5b7cd7226d2b8a969b48d6272a98ab9a9e3b761231e892f4d8e9100a7d1bbf820d9102a62d7d41d92b3d9d55ff386cdfa066afac04c50bb2e1da0e1b9af62de2a7475bf403dd2a4a50f80f6a0f0eb9eef38e00f19861aee8d78a13328469475cf42e0a675f2d6f086115a14243a59f3ecbb6a47d25cd1011d0bb6e1ffc152060465b354ef2c66305165426ec72625d6fcdfc3e830a6f352383e05556f4e14f5ab739f6ba331d3ae8ebffb49157ce3c597eb9718635493e8a0254410bc75755c5d854a316a40845e97da60412eb028cd97d206d05afce20a3221f13ffb7389c400da0047c6690116de9b987c02f09db67313b163b9df54d2437b1f857832fb982666c19b832f6928db60f8c695a4d95571825b7f87bb9601003f95db54a813"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3d8b8f962091c0abfb446c89b26af8dcf6b607ecfc052c4d240742f5bf9568a7f27cbd016ab734220e8c532412fd3608c8dd3b2437ac93071b2e523356194f3d19cef8ec8c6a477fd9c78a67b5e844af28afd7a7c0e4e995020e5a33db394d24dee4577c41d040cb9f78fe31027eff68090b9841a66a83c4af2cb5d076d853d9de73e2059234ad3d62d56b23d80bf9de926bc251a5530dfbd564db9ded9edd75db0c96dca8f7e704d1ecaf2cc66f12ccd9e537e0ba4d64ca3718c439ddd8bc305367da8d11037275fa2589451fdbe2bdc9951af42034521a58f8743d4dc1164dcf83e6ddbf2cfca80ad5e6346e52b805e27702e382da44602cfa4fa98e7c084492fbe4569bcffd7ef3885a05e5b091112c3e39a7e3ee6917d33367a12f087653317ffc156bec46768403e80a8bf59721249c7b909642751ddaf3a7851ae65146d6b44104215218a5f2bd8c4170bbc5dd69afabcd13a5742909a41965f80e191c8bf21f2be9973c8f656bfc46812c3d64e14b52480c31806dcc2fff05ed7b82e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04dcf055ea6c80a04a302f8b6c7c66e3ac796c4c8c112edaf75531ffa903c5a4c749947b51bb4f74a95b05572cf7f99505c7882dc8c9fb836930a7b78c48e282c287cd64c1ea36c494c1fd7b1597a727c9c0bdbefdac06a752aa5527400f8cf5d881c4364b4ce0dace6c619de1b11ad1461cb9fbc2ce9ccd3e2be901c3204cd613d0e77d7c740bab1ef2634aaa4ffb6f1f25f9982adc8f6c3246267e33de63e7e346f1e22b45ef4438b1f0a8324da5db56e749dd3879fbb5a6fdfde802ed618b15d3abb8fa237bf4623b66a55365b6d771489d8c60f34f83f30092df049c667e86421807561f78bd7075569cc302e3ea72b0559f9f9267463205dee24963c7d56236e433d6d944d4f3708da6fd12173555201df31a52694f0266a4a417b6866e5e33943847020936bdf843fdca5894fb984b6784b1d506360556f1afae4419021c74c6d77f2838b6e4b7d2d040bf6dac3ca591d60a3db50896162913665f7b8ed3ba1027fe246efe41c59c7b5e952aab011e2f8cf72ce3a1bc57c02e9bacbd73"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "97ba0c5448dd06846b1383a32d9e5fac291036802c4f2bb5499d09dda2215eeedb381dc755a8ba1eacf01d30d60f7850e0d86880cfb11f181933afcb6c9101c97db5fc943e89f0185eb7505b8b0d905690dc1d9d042ec098fecf5443b98c61fec2131b86357cd34efe4f65071bb1a645aa1596795cadf69e14df98b511297f17330c7dc5b9403070f3840d8fa3740e997b4671b7a1baadef2d289e66fb01c43755cbab218c57b871071529e203dc5e884d6f86b45f28e37d80c77d81b3d69347ba7e476d521e17159e875ef7f49ae685ab56e100ec475ab67d10d9337294a1bc1ced1413a1ebd8bef58364b1a1a5ec1482447649ee27c4548f70f12f5c32d8555047834f5841f30a1556e409489826c0d2a03334a63da4957e7ec9608b5ed18e1193af87cb75ae32432021c8094b80a71ac283fe93855033e2cca47d5d362a37607fca51291957efb05711a53ccf7184d8e2a6b79e2da051781582f3a37c28c7ad095f53680088308d8faeca5b75e2a27d3b62c40c6eaeab9ab8a2d6234eb8b6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "be57eeddc0bea94257eb26456a6a4a6d9e9c8fee1ae2e0121ce8e64806cba6692643186eb10ebf43c0cb032c641736401ec189adc48ef6b222f19a43b09b6d81a1626d93a49055e50968e295b78f883cbe0df94251d1f0c8c067d2a5d5ef7eb33b01289f9d666e1f691762b7ecbac496d0ce3dd2e40307131152068307f28f8d2d38b427e03843a7097c7af5628991b8a752bc1eedccf8cb2e4a7507d4d03ef6f18ddc6e757acf87444ca67d7292b273893b41c1ff4a2070043d5ba76f4284e4f16d75721da32f2120ef666d677b0a6a04e4fc8ea5e5d64552cdc872bc860dd5dfd9939143c271c7886505d696be9d7e7864eb586e396c0270d923574dd2dee855ea3d7f6cf57f834a7942ff2f5ccf88d312d4edfd08fd6615407059604a359548af4d92794ffd1a610d82f04d6453bcf35bd8ab523b06a6875e05dbfbb9c2196e2730c324ac51e8c9ff36930b3025bb2a081ead30f887e4eff6464f784ffccad644b9d7354b071101478fd6ed7c64167b90e16d066ff599c5591a943a5f4533"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ecc5b9067a93fb90cda4b45f1c21d2c5503bea7fe7ab592922cbf90b38892741ef75667da1f0435a25588e22645dbaed66ea912db9951fe9adeb357ebbc25b5f524de9c366d657948c2efcd008decbc69cbf085f094cacbf7bbdc9b863cd5d9174dd35176f587ff4f7878817f31c3a9a669bf53aa38ccc782e98f7232b267045252a8cf3ae1bbefbb2030573bdc7cc9222550f5fda9923dcb6412ca0b21e17d464bf334fdbc9ae61887f1a4a96eb4ffdc1dcf29d6c2d7aab07fe96db30289970d5d8200ac95ecef8efcdd60f8fe4991a22427fcad68de1d94c757a764990acf5a76ff33da928a46ee007367b4e90449cdaa4d7bb222babaf1e2ea5a46aa9ba1a1f3999c6a55c2a36d083dca472d30a46dd312cc123b830ee39283a6fb11de58bdff24df169e716d3f2487f05dafb73cf3815a616e59afc78c177a1bc85ff89b431e988f5f7a43359dc9ab7063baafbce30dc245b5ff3ecaeef5a1d518a09a6426a6edf9bf9dc0a5f79860003ec1704b5c756d522dbd93c183dfea819c9758e5c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e495b2c030b082cd0d58097aa1d1d5f4021215109048db0e4725d3018de3d71dad07d0fd5d94df5f79bebb7678bc85ffc09d39574e7e495d17621c59bff6bc9cab066d5aeafaca13e02a79b3c1a5bd5d8540c4f3937cd4413e9ce6f2e3b7f5f8c7b2d15465435df005304db81181de6d496cb45ff03cfe84e75c5b1d4c4bfa4f055c9da0582ce73dc0974ab5132221a61e7bcbe1e3804937bd007d293861f419bf8ea9a72a142db387b148041f34c5b9cc3e034a0d3cc93cf3bd1e1a5b1bc63233fe8bd1e1d73f16386a70533113b48029a251bbd99106ea7ac9313e93e362a9c6956dac668aa316ed8130376912926ba9e9d2a8a9e808a3833614ffe0e22d7e1ccb49adee5445b1526af4e596eb675e12eb89751ffe5b031a106dc282c6e4f06a233291ae7fffad2b1607ab7d0fc06082de63f7e48ddede5122e3186dee3f797888c804b2aa0322564f39f9041d71b238a816b751216aaf83bfe407f4cd28ca2d319e3dbf873f13329c1ea8064bad9d43f00837cca98080b65fae383c17f2a2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9ac18b311711323d7962279e8c6d693744db2c8500878326bce11a9beda2084a6552b89ff425c21a22598c09b538a194d177c3aa647cf43648e2b17b9675616f81896949bf455edbd0b0f5713ac950b57397c66281a63b96f7af4bad5c697b293387570926ef7ef85056dd11890c8765223b2569b4115bd36f5e17ad7cc8953a9b6c9a45627cff4addd96dc397051f759635ba3de256fa461a2c56848c924d81dd2a9a59cb921ab4a1b9b4657eb6c1709114ebe99b0acb8c598847a650fd7216690cef68bda445a3710fdbf8540378323d32168af666fa0524150ab850e68e1dea1ec00d2e5e63b65ba6943fcb92217acc16955f2d06731e0684a490ca9721183b2cb72633997e3dceb6fadec188da2d7ecc0ddd82ae7d828c640a89696e66ba7d33a64034100a1299c26ed90fb59efa80a88ac8057adea1378eb7d156b2ed30874eca2a0a5917953c0f865034f53de703893419fc650a0f9dc211f0828343bfcd76f16699abd468e863fd8696a52705d3b49268e76514ab6999b98d8eb942f6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "700ba7745d6c9c146b6026d854f958d4ac00816dfeed7ee9beb4580abdbd491156bfff67215a7cc23dc0dcdbcdcbc79009c86dcd4bbdb54745a8dd85f7c74b96394ae1cf9bc88cebe88eca84776f263434958617b9817339d756e5f301548a1ca4dae92ce9489c5573b9e5f3841358e339e056eb75b105292d9a1897091218a9a95be4a76d2f22a7797a3853bd156a91f0889898a63cfeb764e643e6f4a5987e6de15fa334502aa74dd99fdf9c074e45e463083d434ca0a31424423257d1aebb68375b27fa1a79d721bd3b1cedf744b7afe62ed03cc4b7e6765c50497bf685392d9e95dd1cc11e0e7be8731ebb689d321eb1c67621d87fb1144d56cec866a308a0b3ceb941559f7d157e87f0daf107e82dc18d3c90c67307664415838dfa2969ef1790c4e99017a1f25977b1f787d6504e10693fa1b79f23b42ea1c5318ae79e46ccef01174a752efcbbaebebf24577fa859b6ba87b540f2e46903c3aff0df72b4f8d10b34630bdb22282d7fc1c4f3d7db661865ab5089d221a1f7c24f30230d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f0edfb2e764945f6e6585bdc28b421dd735036a4d109d27bd1d79f8cab0ae46f5018e7290775f5a273459fc9992d217dee7051a9cc86670fc82f3377861193ae3cbf9ed4d9f51b9496233f8f01c9f88c43348f64dc64f2e5fe98f3208ece156aee90baf7c200fb8018d715185808e0efd0c570f5af1f0369ad01e18a3200a5e04319b779266b33d70604265c4c95ebf53cf43518988b7501bdec23c9abecc498d98b5195830b2883b261752b4afbe7dd7cdfa21bdf593dad93b106b91fcedddada864df066cb5f5727afe6ed1567ff21336e6b02abfe8ae391b3fad73a4de05728577d7cd4e0c639db381ea446e1b7c35e891bf7258b53fc356e714ea4bb2856ba037b50035b611f070d42445c9263e968e8c803aa040eda540c23d62a48b9884a9b9eb58bdc621a5369ddcb007e52be1da996f020d8c1a0cde9ce41749f33b9a65e5ad33386587b93723ac6eecf3adad996f5affa7a9772336db2ecb9607dae06cbc3a8d1a55cfcce20a43e9323c7fa7a11b83b0198dafb6f0ba860103a54af"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "350190cd72b31328cf1fac929b03c45900eb1dbdaae14c3553b40b53773324bc17b13fe11282d70b38771b5ceb0ff87f8517a787b0e06e97b83b71fc7b680cd5d61d616c15d6c1bc98cf93b058a5be99ce09f9936eb55c4f92751f00c4b403d9771994acc556d7e69f5682223807b2e7229e3bb5360125e4366052c9629cd1427f8dba9582348e10ea4f4d768d84dba73db5442eecfc90d38116b002dd4bb34ed8c346ffff883444248ec236c738959154decac717c041dcf3df5492f2c9a509c272d825a49149c84718a9835b40a38de6cfa7d6102042150039510ba401fbe53fdc7ed3b422848f75a9821c0cb0c7a0e4ae6219f305507ece7b84be1cc8c1ebda663fbce724ebe7a2f6793271e8098351991389546cbce7297c8a18c8d202227b7dd574b1c1778058947840ff0c601a7d65f035f7f66081dec7f3cfafd042aa15edbee6b37da61ccd4938e7517dc48ce272ed78cdb4f33cd000217ad142f01b967d7ec4e8fbb43db890ff4ec8fce37a00c88ad9407a6aabf4bfad3ccccba48d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2a32d279cb8e0f44a196a1f83fa8dd5bda36f2f857664f4155b2859d9f940e8fecd466b3a7589254b3a04846721b8ba3fbda7a85a6a00ae24abb2098d3a1e8cc853dbf693d12a1f02ef490594606990dc8aa7916ff6911254039f4a0565068af5620a3caea7f76b775b96a8d8456ffa7bc6dc9fe98832acc512a709ed83e06c72166512e3243e9e30487dc6cf3d288ef5406858b6bd60177b01f466cb8d963a987bf7ac242da9fb78563c2a8c9891b213544855d3fa92c62a8d3219db0dbe7229eda4178a540f7b103c0886d1a1a4ef2c6bf5388228e64d6caf6e65424b0683d0c6f2ecad03355cc7f5efd8f3a18a991e391bc06b0a645586316ca61e101fc0c262b7f67d7979cb0aa1bffeebd3bbee757d257ef9f84418d2b4f9cfc6b09e5efdc2328f7edbd02b1d9e13ea7ae86d044622773c50a8f0c53908079939ca60a08e652c2a6856397814304def15aec6e636eb6679ecc8619b820a655070fdf7fe2f204bba57a92d894cbe2d7328cf6d73fcab07ba83b020c3b2f0951bcdfab8ec1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1d95d2affd3c347ea5848aac974bf4c7ff675a876f0944d73785594e2c8d59a9671d8ce8ad1b7c6d0d51f818cce5ab1cbd7b6e3b69f1a1961c4446ae147d64b3794c6a8255386b96f062e022658e0898892b3e54493c7b6c1686d687ee72f5faeff077e6fdb9398b271b6c038d54c3cb0674717a7aa7e75ea3cadfe87b72aa1cf19c799ed2102264eeb646271a81eccf9dcafdab5aabd586fc03e279cb8500203b44fa7178a9d846a85f2cb6492e8175b2a7b04ce24f4df04e0cbac76bd15907ecaa7c07683e20dbeb1cf9f6f03fdcb0e31b55d77c8180f27780df7b253a2422f0f319a081781ac295bc89de4da40708eba17217a6ef42114bb46695cda20b27590565592e4575098ac1ff27af296245005a0ff49d6a697ab4bd70c6758a1897b0a1c09f32293d7d1b2856730658d43853362569bbad81389e85b3a27b316786de7cd0798c628344954ccd1b90c58495fd112dfd246fc623118c7cbba762535038e10885d7d8b96edc600ee03b1430628df94ea65da17b1376719f3ffb739ba2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c1bd919721819b72b389c27f0345d7506829b38a7973f7d4184184de56a0d78a800b99dbd8a0216f60bd2d423ce18a9fbd45f6e0d171e34689e06d9d155f3f3a0c9af594bcd4dc476dad915d17a4973af9a5d480f622bae2dbffa125e83d9995e81112d633daf225848c8e7ba17cb030a469748dbcbefea29e93f464fe16ec1b1456cc823efa3135d49d94e740146de75c44f380ae4e5a6260e64be7f0c3d29ce97c29c9a76e280f50d88557e52292ae9fd1e783643756f6b8fa867deac05c21793056992ddcad2ce5ad1698470cab4ea16d5e1784dd449bbaba725ec74c6480d0d39319bdfd24f55591ecf92e4352706483f96f75d63714fb1a288ef09ea8f6b7f5ace9c2dc659d95689786c5cf734972b5ef08f78eba8d7e18545dfbc1173a561e597b0412739ffa0fe4448d08f2d307baf85d9ecc5c2a57c008f490ba867f5fffbd21091f77eedf1c6cbc563613a443fcb987d776f05e8cd1307018439bd0ac729a7ca05a968d4f012200293a1740adff9ddb877b054c4d11ad42e1456bdd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a6df51d80d2902569a0245422e5b5e8261903fcada8f01c2c2d4d9897be35c64b7286ac79fa73cf39db3d9e3135af2f00a888138df5d6ede7cac535767e17206f585c57149760ba379d8791126b699230b678bea9762e73a2f0abcbec943db9ac74ffbea3824ddf22c36fdbfe77960149d07da6d5acd80a7378675b3e65d4563d60b1937347a4db25d6a1592917e06bb1564542beae5330a8abf9ff854912efb0ec3d93f25c8c4e19fd8716f22ea63d8deafdbf9b9be61c9d98fa2fd4d2a9605de2fe2d0c1273f64b31675c440ee267f02a981c7efe142bf63a09af9693ce07f6807f389fbca151db87589b82a833daa3b104ad472f69b1a966f6b853c20c9a5a5c10657de941803588b1fa77398f18752c175fc3808441d9abdb5bd84c654706c20969c9f97e24806d64aeb9832540de12232838f257345b58dd4532830c531f7e0f42ce2a032bdaa3fce44cbf1bf2eb30277e2babfe3ad12937dcde9ca6d2bbb2093b7da5cd33446355ff0dcae75863f8da2c54872067a717aa07f1eda8853"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f5e4ddb832cb5ae5314ed853498d9415027ede84e7280fbd802fa3a10a3a74f4b13303362f1c7dc1630d22712167dcc2869dda4c20b90a5f3b6e9b81f456be5a63691a2db758fd64e9adc4cb761e907cbc112353905858f6c1f0f95aa0526332245713ab02e374439446d8325898f169453933364739505ec6813ab53d6bca1362bf7448e9ef30780d2db73fd68d444490263ae2e3aa1d0f500a9f648e188795347f773d18076572d95d1971f02d781ed4d64b8b928777d9d2e59a1947b067c797596ca573dfb0ba69da0d3f0db71ad1e9b07b31c7fca0eeee3582c3c96a7ac4178e01756d5db8c458350527c9405f4c20b4fa1b30c9c7aefa2b7598bcdddf494ed1159ccf6fa3f36e1523cb6412d8d641c80122a6e2b21253a1268b11b8c80dd98b1011c54bfbaed8c7a9e67a96f0e6c8cd90481f1f7c18a98bfd665ddb512cb2a30ad417bb6186e5e3b3993310b3ae79c1064e353cca881478ad49c8c59696de17859e66b0b0877c711f433e38283092cb80c319b9e663a1ff99cf4e583b1f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "452a4d8ecbf65423cee481918f6c9b7b4ba369fe652eb1346496553b58012fb7334f9a7c4797b3f3df594938181ccefd3984fc9a8fddbe740d7686e610af25b09a04336cf49458b724e92832e820ad5dbec08098e27431eaf02d81dcd319f585b99e75c311ddfd6cc157e17ae1b33c5fbb4bce28bd919771a27c48bc21b08d45cc4110061f4fe04dab8107b543569d58be18efa572df128c74fdf4193fd73c3bc4e71b772d58e094ba552b8a80c7ec5080d596ef50c7b0727857194f2e1b5ebe7900ede34121a115f4fdf716fc569ec4c6645f06dceda6972bfe2793bb1455b5bca72635aa8599bb67f601ca6485e6ab3b6dd304623ed5e8b3d7a2d07fb6b733fc32491795833f7bd97c313e0865c842c7ce6fac9a304c868e1af99fa686bf842f6c2118ff957b822aac3af68ff6451e1bbc23cb7b9a3234b63d227ce67d61763f9116860d31dccc7f984b1ec9d90377249e73af5dac9759dc82d46e07519f39c2bf21645c68ca6088cd8e28d1afa688cc9d9519e9a29812854f3304475371dd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a55c1c5b119675dcf844f31e349edeac5d79f87909481eb394ff5c4aabaca507dd0770eb7c7e08d565adf49d236c1b9f05ec9994e1ed01a8cb2e6ac628adcf316614f70d7b2fb813d8862f0c912e7459b23794029ccafb11d74727e5813267b1e423058ab13fc76504466d87cc80bd0a3e00e77a3777ec5202101ef44840c61aeb27ec38bac175980046ea39a13169613166ca401ef40a107fe1c03a05dcfdd6252bbd6a35b1fa4a54523d0efce0d45d194612e1cd6a51cc6d0be11078ecfe5691a43e58f1bbfcce28e09f97d8dd1c6163df9fe1e89bd894fec88676801c5f6567a8250331a3982d90be9be7ee5deb682d44b97a0335c20a9aeb851dd7c02eb7eb47354a02c13c3ce678de820d0e7f67fb2340d79f94754d21e6b61d95d1f14d63f27e47d823117df4f4c84812693193efad890dff16b5119dd78ec95653bf167f740346db8fc3cba757f2a43f9f53bee8e61eeb513790f379ca9cb2d074506c9ecad8843e4c450b26d34153164bee5730e0b6f2a7210953f46cc9d5cacfe30a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5d379e24ce1388e6ff8bd565b3455ab74f213581ba2e3422aa02d94596844b94c123f3289fe9edff9897cb913a957c4499bfae6d4fb2700187807dc9adb30f568ae5bdb978f1dc1761a465ec87000a4a7b24372d76699ecec070982f66d261788060f86bb0f087343fa9f25beae52436769714d572bdc4f4ab97ae7d47c8d314b53470dba0a3b340bd211d562687832e7d58e521600f69b8b60c10aa2948c1fe5342fd11bb3e218337bd77ced154146d527d493492ddb2e6cd2255be8967863ef0be88040e674a7b599f6388894c04e41d831b42dd9de2ca9c7314c4464801ad2c72e8c7637f320c2fe5c0dec3e4cf3f7eaff761a0a1760d1144b1186507224daf05067623513b045dda51872ff566dba379451e6aa53eb6af12132c4c4d77a90746b56a0a98147f1e98f2b16941b4cd5ff9936f9bbcb72d427a8b8ace967f5dffd6b5d6f345b4b99e86db01790cae49fac889a0f58387a795dc0bfea7f1c2ff3b8615debf9e7440e22de113ed0a76cc38d84386d2859b59460d7a8242f8d324"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e5c7194c9e30a8e07631b3a6474041c85700a0d1dcd9701b3bec1d45bf2837312d2eebf25018229c86ed492d83a72c6fe2726ff15b44cbd5c3b6676b67e1e1360bf5725effcf5153d2b2e820b90848d36a5e00c2e0c2d8daa3f31cfe7aadddb4babf5b8bf2158611821df7435e2f73b1a130e8cc6151fef3ee51abde04c2bf0b0c1a6922638b115aee943a6153fc07f6dcc4c4bc132f3676d3de947bfc3f446323bda136055192e4f1550702d9f9716edff703570a5f736f0a8ce220a1de0746f557e2c81d1723cd484bc78e7fccc6d802bdb67b94d6be1d48450e4c719063ff07d6d2e01f4669f9739da38f62bfc01145739e291992052f17bcc59114cd5d2c12eea3324e7f9bfdfb1e0bda3e8b71a89dd351f9ac5e246d309a87092e06b7c32f67d5971b89482862ac89cbc168eed944106f647e33c33f27e52ed9b57173207ab0a2ff14e7cae22755025818090fa0b4e6827194c2561a7d43094eb6212b65395647349b4b7bac27a5c17c7903ca941fce3d7ee57b689b2bdc8b547aa5bf8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "686131d0f3fb2b615ab435793456826776a9de40afd11e3a6c4e583beb7df00d6de5bba618ee35e25f9199e47f15c0f5807a10bfbd38bd0b9bfee3ca22b0f9ba07aad708cbdc5545d05448ad09d90742e1e61ceb6b7bb498ea77d3476fd283cc4d379b4cd2e29f1b468f733ee920d16a06f6689643fc611449e4375ac7f9275d553db3f5fe2a858dffe4c9126595e69366698d27efd6e304a92f43d0b43be5c05998e91ef6a73e34931914a3e29ad2f82a3cedc795a430dc877ab5a5bd0816cba7e8cc5cfd5ce8a3bad76bbf77dc66d92652a42eccd7452bc7104a1f208cb0e4252648c3036affbd527a7130edc3da5735229511228abd4cff1dacc1297155cd3a877be79e78020587d80ebe481af9036b83e4108b9f7a89da26ad50ae65d9008fe2374564e133cd6ae1e595a332d08bfbf3612ab7c8b96a735648173691eb124fcb36899df3a5c173dfc1f37fe6f43b7234cae9e373a212484d134f8fb45a34e02b6d9e59d3eeb7d07e4fc69209e30d2d6c1bb763b032ae342bdd6a4226b29a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "edad8c2d141137677b864afb778cab75c44ee960390398b25bca129b61763fd6ad2e9d24fe3a66b8098982b40081b7520a99e622f80d1f456cf5ae5a000e943966460e83f22c80d32f74cd38111517db3711f78126c0cfed6e5b528615804908b3428367ae7a2d68e5e41ff3826e4882c6996c26b6e879d298bd4fe7d917eda57d56e03392b112e0f940ed408124a5bbbbe4bd1fe4e12392494b155e5acfeb7c0c02305ff8bb17f291dd9adab088275691b217f8f805baab6d5c8ec656dbc67f1921f12b1c3670171e81135f16846e831f57f67ae700f6bfcb4d619d3b9348740bfb3ed9e9bab3c718c4fa9ca34d9814b96fd3c775d83ea7729ce0a04b84014552174968fd4be92f281d764a8bbef9f1b6c04e843ef7fc5618a945cb435891e0ae9332af46af185a91747194cce9f3fefef1bd0e6f1c72096053546d72cdce8c764b27baaa01c3530eb115780f2a9eb1555949f6838be7b53f282606a82ad8c56374b3dbc4d50870bccd1b5e2c50f6d32c0abb92d784de41fe54368e9c8f4ef1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9702fab86b0f4cb3594c237ee0dbec79b169a6c9ba83ad6eb3d4af38825fd04a938080429c1409e48e764cbdb56112e217b56f7fc2ab0cdc5b745e078b1cbecbac1dd0fa05f987bdd817c4289ca3418592a1ce84a6357e9943f49fa978a06f0c5cbca2e60a3f159719626e150c27b741481fb0f8e9987b93d72d40f709096fdab57bc3a0939e688136fa819d9729cb7417c18bb7aeead2ee533da70df0571c2798079f663a51aa94e89c8656a6e87171dc3707253b24fbc4342681b51be9418f34a5a443a8760d92bd36c6fafad5fba11ba24fa1a529b583f637d6b251d1f0eb9a650a020aee27f9e5dfe882c1da9caacde3671fb6be4b3af424f8312f1f92eac1cadc65fa1bb146e4d3df14534a320702e22addc9426344ccaeba51dc2d0d3d59a029328b059c7f76dd6a7bcd518530fba8ddc7cd83411b772fce1ed464d13a25385b5537a053e3431fbc958f04d1a539401f6660e5c7019f9617e6c4e5608c409e70d8b16c392e6b3b77860c3d45aa3824dff4b30372a061609f1ae1c88cd0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0eed6d489bde718f00aa338eb64e156e44ca165f4bd09e59ac893e02db61db21aa1a475731bf1ad7a907c94b1b080d33f6081e00dffe5025720b9d828523a4afd2fdf644dbba202d7ee2018ed999de038ea4fc5d96119ab65f0b2c9d889a47aaccd9c42dc5373c8b64f27d2a2521c7dcb8085b8a51c8a5bc08296b2ec2ae980c98bc8d00936b8c96805eff7c09d3835c1479f62a8b77057d8e8381a412c32cac8aaf295bf851a2711466113cedadc5e90c8d0fd1321e6a9015b798eaa66a41fb27a53b0dc80525c87663eb805e76a3853961c12a9fa6520c4902d4d69649b5543b48fb3bc8516f35d4029dc4a140886396f9a69529e8e1b7147e0bcf5819dad1a5340cba0ef530da999325572916bd4c1181cb90aae0be3e4124e08663ff26c8749032ed664115cd20d4f92d92adf2cbc704ce99e389aa0e3f0cd8c1ab905d1ea565701d1075863671618a94a47ae8bb2a2099ae390056beb9dfb1449e363cc86e5e662a176769d1434f249a21a8cf84a69e8a9d2df87b343352fba9260f88db"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e764485606b1b477efa3ca4765d452e2b8fd97c8a1c54c51d0235bd1360280cf9c1f21c9a1c148c2a8e560ed6a75d5c324b36d0148aaf20fb2db59c5f461f3399b112cc4bb4766de8d9789b8241c7689a5d296f091658284ee8b429bd3c3c4164f9a67bea9901c2fe89853d6c616921f304a93cc3cb4b38ef80b147866e0f7777cef50f2dc63ad61adb3fd522ec0b9feb3fc9781e97a0a0f1f6b1baca125d9d006de6d3befd9f823bdb307563cfe63ff49d767d68079386c30a03c373fb3cec92c66846b6b87bca60235e0ed1993598947aabd1fb284b0ffd3a4b4a69c5c79483d507d790bde13a6a9019c918736d511cfc4793f75f201405b62b256528d377411217eaa2789b2e839a8cda14d1ea408a3a8bfad6f6acfb33f0d9ea4aed34715501c807541d8dd5da9160b11c7c0ac8ce49fed32fb60a54b1e031f203872a6d8e5b4536fb25ca2e577a8cdcf8843e3715b97983fe935db972e6a8cebfd42c7f348a02aab0fd873ba03d8829d88dc2d0058a9315c6fc5f035ebee4c97a1d5ada7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e220c5504ae996d68892965dbcf9d158739387c655c4c44b8695f3f5a00350044e6a3ced79ac812a78ded031c406ebba2d3df4223639747ece73d69e2a5788de752d58a581f2b02dfed499620248b48da2776fe349897d848b8121837714cf29e3a929c34113a05457e5914cd9c14bd683c9025e1491b9ab4865ec25b281ab9696a9bee80d2b32e9ed3e73c162420800c2997819eff42caefc5d193bc3107c567f7f364f3f1b8cc6c8e07b15d00eaa698fdcfeadda11149bbbf0d2ce84162b5f2fdb1763c0108e540c9536318b1eb67dca7cf603921333864a6eae20724ee53495bda6ef5e81a563584edd6a705a434948f0150f711be95d763627c0ba132b8592e9022b18542ff2c314acf0d597fdfc3f9ee3ed617b78cca7bef4cf259329a9ad95ef5dc636b86434e9e7f9f719a9f6022ae913c19737b81bcf1b4281f8561e981bcaf2c38f2265f44755cd9b2311b3ca157d317d98ee273b3a477dcd7954b5f0a6fcc629bbe3338d06773a92e07a8cfb32a96a28cd356acff3a6d060f20bff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "48334ecde4d3717bde04a2257e8aaa94f5383fd49a8e7e6933f60958916d223bfb32c8324b50916e72d4ba62b715e1298946efb8c669e3331c4aba5b4b5d885e513bfe694de8594b0c268a44e1916e1d9460aa419d7e8fa8e5a69b96aa0078a3072f40ccf87685a0e4efd1f88822e2a1491dafb2bf34ac5c7d7c93ec0311e4531f65a8b35f763e9ead78d708e1cd3a45a70d84705e9684b00cdde81b265dc1222a608eb090a5ca0aa0803945a8e5fad9fd13bf9199119051d0fda7a0ce3a8cc186a6d9b4f880bd8d7191c9eb0ead9eee5ecf3160f9457aa9e0e1913a9a18cee98a5fc8c74825f916a002da58e47a85c98e2de0da9ab39d6ec326d5b795586251b8d42866ea5e40d9738d21132fe7163dd90814a7f0f308ba9883f24ec123c9711f1911160034c9d3404466c5f21941129127477baf8aa5e171d573b568a11175451f6fdbf081e976eba6c5f79af5ca99d73dfa2c468e0fbd7ac0f3acdc4755795e09c2363c0b145d23c33e2a0739c953d7bab1bb748062b2129e4eba15c5b6f2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b1fe31339301988be9b729b9a14ba96cf9a6a549ff66a9ba6948af2fb8b2651baadc2fe1fa5ec7d466687553cdd06349c6d76b702aa2ccb6b76658685c7e1c4abc6cc2902d79ff82d3d6da0525be5198d07388b62b1173f88695b03108129e2915822910f25007a6229db142c8923880427645437c9f180765464a317fc882b877ef66d913e6dbbc6701ae7e7e1cf0003d681135a76f59fc9a035b8b6396c66f2fc94a4bd524a816ec028cb43da0e611d3ef20572e0a6f2fd33659cc85f2a4256a4badcb8d519aa780a290867f1a0f671d7de122a3b7c2ee474837dab5a6309f3f90ea42eac6ff768cb82290eff6fe0229333c5c252a650f4bce41f3353799e093a2193f9d6da2e3127db550877c32192b1dcf144b7981259c3e3a5724c993b5077cfe4d5ce3c76de5230d116a556e6272cae5e1ac6a2fcd4478668fd1fc4ef71226dd1ee36516b8b6933236119d4ec7e85d67f2e2684089dd4843cfb4fa0436a1b0195d0f28c52c35236f6f563e3e937e1df08c33a40d2981ac9fba210a670"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aae38ac4dd42a1a038aae4121f0bed8a401fb8861e06cb96c4be4ff803dfaad82084113998081fbabc649238655f2bac523d0109c344bcaf3c2a5613ff8151f94dc4178cc56ed45b31c9935a4d35be965619335b9db9d6ed312d29c4c38aeed6893031fc0f0c9d86b4155cec28541ae7b17eae83243140f8d0df248ed9f921a3184aa944c3c1462495524f25b0fa00124710b36bf03aa80cd7cc549f62578031c6f01cc3b182af18d5f29bcac956e6ba549afef1f5d65e1361f4bce878bfddd526110d6b683a64a522cf56b8f22c2d6c8d181ff4de2b40fb2345badd8335e09cfad9f1e9db86d319f0f510c73a706f8191f7e5022497633867fe9d0d850d39107bf63e6c42513501affd5e253e329ba1145a650101384e40a804944f9347fcc3fed072832a4f2688588340bb2f53475bcf16a8cdfcd4fcb8d2ce874d912459a631c1f00a8e7648382c9f485c6bd86fe02087cb899c334ef7b5fc485f30548d0924d8fa68fefef46b96433d2e806b58b13e0a4dc1ceb92e61120ad5c2734f227f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "adbf4896d40ee3a9e30c01cd0392d508d3dffdfc36fa624e8040fbd578b1c40258e8e42ede92830cc9492e323166fe56cc93f440e57be3be96c6e6ed8d9d9540e5a68942d8df8adbabbd4962ce4238674e5d7702a7bb4dc83e0289a1b3d57019e278505fe66bd2b8901f832f9f563624cdb465b59e95f1fef1432b728f0af67b3d171b6c4a9b98a582a12c627405aba6e5a9f43a8abc90fa341b56c39afc84392756aaed1659b4c08b70588e65d9e4e245c598a14737bce01ae0c0c16c9da5cfa7c868c264ec46c7f297982f6e009093f93275e2da5e74cbb02cc73b6462a581534fa53cdae39ce37a1c66c27e162ca559aba518a8509bfc827fe4ffdeb2232bc01fb1c92ea8f23b1ec780933cfa0c8df707baa2a796e0190e93a9f90b05c3fe5e5128864b08cf0e27296ed862900e227bde557ff47eb9d7f97762baa59ff5d22b6461af29dd2f02b1e1e20e432b7dd362e8510998549a23857f083a44ac2036a925b92310d9749d8e85c59dcb5fb1aea5cf1cce6cb714dbd77510ee81015bd3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "38981944b5a9536f7eec9ff78d3b7c1203e94f50313b30a654694397f597695141c3e86f0881923e0de58e0220428fe362c9feabd088d49c0ad93bf52e322b8ff4215b122ebed895a29ea72c8e7896d37f0fe49ad6c9433d4ff16258161ce21204a908869254f0fd1fffa383d8a23451b5c6dab2e9f5481f9cb1b427ea867c05abee1a76a130026908396f2b5facd6426b2a45e26ba6d623e6b56e4a0bcd6f88bf67c116853eac6f29355d3b68a074eecf7ce4daceb68892d078afd70d0f0fd906a592871356145e3227615d50302192dc498c61e79acbe2d2b9b1e61c2c18cae80155cdfe85aa110a6554871f7ee0e64ab3bf61a94c8c42369465d40679cd348928ffa582e678a618c6e8661b51c23368794e85ca699edbdb08d73b83bf66e945c18c7732b6ad85ea0c89ad880dae3de5d09f4ac32fd820360f197fa4ac548d73e44732d9984e46067d16a271469035f3084db2fac481d1f14b61d8273ac320e54e87c9627d3bd2428539c00366e4fdb8a367784e75460e35b50e111aa22b6d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6c773036cb6a6e2cefe921c155dba50e1ca1aab3596aeadda218b05b5cdbe99174f5e6932df80b349f557481e51dd8c3b01777d85dce5ac2d88466646d0a6db82ed261c5a8fe0eacd8913dc941f39d54209410a2f4c4dd4903e1a334aa5adec17e21b274c327c1c8c577fae3572e1acf88cc0567f60930fe7d3582e06ba1cee542985766fd2a5bd324beec1a0d7bb09f6e29f548e936c1966d75607275428dfb33e293d49ca216caf2074f4c8c698f9a02dd3191abf0df2750e56808e89718897eacc64fb6a1186512342cb041b55858867bc42e81bf67e94390f6c628863a6f5d1ae6c28caf921eac0a9738e35799573b862ddb80698c313543e256c0b939152436b8c617f9c0a6db58a1be76d24741d3dcec36a1dec76ac23e31ecca745c93423816b6197671ef8e905a18356494881baeee6c37df47277c9c978b978251929d5dd23acef7e83306b41d9831750cc0af3d67ac10d741f7f78dbb48be0e55641af08bc6566d332aba39710ae2e9d080daf44444f4886bd8b493d6885ff6fe00"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6620fea7f9ace7ac74c838dec6ad523e77af793103ba27faf2b6ee464984fe04cffc2e5cb822a10fbe3ab4abc82d96d7090d1fe468ab048bdd341550dbf19828f96654e3db78df2edc8cc09e2281829d70ef84d2f9d9ccbd860bdd61212eded03643cd68075c35ba391dc07dfa422b446bbc834f5382fdbb9c6b23ba8f7f501fc7b52c6e18ebbb42ed7d3e43d7e72911a2f24557b81b685644df9777308ba2a63d0baa7c4d744db45b4dbb756dbb5945ef978c3e140ff851c7128bc43ab48ef297f664ebc33a3490ff0f95899dfc7c06561e55ecfae73406e7b0bd9dee29a4bf9538d42c74ae0f9759ea2fe7ec65566d637e23fe645675e6ba8fd0ea50fe6b617e211bb79a471188030dbefd16c115c67c8ae6854487f68c5b8c196d046425d34e91da1937df0e48df892ee3291e2532fd2f7b0633fcfb8e9f59d03289653b36e93eac77f00c3ca751dc601f4ab7bb1581cd7f1785fa959d85b87d7fb44d83b6742728f8a6311096f6d73f282091745b56eec604fccc0dfaf019eb96abe37e17"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aaff23fd935dba2da87b10702f80d722c19a81a05b675f7e0e19f6e006e37eeec3ce3b05f11b6a5e493712369a768346c948c657939b3f1aa9857a1d17775eb0c20c2c2b95514c5f158cda935de07e076a0b7e8e69b0a896e9e5757510f94c4cbb0952c804d882d36870497c0981ba9fe7419062852c3a3c3ddaeef9d5b59387474dd4717342d30981289d81689cc101a5bc60de467b19759b7cefe2ddd717ad13e65bfd0158e394721ef2c1ca0ba98af14e5c1d88ba05cbc012c1e944f7d06c4181940c46f64f70debdc474b3e46a37c25f8a6435aaae4081bf883eda779b48abd4abacf394fb5148f4b3f0b7e89ca8c0cdb3c1ab007f5b48f02628a48e67ac51c5dc74976705febdc1f32ab75fe8f683becb6de0f9b81fc76445d8ca68bfecea6e5ded79f92abbef664dad11e508d54c3a0508287c42b687b304687e609dd764f800855ddb1e6dab4b219938d0f890412f74742d6c1734c078ff1fae54bd43014611eba7e7c0c9dc399e638d160410e081c98694d82b747838514223980495"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e880fa8476ba3b887d5eaedcbbc8c0147c9695d719e65242dea3364820908965088d9e89dfce9faaa94cd847282778e0629ab7ad20051656ffdd59020d5b3deb36dd680c5c77ed74e0f2c7bb364fc9b4affa04aa5a1f606ac0ea58928e0e88853acdb6a6883374c28833927386dceda7d5e99a97304c07a75977c859f5e5d8bf7a77130036c449c0a9781eb0909d9c791a1cd7e542a25d44cb11c53c065773392746f19678bfb93a0c5e1347b919c3199570884dc78d2c04924993fcffbdab41d3bc811e965f16742ba802b49946e1e9499db4014e1e9c5a22662ac5e437f0525fe124dd02e2e850e266478fe903325b1a0392662e7b0843391f93df870ef870b543aaf6a5a70d87474d8b013463a10924faee91750fd64e4d18310512756caaf970202401fb878de10eec97c4502581bf2c50d5d339392ee2e41375ee3d5cda64a291fd9ba853bdc7f8ca158d53d2d59c0d049dbc73179fc6252670ab2dd2ba1a30c9b96646bf5543fa2ca4e02d6e0547ff201c831262cf656e5a4c1ccdf693"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b42ad089c3b4de1ad32dbd8f46fcc88abcd7f7099d3a95d1903e80f96e582fddfd94f56069385717fa3da22a281eb35d00ecf4392c00c1b518a1e54ca7d9971643d6c0a75b15518ecc46a73b1108026c2e89bf1fe153798e70420364e447f8dca5096a1b7bea16df4e38ebe6bdb7d758d839c3c61a7ed7dde193cbccf4f77ba555cf65c248313116a4d549c314b62fc5bcf1bbc649d336f46fab6a28dda4cb29dba704459a9a25160d05595a0be63d1fef5ecf3c1167c06868f3dfd3cadc5f61e1aaa2ef6cef1916ee215a2347fbc26078037e4c1c7fe9dc40a0e151daed6a5a30b6b09a29733599bff959885a1e88482da0e7ff8186f924ebc6aeb391c93883a682b6d66b3884ad51b8f1f7c664bd31fc01b966b68d26d6062bbc52f66f020edd561d38417a780f53ad9d8a1219df6be31913e7006f15648d96c3eca2b54c4258b78a27ede8a4a8f24eb4a04df289db6fdffac936437fdebff11f38cb1c958a2aaf68092564f5d9d995394869d9b45e8bffd28d60224a6c7f30f32792755ab"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dbaea130782f159f2e7dbbc5d61d7404deab0c7e604a245a73a7cd1df1b48a32b7caea2180a2e3fc4d66f706aba4aec414662fda761c9b56d8c8ec100708d7fb3cb04a1e82385eb5645a4663d7b59d3fc2ef2de527e4c5998cf5ab064ae1833c8bbd714268034e7e269b2eeada1665298b468915342681e811d93ca0b21a847f49876b9a44b62c5e7be7ec16bd40676d31da7ca5cf3be55092b9dd5aefad9dd4711199ee6a806e4fb971f767277302bf5dd5a1b85208ec5a89faca3374854799baf8771e4fc3f98ffc0f71825e895a48c9be2f7697053a906a41fd9a4d853799029a7e4cb05d3d4764419dc3ea3077c9575f47929402090a0eac0b3a004a64f31bfefdf315f8080a0e532698bc704aa9530f7095aed9cddecdc4747ccdd2fdc9e3eb3a40eb7d3b432f00bfa237a082d8a0892f04bc11bacbb81c7c7729da186f6c9cf5d0840c3b79f89829fb061a6d0e1a983e7e99866564e8ae682a73c1e6e1e5a9b2b4d3e308ce8a7b7bf1987da5ddde05b34a92f25eb720c90335375c6742"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8e22755f152bed807d5a31f9072dca0f388e761e24a0208475b07764e7da9fe76b1653cfedc0575889eae4adef5cde93e36538d2702808b4056ff59123797fce02442d08a4f4e4b957e7e597d732a51d81dcda3f5158a3dc7239b3e0d0598c923affd7f06e31608f950a96eda03222772ca14a3d02eb00c2b6bde5de36904bbf4b81a3401a5aca49a2c0fe0962d8443a3b3351309f8df1e83e64e3f4ed20c1a883cd61a32904208ad46eaeaf960c4e3c2c39af4c21be815f9ab2118af1574f3746e8d740784fa97a583133eff38c3e2b558d8d7c2e0276be9e01b6cb22e25defe0c52c0f68b929cbd62a034ee2c7a63ba81144207f6f804bf18543e8dd487977aa13835e359423db151a3c5347dfdc89ab7bbebcab001aaf78f39af10b923ec24cf795e86569cdd10a3a459e8cc30ecc496996b871d5c425387a986d3dc93e7cc6a5c058974af46be2b617ccddeb85ee101bac2dea07674943579896ddabc9533c560ca5f14da5ff031cac5b1ea587751710674e2f023211566a5536b9a7d8e5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ee8fe865ef88da82301e8724da2ebbf270a8be48d7e6e6d32bd57cc03841cdb6acf470ee716eadc23f155371c4b6b0183062ea44c6931922f2e26241cddbb6bd4c13cd7d74fd8bedc9d072c040508785042b218b55a42af61f0b52b17ebd694c12cf9fadb6854179b3ab8ac7cfd5b6167777f001554abae331b09f996afb5babf3292ff8fe9a380fa6d7bfede2f7b73aaf4684b3fb8a7753602096e17b05c0bfe531579a303eed596b6c7e583646e5746cb917ae3dfd1be2f2b04de3db7c32571c9d45c829df0fb59e9a0a3217498067fd121ec63b249566113aeb2a1733f0c47586144d35ebdceb79375fb86343e5034af795e6d197e09e21cfb9d3c2c3448dcc7e9eec34eb3f009575dacdcc25db9ed33974e279958229e46516efbb77e6274c20e6d86b712114c46da84b581e1a95428795563316b0f42667d2524098ba270f58e60c977136b89715419515d2d53be0fd22c54291d161521551006e3e413a006c8964b4734636e40c06c81171df51c534986d90665bd60d10f34b770ece5d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "03e3a6d8ddaa0dc539796b84822e3e3f59ce2ee733246e891db71f1a3550b0fe17016382a429c7eeec8fbe2444c9bf4a8de7883ad7bba6a527e15cfbcab2f5bbd6dc6d8474bffe41688b6b73ebd8874b6db8a2d025ea9af4000059599660296f890d70d8cb61ca077e463e1fe3c3cb81d0378a603b2fe4405b28c92a5f70e06ca283f32d2650d7d04e252ce08152721b5c6852526b14828159bfc199467c901e658edeaaaa6272e8829cf1fd2f802f4aa565396310a19ff95b93e6291d2dcef36bd90eb3edda917f4fc1e999e335275748203ca0078ef37d0f7d4293c4f5fa3d90f02a92d8bb77922d5f7d02176a329fc1d587f80fa1c247cdc2bb654d2610b2a8a3c04abaa04ab2ee9533294290adc8a12b312449b2e5deb703b086c7ea4887cd8b197f1310aa32694516accf4701ace7a51b5264ae45d7d007294f141387b1761a0568b7ca36dc23694eddfbb7658f5836a353b1029898cea2e647f5e14b2adb01e8d1fa462daf26280ea94f14a252ef5607ce31d910ce1122b323e9a25273"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aed52b6e5941a4d7225768a427189ec37a5640f8083827f922bbe563b4e96ddd039e2774e4e790a55bd0986936de6c64c08b1637a1c6bee932f24adf58613d378db73a947e5ad20afe1549ff6e02b6a7f089a97e42ffb2ad5fcd05c4d49a2d82b9437bc34043ec6213f0ac593e42a9c9d0faa96534dc30cff56c8692bd71d376d591b10c450daf3c31b60b5377b0b4639dfbdd6e2ebd5c4e0c344c02dac5ceee2b661b97ac670564604a0d2bf74db73923089fd3a1adf60799289cbe6dd63883818550233e45698d3e7e4a9b0cc2078373beec13e8523d0b118e15705abdc804b785a7c2e8a8ba7106260a5dc860d8a59b717c47817d40be37c392f5fe11662bbd16cb15584f6bf9b5bc577cebc08ec6230e0480483dff16a56ab2ababa26acce9566a10bbf0998b78e1b4ef2379d8a2bbb28da302e6f43d2ea509846c9d079f723966c969e5c1dc383de47fa2571d9e515aa343010b1f8f1ec1d588ad51bb6742f354a5547e5b80151a70d6320c93ee66951b6d44472ab3664f03a3cf309d88"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6cf1b3bab7cba1717d2a31fbcf7a2218e4f0186fc7488c3054c2193a97d3824dd15d2e15a7268676a2740dd428fc55572748c8a0b65ceed42ff18ed42439f25664d7ccae0c2b72e2578cac39c69c55d5ab852a34570eaef54db1f91dcfb938fe7d822e581a3a5eeacb836358216ddc7d0d8e56d9aecf1698079f59c7faf4bec74fad37352a1c80c737712dfcdc8f0b8240d478ebee8fc626cdea531365279ecca43f45096f878b18eb71cb924d7454e41bf8c7fbf0d117e082a7310dbf883b439c315e366c98ae886158d276c05e2bd732ecb32e1c5ea05d2cc8d4585c7d3af5b7cf72a02c0d91eac7edaac95ca47efb9c0cb9f2a519c139bf9a6c9ac59de0cdd35f5b6a17cf7f66b822e62aa568ed3046c399e834fc741420200d942fcdc648fecdf186f46a920e87e1313458a312424da15417286ef53fd08a9e38d18a97a819100dbc7b8b43fea385d15f9227332dbe606d795127d95e5f5b9794b81be57d49e48abf11d35fe52edd54e8dd0300588a0ba62047f562a5abf47f0a645f0d10"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5898c8ed989e4c4a3780a2868ff1b4801909ed8e0336b75cd32801f169cd81aa16c34dd21fdc78aff996da124f9edaf3542247e00a4cc5e47eb9a837d07984fc5d2f0814d22e274851643963d349a43167a0659549970c053b3cb4293769dc748c6f9d15ccf683714b5df003fd7601f9c62c2c31f5245ef0676585cdc008ad087b8237dd17cb8d5720c98256c9a46daea423fee19abc659b670574ea145d5057ac3837002166ebcc14ccd990388d533fd12cfe7e900c6e80334b9bdc89164dc4c255ca346775944337b6e9c4472a2b90abee876b3f743842ac46e3028815be18af5e405a8f8d4a5d9d890716c6bdb49d365edfed199b2d91aab958d839feeb62895dedcdb75447d741f1be266fb66f915af337716950a4078aacfbe3b744dc44b7d991330f92e2015de7a3ecc6024cdf4fb8106ace7d521f67973a7ec7cef27d66e359989009c68b08d1f0baaa8270ea0323602cda40c9721d7cf667c1f319542fc5eb74b85455b182539497672dc1e20a375f1ba75aa6297ec615d8ecd0ff6e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c353da6e54821c2bbca7bb85317ca50c0ea5486225dae8033c39385dcf3a2fc440ec6aa7dfdee90209cda40ae07d20f7a161df4d17020f620e3040c376f5bb952a7d250d9ed76c3c6fb53d99e2a7d606ee1893b8a62c403e2deba0db6fc27ed8f3300bb2a57618dd0665aad48a9a36ee0259f74b084fe9dc90a1c82d198ce0bef8f3ee44c83795f85e254027ba64487f546e475caf2e03fb563779e8ab3fa7e3f5740d2d3e97892d8d786f0a502f71e3e9e8d418cca8cf1d1ddedec0a5737a8c3e5d07388bccf27fe332b8a3c6965c777f3c6a7b8f6539942c791a78c9d78083dce7ee6b60bbc98dc36cc925d42cd2983176a9fc88d67f8ca1a325febd59086b10c3add5a6573f76154173763813f219e29fe466f0346a7dd9b6c952fb8ff6bd7a0b19baaeb9427fc554fab64d520c1b81a00887be9b50d34507d47dd347331e3948e633ec0738a83deb5c379bacd7623ef2b89c994db4825cdc1ec39113431166e4e240e73cd6635d9a9af25f72623fce4ae4167adf48d24ca19dca1dfc7993"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aaaec870a8223d256457cb14183889938abb00b21366b90e36b3b51fed1e170c0b3a8944f5cba54b8d233879fda1076a2303309ebc04bf66ee4295030ffc6753f4eed4a138af850139defe1544d5eed4e7e8b75c6c39d66fc68e72921b98cba19f5dde1302e91336aa81e21654892dffb0032b82fee80bbfde4382f22e71281a808b81d58b4f335cfdd6b170fe0998e775181d0304e1195d6c2fb333bf9684b16b10a06dddf8c43032c8870739b39be55e87b0a66bc7d3d65751083ba92086a7750f965eb2952c745747d619ef4ccacc99ede9e2bdf25d62028da81afba377438222a053ee6945ecca2ba227c6da44397951c5b0e28e7362ac5c980295083dc0bb7c9783b0bada0f2ad61e232be626eab91b0c52f8774cc3331f6196b4c16d21e76a3eae64ac85c525c90c670fa422df1a23827a93563044c36af04c7b7c96ae7eb9833dac917e097a1f6a5951de61adc1f6fa3b6aed4edd4fe0d3bb796a88aee0588b8d15bbcfa572a6e697b7d23087d61f6db7740d307f5edca795188dce0f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "41d3df075cb50c135e1d07a11d9239a9102dd3672169ccd072ff78e7e955f61c40d2971e10a4825205d067f37eed21f3487b9a512d0c80f09d58b6cac1689cb25133dc840c11a94372332aba692d5f6157a1559e28469ef8a57628b17204b2d81a8e21c0d91e0cd15633f7e612a127f98d64909b71bf3984b24aeb1ae3daa86ea44337e22a91e63b7e1273275e51dae473b0ce61a2e3ecf650d38fdea9e05bd0e83a564dc95869bf1fe1d19b5be985424f55581208b09f6e26397c0bbd51af1b22198f24d483a2e234f2f90ced3b780f7323f29b404dbfd517b4e53bf1fb40d29408812254177dbd7939347d0fd763d2f18fa7e83f0effa7e539a3061a3b7fe77d9b5df5d50600cf39055116f235a60f298512b783e22fd83935083185f565c9fafcd0f038e55ad23246ac5b1e9b6cd777dc36c889d4adce69494d45d5e15848f4ba57169df4a28599648f62e9919861f6d5d8c4e1de4e5601f9e41fde562fae0638c0988bb0c0ee63d24d002b67ba4986d1519694a41ce36cbf20c907d62d53"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bcccc5b52d6a7360dbca47a47c6a360eb5f2f09bc402edc26e696fdc1eee72ed38b9bd3c9472e0e4336ce74dde05b4e94c6933c2763e95e64ab0a1d45256d129ec8cd5bc0a283f2ca0fabd18ef0ba2a6b66dbfac9feb7ff95fe76d443d0aa5caa7095a38619d44f07f5152c44df6acc766859134c5f9c9b8932c10931002e16564b074b28e2588faf7f127c02958a6ecbb04b3830ee05553c83ca8a6d5b1c6f31f2804276cd42e6489693975dfb1f17c09fb5ba41d9ffe597710a8f4d0b64907b2aca89d6d5beb26cc78125e4a4cb3565aee24da8c210dae2dbeefd2d468d006420127f49f5d8e45eb768f9af9eb54a130fe327bb0ea12771d4a6e36e89fe2367e1b373f7c46b34a67c42b165873bea2b763473ecaf60b3894f76bcbd78302bcb1bdbc9f8f42ab9f15c0a2175234074441aaa8da806a5a86880ddbedcae3be07e86fa1700c2437e63c5ac263d98833ed989249cd3e7db8f75323b828034fc4c7dbbf02eb8e3049010ceee24ffd64bbdc294fc1090c5998ccf40098c09650418"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "291f4b35a4dd89e9ed5278e18d322d473e435c7b9b611bd62bef17e6ba619c9e811a295b5da39dd291b7c29303f0cae07ece61b8f3849644f34e0e3dd291df0de5e7225aaafeafd3d07e8e1846b53e0ca61121f91b293a3786fe6a23fbdf15c5adbfb8dbc43540721367d7e9db32588d7651b329985ed3602fa70b3554ef00718155054cbc9f3985ee0c731b05f4552bb64759f398bd36b2984afe66b50c51aa4bfe8ea8a223b827d24904e8781bb1abd5667f731009d315f37bd8b3400573eb96d738be26b0a13c98b147e3f99941ee3608b1f38720c55ffaedd8fef9f815c3e1c48b40134de9553f38a8f8945707d9bd0ce4edf51d626b15c522fb29852ac5f45e8c8fda54bdc81be05088372b2934d7ba9b73c081ceab58505f9080dc3c3941cf3121f5705cd42d9122958148b60740aff97e3e55eaba7d093e1fab65caaa065537dbefc75a3067375694e3f8b7b585718de51829d13e6233613d199c1dfb3f5d16bc056f768253739282bfc248b1870b5c098664714e3219d3d3a433c5ed"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d43971650646e5535fe0b97a8fc8dc2bbc93140b750641ac2f4302f5fcea941cde611894d856b7c19806bfc7c7708c100254b2e4caaa56f6a3a5ff4e105058679e07b291eac95d8bccfa91811d6c167205f49acffdf0fde91c15e6d3ed37dca02d28ef25c7f11a910c67a91e996fcf397b814cb1537da377955d651d6baccd662e9d5c5264516e4e0c6d396fd5aaecd9a093bfbe8d0e8f9b64a2c84f8a2874b1a788cd94d307658740dc0358535fa1fb545df3125b7ae19f8761a3ecb1ddfc24c1ef754d166239df5bbfc5f4666c588b6a07927e3152a2cf5008a2f718499440066c59dd23c7258bd762c8b06bb12a89dccba58eb8c9851455148296462a2afbb2d392cde73e38d2a1e01ed5b47a85ee3033ea02f1f4a4898c3ebdd5967b88811727fe5431c52c8ef4e58c2e001059e8fb6967d37f819a2586bfc8c715f842334054d70d26882026b410c251a17b89f052ea23dbb9407bec32e2e61994bffb04ba11674c15bade539faa05d84d73aac4966dc075ca968bba6e5dbd8e16a66082"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "75cc5277b4df2add60a44bc66ee8cd4b62e19f1fcbb7b502e139b26c9b7f16c59a82041a1668d530522131e0b602fea4f5206a59bf793657bc51d320594f504afd7f681627115f49e50e2f3fc4e745b0d7c412d1a37f8b8cf1fc53c25a65b0bb18ea45667caef3a8ed608896741b57d7bf305740e238cc71e930b99be530e866227e0ef26a82f5be083d4dd58b21a3c5f01f29c72d265afce64f56e66f85373939185d312aa83e58d82ab01ece9a4ba5e4295af10d2e563ff571f8a32e68ae78d667af19e17cc1f954620184ec228d8e8982f19c0e4f7a10cc1bac881967371be184b78af4116ed00c7d4d1fcc3b2aa66d28461eac5422716d0a7bfb5d31d79fb4d6b2fb5799d7c86295cd4bfbfa6bfd6c8c35463885fdadc5e5edc2f5135323253d717d7d1e091be6413cdb898800ad96b36e8d2b7c1ccfbbe6a97f516eaf9fe08ef3ec6c902ceb54a9593d65d0976c7015e3a7e6780f238738d3ee725a16a94041b09484acfa8d010d37b78febd3d7a8a4e95d90118dc1897609be0854274f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9b13eeb9c2d90c05aea36362cf7c99df17dbee7174efa2c2ebbe097211def94cc16943636cfa0ce56fe72254ef79558e4edf20de56edd93501853d63b009b00d40778fe0a46f3a220d0681cf1dc54e3c3f9578f69e9c14055c73a6ca4e2a2cf00e33499879a3c4f6c4ad928535b40220e6cc49a55d2f809181ebdb6ae6c439a235cdd36aa223e56de9d53054bdddfd9514a038b4edc4cc8145a5e37037b3b4bff7e664d87ca6221d7e22b1acd8b54a9a5c6da5da7574d2470476cab1785afc7d7598d4ecc7201ad0aecc09a8615f50ce839c75d224a1771cc29e8a429516529105ea9f8331d1b0a2d1a52d11663295fcd24245eb9ea04fef04d5d17dc3a77602ba98491bef151276a0d6e37e31fdd3b0a463aceb0b03dce495c9fdd85449c305f933dbc1b3fa71ac2853ca04a67727acacb77c48217446854de289e704eeb4279cbdb1d4abfb3e06a2b7d66e0eea608aa5f5843bb957c44902fd1a8d1121811ee891adb63a8fdf6538569a2564d7181c7aa4d4f02cf78f6ba928b00ad6544da9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "577f6e42fd397449565db814762df3efc12973529b0b9f825bdceb5c9c569d8f57da7e97f0007c23d8f8a88f79ad079644dccb2a20bcc56675267cb8d6ebc18d74dc9ab58b1bb508f3b30557ab6a09842d0c02b58d0bc23b6225c551364ba6fe15154ac2c279a2cfeeb7dfe5e4226f24802df3571b72f71b52f99cd2488008eea573aee351508ef0af9d8849621e5603158601444732b6f62185adf4134621e519444e4844d551eaa0779df03f1feb2633f6fd293fc1d3fe2ac1ade85e6b0f6104bd537f67fc09a21ab6f32cd98ec916a0e5e60d385cd4a55644b42707f6e4ab1558209521beac521960c1b3960d4cfd132e5454b18efbbaff1485858a1258de95b871eafe07211601b7f116d3b970fe36cac65c445c62e8473c544dbe9dd03f51d20645fdcae8c918c28ee42d46b8370787ffde9d3820bde2e13cb48d555eceb1db30b1c686d2f01ee83c44a07bfbbad044b786d6d02530f6a101f7a1904cfb3d4e3cbd2bd07accf88bb35c104412f1fa0994ac8d57af6b70caee6186cc44b2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2bda4a6569e430e701b1181abec2424faf9215a0a72790873f36a0fd935892b43b221596e840b062e7fd05b284b354e8d420efcb9027f1f4722a41c83813f6bc8917baf7046e4491a1291e606fbfdfdf8a18093d1a521d2ccc6a3444d9006c8d16721dce5fc82ff9da22b3eaa841e445ba58a40ea0e96cfa07d067a3a0e83f897fa941da57eff9ab5e0a9b6693dc36d471dd43bdc5b71fbc8d1fb8c22bfa91ea846b4d228e474ad999c2a5eff17ec85678b60a2de1430286f24bfa7ca744041c1c54bf08c9afad6d7387d318cc3980f2022dfe6abc6c15e1321dd835e684f61855546a4e6e74ebc40607e0878d61eed6c287b5ebc3c1b17b2b7b81bb91fcef3572bc8049dd7857614b97eb393bb432ead46679bb77b146a9b27b22e3961f47a8fa38f6370849630ad2caa216ce4645a13e518ff3d3e10bb6d390df6c280482f0d053e08292a9f4152b8bfc6e285ce0b4cce29430aed9956b6c43a40983c2140fa3a64b2d54ca29c52bc63bd67e22270f0bd76ead8e86c2b8fd6f42cf2628c54"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "121c2499b559e438e8e0ef2e2c1584967c83691610dbf91c9f7422c92a6010bed4d247aab8c20135811193b27239d65fefaf8da30baa8d9d366da8c264a34d61abdcf731b2d4af79abaec9ed4b5dada3c1e982d99b617d42a4f632dd8725e51c937f7c45650aff47a36641d245d0060207908bcc4bf5491954dcb9ac27d1662afe0718a2caf7d451a4a17d68f67190afd4395c4be53eaae6f096d89cd0af20364c1f6f921de4ff75e77aebeaf048b71c4acbd61e13ea90daf65946d2fd7e38c2f50c71e2b9a17ee81017f99925016b0af93100a1d8ba576b07f3479de16d561b83fffd8aebc5ba373d2b28dd5feacae9c0f3deae0a60f3af071dbb3fe07d4142ef2f1836c8944d250ad5f162e92827e64a8593b7df3c932d72b8bb3b416f825c495fd29ef3c3c67efe917e53ec9a71d0ccd29ce5717326aed80665df34c038d6d6faf52ec0e4201acd4dedf6b9774c97b4c806ffdf6f45fe4a2b62433c1de34ccbd14386db40a2d85956fa062b26d232ca83325c38cb5b006ff509c32e50981d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0dadbb9332b072d1ad255e22a641abfbd36f4e1aeff311e8e2f81b4612769c285ce708e635549111c9d1b125de03da3adf921964d74299900ee85a379f63b2513e36f5e6eb8b57fe7c0b09244a4e592c6518bb498e5eecb43280d801ffba42bae65eae9bcd7067eeb3353d7914c2dada87e7035f4027b25e27ad6172d231fb27d661c3a7d1c99dc5b402d85ee471dbe0f85b9631a6f9314d99debd84f537cdb789249966265b0ef3269a876c2ff247566855a5570528be74cdef53c596cbb7f01beec17ce61b9f5032db0365673a5b48727617f8c4cb90afa4136e4ca511b80b4fae57afbd1834386014f2f352fb43d5d7119b5b61de629dae681f956bbea009ac2bb52f9ee4c33946ee84252dabe5ae3bcbd9e1a28c60f90a222b6fd97b499c024671f038a9aa7c8b7641dbe1443d3aec968d360ace3f9910984042d5256288260d754648f366574304437f2097e55c4a31787075f0b7af2a212969474848459ced0e3d2178c322b6d8edfc957350995145bea5e9ad81d4b3bef38af862f320"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2719fcf01676eb69173e5b862b3a2ff1f1e71ddfa0f393749deaec8a427ee39757d90dd21e9ff74d142ce9df67cc38e2feec46b74957b287d2767380b53b654507ebe96dc43dba78021d71ea7ce9d48c769d0bee0dee2ee99ecd9cdc9e7ce9f1ace832376316ae1d0755db466a521212747cc1aa94301bb99446a3d5c1e33dbbc60fb73bdb2a9e561ceb2d6ecd6d5c92ddcaf2b2eea8e12222a7050a8dedf44e55350a2c4d2cb0016fd95c2298d0ce805c140f75b4af6912fb3940dd610856671b9e354b767eb28a4f4dff3458f78c7add72617420a287ef3e5486b28307d88ef7bab3a737528cabce0d934fb722606c6fcc942c82ca993c9afa54b71b72056de2437ce393704da59413d419ea8439c3b1ac341e3121a03ad66dca6bc3caedf46cb7c43d33c5f79b40a25a922c640cd943fcaa1c2d8dd6c6dc645ec66c2a5e3873add5cddadb21ae51fa14115534fef8abdd153e2b944892a627cfda3faa71508fe489a28b5bd0d285117794239d4717bbd31b41803475e18b022eb458cb170"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "238a0867ac39812214e7293b9734b0cf70ddbd96c20f27b29abcd7fcb037534d8480fc9d9186227fd919ba35602573d55f1cedb9f307680ccdd850ef7b92a663b5907a83e9e786af8ffdd3181752f839e45649e346cbb0d539b1de62981620c12245079b46d2703e968fcd9d55816fcd3c48eba0a54d321c3d8c341004b45e90ac3013897d4816e007886799439525223607c5100f2d8d48d80b1fee6dd6b25664662460f64b9858f5809845010a6e962f2101606a6b52fa5e154e9e060fe8a4518943385a6cc9af1fb57e388544921d849e2dd72b65f8ec955093cb4c7f18783b347ea19b0325573d92ad4cc0518b6aefcaa156fd4ecada18fd68ca00ca70f8390adcd22aca5fbb5506e8719590d9b74c3a325cbe18b96c2e18d57be8d9907f76d156c8b3d265d12733025d568366879d233a9463e26509bd1a26f141c98946af0162fd5595c83821caeb253be2db73b3752d6dd2bf597064d6ccf6809d02ae0756df341e530697bea1deb37fb34840077cd3032ef1ca38cc302b19d26c3ec7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "abf57269b9d9d1f2bd1b8df08ab37e56648ea96d30ec02804505fd303213f0313a789e62949281a30e171176b17132b41e3b2163d98fba58e878d48927ea2fafb830f1c4ee6de870289f3513b2afd005f6b0adda15b6b9abe616416deaa9f9e720d246b4d19907514417744d3180d119a93b9b353d7da0913ecb83d01dbbcb8b44571a00bc46c656fca80ad9df6b2e4fb2cd8cfa9a8fbf6883a9c2dd213cbcf0a3e104c27274276bff2be215229756a4a58052e0ae3132ce018f4406210713ea9391ffe1580d8c0c937fc63bc514ab69bb556010802c5a53eab522ac151fd22417b0101f6dd3e020f8f271b8eb2f6086275422d42fa896a8fc3df69c17ce9bad8893ca2b8578bb1866c7673a3e8775dd776e28709225be821f6fccbd7926d1e18605520b90aafdb6a81554d97216f97697cf52bbd9ef55807de827b94a1e54aa2bfe8c778299b1753738e475aad93392dcf99c607c89c43e90e4c524f0a4754281e442c78fb1264e70a43f1d97df8bcabcef359a232cd1eaa36f4761f459ab76"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "312fcaa24bb029f9178c3a2fd5ee46aaa41ba1270fd166a097679d632984e57e71e4b1eb7cbcbadb29cfff24b91ce2dfb7fb3020e889b3bfa81647c26a0d7b8f1555b947bf869d551e7a7aae3b38d3146e22c49dd358a62ce634028b42f45ada608c64e8dd548815a42f77ab3a2e52f99c034ad0337470b4ef68bdda89eac668cf12b54bdcbb95ac18d56ae75d530d44ad400571f8af25bf4c4656d862697143cc02b5b40b489e7279a52185dd88b54fb1af807ea2d1691638ab84360fca0e8ae40652c5f58b962fef9ccaa4c6a2dab76cc0c0a0b9096308807def0db94e472f1c97bd29f25ffdf5fae8bbd53053d304f4ec214f79514cfe34623c745e3bcf8eab336c41ce7e299da2868ac955f64c738de975fb970dbbe450e528fbe7d3dfdec8b6f174edf706d12c128d0e846c8bebb23b09c53b693b031395df1cfb8835ab7739f29eeb9758e904e93d10499ccf64fec6942305962b4a78023007fb9c7548017448c028dad3ed092c961b81a6b23f9e14de6f9f78c0f559955d1af00e34f4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d726ef3a63208fdda04a5fa68889a77a717ac64fa4a32e51906916ed7dcce303fb0f8a620cc9f49d481b9aa09745d4d2accab1f8ab2e2e60123ce73622709ba8585f6076742dc03071b52c17faee18f6675159c5a842c98a270923c212a1dca4137297f81c9775245afb4f08b8b201635ae7eb5466782a6717bb57f78254198c16326279744823cb381014e4fea28cd3a962d19a194e72fb067689c972a9d3b9af7a14fa63a8ad1b2aba076dc4f750396ef9ab952ab42a1f14d65d9390f75cb7d48a5ac4d0eafda58096924cd6acab19c2acbe1ab0a39a6a0231ca234b4c00beaabb78dfddeb81363594aba0a2a6cf238f2adbe898d5adefbfb74cf9e3e183df5d4bcdf59f87d43f55da0de74884392fc3ec335bf23568946afafe3e1fdb0d2444e878bc38a18a27d4695a2e98f80b001212dc309c3ff24a7faeb24800314761c0024049f7ef55bbf02ac49997bd4b623856553dc813eed9ad8453c83ef51cd7cd2799474559cea86a896607e5976515879760fb245a34e500800860280e5ec7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "625b90b5decd25d50b44caaff4f911e53e2886383e13df40fa812ca6dcda7186ee306c87685d2992e2a5355e5be06d6174ab25ecdf299d0fb5a282874a19bd31bba308c7cfaa10896ff1f5ba679f20b76d7e59b28bebae065fec99ef94e0e3eb7261ce1493f66955f957cba49375def2de39bbe4402b5b673179a86872a5a41568c8d9e4212e7943084fe97d6409ace3e07aac64247e1132072f6512bf2608084f5f79af1120ea04de9c9505877bb81553544fabadcd0278a4e4913ede9c0eb0530a11ad6e6d507debdd37e40bd6ef9252bf4130644abfdcaa59d29edb2a56e0664e36686f261c6c6bc6f09cef1b840de2e7c1ffb5eb202b1acdf40c0359742a267333c1cec0c4b931efd05d7c2c6500e8e2039622d66ccf0aaaed914b479b677dabd08ec13f14a0e6b2760a1997918a186b84e33efdabbb899f8e2bfafa15077bbb73d85a5df756636acf87dac49300ed0f0e6c6c0dd518874fc84bb097ea4a80ddd500a413e42440c2442b8fe42afe39c9fcfa6d1d2415da85a8ad903bb741"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d78b84dbacffe53f9f7b058109251835cfbd56a206a677974a45b7616d66c33c0ddf8c5fab8f6da081339fb9132421933c0f0356354474ea2f440df9d2716583e3755c807a73d4eb383ca677043b30d9828d0392817b64168429787f2845bbb638af68d77590c82d6d7890333cc1a5e31fd140be91a1cf1678806b6eeb65cce02b88d5a69abbf31a16ed3108392467b476f7c2eee9b6fab75cf43358cf353bb2c626062bcf92a8819ac4b2f73d3b00e1e18b7dfb60c2189a79939a390c0815756613f13a7d13d9a79b2182152a29cd498b973b8b00b13ec11af697924fcf0f193aa316a9e4c02cf44cdbed2fbfefb7a01348d72099166945105ec08b3db71b1da6741fb20b5e7206db870bbbf422ac577340ece1d1a93ee439dec9da18c0edf6c89f16a0db8812f187473c8d1c27c65361f5145cc9fb0b3931c45669c0cf8ffbf1721baf92a2876fb9e681762c994dc04806b1103e06d72b852d168ac5b715f0c940e4adccd7a747f7c79b9978eab6c090f938e035d4edc80177b537989daeb0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "654d3d6433b71add296e323b4bd6f1dbbdc60d5f7befb1c7509133e79d30e98ed9432d85a8d123a13ed78a1855d1c9d9c854c516d028e401bfea1d8e58be0e8031e8ce582f7d334421ab504c317263ef33bf743202b3e140654a7c9b1487f0d9454922a919efcf2142f2b9d0e3ab3ce803be110fa7613db80d1da8de04b808a7effd729b751c896c8affdb1172418ffc3bca52cbc1563a5c183f86497195410b57acb7ffe18c2e31dffcdb927a3544caedc5c4f640289317635e5e0ec56e62f68831a717f2810d43265718dbfbf6d2942a5d4245d0a86e3dc17462f42fbdcb9e5ae57b28279f0a394b1e188fe98f3f514642b22d1c26218b2b43aad98a0c8ea73480dcefc02fccad043af277c6dc2a39013a51a24918fc78388327198ca5689c346aeaa2556eeacc63f745dd94d6c8b9b54681cc057fa3abb725c8faea599b685cf30d948b58a228d77fbcc1b18e050c6dc810f7ecb5a0c3501fb8f9bf69689d997637612883752c8a29e51e7b92040f3686d2a3ca020a50ab04361c69fddae8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dc8b26af772ad6eba277bab5d97f4335c95f56a1ee5f1e248fc71b409a76883d29b2ebd65a1bd85e3a365284f632672be93bede2000ba6c3cf5e100b4bd9a699af2519f8917631d7563f4f1aaa2ddfb729118c96a01722ab5b74c93e36bb706c8edba0e43225ed825c41b8203e128c45827f43f98cad8e8ea862ca7538e19737dac5b54631cf68b65624845a25f5106a92a111af43bffde1f215395a1d9ea2c08296db9bf97e2c7bd0d6a37a21f97c7bba3ab7544400e2fdd2ca001115928086c177ba9387fc268770652213012b2bb917edae3416217fc4fe58a916d20c9507f11a9404d36e26e1e2f962168f06d5e3ec254dc8b554db9a33ef99775f246974c3d43461ec9229dab0cdfa876bc86a661f783ac2a313691f9e919363b2aa4d7691f59152e331c18c7f1b0f2d39408d937cbb1e669c78d509dc99d10521ad0e6c4a34dc30b792bcf56024aee4c8b9370aa73269ad7c7142886ecc7c29a6d79890922c2c81aa2f5f0ee316cfbdceae3ffa0010de32607efae35ca5f906b04205a8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6d19c9ab9e470c402578e0fa8f5d82fe57b3103b94ad551a9174e9e8a4533b9571188ebfb096aef7c1103ceb2a93f592c0f55279a2fa36a0ab77592b110ae7d61a5948f5c9b7bb941963a0acf4ceba0767c52bd62ea4e5d22251e2cb366e61940f11bccce40b35bf4137b9c6447a29dcf0f73ceb1954ce81f37043fda74d38dd7b45edfe3bdbbbd87b74aa71c7384cec2ccbac628271ffc4edd8e9578057aa130b683c25bd286fd652c12522fc7f85b4b55ba4d1cbcab096b19a04d81c2fe0599581237ed6cbd2a28b789dc3edc6f39746cc0375a35b86d09c02f4f996849f0333b76ffa77713787ca0845bfada29a27b66647b6e22cdaef29e8094cf11dde792ccb6f4ff3e33d2bab0215bc7438f34c96765216adce5b053240eb815ae2230173cc4601dbeee51bd3192d4af32c573b7698497dc8b9fc6fae53730e85ceea2cc3d9a15fd00eabfeb99f487367f971d4d0c27babb071df80bcf2398a3e0666a04c9d41c39f72235f125332f54d4ba27b48f0bd580fab9ba74be16594f17b241e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d58dfb5abaeb00f79173846f172df4da2b6fd056fb23ea48a4b1c04fbaacf74aac490f49f5bb437018e68260c5fea5ff4bd263f9093394e256a85e5ec8b783da1b296937a155a14cb2a027db233957013c00ea573744b4cfcf58cc51d6787cee3b4ed6f0b23511efb5cf8f553985999dbc54baef408bc5b3ce1eaaf7be828742c30870bd586a63d8c02cbb2517812101759eb290f70c45250f5a197da3cc6620611853ba6130d59cd70f3a4d519e5b49e7b7cb474223dd8a5bebe3f4edb9cc44840f829843c024a7a269673c84677729c4f6a24d40914d8feb182c5eafa02bb45d2d4afcc57751ca5f6b39b6c550876daa5fcc32ec9d4f5d9b6c49a3e6fab053104e344bc7041c2e6b7ead33116cb8ec7c5e59cd4349cf23bc96b1e7b2dbc9f160efab95d3d2ee495f8fb91ab4d53949c946419f36c62eb0363c46bec6d77dab0258eff8910a3df789ab28681a059a9785039529a292c55d431cb6f97525c5d181d113fc24ebee04376b2c22a5faaea5f9431fa48688d014d8a3e22819d4205b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9c7c0260a14cbc98d93b0db2c40028fcbc672b4a213f2e284bdf0078b3f9fca950aa43c870ad59a15d21fa0a16cfb292ab54a093ca93e51f32a325edddef0885d1efa35cfd019b4f5d34f8126a1a65e7e2586fcb5c3c5a4e70153477115830024a2400136ed195982e8c3aa76409c38cd63cd8315751d26af0183c2a6a7919939ab1a626b66106d2cc6e884b7f9cda3555ecc16f96a261b74aca59c28dd84ecc668f1e4dcbaacf394ee62d995f3357e387824086f1da4cd35931390f1542c35251ef713a965cc9a58d74a257a6b8d2f7cff0c6155b88f7d201d90acd9e4127dec43ea842f41647891779581feae92a67c184546737960654fe4d74783b13ddc02f4e5c964ed6e1ccef71621a8b75c47b6c7fb98ae24831e72800484b8c38cab8620b0a7a2719d846792f8a04cc338f462e81c52328f8f6a0e5031334803129ed6c96ef8a5e53ff7ee461daa44595c9da95bad9475ccef8fb0839b78b95ca3be577afc9e4b7b63d357b0613aa4d46a0239c7ddacffe6b43fed020c5e4c7fea9b9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "edfa8852cbeeb5310de2778612b2f7c1dd18227aec6af8b28d267a6cd481f08c0e9ef807188a7b4db9fb2b315e5a6211a4a46cb4321ea9c9cbd5b61cd3a3011094b82d55d561e3fc1d8830ab99355a8c72266ea6070197f79f191931a13d560a5ffcec16f0fec99a0232851c63397b3cf0f561d9c13d6c54b0840387dd7be3ac7e365baeee631eea26c8ef8a09331acae63a49f8f52026447f403be950184cd5c3dc25acdc1c7468a33b672a71b474131853cbe020f33b7699dd5960a5a817c960de36eaa99805f5a2a56b30113b98bd30b38a12652815dd7b972545be39b1c6573781c6907e0d510f0dc876fa404bef9f36ae895d34008078cd49053b4e4e49483fe8198dacdb68b5e864a491c4435dc7a86deac9ed959a6ea6267d9e3120ac2a091cd5d63950f0c91b3be9954252872620dbdd11c7bae1729652061c2e12ba1b9306eb8822863f479970767f231954a863973916ff5f08e9adf1e486403da4b78b654dd5927481b28af50ecb846073a7e7f95b552935993a7d660452fe89b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b66681b04e8b3faee9bac3c52d9c6b6e62c5454f744a19df0c91d94f30c8faaa5769437e02cf4ee4f5e3cfa78901213b54476f8ef2d6e619e6ba6e73205eae6a573eaf34abda20e45fa23d9fdc7d474b8a70809c0e9aa233da83e0eaee1abc14858f519076159eefb770c6c3479cd70dd3ce4aab574a15cabf8d9ed64854f52f928310715d7633f3210e5a3595157c1b39e8e9f939c406318d1af7138faf6cf2d755c213aafb0784ac126e71c4d2d0b1f054c28e80cff43af8fc41c51efcb2c620c4600907061e075efcf1cdfb25cb886b64451e07e20e16bd10b223453a7d32c116c2b34b6419534f64964c95ea3bbc08337526fdc66b5ff7f90ad29615c550f74869c03afb91c97934f89d4aee124f3b280b335605d733e395f2a1bcae5454701397f02896a647aa070db7d36112b427d3ffc344281917dd27592c530b6669c0bc3f191ca578486e036f99abdc5ad3e72ae325bfd6a7651de9b965ee56a6965bb3a0b1b6f1288b17a196f4d7d57a31fc9008e665058b299fb988b64be31a91"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "65b6b1cead06a1ef0d9b593e58429e3cecb4be8f3654fcf6f1cf5240c5e1f617520a79c69f1a759889a60a2739107d694e2a21ee8ccbfdda25fd30f46b441f1a524dd0b7f4180705aaa70533e56cd15b73f807fc6d0119eb7f7acfed7ef96a917469b9c74898de4f28f2f8b207221ef062c8c9722ce3480ae352e99d43982b784faf9cb3b98b037a0e6cd994a4cd68cef59277daa3dddf4a0c492eb2e2f354504b5cba4759cb7e1bad9cb73389aa07f48e8410ecf7d46e3617824ba279a96811ae89d15335606da6afc5d68f3dbb71141203646bff8408827a76e7264fe4d47399fe74112b9909f3322f726fe20fdacff5b78492db20198432e497b4a73d0c9bc9a5aba64529a6bf70c9de78741c588b97487d9b13ff552c95e0fb47ca0201d47eb609c712762e23ff39b89827b89ddadd9888a5464bdadf5c168d28d976d9c8d8885ea2495f7221f317dc3d6dc5462eb5af6bd2b02a2e540b3286196abbb9bc36b684e141e4fdca882890b3b79ad57e2584ed8ab361b4a4f5725a7cdad0c1d9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5df4fdfaf1665d89a83242e493c8b2a44550228eeb00bf71688b664c1c133eea9f4c0a1adf9a784f7db87fc7bbabeeaab8ef424f9f12aac640be61aab8f5dc6dbf229cd685bab1981a27cb1c63c138f1476393faeda6710b2c6c1c9948f7815f4f488dc9b70ffdfa9c6ed8fea3de1f71c140a6d14ee5643ded186b9c2d94745e105dc0072b3653294e7ab3f89894d2eee9c09f01db2d36fbfcb58192d77b81f05c6a6e9d025b612f055369fb0b67e78ef476f88303f31a7d35917f00b5e4e6fd33af9e01c61e4eb1a2c1b79d126052313b9d9c2b2e257b3ca3294a46ede05727c8a0d1b55c95ab142cc385ee5e724107829371128f17280ac39b47e18215d775255c53b5e19b76507d5009bab76df1a413218b409273b7aefcd20ad38375c648fc85654d87509888b93714c18cb9394840e86fd71e704ff3eecb9a764a19cab975e7441015fd4a2da3299840df025944e69ac79b2e5eb51d894bff04c1787e5fb1841672ae799a3d27fe1c5661074eb2b321def70785b1422b34c7a428f8597"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "99436e45ec2e733ae7ed9b14664cc0d87b9d70d288cbfab5e903665a140365e6ab8aafe81be94b9707441c588d726c7be562efce80b0d1e6f74466d5520031707759ccef779e06e3a7ab6ae7288f348e111b219d53121ab60e4528455d42aeca72bac0c64632f402f6b8edf76ac7e13cb676fbe0082b32185d13b4acc61933f4707c43942ecd48e71160559d9eaef30342d3e3f362f4c028d0136acbce15897ccda53691ca89db559adf125ff0cb47027fdc7c6376c5b304e004e848f82c6a681235c02d3ca98fcbfce53000450cdd5a48378d7fffe86793520a0ed9bc9091de51cbfc6b88bfd2af75cfc558af37c41c969473a54051f741071e06a4bf42f78f21c4d7de13f6669e9203c77e09de584dbee7dbb5874f1330511a7666275cece3de7ab667cdc43b7a782a42b8e2be8bb983c7744c82fdd0454aba5e1725dd4cd39065bbb86c39239d4a7c56c1939fe37a94966e0433f6211e93e0d9fc9477258239df1292f4e74225547fd6ba68f8af30f5fdb6f2820423b8e8b17b614c91c41e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b49672bf48881d9397d81b4d962d23b6f4d0da5733c4b4488981de8d61e6aed4083fe15d3e788149f8cab9ea0bda6156db278b4c66887a5aca6e511f0e51319476d329eea509b4a1e3ffa915b3dd39cfc8401164185fece011a6d82d71cf9171612450e24a3d06df84b80298cbbdfaad02ad4d49a178b3e16b4d2b69020f9bafe6c58d577ba4a933531ac3d2d525222073c3dc883c6958b36e7954162031d9559a497187d497e0c1eb6ae55c7050f701df233c4d6b98e45d5eae45b36339d9c619b474c3daf9a5651b1bf9ea5776765148b8e439f8466414247f898f6cdb75f222636ee965dfd9acff0321c1da6f1c3b0b528c75f5f63c4894f746db01f7edb34b1005ea99fb9f82f82e1cd9943e8ba336334c9b2edba2343d09b082629869aa03fe50937d9aa30060dbb4cde14c3f1bc225042a556e0c64ce0df4b3d0486d611bec3c7efdd3b2be977124d0891915bd68e41980389762e01c631af2f70e904a0b7041ee1a2c32c0f59903dadd8ce5cc335b761108c1c176d243fe2140adf792"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "781a3d96f3bfe9b6f0aabc4f4b6a0c5dd942a76b099f67732f82b6e342016082e6a2c1f584070585c7f2b67c9ec6edbd94e9cdc8693d7d7f3e15084bb02ac7f8d079d2f8a5d4d998c90d242f0a0cf786f99da2104d8b035abc069c763f8abcaecb6194ad78fd433114e61742820cc77d8e0eace89ec7a19b861166967cf22a608175360ff947febf804436ef129c45e86fed9ece9cd16e9756369c638eb6a9f1848eea24e2b9710092e31fadbcc72c82dde582069c2fba3b021bfb8e81bff479687098fd9ac9c7abfede1f1a2811684f745b8e10710fe469ad8f3128694694bb4b333fa59bbacf00c3665402ad486d5609b57f957bf9c964231002bbf190121813f0bd159a6c879edc44200c7e30caa5921d2b0994257d78e0ecaf7c13e67c07bb16b419f48943a956f47f87c839898875a106319a8f860b3d2d140b0bfe6163e2ae5e2b11da259c0c4ffa6d25cb20822049c72d2a142e051b760bc9fd128563e5ba714c01514530f76d50657e4a3ecab74229d773e08347c35e39352db85d3c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04c8fad7b52391e832af68e62e8cec1cfc2256d560db597138f1aecacf4fe31ee1515fcb1400ca18c56a1e0aad984709b962223a3d7cdaa59bbbcde52ddf9ded9b8ba38e182cb090fc0fb421eedd787a6c987cc693db6cc645c51c41b91a41afbf007f6c3dc291d036688ee41193f49758cc1dbc3c4809f0ef528d00f3ea2da7e8c74016b20de55a6a481e6279978fc851c692eff78886269e45259ff8607a2efab66e7a18d247ebd2826d5c9f7b9f75862d5da206954488ae1cf1c4f28630b46d8f60232ba8bd3cbefcf8b7cbc06fa7e84c06fca1be837d521f1dbd67e7feea7034d6539ed126316ca4401ed1d1ab23623e2ff91ab762809147b9437b46239044a69ed1fa737c896af9d611c1e8062f4a3faf4220d0afb1d8851a4205d34c6a0ffda9d5b114ed46d66c2f20be4611c0f8b73d69918d2079a6da90bb27828e5605cbbe7e3983c2850334750da49361821cdcf0af965f383519f326fe32456615cd8c72bb6ce7106cbbb4cf3627438ec5de18a4f4ccd967b7259585f5e35f050c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6899934d13c7b6133be112f7f63e2a58de2503fdd0c9055921f94b4db0e1aa8475f5804213e79369f87007f70021382644239b4dbec4f8630c325a79a9c2f1e026a1792c1c43b64a57564fcbcbfc9702aa3a9f497f9f5b236495ed80347613170e5f18c81df504283a04f20381ff60cd11255fcd1fcd255ab4eca0b00c4aeb4d6b66a31d05c3b7d7cc329476a8d5e523af06b7542970bc174a6965bdfc42dc76f9efa2abbc61794eb208c48e33c293620f1b348e2048d82832cf293961844ccc6958ebace14ed3de52d57c0c166def97f602b486b75faa47ee8ff7fed50424ab5f2422d61a5c7bd2c64cd9e12a3750686f30ee965c4f672069796a75db2c106606ff7b9594741ac4ce3e9a29b43759b6c09601ad8fdc22c8ec8be269ab634064f6248cf5ce5c34d100a08ced73296055fbdbb8254cd50a799126970e07a5b42dd7939cc8342e82ea8d4f3037dc16abaeca4b8b97696d42ce51eb5241acfd21711d17e55f0cc31b8be6690bda116ffefd8837249a5efce51445740098148f5f31"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b763fbc33cc69215b354605de6cc21eca3c8e6a8b3378f86107a09476694d31c4d5db179183b0d0923f86c4177149e6143089bded2274b4a7e328f3e45c540421cef31972556c9d81332bd32edee010bca4e77c2113bdf2971800c6b61766a95a2eadfef6901bb1d79237b3af3a817bceb69e564d1de2853f016395bba5a436634dcc1b37f4f1c2f2da979892802046505b20dc28294c3ec9d6517b144c43caa77a3f4f9469295f7d4e0f566b2b10394d8a4e8ef50d06078ed7e614dcc1db9dc3e6f7c9ea8413413fa93d54a0e30785dcdf1cfe5509bf0be80c5ab8ac74579d695cd3ec471def759727470191d057e6d5f32c2c8ead53310890c932de3e6dfd0f3d485a3efb6d733c21d454d032b4d1388fc8f5469de8669e9ee610b725ff46bc08cef304204471ab14fdc585ee02e07191e1e9bb2a2327fee3b23a714cc5d1ea59a13528d97cf75b24357e1e232942aa54db19a980b3e7f64c672743395a9d470d11c32597d1763e62fafcbea2f480c14bef7774f74e2619b1062b84786d5c4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3dbbbfed1a149832c71a1293c20b81b1c8d35c4b75181f66c9f7e6aeaef04066cb6edf1241e9d87ddc842880b7978f18af9d2a33fdf7fd1a5e8c10dd547a5d334233ceeda2bab410d5dea9464f623961c98195b411bb187e981e107b6bf67be5865a059a6daaff8e2da602e91f4176f47c53c9f53b22605b748b68fe98ad9c5936957b074fe844567e7dd1b07d930929d3dcd46e84ba6f9121fe1f49dee955e1ad5a329cc0441d524a20215a9f7304e977df5097546a4d3ed5022765b5cda292f1819b55334e6b95119fb0825756d7fdc8dfe173a391b62e970e51729bf89eba61be3ac1f3a5835aa1f6676ef807395440e984b13e3711ad316b7fd61d0fdd9dd3fab9b75545882fc1a2fe1f0d9dc7c72385b0b445ec411877de83e38fb7111d5b935167f469cbd4f37fe1313b2beff0fd6ac4bcbd4e98e55e787a8e16967d8110b8c33ced213fd792e1741e4824e41be24dc6cdb947361cb9ad8c742b5ec01f5e71fa4eaa452801fdb6524b5c6d1cbe97b10d36bd53c9456977f662b6a1c85b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fa9bf918807d4a55847c191051e8faeaa3bc7b51ca1969477cef9fd13d310c2b75e7e72784465d2116df32925b772904ee9a185c15c5c740b98bcbe18342b6c8d513c89866bff83cd42f0124d9b47e289568f298c190a185671e6c32e7d4efc86a732c4250b5f9dbf5c084f5efb468766626c06bfb4263e0cda509b269ce9942614d580f700eeb1137e2abf520166485b841eb2a0f2d3deb17e67304ce500df3535a75ad5ae64e2658e5bca43e552a83ae94e81575fc8994c20222ee3dc49f5c8f25fd6a5c8523624dbf9fa035020845557020f5e3c4b988645faa436eeead00af9135d3dd84970545e7aabab9cb7239a42f1b7953055eca1ab75971b067d69d37f2a9d1485aef32230d97fec2ac2f82b3790fdb360495ad96fcb0659029a78358f344155e54cf52495c6409dd4066ec6d44a7a3f05ea3d87794d8dfcf79152895c35085db4cf14dfe44bdf79d313be0b6e75b62d003547f7a30075dae09ec28b8225e08ea374ed8f442e216fd0b9ea5021fc72c76d42163ef3049e2c0b3a059"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "106870b720b4fca4cb9c6cff814c6118b003f627a8675865f15b4b5e4488395e0dbfcbe127fa684a48c4446bc684054b97717d83396335631e59b1c7739cf647049e92ccb8405f4a6160b9c588560830bf3259abfac4c827194a7e19bea56fcd03a37e66b2e58d71d92dbd694c00316079fa2874d27b3f533d09185e4b11aca79b5225fba9b5b20f05ed38d24a202ca9744f40a7b81dc4e27fb56cafe2bbb4a80322f009adbf19697cd055ae8acf38f38e9f2f33c0d0683646778cd52dfde268cc81cc6708f090d04a16cac31708e2a2418024e53a87f11589507fdf65656d3056a7fea52467c27b1f90e1bf1896a1092a575994bdfb1b2acdb3df59fee8248e74a0be80c2ab0c04aa4eb0c1aed69c1c1aaed052e25d46c391947d2b97c36b707f82e907ce991a5eee9bbac578b5ae83134771f9370f1d3b9154d898ef6504ade6e17d96262cc2d32bea12981219e52b9738cc097b18eb54de0856f1fb89c82b1634cef2e7acde0ed2a09280e2cfa534f3520ca1d9b1d7e5bc90205d2bf7332e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dda96df9b188652fae7ca14a1d3a44e26359ad9f2778f0dba63b5e4aba7c30b55439f74ede96c56d48df4254f4b0a6f308859904f2f69f47ebf438ea87232f84e61c3e376daa2da8c0ab2391a5c8d478e42cdb2b70ba430db5dc3aaaefc9c7c6ee39e2b1393f024a75c4b91843d52a49bb2ebc9aedebec09d2bc5c200bff6556e689e48a3442b216bd7c1927946a41733e8ecce2589d0973ef8dd2a3a88dd9d4ea2d1d0babfa60239632dd2c23124165ab11c625b95c3a0c2141301aa0bed4228a1b87964ae14691b4dd02b34e38d538ea1e02a7fb20eedcc90176e8c57833adecbcff87df4c04f19a77f223976c41723f36cfdcecdafbb72f2fb944d4ffda0eb0796c3c0f1e3d19046c3824137260094bc6eb3b735153e9bd683cd741fb394f75dc7510ac4f6f3dae980b56db7ec4bd15cb193f13df1f03ff8a1b62aa9587df8d6ada3e8cb849cf923575bc5bc4bae87c93393f7894a16da39989305a6ecc77a1a3739ae253679bcea0d7ac472cd5fffc62c64220347765eb4ce21549654f41"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "80403d3a020d83681ea576847d5d1367e0210401b81413f948ff106e1e341be57b4f39f2d8509586cc477b0b8934c0ba78a3a97ba425c9d123ca3bc64bc26538c1da92b24adc50095c209b522dcb4f0892815064580ea87c208d7477b50d7330bf8d463bbd4ec66003576ca520a1d04f836d1e2abcdad2b0ada71bdbacc9623da2276c718a36825020dd20d6747c9b7616488c7ce0df20ab150d649c4417df73718f3c363927884bfa6134c636402b6e6c231d04b3bdc4ed6b29f479c8c35e0e02af932e59f800e46a14c0647c2f0c31748d56995f346fc6bbbd90e55be49767a16a6934798be43fca5d8ab10853cd20556634df53b13a1bd4c047d7d52b1102796611b016517a28b277510c87d398b4fabad78d11b0a6a094efadb7c21464129636c75eaf06a5c1fcc1a9cef40b9488f24279c6fedf93b576f5314800709929c54cfee383140fa71bdad7552b0db467e39caba1adc70e1ef22f62e81c5d4a50884d5a359de3c7bfaab1c00c31de9fffbbd4f8a4e8e8ae7e39eb29abe0612554"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e3f92ba88bdc4136cda2e5a248325c98972c8a42872fb5779c46c406dc8a7f117d5fcf3c2ece96f3c2c0f5061547ee233f20e17fab48c4316441367e445d7100a173bda80b9d6d4411188a942c3be703f0779829dbefffadfe6cd95625fe4c5c1bd3f22b8221b2b69d3c20ea407c6d5ebdb5f5c137d056899859cc5faf5bdc87c223508a662e5b56b08ba3c8d2d344b6df040193e36263c11123a39d7b222377a131fe3c36bea8467390ec53e46946c54bafff4bb61a0bafc09c838081e4e66231957752fb8a49cf1904d70b024dbf470f17ae3c50e7407ed5342dc8ff9e556564fe37a6d922d2fd867da8d92be27b20deb8c7597a1bef71edcb402b2bbb986fce5324f4c02af643f5e3daf623f370c9ab7d3a55e1ec92a5a37f2148979c9bdf8488a49d2f6a31a8e99f1da98ffb5c635173a43b94248a8c5037dd385d16ceca4b4e769a8a5762d4ab952ec99f3fc9ac6115666e0f5f94ad59f23c3ef1798093807cad7e08dc86f3b4b85ed6a34abe354d50c772152c9844b9a34e9097688368"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8085ebfe55c20755b6f1375ad924b868867d5c878c41943e61a9eeacbc68c7ee9dfb61f54b8ad22dcbe04c506814711ca1d36c2226a7d906f095ee1e0f6bb61ab8eb6344d727b13a7252543c842bc7fab0fcda70ae328abdc8ca3542a805c6ad30cacb432ad05918a65862f7f2d59d0821eb1e73ef8b7b2c24ceb1232b7b3b5a3ce06e7e5f214722a4fa4675217e09daac6764fc20b3a87d21589b8d2220a56b94eb71acc6ee4c400d47f415507d01207777ca6f3b2baf3cf27e75a6cdbe1eb0089f6b5c3825edc6a223a61c9d256006d30a6f0fcb2c5624ee8b49814f1f560260dececd9d11f697ef417bdad561a9b63236dc2e62d8914382bb92e98a1c39393815cf0915308cbf212c04bfb4a8e9dabfb5ecf957d0b6a3e4f7b0b13233d27998a1c447cd845cf926144370f754494e2c1b845646028e4e26b87888e8866c89e35a00da8f3ff3ff519a813d9016b8c31b861f4a292f7b25180447aeafd03439c543b6e7c94c03eb837d013fcd2151c17155e24127134cfe6f5d88d9515e3590"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "618987b90f8071495d4276c5dbbf43c8a7a2b952d5f81a30feec15f3201243c92628b64da8c347a9877499c28e1bbdf63398485c1f88913f803789538d3011469cda13483841bf15dcee6b896aee07bc90e9f7245b016c41fa03944b1676a7fe392bef538ea1a97b71be9d50fae8c6783ad35470d45668634f91187ea61d2cfe959a869034d333bd6616c738f0a99bb4e7bc66040421c833d5e3e1c39fb9a92df063ba851b5cd149d1eb0ea903241297fab62cc15901e82d2eb105e9e037202655a6904f6c051bc79af16b2b9e043d32872ee85bf9592039822835bbb7dfe426a6200e0f0b56b0867ead9c1cd5b8e966ad72ae287da6e84c001d29a9982521d9fc193337f2ce4dec94a9eda41d17a45a60bdbcdc85e6ea034bd696396bcfc40614ae6ffab3e8d78d525163ea55be5d4f1f3bad866cf59089ff727f58e5fdfc5b77f43a3fc0e5507035c875577f247d4d00f5dd6f5a9a8ebd6fffb620e803060fd0e742d7cfcd3ff408ce53b1003a351516ea42a47fad8a62313b8ea03c889754"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9547ae982686e6c57123cc12864b93c8e55488e90ef6c2b6779538036dee01392b62066077be8102cfd3d82f46920bfc29b6aec0f29bd56e71bc1dea1f287cf48b65707b5c950f60313efdc537a5ebf6d8fa51ab448c70e9e8726cd368c615c75218465f41446fb8e21beea8a0322f443f125b09ac9d4f4e1978fe93f9eb9ce2fa924a384a922e98a023f20c6fda672082d5f8904429a54d0bd60309d6059f76d66de8d02eb6bea880472f8e569ffa06c0ed88065f9b93f1c124ea881c0cba4d1d2b13564c5c1b221e6295b74840623d9d014e179343936bf583b8391e89ce5e913a6cc3db1e510f63a951bde0d83758a4670f0be237c80f9d5ca851ab835c5330463cabb8d31f4b8e188a3a226d2553668b773c8ded433df5de155c0653bde5d06223c31e39055273e485c78366bc84d013a277dc0ae44b48d3ced278506f2f07e81f74524b0a1353ed6b6c798a1f8e9a421dd8248b81eb25891916b2183580cb8cccbda2d5f45f69451575780d0bf3063f937931367f28d15d3b49ce1626ce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a2d71c57b8e78998da1d98c13757bfd9e0977c5f17ba07e47bfb3afbbeb3a377f8c4c78c8d82890b57a311035e2225942adba57859490e004f8c9c69b71ba818fd1ee4c396215d90580818ec2d5f71bb3006596724541eadc981dca096fa4540be86465274f19a6d47836692d7d0ce80e934ffadaa70f110b08974a32f145d2df260436b0524571b3710bb4c7726d093c90fe333a0fb73af084795e7800a036445ac90a1f3ae08803053cbd06b9dc19ad70d775bfc52c9f2cd7096b4405ef62eb5f330ac6110d5af0872182471f3d9c2ddd65888f902ed0bda98c8a3faef74e50e39841266be25698d28705a577ba3c2f14f59b14e91f70bab478995155ba08c7e5a819b0310121845e9669d45095ce1452f426285e2159230e0dc8c4098cf01ceb3db982a88aaf7940d9f3c59a4bf9cf42c06c11ce61c21bebb92169a04ac0b2f13972c63a7a42d64dd67a6b8eb2d707bf059d831485fc7a73784621b559058f5fadb945f4228e9e01876dcb903448eee5e560539af7354fe5a4e4cd0ee586b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dd00c9e4579457cf35a1de0cfa01a1b96eb3395deaa2ef1dcb8a1f1a0671a28794db39b0432f00ae28435e5a0055d89ed6d9a20cb1be6aebdfa1a78db7a1ff13bc35040019729f9cf0d344cf1978bcc224e5c184dfe1d7c64a38e9ab3af3703180f8045bb55498e3b797e2c7dd8f23a8341c8b49d8f8eb4d08d96f109ed96b42783251a10365bb6b8a6f0941e1063be9977512462e84b42371b31217945b12c9c9762fdafa7b450386339d0f25c6bb8c9251c09cd58a414e95150d84834657d06bc8d2bbe5b36a18ccd04719c598374299c33e795ababf0eb2a23a053b3635646ac57b88a13b519b8734b1ed17d570dd167b9f95a98d67f0e36b9400e8e6bd61208be53d335b24f14cfe07d32011db038ad0dfe99277fa970a208572f805bba501399d66c7751db984272c89d4d8633af03872f45ba89026aa45e3b63ea861c104e9827d1e233127a79796f1c9ae60d6196c3f299dad4741184121617f9d6ac7bdce2d480e783568955193b0cc2d2272f3e5ee468d4ba84a89519d25926112a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c425edd6db32c3a52db746211cd9394a47a93dddc932e3c563c9a6a556c5fb4655009fd1d9a2645999304eb0972edea50155e6e1db3ee990eebf35a5a078397c284ec71205c0fc2fd09e20716f82c8dea46ba80f86b837c63809c2df1e51a05a8c9300f2140796fc3f22a851d98e96cc7d70a868c47dbb6364dadcb6f92f1af23c42685fe28c0cf5935d1a0d22be4dba0719644caa84eef15660aed1a32ecfa5dd5bfeba5c84375e5b92735d48d017162660149f8577837297c52522217a2c1adfc42c6853003a75adc7c011d695f3cd17d4266d73bb07553e146d4a944dd072124d339785e7b03382e36e2ee72c844686abba9d273eebd06e202b583fcf74bef871e1f2e15bc99366cf290eb87519cdbf9328da495e392f2ba47d05465f0f555ee915c4a28ddd14ecc82a26e88a2b74e4eed0c0e78aa8465345067c2fbbbd3e53b2c9c7fe69e30bf1c6500f9cdb1c953193d5c334db68318b753d8477ae8cba456a60b1641fbb6343cd0511adf3b836401ca20f01ff2dbc332a91396495102"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "80a9e92817a9edbf2862f1ecbd3029cd1ba0dbc7abae4ea0ddfe44f49c177319a37b646c41e7caa8153e7d88b174e720fd911e7bb09d595c2c46f59168ba2a6a8cbee8a5cb86e2440e4bd7579b6de5ecc56777ab3b0184f77d3d1757ee0e9c9d08d8296eabb488c4b91a14555178ae86f863756ed3a8beba4f59ef90dc75dc3f9d5faf6d4221dd13a6ab4e353a97b59d431042e72956cfacaf8fd95772c8c66ed91c8dc901436e508bae2db4ed99230ec54d0a13436baaac811b78d01050444bf488d507749e242086d11f147b385882d1046b855d335c3ee5e35ebbf7ff4e712e8bf76d4733e6e0f7b84c5e59fd792b89ab1cc456a89dc866bd6b0ac4b2aba3ac7218ecaccc96cc59ac357e1d9705fd848a94fea3d2034b657fc816466c376a55b98299790874988d078330cb19d8e354193066da3fb1aacce6ca61960d115aa3985f02a7948531102b1e473f73303925d8ef988ccd780c55eb0a3ffd35b71d098dd39d42841f19b0de234f18ce8303a4016fd09b73c911ee9609165382ae34"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c8c062374efddac383db9c6c0fb53e6687c202caff3378e5499196496956785134abb5cf8c9b1ba586852e2fc5da928643fd375515930fa101371cb855611bebe46e374b8a5b4b2ff7b19e39fe09d8fd72be6183a564570f1fb7b488870d1941f9291d183f323bf9ec606c4388409205377d1a59723d67079689d4ffb138656e30ab4cfff33a0824ef98721f83498bdc7f98565ece6c627aa71844d9557ac6088f1ef2dfe81260c57b84b96d96afbf87e3c18c86a0f3b77bfd99f3680be9c022486c964c4c1de8d777486fe9dadf8d3c865f56069c947d634055304623ff789d5833c73ee381fc4c68ebda227593eef7ad9cad4ce4e165b82273d8bf8dc2c33004ec3c2be3419ec50ae20e8db48c2dcfc7ebd769ec0b04a4c3932707bd355e9d5980670408e9da32a5c90308f8ddfaf9c55b3b7be081a30c2d9cc155f2453a2004d3686041fe31f3473f2dcf04010469e2c3552c52d722e6d0e09947ff575edfb7b780ec77c6868e196229159fa197299008ceb4c8872877c692bc372ee5c4f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f6c8f078a23885c0028b37ffcd85c2bf29a853c4e07a65ff76299a9b9ff9dd4fec9553188fd352addd5e0d0a968b8c58b0b8d501cde7dff6efb40a08420e1ebbedd9d1afe0caf03392e8b1bc075e89f269867d5a04486c6fd64247c0cf2fcc5c6574013bc353264b0fd396380e563137a5c360f13e41a73c44fe6b5726a0787197bcc4048ba50c553e0e7ca2ebfc153e72c57f3a94d8e0ae1f48b5565883579ebb50e3cebbd289e378a284bf6b8c6ede76edb0285516a799b346bda815b860c913182ece4fc3afda940b9b027014bc08e0aa05be909204d624e0dd07d2a883271683936eb8bf2266f1f41073c77718fd675299f4c250222c031f24b0d1aa6d86c5aa54098324efa8704aba7d32e4b9242b3c440e82a4116c20bd1b055d64d9b4b2460764751f92c901706c6865e201da551e8213d979f6997853feed3bfa973e6948a20f7b3ad4d0c5f8e767b6071f0c095712c36ec226a36e030e8d5b9efabf2b626c3eb673ba8c14e099dd22f256b90321c74b4666eb6dd86037e1bb80dccd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "beaf12b6741d14ca48fe9824bf8e47c9d08e0fdf9f5538151dd92c85a039bc8d402e942bd74de61f4c1b7bb3dca3e41afb93cbe35db66bf58d5770cdea919cbf0cfd61febb4ace8d7469ba67bf4f7882f0bb756bc766995c458c11406b31adabe63b33c6203c461579e4c79b406bd626156549b9b222122b1a2d22f6a8d58d0f79bf212a61ca58ed6ce036785f7ea78aceb5490044b05fca41561d4e42802770ba24bb1e7cdc299f9c3cdce99a4b22c80a6086484048132933f0b8c5f42d840ab1ff22d0e7d182571555fd503215685626f4806e07b811f560ecb0387a4f63c525c84c3b1640be6f8c4f7a7562ef232dc10723b7008ab6463f7f5019499499c17c19852d7c60d284889ddbe376e5a4df0505e6cc7dcb69f04685d8d0cbe6aaf127a49bc61278d35d7b9eda9533939cbcaf0f8f8f85f5972ae842920dfea6e14fd5b1416c9303388bd14c4092e6fa86c127e6e8d7859a590cf16a792c3b03f71a72a49e563b7e787aa2982e76031e63c9b81e07c6a2cfecfe3573bfec21a8e9c2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f50372a93313b5a19689d40356e10d2f6829b9e46d14e613ee1ec8fc44d488b875ba440508c8b20d40124163fc5d7e98c8cf85943909b2c224196c08abfc2cbbaf24f779c672ef8f9410a7e8fcc9a9e01427155194433ed9078aa46deb3e4a1dc8d68fbdd3ac1280210fa3ebc917947a5672d58568ff54e85ae740e4f53f1c00a664efcde4937fdf3f6fa3a0ad5aeacc68108810e6e436f6fe8b3ae31bcfcebd3b7b679cb74d57c7eb78d81ae9b78e2de3716bb971316f6e2c0d1b474f74370400109bbf297efda08602efb86feb7e047bbaf92eb73332419275d9175943ec0d1a70ed8ad3d63f9696981b83b0003c93dac1d2d8b9fde2978993b42939c9e30c3b3d2da67988a89b8e1cfc22847baf8b390a0d3befb92ce103264f9fd91d1a9577b300a9ae5f9f0a77c41cf799fcdb2e188f9afc8029a5a88e76ad3b4688af5b272100e522b294af1fd093ddbb3f82e5f617e0371faddfbb8dfc605e2b9b89ad65c2e5df4d315d5dd4a16c8ae6b96ea289a6774fbb06d666f6e5039003824674"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "df8d82d8bc8e14d29f72c862238c5c350ee2f08b70898fccf17d57fbf082d3e1a7b4755ba68d971190dac33dc1053be648ede6014a272ec7f7a1cde09315f90d931ba1df8d580542569dbe7e28772a7b11ecfb904d519a73efea0277209b596141a1a86f455e6036f869005d434fda24a0375eabaaf9b0e2a7c0ebce38a18336c411af96f31147b611132ba2b1ece8ad8996a4b604b4ddc3a87d85c8e58f0406b0f7fdc82bb6e1441030cc9ab2f610f084c2352b296444340a1d12b49e3cbbc065ef2e24e17516e181feb60789c45b181a3639c395471cbf9e013dfa56c6d5651fa0c1021fd8a2158764e2d8b4a0340e964360389aab5446e8617ed15ec3989881e2ebe086c0d992a7c56d5b38dcab7a6f92de59736d6547eac156ab76ff68a079b8ca062cfdcf1ca8c6f0b7ed1d70c3fe04a143a88870a7bfbf1a5cb7914db766bd91381f31b0dda66ae2c778cd751c676d725d3b8798d9793992bd4ebb0181af7c4b6533ece8251e524aac8466e025ef6d31397aeb15e4bd92a02e20d1e51c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e75d3f7a4fa5564a8ec1bfde667c1a2e9d55645c1ec35c81a427584c8b31c014297106d8b6741cdd11d6f27afd040ea5509d626b54fc601640297adeb3e04878fa5ec4f553d0eb2f49281c0db547933a50e18aa1bf3f5e6cdaa6e452d9bc8dd1d60e7e1c21ea00fed3f70481ce9cba7c2ddee00c1eb3641654e41b92ccfa278874907788f934c1807909f2c9ac7a25157b7b7551e4955fb52a2b7d9a9e30706a1f39704deccda7a156af9da41b874298e78291b31c28fc958170015170454d154759eaaafb9b0800d7c4a7c9351c6e25e1395105a95af889a80340110f132edd2830fa313ec7714100dbca65e427f850c65adbbc94e6208faf33f26098a3d61c17a0b6dc8902eadff5c19c6887eed60a63b9b09753b250fe586f5c34e204fb0e3e4bb431ff1a78c4849fd78e7e6ec1736914d3b1cc6a5503707dd96fd9bb5e8777bd233dd421a6ed0b5dde9f11ff0d1fa9ed8ade754aa1816465a23845727f585d63f1977becacd3a0923b310464432237d2662e61622a00c1d310ece4ce145c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d358d09d7362c351759cff1a38cf5ed30d46ef8cfa4891e1de3f51b0b03f318a00ded0e1fc646b9a98bbcfb1107cd1ea1cd9fd5654814d6a417e0564d28e0e7b35751bde792c55b9ec4e3dbde0b791a04d996450abb85e4d3d60ea2bc0e623f04438948cc7a03e0f11933cc857ff37cf47d3878e6bbfe26310a754ec51bc034785cfcd906dd7f0a97fd5ea3171f333444df812ef93249711b649b46e557f38dfa43e03358363a99610088ed415bd6bb5ff7db644670637a509e8ae3dea48828e178d4cd28049f3c6dab0f2c5a3bbda7d2663742f5b68195e1ea4b14c2c4d8f66e89c6ca1dd51b9f5af289893b57142325f1ac2126db44b10784f12ddf1aed5db309ebdbbe31c99a3191a22a044db2022ec611ffeb0ee3944cc51324240e4d54ee5aca8ca8d3016939e3d4215e9b87a20775f28e7d477b4b9d3526d0dd128d0b97d7530d18dab5ca1d1de165e5638bc236efa62f87ac1c90a0858b41c08f9cb0db85765cc7fdb968e7f6f50546ee914fb7784e94107bc7bb348096bccf3de13ba"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "446145c6c678d35f859a08fe02d4e58a1b8be1cfd2f85754ae1f1576ce7e8c63a8333cc90880b3845c969505d27d4d7de731fb5bc2eba43acefe986891813008d737e200ef1af95a4fd2979c01abd7b06cb52bcbe514da42c5a5fe1bd0de6ef28f078c94101bc65bb187476237d992bb80479ea9470a9a9350b93830fa97b726e858034bdb02f1237771b94c71db8d16bfdfb8eff439e44c9f4b950b9cdf31258d36e6c170aed157bbab1563317499276259c87bfe92f6a73c02bdec02885d8c6cb06be332e87d3f3eda0ea2fb24761333f014e1aac01b076ffbc39322462dc82427b8b6af01ef5bf5bce0ab4d222ee660f3fd661766fc2c402879910cc59d743ef0ed1432ed120754ac0ae1de6239989f013dc17ba66353e1a39878d45333422e53187721b8257848ae5edb451cb1c6967f248e15e92392e5b9553ebae45a9afa0df9c5deca3c9d527c373f83abbec734f2b469e22a391866299fad635766812a339c30cfbc51f22cd6f1139cd76e6798e3e24d40ccbe39b7ea4f7d22c6c87a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "85af3a618063afd989a7e1747191e02e93c5fc39230acc8265c575558ea2f5b2dbdcebf00f7007be38c1e5182ccf643cb7e821a26b5824c2c3cdcca308ab157ff8038781d1e89de77ee4832e015fa490ccf6390e9111b7573188d9fe401bb1d32556de05b0cdfa27b5b9930c8d7e044a0470b4fcc03913c018932c700ab61d0a86c28ae4bdb0a9dbfd90eb8922fdf237f2a37a5e4e3ee50c784268048190e5da77588c5a351498113a60f29247f812c457c5183ee1bc6de62720b0383aba38461b6d0da451c55ea383527ed9c4844e5c86c41143f815a9c94eedf4f0ff8fb8b9b33ab1085d9c8103c7df6312cf00b1d094cf5bf2a3410b2c480a201d2db601fd3c906b96db716f7acd73cccec7b6189c9a0e0f11afac74c74d5e8f59ad403ed8cf63e220ddd0264fe4e7d9e038a7bb371221e670cbabf5e99dfe344642c68307ec55bb0a9e61de7b1c8a9b19d317a3a024bac9e5f81d9078817cba296a7977c1f300b01878abd4991e3acd3895c463bcd7b3cfe98c8a5b2aa36579cf9c4d698f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "32d2095dfac746fa0f63271819bc652ebc1f5a32f16c041fe8e7783e4696ad79e3d2736c1481d81cb5c3a992854de7824e55e62406a44a6576430c86e48e0245da194065a58ca28259bc6294dfb71c30171b4a9b97ec6d7343e8e7e2726d1be0f75295da4f7bfda68a44d8fa78427409c3cb4fa7164da212848e8406ed37f9fe87b1ccf155d46efe2a6391c58f78d8697c1b9965d7f1050c720f10519ab1b42cbb0ff05ee58eff40fb5d0bddbc6b36f42a321d60589b46acb83c07373bfb8636e091d744e3ea643cd28e5bd3bc8ed8262515f6d27a573d38d121c474e132be3a66c35f4fe35ff378883caa731e1cc5cbcd63e4b37ddbb3d20adda51dda12de2c12bc8de468969ed06476139ed99eaa3a21557cbf082768c829bc2d14c7a9c7fdc76eb2a1d7c037330eb3a4f11017a29b7ae47c92a4cb69f932dfdfa4d9d91e2424cc47bc6bc259ce03bfaa7cc43f991e8056df2a6ba27db209c73a27c4e6c2dc2b81d7fe6c7df701631fb9a62f76e74354b74ab2f188a456fca5f241c655e829"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94cf74fa31189732accb5392f396fbafe4e0d99d4dd19fb9e91d85aef619e859aae3e27546e3ba5a70739c9d6972afe1383bc4ce501251b427a50f0a5327a55a0f3ffe847d454528e5eca7cfeb122be2bf48e537ee5f692d20f778f7dd9e332631ca7a869a760f6880c9af59e9a1cec96b268fd9bcd675636df91db986422fa04042090aef9b25a2285df8cb5e6c90e5f915679d9da3fed5b39702ab36911b03aeceb3be040e80bdfb4234675863249a5a49987f242282ca3a71197f9d412b71d1c08b70a9c396a832a62e57a56cd6dcf421605c326a95eedbfa85afc9e2e2dbd41e3c675ada6e3315202eb3d15c57e9c08b503093aaa51c2051c35578ce6cd34c40428fae9e9d13caca5877864fa9089979b385ce24c52a9fb807476a2b87856ed06483cd8d471ff3063830c1b6ad8328bf6ff01be02deb7ce5ccf8d38b650582173ba19cab73340e4d3b136d154bf98f5607a4738dfffd87381007701987f88f8fda3093e8b83c64a10d6d71e81cafe1cb33cada4bdab87ad6483e9af9cbd7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "49fc18b547fa4c7d19cb46197707422c411d53a2ed9bc8e0f9351acb69c86e258043130c44b86a0d7dc0590d04422700a230d8b7f0cac824288381d0dd9b310975c5855b7192dfcb5675a2782db475f3fa2ded14894c036cbb343ccd5308316735776e4a8b9b75ed133de1389e0fef59643cf2918974b14f315cdfdbbd6f4e0cdaa46eba5e8de283bcc8b3b5250c8b4b9336e9ae5dd96c375fd16c2d30e50473478ec50803e9f278746c4e6b912b37ac9707b4961484546366fd800bd8cf8d7616cfdcc22a7cfd24237da437ceb0e8016c3016446abd2daf313c325e951da8c01fe964487d3b6e4549af9de5dbc9a30462ecfbb028fce3ee470cad39fff62610fa5526dcae39de93e6909620319b214c2e0ef984a543245c441a3732cc281cf18b63bf7546a659ae226825a0ca5025d73c4c1a1be069edc16e80cc66a7ac0309f5cf4dc3740fe6894e8da2ce75b93a43ae0942bfe0602dbc90315baff355d7574e31a9cafa7c367e2a68fe040f419fb6e71317c30eb7f472e0239790a18825e5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dd3ebe40edeec32720d32486b48ee2cf966c87602e5fa879917b9de79d1e4617e882336565dac061769085c9f4f53ca9392de1aad42656f23c4cc3637ec1e4efd2090d6f41d38aa587119451e15ccecd6b3dddf2bac8686776cd0207c0ddff44d10debfeb08cedfe56524a35e95d45ce733b9b86f62aee14c3202fa122dddb017e797f2714df68e72ead5b0a782e66dec732fc706f4c9308af889611128cece803c2efaf07c261a13486bf7d7a21aedd4449266ddcbfcdb5bd171ce4255de460a975badb19a5531dafc97e553058d21fc1643999f209719a0a17e3802ebdde28d261859d4858c30fa6c9defe34f7a7d7b0604363266e538e117a414a0a4af8b68a94d18f4ff8b731a4ee33ae8f2f81ae22d8758cce3c34d2f62786d45c8b0c69724c78984bea20b55c560dc831a674210158298a1e7c90984fcbd994febd83478e8121fdf7abe1f14f2f9764daa70615463ac1aa5e61e0bf457e1cc9ae83b44700ad2dc592943aaa948d9028e59e9999fce4c3374880c7f9b1aa2dbb9ed70eba"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "db0c7c8bceb36078e3ec67ccce2f56cd9de9dc4a8225554d13bfa5dbb2add120240c0ce7c369d4f4a9ac99614b9b44005bc18ea526fd1c00885a88c437debf5d557d8a19ca2e58f58852863d185ecd35a5e4c0fe5abfeb55a1febd9ca107646395f07c1543b9c19b02277368a45adb3c947919972ce4df484a64bf2ad5f16fd76b00b64c8ef9736c14afc99ca5e0160d5ecf33d623a47a053c6e0081a09a6b819eee701616aee79c4b8cb04c556117d738ec9064b92ad716c3ec11cbe6878b51716ebdc75d95cd463fb29f2630eb8ff61f7cf282e639caacec00359e971dd41853f39bced011b2db23c262f950004c2d6ae9476a8e66b4752b376bb549c63b36ae9e9f81c13d05f192c41676bce2823947dfb77d03978854187d3ca94c2dc98f10496a8f8b8bee690217648ef55af1721d73edf4f0a023a0b7e5a5b74f3caf81097a7def0a585ec3adf04df86bda63aca30b3b36d18584f103c8b310fc923f84bd4b9914869e8add86bb8f24af20e790beb984daca7956e85321ac772d1b034f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fa714130cb868439d5d3a57505d6300731c9ded56175570cd5b843b2c6289e70450070e5bf30691dad249ad3acdc0f5fab7fb16d72a5a8d38b4481eddd2b3f8a390e3833997dd01cc953b6b9184285254395c24a911e7b65643582eabeee2f048b366bb50782732d155b70c98e67a89a330257313fc2ed9822c088b55bb7d645f348581f0ef4b89d44c93cb00b7d750e9fa195b87e4d9cffef99be38922da21188481eeedea4a174b25be42b6aa44f9186ac9228b0354896d362a394c1049e31b6db064fceb3a8d4d381e334efa494d6f22fa4c35bb61cf2c9e84090cc8da3083358e7306f2d21727230c7e2741e6175056ffa9ea3c85157fa8dbc76dab85999960739f126bf020c8c38d1b96b2b9e1b850a4be1e861b6505af251ab38f5bfa12022634038ad2ac93f9acc334dcbdfa9c5de36b9dd502ab08435852adaaf7d0f73c7c7133c7aa9f5a057f96b9d370e02c4bc39ff6e3b6bd011a25ff002538d2f238f673514362a98878a518ca98ba3b9e9c2bb454a52a3bec4290544c887a7e5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "218562beb53937237244c9185c62743e986519ea1fed36be7a6b6a44e5b88f9c5ea316d33ed5b9126148b5d6699114f804f4d3d698d24d85f0fe6691d5e804305c4b7d76fa7a238b4642035d2f2486dd575980aa2eb36c89e732c420c389d391de20eaaf1f8e23096d4ed73bdfa2feb710a444bfa6557c82c53cd15a2007f7a3f8159e01fd6c890dd9574226c39ede68bd57e3a1c5a70a77b586fb49703d52458a6b587244c39d5852cb2416a391a6bd0b58c99b32f1217209b4349caa0d7fa9397add65a9f494ec1d95deaa4e7257f03c3a08244889a6f682cfa4a6ceec13991b5f832cd7fb8f8349ecedb75ff2795ca33d73ecee7a42553966a1df438f65ddaf6000cf30011c064a3da0c87a66c212a5fd157c40dbe3d748477acd67ffa65ff7049e46da3da0f7bbc041f76173f4fc0acd6a1fa690e1d034aafae009912682f3800111a15a22709cde9ce00fde3b3f5f90cd55b4c5ce224f0c31b62315b5738461bc4606abb9805704312d2716455aac4fef649079ec2e62b901b289321dcc"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3652f7be92a00c508d7b1185eb8ff9e15b586d21ea715bd1c85425d4cf9e6a753114d766318f3f1d457a4d71d7464687cecba92df12c5f14236b4a52b52f58e9e3a0ef3bf500d292bc9680f99f016a01ba8923cff14723274c609a83b2e3e9ff2b029998defafa05d2067f8aa4726057e73a4b46eb5cc996c44474f977b550890e557eb83b6df446e620b836a09ca15ce7ee961a30193bd7f1c3b31be510043a38104fc3fa97f93edc51dc26468cad87eebb6be074eaa881aa40fff2c2054a136d2acb58d04f775266aba1f23d5a45afdac8b0a2de37c97d8506ebdf2345a36649a3a243c572afb900627fa89ec84fcacc7a9275024b9ab55af240e1c6f99135b3c78a08da3f23d2e3e81f3bc9c84a03760c415b74c7d00a0e228621c21ecab749292a30e5defe6363b29c590abfd91c1f8d1a819b52ce4deabd219a320f2ed0c9b47bb40ab7e9261b3a4a4987fd5bfb0f18f1a0ed76b44157c2e9093a8767fadba09665b20653965b04e211119f2d78b8c24ddce9cad69827ba4b453330b4cc"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f87286ceb7dab7a8faf1c8d68cacf38e576ad5e0999b9e136aca42dcec65dae729a9a94e0631bca93124804ced75e3d8e1ac0a7bc91e626d74a80ed3f20defa5d73283f6fe0b5f1655d49ad7b2c91e170e18ba90d4a0a701e4e7c0fb0178b3f58618a6cfc9cfb31ac94acac92072eb683d1bb5250926a57d6333b297264fa27f114db8e28fac4f65f5c899267b455b91267ab98e6b75c6c3b34efa76ac0c9d78079b037d7f151a7cfb70e52765f3a0d16012ad23b61b75a7cada0137d0a87fc7b82a69682593a77bd31d8b4d74c3d781016c04a1e2a5a1e1bc8afc9f039428555321c73c42a1dc7c60786f0c3d1941e65ad31e16c789be7672325bed8a5b9e779316ab8480dc0a8def681ab80d9902e25e6103844e848831f709ecfcd2403adf595d56a26b3562dcc2d0bc8a7970a5d0a4681686840a864f8e85185255a2ba1c43276353e36cc9b2c0d2d2d2cae1ce4b0d99b17774879192e4fcde186ce1b3d5ac8a33ad60ddacb15692ba4d5a49831a83deab5261bf303e30a0a0266790a204"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1f6bd67b020e7d210af1a4aa1bd4bf52cabfa3e2cdfcdd07150ca9b6d27f07f1fc1359da727c45e0cb26445a661f1e170312c77c97e03ee3f1c3ca89a633c95c0cc19a486ad09dc95e3b4b8b0dbc64e85ef05ef979ef0f3a7419dfceb1211197701c8dbd6adccd756cd06c98b755fc1cbc438a54d5ccb9c70e5378ef0ae111230865a06114d6e6b8b847417f627ec5b0189858573948147018afd58bf618f5cb2a06be8df46e433b6c42851cc323bca2ff8e286752f9c928efec8ab6212d2fb6ba85050615dd8a956472cc25fb45f7613b5caa1b5f262048ee646c9fd01692f029417fbec9429e5a697837b022d38bed59a5e892c6f9dcaa17d119b9428821d82be7ba0ebe3901078e1bcb98ee0c411911a2efab418e2288f5177e0c889319733a2fb9977b9855da4f6fded7c1684fd5900324075069804db29818c30f1a346446646a3b22dc0a19ae4fbfceb841226d754551597789493470d072d8d1af8f6631b4609521fca978faa56707ce5b18ffae93be4e1a7d27d1fb4cf6423401d50f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "97491372bea1be6c54b767009bfa9e1b5d8fddaa2cbf04551584c15b61f30ee48ab25b6e14a2db402fcab453601ffe63cc5311484e9d39f6f0b3aac09875d31d98e8a30fbaed37c1bb68a6185e26d6e35e0daee8fd0cf9c3b8c46e5c97ccae80eff6cb18e6ac9ef15f61d9fa6b983d7f98eb38c8d862aaea96864a7cb2e500bd91ebb291fd852ca16b18897d70ca2d8a22f936b95e9fadda9a6e9595fa1942a942c3e690f5531e029aa5c38407391709dd0121f9820726767e1ab8501eb4641fd8ef3ab37a9918bfd5dca32bae1cf9c5e8f1129c2951804811a126ebf932009f4a30680d1ad9aac7f6c865398c8df5100fd963b91a5115c9cb84b31a1fa94f8ef4930be13f3157d0985a01c9562fb3aa7ae894f11bc54a1e46fec8f78d03c64dae8c8c4f2283175b9903771ab151fb482d64adc97bb371b8263eca46206d8ee8767f61815de44e0c034a433c383fa93d8fb278ffa345395f3399a3f178a3baefd2adf26a2aa998efd1fb7aa14a9fba4737f03b34893c1f2062ffbd4015555c12"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2eaa7958a6efc137e84c5c719a95d613b1b34e334f172eb97a8cbbd3dc7f568100f3b606ccb4942979be06eb02ce2cf5d4450423bf0e21ca8cf3af401d1d4447dd85ac73eb052ef71ba998c843b96c39509e9b15782f6be475dc5491e2f63837e7136d2b8df7571f47c07e4653a6869a6832e1e6c0498994dd94e05a86ed999474b9556f458cec1406a224f61377e97dbbbf578f34160eecb5a04941cc4e8d2211b2ee804e1d351e70352a5f94f1c50ff5ac1cee8916201c26de237386d91d0263ec95039dec97c8b21643ec619bff0a320c21c283809b4e1b7ae82808df8dc1bc87b4144d4486da7f9b0d50495c44d9e858ad5fb5c071c20082b9a50db8bb6a5fd3d23ab112922af6fe6968a568d8da6efa814bea870593a9c46b0d18c00466c8fe31669708d5b2b397f7bcf136c51521feeacdd196af91743f0b79da90dbebcb61094942bca654be2e2230c2094abec7424b5618cac15a7cadacb8d6d05779335a18f3434e1686c54d5d25d8c58ce55f6ffd39b3716ddeb35d0eb6b186c9d9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e542315fc8ff4adb3c52637e051c40b8bb911602c21bf3c73072f9d3386fbcca97375f79f17f7f72f7009da6791a4e7d4dfe3c1374d4ff766c6204dd4dac88058c977baae7bd667392c7a3af0fee933caea4e463f2ad0c9c235bf31e526f3f4582b7836c8a0681949996d596b6ba0a5097193e984b7fc77e42fe99585ab21c18f1eb494226f354410805ab4ea02d79234bba5b958dc6bc1afe94810bc583b04e81f1c0ee71d60caa239d18cafe4299f0afddb71c3019f9569a7a4fbe1163cfd23b1b6f4e73d5b9771aa708e2a90e57d9e4875a4a110a960735dd114ecb112e691cbf622cb89d7776b0e98e6b9a5c5643795144f91ec73abb5d8877b80ae697035daeeafddb12993f3d0c8152dba01f074f13c545ff7c3c6f6fd1f1afac35bd3c8a6edfbc9d028e9788af2134cff12708cc65bf53b9120f52bcf5e780652dbc6bb841bcf63fb5106c6b3b3ec2fdde8df1e6bbc88d2e6e6a63e92fe9bb5335d48885d43f7070382f88aee394a714bb8657c120f38306cf9583f24fdf6a80fa6d08"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6399a29b7292371f30ce9c2b61ff030ef5accc4503ec987194a53c9b5738ccfa4a9b3f3e0f59cedf8e55f6ab99bb27d21653b4dd12e277d98c32ce0b551234bae38226c32415f4bacfe80420185821f8a3c7441dd9cabe2bd334bcefcb96e117945f10fb9c2a3a9c3175299e6de82bb24ea3756d8db8a946cde1b5ae01f12d5ecdd114cd6279ca2237c26689580ef5fbd11ba4686b1e102c72d3152ce90d4a4c41835ff19afe2387b24af290bcd3ca9955b7d9a6f616d247f6ee2c52156b7953c9b13bd2840b962936f6cebd5be7549a4a33d16198b64c908224ba29dbdbed40f2c819511c10dc59b36be961a8b1301e5817455cb20fa328221cf04477bcfd244bd2951ff15a6fe9e7e41f1f704273e8d62ef51fc37e1bbc70f08339d0414687164fa6321e00c80115a4c6f1544d88305fe338b95767df72e3b33e7f334bfa50ff26f83e44ee92d63acfe6bdd17db240082b158bfae84ed0ac748c81699fe7a70d8797b5705533e6c6baa72cc5059fa9d856ae7068595113eff5e2625490560a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a3b266f266eb5f6dad2c4bbfbc4fd2db1e9514645efcd1e5465e9fd762d614db5c3d044c7c84c77143471c0d981359a974d6609319764d499823f356b1a0b6a3ebcce63dcd08be24c63a664338f64d1fd775139c0efa67cda0928309bf8815757b936fafdf85d27a17c059ff12ab185cce6fec640291f9089559b87d20bd9c1a0b890a9fc88280682594e97703adeebc0e6739df8388a2f4335e545e9597dd9fb57c2d1a7874b772a9493a3ea34d161a17d176bc2c197c561f0c7e80065a421f77f1f241178c9c70d392997cfedc94e4b1adcbe7a6bcfab7eb6a60cbda6000919973e9b1382e20da6032f86562115fe45ebe67e102e25d423bb6a99b47899da09dadb9f990c905c67559d4d78364eb6be40cff03cf60ceb023dad22082a7b73996640aa3c3e87c3ee8b4229b0ee70023ec7a39231202bd651dca6de076b683e894b845d8f3ad289c3b7c0da4e86eccb2f1b7b053ea4816ea376df01f001a978f9650d8124e3cf7c4d30a5e5369b1260e132b4b3ec838accc3a639580bf4ea4d0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2de47f8004371d52e2cea646c3d30c24c7067ccfe134c4195e79f3c1d5e1c515ae7f09b04184a0d2cf9c829388c11960824150ee619bfc8d55bfef47a58b2a662e62d692f531376cfc887d91f54223007ddd06a2205b4e35419897d0b332c10c3c9bd9cbfdabf44af4b3c9da04a76b2d4fb1e3aab5ae020116bf97623b71c6422656a3f4e9ac1eab2f7de9e0d048782dd312e0dfed774d87e454e5d593bc0f267093420e8047b4246f1561bdf500f1c70a7a96d0f037bbabfb2deece7618fd1453e88f26b6ccd24a8a0bf74450df11c9cfb5f6f9ccfa3ee2aaa8b254750987a14087418815bd7409f21a286bd5a2774e79fb5d6b36cf5259acaf04b8910bc2f6b072d0a4d02dcfbb0fc892043e3b73b1e76598bf95abe447cf995a638309ab1e21b987db52273d592267215b9af4de075821583b409607bd0e3618b2c0f93f5421ad53bbff8cb10be209c1f01a62b8f255f2ab51c1ad583386a6c34b7f60130f7a9112caa79e9e8f47da71be9626d4d68b2b8e3327673f8bbae6815107af7e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d6b8ec6312bde1ecbd8e3a0bec28319c6778eb1642c1f1d62777c259002cd90ee9f4fe1e84de43c399721f7a954bf59279f53345e9c03160f5797ac477db9fd84866d02ed8ce4433de49885618cf0cac5ad01970aa72922fe658cd0766fefff0dd99a6ce3c10ef2967cacef6cf5af8a662ea35313166a77142ea6bedb2fa730e584211f3703126b3f79b883dd8c1ba23627b51f06b760ce38f01e5d658775db23b83a31236d52e347050172bfdc36ba3234d7d6bd918a48176bcb64d9450dc777288c98d89330dfea1ffdfffbf8a0d16acf4fc1f0acc92d6eefe9b2f56af13516b39be2af12838508db11175c761d77fe647aaf4f06c0a3d5700d04420d74f34f95ee992991b54b579cde870cf5c6a79c60fa1a89740e271dfa80784a3ad722681dfb0ea7c30c85ca57b392cd8fa322a94d2efb5deabb67326900c20f3366cebaf97891696d24b708d81993261b55969f8ac8b808325357a0bdd51f5902cd228e71a71693d3feda96a239bf10fb51f32994dcc439f43cf11185d23652a9ee5b4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "636e6fc0bd6201914ea8c43ef33e937e95e859e1ae3d4901aaa20e1965e66ae40b7b9df0bf27815a6226b48e0c5d87fdc6bd0b02ec1df5a871c3ed3087abdac427f2e4ffca3692fd6e6ef67701f5550fa32c9cd09f872116c9183b56a762a934a7475c13f9c7171d3fd93bbbbba105429d11a8661b8c41a69d53f0280c201f83a1730d4c77cbd50d4dfdf3a65c923658964aee0c8bcd6aff618ff84af2b12fca58d0a1fbbeedd5c7c5c17045684e27804089f05bc41a104f674d015c65ce677d9532f214e5a8a2e9584e4154aff80c19321345f24e961d0410f48e1d2360d562484dd2154e5d3d20404f51955095cb98f45cd0577724a7ff30e00e9c63a6b046442ab55877e94646826dd57a0fa2384715b08fa0f327c7bae7c95c3aaad23a3c4c0fd70bb2747fb9f834e62402a981f5edb7037fec2033e9884fca1f8b2ff022eb50b04da9341fde9e6132ff11335e62cb7cf4090f702a56ea04bd1572fe711c47d940c58d147f02d5ccb5876b7efd7939c3107ffa51bf4cb0397333cc0fdb8a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "768d19af59bddb4a7071b66ab18e4e90a381fc928172c0ff280166f8dc9c7a95a6734f2b01f2c9d14679373a359315d3a7e0cd693433c1fc1841f58c33f4658c0e5400570cfeb86087f19deb1ada0bff7e926bf9b191c10d2c76236bfec95362659c0ef1154aa1075f421fb2bd6a1b115363496e9e83ea65eecb443859d2499fcc3d1337068feec26c8aefcfeadb6f559dde8cd14f1200752af3327a9222d0df0e5643bf51c0b6bb0a95555fc17e2cb4512b7d0d3a6ca824f70b3a33e9a8b3a8db8a7b5e3bed7b7126e56255c640f8eaa7a9533aeadaedd015958ad773865bcdb08c3db29c0be1371fa3e66f89d2e9e30e428f839293fdd43ba200b42c8618934cf47c38536c709115dfd17e09f140641341177a9a9e75e168b547f4a1975be5f3c2c00e8fd32a1b8639661350c9b114d3ac17c8106afef86afb8c61b29b29543a8151b3ad41a5d8eb13602cb91b7998e5d0b31415de1e7b6ba0cfc5a789eda8371b2e1b6e276d549b57527ef38a2221636ba9335b5174bf23ba2efe5d9929cb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0af8cc9feca0de495fa42286649599f71e6f079dcc53ec31b325955b75b79b9444dc693de48b26e98d57d5aaf78a808f000b7546ea755ce8afce86f15b44e684cb12bdd8731b501e59117e0ff575280c44ab9b0ea62bc4a156814f9dee5e70694f31239eed16bce55c0c12a150ca88390d1615c2efae6a9db448be3339b359e2ddba1842e8ded4059c5e4b0c2071d4821a59cb7654a005a3b397ce8979a2eb9e03473e481065ebd65d77ce66b116ad4d6a356833e437a4eb1ca8ce48565ac720a4830c2e31d42875ef35b6c779ab7020925ecabe831dc09e03b0993dedf76ab459af76f4122155f5a3c96cf4526d43af5b800a9dcd691195ba5746520a1f6baad2c77a802a0e44b4842b5460264146bf2f9b0dea5f7abad267c7ed0dce3c9c8cedd8deb8b98f51e30aeeacf539c3bdea00031553bf569af6dc50f70a0569e50e837d66782cef3dff29a849cac54d06e4715ee507bab8bbfdb8838c53b5d3f51b486c07160e26f2435b14fd30dfd1251ddf0e7874d2b47fc1da47efc4ed358795"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d97ee70fdec656a7e68437c142e0f5ff1a49b441f068cc35dc42d35a6218bd98b54c77f79e625803459a187a8b37384bc4b4d93bb56434986f06f1d8ee401c88c9886e5988caac78cd85341f736011916be55db9710402d62e644bf2cc5e8887a12d9e8be72a2300e784d807a5922de477cf540f36bbe9a66142eab6f258ef71c2d47a299d9adba7ef285ecc80ca5ec262256666347184ad773c2142d1b4fe7581b9bfb8091ebffa8cea525f0c76a2b3104813ccec6d8ffe492cd0e7c74683b082d607fe04fb9d5132f0113f7dc3a9266e653d51d188ba1b4be8d4de089aabc01a20d66bbba74a218b0372365eedafac02349c7329d781848a3acc9dd89bb8afe9c7e729fbfbd9cb996b37687d3c9709b1d14404b8ed59d9a2d3b393f1c5c25a68276a2437e7bd690daf8559e7f3fbed16212fb1d94fa53509a067783359f5a7f5db56407c0418f9b61dabbb9f8973eb900709dd172beb258821f2282e76e02ccf39ebfd7a1f40b2bd07348620fff37f2788cc9fc7118a1141085ce330518d09"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d119504d49b56b24caf3ca43bc873940aba210db68e6783ee300220df953a1a2cec7cb2e03a2837d0ae06c486e761f5f4d692b58f0651c5a6949a4d51a3b6c0c830a9930615b7820e0d21eef7edc87454748fa0e642a7a4b9c9c96b9f7b52b5f85ede8724cc07aeb4d253694ce2f5ec543bc13f9c06cd91f56997b6301af98edde34f2bf18854e512dbf068f700e54063f6ebf82a4303f403a2af7159276857152c7762655819f83b43e4c4c0140e5f4630f8314d7dd252b03cec48dcffbecde66f1928a307267c0a607572d80907408b8418e7198b993d40f5656af68d679b07ee702d5f4325c749d932261559d7220b869f4d5108f959edf71da62b8592616f92d6514441480d2219ca5339bbc8f83aa2748146b55e2346c77dd1bfe2e350072a52509e78edc7545acbc792cbd7339afcca77ca895e8d4ecce7c41115560253c4445552fac2ee56d2e6148176556166dac7a316c64aa72ba97836391b979fd50194f8629a810d965be0941228d2b4582af14c7055e6222a60a06904211e058"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4345f8620ca6fc5f73a6f412c1cb6fea5c3be84044ac8a7a1ff72057db52ba841529e0796af2715389e83eade82dc9cb525591c44c100ae2bbcf0ded3a19252c486099d85bd7ab24b0fbc6c9e6ee7470ba1a2dd69c3f78c106e12de4842c42a1e0686d85e2ca3e30f015c76df87ad374c444774e4209369708d8eac9c02815f6d75989d993c31cc2ec1d963f4a149d9616b36d90783c3adc448977139ab34985a52f9b96c60c1a5933d8a9db99a23c91ccd41695cbf42638c44932a31a49874b1539d849b2735499680b5d04b1ec31034085be0bb59c651792667b21b2001fe1e4b26e3cc2c72a2037b551aebc304b51fc1deef2a5cc5eab705cc681e7a3d0b14435c9c3a73db06417e3dafe4188530719ccf5611e275e4ed690f657482bc90d87c3c27c95ee03e39eba957a4a7e27e9635c9e833366eb833927d96608f9f98bbd83be20a2be6ae6d7460310c6517d511dab2153eb5aa96e8d4980c2acdf25ccba234309343e85ba68ad6095fb139a30155ff6bbab46009db306f04c5781fe43"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d7212634520ae65f540677f72d8f230d9b40c37c9307638b1a8321ff6e45924680a68b89ba73b2400db38719906448bec9c35d5c2da337a9e39c82adfbf658507a74799ad647248ab9f21d2725d565ba015327d3a9a4d0aec2c4d2a34425d3feda996851e7547271e5f14543008c556a69341338d7ba9ccb34f42a71fcde9e410395e5c69e6b2c082246075e519096c0745786cc275e2d3fe65c6cca95d97a1f22410f8a2e0d2bdb36a61431b67c6b98f5a34a4592bdbac008dacd7acf7b7a244d5b3edd63e631a4e21f9b9809d832b76dbe82b9acc4531798b1f4a0ad9d84ce23d39652cb5d0fa522e98d442ff39656ac129c5a2611268a534089fa7c58c665fd276790c067e0b799be17975b0388ca2f455b8ee54758a184d25738d97ab9bccb4fc884d59df610809ec7ff9a8e52c5c8e93fa53e69b502975dd595d30496d9ae18fa8daf48d66292998e5a9a815c224ac0a21f6920f08f9f70fa60363cb67f386ff02223ae48300871a84e6a9e2e76e715fbe9fc156078a79f0a5f369a7e34"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e2d20b15707ec4522a15239977be889b2f72a23f6531c14a14da66c59d5cd647a90441c100985055cf46e4e3d48b00ab99f2f280e5678918af9a7299783b35a1ec63251228d369f61635a6f6c6b228b3a83ef26ea1f899ddc009eabd33d36c325bbcb193fbe1bec12ed756ed02dc21d56d3e7934f3672a3591c655102f766a371a34983d40ab34d8b9476e927c7e23f094af98c9c0ee30df46641f8abe5241d9790af6cc61a6de8248f2e7039510d1ab92b52dd17d8dcba345befd58da2fac4794ebe3e7a41a1e704f9b8fb900b505df8d46a0484d7197beff7c081505616b8a5ab8c6cd25b7dc3c0bcc500bd1a2577c1f499e83cd228c48a0f40164f4716c4ea7dd74b8971cb21a25ea17e3d07c77106cc18652f82d8abbb2ede781e0e85ab668ee1d8769829b8be77d457991287c8308258d9ea2a3ad327f9dcae03fb5f6a71c419fa37416fcebfa3422ddec93c451a7f93b0f970df21be18af1399abab90c7667c1e9174e193efac179239db64a44590c50e52278f460785c6a399102e0b1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "985830e50116006b97961dbbfa9939ee492284b10771fe3d3910275072e1e2b3d1f4b00a3ccdcaf310e04f10d4ddc2deb544dab03236d3263ca743e8b40c1ae24d025b2524bcda651e7e128344a6c009a148d48504f2c8fc4bdd7dcfc6fb3c66755f35e4e775fa498c1197f0cc1d538afacc3d087a3638220d7ae845ec79e255ecdb8917440026e9f8686c18b1e8dff0d897112bc19b087089abac233b274827d4d4c88f99be595974de26c79917a94772485c94391465e19588836205138cce5d19f7f62ae8fabdccb724c8f84a2d60c03425346189f97613f79ae652dc6b16e0b889b7f310361e52d134633f8cc15da56aa6a560de0c895fedf6de4dcfdcbff3cca6f10d2631119d7d75e0223ae73ad6f79b2f9bc32e4d28776e9a5ce4f733d824c3c7aa0162ce77a438df92a1f53d1878bcc4848f41dd0b0e8c88775d98039a05b91ecd7465186f6dd067db053f3557bba24cf4cf6a372b26162b228a8183484cfffdc7da2f9cc15972746cdef2e07e6c203209ccb7b925373d9f36250120"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "809455aeb2529962f94c2a7a214c7c449df1186c7a568d808acd7f21a898ecc63e23e859243702a7279a873109727d67a915ba48df76694cfa2370e5243386cc7751e2b0b40ff511fcbc08b8fd523fc094648c42907d3c30d21b6a3ab74cbf6787001a1dee5366a37a524b831be807c3776fec00575d3d723d4d4edac2cb8875f59c03f843bb9b379e833383e42bb841308a78fa1200f727bfeb3c418a7cecb03814dceaa65d21f8fee9707c198e3ba77b66a9dcee4af4662ba97e3fa83ac7c92694dd3bbf6360016923f0e6bbfbe050bc1b1a073ba08d0d567aed49ab215bced50d2eff95159810de874e174f614751eea978690aa868219b12449ccf74c6ff79e018428d8d41b1ddda2c4abf7609ab48fabda5800a0b97c0d88f546a5674cb507b909bb2c380d1c7f34d65f05a42a872456feb2e2b97e9071d1f17152e2cfe9d208353bd887eb36659d9468d7ec809058523347472d5bff81c44102c9b1db841ab6376d4d16c251bbc9885eb11b7b3187687d15635fb51d9ee918efe40dfa0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5936466b943bb0b11015c946373444d97e2af61ba6e67e8a4004c77ac6818aa8bfb5bef619d1267fce4f49fd40e6bf85690ef69d821afb75d6660d0a023fb67b7139f7316f7fde0ddf9d75c3073f1f2683dd02fe0c7a2a2d8551cb88cf3a4c1f4f73ffbdcc29e0fa0f148c7e6649b6f8e7453b708d7f019473103465a24d3b8dcfa98e44883b3bb6a24ee0152a4263b8315ddf52acd3d2f3509fa5c6ca0428aeab323ab77f0612e5e74710b515ea8ce35266540ea31361b1bffd59fa9139ec39962bf5507c0eb77161945e71270dad21ec30d54d9e97f088b829950bb236c0874f4c2ed134b565e7b0e5b63555a57d82ce6973e11f5b737077e336905c87504a24b03846f38a9fea414d7c7a7b902fbf34be86a0087d78935fb0302011a51c778a766751c1f0b11d014f5c33b5a1816eb86430d163c5e3f75ec28ad8f315db53294b5f52ecae24fbf8b1714711ad60766b3952e459b7ec9fd589ce2605bb1c11595e4580434cff6f748c00bf176738b21d2dfef0c44338a1c05660edb59f24f1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "98baea66be8166939f2fcf1cc35963c154776a65fd7e58405e1fce04e2f9d7c25bd8a56be3b0f937b8c521f7e2a9df4c98297fc2aa696864696194c7e742a9769fad227db26af96f0e50d613e02ab24ad142e1642c779ba4ad4d4bde46ac19deba7a694e21659048468bb4da16f8436bf9def4dd148c9b1ffb92a5ce9263a65ce6d729ae9976c59d5de757548b11899704c62a47703fed0451944a82b3e2d592785038edc11a5da29975a5432a2742233b9e9f76969cfd9ce031dd16d1120e2f8dd1965f99d3c5d4a2b6486cf952fdc01f227716b4311154bd8a25939ecefb416e0cfd169a89f3acaec236f3dddb13d417748216fca0e32434ebe953cbbed454c263afa1ffa23ef047c9b06114f2a56109bb77ef58d92b9bc01bed5eeedd7f181628b90df2fab3a7d6615b01d41b9dd1a01d7c467fe1acb42cf7c7111341cbb0fe7f673230148b972ee2cfa781ce2ccbcdc467b8a6aa1c20196ca4479bc88ff06d8a2f0c19ee272997a0f43f2d0a02a0a6a8a1032ee8396574fbf79636970735"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c2caaf308875c6fc7942adce507dc24fab21899905efdfebf24e4d189cb46734eef0547eb68b1fa0e9d3be5e8714f404c0ed1f98d31896f2149e34ec077d493849e369aca2047efb7b4e8accfed92678d41fe8551bdec8bc6073e467a26648b91b885df097c25dcfcd8477301eae038cd41c90d51496412be9ed858dfc111a3b45d9f1b3d84c0449b7f18af43064e703e3724cb73d49db2f92cf7b45ba16608ed332b7ee57c05edc283f7eb572d9fc18ae1d50de26655c06a55fbe09e3d68d61953fefd0b0d42fa470c6751282e190fa42eec5c2a0bfbc58df41198a7e52af01cf456fd5a50375b54edba81902aa21ea0b96919b95a4d605ed6022460e6e811ab23a6d2b889738aeccc2480519e8d3c07e10a9f79b6fe4c9feafd6d62b5ee68f8cf840059050ac40530a8b09f1767dcd6c6daa488fae26fd9daebfbedc42e851427b738129019ba4aaa0075710363c5f3f798865acf910d9be639468bb084c6293d218c1089440c3dbe3ecd4560af4ebfba79b680d944af3aba9205c73a2e7ce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b89b0c1f2bd605ee42adcb8ec138f8953395f21dbf983ae6f86296a561d8bad404de8999478d7bc39e9272366b37457a968e68a15d585ab00ce110c58345f290c53432f066c77a027cc8b5fc1509ab3c52e7b095d58e9d245fdba75d206274a01121521f6e6560300fd2331e9a5e8b03a139bc7a6b636e5e519cc7950205bfc03a0ba272ec010b96129407e8a6eade7a3520b56e1d68bd2edb4e0ac3d97e6cb5ebef9a0c9acc9df7fcaf0572935063b2e6912b1bebc4563ed36c295ea3ea27495a11e41ae83fd8d7fe0437947346950b87a44af579713ce590d4fac398aa961590c1fe013cc93b96ef404fd2203313d472a05d8f0fb20822d54a8c3d75939015749523897ac13f18d36c5641f5436eacf5dc02c659a4df5583a8e86b2d812d05da32d0ad9cd5a82e045fdcd558bb4e5106de858bef6b6b5f225f7512cb3d3cd7a23652deb7325328ed59e0fe922c94d5890ec582056eb7f282b48c9c1054dec9c3fd27f4c30609aea52e89e50a6b5408e910a18ba5111c545423fe23e043e0d3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22dda4b8c0af2d3038074ef87060d100822ccb58195fad6c084bc1fd81ca7bfaf3ad5bb766d265c48eccd4c3dc0f16e846e9ca36c5b49d716d64ad0710ad327d6478552267d5b5b9f6afb1e0cead454fc48f52b5e414626fc235d9097939f7e68f4df1076032eb024ea336ff34c2aa046252d42ec38b4001d0e1991fdb64b41cc69cf3385c9b32f0b45d56680e987df8f7616ff25f320f8ed22407ed24715ec190233dc4bd2fcc9ead1b91dc17fc807bbe8a7d47df0f9970c36d8a89d22ec623492fe028de0382b32d56b91af5954f515a76323cffe09052f68c35955ebc158b8d069e25b63e70933c2bf914d6d41e23cec30a50b2e35d0a80ed378cf9d43e7542fa656f4417c510abc6a62aa71916d0f010edd19403163d0e022ff41db48a7a1f343ae8589c86b7aa46ea554df5b5e9786ddf0ca3c2ee976e5314650f39c6cca280b09dd787257fac847d9051136b641d3f9d4c26856149540d6bc8d6cffc4c4446851a832c3c65854d341ff040921e9d282ad5790a27c46407e9c8bdac5e73"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e070274d94d99f502616ae11eab00aeb6f676b5bdeaf3f6e1f5b9c406ec6f56b8ee90d077f26ac42c0886b24213d38eb102745787eadd5b99ae24b4a986c24f624702902c2f43ed8f6592504328d939800a336d3fb742263d7b907074070673b24f5c5e8a9b402529590895d06c823c3fb9d5c933942c5a18878820243ad8c210b2f98b9163146b75a85ae1127ec1b9f80bdda356eead3c79e5d03a4dba63e382be85786c8c2fc28a26d028a440bb8057f3ab64d13a25ebc772de177e3d755e9866fae37ffb69aaf686d48b4ff07632bdfb3dcb21f666f5458465601e5793744c8a3af675b31f777d4fe7d59787d880939b2ef17156e293da74d5024e3715b866f567423e9e0a307c88397001e1dafa88855c314e5a5ce4e635bc9d3308996b8a1d82a5fb3356c0c37e41e5752e679988521c04278ef37dc112d999bfa1ec29be16a20ff9b8585ce900c234bcd064b1d7993d273982a3c02b026a58501fc5241a9b64ce34f388777d6085594faa5ef3b7f0b992648f2e050397cc30edbf3a841"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d466b8d8b4fcb2a566b4f2203d786b81e63afd5be21ce8228f40a183a9de52c992e27a85bc7f61cf69ed0aa559880c79016731b5fb667795fd1b37fa0cb2c86dd3bfdc20caaba24d3254bbdd063e6ce1aafca2ba04fb90f58f7d9fbb5be9679e30676b80f7c7cb1af50eab77e77bb01b166d23648c3d36a4fc228d6210e9d64bb3759c1979c014703b85c4aa7a5fe0f9f014819d96c4414920c6b57de2aca8ab12f7067895b13fdef4bdf39c5d863a671d66112d1f841b5610c9065fe14b1b98103c45247c2078f8cda5bec1cb99890dabacf08086bd0d73af4df0a9113e704ce0781ce631d4e39683ffb9c8d21b65d999fd687301ca1f0f9e7744474af65089d9a29c805c3257b32c95eda56426efcc856bdba116a08a5241792b1c282479fedbd8421d746718e859434d3e0b093f9d2de02adcf86697520f05023caaac8740df9ed28fff20e97aa45de9e68075a73b09b2ffe7fe5398e971d69d296dfde0541757248bf0c3876f292373418724fbba47bbf16a6eff8228a8d73da863d882ee"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "539d5ebdebf1057648e82a961ec142f82a979d34b37cd90a48624cc0cd63c15f835935c3fd7ce618f383a3997e841a0bf5476f4532dfc73e76f2cfe912d42a57c2f38b90a497aee58b280da0a8f2e9bd1776938540d630ac1681997e66e30cde7d5364f88465d43f0bf23b4b2a7476813be3a8b49535366441e126608a3e699023543ee7967b9c99bcada9325d87cf3c4a5ed333ae50d74554f863a05defbdab379d5a43367fddc240ae760fb257e51adf8ee4aa2451425b9e0f1aa6963f43da61714ccdcdb4986f0cb835eb064a112d5ce4ef5e9123f79f21d500b9b87e7ae11bc08af6082b5a284cc04aa9f58972af28ee70a4cb78913746f3184b76fa6e248f827e342338935c0301a18fbac9ac9a97fafb0f80e5c88c4eb9a1c850a118f32dbcf357a1ee8079c0efb912594617b44f1268ca7f256309f60250f7e0b0b7de5077d5c900f4581635e67e5b9f3d80dc8917b995e4ac1a3801a45a1b88ad0ff16f33141824a9769e9ea3359dd88668a9a64ff75201ac2b171d3c85a1dfd9f99b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "094cd24b3a601b80b54a60040199c6c0f3ac766f4e7ad56354c9ac551af0cf22d6df1612f81b0a195e4e471eeda3efc95656b87645e05c3f224187c85b8e0fc01f118aec78c5d2533d22951261bdae5346d6d158ad56cb305fe0ff5ebd6b8d0e947f1262e56329479564c1d4a77e03f81ec7c520cfe10a3abaeb77ea602bbf8309a0726051e4313be579d50f2b9113b21e581c2225e5fe3ec435fd80d013ab24b6cae83c0047dd81328a4a3b9d7f5d342c34254ef3618d8cf822ebd738bc4aca8c3a2df349fb7421463e363ea77b78836f825bf023cc6ab9a6bb6528ea925789e577920d9cd1bb402e5cfe192a1cd6c2254e16080ff247f54e9a02c7cfee876583c276d736bda542be218cab897b50ee5d36c3673ca20e02c07e922bc49b054351c921b1d65c23a6d967619901f09ae048d4c09646567c3367ea86b86dc9e353c14f65e7dc6926ea5d70b36e23c66db53786444654d70d910764842689b96cb87ed85668d608d58b31c3632ed985b9051aa288f0005cab9ea1d4a278b3a68fc7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "06a763017fdada141ed44353e39b0d6a3038c903f059cf8132d7bfb05d49db22f978b86ce942568fcdc9c50354356ba4a1e43bb91172e898abee5b5acb9b0505f3873fa6ddff9f08413074fadfd1c6b977ff1e5cf5f7176726d99204de1031213f7d6c3ce956a93b29b898c197043aeb27db5f914ebf86de7d26e17fc0cbccacc8bfb4dcc7729306cb5aa6f8bd9320ce501aefddd1ff0de105806dbaf06c9c70e10b2a6193903d6e387e7eae612f9ff280614f86da8766c966e70548d255c9fa0e9945d0dbac5a0f0405132bdadd8da67bcbde0f5963f1e0fe9fefc0e238f5abb0030a87793eb952be375501636d86f68c5093b147ec0999987d6e830e90fd3606f1486dbc909ba0e8c6cef23eb4995a9b1264c696bfdf0f4cd969edebf03c5ce8a07258be91566722f0ebe3c736123aee981d1c1fab2a115b0814f584f8c59936974fcfeba4fa7cfebde8e9410494ef3110b6b2d419c3128884799d7ffb2ef99af6c272ccac1d8022fbd110a6fc12d13192e4a9fde1e7a3d8bf3ae53f6d8e3f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7b0dbc9f51cbee3ed57cec73dabd268141d15afa82eb378d7c6bde7dcf0650554eae79a2489340b9eb81d54cd677c2d351e36642f1bc5699b5645ff9c4e8ef6c68bf5e337064f78f6eeb19dfd4e5e9e70b3600f4360938cb9336e12361f75f39ebf44994de531bebd230bfdaccc02e0f3452976f73055d24d673a55e58618dea96718d180e7bda5372df8f2adfe8f984de3c5711abfe75cdeb81771fa105f00be7de76e5b0a8838dbdd8d22226518fed7383e2a101f62ba3e79f59538ce3c9f368d6442063ef8591cdde03907fab38c79e5fa326bd67f6c0d017cdb01d39eab8fd3d7a901065986db241e30c80b977a7c5723ccf15c9494b08a39371afb9ea0e51f4cc35f515ed88a8e5b702b9108917061d2b75e9dd55a89a387aa2e4e0d5b9faead4ce10e8622553966c1324e92f8dece4b3d7cb981524ddcb65760aed7cbc32d47585afe5f48eacd24ed570334814121197c48505d790402b85a45a5937b0aa7cff371588e0a04030fe0ec1b8fec9516becac30911f689015b16a44f348a4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "654e9bcb87ac0bddabb2a877a1127cf9c306c9ce5da052f8ec732b1a98ea14c335ed82ab6f62d174651349407f1d91189bda73182ef8073e2dcffb39c21c2204081b36fa6c5d66c3fc97eb2ef3416ed16cd3e6a4e5e10c2decda13c3a08268893769b212f2932c954c121c01944c51dd5c2305cebd54ef65bb6ea48cb05a37acdffa34395e5e6f540fa87492adfb9ee1fed9d7b47841f75da0a890a0f2914b21aaa0a78781af9790dafa4dd23e511f9d9eb76adb25e85c6cdde568fa14145d821f8602e67569f869d6e73e396e247ace4b84d20522e45a066825450586e428e806a2672525b90d316a5b13dae5d215cca466e064e541f549b0b298b42ece5634c6cc48ce938611aa06ffb120c205955f537fb21cfa7c5db92908cc278f7e003ad2eef936343a70a2d6460a149eb930793fd45ee737776adcd04635aa87a3f7a12e4184689a88dbcf3e9d9f6d829e0fad1f08596768774fd149813fd9e03a42faae20f02ae026647d68f3c74651a7f469da2359758be1d697101135d6ca0da131"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5be6f89e6f531c41e248f0d72c37cae7b2a466886bd4c1059d966b5c973d127be3c75c7dcbd57a767bb13be20d9402a780a5e58faabb571399d7dfdf3c8f649c825d99309f84140db70d4bed2e160b22e49958e7e35aa444d4fc49aa24a02b2c170859fa621d14c3692a2353249118c7b01e018ba5d82354173afe122a71368e4342d88fe2bebf6a0255f719b985d5b57f720b0d4767f67b13ecd815ce40fab2b610c4af1054734934eae5fc232891f29fba6d364e4c0f2b26bf600836fb1ec9530d5aa14b90103e675efcbc92f6e88afa351369c694892e949da6d90e74f2ae853f5d8aa70d5fc132d9b41e20520baa8aa74b77c60daccf4da758b9d22745e50cd7ea118dc14926b9dfe0fe26600cba5b447e9e2a14d1d8a5e7af01ca143b6af298e031d2560d99aa090ee2d7180ec695dd553847175ce66084fae7b30ce6b5a3b1164757043dfe053853c84bdc9fd66708b029fbd44a2c2fbd8e5ac7c009f8cbf53ec2e285f2c365d823d31772bbfa710e70eba58d71787763bf0dc09ec5c1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3d7186aa38d431642aac2fa01101224d652e468ca9e420652606d050f109825b4c2943f57d943a48e8559898f9b6ee174eb0748a9c84e9cb874c50c760d2b1656374703bf82b2e4012d4a4b642a20c2e5e9edac54f6b152c7d79ca5591d50bf9194bf36c8604dd8f31d9c40250909172346331bb73cda23c6ae481ca91dee49a2298df8cd40e5b7f6d497a183499d2a0950f2e440614ab5b4279c887e2b228c27700013ce15841937e319deae2f7350a2f76c43c6e02e5937686f4004369e478f61aa7dcbd38d50d93ce74a9aa8a13cbb1a8f92cdd382fb2c35cf292a9d45e404cb1cdc14608f5ed3e2c490c22862cadf0c6c63116c81b7ca3e8ab6594e55f10bc78769c3e4cbb5b44e5a1c2ab3341714a1a40702926bd5e4facf3b55dc978a2768166a48285c06722d5436bda3add1a7adef76fd317ef06f7286b47566a38720232bb58954efc44f2207de71c2f3661a3140ce5a94145df9d4bc4cce0a16144fe0205a1da7f57409fc8da45a5062b2ee39119c639436ed128983e1c7fc4976c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f32c9b659775417abb7219278e0ef2eb30ba487d42581fc22fbb18dc11f5ab081a40621b4b925fd40ee62ed792e853cc26f3589aa9bed4e04aaa7773a08b24cee1ca2b83331487f889d7d1770a55cfdf1654c4ce320542ceff8b0d62cd6c59c8bdbe923431d9308fce911b25dfd1206b9c97c0cbcc46b36faef1aee9f88e4e353a57fa48d44f88a76b3e67cfe276315305f71d0f3656f3b086d787031dd4c716cc906f9384b765a7d2a648ef497b7f89b8fb72d63351bfd0f019979d859407e30d7ac22f0eefdc92edd7ce8033b11d266d66eb19228f75d7ef300848927c9543e6e7f195bfc9448ed5cdf2963676e1644d09729115ba95878324573d4bfeb74c7713b405304155bf7abcf7f76bc3fbd96c6839e81624d96dc9f45f69af43c46e8720d1b488aa647c0a7f56dd36619c1c6dd5bc93b3fc00a00dfd49a19a2da23de40c3de197ec6cb55ed47062ef17ff15112a78728a8b5f3344d0a7168726b0d8d223037a52a2562dfe6c943cf09d82b9d777c3c2f1a2d2e2112388b324088de"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "409f9dc527da49214994cf1ffba569f2e3ccb12b626a685367c48185e06e972d3826df52b54aeb5426977c4fa91ad5e55cfbbb86dcdd8da68e83ba5f25779d87b2e9035f7591a20d8d6845215d3a4ffccd0a01cb4fdf0b835a05686f64a8f43153a461d78649e8a635ac52d6e001068f8c18163b40b3860691117cdb0bb15a35364d6b4ca264a24938a68982beb8c5e4c5b9c90480777005d4906f2007e337875201718acf464c44db8d2c0e7222583088577759384fbb7bb8bc409a790b987fedd1d09bf5aea2a0e444c0648f7adbf32145df8c2d21dbafc408f8f8ea05f26a99b182fae3d3c12f6e7d9e4404dbc20063a1a00127677d97c20a78dcc7572ef5b3693aba44a9ffb1d8c7322596658b0ee24ac61f8bf66f83ed32a953569a2f0037c634a9314905cbc8a37722eb5fabf3a5630463cc28f233953b57c0d5d2f6ef281cb3f843a7c640d6e566809cec0eda548cc1f9efe08b4b8d3604183469c34d1194bcf6a0126fc072c4c97aafac748bfd4e21b5f0347b1977e5baea1849e92d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d28388441dcd3adb103515a74be1afffeb250255ca7528e955b94e7b8ce826c97df3f371da7e7f399477c1bb033d50f4bdbfa982e3d5eddb6bf45e08dfa41d5bbd976fed018d1b8bbda013e79fd80c020ddf5379e96929cc70868f025dce41e6f3dbc220b3cc6fe70d7a4bd0659c60fba376d672016599a44f89b62aff469e7e91b24bfe645d63cb0cb03902e8ce8448b41b5886d55ebf054ddbc21c23d571a4e6a353a5f880ec2478d206a2a08d431714de562bf2aa6a5885e0bffab51bce4ed9e243eeaa5d1b2297dff1bd844b440e9cb270b6ce40b76fd79c7591d3f38a719190a5992664f24b8bce0f4d050e8072ae4a27c51b2e284304af4e2ee2dda546a8ff91affe20882c119ec1caebe406ae2b04eec9bed107cb3b66420a730ecc797c028bd97f9dff631512342355b6efb3fffa49d55a9a5d5ad45182e16f7c378ca36135a520732bdbff39d525c89c0a3118c68a779bf2f2f43cd560b4d11c606fbd089b046fae8f01447d661bc374d2b6a0e094e7b40abc240856404d2aa7364b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "473f662190fa09abd247533dd2d4cbd1880ad6419cc3b3b1dee6059d5672b28e768560c604260a181c41b6c33d9fd902163bd956f67011de608b5a7a0059e2e0be3699119afc8771c44f7f681ded984d0674754b0813fa906ff8d9db40e1e48fa25af65ac49dfebaa30c957e7ed0e06d2bfd04ca564f881dd8cb075a6a708eda0b47174c66386a5fa1b4bd2f8f2d1661d2eae0065c95560da197ef5644c7f317da9a8dce7f42f84bfd099e9cb20bbf1fcad1c4307903e18c9c5595ca8a0bf2f4b2c3c562561df21de86329a7bc5059209d05699b888848723488b111c0e72a0d84978b50242d94ee47e2df4a0c953947d846e56c9c9aaca0543ea13671e6e8b9e3c3799cef6582bdec5579f2edb171fded9e04a900c61c429cbe09768b93a417f1c59b92381682bd66d0018e94cc75dbdc0d37acd85877fa229db0eaaccd9b1e4275a9dfc2bdc60ccd7ad5a597e85c443ac95f878378d88453074b83d152d9ce4f583b57be32cc13971504d713c3ccd719e79303b0c1a866e21426e1049ce3bb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c67de527c6b72c804a52df6e44b4fe2e408a9f048948ac16db55b664b5da6044ba9b2498a14f66a83ad76f1b2363f393d85b4470d318114247c6f33c4110e24801ca915800adc98e8b3f88da6fd84be3db00d09f027dedd60e68cb0b467c04d6bc4c629c168f6ca46988b6165347aa885cb954cb4a0d2ff2851b7dbe4cb55eb89ec48ce45064f34d6907ba62d0b5468b316753ed36b1ec8b8f36a05adbd59cc03f1aca50001bf59156b9065cdbbca855c54fc3dae251a0fd1c130f545b3e2d51a632f778999bb2a6693fbed677206b65d9ef04c4dde2e5fabab0ce9668135915389dc498d1641c2a504bcf62c94339d3111d64c5fbb476d7cbde4dc72dc2f1745d02e5da12fc92f9949aa672e9a567ee4dc760610fb3f280a9612b24fb0a367a6b041e5f9075d20cf27f33c34c7a005cb2024468f2ba51de56829cfe25182fe9c7ba95c6314276852b2739c4d7da4514c58a53db655d0a7cd442e3f5728e472b8d0bda4e275c3a3a7d9734a35409ac8b6bee2def19f1507e8b21e278cbad13a4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b41adc2e291efe76182d118257243abc0f8e46353ae3acc7f22b1474ed255be6fef75c620e362c04c875c27a6e93d0beada311c01143a249b160b92753687192fe4875cbabcb09ac137db95eeeb06d9b220da294968bbfba6c0ac2e3e0089fa8038b0a501d90ec64f5270ffaf0bd135980ea84d18f7ebfb7417397c35d4cc09f7099ec5f9c5877b01b95056196d726089689189bdbd828f82ba621ee6c51e14f46de40529fb75550cc92b51887c7746eacff279ace83426de329484e2b3e366366a9570019a8e87802c8bc8d1188e1839837c3e2d108448bd9b78cd9f4d4ef7d2e038ebccdca08365115b68d08e39babcf87919918ee6d84afa8f2acf89e4ebc0847833a18b28330f6228ce6e42a1dce0144772a306e8e6abddc9970769c96ebc0e4c4ebfac7d02e9e87516396ef8134f182b4fedead9ddd8e5a14ad15a395009d58b1839b3543c9c30c01255a56ff93075b7cae3f6cc0717d8b932ba4ccb186a9af42c0df16e4af298280dd6d19eb9b806c05a9d08f2dfb436a9a4d8eb6d60d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8dd51dc50f3f37d9c4f4ce243a23ead21eb389c27478e295d95abbce83bfa439b29433b550c4e04832f16f59ceb29a7c8c38546a8b5070d37033229cae1ba097b18c05bc590c483d9e4653ce0d8d10734cbf74f35346c6d09867d5e54453c701b9ac228225900272fc916f1207e791c9cda36965935ed16a51ac1f38f773194744eaf00d6d26999ab50256553be60f7679c7001d33415ae3bc4a1cef1dfa720a65e4da6fbb87dcbe1820518b2aefc544a27a627073d6dc5e1db59991f70fccddfa909d7c1a261c355993408229fd78ec8cd889e3f7c686f5db7d66f0aecc750ac49b3fd5e4cfd7702fd2c8181a2540cc7c6ba944e2928eb547b8cb77430b1aeab5d6d1d374515106084abcc8753d3e92370bf2af7685c1fd4dd93f4a04a1dacf15109617f8652758d1fc9ddd78cfbdc44db85a5e233afa29ed6d6c239deadc93a105f47da8a77b34a6bd4ddfc302a3eba565184f3ebe4e086437edadcff4dbb0aa17fdc50401651de60ce7738d3fc0d5c51144be50b4d36b62a33dbe7a55fbc0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "471a17bf9d8a875f1206e9c139877b50389e96d0fb6c15e2f5208ca8a35a6a11cab06ef4b2b8ecd7518f2a546b792897747f9ba849550aec6bcdc268cab059b63dd69e459e317ef3eae7b508bd9e33f4c58578b45a47364e7cac4629d43cfb9d6c4585bb2d8a2f8caf342c4004e933ed6baf652d178538b8a0cebbed2447906f83261df3edad17440e0eea7eca270cd7f2b5a404d6e72565764dcbf57888df3a0b8a6dcb52405b6819af81bcdf36d5c3e7ca8b73224929cafb9d1e98bb1be32f2cdcdaabede8255687d8228efc0713bc901855fb63757b9e755033cbbf09941824762bd0ad53c724d3c6fd01877424c2107e5ca9c1f7e84f1f9dea83a9f802e22d3c2f10833c475a3dbbb5b6544fe48bbcd25248da0357502e9c5f4c00914dc41171038e800082767c62a9c9ca6ff06561f7cd35d9626535fdcce5beae3c9505efbad478915936dfc3947f86776a25c5fbbdaae42922db2607809033ad2296d602fbf47f0fac1c0a281807c6c9fbd68f4d45be8b1d1a0818b0310558f7c81558"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c8443c63bafb0f500af4dd195734765d5177e2b81016fbb647a64642f08701cf00cca3a15b76ae0f60ca9d1469d3e226d5fbcbd33ed9b249def58f54ef90000df2ef35394f454aa232e3629bd95d021b393c7c5d7fd32a5ea7cc1f5eeddc14ae8d80c7af0d781ce0609993c52943e71e01659b51cd4726f9c7d9f8c23ecd6f946dbe5991f4d064a7e7ad92278a00efd19c87a1ceb5ec1506b14860e12db6817556e279b65504a97ade4aedf84e2f44256d88b7db263be75013b3b4e19cdf4f43d1861936eba689cf9f33e1bd514f294fcf4a37c42c2b64d6d40d3acba6b437abd74ff30f2ef733829fa5c5fd00dd5b9aecfc39ba72191130944347360fb721a8d47085aaa33e35b6f5ea43cfe37d71da69ac628cb496bfec81d0ec6663436117b58d5923c09b345d399425d8176f072eac65d3fe6823473c5491c4cdaddf004243ccac1fbb5133e14d8aa59dc936cb9ca1db1716f2c8a631a751b494ad67d3c2cbf8cde2c609bdb4e847a4e318ec19ba5bc804fb92e8552eaa74e7d6a5abf16b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "448f9991dcb8b062ab546671a097260dcaaf68163440840eb0232ff8a2bfc326d53dc49fe1e0aa84d190522b3020166adc2820fe7fb51529bb9b52caa6a50bea343e1e2169f44476bf3b38ed93206d7f3285df546b674a570fae67f1f55ec3cf3023827dad09b19efb3ad90fb462438a93e3c6f555c8c9fe235c35211aefde711a2b81a805b96c5b5a27f1fe1b16afcb95cd0cf4337d20ffc20b8f505a633972bae62274f15128ccb061822667a6a14c6011193df2d43d3366b79e8d5d9f49bfb8cde25771979fc3dc58b1d5ed9b2952b885340eacf1bdc88a9a83be6ccada327b967310c9653c08985975e15eb7852ef9b815b5530d60217c9b3e2acf38c2618fbb893fd03ab47011e7a17b2acefa5c5e7d09deb4bbe283f5c8a0193ee8273f826afd3ee5e035be329ab04a2acfa6e4f8ec6f90e4e9c8954e1cb4fd2b5846643be5ec81ebbde608deb60a9448e53f7b2d592dadd0734b99cf150dc7b1dc32b0b1dbd68074a2ead3c4d885b404e81162639a34d065626bbc98a46066f6887318"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "e447af5561678214e302bf3cc4f4023df4d5ac8b27ad8e1586290bf074858cde3dcf624f6ddc6733ebad8ce49bb87dc04e6c492aa0df5b2726260de41353507cc15428e257e8f1068b79972d1f55fcb4100686dcf2cdba809d4ec70bbb22a9c4bf89e338bc63ee180ee4d65cda949c25c2137ef92bc33063ef5580cdde56f72ca206e38db6ab8825e895f5cc3d02508ce7345b16375892f3fa16b11ffd6076cb12e54c9abeb095abf01b4da32ffc977be357a6fcb4c4ba7cab3e60bc5772a83903285fa0183ca87a7bdc31b5deccd55909fb0a6a4d82af45e42a0d47c57a7541344d864c8732ac3d1f1f23cccb3f196f20edc6e1412a3b15e645a5582a9489ed697f4f46bc9a487154fb609dfdee41c424cf09719aad6c85d3ea1c122e29a8e46e0af8e7052fbb100788007d98b4a325dfcc3c4bb1eebf4d0c3c0812b7937713e8702be35a725ca5a0891f78a854188cf46ec97bdc5b44bad949359dc59e9d3e55bdd891b9850402c5ee055197065ee05d702d54f3ef7ebd7a32d44602e73383"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "557241eaacf5e190018db935feecf28d81ba14e2f91ce295a12ac5f48a9d7c7933bc886856b0a4556243b418b1f7ca3d37e3ac730e869f1b9ba119ea6c1b7d1ee906ed1e7fc31be8276b18902cfe59333b891dd864367e268404875452162ef0246be23a46acdd17234569778c887430f17f16ed1a565e97cb7e1dc2f84b68a3821df2177d4c1967b631362fbb128cbb6706b6128960169c3db606fa1b6e31e5b21c7ec1d8ef29a0138c62f902bea7b64bef7971fcd036164d4416884a97e79f641d10d302533790405f248cb502080b666e75041a6164b0cafa293f4d6793e5c4a42cb4041233d7185898daed6aa0044f1ddcc9c3ff57cfada82142cb54cb06868ee9c13b305a92f6efc4af8b8e8a569c57b3ebccb8bdc19e76ab85adb59e7075afd878356269c63812443c84d13f70c22f1c98dfa05faf85904423bb476b325244de80f8cbc874a5311a106a5b977d2d7c1c053cb2c9220d8ee34fba15757175e7c3ef5a139df245a44d08ddb8fb4525f978073c034c9001bd6fbc11786cde"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5693dd850f0170bac3e3530bffb8a9bb80b1717376b7736a9e13a343e3bb97211a4ddf47da7edfe019ae1f411bc29d5b70db962a8f36f85010c276b1141b14d42342485d81ebbc291238d1470687ae5f4d564c3f9e5d56eef63f6206c545a80cc59929d16b1916bf36de340552585db477cfe531c5621ced4ed2e450e9b995d8381294a0ae0188bbb7ae0e4501e590eaac173bed94ffc6c92cd7f95f759615b7f7152191aba74d62d10c22d7be5abc8490f659c337f612e21f26252c0da5455d5badf164b135164fc648053ab29fd73a5966af21f33c427ee121ceb563690254a33b764c6239021d83e25a0ae2d2f9b0b162907a548c28c34eead5b4226bac554789f95b7a7486c5160e345780c28912a7c5510bf661b00d7bf09d2a709b30e66fabc369a436cc1f24051e010d5e66115724d4e216cb2c2d5480a72ceeb694e7adafe963deb72e2d32f6a39b2bebd0bc9fcd9e32ec1d58d238b385fd967db3ee485ab5d6938f36e0cb475a61d2c93250e30172946157ffd67be345fb9d8a1930"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d562cad64efe72291dffbc533a218789806229690495e470c0f1fa92ac7388d8c9cd28185c30d302c1c12dc0a8a275a3038e90a8e1b4c0dd2cbcb1122b25fefdf3a3b5bc95c51151c7ec4f2c6dd91a1fdb4f1c95394291ce477a9bc6c374010d073b6d2699a302e10eac34432bde58b2ea64ffa5a165bbe9361221314e46fe63cd668c33f91c995e0ce090525d86509a34b8edfe333c5fc2f15c0bb823d0ce5cf407b38663bc9dd20b9520f9912d8c792771220adc083478a08884423c6f13852e356adea36476f5b7a6da5e127788958fd42a746d854a8aa2834445fc7caf534fe6a07e45330eeeac8c042f1cc528d39a8ef016c5bb88d9bde9fd8502642ccb9d120756cc6eefb34fd379ed20d6f3fd391b54a31dc758a8780935d52881082f23f0b5c9460e83369b9fe030d30be208f8a4686b9f74dc6dda9f29957eb02bc8238ccc3444af8e160f6511633c96b683a5e4f94499a9a944374283e76891072b5cb6216594d87581c2b00c884b07785dd58b954f4f850417f8bfdf6fef77f99f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25b461d95013af14d316948ff8776927113814cb3acc23b7f241799838d9081481e7f27fe1c57a40cb6303f4bdabe3c732c350abec0330164da650eafcd62cc44fd545b8ed7b2247573e4b8c7fc0a0f07a4b4cd685fa64cc9c27dbf7bbf35be98de52249a80e9610f91c724e09e657e3b95d2ad71478f8dd379c73c193fe503245ac003c238045c6e799b3bfd805e55096f86ee9a46e27fc2353fb59439bb7a01bc58956f052543c6da133c5902a053ed5e0c5ec074f35757bddaecef424a7705437e217224b5265445e11110a8dee8cc8881ee03653e9f68ea9ec5dd77810b9eb9cd68ae153531426f208b9e669be6a5013438283f00a1f9e827522178b9730ab72b9ffff5af9bd5dfa87632794d17913467ff0aea511a8aba2774d638a6bf8bc5a5c6589dc9e72df8c6ce28762a2094746e708bccfb4ec975f3676e3729d452542996dfa9dc4263e743afebff649a0b12c214efae176fa22e5342c8f66b10d012f6852136a82ad8da72d2a174b510aa99184df188be760743704d42900d155"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "07de84b9faf2ae81955fb71df5e5e0b432f1ff72bab8b80a3305416d854e4bcc0c33db78d0ea4e51b63ff3c9ed9b7e428fa72a27f9124fe7f7810cf83b830c5993b8fdb85fd7738e8965d48807b087d58d322efa3cc1006abb273f32dc52d6e98ca411fac77617467297750d0413f0af18a39b7429045a0b6122c7cd601b4bb04611a38f6c82117389981f1270f81a4a6f81782ee8ade72559cc7008f86065d697ff5721f34cdca3f7ead956d25bc1387ede5b5e1bc84fc47a31dab45920817c6b86f15fadeab17c22123e6bd4162733ac5a97d58d2e2b9c1fac6cdf682436d719a7940210c546c74c7ed3d64d76d7af06d7eb1eb3d0a5b31dd2322fc8fa3147592ca4f35863c05c60431870c91cb537846dd9028e82f3e014dd8456603cbeba7e48ca89d75ddf053dad7c89fa6ee2d315d1e57841540004251372777e6feb350b6f8e04934b4e623d631a76b2ed78fe67d55ddee2750fc3fc56ddac7141640ccf2b4bbe4e23faf4c9de76b50980a1388afb4b342e6f94bcf6e37988ab523b71"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e3712c19853d5431f8211843b51a56f8f09e182c52c21c8ec8af0b4b01330d3d82618048240eb27b7595b99532676b45f338453cbeb5bf089a2fe6c5a9f2766696254546b2579efa6020324ef17516192b8897f6b5f8e9567bb05b449a0749e2aef992454aeec0a44a4a49b9b2ee6e231428166720c178226f29e48b0dee66c7089aeee7a60ac9001a3dc7873717a4c25e11c3b15a2e688a740d3463f3d4d22c66ae7b749a4a17beb8bdd15fb64a20538edeb2bb5eca7837f4bfeafd0858e910ae943b3073847f68c08186cbbaa1c35e33262077fca3be60e2a8bc051553eefd08d23eca5665837d0a604ecbdfbc16560079a0f7bd1f0659b7ac251a1fcbc18870164996a9601d9882685f359a0ceefd9b476a297ec4e482496da0fe41a081c43bf9e05b4657ee76cec9f50410e190a814cc5ad6125b2c1dae0d07c3aab98839f78a77a20ac238b106289082c695275d989e77eb45f0b63db84546f6c63ba2c0247f73a340bfc55fdefdf02e5de4cb9047a2fc41747a661eed538d980ceface"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1d0050b90e5eb30d6f772999383dbf06b89f5752b461b05dc62cf9daea0340a1f43424ffc567c54a9be58a688315618734f2098005552a07d6916221c0f24f539ea57454907d5648670e50a7907a5c7a7156d9576689a3b72e7c78c892a0eb2f4a241484bda80916899fc8ba6080431f47a78a17a0467722ce8b7e66c1502eeafa5963857a1791aa61c355d1d56f1f9c76b4e1c05b2a669fcc22a305baa6754245477aa6c02947cfa15930807884014d3a5d784ed291b5e3261d4e4079a7bf5f07ede12d6a9ea4e0f05909dbd46fdf7f504132963a7aba86f23b0691bd69161e81bebce5bd8b5d545bca66c430e6a05ee7f7d1d9c3b6498c534d1bea91b127d432d45976b29de017523547b936d163d8d8d75d4ad549a502ec441180ef6f06b41ab827a57530499fff99fa4a8c308ecd9bca6764a0846eea97e15cdd19a028fb3ccb1d33f407ed8bf04d8b73b7e004e17ac8e5fc44be897d46e1420b5c57566c114ddc25a05ae8e8525b92ae9b28b2e313658b4f941a6989b46db6ddd8c371f3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9a0d31e7f932b616c73ff612e42dd74c9d6f7566a40fae8e6677cf6d54fb6f2e579b28d0d2d8670a33b3fcb3ebc57d7ffc202b801aade2229540e9c45327ede92354bda2dab08190ef6985d824d03af59709f022ab33cd8559b48745f1dfa158e100a68e6acef782407fb0ef4b96b4bf2fd7e40695191845aa88738e66cffd7267d04536e4979508312fed2894db446220014c3cfa8db1fece66e484b56f105755e6d65706bca5b8b4e0b615d56986f1d0ed35b5357d17f54a32f4d5063ff61ea4c853f0fa99d77efbcfd21081589fe63441324a0fedcb6cb31c91f6579b2b8b8ccd288a0f0fb9f907b474686d41c4ed25bfd07acb864118825ce56814babdf6dc8ffaf5a5cd6a30941f7760d9276e00d91e9ac5ba4fd0b3900d54539be2879bc95c6c58e6b8443cd8d561919ac2431528bb8b5f67cde0d05f2e5b4e22aa902771596b5389b662ee847f077f9b8cc35f0c8192576af7aeec1d2c719bf7183f072bf3bab37897aecd785078a4bdb06d0bc2367df36ade0583449ab25e8d035ce2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3495cf0c5cbf064fdfa088be1d7e57982a798c17933513d404197aff77c0513cae184df56e0bbbfe6b8311a281d8e2cbb42157a156938381f4b0b1aebbe408d6b0365fc20e8f00c39020fe740332b14d69fb3ec734984e92bf406f1449603164adf2c3c77675b30d25cd5f403acc5f104aa754f755626f1e5bc9fc0c570ef3bb9e7dd2633ec9163f056cddf73debc548d52bec6214af9b4c6b5860d54c2a08b6f81af40f8fbba9902a65e388a121402ea276cd89e0076315d4e12e045497236473dbf6eff14ef21f7875daaab03a81b5070394c127bba13e9fc4480ad245cf4ca8bee343028db6a808a2876b7130bf1f0b4d1de1f1a7f841609db96b50a28ad4e263a76b78ac2fdf3996cc5b67b6fd71f16bbed1067c0f9e71f399990b9223bbd8628614a7fad5a45970c4ffe174120a538ace6969fe0cffc9508929606e4a30ea28d555124206063f2ba7856c6beb0367012176bc258a6688647b161ab2382f9b3c926d33dffc12ec15049c2df248a46f961ba92a94b9e36083d0c229c406ce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "330ed439b3750e35bca2cbef5bc0470799c56b206256b543d026dc11a34d15d73c696e03340c8f0751b0dd204b53af0cebc32a1cf1f33b20b5755bc4f2b9f2c8bc91939f880e62a0d8f54fdba12e602ea37af779a2afb9258e19fdcd51d4e767733ff9827432adad2f0781a46991d3d1dd9a8e5a700860e7defb0fdd3b4097aa101f95814b848abc0cb5cbb260e61c42673e0e836eb31f97a0a50ae9aa1df72ef603f0e78c91459e690363042113335b2e1050eaee0b83ae5f6ceb50a4c88956d5b01451d56e72a7755c28768004b258d86c2d790ddbbd66cd0a7f5d017bb62b957fb0b6e6253a88eb94dd5d3cf90c92dc2563b728f46928b83b1a29ecd8100e7efe254c7e043f215933f7e9873fd0cea1221f03e31f43649cc2c1bb42d7f040bd5fb401a1f3381e5c4a4fc1f973b67460b5bd2c7c99d29dc14490922138b8a3b9a2a415f50206f50d254fdea8702cf2e4057ea77cea8f18c5da655416a1f7eea84667789f78faa98a871b0a6837babab974b60ed54cc7d287d538f140e7fd6a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6818ee1c57e9ef40da6b1aafb3d3cfc9376eff56c2913b8b2e0891dc7ffe4450fb25f2a8d1b379c13b6b8f45993219112adac050f43ac612e7957c9484a3bafef2e550d15a8dd88faf9525a2fbec8c702d0721a408b1261b3af2be9c817e0e1dfe8b6c58c569539d66f6346fe0813762caf0ea857895e1fe90d50e1e0bf1fcea7d2cae0d5bd2eae197b0eb6ea15eaac077dd81e10c07e71f948382db1c5dd6ee4d86b0144aa648c38eea0d8253eb988205a71af95e1afb33dd20fe8315c16ced59d6185acc43e8dddf968875c331c5ac31af14a9e55023ed03f503487229be4f772eef970f3f132d1fdf334737848994d939074c4ccd448e6d2b9065088003d76d9ef38e8c713a5d8a010c9ea6dbb0bc07d32a515ad1437029bad8eeaabbe92f1b173bc8c92af832e18fe0b60a006818ebf75622ffcea489cb3f165c905c18a52a04188bcf132db833d7416858d81bbaeb8a62f80c1b328133647b36db5e4b37ef16713a16223fb24e8ae93c9d687c62c77f4ecca256e30b3ff88cd8ca3c0c68"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "947f2927355398312e17781d59a713a6ecdccd4ee315049c041b788ca52c691a7037bb489f71ecac2776dd1171853483eb453d4b93f136d51318cf32469b3d56d04bbe6dfee2721abdda3f40551beacb3f2348dbf0a8056bc4bef013a4e9819e20e2b045c3bf77f79c116993c8064c46cef8895f874438c30e555a59258d1a01596fdaabb22fed93c51c2a4881c08bd09c3219e5fa2979a32775c00f61af935c839f7f0f54a74677b194749ea1831c44e61113474396e398e4d821d65e41b3cd55cbab2b703435073a3b0c2705622cf802f67f346babfde288ebd26bd909813d8bf51fa2b07946ac0e523c802173fe6a42f41568281944f4dee91077a12e41d37e53a4704d367c2b5b013c90f73b7f24d703cfb006c8d0b399f498ef2b62f08834835108dacf637959c5506a26bc3ef5e30e1100b093707fd3b5190b597d0a6f270b21eea9aeed5b1e77acbdc01c8875724744b37554791631cb60a96ed9d7b985c2d6a2c09a33a17475e2ba47b3f56f9a33072a0fa920eb88ca0d9bd195bdde"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d054b2a5ae9bb9ded9a28528b59530dbd6ac220d761652fa44ace78743c5432a517024900c9b24574e096b6d1b295ee5251d2923a928e7852820c455c43b76e1d522ca82f98852d7cbdcfe0f85ff1f3de2cf383ed6172574b12af7fb03c58023644100effe836bfbf8e7362378541f0569606d1842fabfa288dae9ef271079023eaaafb6e6b4957e0ef96bb18b968d73de32707296e805691532925e18a709d036bd798a6ea0ee61c18aab41322a7063dc372bb1f0b9991d2314c94e370a8966a2187a8940d81b6db830931c101ecc47d13c0b9f91b3a07ad0268d0f3693684df91a8720463fd1442f01e5eaf6741d2c2391a8b4d55150728825dd9e922d89823051948c99921b7280675641e9a94c3a9d3de31332545cb6e88fe54d38a111a1f125241333ffc58bbbc4e759b3986d73a3a8f7f4fd81c1c634b65854d12dca87f1d40fa5624079426a53be23a1649252ef027605f3e82333861de641319b8418b963d2d043ff789406c3e34cdecccf111343632c1bad9deb525783676c36119e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "28cad6c07a93289cdc0ffce1c1beb709c6d344883e0e175feee78cd6c9a9700cc89d51cbb214e7b8e6e84a3039ad2eb2be4aac0c968b9081af46ca68fa1155554b923eae4f4129cafe12c44891656b5433d4e048fcc1468710bd9a3447e917a35d6333d4b5c7118996f61e0730af44fe2c663e980b301d8c7c33279da81adbdf33c8e90b04011665c6263fecdc45716015e11b5d9ce3077d894f4168159f37f2ab3296e66f2669f766029f8772835d7b887aef0d597a537f1db4e84e1ee45bd8293b4bb6f302904021522cb9eec833fcec2ba008fad69a6372470cb67207f29bbddb4a22470d91cd58c09e37d54a0751613ae8e0f29007a409d31c4e61dd6ab8d181d14474b56eef68995f2ab50622c998fd49656c9f6507f583927209253886f60de38c294f1fb95cd0f5fe3bb8d9f1462730c599093aa9418429c3ed45d595fc43198094ce216acc729abc9d7d5c2a95014d8b02fd50a7bdf69a3c3bfbbdbf3e29de2217825fda34799f231fd7d3ff80d1fbf82f82ccc189598590a051c23a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d266da27670c18b97ccd0fe8beb45f2f83a0969258449fabbedc12d7bfe078ba741daca1c3fe504631b221eb1c899aa6c3a89d3a3904f48ebeeddbdca91b1bb9400eb1bb4d9f4ec903000ce239bb0a807de2c3b916336dc196ec87832774b701115796c4ffc66a6e344c9dd1ba9cd8517e93694f4d4502b20c72cb87426f250373113ab5b4f73c0b93de792ad714225eb70b9b44ee154719d89ad6c5c2c78917d3dcceddcdeea90bdaf0b35f2d77bd08f099a245cb39af8cf70d9dac0efeea156aaf83b5316b5f05c6fd9a3b6de3e82c9d02fdc5df5e25888c200219dc324c856d7a0b5687e3463a13accfb1b13b25f3b35ec84e551b2fd3738a1924dfb931b4d264e9515c508782c6ca04e2f66c30ec54873d39c0501459f0749aafc652531aca65d1fbf9b4d3f1272d8e87ed5dc680456d8e7771790a64b628ab05addd1078e99c0e197f9bd648db9caeca4e7160563496a18606e57bf5cd1c21bbfbca5a138852fc471eb09cd5a9e900409dcb2e0b733c54903a70d04e58cd64ee441d9ada"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb94c13e6a00776c615fc879f33bde87218a3ba010138d8e239d6480db2431a67499a86d86558e3c16c8292ac5e5324981684894c8c7408f741de4bb4580ba6250f81ca6d0e8927f01de76b48f5e176634e0627342ec7d941fc25926d4b3efa0d94d9e53379c0f07f0d7a68f3fb26ec2073d257a6fed96393707e09e4f7eb247d106720e91911637bf43866d7ac90128159bd2381a5799a03b5658f2ec5956214383f3bf7b11837621dc4dd2a38fa4bf979bdbed9752ab6fb5c5af684304220faa3a5329bd106275900633488f25fcdb7bfb13db8435a53050f00866705c1a6c51507304a7c09c166e15bab7e808032da23405e8d2d25f64066c07a5acec27554782d2fee6d71a52f588268dc6fc928bffce6fc5eff2f53fb9d923f0e036df832c2e834b738646f1726c4016df56cef624d017a8755a9d9c8a885f53774af71ee69b34b7ab5eba4270a19f979909cf8331d64b32f759504ef35e6e1e839c66b000dfe24893a7a55a3d422c2be8c51417c266288fdd5cc98f8af150e579b42e96"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4f66ac4021d9aa29b43caf068b45c62300884232650b1809cc5c1eb9feb5834c9177d5281d53af9b9a868471936fe7911d5a1455fe101a394182c1c21d5aa7cf203eecbd02507797c8f9d1a7d69c53f639f61ef112ad99e87e65d02a15dc48e90acba7b09be2366eafb45a1d2dd4b2caab7fe07b0e3ba94e160a58df743c15d286bf8966447d4305c1b2d27d23203e1eae1a7e2ed7da7b7962c4f6e95e9bdb30e02dc1206039e84aaf495ab6c04628a661f06e7592c4a9f5ad9019e2c4f090fe05282f00b43ca98a8ab1a0b38db98a7ec36c1d1afc61a9839796fcfbcb0560aca2d11a8bfa7dcc46e76b69678184b8ded0d49efc601ec69266164f8e5ad7f7ed416a92c6bf62fff7fea732add959723247c2b688f60a7aa1cea5ebf913caee52cc70f7a850fe1c8b006e4e244cf2d4f948f040e28e90a57a80f2e4fedf6650d59683af70678f52e79b9c60a93536814fc6d669be8092703bee6f2d842518fb7a031d6562c740ec018918aac1ba9192b4b552a3cc620251bdd62670a834627bdd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ed93465874a3d62afda94f71718914dff11e99e0793d9a4ba45440f475eff498951cdf6f435f163d78f610a0dd06393e99dd2e7f5139db0c4ddc43a932ecd1b498fd8bf5443c7d62e53230869e631e5ff8a85e379b34c152d662afde843f205b99d15c2258ddf6fe286ae58005d21d4c24d016e2e084d78e684b7344302409e050dd759a5f5168a587a8189c2781f7ce784780c0a6a0ac4978a4a7f95b457b4cf2757246d73e14a957ed061edb0d0c8f345cce741dd7a1c79af84a81fcac9c4badf490ca28c8b8a4b90d2214299f8a6a092012346f8fd0d679439a0dea2e196cdbe8a9a9434982a5fa20af9cc19df2deecbb86dd4772297db08e407d78bd6d0d95aeb4c987a21007ef00276eff17ff24db4f51f5dda13a75cb7b09375e99b6965ca73f423dcc1d5e9aeaf20fd09cdfca37082b92a9a582781da5eed90eaae7b0a6c7684abd0f0417c3c1e8225dfbbb432176304754d82c96dee504fd36d4c1ec0c750d4276180a52c2fc93580192084f270925ba138c52b52a95ab16be998cbd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "eeab3ec4df4e69668f23a6de6d071be7ff5e01613dbfeccefc722997ded7114f680f0fea889a070ea1e1fccd513b1b23059d0eb99d41f4cb08f2b8a1af16584b34f29341722355eae5a8a223c391cb392193e9367b81cdb46b8d897916f5f054a7a02aae0af18fb553050c88ad94ad406e574a52dbb167997dba36d2e8707ae43df0ae089d663c93daca1c354ba9fad356ad788068c7a82a7fe82445f732908e2dfce7d16eea2212945a918d6eae80b8ae93f9fbc4babdddd4b09a040cc355200149ae4d82ae968db6d7693192adba439f33be49143266bbe157baf4291eb8f75328ef0c76fd5cafb554aa843fba336d4f9862f2a2223035fb9e37a43c7cbae811980bed620768d5690a9fb087d050b0f8a09867caaf23ddbeff490497f7d26cca6d69d0beaacbec5a7e4af606a1eef4c4316ac4084b9b51663b438f97e507b54b86e5579409e13de979d749f365e50dbff67b0ee7994ed38e96ac897135c6a249855dbfc10b4628025b7177c3cb0107b1eb66cef39bca2ae00afaae2bb236c1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2c5c3cc5f8cec4eac19265eb456fed4be0c582d3324407bdc6aab5002534fa32dccf93ef7f1ac30bdc5f5c2c4964a0483bdff24ea5694224edf98f808c847ceffba864c3cd8b2260626129bfc59ee0117b53bfab63f437c96af170c0caaa68d8d8ed84261cd472b1edf699483fe7b794d07eee92b637dc1c49aa7c1a6aa2dce34abffccb37db3647d3ab877fa11475d0ac2647b4d4e439185a11619cd956f9dbf9f73a33faa321f2f5c501114528817e932ee71be313b4507741ae81ce6b1ab3610f2a65ead30268cc1c5ce3189a37e8218459d717dab5c09f991fff3e07ee309b1bb607144dd0d477cd18b7147b065f9e09b8ecf282dcfa2745154a75cde6097329a9782968b118bb23f3d2b36aa3a023da114dc648fd740250e76cb952d7edc0ddcfe96573ce196cbb9ee3b309b88de6213d1b220a24a95d753cece91e12b211832968fa450cf8f752fd983e64baf9d0707dd708670d614105a574523d49e492d77647717d653c4ce6f997560c3c35e63342a903385d17a1e2174ac8ff4db4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d789585d72ef27eab443d409250ff15e4e188ed3bf497198167fee8c3476bfa2b7f3ed644fee7aeed40bf02df57ec28596fb0a5df4db780fdf78ec97e709c43ab7b805c381d32948f8e43ea2663a8e2fa6f817b99ae897a483bc37d4315f95e8fdd0735d742b9da61ffd7d468855f2aabb2c5d5d5f96c9f5458a4ec612b911a41618160e0a9bf0ac98f723e73a947e8826b1e05b7a293188f3ccec45aa8e8a225f386275287dfd5d6896a716532f876797749d3ac3a60b6dd016fc6fe11007419b605777d3e4d88a1d413bfdfd9698cc67e717e110c386e0c0fef2939648eaa0b0f83e1121a70c0c93dfdc3a92c6fa60f98355e8da8f368302defc9d5f3813de9de57dd493559460383413ac1adf3eccf8ba749e492c7d98da5356565a1eafccbfab2534e405ffb4c89a9548a162445d1027ed93ea6dcfbe4825af3b629dd8f0454cf54f54944986518be2f9bf6c68314c2e98bc10afede065d7c767f1c4ee11ec7121182722afd0f0e3ab65190fd35b227d86daf3f8f740d6164ea5310895a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "068b2f62d5a72b3d9c1cb75c55699e539c9a9f97c5eb4137aaa30da1c9c2e6438aafca227f6bb87c02194646aafbebfda1f43f361c0fb0ec53ef07f86c9ed3db7ed39fcf08fd3fd0212ec51eddf3059104516ddd1cb0bd9ea329c793772aaf7003e3b0387c03a79eea56695f415c3aa0029238d0baaf619ce5aee8fa73aac1e79949048c330e7b33f55fa4e8822d926394c958045ab6a97859eee5f39f614711a11d5057b5a467802651bff2645d897fb8b95207a968babec7b7604bbfeeafed44e3000dfd4241ebdd87e29103af5184399c65620c9075a91fd2ae5a40c614e4f07cf2c94bb868f0b99ff284a4f4bc1f14834d26ed45349c959c30e8cedbcead87fa7adfb898f998118332a06404ac36d7a897595b64adccf9169865b0d412c204c5f776bfce6959230e29574111e50189dbf0f967856643f135a2c51c8e90f467cd55fac3e8bfe4314d23f46e8f28f399e626f9d576997b21b4be2d9b7e50fc150661a25032d9f150c97a9b4031dd646e411d09054765068e73c1da7fa9f9af"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b9c7a5fdba8b0c84a6f98b1c419c6088a478346c75049822877b2402a5d28a0bd6759a1a579e6adb33a59c1bdbe1f829f2d3a4cce9f54ac7c1932a6d7e8c750e538e70a1a2e0af1481096687235d7b598c3ee9fdb3a6ea46b50fae66dfae54a1bb475ec742598dbce5febfce6de99f00176ac8cfde273a0eea6ebf0479f2dc676087873cd204bbf9cc49872571c4965b8d57c511328cd72811f89a6b216a28b9906c12b1dc38282b3cc7f2cbc52803123cb8cc0ac1a58397a7ce85656a17dc19e432fb124b607ac13879a4477dbc099d3826c3d92aa6af39f80fc4934816dde6b50a932cbf902f2f11125c8ec68b56aff6ac545601472380b1f3a19238ca8ee8e8f9e2ca3d3913c4a7f0d6e959590a739028a240d30813260e63e25132e572e7705acb241716aadbd0b9a051df5c5a7ac9a98304d13bdd518a84ddf589ae2d7f122aab5c1db9a7bcdd4688faf3209e80cd9aec91971121f1e5c799d55915b88dee9deb835ae74ad898293988e54662c29559535adea863ef606ceb559d9e236"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a7ace057a106782b546816f8dcc81cf41216c18e587d8a5753ffa780fc51007196f37a816beac993023b41d192ac88cd30e2e9719309aedc367defd2893d767dae6c6148dbbe6fd4ce3636bed48b746982795dd206d11e603f77fb46fd56ac9e51a88f26c9c9512d3cf851afbfecb061bb6ffe7510bc4a8f4c17b8a6135f9b80557149834d18f4bb23822c1384a48a62ef3e3b723fdbd250d25d25177355ed361d54f372a78798cc111d6374d40062c5d4c5e43e8df75af841cab36bb15c5d4031afef9ae76670059a760e7aa610df8517deedcc6d616366473b8193fea07b3226bb67c3989778a868997371cc4f1242c77e85c2fab1c342ac49131937f16f4f0cb4342874374232ea1aabc7e3681aca47bdf358845f668a8844a7732a48075caaad959354592f5f3ec413cdddf337c64d0263b4096762a7eeb495bc7bf9868c9be5334697f7118c8c1274cdf300937955e36babc895745d02c22f1874159a33abe0cff3da62b76b3921b24573514dff80505c10c530a78b379da653dbc2947b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7beb0b9c393a8514932ce399ecbcc86d4725fc7c64840d24a45564548eb5c01774f89a75d3365e653fe39be83484b5243d3fd894191ff011f7a16195c1c6b4c9f474bb7abb45981077f49f696b5faae60e45755cc58e4f006a5fe1b02fbdba5e37f0d7a9d930bc2e68cca8f345713a9d0604ac8dd4c53e435631993f3b1aa9a2986dbd0aa9bda6e0789652387fb60aac6183b815743efdc4180917a30fe6f4fbc97cfd2c181855f4571408707fe61c5ead6bf36ebd4d13f4acae41b77160a4fa2ab8895ea7a36e6c8e48a4ab47be8addf9d1f1b9317b94889087a7c459fa89aa7bce959417674765b58554233e561bb03e7265afc15d7078fb18053445e865f5ba637d282406f7634e2d1ecb022b98569203b56c55c2d493b1414684984db401464559b339e37c6c6a147d3d5c05b56fb0eeeddd917a121ee1338ccd33f80fd0cac3cd7d9ff92ab080ed5f9bf350b39580fae2ef3046d03e67fb7cf0ae32872ed0515d27899409b34f842c8eac6a8c7f840fca270725b354500d1b1a904d06c5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a2ab1f73bcefdc551b574a99ef47e7d21aa4ed547f8428d219e6e3eb94a366d0979a43aa3b8579b600ae6d98fe5a61adcc06c04534a1e1409f46247e87111fe508fa38efb61e72d8b46bcd75aee82e601e025cc6a7fa90d807b9b1457d9f1b7253f3aef066bc2833140d215438f9eb288ea9bc4d18c3cddb2dc593732f08e34ba91174131a1d71e29468c46bd2a16020e1d8119394e77291427a22f2e8254b402073cb05c00776f849cce648bb0c38dd11f23efab69d5e68a689cde892fdda408146234021503b6aff7abda2539068b366f61f3115767104df1d423cbfa4fae159abfe1d2bbb10a4efc2aff19893bfab58b42c9dfb7faf3ee962b298bd600d2af0f7b87f354f4b2092ef45e18625942f1ff7aca0033789bafbf98b49c9f845e3d9cafc0e89c5fdfbfebcbc4714136308e80f575b96877c28bb4b3cdca7d6212f6b52217bc16203c7fc37f2ed48c61d5d5b2a957770abb1457792004d177dca34115bff7dc10789e44c8d491496f310c313b1265d57463a02b7acb6690569d86"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb7481d11b26b392b392fb12e7b2035f6053511e9c00bf926a556f04597a663c953c9315138ddf3ffdae4f97f3f296718348d6bc80b389b1a2a8672cb2e410f1a18d2a376c527f8361fb85e7d9fd3371c9ac5cb26c96679e28104dbb33d423df039706d4a058751a52bb138176e0d72d765ab99398aeb0e22707e97a61ac65fedf8e6fbd401a9122c73f4e15b2d9754661515a3a9033b4e9d8da4e9cdfc6f747bdf2d44b06c296db646b5f668d60f622c65b23f2713f4ebe47c154d74d5a1d5bbfef08606a8ebe3e8a4e3fd26fdcf1ea9969382363122148744364c7e0e1f98b3d5c3d09fac98f3b065d67efba87d709f4a4fa54a9b07974e5e8194926f219a9f9fb548a6afb363032255d06c84e43a8983a20227ce298ef9b3f677569291096444f19d01b629b90dc09dd80a550db66aca16552a521df07ffdb0cbb4ac14f5b2b990e84129cd15bf79e210560b3e9d9a57f11a8ba8752441b3cc98d65628fdf329a0e51a77c9c15f29e2c5cb3c76c9a00c36900eb97f1ac3f65bd0fc051c177"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "d4328711d786df1aa78d2bd8f93921d208862d596d92273d861ae5296c0909a6a3bef5a5a49728896a9430e6d8ef9903fecc910c66cf0a9366fb1be322b7760ea0b02768a339d177a392de3efc44216c0a80b68212dfa2d43f95d2b3e4730c770979d67db173ff0f29e00b1abcdfa78afe2f20673f84d75c4b4ebbc0c4499d69c7fb5253bea5c06ba37d6fcbc384e69dda6ad7ae18a220b3f7dd548ff2ae547502567a6cd34456576fdcdd813b491d7f77117288d10ab91de9bc8342407b53d70dd83f4b94b00eee3ef7cd13e9147870382efee58563007b96dd910a7a83cb1246ea39a492e596190511dd313aebcb3ff5f8dd9bd0d9e29b01f75dd9a6a0c62f008f1b24769c0cfb9f56d05f2a102976985e7bf84f75ab3611ca40068ad9c4b1a3db684cd816bc605b22192ed3e0beb5ea42d4242e0ae939e6fdc3acf35755249af5bc8d44b34836463627220d388ba9a356525f77bb636106d961d5ddc069e2301e454f486d478e06becb8574860dc24b617f5709c6f3d981817703a13fcc46"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b938542a768f5d8733e373f6b21cdde86bec1a6693d4cb150527491a3707588026527c8bd3b5ce9495068eff3b828844d80b65aa86e0376a487776f648e8bebf487bb02f8b2a6a9703223975f540e7447f14fcbc9dea14463fe42a998934fa8d4516afd7144f199b9b8cc3026217b981649ef89b19c508c6f6880585749787274a7d91e3cee34d69eb52930dd52ecb034ba6f3d482b36446fcbde1e96d45fe36ac1f17c43a2a7b7028113f063ff4cd61b82cb61f4cca8a407848333ffcef570e6e4c39ae0731445e8430f474a1bf48ef138f5188d0e16334139bc40fae60a3cb8cab659cfa992f913bf91541823e38db370d30fcccb260f1dba1e859d7097c4456beb16d5c7674b3dea4a892710b1afb98d43482376fc323abbde6e421d43bc9be112969c5924fc831c43870c2f5e2459fcaaae3038f75028e998251877284506c1a1a231b322572a93fc42c3d8fe23bf03c1ff060100bccc616d92865db402f03f5d7632857156b71322492bd5c9676d8444267d28eddf9023ae84a96eecb4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4069c3930a7eddeca877e379c2fd9216142086e8934a0dbba227707397cbb967607640834803f7da65e7722316e465dc43234ad802ff957b7d15b4dd196e7f5db9ab0b6a977cee1b70980e3d6731ba6250b5b44693d28105759a47050504f073bee6e50fccd4fca13d53424dd43c83770cb06a40df71c650450bbd44730c6af16fdf00fbb12b482730b4743e7a2babce66f2494d63ee89ba419d3d46000b58c70f7907ba16796db39c5802d70c85ad82706dc63e927d6acbfc7436df4135b8f9d4953d330321015c232e63c5c68554081b2b1adfdf70e5e7321f537a3f0659d8701739c86bd16c17ee4843da23109e716cb2437bf6a45dfde5fc1b76967625c725233aef7af252c81687113c754c7a533e8c6ccde6abe8044d9f3a15e9c0059dcd3ebf892638d27ee9e9246dee80b9674f2b1a5395ed0ec22df3e6497207f858282684f8def8c97a13631ec21d622d9ef6d4882d49659aa2d2bdf37708d380739a43c797616021cd47eeab66e5ec7532655e43cebc83e5c045fefd322c08c995"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "939e8efca0177e51ea7c3134efebd3d229f6eb6426ac33530c9db86024c166f50e13706ec423e8196c8fe21157b252c15ff692ed4cc6ca8cb0501c443c63bc0e9dd167f8db8b05e06f7655934a4b446b4435b6d1e00cb50028d83961d7f153c4942a87310ed2dea6fe626b8755a5f14fc5f6383ef3455819984d9dc4e6351db56a1a2f17da21ba3515f75032b62d5553b06a00d00de77920a94beeb1a48400865b7f97e7d9a9c518a2d8112b356291f1e60234cad3515f7fec3a3209b8b76c9fb59d0083844c2475c973fd223027d1c10562d129dd2afb904823bcbeb85bc45b62a42a8ad91ed3f0e62d722ce2dcadf1898588ba468510327ac59ee7333a6a137a0f3a061b5c5cafe2b5f57f1575184fd19491d95b8829f9845fc32fcc18cf2f1297de0b1d8426bbd313618edd5ae94fb982468847403e46061d38caf242285a9ad2ba55287748e14b67fc333e485b6ae29fe7dba582f56e208cbf5ac281fc853c57cd68e4e45d38a42bbeab4211e87168efdf337f8b44f14fa69e1a7f1e46a6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "08317cd804400c88a2cf3055bdb9add4ff6c5844cf5d521e05a59dd32d30397688a1abe7212b385ba4eb82cbf091dde7bdcf16e706675b6687f2765447f2647cb9b626abb96173baaf4f9c24a0ae0a25f2d337312cb58cb7a3487489c91d12390213fb6cc32459369b410e8f87c7013bec907fa0980a31afc213842501498068d3207b48405e13c9cc2e24587aa5621b4c76898ec8219d05043aa2c347805fa2141ced11126850d62b6cf63f05c568cffa1d58c25ebf9771fe0fcac49d1c9b7c6f04d1730f8ccb25722741a64f13f7627d2ed7c89187bb704a6b461e315f36342ad6d7cb270940286af3be4083a5f1d5c1441528b21d0b02af7791a6ca5b72f962d3b7a6f8892dafb35f91425fd7b921179a1280c056f3cf283c8294bf29da404f80e62a9c0a76a0359d8dc6c01159e369ef2d2a29dbb655dfede14f6e3b4fc0d4dc9dbd52501bc6b3fe747bcf8753379791204e4138bae4daf1d6db65e0f9dfd053d90237e12a044e331a6b6bb451ed26405c8534760d00e7d46a0c47b09537"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e35d7e838f318735a6050fb3faea4beede2e0c3e5bd007b096f4d2bf855af1c29909ee6859e3012f3509372f8975be33ba4cf4111f25e7cf91ab9cd23df7bb27e7246f6d03449dae81f93e141044b95365777e1127ef2df2f33c0a43cf1cb28a9b3e877ecc0979983bab8d2da8be009706b5636ec753828aa51c01f48b57c9e2bdd7f23330c47a27d556638ca0d8f92b8d1d5273e7d936500ba5ac79470a669da9ae334256d34dac2d3b241baa61d8127735bd42f43bbc928ef9881996d72012f940e7b8c81ff6d37b5b0f6c3b116d53d816273f33112008ae256352401dcacc12d27f5c912456b5a72334437ee0d4a04ef5c6e77c29d190563c1c500a558b2dee8a432c9aebc53a1f07ffb597d25c832f4df2a4415fb4c142dcd2d8b03020340976f33d58cd8f27b757e6936200f297027a67beef36b50ea79a88c39b0eb5cdb3de55fd8650dd3f480104f418bf7a8e6ed2304db3168beb1d060a00069180f4d820894566bc9237b12b0d87dc5266c07928de63258e3ab532b700cd7cde84b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d5245"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d52450000"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d5244"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "fae12363cc51e266de7d74b989085f10fc08f44363fab4ea7fcc56101d116616c43de313b70569cb27de134ecf35fcbcc448a81082678ee1ae427c48f459ab2c42c9085911a3d81c914f047ba46ef1a52a4983eba1113bdf0ee95e85cd23224cf832fe3e916d3bffa6ddcfee0926938b2c51c8904bec4739afc4f07979cbeabd514be5a2b87abec71c7a2b39c736d776442ea9e95e97ddfcad4c4c3b41fe856f81cce539b5057abfc6fb1aa153316ea4f8e76b8dc8804ee10303fc2dc182f7ce5d907e78729679333b3b012574b4c7c613c020ce1388ad37ffc0f6b2330cc5edf7ce9ba80eb984b6da2ac59aabaa3a29172ed2937920f47c17447e6185119b9b38a9935658997b487735a8184caff10a8f555d034552fd57471b293f813f19aa6c2139877992436fd1949ebe2259528c91716414aa72ff90bb5142d2fd5e7ba12d8df1ac995408e7fb645a9ab7b6f695e4050500a9042253833b055182657915246589f8362203b5517b2f7117d2aca015fce3cc41c6b1bcb2e672db142d5246"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78caf448aa52e0fe470ef9082842a2f99079164744e63b4d3637e5ff0760088ff4f3f0e047475bfd023ad8b50f0f3d83d0fafbbb5db1e5edabbbd72253e2b696cb35705567079eadfb5ee3b442a7d13ffd92976c7bbc64e91d924c87e409e8dbe460e0808a5f31737c4a379b27b42c01e2b85fb703cb326e4b7a76d9446a17c406ecb2bffb48a501bc9e98646e94394edf7ac02a4c141c76bdef99cf52d4680e0c23296684ee7d0e935fbdfdac76299afb3f7a221fe45a07be79396631b8db97e358a0f4c4b29163d19f76c771d9fc7ebb68547e40f95f10f93ed199da7cc776f23c29b44a749bf6bcc8d4e3d50ac3aa6a9d13064caf8d81a526055faa2926324f46eb1ea5d1aca239f2d41523292bfeba89db64bb20e3681820f03b5b0f7c4ae5ebf7657c626debe58a8615b95a873c7bf306ad6e9ad18b6337f0f24d89384556eaf59c1eaab679c7299fcd80edb656cb3bbcee67e43e230f30f704f4a3e25aff07bb636865ab9fdfd830df834609d07719cff33ea0528497947ccf398b4a09"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "f2e40f94959e63e5cf5722139fc63dbac2712e0485718b153041e8c24af9ff96025b7da26810c78c4601fe6d3576ea33f3c041c911e8c7384ac86f062b0c77ddd03cf5cf91b35448326e04d65ab01102dff37c5a2158c5390febb0338c1c4ccdbd2510243f2f4ed3b762cc6f1430b7e0edf7da7b582bd963daf4d11416756309fba9ebca7eed8def4c538e081c966b11d1f2a3a7c52a9b134e92622397549e53a882f4e641071683633217cf7b0bbd4305559c40a3c5f3785c555705e6b67acbf7887d919c69b165b56e301367825e8394a54520a99c7742356ffb2fec914f968cf9c80af3beb72263f843aaeb5b32f476915ca6369984246ea453fa0d57c3dfffc76f8a072404b9aa5de9f8a5a60389f539d3de4c9e095f7fa97c1ba4253b7a3f0e61715774df20a73dd5acf30abccc2a05b3e418caf1b96baab1234a187c5c80ddd0ca0e35ae4f5afb7f9c56c7bbef028c79158d0d57c1dde1fd4c8e0252c372f684aa438a33669f4e18d087ac0fb36c780404ad22153d6de4f46f9081cecb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7acc8cc66f2c221df076ca4fa898f98c46bb0809a612920c0a7b9e2beee738e4403ffd34b35911ff20a9a23def8d0067b34177d1ebf02486dc699133e4fdd0a58b7bb29a971cda32617b4b234a10ffeb5e154adbcd83c478a00b9fa657b264dcc998d01abac58829c208120aa5f78beb0594ec507b9f7ac5657ca6596662b018cbb582277af76b9630b30e6fcffffb32ada6d256bba86077802db41f2424421b18bb906c18fc081ec6066dcbfc5805a729994d839601741e7ccb7a5b6564be1033824fdd5172aa4621c6cce3af870ab7ea9d538f5ec3f7f2adf54d1f56468be03689c715cfcbd8457f3b477490a55733d582ac7df3f087461112bd91c859d327f0cbbda4ba399fc7fcba66fc99f58e01fc6fdc7e77f6b10b7a624155b24fe2e1d9679400217ec9092ff6a037b1de3aabf66d3c997e46eb062fe64ab88433bcc3b471df2fe600e48b3056bdcd61be1ec01385402b33ae9ac55d8108b4b9ee1b15eae4f9f6471079d34daa33c24fabc5dafd18b86ce365003dad36c043bb56d5a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "dcd190da293f545fb08432ae90fd77e4974e5817ba8e7e858d95df30f90296bcd3e4ba1ba7a8e5b2fda5613b22cbf03681753eddb9dc975971ebf211c46196630501c5ef582a0cdbb58b8091ef5c4af1df4df49942d1077dfba75c73f4920231507b1b55ec73d1f1cb87accb52e46a0842199234f66b6489f050bd5b0a4da862801446242697802f23a221f352908e4a1d400f7f066f4560c8201c8854bc0ddaee5b45a1f1165dc8053e2527623c9321a412dab7c9e2f35db2b7f3a8f59f7bd4818e03598625be2033ddc81835308005f64d240d7253c1eea264426e49d4170acfbbd95abc48174d6c13959e3d8fea723eaf0623e4785ef6cf7621a4c65865605f1cab622a1a1add8d7f11266a7084f24c9fa1073b5607b90df4b786a9279eae72e300d1eeeb72700de66765d81f997d3635cc031eb8a962355efdc3937fd7fe3349994c5ed289d3656d50dd3844b24c3787785bd06527bc0d958850aa86c2a3a16eb41bb7de9ac214fe351f9424e3aaab67f5fd680622e690bb25ba967b311d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })
            }

            n = "8733b9c2bc754216fac899159abb71c5ca84be37153720040f33f291f5f7861bc122cafde3091b5211bc81ee03e280e3c6c2902ec49afb8432c3273536edce7116048513e9b33e2fcfe56f9597c81bc9be81a1b1d46e863ca11db2c33ac1bdebf7c552332067e2e588497e7d9e0738caa57a73dd28157e88fc202b31bbe3b9993548399a0b0df9b72dfeece75ecd78376227e9cd21c8d24ca4aa64fa50a59ee8e7621158e7bac2420fc0d77064d3959afab664ecda0decb8c979eb402795b9a562f2de310aa7fc6864469ac88867788c57ee96f6dc32dbdbe3aa7d3ff47ae4b78e1106e1bc80350b2383dae54140a4605f4130d7e5d3f7818262a27c76a51e4c6db4ab4590b4766b8c50ec1bfed53f0d716b5c7d9dc971399246c75ce27745147151f2e7629039f0b2efed99c7f17cda8f3c3df764dfb40cc0c2ad7bf2b6c72829df93329a4bad6be8635953dd10840888784eea738c763be9f5dc3ba47a9e9d800e21b4ffcc18193e591e8a5283192426e8867331c72bdda06a0eb49367bb01"_hex;
            e = "03"_hex;
            {
                auto m = "36313237"_hex;
                auto sbdd0c9e451b5b3e5513a94492dbee1ada9ea87e65a8cd95cceb4d304294ce34bf09a212f14908f5b865c7a34a72e68e389794a2d1c5767ba17829e2044108ac7842b6bfe0a5663b433d656f4e38522c5a5a23c460b898833828d257350e5814291b54cf13089080f84998edcacf0fe5fca0c1f8b176b172c5f9989491a039bef"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_4096_sha512_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_4096_sha512_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        {
            auto n = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
            auto e = "010001"_hex;
            {
                auto m = ""_hex;
                auto s = "9cd28bf41b99fa4df2852d86536257fe111f63f01815146c057dc3bda9b6633e49495d38822392b6b901e6ac69c4f09623a524e49246c3710c85a1957943d89c8399b0c2a649938bb07340f14c6981a0da0fd35163bc7eedac80ad1cbf06a4c32a4a08523554256eb221395c76e1f79a5e3c5b9636673db3ba27eebf8315468888671f8441324e092124df31d396ad8367eb7c9d0afa44dae85d56208ba21ec7c1f0ed6a3678f5d97ba7089422c662d86cd514fe853f38481632197c1ba07e4d92735eef3b75afc25ffa900769c74ba34f2d157e74bbab64cf413bc858cf6c393e8afe24f9e71168e97db96717d0081d88a27257d8c692dd0e001f3fdc2090512550ad38725c10a201fc50f8dc89ecf363b4d21a7d815eb78557d42e657cb44bfc785203e8de00f9e18af1c8e12953a33b0717af215d9b04b71fc320bdf4d558faf55d03d30844237551e35ed6606bc706ca43a47e6c493e14719049065eb8e00760283ee72c1ae3ce019ce3263a90b8340d1a47b49b78d5cae9602539b379186e5c1e847b69c75152036c8d9ef3c77ecd151bdae7ff36a459d0bbc1dfa33ce3dcd94ee2cf6ee08a77485746306ed987eebaae2baa544b543b5afe143e4122ade5adfa4fd463a246f29482dce7a51573aa18fce87f7edde842e7f21ff9e40c4101b922616ee4c14ea1af3c4d417fe8876af381027d837fc40dc684e81b9eecd4"_hex;
                auto r = true; // result = valid
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "0000000000000000000000000000000000000000"_hex;
                s = "659ffcbf6b22f5d201fa4114077aa7df32b513a1fa5948ee01f6e21c1862a2b91863f7aa53d1aadcab9347955210a91829a5f7c86b3e2850bd1f76b3c4f4333615ceb22830a7a9d7a13436683a48995bfd62f528ef4959d30b6ddcc8ed2a431c06c337250f8274417f6369b7a08b927885df52bd7370d3675094bf1bd32a7f5b0ca9a399a59f868cfb78f87b8647ab37d0d7a58d6f4a58f3e3df7ae88ddfa6470050229754f4ccfa265cec0635f0360c485d8f81974c6b8a11adce3775dd01936b82db37641ecf5f43cb8538055a053d4085c38a8a1c4e0c8af961448a779288c5efaab1eb4401c8f388c0b729e42243d935df1ad3705c1c5a7ffb6ea8ce77a69481a3b930f95ff118cd0fdb17393a37139b3b5a9c275c6bbbc819e18f49c369153bf1f7807b450e54fc28065a6ab6d5b0ee91d0a9302ebc0bccd35c2fb2fefc341a954b67e91f6d8f3f7b62c5fbe504508594f357b1ed951fcac7043a082b9bbf41ccf609881861e2de15ee99d373c0e99027ff240c0b6fa52be2e199967860baffbe25b3254fcd375da7152bb94ce8dd01465290fbcdea0838a69576e97e63cb636db79c2799a26f94a9fb044e3bf66c520895b4683bd799e6b04ab62f621dc00f20a4adb131606f127b84025269466c760181d7dd9ffd0aa5381180b541e5e933e1841d6386ec55a63bd9d8674a775526d30dbe34e4db87067a9326c6dba0"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "54657374"_hex;
                s = "46eaa4624a4d2c1f1043eb3d17b48d977819a8796f48f20174c50da624c657e64d3154dcfa2a5b1d8c6d2ed07cf1f1c19aaa611d6466f7e7ec73df5ee786573adc5a9e3c1d0a25559dad282db26e889807764115a05a23959acf48d23b3b33a93d8b6c7de3ee446f113eef96055d285fdfd27888e569c50f022d5e8abafc874dd5a61df6258e85268bff66cc5643107f7d9097496caedc185b37311ab6979f273e5670f143146b68e44b49389554772c1ca7bb7a12fcf67d67a1fd0c245bb4cbb924276ae756098599392cde076a1c0edc8096d9125e5a5d30c2a93d00fe2e0362e98592c8fd31ab5b4c3b34e65d38ca0c25874eb394e04969982b70932616b75ee2912c6a07f20ec70e52be630ebe024c0622aed125e00bc84980416b80cba7752eb90af2b8215c4b559880d2e1c577b7374531038083725d23d02d4fa5d8b5a4c68e9ea5e11fe2d9e03c1b8a4db0b053097b5a175b1131e8beef5d559bcc3f17ed2e6f6304c0e4650a2bb675aa8de44af8a2e301734584eea145c4b389f6180e6395412ae70e57f488ed15d45895be580bd87cd916b8f20e46ad2fff0367dda54266778bb444c6e4fdd45fa62cae3aeb54b6a7a6b4d8068e3a4d0730f0260340a6c32c3c5d33f514612c941bb63d730df5584933e12546500495b5ed3ba3631a3db871d17353d4c16676a0332ba4c4c4c68cdb6ff21ff737ee249be153c1d9"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "12813153b37fa6c0fd755a1c7c409bb8169c5a39d045dff2da02b2f8e8897b0cdc6c2d40e6945b97006f18e1b26983f77b70bf2961b5e5f2759241daee8c56fca7c53c81f69d3a0341720d9761a4f7be8c068464e881c85a2c39e0ac6f74f6f5cb42df8c3713f66a282d7fba85b7a09a6af83a068b78bfe83ab25841e4bc67c9e40cf2a0974f8875fb81cc6a115b91f922419c44ea82b33187521a7e1f46c0ab9459b4e97a3f4a1d9e92403a37168826fa0ee914232afb6c4d7dd082d0c58885e356d0efb8aa9ae33d045f24b4b3182d5c54556f5838c449d31a49a3ac4ba568c248ed72c111b5ffabd991ebf5c48efbca33cb38996d584992c4abdcc7b93700ca03619412a355b41b000a32f6cc4935f942209b56a23cfb7b788dceb692343995f77daffa25e44d672f8bc451f776560b415d0d1bfe9925af1c2567a8e9bd15b8554d93377c62b0addabd27e8d9e0859f498ba8e03094e1d86d41e69f7606d9f1fac04744c3b7b8fc4942a846e2a3649bd9416d500b9895455fb6741ed8ed4f426f20ab40d8ab2e6cf6c63f5c290fc011768b317bde49753efbdfd12583f1ca79287225f9c3d3ed0c4530815e4f5e7ed78d14aec0d04142d0ac0fa3bb5d73b4bfda2fe7103a2ab40672abf08ef4d9e537b9f856d32450e2e41d9277be62ad0675d1a530709f2747f51f17aba10381fdc70c626bab45d51166b6f6ad978d2dee"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "4d657373616765"_hex;
                s = "27a042625f50673fe9edab9aa2fb4c60dcae0be2e8b75662bdddec7b1d698065510a193e17981bb0b1c32e46d237e15915afe2e2d4890c09907e1866095c19763524b6c8d2dbb7814ac5047f0a082f7fed4109741f4719e12ebb91f27a3cda71e80ec8a7f6c882ea5b3de3c9f156cff033a0d3cf787f9a8a833a29d0c96f0b68ccf55ffc62098e21f0df1832b70878dc94ef1a3260ec2fa56dd3c4fece5d855644d26012f56d2af85a0771d61367b7e266577e44c444347970908ab6cfae42069e2ceedf63679c2bd03697957e287d156b2717a416f0e4ad96868e1c7b80eb84e99778f670ca39c15e1f901def1efd824ea5f7bbe127dce8c8f53d849fe1172a1254caec13b10b0612e72d3f8e7206eee2620e8e3c0ea176deb4b1fdf5d8d37b57af553cf7628ead74443f98655b5166cdc08190d7e3b134d71c21bfacde3e4673529e6d8a9c7a8b419451e7ecc6c16a44b8e1b3f2c9d1c822df8f2b51d8fd027074ab2d1c52d16aab0a266c7d9ec03df7e631052e67a28963bf8560e89326168bb7c8f5a152f7ac54a46e88190c62a938628950df881a4be4136a55bad4f608d39ff37907a6f99bdee065e5ccd2921f8f1a2ebafcb336fc6ca96a207a5a0a7873420a2ea383a5f1c604c93b6c0ac69244f05d54cab184c6592e9bc4069df60d3cbcbf16729dc2f3f3540474890abef29e1b21dee8af0386ab61784d7af8d79c"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "61"_hex;
                s = "2e642b8a5208890b52187729c43a1a308cf6b846ba1c2fff152ff4a1b051753f14ab035c2f3f732d5a9df7c2cb732d09f8147509bf02df8ad26924eeb04dded8467b66c5e3eae384568f624e55c81cfd8e3204422677ab62d919a176471b1fa8bae44bcc8d4d116a6afe5ea2773ac52a24186d6a4374171ce0516bba8733c59f38d622b7b6b7ca7ed2123f7f46b6c06b02f4c7506c46327d7cd908ddd503fd42be3cc896008eb9202bbd7af08b9908121a8b27fa44747217ef72a8c549444232e9209ca1345ee017010409527faf0722e3f13641ede5730639bf560c8a655e2f96cbba7b2811da8a1fc3e5125c92754ea7b823f394998b8890602b1713c2a4d352066e01f55ea86fe3da71f9119300d84874b667a6538a90ab24aec2bdfd9ba9a5f0c3072d549653b16f4a4319ca398147e6753f9a048b5b250c64d599115bb717ce85c8370df62c93da7e10fe705a12482e6f25e6ef1f4851a305aa4dc21b08791885867fc10c5503a769a6d6794ab5a9cc5da68cfc3546b0e848ed8629ecded620ee3fa6dc1236b59874916c45f9c409c9889bb85d7b289ee5f45f6d33262dea83b32c071417d3759cf650b9d43468ff0c2e922632e8d73feb4c55fe4233dc1f0cc6f6e522fbc9e9362f1d69441d56ee5f3252dc0559339335901f539ba274cc3640ec776a12c5c7e5c1cfeddedccce36884ea01071c2bcfae7ebfb5b874e6"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "e0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"_hex;
                s = "811dec041124d3ed9d5eaa9c760ca5756e42525687d4af701231671e8f7f4448ea9b9eaacbd9c99659ee3c175277d30cdede73e1b332ffe41b8b737150ce1f1c67aa6b22ff801077c4241a6ff4af8f4db9462c70c13e1da86edec4042a70be9d08384d932681dae48fdb83149170472564a5bc68cbe952c76e476b99c8a5a1ecaae809690a014b28224ddb9c9dce0d4f6a77fa2888a71f3aa9b5deda0af40ad0464d9adbd26fde242523c096106124048bafe824f733b0af480056de2314f5e27db5aa3fd15705777e14efd2ac43beb12f8f496d09103ab377971cdd45e9afee8baa874c23d3942ee3a505bbc3901dd4cf55ea8a30fac0cb754793fb2d8f4edc29afd51b99140a8d03aa0614169428205fcd66c1047d3366fb32f1c2b1bcfed8ae23580ed254c3dcb127daf16aec1892714ee05a1ceb4e561a1e9c8fd4118ef8cc9e063bd86c55d28b8acc9d5b4c589583e7c6b78fd518d8ca85b88517f10c27aca2f0bcfa54ba5bb94ed5b005e3d871b68b86e96adf12588037adc97cbef59c05f0d2162db2e4cce41227df11eab5449d612be56ef6fc522452573340d4d68af0178d4f19db6a0ded521f1a982bc5567dbde2036f74d6d67b806ccc7c7f70d3092c22c9c1acf307b751d994fa5259a5046668a047afe4c3302e908bf70bc6b55c39726bf24ceca809357c623b89fbf0eaf8b5d18823337e7e0245d865574cb9"_hex;
                r = true; // result = valid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );

                m = "313233343030"_hex;
                s = "47dd8953f9fef033d428958a32a4b30983d7eb9950c3d9acd167d50d9445cafe2bd02f44db5f7c5f6f999d3e1cae5b7458cd3220034132a3195481fbe5ba6b878d85c6f8ec53769f28245dacf66b562bec12399919265b3ce99c5f2217c3f5b33228a7300a0e87174675b379ffcd8a048467f04df2b5b7a7b8e3b8ffeb2dcd408a9363891518988a2a09453e98f7cd73aee8be03acb0bc8d67f7f944b62a717a7a5dc9869ac3d30e7fdf68cef439eabb8220c6923016f00b353ce5209ace5d387a7f50dbe09a7d2e521f1ce57251c48883229dfcea220e31810aff68da93744715f0720d49d8a5f3df2ce56d8fa42c02300729e8099df6e8d39bcfed502a5ef910b024e09031e141266e5493e64202a77c661da8c363f713b78247d8962b271e6ce968810775b6e76b577f01c24daeb7f765e9aa0118168103a51870dacbb4144389cb0e221e6529f9692005a2828e68936c339c96f7bcb4ae61494d03a3ff46adde34aec671b5aaff2fb61dc6011f53f9dd9a19bb6f0180ed90a4ed44ec0ecf97fc50c15607d1c6e42d35e36526f3a39278a7afa2601ba7610292bd6f04bff85f8c4f32f32b42379085b461eaee65de85ef2fbdce1d0dc39120f5670ee2ba5b12902878d2eae39290909dc55d64d1d6b03cfb4b144dab9e7bd8cbfe8500576e1a9f300818abce002ffedb4e8f2f0f58eab36f5c81929b50578d4ca3626b87fe"_hex;
                r = false; // result = acceptable - flags: ['MissingNull']
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "17ac14ac21d38aaa857542a9d871f7d81a829c39aa26cbe7db722f68e4397a7c758b11a0154edd42e1cc6b64047238ce4177558a0caac2a6c66136c8347ba058d6aadfa3630b4c44fa7205e0b8a9582eb5d904cdc7d25e5b9fc83bb4fc5723b3171834c07d59876f9ac771ee66ee17dae152dcfd86095fcd908697008ec1776536724d9e4322b6f7cfa59949a0b9be7990ada56722e6536b8e1442e0f0d8799ebb36e7881ccd52ddcd8a8033cfaf6d3e2a5f2d5aaa04291ab11e48e745c4de3fcad3120261d01eca03f502b69ea1d5d6f5556e9a198d663b05b7d631dc975cb7368b8f34fac47c621e60163914144b2e98e2f993606f1961d2f176a1b1eb17e119d48fd2249889a89be68ac78a415a8752f0425f1baa1cc5de9a4e0b51bed081ebdb538a70be96cf7519eeda55bccfa7ec5fc82acf88036af913cd8b30f182646d9f7f02daa27306f0ea2fdf436a40bace578ec2166a4080c7cef4a862804820020d9bdccfb2289c99ae61ee3fb3b3a9d3f6df672c4690e8c943f2fe23b5718a199439c5b2dc65b63d37e00440fbba51660242550484c94c8b6f504b0bb4e2579f1f560042b721db7d2ec2ea175401c14899062f9022fc0d8e4775c8d10c63cef61e9c649f771351b94620a3305f2d4b681c11089b5fddfbbdd291ccf9e1a997c1b2e6ab3cb1e1bdb428590ced534cd4da5a9548f3d8a6edc20139115d459853"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15850012d1a5af88b5d1105aa0aacf404c2417de3dec04484cac687f6bec531cd569074e5c44ba15b27ebd131d018c2a4b463ae029bef8295e89c594c23ac9878e6d7a03276cb7c0b5231e887fa7e0fc3529c11e2580e329e65c669c346998d687fbf7e76b3539605753c3cd708dc19a072331d77290d810311b23a76137ddb50737436fa31f078852bc0d546364a28456c4048bae337ccc0fd8713c02713a987f89f9868cb64658ab1b8298846bd36b8efbbca088b6489d69a674aef11191c3409ea5b6428c2d847833db1563c77727706d2657ae8f249a75e23a1782024f23383330d11f1b91ca7b0ebfbe3f4a5fc6b2d37210b16049a2aa61030ed1c15b5d2ebd1a0ece36de2f53b36323a0eb25d4f77ea3582591e13f00e836a87a1fd2fd432f074fdca1a27e97dfb62f1666277bef1404958601d4e6b8b24125b4a86c9dfb260c3eb84750ba00930a1f7772510fdc0b265efeafb5de8c2525f5706fdf52a6e813bdd18cf683dbe94a6df2464366707bec34cfebb097b2f025011a0c4b5f263d30fc0c67c6e5a65f2281b463988ceb9b072718802a0a80a52f90af1aeadc8fb290bcdfea333a90b55c1a73839665df30f5b42f3e795ff1f57cdd7edfdee1dcbc81155bc3be1e264084ee3d7af4fe8d9a5be9cb2692674f1f608139b9707dc4c4b5b6968d4081236946f4c6ed2c8836769a03f9e87efd1c555f4ac1013882"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b053f20b91837472425746c5cb3c26f4aa24bb58482556b418aad3aa6df71b9f67fb66855b83ee57e7a62aba93167d9a0aadb514c7d9f4c6e0000fea8525aee39ebcd59017fe5e58ba751c89daa976c158d9de60192230c0ce85f832882fb3db671ae091c886559dce66ad1d6ac0a5d1b2ebf2e1c30d88c46d43f9ffce192ad1cef57a7f0c437f6d25db071b74b49faee3b9732e9e0c7fef58e5b9971277411fff636aa2393ddc82202319f2aa5b2d14024609310f9c4fb6b8641504151f07ec1db8f729ecbbadd5a1d21969cdca6d4c9e7995de673ef79e95384f83900303c157ac79bcb681d2601e9b2f97a9438cef3a8ccb72a740750a2cdecd1b1b0df4a313e912701e82d76d4af9c8e18ad175345ef59968ea8c5dc62a8afb39f52515d6e8527902a03dab09419208636a3b0eeda8148d2ddce169ad3389776e10ac3a88b1e57f0f5da8e12bb1339f1cbfd367b221fc2754c185fd52897deacfadfa401eba9d55521592311ca3441c4228896a09c080443f78144e3e5d8068a946fa0d30b2187cea28085913ac86051e77f84873ff2b150455fc2486edad521ccd0b58a9055b049664d1156f4eb4ed393bf73a5d3d09cf7d163b4ef5df618dc6a57d2983024b779eb6a3331cbca72094052a8621d24d76db741a9f57dc42f41712b474cd8ad90fb348a2646f456c6ffd8a30657e344e57bcf890bd0a2d199bec9e2d5be5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4d8feae269696ba5aa750a49b64e7346de9e11ce331a3c7bf917c5467bb077099150b760541fce35521073fc68a5c638a5884fff577e97f0d78faab8161ca4c766ee4cd89e26d8b747671d84bba1865fd133e51a7e81e8986f0c95400ecb58c8b0af8aabc9ab352a675041e7bccd972c2be01080ad175c76e431ff670780e4b63d34aa69e3227696d8736a6d6fc2e20015180a680117a6f04f8f56836d907fd9efe10a7fb5a0f57f6461fb527494e9678568e168a83ad61b8c5cc9872f27a80e159f8547849186ebc43a54c41bd49c0dbc48fa2ce3781cec1d6623017035cf7425d7fd8a8562d3ab36c9e605738f82b5a77fc65afd217963e710a1e3a4e30862c8a8f18c97b095f68ae0878ce3cf1d062dd440764e19868c5b98f08575d65e0b944ce83b35028da466051d082ba66c2650eaca9ea9d83804f41437a3ea43932ddc217fee2c59765b5e862e85bed19e9ba0de41d64e518dd1c7c2f2f0b4bf44b40b26eeae0911d0c63b1b2cbbf3cb8e24a1ec6ddd70b9d442313e47fd36d1f1624d071de53d76384aeeedde697c206dd27cb1d54e513621351444a4d139cee2fd04ff760d08d6aa949fe9f2c2ebcecda4f8478900503eaf172a63d4d6deeac67b3b880cf20f8472394451caad83af1e8de2e29c0bf904f288d74b73fb330fb3a50b63ecafee8ad9701361db09a1026146bbd0ffc4f0375488e5a178af304b6301"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5113288772030fec77b5bcea9a599a9502d8dc6b2b13832ae23c34e4be89eeefc4cdce3311fc6520ef8164ac409e9c2a8f6b3f7ae54788bd652f73cb8902be3f0f95c64b7135a231d8b0ac9dbb82441408eae432106aecd8167e0d3ff56fedfdd0facdaf1478183fc35a522e34933ec07844f21dcf76ed0eef71559769ee6b5a6bfb14f654528e6e24cd3f331634e88862f2b37e25cd61549a7ce207aabf6550292c21b187a30707eb0a463be2bc8ca7532f1b00f7bf3e7b561f685c91f6492c5b728ff2fa26865e6f1bc85ad84d44728fb549fc9d1ef6cc0fce603c3fd94ba8bf795fdf1b347a9f5ac58f1d922bc7cc3754cf427287a8458d075a148f6a336a0fde617f771789cdaf7223a2dab71448cfe2c2ffabd43eb839c5eca84538785e3c6f1cb0a19e532b5efebbdab5b98260f26190a359c378983548497cd746d4ee0021f148a6c7b5ae97e96d72565521b9d9ea066a3bbfba1427d40099ca367e378b227616d3d679ab5832b2dc93d2eb4993ade501059cfa8b916158aa8238bd5e1cd83e4a2ee676dfcb85051906f94a8861f5e2679912df5b48ba309b90fb383e213a70ebba0964b00f7df451c6d60ec38350e260861f5b5e86af8fadfd09d66d8d1c4955fc8dabba82b937ddea4003f9c39d4e7b152c4d13fd2e54fc95cd3c3e1bf20a065fb6a78d161e80bc4bc00c5bd93acfac027c94d21accbc423c2932db"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78e1817f4671f8c737dd45ca7d069a572d73010927e5957dd6f05ecede34487e8b4168e666305a80ead3f6f5701d350397ee730ffb6a320161c9743db09cdfa272683383271287908eb5a61b0e72cb783b4b0f341f042973247e525330201eed0b0ad881582de9ca70aa66e5171fc08ae22a89a6d5bf61f056ec02fb5207a82ca0270da42d44afb79f299782da7fc8156320e837269c9170dec5a767451edf0543361c5e5ef4f6a165cde8b0f6c6b6c62ceddd73bbab815d08340046579482e39a216d2dc8069fea722937ba5333cd47905497e512b904db8731a88006aa6b650841f636cb75c1b6d0be32b955389eb1f6ab5df19bdeb9ec19f090d7a46b1d45063126037b9f8f025816bc79d33b983cb576392ae135bcef786665522b65a6afcae3e345c06d551d5a122b305b413144cda4a58012d539bc7f9326f1a80ff70b5cde353622577dd23d10f75d206839274c771f2c6e4da1eb7b93c3c0640ebf7d3d8010e22a2d58281b8f811cf8f99725542fc9059228fd7e01113b9c3c8956badeb798d89606f481e99c222ea1918a26aca49a9ce98bd4fd658ded3c5a2c946643ff312d418b7b0da0e8d96ce91da8cc037c16280632083ee0032ef65532ecdc45589dddac1fab52f8ed55e35c261425701d9778ae53caf595d7b32510f7dfa8a7c86af4e358fe08b8efc19835e0e9c40dda2f1ac05613a26520f0ca5a126e95"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "246873df5e978483ab6bde2bf90219bfce3d2b6dd6db3a32d5f3da3808e5ad945f1dcdf1186f066ef8860c8854cc80ea794758a84dcf399c9ecfc54f184de1397d48b2a15432422c60d50ae42ca8203be687f4a51fb27f46ae5c8ffe354b708d9e7007af22b42a2662a61ce1001761f3935cd6649efcf5049e4ecc0dadf8424dc3be83a299902ec387e42a79207170bea5db24c729d811b6ae9480065809aa0956760d40fe0759024af27620c12a9ce2f842b429d005848857a904ed62cca6752cb5be1935c6562c3319d42efddd490705eaff46c822f81a28c6dc44dc9e08893ffda5e044217a6e01fcb0f6e55ef1a6393ced7049657d4c37b3dca55f5ed8ca383a4a72c3a6ea6f096d1cdb63c767d0c5f4900006ced15e0d39a1a6c2d36f69af25b2a324fe6568e4665b4ca9730f50aea9ac98bb2a8aca25132e614a70c20533cc0b78c1092988482dd42cd13e4a3adabf45f811d638915214b184692ea09b83975a5e0c3384c9b37db667cf321f3d297c0f4fea1c80ed2fdc218c0b7db9cf8da370cec25549f2a0e5be001df317f0d1f6f36b4dbbe4a499e5e5c004a51bc88435872e4c4e34115619659b94bacada61e7d3283bf5a23e6c548bd089a6553524e430285e2ee278768242952b041732fc7091260537b0801d50e01891cdadab05c671a39dd46db4d9988e03593f7b4002b3ed4b0ce1b0e6d5253c423f59bf6e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0d93eb247bbcf1003b3360fd8ab063378baf9ca43df1ed46aac03429ad1d817071522cc56dfe61e96db6ee747a5ebfcbe2ae6ca7571b17b9e8e2a3f5fd8879f167d3f9c20fed72058c00801a4058446122ef04d8685a16804ff91c0073efa697ba4d6639fd789a3fef6a53fa5eb062c82c974bf8206dcd5617ed1851f537643ae16b58e368456636b56f4fcda9c81041def1cfc854203af0a5ad581ea126bee84a4452c58602a2eed0ee082ef19f4ac75f8a7ba52d927f35a3bdcfc64183238adf1174dddc29c49ae4e1e3388fb08d28d9cbb379dd6c83903f096f395ad3bef4fa245e6aa7af5533ab6bedff2775649e5cbe89513a18b00ba726954ef0ed94865a7d9aad1e845415cbc19e039b3f7a7e4fb8a0b47edffd9c6eb2834331f0b636fb5eca42925b5dab4ba08078a71a6e44896abd06276f6f2e41f122848b94e2a22baf2d262a06498e0084f700ed1d23faa7b2ba9f7a71673f4f8c2a9a00e611f53c2095c43d9e78c1a9dd73cdcf0b74aadb47127a990ce7dc335ee26f4c13fee45a1eb44b99b2325fdc30e33fd675fb991d487efd478ac79c8d7a57dd210c5cb9c6fcc7be1a7e4a86f2ddde1ec8e4ac687b61231646d9457b4bac5dd5eba2eecfadcc5852dd2f1f7b9a14a0d346c6effce2549c9fe552bf1f21b99e5a013d41b5693059fb905bc30eb40b075ea8da092fab2024e6c03c4630f53e31b8e78be253"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3fe3db1dfbb41a675e4768562c60dc2c2ed3c43022b54f4c9fa8e99de6a93ce650984c6c27b7bc5524c0b032c9115fae2cd23ac7b03e496c6f4785e7045b24d226b2ac535b7eb605cf8b56906ab95ab0e2e6cb3e2b3df71b714c66685a2433244ed153a8f526bad60a530c97ea9a238fca6fc5aac295a257b32fa6fdc68f9216d8118907f282df1fb2085644cd8c51d1be9f6dfa9f3eaaa57acc75d1bd29c3a59f167215c90603e790c5658b2d7887254ff80630122ab5578083556351edf1cffb7e42775a5ef79b2ff6cad7a1b8f32a7704bdaad7d63844b7cb7a295155fd8643044c3a83f867d427511e352079f578f00fa55575445e4af5c6e42500d0e4ffeb718e13076d9531195bcc36333960060830496256702c20df4759c74cba389ad73001f166a3b6c2d9e69d2b3bf86a5f929c79d17483164d76cb43f8723cda7648cd37e5d9d3aaa5cf9d077a6f3a1135e3e62feac9d0a0d8c15d6cade7ed6d2b568f89f74d6892d645c89bbf1429cce33e525c4d151a0a4e9192fb6737f151d5b460c4915ba57e3fec3b537aed97ca425f58a81beb3144b5898e27905ae56539c97b9994cffdb9e4bd91a600dd02c2ab3c9d8c668ee077a2f1f58c8ab7d0db0333190c59d37ad615dc3029faed93f31a4334a1ea29bf7b53f3d9415b8b760891a4a649a92781eb0568d5442b65e574193f040af56e5d33d2e6a47da09b7bb8c2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "34e1788aadfc237f7896f530426725bf06a553fad96003cf7f6dc90dc6ecf745ea1c6ed5facf0fed6a0b88f9eaea6895b6bdd4a6e79f114a75a01be620eb5eb782431bb58feef95956cfea2b5fbfcbca452f65ea049663639e996e35ef37c27987015ed3af600598543f1faef183199ceaecf01ef86b026e974721a94a549aff6545f42197df772729797f4b6c6dc7f500106a793993216d5a356104a72c880f8e55343bc4593f13f988834c03c45101a4c1b27ef8ade0b56c4df4592654c32289a706d7afd7095e7f8a7846d2607d12a409c67fff8a3997e4d6963abb979d51dba6c5be5e58b105738744acbffb6ebf7428ae4599318948767b40c831ea810f5d11cd3de09a066093205e852ebc663b0b970497c64081d1ac6a418289f7ac2eb755cad07390c553bdd82ff5dacd2937bedec7d84f820e054a3ec16ba447a8c25325c0f1cf1b8df93443c56947f5c9c8ba2eed73d379583fd6c57ecf4f70e1b899cdbff6c6d80834e8e88440cc8bb2596cb26df266544326c5a15b4e6fcd6f3296994ff3887898d95a0d32f92d179c3d1dedac8e2eab8e097770a0b35e886c2fe65fbf9766e397b746a2819d1e1d4f8eec4f7354e504310241bf6becf0b84d21a2b41ac6fa5ada51cde86b8151c409d642bde0307fc732de16476995628f79bf02295929e220e2a16dc17c6b271be629cbdd43823e0ac5a25c4596400b0b2f2a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a79151876e4e870920cd837bdf756398cf9929bc47dd5d082916cb622c05b52f2d02406960c2eccbd387b722303d5de1edb4f0a2ec2ac82fe2842dc6b321bb1ac772270997594460bb14d9ac27c3fa7c17ffc987035a30784e0817b4a90fdbcbecddfcbdda814b2296b2fa976199c2cfe8e2567a56b100aeadc571b8172f05eabfe8e10b302fb3dca6079c387914430e64f32c5267dd41782fda4e134e691eb4455656f740048640e3bb1226d47f04c973236a2c0a864cb1bf0dd354f47df45486c60ee8fd931328d8298aa77dc561c394dc337b418d4c41040fc3f15fe72d3b6ef9d3c582c939b6a33692b8032ef32e025683b015c276161e526c19c3e4223e71460918c03c31496e8eae68fa97850b051208e2a989a8e53beff882484992fe9b5c47a4f72849aa8d7896adf4592736e31940c714f8198101d123b72c2715a18e8d58d2c3d7d0d3a36c303f62ffa1abb5f8ca057aa5c4030af66b931fc6bf80389d84dfc1af44dd69e73bfe22f76ae6c0da7f936f06f652a9432697a94bdc2f869f8ce2338cc938cbc2c7809a4000666002bc351ffbce64a860d7e00bfb1083c47a2cde7ba67ba5829769b0bd63d0f2277f000faec93e225234e3cdf1a3c41c8a327f67d41eacea3a7ba3dac55072429f47226d95c235857739027b85a9462e7a9906d8908e5c7f25f0efe596ee4c05a22b611a33580054686f6dc17e930a41"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "18318a9ed077357126cea3c22f6dddd974374e2615a3b964804e3169121d24d7b3ad9aee6a697e6de7e85c76e40a0c4cec8c00b679530706408ca48ec12eec40291480e42638bd948fd55c0540eacdca1bb95dbd596455d48782a291ec35c2dbad742b46f84ac5a4bf6cc2ee23a8ca421477292a64598089a96739f905581f77d1ffac1288ebdc9daa41cdcafb517ab8b44d22799706903d9ef4d9e43756a7e0b146fee94fd6a899ebb6f46039c52c95ee5fbe3aaaca76f604f013749baa2d25127df4f358f0f8b8a0b90706925ff62deb6c30fd871bda0e40121f59ae0a683062dcf3afd85af83ee06a059f3c74c62c13e250f9ac7fbee4efd083d897db98b2f69a3241d10331c00eebf1c6bddcde26b45407f925fbb499bb52be2659cf2b6df5921f96f5d6d97a1ff80b4360135cd5e0660f08c3f4391d84cbadb483415a3e60730ebe52936a66edb549430de1549941d9442f0cb465081328a80bac3b4b68ed504e41af0ee6b2ceb087db8e6e497ddda5b0692b1d527b3ab9f5906098e62bbcbf39cf897b06df78c059b766f2fb17ff0434af9aa3d9a3b3b9ce8c0a2bcce33fc8ffd0bf06e4209050ebd175e292d2e9e4a36c702d6e7712d951cbbc516c2421b65b1cd9359629b7f772e410f1cab7a2c675d7c7e5082b09f9ed92f1d417523281a61d37d19b0f1e77d58a6956148ac20b5dbe28d8afec6ecc4e789ac08c52"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15948a4c114544bcb6ede3a68bf71cc062eb718dd9ba2818136084e79852026a4241918ed4ff81739356e960493f83da7cb4ea536c2a77ca574b94b44cc9fcfe3a35d442a2d43e91fb74c426e94d9b5381ae2853a1f1f06f9c9fb23ce3974d7184b3a3981e0e30a88f8614c305fb6d98b6af1175f39457c02a8c61364238382cb5a4cd861b9a406526c0308fded92dde543e1b26ca3fa2ecc6ddb6a5641760ec774b6f43c40880d57c504ceac48d550288617012f54d803b21aabaeccd041f6eae3beede1ee7146e91ca544721ad3de98e7118e1787f8b3fbce518b2c238f9ab8c10c1c1f391388759015c25365ea57fe6cf01188cd262ab3795b9f00aea6b333a64e505afc9fab75fb7df290668a5d60b5c2d3c18228b9ffbc5a56ee04edb24cbfd4a0a1ba42928342c25b9415e37f564672e7c83ba1824066c21ff578a081381b62f7fc8d2776fd6bdaa7cc68bb6e9ccccce8296334ee42dc33cfb6f2e56e01c9df06fd5dc43e868eed33635a291cc509c707638cd2f09cc595561d3007ff0bb49cdf9fc7c2d61d464878cb0abce6afea05f2806e65c7914ef33f8bbda8a2e7766750b79d60c00803dfa636339093f72ee4fd062508cfddaac7a1e3e0c1a0601000e69eb09ca3445893109adb13312b9e4f604d85aee88378993420f6d88da3763dac4844d01ad76c9030a60178444652d3e0f0c1fbe43ec2d558e0871f640"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bd94dbe35a23ac704c874dff24aab7514d82b17cb8eaa8a3654539d2a658307b4a4457259d985db4601beedd8e48036efb05a7f7131f18380a21117fe644c6363de327b73f424f45a98022315a02cd61988e359f1728984bd06545f04bdceae8bf8bda39cd67331ba88a88e9f24e6924e51deb29db461fe9c3bc6ad0d3d3093c2fb873ef9749b93fcad251f20d851e111f61c835c99b259130f4d08669d636506d1049081e4ebba38cf616628929c6c16bf0a5714eb91270aa3e28b9884de986075e308d84ddcdd4f44d47ee9cdcc95bf77ca9d2a862c5866d57b14b0a4e4adba7a520f0257340ce255abc2237810e5005e2194bbbb116f6c4d078f4fb2240f4daa732d5bc22347d897e517beccdda073b35ca8aa6f822a5a6b4acd20cebc2eb34b97e6c298e4264634017fda05db8efb65bf7cdf11ecd774124834f9edf6291a885e456f075b681e892ce86397e95b3a7c39edd39b8424b42f1d40210840d5768b39dbbb96ef0e5debf2c4bb8ad0c9a6e4b23799d5aee4115ee6a393a362d790c6b18eac3c32e37a0aa33b37cf986aa1c23f0ad49f44c303cfe304d799cd7448517d4ddc6b4605ce92ec5e15d76fcd2a50ba005e52925218dcfb22bca9cd988c3c703fd1f5de578d2d3b003a8c5b42506ac72ff19c553aac8e73183dbddecb88b75c78b2b56cd86b5de592b88279bd4608b38124bcbbca35fcdce44f8743e26"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5fed965c75ed7cb7051779c004ea0cac049734ad8579394d660565337bc0f248057b24f89a7e52d3bae2a3defa4a4c8359c074cfe96bb29c63d7f183c2d5959cd7a5f5728611fed9d511ad078b7fd6c6661aa269fced9216bd094664602f537c77871d8cba65f149c600007d5e57804d2540d4a5b0fb109c1811fc86775a19f716174c5331e693ad53bb893a950afa1b5821c97dd70f7a2ced3cc2e9b1b5f40a7dec2d44b17c8df9f9f2d956d5bed00c2718e7d3b724af758ee6e1577a2f4bae9c4d47053418b49c4fdf3f94e5835774a432598e456e1e9a474d9c39434d741450b02143d365bc28699cb470cef886e5a92a60c66b1a11934127aab6b36e93c7635fa42d8ec014ee26e679ea7e3470e7836f3948bfee3505e0434504884508ba66aaa79b32be94e2545881f47da2132bfa380aaf5380b7d45e76893b628deaee0336cadf927e64c3acddaedc182b92280bbb505ef6e70eb53717feb00c9c29b035f2e4e1431409ff809678188b400d70227c540fbce9b17eb5532645e762a26e00d532fc326f589a831f5fae74addc916942cc1e5025f55b8500fe55f44199a625514e017551ee8b4ab0cedea5fd1c7f6f66bb03f031ddcb572a4178f3feedd1174d91fa2a43b82972a14cf5a207c021595176bad8b6fa4b76544d42457410a140dc871ceb0617b36b9ba8cf4ad10111f5206279dafc6685bd7f56c6b19b1a77"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b14d10f659dd8ee3065e57bca4e4c0ea28531de697385355944e72a7e877ecef2760764e1451d88276b6223f5a973d3b706443ae1645b0ecdb019063d176589aeacb7886893bb0ac1289a5e99496892e5010fc5e3625de66c3f0c3394e9485a405e6b2b448a3c07ecf6d27e784c5b271bba20af97e86fe909d84e4b9ebc8e80ddf8f4f55df28aac9d332dcdf547849167767ca496883bb6c546447753e7f35aa0f9daa9a4a293ad172b8b5c383189478301574d8d2f0033a982013bf39d8f041c510df0fab7dbca86d092409af5c75d43b39a83e52962c576e891b00fe1bf9a26dfc75299e61aedf4ee27b35d024e6d5f00f9ee58a5aae97b65b98a900b489800c59a94ad91b2e99a5dda868c46be99154b874e85621f683543f70c5433c06e76b0921abcb5431e1e7094e4fa4c9bfcfdc6a29eba44a28fbe44c082d510dee9db21b002521754b47f072fd9e074025a2cb928abadefc045a925926cf53cb9702c059ed8cc48e37f5a4a639cb7aa1152e6099e183a63baab5252129897f92e388d819a1067c3c870e3630ba599f2445b92c04830b24c3067cb8ec39eba5a06de0cb9da04f1914d817b5fd56d2ff1e2e37aa588272a665afb3474a0709293412bfb6a94c185d8bd66a7de0720e9a66ea8f6652cbe172c0f3af0b48c6d349c73f654477460acc5cd10d757cbba8a8d9bf7bf8627ce7f76a99b9223fd5de3f59f3e3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "183f3c9853c987fe83123605574c6317a7b6779047cba4e661a0b8b48a8d8b94a1a1fa9f3fd2b6c2d7d133d778d34bc2d9234c122e81019756f8ce88fb07a4ae0af3b532facfed257532e6f148b85111a5b8a005000e63f44e31113748ca045db35b85af307d5c5b6928c88395801d2983c198952985811ea64258ef4087c604b71570a54f9881c2c7139323d682e6e4c137cf391d9b91b1dd5370ae0d0cdbb24a8c0c376d6528381d1a63599e46e145ddf81ad18086ea2146969f16b21075cd89fb18f695ec6461e4d572be485838aca6d0e76ab0ea3c33484defa48522fe5069d2040260f55cb7ad9750a4ba94375b660ac25a7d71443ff8d3ef54d58e2a05709e3b679dbd4b9104763d386edaf807996ab84fe8006b33313c16958885f2fc22aefdbb28c34d6835225f03a7b18324a99a2175b83f198547e210d56b68a1d85315779df7957bf19c62aec044236a4bbe63a7d8e982b4572b386d3c85b18357f44d807ac218a8b8f75697db20800650a543f57a151c23288d0f5c9df00b780857f43596da4cbadd531f47017476cbedcc551fb1beb70f9f922d72a3cae9a467cd02258cf4cfb673c0cdcae118ae56c2d3b3892f1cdcf5087fa421588c09c9031056d297ba9e0bf443072fca124e53023e1d8db5b60d7aeba0bb1958002a72f54cbcefb740340c8f4fefb82b4e5dd57d6ac7bcf85f9f9d57ca4c1a60bfac4b25"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bdeb05d5e66c9bf5f9771a973872e05adb613d2bcbb6748193a8d21105cfeb4e8ab5242e9f2a1bb2bc2e48ecd8669ee7d66f1a1a93ca824b1daf21b52b416bbba48c667facc86a10d0d54c9c08f2bb002b22499b5537351f5490b397bbf0533a34b3b7d058a50dafa7765b1ccd5afb89e4b354d538b89f42a5b5fb5eef7b4e5d8ca9ae40d46fb3c83e36fdae9dd08d282f1ecf5664d319f07f430ace3e321d215af9ac8cbec02275f7b26d89505e3a0d2668c8c06f30d57cbc09733d45bec55f2e877cfef31db7782b5de2f1d8d2a7f03b1f3e6c5fd517dab5c0145a8e36578a86eea7ecf9f3dfd6081042023f3025d6124ee9b2ac7b40a6dec3b5c2d29d46d834d2c47b9837d377c0a2e965ac248a84dddc9fcfd11ad448788b2b9a2aac2eb8cb25932eaf1d7c36529c6f6892980b4cef6759dcdfcfdc2aab28b10df46f39a1724824918669f0df2a9e7af87c3ef0602a56d09bad330f1cbf71b146fbdd3a5e45f16b701744e28c8821adc2397171554e0c6713355155065591e0b6fed94c17ecd47a9beba3da0c7a6d17bd5145f0fb438cc4fb4b53b08b16d239bf839b33a321fb030df77c7534c0cc0664cc0f485fb54745111891e92ea2bc1c3596bcbc3ad40034d6e511b7e9a3a7eba426bfde56926d05af2f98ba15cc3ddc26686d5ed5a3611ddd0ee774094111bfab88dbf5ad99c1b3f6edba85285e7478465d351755"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4df5e7aadd429163a756b8b9d9035bcf3d61151fb765688dbb4c238a2b0199ee7d520bf3d593ec42660f28ecb6825f72e5a124d6858a33514fd43e1485cc06b7813c7659c68273e05a615d1f7f51873e1e2c7582882faa2564c0ecebd364fc7d6a63c0f2abb4dcd15a2688ea5450d9b5ad445abe6035758aed19604e46ed2cf7b3627278c86c218a5d3dbf9446d94a53f59e46d540db4a0f714defd10b310042a63f07132d36fb13ea731d1124ce3c6138d3423b44f7b7680ac8c78f4d89ae98a6c226d5c4e3a1f5d69513199c629dd008cd4a2d272b429060f136931c41b58384f5297e88f6a72d7b10d982c93c4757e4f86cb888e8472417091e9fc5f3bfdcb673063c15d108a01b04819c53962ced6bc98894de71ffcb211a4d5032731b98cce5854efae284e247d224b71de20cb680ab64f32e18a2165986ef45717b710f3b23b3265c547980044455f9bff029de7b9a750645975f04ac7992d66393645aef61896e372d4df1c40685e5abb8db4a788d65e0ead96d6c13713eb2c5197f0c561a4889a0052380166936ef096637717ac8650b1b821164e2ebfa6efb6a0443079c2c8b04f2dfd2410cde6049c511a46ccbd4001fca328160f2f499380f03b17ec2d98ac3c9fbb38ae18309328a3a3230d0d85d55e9159b710d357100b4673f7c1b73ca66e08359dbb260bd0c72d6e95e293f1c6b7b754729c90f5a5102ed99"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "737fa672e21c243bad70363eb698965a67083b4abcc3576c66353ee8204e36d260b00e5efc8bcc2bf5d9667468f99c6353b06c4eafbf49414f4bc80213907ba5a455e65fad522a00e08ddf44137e417f8d4fcf61ac7f1b826bb38322a403e8f6d2eb4e76ddb4badec8c4d50944615930d86194d7954c686caf822dbe253e72a184ade53fd494873d38344ed2f41c09b3941813d5e3cc4827626d02d420ba50c46619914fd0e3b8ba5639b1bccfc12bc2017fb9aa679e5ba5f3f7fa898a977d2660a06339df5341ac63bd4595d327fd9f651e478f701d58312c5ef36cacbe9fd3b8f8c726a580639267c6d2f3aec161a6dab89169c50e68e116549da431b50c1b18d157f48c3a28d9f5c8bbe6e5ed535356843cb12fa06680d117d9c663c84e512c9500ea876a547f5b60286388bd13bafe446aad7420d67cd2a7925a0b46720ff5aaf5e9c2e7f8cbb8141892d2d27c7e0976913db329213f277a08d9a9c99317a14e92bf48f01443298901e57c287488dc4d4126aaf560c9423239e21052f1a0485d80f86b74f2748c0f192f416ce236a79e7c0e6d77d08a2869f49c3a5e73210745699cb677372e3afb14d64767c1f7f31932720c3ad0b08348233d757cd02a39025a9460c83e8daf8be59b6d9240263bf9cafce0f3656fd4f4b0f9f8ebfaea86ccef25b93a8c893789e6eea2d588815639c09abee232812b8b379b3248f39b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "52fa2c3025e2673fb95953747fc989615f634d32362d365dcabe6dd1c37370e0c582fe0cd54245fb2b7a892f9b45fdd6ce6bfa5e630eae4163f83c4ea2ca9a43a3f21e8a8b803d50d0345ba48155d1af3f419d8b0f2e8da897f7a36f88f0420bf53d89f3c2618852a858be2ab5d49d5a79b1d7866dff1421deea7143f75c27d9caee5372b1fe36c8ac8f3b5b06f4f71525c88be369b7743a7f5e84abad148492c23f6dc57f4218289a0be3ba1db5cc4468173b5fffe7455f94f5c2ca6c8acae8701dc393b9e5c2c5ab8633a67e4094ffbe2ced9700af85c8b3c0a31878696b53510a991b35f00e1f7c8d17106615b32e8649aaee855e25305c6864bdcea7ff583687ace773a9d56c67df5b462995444bf414b17ad7d5801c60340bec5bbffd49bb69ef97eb10156a490fdee3c3695fc8055cccf2cbf217587f5570efa8baaa384fe2053530791434610e4da67d075f6b8c5613e862e743bd42dbc1766dea5e67f2dc6117791ba42c737e56b108d6e8845b08a33f905416726b02354c6c2c17b296fb58d90fb2d87902e87a80ebe83f72380c9d8c7c5c74dbba510d658dc84976b2122b3216eb3b1cf7bbf868b844fd5559a4ea0c8a8a67219634fc9e4ceb637e6afaba347f7cbcaa562d21fa7e9364251aa9600a50b22694e4b532638d56ff3cce3a232d76b756bb2b7b21e8102841731f923ed410b04b4efb414454aaeb8120"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a79e14f144c0b349987f2d2bf07b860848a6cb5abb07b3229796960a81adce08c7eebc1b935c58db8ac1b9a0998236cb726f704005b128e9da87cda8b47e43881a67d9fefaf081cd1597a8095c935e5eb3625940b1ad60d071a5085bafd3b662a2e7dd23205fd4d5af060c52ce23a9e8566977f696cd1d941508db5af70d6b065c3ec1ea08ecdd5c1d2591bbec6d48aef425d91b65761e1cbc38ef4c0792ca3a52c62b6a812db9d6c4ceebabbdb2e1c125e419912b12ba64ac1c89563eb5e10e55798513f8b6068235fffe66ea13815021f2e4cff34d0501aa4a8023a6c1e2aad933f69be3229b161da5902979bf0e71fbde0fedd73b2674eec7f478628d45e2ed59b5b1321b9c68d8c0ec79fb7422f3ef9cda93e97212412c1210c2d1c02a2e5ee1b653b923fd5b350ca17196c821095e5e71fbf32577e2720593b5f8a7786907b2d460489bf25ae961fdffb3aff6cbad48b067811f192e20971204085b2c297f8c4a1f64e0847d267ba11486f2304b03cf72880c78d92dc33ae458f436b266749f0b472ed0371c5a7ddd0701dd2a70578064986ffae40fb6bcd9d9c268821c0eeba083405318c43b9ffdd1053e717c938ae7ca2df8bfb4a69fad029c6de8993fff2f4be3fa051fcf4404362341e831e37be5f48081a9a439f07382c1706956f3088da20806b5cb56daed9247a9c414e08748f44681f84bea5d835af6e2f3e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0a8e2386caa1122470b2b1c28bc9ff5e752726b52ec4a2205a45e8bdf28081cc12527d06ea5ea752de377078e2d0419b8e8da0ca5379b7d798c198e3bddfbc847fcf97baa52b2e8f03a03ca394d6e551b441d48a9a6cd005ec3c306c86b72feaa859dbc3076960cb5e43ec88092f2d0c69d2c6d55b0b8e955c514a420bd8c3d3cba6168f2c3ce212c8a04b534c8f2cf1b4cf5d5032ff5d23f74b332064a70e4fb9ca814269e0dd93d7bf7164361726d48fcb20820e3fddcbb480010b7589adcf19722d60097c2aa40ddeec5f02997e496c07b094f66f21288b1b6c634efc647301b76333c6bfe1934a038a5e83f0135d49156fa50bea7db362fe67bdf081f32de8418216717f63bb8ceca3664953aad3c0fc0629798635cbc193830551988fb7aee0b78dce22addfa3f4a830947a29fbe19464d0d0a74fb76237ed128e42b192fbd428e8d72c4b9ed37b07f800cc368e9c6aded9f1b1d45cb10978432990197ef5982290cb64e422a844e69a5fa9d96b854be009d3d9c223dfa4fadfb13a6e4c060308619c2d3682ce48c9b7ce29d2f0e56e5c95129f12f97b8857e0fc1d85480de20fea1db5f66a9a3eee6c085e1288c8a12fd0cda67ce1637d307a3852207184bca56b478fbfc07fa83b427f61320c6723bd877e1a34a38773f71df65b07619b94028001be0ddaaf43bb1f738c6cf728617bbb466161450a4ea79ac83d353b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78fa766502eccb06f5d328dd19237803a09beab4470437f46eecb745950c6bbb6e8c28213c1a108f472098f9b955449d29d33444103ec65861116dfacbb0d52e2fbb5fd3ecfa4658d34622e88d11fd1d1d2be67ca63e26e022de9cd14a0a1b20598b1cc0d0733015ea386fe92645e15d23360f9a654c1fec8da3982bc16d2848a62494fe24fe8c3aaffbbb0e017e42de8a886617d6716aca701a706344bb00ed486dd6c4976ce5e95edfe2616154975259ff539081f8b71dae6333b1bdd181cfc93bb15fe656a5a4eb964df55d1519a66fc8023dfabf02a59af4554e77fc2e391e9645909a70684f0beae65fc39b260ea86f63da19482a8286e8c7ee3bfc93fb7e0a09fda6f8a2ac59f7642e5e88373f93e242bfb2c1665186cc1223101df4843752cd9ceaf73157eee67a93d14ad939dcbc88d9c4e13a7328d9df5b6529c9db604770764355081f703030279a9f997dc9cb9af61e0c4d53e89005d664be47d07eb6bb4c4b5e79453f7afa2192bdc5491d34d9b5b34cd9c08c18a3cf9cd9cf3f9d13e229c8611a2fc583d22b0f3737f4f1a74ceb6944c0198c88c4b693a43cdfe353778a5f5fd792c4d165811b388fcc3e65dca3565131c522cf19e848fb2a38f1be44ae4f9b3c2840ed539d8add6f11a549d30255544e3e25a8b7db849ac3de562f8d7477f0fc58e26c89b6dca486b5bbef305ea1dfe91bf790124102e14dc5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "481b7bdecb34d4cfc817f217c883dea3248f2cfe0e004d830b0a5e6002af4d94a52a7ef208df247747bc26f958aa82dde17152612005bf5924c79557b3039105238a66b1754e0dddeff2b399182827a5f24fbab5dcef1d8134193db2b7358269fd02bc11ad83ca74114e7d0f36e700eaefbce93509ebfc6483b177b58292646d16e1c66a31deed0c041884456f3577757917b045b9db6ca5a93c54258255716e022916fe656883e350d90bc59e11d0f3687ad073e3a4f9430dbdf7209fedf051b7b2b6ef4decc1c8bd56e3b6f38e0343567909282908449ceac2fd162bf019175eaaeb9c74eff24180e04747537a8e6464acedf96e557ed956104453c03a191830ee9fa23d5d8eed138d1e498a9fdfb0603456df099b1650d78ff836d13cf1bf068c8d6c9ca828b234b9076439f6ab2b4b778a1ab529d8a6d6011becb7cdddf11ac5cf2f24af50425d26db425815d7913e6f76b804890b13e5c01faca314a8d79cbfff018b4f8c69005b4db1f4dd5a2706f17d5f7558e52368aedd61117b8f3b3e8f08615396c6427deb4a53d3b0237946a4d25bc47e3f5ea0aaa5c569e37f755a9e0cf172212920cbeb31eb00a1fbf2fd55d400fd5785c5d15a52865ce512ade691bcbc27459465bc4e65a9cfb07ae397c80e0df579635ee74d0cd38fdb58bb9bd506269023d3dc8c8c5f58a3d1151171ba92b35cc7cddde54e383dfed063ac"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "27ab14c45501ca20e57d171479b224267f159104fdc8a76db33244e25be46d2555280c20e6adda573133dbfa5a3be591483f2dfefe52fba5e524106c7565642ba5c035723f00202b278e3c0c4c0ac4c2f71271ca3d55a41ffa111b9b16b38bfdf64a7fbd3e4b747c44802775168358110ad9df1b50608a1576078c13f71ddb9ef1654d433ead4dad38de9ef07bbc0ecc9f157a73414eaee1ce395141c9595aa51781dbd81fbf024ac7a0fac3efe0086d22e1372179532660ea51a593f24ef7cab63f2493f994e8836c47a340d45b04acc0efefad4eb839e537b0f9b30589adb7923a06464714dcdba351553926e78846e3662b0f8326c02efbb93b11b739e1993f4302695850b1d09b558ff35392fb6006c6cec3382c192da7ba5cbf5e233520b13b56c2dc231a607aaaddb3449c0673428bb5e43fd27b5ffa6c6b2e073d7192962d81289f3b6727095e5e7b3527c8c27dc1b5958a87f3d073880c25e022ac4e4986f2fb5f176f964722f62115e15406464270d6f3aa15dffd1203ad732c42d91b3979fb182bb4a5f0a8d1142847cadbadeedf2a8365981137b87237f3699c0f0b114fcb41f83855b2af879bbca68001147af3f226fe82a2329ff7db263972730521e405c9bf408f36a1017950ed2f609a41164985634330615811b5005261fa3774166eb5a79bdda9b3e6c5528f54589ac294dbc6cc2cb0c8a76822a1deddeb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b01aebed848724596b962d0d628a4420f25d12814e4d5ae253b3a67ea1c9638b540c678a8ae83622c0d755206fe423c29bb3f46cc52ab963ad9e8078240cb96c36becfd2e69b60644b1e4f2183ec24e53938fe2720c4c78252b2919e178b9a53db4168a5a65534cc149e56b3e93153bcb7bb96be3429583da9b5ab2ae7bd2546cd5ef2def209872ce619a2c1d1f98bd4d720d90cbf9396441db92e41a045b874061a6d2d196d3dbe19e871c60cad31460cabb88b0c35873939ce29e70e8c11cb35ddf80b5c82a47a399890cc20eb32181f732755d4f3e761c070e88b6b1d3dc38224349d26a7c77945073bf70037cb184ddb893f29f06b6864323f0963def7652692957d2ae6dfa25979f516763ce7cea66f21e2a774a8cd1e077af88c3927f181ee599239c76ca063631a53f419497efeabc48d4b31124fc986586760224621f46826e3e7acf1e83c33a09e4a6ec9d36ed286c37c27629725bb318525ba2f0332743227aef14b42c86696a44400c496ada4270cdee164a67eacdf5a1252e3066c0775d7d1bdce5bd42dcb429bf355428acfc7e3d9d0e88878054da4b5b0dfde7f31454488ac214f0b484b2eb95419395d7936d0ff3c6f2cd2e0ec1485a7c741a766656b3275533abeec8d598648d3527feefb378749e622f97b9e5c068e222fcbca164bd1a5cae13e0a5e9d0b32e8b64bad7ad7cd17967b06d18b8b5e6e8706"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb673cbe9c34aa4e50653b50f151d67ed2c1297ecd20ae73a53df4fbb4987d51c3c229b0cc6063b220a0b3afcf5afaeb1881f1307da10a41af9588276b4649b0d023621ad0ee4df1fca2b4e7d1f605c587c52b8bdc566097a72f99c29cb8d29d6167731441429ce6f8931a331b44d33b691d044a7efbe97a31cfa22129ad3df7633a78f3859ee5d4a970f404be87b5f486e8006562d3312f3b13a934dcc48894dea5985505a917dc6976151f17a9818f6ca4ffcd2b020fe9cedf53945ba1b5b840a7291f449f1b42c56da6d229e9d48b0e51764cdcd1e1709ef7a9e2def7306e32b6e8355140220b4a5c53f38aba8d505fce60541a47eea7c7e3d8f2dfae74e1cd1725b4ed477a8771f55f51a50be57bb97f40329fde3a2acc3ec8d13f51428320a8d184240bb0af9ea0b67eb7d441ab63782f7e75e11aab72a7ac87e3fa6143c969b4ac80877bbb21e0b0c66be69db1eb46fe475cf6a1d5d46786cdd11ab88a99957f451cfc743a0928dfc5ba41764ab9154a8783edccad25f8336599ca5659758bb55f77d0b2ec2ef6f627047b7a15a82065dff9fb436fcfce4e747c2a0c52d30fdd3507835b49ef4158d77ad86cdc51293399aa7424369d2fc11bc93ca0c66d3d7a75f82cd2b0002b28c28cf3c91ca89b5115bfaca6d04a0daa82fc3d4dbeec6e87db394b67026b6a595b5965db12cdd8ab2ca1519fc19d326056fec39ad5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "94b660539810d7595c69b95cc2a59e20ad68292d1f381f639bb38f2f24f3ffeb81cebdabe27a56e33e7cbdf954bc00930de4afbebc7dc798a911efd3f62b2f6b8a3fbb71b94aab913d50a5f48250ec509a8a2fa3cc22cce006aec45697ef50672d44b574262422071424fa1e7a33b81df9a74ded09018072c9941d261e2751e173c6f32ffaa184fb51ad3b020b812a890fd650987d5fd374531535dd1c89dc52215c1660f71833060945a5e1a0b530a87b34a542549c1730989b9d25b0cda122e590f0304bcd3d08bd65b4f19df84d3755e993ac5a80f169797e16760d1bb4f714a762103895283b403b55271b4fdf0a8e486651a4a955cdc8e23f7287aa6f75f8c01e365d38fc4e783de00f05081399294b1be143af43904afd6d211d49ade9b78307281ffac4eef7a5624b9f867e113c30a686472f1af4663085eb8f65394f623dc029a0b5adf0140147900ecb0320bac5fe856baccd42eec8b5c9a5e69d2d6a42b00f0e60a6b9619b111ddfca6f94e845a1b8bfbcb4f6b13e52259852ea8475fb168bd8deba00a6424b6e54e1225542493a535e7a6cf01479da324f98c34403ee944a8e37f36596779b895d829b9f35f063723ec8ff2a423c1e78328de60a03bc61095d037e8a3e246e34e2e3df1b07f243daa208240edc73ff3d9b89a1db8086b1cc7fd0adbca26510723791afb390877222434982b8b19d566cb2f300d9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3f529f9eecfc1e50f2407c70f82ab4c0a62d7ac9401e6c239063d575b0e198449dfd14b8fd732a9dc562b7ba83d9bf6df2295927dc8293c8502f1db4049ad46fcf9996b9b3746a0264517b909e7415a9f7d97d0754b83de36d16e85e201666321df84177a862634f3667fa8f780c404178e744cf73a923f470e02411d452991822d6b509a786b48a89480eb559c5ca7a351c9a383c76f2895ff80bfad92b57c80aa621bf67963dc1924a3014982ed5f30dfdaa4429e65767bca3521b450c4f9c8a1c36b91a9652598ce31b3cd531cefe675299d171112d2e591357c12fee6be0c52b192baa95e951fd563c4471de85bb6cdfdcc2fe7e7219b8d0963a4d6d4d72a3e94f724756c198ca340c1e09bc418b72ce9954c625c1547589e45563ee79cde1211e0169e94514f9f27c3eb3f19ef78ec78d50638150b41b59d369ff44c1f5e54dc00961a05600c5491f558e698d316eb0b21074422cccc11f80ca7c6f6ea8942e198ffbe9375f1fa55103717b765ab0fde89c58cedd0933785565bbfb0ced42133ff4726b5d42afff53686da3348572eb3a24f6e7b119906d30f24b5d007900d7095e4be80097f509e89d630a931582e112eabfaed2f562e4cce3c121167c454f9043ffabd95cd8dfc1ceb2c10a5e58faca8a23f32c86aed077fef810c32cd7266080a8b0238607a107cd036414a2185ef4b0328c6b1023c178d4fab5de38"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2cae83310a2b413f44e68ca488b6d13ecaca8289e797786076bc63b00b583e373c48128d8500924bcf95b1d67fcd6961f2429aaad0e07a3a8273d164b8c9031d7b90bbda134ada626562d45c693c92847fa180af4f67dd87b31485b4a3e11aa188a69cec24f7603548fdb523c064cbaaee173cf45c82824c0bf5398b6339f55e07b66d0377ddc4282e3bf0bea5e987c556ed138bb66e3976288e0255701223cf93d11f415066d405aac2c330eeeabd84e7c7d022d6805dc854ab29f1ea6528762e40abcb4710503b44801b23473bc8f15a58f5f3cb69a0589acd129aebd2480cbd1c90018ecf36c4e2ecf82ef8076d8c8747db8cff0e0799840305d11ea2ebb36e4874d689622c223e3744356aff9e9817b9a8c0af82956bb11546382747d7cf8a9eb861b1ec6cfba56678b5a1581213898c63454db21714e2da0fc3eaf897f8f21ef84e8ee207b6c90a9821d4689f603e27827c0859a497abd9d0af6e7c070671c407bc3f864e600c43107a0270bc06585a6a14fcc7547978296f7b51dd8ecd43303ec204b6c83dfd4e731e3486014987ae821d69446b3578fc9862f13384f66afd807ce69037c5d6a388ebfa3e5ea5b9602f5e48abf21472838682e23826179b9c60ed6c5724db772c087e4f4a5109cb8eb90a70ee95779e89909ff47b7ca553b8f35ddb2e6d57049ede2879408fee0cd28a3444790544f5d9688e54199a97"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "40dbf72ca7d7f8067728e9c31e118d8899d71bb6a5e57253462a107521babbf81943428ffaaf03bab926e41a12da79961fec9233150d0af2d2a384d75f0c83ba607bfa485f6614d2d08879906fdb8ac9ceaf98bb2015af14e36fbbf3b381dff6c033dcb157f46da42fd89aa3d95208b917ebc387313013b3c550a906c0ffc27ca7b6fb8dba26b7696b36886800148d7cbc2ef6cedcd938a97a4792ee150cfcddb7d405d5c7670852b1e40b8d3bf3b4b74e208210378c5caa2071149d5a0ed6f2f8b69ebd8922e5f6232369fa2774dafb6b69254083517465aabad8657e550d7c36c2e2ae7788f1f2fe475c17e910e796a0e84f36eed6dfb8a3650d80b91d77f0442075c8009bc76f84a289b45768307f00f583bc3d98bb92e2cafa4703d52d6164ba44940c393e06e9b5d7bc91a11bc9396c910763aeec359d1a98259605edb643b0bee6ccd8f830daf123bf802fa0424cff97218ca54e5be6fa49f1c1e4a021d4e8981fede024c87b7f1ca2f3edbd3b9510bd8ccc90178449689eb261521f88d3a6a4e9cfd5b3a74d139297eaa0fb5b0fe39b0034881a11b2da1679e266cc636c8066fb7891863d885bf0ab06403066e2e00692148c9980a143517a1044e04709d38efea7fc7825fea19379356055ee0831d2dc0ced31070514fdb2c0bfe4a1ac1c5001166bd9b3939cb213d43b28e0825a503abfd138db3ea9d170e02f0236"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4d8f1f1511d2c2f4ba2572e057ee0f73377ac09fca0eba99e32a346ef406c504ac40ccc3b8f89fc566b9ad43e62d1d389aebb2ec4ac35edf65b71a4d05d8b712176ffd3d0025636785a01f7710105d13155bffe7f2c128ee9580248655aebcb98bbf1410ad652e73089fb570b33038e91b1b898451cf8cd4e65eef5ff25e94e19acf1593ec99240bf3d839c1c01538705dc62f93709dc1e59d00c4f9ee1879d3454e68a205a83165a7726d13a8e47a84fc88ae0a9a74389bf1d73b89fc2fcfcfc2780c1e2773b38d3688b82e03c2298c3f584968afd0181b5dd6221ef2b0d2813c6dfb95b763bbaa68771029b1b19c77c75acd36dcef0b5754dd85109d4c86f593df46d2adc57238abfd2ac3a9ad14bc443a0c4ec6f3d2aa4133b1598e77a5990d456309245268ec6b48f876b1fbad84d3c20c928fc2695197bb5893023582e0403e06954c03a3748b1d96df7abcfe77d59b97451499aa8fb02a181ab68fe5a5d6380fb7a7bfc16e186f119b6ecd18c4a4007b72be18efa2ebb005430a405ea0cc1f2740c1b07ac0775f3b1bb25637a2142416588e043747a4303b7f7265a8ae34aefb7ec0cc912a81ac7b975b16651426fc0392b8850d78af728503a9ccb687249388d05045733cc2abb27929287cbb8963e5cc4a18fd64d167922decf900f39d1a9d745d995568bbc56a80ac21940a991e6211beb5fbb4a7857a4fb151ee92"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6918ed68ef3e63fb6a020a6af0504fa7caf68d21bd87306ae1161bb6b6658c2e6d42277c9eeec6676d6273fbe9c215d9dab12e3aec042d663ec40c2a6ba3a1847d4f81e6631f40e1f1de474b79318a6ee72e39943ebfe8217c4f6be9fedf801ea50d7532319f82f0c43d0bb80031f589364b0cf93553dbbcbada10ca0983f03a35801af10e373459673b1bff8d1154069828762778ac146efb4f2653ac1d42243a76036d0faf8040945b41cdd1cfa4994d4e9120b8dea24cc862ff4c6fc7b3da4f6a1867368165a5e4e7d786f85ad850193baf614cecd9dd1035105ede78d16daeb015f1c7ea44bcd2a75318652bc91895b40d9538568cf033a590106d370c778c0566c0881609cf0f6235296bba81fa78c59eaf76ecc275904947aa74ec1692e6d35e715cd09c4a57bf8ef2fea478a30c9ca8b773f2aa7ba49af33260f9d37d72eca27f67abc14d51cd8f644a163d2996b9e92ba424ef1cc7f657dc7591d4947fb5a19ac5cf8372c0b6ea64616873a2b8bc2cbeb6eb0d58e106984a3691a588dca0e0d6fbfc071cd3c5e4c00c3b0b3c245c685cd1932c58770cef8bc916ac11781994a9fb61f490fc707ede0e90ef1f700800c59d113ca7a347a61791100c60f3eb5aacb168bce7a7535d57f29ce61be9ed75f2f02cae48e3637eab25e1e26c432ae7d94e40a5ac8b6c9117f12fc1ca3df21aee1160df775e201c9d32c33393"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5c3930a672c7bb3370704c2118883d71eec08d0373c386eafaae8ad29f6e34cd9052f2c532bdc2dde0d33dcbc4e00b54984f80844462bd222a886abb303fd4e78735c34eed7d9e72039c01d8a6ab7b8ad0d5c161d6d6a50e67a72b1bbb58fa03656f6860bacc01d1e79d99818e26793100573a3a86441100dffe2b1bec0028c320e271801d9e29427c7e48277568775fcdb84199451ea0cabf17b44474dfb632552f03118338100118495dc62df9fbb2d623bf8f09de14a03a18c0d5895844bd08c7c982fa966af224bea611bf7fa7a38e7d0bb788827ed66413ec962a8c49a30c2b01697b0246f812d484afee38fc3f49e34770be2e7ae6dfb0a92c70ed84bb516b1f5e26a04ef51a00f22c894507fbde0c35563e2c1ffb33e2847d16fa1c713cfd7f25245df18062c8c8a6d30c4244b01dd243481a65ab0685ba3cc6be4aabcebd7c8af3e5bcc7ea0c75e2f7955bc834d4f4280c31dd3ccf30dc0ae5ffb2862c8e42fbd86919e4f449f0513587a346a714699c4d1c99a28d17f4b1cfddc3a6c032113608e36cf0dcba19d743189f40a4374b66499b737d7f53bfc86cf334ab9ef9dc9e178098751e32471e9edbc00251988cc18fbd9e786290e523ca54907d3e3c6ed78c8217708f06a5bcda4e048d698453d1e0deb0d79b3200c1a7380289ab047bbc99e05dd897f48526d7fbff7cd0cfc244c991c1f962b6570c83e409b7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5179f20c7125d575420c85b0954d96a0fa73100b265113f301d91457cc901e04876f86603f7b5edfd2578fa64c1ca58ea48bdb7de0f7831f4f331f25548b35915167cbbfafa56ece7fae60f814c3faabd5101d82f04c80f53e3d1ae1a3ebc6e764e26676ea8ac34c64cc3f1d81a6343ce1622dde7b80f7d01f5906b1b05e6bb013f1c9ec9f60fd9a0b6220ad1ed6daf7b4a81371f3d80ee3a5f80bab868a70462b6414d700f60df20185bace77576a106594d2d5ce4b1eed154b85d779329d92b9187e181b321619e7fbe9aa711d98594b434f3e013eb64ee56cfeb7a70e0ca586e177540460512e61698035ed1e1537a635857c09e01c762809a8fc348278060b7b751c3009ffb9181703671546797a604b435625f21196b49d3cab7a4450c8bd339e2aee3a1ad8ef61e6643ec1037b593f66f9632a6fdd92cfc7edf472e62e386a3b5434a45f742461372ceb097d23b7b4f5d153d4cb4e7b692a736925e5110ad1a8ee42f992b96d4fc39ab47e14854913b7e9aa41536dba61de7f084e25609a08cda63f1b8677396778a0016445333ae370a3f26de61c607da3b1bc52dc3ef8c2b96b9a9d7261c4081449da088c6f02cd6f97222191a828dceb8d3c257ad60aed903d689123982b6d3af0b03ff17613a4b77d0bbe6f671c6cc04978714899714106892cb91fa91d912b1fd570665264508dfc1117b5d60e066ecdc494d7b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2b822c97ee5998744c50488a0c2b47422c2ca0e13c8a07aeec7e42e0ef813077212ad5046b522898fd5d5f4a4662f25ebaa6403260ab5966599159c45e66e21e62b94f8dbd41cb760424cb8dedea67405e14bdf327065b2ee3844da82f7ae8a2ff4641b9a83ed6abe51cfdeb0c84022ef42570ca51f1f4a59956e43e3a59f132afaa4e872b1534fadd8568cfae195f6faf0fd4a405d5b2e8840df0db18ed8dbc2030ba57d2d49d364544dddac038628296b9937ff4eb97123bbba35fe7a32c676bc0292901b16fec329536eff1922a565b91b2b8ffc0985563a6ea245a20ac0fd096b227b0f3fc610f627a9e306336e42012ec55797a67a5c411c647e7d4f3422b3914ad8be283f33d654debafc3bedbd84bcac4fc16f70467c34461355396d59afdd13420a5cd5b290adb9c5d05e5ef3c9360c3ccebff652221dfe6076104e9acd92715344cbbec2b174c024ac06f7dadd34ca1d24750cb248bafae221e7d88750d3daf842717d567a7add339ef54b1b218d634caaca3a729b15561ac75f1f38a00ed34bc322e854f9bd5fb69b3e82062696e40602203f9e534295ce2ba8245afdd0c6028d1b02719962ff054d2e575cf33aa5076c75244d07fac155c3515a4ea9eafd6af33ad2d7536322f0e9ef91a28bf82e98feef675b50b223da27331425029a6c30d9ced424992b75d10c1657c0ec5c133f168304e34dedb4cda80128c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5294afb7d060306ba815a17ba743aa671114bb97487289a092183bd41373e5e3a0df7244688781af07d118e9f18818468a837e83f2c58252da523f8b25e61c96fa6ac97434ee553ce58fded689ee82ceab47b38f845e725504b2ddd61753bb9e334a607fc45616ef66b347aec5cd44b8a78968abc6bcc0a2a19c36324937fd1eb11554516806dede4075c86b86835a35c60f4bb482204d0b0855bbaf67228d6936dd1886335e85a59ea445084735368f76be5b7fa3aeaebdbe87591451d9499cdad26f82ec680a46587d5b1008b78bd99575650af8975797bdea912932ac9398ba35ac95a615ef6b51b141f18eea88a1aac53dc13542eecab714285f5bf2ea75d9385425784fcffb33128bbe3646e5be152b2000020bdd0d00e008e674d5012170b2ded848ae57bdaf25877e333fa1c112acee9fa1498cef6b353e5b3c6da68bf49f302372bab5946065fe20b68ffda400f57f82f9e0bb024e06da7370d8ff47c8cc0098cb365ae97bba0608d14565f83a73008a454f028eb818dc8f5ff2897ffc964530990dceebcbe3acf46151b1f1111d79f99d988e89481144c39ae4902effebba8799ca9ff6d51994d94c70eacf33fd5e8a5c38c72d2f1e282688d2699a76a99f123dbca741d83aa222cbb11c85ca1019da80950c0e00a31922aabd37f6685150df7ef26587feb3cd825d5b4801a46b056b2d9dc491790249fff549bae0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15347a7617d234e8c94d0fecb9960972c2c99ccb33d384967fb821d9138debad76fa5dbaa4af3672c773cd95c9f0349251a90e813acced8b37d99255cb6190b5beb3083c176a6e30a5371fb32e8e1b8345dc60bb4b642aee31179e81107bfe71389bb4c821357f01c2fa352368f4d03f88e4b6ffbb82228681b1d8bbc40bad39ee532f35e747c7962a2a2b8b862939c017fd16f1f9e1cb68ffa78b491af152559376397f59ea0d13fa47a101c57fec26152ef46809244a7a1518d9a921a2f07b76e5b0269a504bd7add87de023a323eb4fb32a2d36b05d3edc840be4b93300cfce30db29d3b7e2ccdac422423e6027a8de9cdf5d998bd04feb953cd455d1b87e7cace1d5ef40cf41857e2611cb046bdcf6670d548e76015f2ffc48f482ee68aa9c963d81196ac8e99bde7e0959107e5646de07a1c44e99fd5ee6e2633b541c40579779baa2dd0448ef4e1169dbc7f328e59f618e8084212f07869d323510e88d19e0eee65784fe6b4eeaa584db42db2587740a6a89e746bac566fbe8ede6aa3e494db5143c5834454c70a1da8a66cc7382292f04102713132cf74f992e4690efea72dce8cc0345c0ce368671deb564515a43925d858f4e04d99c681195ca77e0731dc73ab14c1994a32703f7f30859a542e949cc5b07398246a2e428fb04cff95d4fe48a525384c9f03dec4d4a3220e17d55e6a2b2c241e83c76363a327d8483"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "81d45dd2ed7bdeb122eded3c9d8e2a9c0aed1857483764f86e8d9453ca398e159886710558cfd82594b82726c95806e364c857aac2309f249c3f9272e2842f19f381ba9f062ba12163cec808a9d2f75f01d3760937e3c795d3028223b29ebc6b23898205ce286fc2c7345e67644db5b5fafc539a4a07f8da447815204827e53421431e978e86f61c07e413ccdad6bd8353cb0b6929cab0b309f88891ad9306046835eb04e6295536bc39f95d4023d326b93896217f4f5966d7c297dc58940652c46af565871fa0af03d9445357cc1e62ee9019a3cf0709b395db776d69063a028c04ca1a1430cc85dcced8d05b42698304f674238394febf532e3aa281ea66248b5539a33c7320e6c080bde47ee1107b107761170ee18c094a45385dde9def358360114c7ff9b561901646f2872825d63547ea3dcefa9a07be2b96ac269e4065cdddea77b8462478c981d0ef19c0bc856e00680e728e9189674fee43e2ab98b8b43f822b0d3194ca8e7df40ca9b8c795848c9f4a7e7a7ad8011e07a1ad88322c84af0cc1b979efb2c53bda8877c0bf7620128dabb993c4df1f6a6b254aab3425b9ccef47eb04c20112d04d6089ab2bf67b1fa9e4beabca33f882a9075dab810dbcde8dca885c897983159aa6074e022a2e2e4e3b679452ffc04bcef7f267111df2e7ea57c7bb593454924c3640c37487b0d3a967e56748400c856c6530df8ca4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "63bfae421bea1bc841c4c55761d3b902663c575777e3a4ef2231406600c6055f138a97d8e52a67b1edf7d47384e32c56ca0e9addb1f33e425613a4449ab1d511ec58f9b03cf8ddde8113b943148ae6456590a81746382d4622f260adeaf217434315e1ed44f52ee89e705b292a641a72e25d6393599af2d77524f720996c233540751d9d300ffd467acf58eeb1b3af0ea9805d5ebc8e6f70ed6bab6c5350088ab1d279b4ecbccb41a34a3d7f366df89f1c477981876ae70f019b9716e8c45519fed27f1599d469c93ac32ab0aeaedd37a067b6d460eb7de710e7a25c7c2e02f2d2a79a2299c6d4745af60e44cd30d804fb958e9c8851c191575b9cba358200f413e97dc435a8de7b996a935b87192a1fb9c892be426786c2a26e38ce1b61ed0600aa73b142498952ec8bafe3e261c5a51d70cfcd8f179216386f71956b017fae883697fd626798dc3ffea15fd689e59fd5c9143cae2f150e54243839fb48dced3c70c4061a88fb77d971420b858ffc221f3ad6577848117970d062af3f255e197ed358a5eb7efb063b54fb6c21073ae1187659099682fb1583a0242947bb804665912471e4121381e4a7ac9b33d9a1d82b48a12c8b98e434e97eed912a41363bb66b78d92fc52dfb7c153449a06a095f29798101577fafa4d9125775621853644e2fac9b2de281c0dcd8665cef3d1d6bbef61c2c091dfa931cc6ef40ee9d5b80"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "921897122fe95da7b369055a24438e31977ae5ecebec0e6a969efc589fddf69237fe8ae0761a4ea886fcf52cf3c40a8432cc462815fe34480488b094d5e156df992564afcb2808939dee01a8d9398b7dac996a76a207f7538b382e4da8eaf403d470e8ec98b9ce939ec7c9d97a8a9eadc2b7ed4d01b088b57483b9840570ef35d404f5bc47be1ee7db3a19d9359f5433b7ba5d5770a1c2c319c0e4574e7068dc0481c6446a47291f8a658ccdc974842d85658106d75a3d2979baad2c90b597b036814535b3d437fdfdcd0977f72a66c51c27ddb846ad7181930ece42056be4c1b7f4d62f081f60befadfd4493b1400c749c9d343b15356a0c4b863b9dfe92baae0a6784e4cd25ee1d352c55d257c16c7ecda76954fbfdaf79c3ae8ba81a940264bc75203a1ce4090f1e09ac54eada3b84a06a13fa5253f38f61dd5bf8fccc8b4645756f08e66f44499c4cf3a235acf0aa156a24f6070e9496ac4ee0211068fecbc5e6c7ee19455351c1037561deb2e86ad855dfc8c02d73b109a4e775a9a104c0f389dfaced039127b93c8a6edd943f8aad35c7e074a918b599a9d305b31f32c52e1a5a735f71635abb0d7833e449d16247e4d1bc1dbffceeed7c92c4b1805460aec4e2442513ad391671ac87b9b089b8482eebc80efb9eb389c4e87a85f5f53f7882bd66b42bd09b0275e60e76b4208384e6fd864ff99a4d72b39f401962e72"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "37aa38b4532bc3cbba962bdd106979b4bd0d06963490f0a7c4bb0b1bbee5772fd976902c077799e6d24d21613e1aaf364687521ec8c75c763e27b94734c25a5595a1359e9f2a72641e473e70aff36ba14cd79495fdc0055c2f22cde8a0dc36bd0c4eb8d12f67ea9fbc05c282b57834b94f8704e8c229207b82bc379d959ca4284da7ea2bf6cf08c189439d765db056144f4e0f65db91128f506664fb1c136c7649c92b38bce90a4f8ab6e08290cbcc4d924c01b1178ad2993c971d055969b5253cbf98cdeab6a87cfa9983c7201ba7ff3522a292eac3a08c7f463fff16ffef3271175ea4eba206a634844fbd4b130a683a93785b7893e9ef8bd3ae73c513cee3bb1ed8da9be1a9c39b20ff0c6aad6f1f178ba75d3ebb71140f6d75f7aa71d258069a14e1d42934bdb8ddc3ddfff75b78c1cd8e1fedf0bb0fe66e2e817db92f98f7f73417ce821415a0c1b06a7ac5d1e4586545129d02a6fb171209446c7adceff80198dfd010f84241f3e18b0b99458092319f967b7064f3915d171875a2b63a30b45ae60dd1ed8af936bb48d8254e823f167a40e89bbfa2ff40ae2d48dae05989552cf8ab5bf7f571e5ffa7f9a1808723fc27555ee7595b09dbbdb3f35181da4b794995b5a07b96cfadf38d60204a8e0172fd92e0d3c8902fdb0c161f3ea3053bae2e21a9c478aea7bea42f8ab082e6e3777ee58ad797b0bfb7e7c79e0e371c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "15796dfe18c6eedb2488e75f4501f350c1c35b6af637f09460d94f3c61d4e119039c4779b88994006c3f62cb7f34f39e8ed8757f28dfafb55ca2ba207147960a71c29d1089550778b7b187a4953610e856adadcec93e166bb718cbb2e5e7fd09a2c0d978652eb89b698f2f629d71da55c2b2caa24d4069b82f4074dfad02d78ded1e1058f67117def7ceaeeab37bd48da1ba887bee751bef68ef4028c7cf4577f883f463eb56a5fe9145be0b2cc5455a9b3096d41af9f0f500da9489d00b6082689706fa01f40ecd0dc554c8e8bf6021139978bdcc25b73e11c3fdf6a74d3e1ec6260eaadf40c0cd86db81de9287b25e5cfbcb754a713eedba9e8253f65a7f02eab00851e2c189b3cf47f1d60a1c3f058f93aa644def56afa071677eff0d9f60eae8f3bfecccfb63724c618558e51d3455b7ed103ed1bab225dac9a675d56c960757cfe3609f178a13ba299ebca3468d7ed0ae53a5854134bcb3d875642224d330e4af4680fc951801392cf2c43bb8b299ba348cb91c890886f7db8ad8113b5e84215ca1be49199396be27553f8d3c1c4e281d4f911e39048229e4761197d2147276fb9d88565135d1a2767f8c8817ccb76b835dcd2b598c5567efdadde869d4ed4a3446f01f271f324c7cc943a194a4e6e1a9d56658419eaec73b0557f823a946c2f6f4dfb8505cb2620192df8f110fbbcdc4fd6b2298f124cd53041b0913e6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c699a76b8f2743d7fbe4c47d6052887a8cb6cec90f7eb95f39256fa677093c71f604645c9d01b6cf177e6b30f825f63a0ff805337e1eb4f64d5d894de4d2bb3d0aa3c39cf309580a3fbd5415710b4d9aa015edbe4e3189ace28cad4477f2a73af8cfeaac7637cb18bb5aca78fdd2914281d6c0cda03ea136ceec5920fb258da99e6816074dff6fe625873d3bfde7818c756329f84f398a52e7a7ac886169f77acd790dbffe66f01c3820d93dd487eb3c0e222c4f0c246b99b13b5038a81120d8035c5d023e1296fc25d09a64a1782ea557df44219748c0572df48cf8eb285f7c2231e1aa8706f58e5dfd6723c779f71d87b8af852895564f869031c6696838f9a00164e78069ea87c9106d439c43d7c050ff1dcccc17a83b05cfd2b59c7c267ad5c32ac6e467496650d6fdba12ede1cda8e15e03091e628149e6c43183fd95d4bcabe8d179096879551e1259c59d6fbf9f19838c6283936b6402039928c8a428ccbe97ab523f79e70adc17e324315a740b00be8ae82c2adfdc0aeb60a840beeab03c6e690f54d4103858bca95dc507333892c15536d62b1f6b32e3f50f6faac5cf29833186fada7deba7604b1229a8c832d1685323f0a45e67d32a447db8ebe1c1d5083fd84510a5c92e839573dabbb97c240cb1d53909e1d304807c79a859228a3dc5756eba16b9545940c077133e876c6c280f08c5dde9eff0498bd5187a7a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c4c8233dcbfc7d176ff4d31081ed91fe02a64cd00f66e830a97dfdc3ce1a7952fcac2696da6a95a54b76c14115ff9337ddf7c74bd36932e0d0abf5535b1d030ad6848f8f0184d62784d0d378d150fa8be447f00570492b6f540f88eba62917796cf9a76e7338f27779144ce3ec7196bba1f6cfb2b47541741ec454a97fc465cfbf1aeb681618837c481fb76074ecbcecf18f9ced503b5203fd3bb4c18a6a2d6858020c39d641063d28dd5d4903fe7437e914114e2fd8898b5170d3d50dfe856bd72ec1c676015a5335832892d015e39ac498e90c8d179967d425fd59663b8270fdbcff3b433fc2468f88f3126a4f3a5636ca92af919d6ab566598498130d777ebf8ca73705cc4e4dd6507f28baabebd462ca47ca24e2ad4a1a0ab930eea27053aeebeea63d32d6096fc0469adce1649132081acf55b80eeab28743bf7da9deea58d3ca0a96e4784397f459f6cbb040dfb9a6f813be0d55b1dbc1c3a0ed32e2e11ee01b4c6854cb4b3332027cbca24d0af9c2f9eaf61ea809831d44c4e194a0b142b49897496f56f933aee0e2fdbf4e542e0a05dbfc077d4cf1e4c41f8464f6ca18a9f958d859a6a6326230800e88eb6163d8056e0103b68987aaf0a601bbe5b9c50f6dda156315e84913cef48007933d4b52f100c763b7e1b78daeb2cfe7d6c92d32307039db8ab24889dadb7657ce0d36377f9e646da539747b266d849bb92f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "42d49b58398a0600e337a94146eb805b9419d7424189ced4a3cbdb49fdb82f47aceafcada6b120f6ab678496ba35be664598cc35e230491f474475d5ac55638d02c5a1ff93287a684ade443b5ef6a4715ee19680d9466db8a85d152251a54afd2d102eeb546d61ad80552353ffbf93ce5c38850c60a627df67d57fec100cd70a51558dac111972df1a1f6923644cc53d0b32c8236f0d30fabe027767c81e429e77cf2f0c21c979939133eb3063b447f12c6df48d82aaf3294d6b2fd1ed44a9ee123c7a6ba68b278c412b673787f6f6161553604d7bccaa4178bca05eb4b650dd94d73f55c7b2a2859310d406f6ea36f1400230113b3c4c6a9cf2b5b79b7906a184d9bdf2445330e5d869693537897ff45dc8e9dff48a78626e7da181ae439068f80f2bf460e9274a42d9be27115a456f28593bbcee4f2b1e8c33da85cbb0d4a25f551340b2a6dc6cbc26802457a720b053ff39d70b164a019643ba9e61172b5792cf4f90a277637ffdd9eec290d1ca9717cfae6285ae504120db2a081368e06bee71dbf5ee70b63037044b1b3f20e5dbe1749832566bf2c5788826df2983c38049b806e06e568d18637a4209cfca714626a433dfd4f4954a6e348fc373f95c59d2aa29b9d3dd435630f500d50ab424cb8c7b795de92d14c7fed75f0e2181b7ea901286dc9fc61cd887c6289a357d633c7c0ddcec38461784cb59be0fc7430e03"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "28abe06eabb02be52b20e50de761f97fa5f454f4ce892484ca7df812c4dbcbab2d7163a20c0544ee454e43d1c96fbdfafcfee7d9c5114a5c6b324157e77bc283c3b0202e7067e252289f6feffd3bc287d6670f85175bac90d4d842cd902ecbc489c881abd113273cf3802ab3c4e347572394a8517763d7a2985214add76e757ade4994bdf23f7b9fe3d936eac96ebf11f13b3f09deb71e13705fb2a2c52311162eef035523902874989cd63e688ad53fb35bd5f0ead9dab6112db19c2ee186009c83455a57f6eceb4e6e5c2f46435d21d3d9f7d6e53583c35d859f42da569d0113322d7d0f91468d9c7c05b4a648b45b15ec638e210436ccc59acd2b223fd98255dce7cf75dea03cce9e8f80ebbb09b13fd2c0adc7c039ef0c5b369031600c29636a7ed8dbab4eac60a9940547e3591b48d97c329c47d86eff1b0a3f28f3b6cb213fc35bf35098e394c7f9f84277859fda51ac25a3e75dad7fdec12c29ea441612213c56d24b4cbb8529b8ea80d1c95690d540819ec36332d05ad922d71782fa48a2268fe149b6a77ea4b4f941b537c170607ad1a453550cb62e81ec6cfe8c0eac8fff6fef5e5b148c7ac5bdb5317a44c17bd9ece2a41305845ed3693911b3243b94f8a5f8cbd06cd1fbee782fff542f3dbb8367263eb1f79474d1419c6351923d861a347c53f298f2a959f6ea29015a99bf76034ba9ff91cd79a43402172080"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "606368a102b687b3f77b23add45ce84f5ba81f69c55f327ab98c8a2af52a89d332e202bb3531a31394d683c691cfe3dd1087dc7001bbd58aa6eed9b22933c4e84ae303b449f38017dce2fe034a2cedc6ed4b2d29c8ba95dbabbd7337dd797429ddb2defa3410479bdf13b120f1ab1663f01fe13cebde75545ff950f374bee071a35d0078e0d11e56f4a73738a205431b10bc54e935f097c10559c7f8cd0fae3f60dced2ae9cfb90f641ef79c627a0eefeaf04f1c5d03c1a3e2dea991c7e18be5db6bd821b07297b630e33b58cd8e1d964935cc330921f89d97b3b14960d59d8a228fd1c7ded2728e7159a5121cac987c8afe63b58616b8b8db82942558f997be8853b3b152bebc39f251223fde61e05b6da00e273e54b29cfdebc54b2faf84280b09881def19f25ef3d36a13ee4a30dd30f517f9e738123f090e69a87f98b51b9a3100802e4be126b36f02dc999b1a1d83481a8903e6e87bec9c85182a6573747dd00d61c9daa35954cfa76196a1cbedb50b9491e41c28b2fd3cf69c262fc52307f97870fad0b16ad013ac7ad6f9ce9155d9c67d0f5e197aed564fee6a12b0c8c7fe3adc5e354397d80d7ce9afc2516b101f67b061cf0ca4842be2dc535fe51bd073103fd57b3872ccebed778cc2901abb454fbc77594e85c5d02e4d0d388e1e3ce0e3ab5b99a321de242f6631b70b44bb32a004d167ec248e6e0a9c55bc01b6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "578e32b1a21efd13040da60f84b4b23177693f91f0655042a485aa72bbd8ab5c9404ddbfd679586e11ed1115784c1d0a052345106b8beab6073258d01758fbfe4dc6c6990c0eaabf24fccb77ca7bf85e7b18ad25817adeb6ddad6d85b7d7cb3214281676ebc2adf0a4e6bbc9a64e1301c31d0c0c55dccc050a798568525bc01e99fac22fb44dd636ea08f388f3ac0c515f92242cde081077e88ac47b13920206834ba3e27ff6fb4ecb7c364d8c70f66cd6df9f0e3a4742f72a8ece5a4578d7f6d54eb7ef24f6a693ff684d0358802d0d842f7ae8b29d934ab657265cc8af115da8b8049ebd8767192db1a876f9412d021ffc7b8e91e2495090d556a35ca16cd850c521b65a28468cd130f0f23fabad041385b3232583d70a904cb3d7b6d7f1781b4267bbe27e40d91b2cb2c18a8da23aa3dd6f82b3fd6e9325dfde9958a284845958f5cebb0bba2ca1f34e96c010251286fe440e6e395117b6e2c7d9b007f13dbfc4d5d512fe66464264e6f5c502bd6af825bd502f8bcf21d1f213ae69cfa68f16449634505a6e965bd68e959d5dd247e0944ec26e4f1bc857f1b46f55ffc4cfb85df6130cdefb147a65025fa6b12f313e0b893815876ab575c0f9647bf69f45f538bf0ecb8593dd6a39aa12ad3420187d291cab553cf3a4c801e282a5db349b54ba15fbfb1054e9aafec5b45ee83634dadb7d7a50af029291428f6556280b09"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9759ffc461e0e342fc0ccab8bf5f71a528e12e368d45c371dbfd709e7a16d146c3b847b2a9a00d54b2eb91ffa080b072a630c0645f2c8c6de2f4f815702a754971651914ba24a9c35d895e747745dabaaf21ac9b908116e56a8043702b151555a9f90b33356cb46b6989a4a900b8b7911c2704440173321293ca6382b2289f859bedc8ba6d160355b029a4b3f30d4205b33416b41e97c2cb5848acfac5d52006ef8d93638d48a2e0fab5dd6d6009e1945463e7ab53809ef6aa7ebb297b5b72ed9f55c43df18d85596bada1b014a5576a195a99c9e6c729ccba224fd46da6f0ad1ce90422318b0a2edeb135b12fd61d0ed2b56be2cda4b4d9819d537bb10079cba8d44eb401498c194d1e9eed31604cf79ffed10f8675ee31d57dd2443afd43d07d55b7971ae50c38b2b00dda28f7b99d14d3f885b70762ed54eeaa899aa62c738035a972d0b6ad1574bfbaf0e8d2fbaefda5dfd7c64e44e5a81f1feaa3c9305013ccbb10af2268c6001d0c2b3d0edbf558c2eaa22d3a840e1cf678de90c341d310de3d7a3eeff1f275fc92119c7e13e9c7f8230da11c9acfc1ce44d1dbf3766cb83e1a335d9b2a51dd2d7c5e9316db24a8d1f9fece9b3e19abee6a54694a0b622120840629710eec4da9b1a1125f0a8d68a3a4e95e8d5de298a308857563add33499e50aa09dfed1ec34c103dbcbe400daeacd8d0d1a526b922afefd2e421c54"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "55c9f8533f91e175b2faef772dfc8452afdd8af6558e62d854688457772785a37fb25c9bdd54c94374ce39f25d08ae61d32e42389a01c7ebfe19ad81f85b2680b157ba885f77bc651da4744f06fa06219f791c19e6c65a443d6f8ee989e0112a9b2c7a50f7180474861ccff6bef6f4d625e06d072b987ab6d5f4e49397a1d6ab5de81fa17790af6c20d6cc173b7afd8a986e885db4596d784196a1aa6aa16566e4fd95ea1acca6abf75e76d23bb5bcb9ff77703924c6cf0841bfe20a9210c6b039837765fd88621ac40966a7fff636d8c08d6e01aae0e6cbbe6d939273b41fded42cef520723689533b9c9ef880cec7165b51d2b2661abbaeec93655075e8ba0966387770ee4bf6dc0b5c64f700a1627ddb6444331d3d84a5f049e4313ed3408b3235f906cf1f71cb8a659cbb9d2d21bdb570a890a84b4eda357f5798e491306a146f9e48548567c21ed146082cc827c298cc03c7e9948ce0aade3c663ac1ba599a0aa4794f80507c5948f68c72ec45815b714cbd5efc5cc44b9b8143a00dab66bbf96d8caa34d89508b05de17282fcf4cbc16232123634efda9dd797f38d54cba71f4d0c4d610368f7687dc0d042dc85088f8f8da3ef01583613b2a3093b9f0f67c29120a6de03c92de3fa40078d5145d9331c69ca03e4978bee78418ecfc85410a19092d2eadcea18edb79849b838dd991026fe3bfaac57ffb0fa4992e41af"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "622bc03c975ecbcf270d4fd0a81e245d2d2bb967211995550d2599b1ff72b0106fb155b2683ff4b3a61aeefaa4b9933a5177d45374eda2994c3b5394106a021ba370247559fa1217fb401b6a57c0c7f7af1dbfbb73ea8c1a8f60b23a65c1bbaaef01f35c0c950e70f430ebbce87ca13c2429b8e7a99bfc2fd9d563e60c68b0852da2db0acf752a1fe73f577fbd62a6c06f479e8bcbe0f6eece671644d0f650254b0131381b3b5e55529dda85fbb96ca8e7668d55acd5dc08dfbcba9962ebcf9e82469a11e38377d47aa6ac47e9a8985d35f0a23296da33457e3c95dbfeb57378dede44d8be3df8c88eb953ee82aebabd5ad5e632f5f89aef6aa7519a07fc52ed7314703cd8778672968ab6b31e5b371859fcac5267fc568c1339234eef70b22590dcfbb3678f8e91483fb2fda6c62b2dc38c7db4538d3c4673b7ab32806f8251b41be88226def56d05e031b1ae47b7375dd348081bfc34b655ad5181f83f4c7866510e947580c9f79d7cec9a2284ad169dc5c12a135df8f8aceb2bbb853246f9bed7ba175dec9c5f4aadac16c9b3ce74383260c9c71e88ad54161edbda05cda6922d906be8567d1dd5a78191a96c164976c0f6078d36468acc911f4c5782841273f7181be5781ad330d4b371e2b1888f53c26824ac4321efabe3a63a70775ba2a6b123d82365aa08aa01434fb973feee939ddba69d1d9ea0a4cf5c8750ecfb98"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "48ebe9de8e53729f8eda91b65096655ced00e42b9e60135730e26f454fa2ccfb75ca69fe5d199b049200d5eb092052df1e49c7788f0dae5b1e1fd0b90ce71be65c3078adc9f2ca1690dea7c8c742070449f5f2e381711f64960a3c8af07492a7211c6c4c130b51cc02eb4705cfcc5de189e59a4ff1f118bcd05a99ba5bda03d789f573aa859df0f6fe2e09acb2b48f3f2205d9a1b1a576d10a3506344c82dcf636013ae464dd694c299f6bf3035a230ddc08b9bab222ac4ab8eedfd75cd00ff7574fd351d3908f9c625188916a44a57c3da0233043fc4c20d2cb2d2a02f134764982a9a0004324ac2e8cc68ce7d22cc50fa792923c5582321ec980231bf00be12fe58c942584689d2174260558c2ba96366185de989149b4bea1b45811ca835f98293f6da83325f9f7fc24a67652e2629e8b429ffcfdfb1f5f8835d4e5fedb6f37b0646c3593fc2085d6166202535d16da6eb67bf63c5de8972224356424e230e54710c25d0077927564c35f7898766a6f9c4aace37037c438a6d795e575bed7df883e8ec673dd7b40e801ca1fa943ca8794f3edb528acae6f083985f5fd05b2d8eaecb3db23304d6ca405507b0aa3ea0ce5dc3db24e1d4ed5567659a51aa2f0c32d5653a78a9a3664109b47c2ca8667a190dd5879377e2a9749f45b115dd6a89bd98befe252178f4a202479e6bf1ec5efa3ca4381e66cb2e69d56d68a5f9039"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "584e9969bb4b1cafaa2378ffd159216abc171a48487e7ff85533efbb00c31b133eaf6b61d1bc392c0eac00711c2c0a5815319b8e12f0a50c3f357d9fa419df1f1c81e1746ca5f4fb0d304f269f07d4041ebb0906de301a6ab99f8a792ffdcb26ed2fe000f8a719a4987425628e49559cccdaa74f56b3029b23ee6be01da127bb6c7c47067b281ad8dd47ab02ad93c87941a01e3369c7d21086279d45f2cde90faf493933539ed526eaebd254b03a5c5b69af634f81dbf30ec8b9cd2ee5d5638e7b9bb9051e9dbaed1895afd992db9cec16b30a440c640660bffe55621ade0ac1ee1f61823389577de5b76a0b52319a42b80c31f457aa9bf483a9d61820d418d90ab9a578560cf4b8d27ef68c338b2c5a6c7b92efa493ebf792b24218911b5acabf2d4101a62b90bc0d860c66dd871a9a748a4adcf8307f676bb49da703cbc24ca190a2641ddcf7e590f8b93b12ebcedbada2020ffcd25492f1683909e8f63a2139acbae12b9b077f2e327a990503b7ec079d288b23dc1ec70df44f821869e106d1717d384e8d8e55e29143042f91d98fd14f403740d0885f353519f2be192b172d4a0ae3399324ae7620514029bf60d1f80d4d228f3378b6d093729aab9af1defc2731929037b6f36495f764ad7b023517edbba0f9deb31e82456c98f7d1b7aa0a308af1350c17295208515b6055a6d2bf41e9a98f193a5568e9719523b6dc7e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2eebba04c692db87e21982dab4776e0ea15be89e1ea2b7096225bb3d4c7ff8eb5a35c0ede28f57b052eeee4718a1215d4767b8d31931d52e9afb52e48b493a451f32e1a90564db40bc81ab8a1885b049609abe7d0f2e4ed8afce0f7b7d6fff141dd76a3004c2bd9dc8cd903a2bafb77e8b9524f38a4aee393a07b787c9527cc7f39d2254f10f1c834416ae9cc689dc71dad489051bec16469552714601fd5c059fd076c2f011a37b1ab0acf7fd4729e232e68dfd79ec0b6ee87413ba94ab4b53b1619d760c8473fad0d5d6b6921cc0838810c911e891d3492c2eeb008a1124c25a2a68c48c72064f4171c114a16effb23e351614cf6bf87e63df60bb59a77acf769924ecc1a7a6cbaa9cb29d69a7ee5721f1e3dfe8820120265195b8650a4c3f5c3fff2c66658a79c3f9e1e9b83985e09b42b0907791f65ff0c46bb10dceb0c16d0aa49c8d1b9b5f094eae440e62b938c842bdbfb0d52340e8b77da5c728574f0a090dd3e5eaa97a2c3fa7c1402768a693c7635ca722d81f101ebf1ad853ed6a3a2fda270c49e9afedeba199cc6dac0a329eaf47a35ca0a304286c5e9269d6d82cf9bc3aa49feb6b775e82a1e474d6bf5b40ddcf8f976f5017018ad1471ad50fa1237d1af971c153339cbdf9b6ac5bd4f348838c94c5d68183bbf81c87f3a362a795a714396c0e2c458bdd86c3ada3b8049b175d540d36b5ff48ea6f51cfd0b0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "72e0dbe8885928b6f14fbb06089957a13e57a87fb1e1de0edcf859b35bcae036a4986c939cd93a67525e960a3863ef32a4eeecd5544f151e6838305cb7cfac7ff9a5040c078fa09b5b6b3e1297fdccf34ee22c69079e912a67acdff40ed543def23bf6185fe12c91b29f73f68baf91144d4298c6200941f7fa381cb70f02d951f261bf1e42543eb82a93e94c50c955e90d4fa70317b1d0d6d6ab771a6a4663a08a6b22248f855eb064364fb7f96d755ea62debc5f6b6f08e6024c221eb599465ffae9ddbb0db1f9a81f6e140b24a36bf16d4c02908af25478d1d5e8f35c2fb088343cb51a9280dfa5d0795957cf62ca1d4c51289e64c7b14ce178ca6ce0baab676c629f363d4a6ff8fb8395a1fbfe85d3de190252d058e2be5f1dc3f8a9929d5cee2320cf0945a82be5e649b83e8ede3a3b01a18259a5b5afc377c36a2b038e5fe5904651619e470a083da069efbd2dca6725c92f34f574d7f5d467453f1802b970211f041caf78139a41f671d7500b1e6659894b4cd7d1af04e6d7a3fc6359430d4680260cdbfcfc49d46d8ff1801eb6f28b32c1cc4278750529328d10adedd792e6397209bd0ce6db0c965df029eb835bcd3b5661b083a4b46b9616525da7f5783793ac5e22c0a58f343aa7b11c05c4ed039e19a072549e31bcbc6bb5f6889d3c28ece7f091b6abe7fa5a2d952d9ac2408127bc46b773b4dedeb78e76bdcfd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1bd88eaedfb86d2f11d9db39d011b4c001a20a726545cca555df9b3ba46f032dff5a259fab7ccab203a50faade4db09302a5dd3bb1f0d854d96baa47e74e59d42e54b94409a2cb63aac19aa2c601d49821c7a0cfe5f612fc00b5ac3963b19298bd4a00eb3eb8169d06b2c4ab7cef1e3e3504ab4750da995019cfe760ed976f7c996df4a353fb1177121a7b3d6165d08f6fdfe75716c031f49572c2b2981a770180723a62bd337d6a8916447cc25718c19e61122b32ada40a3948d1dc12b8a2940cb16245330e721e251955f3d48c7ffb8d0dba29c552270f5d5971fbc304729b7b0ce405ecef1e38d42a3823ea27cb177e85e8da196d8a07ca9a105f4e6ffc4a857d9a3a03cacfa097d3de68b2948dc29b19cffb847d0f1ebed4752d4f31697fa3adacef16eca901fa058efdc7a70338bd1541e851009916cf49b79b593010986e4042f7855b0c5a4a3fa331209e46aa2c7e6f1f180ec4e1ea6a81fcec25bb2c7f212ac4a7ab23ccdacaf81ac854d7826ab51cc991a1cb602f13e0039abacdce2e565c8709f4ee23ea3b3b23186af7560050676e905590fa9f6b40f0b874fbeaff6a467163a50cc1339e16f79bdcbf0b1670feb1dffc3cf867312861053a2908ed92be30edbd1ac1b3376c5fe7f05e27f56d72b08e7813c597d58ce3681cfbf943ce086db930f82cf0cb6b131169cdb8c57bee130d30eca2deec14dc0cf3b174"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57b03e4921cdc73982de748d94eb594090e998ce4ae520cb801b881a5b6ff9830a28b4419e7b3059e919bc0b27a5d020506f2db02c504b7029aa21a8be8a225ca9acc9472912d00348313fe856ed032dfa2814d88d7925c1f9e955e8ff4fd175b96e8fac7a5c6d749bb68073df1db6dd4b54b9cf87958379e327ea95c2b68a3fa8bd3aea08c34d82d82ac4e425fac275620d29704d3d636a5f6153b4b10695af831e694dd11bb17f72dcf6e72d807d7b876bcba57e49040297a417183f92827c449fc1ab162fc76520a74f03c979516f2ce46e2e25d07744ed93848a2bdebe55edcd978ac7249d0a61cebff1af4611a163b810c29140c93f05781b613fb046d87302ab6bb9ec68612c6e61481984f09eb3b57a80866e7085deb66130d24aa74bc9d9b44d7bd93e979c50265baa9a2528e98cd42668084f0c6d94d3740aaf55b66183d2b899808d418eb18e1490c7fa1224c870d9236e68ee071191dffc084a6590ebfaf7d54bcd2c7f14660f73fdd57e8339af64cacf159081bb4ba2a158b0c2e4795ea140383e4a0edaf6126721670919bba3fb41b4eff070608d364c0fcdf17c983938624d2eb7244a438a605a87a45374ddc6a5886a5550e5e2430a29b956aa24f2a217937ac96caf55488d9bff9956f41dfc00f017b9b53ff2ac77e69447ff53d0211745f0e9f91951e6f0b148f0488f88f70906c4606b47a6e6490be868"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b67f4a92151f8959f87b8c02ef7dfcab2a34f0d185432b277587e06fd14d00f580f66453ff4bf9e82cfa4fd399fef899f868d573b4dfc75b1b537a3d899e8064811417b5df57e02f8909b6fa45aaf40793a7b3ea3bc7941e785cd47e38c941d3b5976fcae196e6448646eb7d3110bdde27193dce9a199137b33374390bb6619096d219713981cbc199eb427de73a715f1e63e59c512c74d386b60ca716bb96646526445364205dbd102e05ef53d552ff293603554de2199e470e9c5db18aa885efc16771be1b4af38ef6a1d08282554afd5fca4f7282dbb07174843778aef52c70503a97b8f29acc72ca9becda1bf35ef6888c50905cc49d9747cc244eb3f023d822e977eef43e4cbea91993a0f9c9698ab45b21f2cc6408a55aa370662cc0e6238a2c18f77cb3db699828bce9b7a782b5448fdd0c1f9cd18544386f863ad07531385b9a2b5619672f706f22ee3dc9a20658178347135e9d22f141c0b759c3926ad8dcd9283a19c77791324a94f9200d53e0e7de40fff54494803559b0d72f5bb8f8a7903c8586c8e179a1787c8653bc54a3d1fef1dfbcc8e6f7efd460e5b255e759551b21dd72d4c68a73be8f7e5e7eb94cf3790d0aa5a2406e53e67b4cd32bca5d57b463821441b7d4feffa4894a2b1a1db26567256051d2f195b5f8e7ac676706788093b222e5617455a4ab45f291ed2382f12918a4044a502598d23b166d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c69503be9745fead30b4fc7dce08d8c6a0178754a15f805dae455ffe8f33262105017502235f8ab25c13d63b42703d9fdc272beaf4f9553f62832203dc1d45915d64032496749eed244b798580e3c2594c0cf3d100e9c600912dad5d777708b0a883490b28e5922c6061458f57730eea9c6b61c6c6325a7c46435b3626cc9d7d33142ef75551a12e644b50115c4feca83d69406482b0d7d4e5ade8cc8345575d61cd7cb4e9bdd2efa07d2c998e2a1c205b54445ccda6d54a885eeae9fea3fe6fdeab8c9ad58412cbdd2a3ae4b8290bc792bf64a7f36f8574f22ac8839a7c4fa68c23d7bec8638c08cc7b501ff0652b272442b89692a5ab724050add8cbf9b229f50e75ffb88b07c29f3193d1c90bf4973ba336f70b06830202ea0dc69fa965f4bb05bfcf9c1e896dc832c8d4fdc98242ef26ec72df311d011a7aebf850efe276fafc7ebe3b7de020863e9ca1a3bce423302f47487b17e24ce9305d98bd2222d27404ea8a2d25c688c85d0640d96c05a1c2b49ce27abbb7ff0895b3fa75a3d649a2e14872a2919004f6a1a833b8a15ca91db08d5a6261f63fc3c0cd8e95aaf78c328d60409bdbcad741c9858924a844ae55a80e1ece9e9505ab8f301d9b8ab6a5d49f90fc46c09eea0d3b0ef7586536712dc695b2b1053880bf6282344098d6658a94f9d2c81d931cd1d35441e57f1c24d85150ac37b2280033f16bcda1c4f86c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "727998d4a172ced0ec2cb6d2d49f766837c1dfceff9fbd35dfe9e357a4b9b143c4d53a8214a39000467bc8c88bb3582633d471fdecc58c033bf3f66a29b893cf4f6777f58841e467b84c15c2c5007e0c322b0a51779490bad134e905e83bb90c13a2f0425331b97197d6485f2c4c534e3262f78dbda5a5adae63901504fae86d25ab579aa8b1a3f2451d1b8a02c2d81f425689c34cc9abb8d035c0acad50f2d166c58d1fcb75c251615e48741a38831da8124d821b2a369ebbf7c06cc5fa2c78950640274675d1ac38530814c4b0642fbc895f966bd7bc1648f526a611a979df403672b29d37786281311d9d537a9faf74020b8af03df4bea590463f31aa9b5aad6c602642d012b65eb70122a40e93ac059d25c6f7ade43ca1257bbfd17b29b1cac1ab46aca85213c9399e9f3c2bce25b9709ca52d9be29890a409090e8d4356aeb85751c3a8d85a6f49e498aa63e48f6fa08754711ae2e849dda0a784b29ed39fbc92cc54c2027b2912572da0242d480c2df0a347ca68f4435405c14fde7e07ab61860924fc9e2f0b123a7d1dc9505cf9219ee2e5fc0e3a40240cb9398fd5583b48971842e57227adf50927c7b2ce06fc52007920582a7fecf2a5848e8aaf44be1fdf01b39e833fe2e6874109154d321a00218c37e368c2cdaf2bf743fbc724b2d4ddf772b7dcb5c0f50aeaecca9e0351b93be126ff4f8653df60a21765c71c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0a0cf5f50cbdfd0571c75579da50bbe83c0f92f154534ad5682a5e4b5ea7da1f0b6967ccc0e228d03a0232901493954451713c76daf5b7a550c42ad6e9dcaedd42c6212c20065b09b2be9bbb6d8479bac00393ae00c82313efc6fd3de3e3e48355e232be62c89ac74077cac1fb83dc7315723d879c9282056ef53b2ebd2570b517c498f587eb23b7c1d84cfa7aaffe4839d8ca39acaf2156425ea49134b41d4824347bbcdf7798f7d56009e8def5450f9519e3520e956357f11abf364077c287ec249e54810757300bd9b5c4b525a998b19247d41301bfe3f01ef89356a7322d0b3effa08c7b6c996194ae6b154ab33a97b9b35523314e5f5c8bc130fe2504fe08316449f46dec845395edd389ee5672b5e8e3360bc54a6c45d02b04150e86f695afb6537e6d1000f8e7c65cc0a2fa1fdcd8f823e5d8d972a99fad864b9a7423d06e8d4f5421e439d54e3d250e807fdddecdb65705d98e0200026e1d46ae9461534361ca41f6c68e126992b177d9692ecc7c77a68df09fc74159d382e9943ba85a62825f700ea3c8010c385e1fb2f4c2d1755c54cafba826055c0a4d2a2bdb2093e0b8f6fd009d448b09806ba4a3714937c39a23370e99f96bd293af486674d746faaae76bddf56e43f1a0218ca64891d0cb1ad8130ea80156a32c0873bda12f372ae58cdc2766bed53dc27d81e7f16487ebea46893818b434c7c9ad4e1a60dd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5aa65a18332c2b515bb70c97059bde6c6cfef26b9c7d874575dc2fdabbd1176199b208c3ccec06bf52324a0cf13222add3b65011bf54338e139b91602fafde29d01df109540c057786a20a211283bd87b051cd0c226cc6d5539048a9622105379db015326cbbc1353da1ee4575b5635784c67dd9fe2e464a949f84f9926f7102f92b2a3109a77785a05416ac162179ab3ea4425755c61c5fe04cfbf735318415cb17f45c90f86b3ac7112698a0efe9e903fc816ff08817e62d645437359781098efa9b34c0246b3bf43e10233d55b334ced1d9a590fddd1190b9eaa56855f464d8152a71eea9dc4e9a82f021472b84f34b48fb418a941995ded70529149acc84d50880a8370e00f7c9817b86ca8d58991fd517e3d1123cd46e459c13fa1b07d42c64e32e1855225739b4a29d28e0c550db2080d1e41451fb1eaa55cb69c7d7ee0677201bff841ce0d59277b09daa91aaae042ca730d2e835371d6e1551c72fdde0466188278a651178c769769c4c5e83f7b492bc01c94dea2906dcefe48473da6e00b47823ee1440af77f058b0b3c53787f26ac1879ca0ea0fd5fb4dde72cc47f22fa0897b8ebb0d594163201b6d1e565c6a9070abb42567f65f5d252b1ba537c496b2688e1dc864cffb8863727e5311daaa0ec54397d725b6fd88c5f10c76dd4878a8981d864358d16764d82915064c1df1d14edfc0217ff13a367d8c9634ef"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8901dfd3f87f0a88bd64a6dca03f9b9143c12558838d7c4e8e8e7683f0a5fe4d89a6e92898ae653d7d54ff54f388f1fe6b3d7199619993fffbbf239a46bbd76573752a20fe645abd67856980c541ac70cab0f61bf08d35230d1c3dac05d2a109ca3695bac4525fda535baf36263856fd5060f95c9fdbd84c23f37fc8f00d9c545d491e33c056b1844b68cafb3d380563a9d24bfb85cfb871c81522cf70afe2d872d5cf98fd857abb68e14144651afcb52d3aed6cafbcf8473d63aa37732c3d6ac04439e0bdeb8708758dbbaef40726733c65a0714583ae97e9d61c7d59fc03cd5a8ee0201bf1e20c75c4d3a55f7c959b6e6b37168a5ed527d50d7ab4312ab3b4b20a57e8d4e1393abb77bd898bfe43385477850580a461a663f5ff587c67b33f2c7510833de38c2cf6188e52e6414884d10131fe66c0576cd0f786a07ec47590d777a9ccca9b542aedb4995da75878c7e56605396538972abf182148acc26f7b2f7b9812c09efcc7150f31e661aad6136a6148757a2a06661821848b2ee0bbdcc158fe0d7063a7cd7e65a519a0e97950c9cfe2a2550aa1a568b0cea62e16a9f96d75d49e4b0db0a9e6041de753dcebb1152f51b8140bc3e567c1fac0a5b37fd9ba91ccde9bb8c9d6da2b82f22d10137e78de24fd2ebb7a720d55cdf5e8375e3cf903aee907ba530d953c52f236b55411c082fc956b16a31a321d714a67e82a19"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "977e0e6d0d2153c34a30178af3fb99efb9edb76799ff0b1669bd0eea5b5e87150e84e5313a921e074108cc2ae6cbccc6ef0e0219af4f226a3e9e57f0a162ed209feffd5a89e65716486bcf5d6a79bf926edfacda0bf4091746345fdfa7d688aff90d9b3570185f664d94e5216bbe0de6143480d7051a36306ed99599631efb6a916e61cf49a03d10aae2317f758f1c4d1c46097e161a4ccf7d1029b4778645d5cf5e8d022681db62ff15c3854349727d7f65df9cd24f5cace6fc0fb131571144d24866be5509332fc77c3823779340c95637a003a549b3a8e1e90d8a3502e42cc355391371b09946a2274861a558d90dcfa12e1021cc1b98e96796264f7bbae5f6a3080ddc498a8e810e112ce6b6bacfafc8326e92956618886e2d3d4081a54339c895805d9242b7146f635af6c1f17ae1955f7fe49f45b148b65fa7c616cf48b5627de9f08c609575ec4581f0062f1476076b359145857325d19c0c22c30ceccf055dbdde9b562a1adcbaceef8429a44f62fb8f24a512d6ee70499bc3921f70831b57a15d7a3c023b18b6febde581d7ed5d3f2d587a4af0a3ed1f87be027a1cb7cc171756b170a65ae7a1fa4da832dffcf7efbd37cbd4d98750d437377cae209c51c049fbc166e381d4f879cc50a5dc3b31bf7d693c0d613171eeaf9e2572267236b08b655e4a068826300d7d92d370bc348124e63f8b871fbab0b2d85303b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a91c56df4ca300b638c505771bf7b9ac3ef866ef9b16979ea0e5f691f5c91b886bb4e3540be2eb3c5dfa7a6ec11c513a62036766dccf50a36c058a9d06dbee640c0830bef3e50747ad7de9dda9810309856bcb634043b0907b7dd70f50f49b8fa35e2181c4a7d386742639f049a758b05e8a66b5f41756909d8d7afc31f63eb4b03a346e3a79d3ec22ffcea5c01632641e469c441951765eaf41c09f5c7dec10f7aa0eea85cb991428c496b67880b3ebaf13397878af0264a4276b08d85eae131553c6eacda05c5cce34ede7e5248427e390af8434e567a8941aaec4ed57049df79996de2cf3355b7b16531e0bef7ab3a3d715eaef6fb19d5e03c755cbf9dcd1a1d8ea756c6c75df8080963a9bfbdcdb551a53a7f4ae14d9469d93f92a8a509a687e96ec567176bf2c0766f03a9947545302b750d8901beb87acc83b6eb358fc1b82138741b5d33aaa7b6186a96f78f28d1e83aab719b6f383fa2e56062dcc50aafdbac7877ce8c2cd794e72d07e6b10555e06ecdeb03ad3de8f45a65b4a654ea3dda0c8bedab17ff55768ea45b17cf66ed9c00c8156ba86c5ce0228d4e5996b0268f3e19c75f14c34a3327808015e46cb347e892e88429fffea65b295eefd007ee77b533fa2be245af0bee8f175b6170c3b9d85cab02c40d15c6aeb7651c325caeba8fb17bf177b38d0a06abbda7030fff4969c11bae68d0027a79bdae1f340"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "563ccc0f74bc3c6bd12af3bfa0a290244bc017a3b6c452eb9531906f5ab092222dc5eedfb06b129ccf1eeff16d5f3a241be62b671098393661ddf88d1ef751e5cc46d90118334961eb989b8c6f1c38f806fe636c1f8c1961604b9cb3f4275d520b7f037b4c6c78cc3162d6cf3caa589af31f77a8edae1489ba86a2b36652a84a861e34f480783ff10bb3c9d1bd0794abcb77b785a9d214eae906a51e2d65fd30ef722bbc687fe8eb43df347f9ede204ceca53f7ee9525b5498d04233df06631706acf65338a88cdcb9201607ae6f71f830653d6e3d320a362248617ebab100c6450dd88cbb01c6e3bdc183b8851e2cd2780ebdace96eb88d2c5672b28d9e77ddf9146b6ca17caeeacb472840d0e965a038e08e437b0f8a1402356bd6305aaaa9cfb8fea1282feb103cf3e2014259513f1f43316a5610d767398eca18cf3bcffbb1ae179df35ad4342d89bad741db6cf2f0fbcb08ad857a738d306c651e6f7eda3f9d0eeed6e6d11df2c0398b2d3e0cba596fa1891872021c7fbe6c99e0ed545f147b093397b2727756f1a0260a50fccab5ac17cba2926ceb3495a11db8f1537ba3530d0d428644ae8721c67baf87bd2788fbde87c7c907860c277030d3141a65c57df025551ecf385c12da746ec7b594305bed042104922751eede193dfc9e1c9fb4785bfc622328bdfc5607dd21a6817abe4c941f2ffb63657f8797e3c84973"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2a7439f30d8d4600ba553f9100b26a2c5861d5d5106410b369b94801c262d124a262fb17b448bc14114f1dd5c24c36e0d5528c4d617093df934e0523f4adaa4e262c2fa1cfe59db2f51336c627bc2e2a11b3022bdffc649de8690aa22fb6b96f90f7573d0fe23ff65d95c81274543a01ea654728c57b64c717f0767b800734aa84af805fdaf2d04946303c80286a487b48638b8972e49d412d351b9101bc435dac70f28c78dc1d79986e9a8dd64bcb11c8fb3e90d2c036c5b74d22157be15ee1ba291b97606057a5926b84eee13fffb3c8ba245f153d47b48d836828d71a5bcc02ffb12fa7ca66b576d2d76f38643502c4e529605f833b1d0af3bc7a58f20b5fabe63de399693b728b3b35db26ddd52f62bf6268c502cdffe883e8485f4a7c60e438e1bb84070c7adbe021a6380989a76b72faba576d20c4333879700e5142522589dd2c49e539b7d49f1293634b18f594d3f8106687049cd4093f442d34654e82f20bb8c4b252287cda4d9e69223e22e95a717aa5008bfd232ec5e2b85c92ec093c6ec16a7b043aa5a86c136a38dc9d1c7fabaee3af9f1b77fa4f4517c596b129d8fea402c856f041af5f98d235ecf2e6894798a857fa3e295a4a63c4d5d7d5a5d3fd6452775cf512ab4bbe7355f71be5c07449e0a8345bd6c3960a999c3c3ce6681071f5078f331619a9f5283e01d184782b7e1393c8291d0c409094d45b84"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5276a6fab88bd401b451eff5d1a669c405225e90450584c5d6d2e4c05f715249900d10679fd58d736deaec1cc26b1000d6d0e60afe374981790dc850af0ce22d1e51946605783e37e8a2e899a607fa2551fa76ea9b20780b92e9b263be76e8b1da9a725e58b20a34e5013ede41c8601b466a7d693ea2b903295f0768fadef5c0ec3f0c83f659fa2db43fba1986bf3c6c7bb8bbb851905e62c4bf9b0b8f9029edf9f737ac3060f252cfe8c46b4bc4dd58f2ad8bb55a89a0989d9f2d684ee4934c1bb6859d17f8077275ec229e8bea6ce9e2d9383c2b89109380ac6335a46017bcfc57d500e5833cc404fb81b25f0b3ba28d71996a345ac8c9869167521daf8af6c89e130bbc27d55869717e5b7e3eb67f1c6912c6e9cf262544ac8d7b76ffa24bbd078c12c09f0b26e4f87aa227820aeaf17102180d272291d7c65dc40914f42c026cfdd5bc330b8d0d5c948e0c93f4beff299872f65da8790a9ad33e7a3232220b684cb8ea87d6855aa4c053c98fd20830dc89f66dbd1046f816405490884f97b9dc0ba5b5c2e9c8c0cd5dc13a156edb25ac384ab16bd5921008e823050b166b3f727efbd7f65d3e4fe741dec24d7e95f6ba707d5315c71749fdbaccd16b6e98a0cfdc456257878a2138ac754ecd96b76b9b63644c3c40a31f5553a0dfb5ce7c02ac8b9875a0a24b0f9b655502af4d5c5a8d714fe708f0e1dc188369a07f927a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8e96d28c66d90a67a5f09894c5b2db57b24cc18480fac7132ccff9b0b0da5f3cde652a919a7d20270083bf5da9635cb1c1e4927b8a2238e00c7e828c9fc251c8a5d326fd8e46f08ff6c36ce4b0a8b368806612e3172bff7534b2a28b365e4f74fced400efc93c1d4adc7483cc270b9d1f30afc7d25430b36e2abe82e3220f040e221483447f6d5b153eeaf137d4b2f5102a07e4cfa336e53e71a624236e3def136b479190072a55ed97d15be64bd92006623009b34cbd5197a3d57318c9754b90b105b3fef38db1acc0b8c3325581a1521371500bea1c1f5212d95f3def741d96e3d5387c4aab64b0a0f584b33fc00039e58c526280cf1aabb380c66d3b191ba11ce20b73944d76a50e8547fdad2d3486918a104c4622a78493eb1cec2ae748701ea5329d67814f581c8576149034e655c9d230dc72d93df0d37a0a4b23178220ec2a22dfa95f99ffa650d55d73c09ffd95fbed23407cfb5042e93a2baf9074ff85cb0efd306e5ec0813df08677dcb75e0c067559760d310a17c7ac0249c5193ed1823821b210e100b130909c2296b2cb1feff4e58f58065e8321515f99295d93400c133e528e44e659530e17b8b92156f151e49574774ff3e05038a31d6ba247efec4feb0a1efec266d5a90d0643fac6e390b37b26ff6e83c5f5aee67bb9c229b8362b50f4a10bf37d47df247841a28dd20d6d10934f6204c8681df0cfb1816"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "685f47587011d1f43cf865c9ef73b28f633f3a93aabc67ec69b6f3556b78c86e6b64409652b936d327bb1dd2bf96ece912d27b08899d11aa7dc9a27988d8dfa61f6ccb87084e22425a35dd57a43be80d508c04bc8fd18bd0348c790b1b33b6b84d9ddbec598ef50b739e4ecf1127457410ab2410e3164f313fc185f1d07dfecebc543eb5a9ac30cffbdd56d183c63efb7e288677492aebf212241a492ee1a736dc2d9e31c0200630d00a42b808d812c660ae2b4700958bc7f2f8223dc5ab0d32c788be311170608dff9378336dd152f4705ec687e75d4beec24c9495d801c3dce72fd604c3ebd50f0b7b6095f54cbd6c9b7a167a76649fdf98d627ed94d1307463430e4ddd99d4f79221fd0af76f42d94f5f472daf0faf63d9bd8649cb998f7be39388b85b5e0af9a3cf71fc8e72360f7efcd3e96af14601fcbc2d019bf4cb62fc9d892b070e191d7d68553a01fe04a3a46fce2ac45220e40f4033c07ba794bcdf31d90ebfeaf2da93f2bb7f51e58e884ac453e2274da963c60db990fed394f181f9578f7165b852ae2a9bf51415c89787b440f358e7774e6c8f2ae0a52588f13334cafa9f71c4262016e6995a76c98d5afe3e62bc8d23bbf62d3f2a3ed019165004a05a16c074a021b1064909c591e84c4a547c90de53e2bdfff68ef170660526708fe788e4b1b98d136295113112ec13f87ee3ec3f2590bcea4c34dbfa6561"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b68c793bbbc11aaaebe1b09036cdbb4b754b5d18858127699a1091714e6d07687b5d9ea9ceb4d937c8c09db1f919f33a319bbbf62efb506aeb085387632b9a1a016061f0ab9aa2b717c4602c5996b42e312f04854ee21852ad9fc9bcba137f59c981864b608d82fcd26964df05832983991cbe6bf74d09d851f95d13650994f56e8fa3204bc8685f16a0e7006918230a30f025547834145774758cec92d25c1b75fd143e4166c255aecf9af8189b90bacb4d08655d861b0ce2d58894f00b6eae3395a1d692cf7091f43885ce8220c5a4ea8d312625b650377238dac43da5b8ffac7420991d00b70453fcf633b844fe630e798b8ded1f27bc170ba0e7565a85299158bfd9249bc5d006f3ae97969f18334290b00c284c8a61ebdb1bc8c78f913f724f308c6f34d1b36ffef06f09a2ff5efe4e0f1cc6b16db8690ef0dd07cef88cd2b56c25cbc76d6ef2a0c1c7bbb5145eeec4ead730faea578f98c6fb30a4751fa15dca5a09d353c7afce7d572b8c725a8cf82386a3fe49c4ae31227c165a93fb821a93b47636170a2e1379ff57bd4ec495293eff1e0162ab6926c787005723fc58fbf3f4b23f466eebc1916c3d2a7e99a1416a06a3753284f02f4066cafdb9f6cd739fe8f34e49737b2989b37c4a01ee133fb41fefea2d437f4814f5a3ff433396800221428e420692c8d70271755234bfca374c43b331c20e3d8c77d11863b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "530e5a01bd59e922ae4ac02a57974759da8bd978d6331bf58a522460a4cea7cd3e78c76987ed9bf39f5e6e0a0127d950c3de95e3603fd9dfa9d2f8daecc8f84ede2dbf99f29fae1a73da64c6ea602a90a529d9da1d8b1c2c1575667a7ffdffb8347dba3d13174f63c387966b3661429fcfe8da1f3e3287769b5826be0ebc0f6bf04b47cf5f0e6d9f494f6073ff7533131d17d7ce859febda32f8c639b9e2a7aabf0e82a3da62aac20864738d215a862c984343a639d4caf91fde8e4289bc23c65321dc387d8dac38765e4a3bfb1b7feb6360fabb62b97efe71c9fe789347187562ae4a6bc35c6f842f7e8f1bda9ea31b39f58340b352ed31745306c4cb5dd24fe308bafbf1e654bb8898333ab6b2fc96ccee80a50c44bf8af4f77f2c146ad5f552b893c2a036e3e7e64b1e6f8ed152ed1ac66390b1b828ea9c43645d7f36723c111cc56a4f7c973c0ff99c460e3f82169fe2cb3d30e518a38f1c1e2bf4bd113b85a30d26d9ab03a803ed4cdc59fc7f16f095a84d663eae4a3b1c3aaafad19c2458528cbf37ffc46d5b1595422210c9378bad7ecfdd222260f12a304baf3113e0a20d40a1202de6a2f5b8d23a8bb2fa12aecfab4d8c6c402ac417f6ddbd27e17f4fc3f5349b97f5363c9f74b5200d8e96e1d38e08dbba1a68b8d09f115d0bd277c39bc02ecb13ec6ee590d0ba1ca3effb97021a4802e2d1ea47d58cc494a68f8c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "26bc4df6a3ac430e14349156fa87159cfe3be489c4f4a3bb3ab1e9fb6a24224bc08c8fc68d31c2dfa7bb1eee34486c189cde443569fcb046837278b85c2a3dd5d79a32ab234d962d9c3397901dc2cb9a9f2a4efa607b2d664974fc0ed8b21d83b6fc26fbec342aa000e798b398da25aec7f3036b4bf5b996268ca306497d49f94c29612fda4013e51bbd5f8ebd7ed6d3cb9651810f1953a0a0d91f21d23d2193d9124eb7b993b92c3f39b4b2ed75b9a6998899a0e627685244d692c9bbfbf57a32d2075066e26693b66c2d6abcaa06349610a30b9e365bcb40563232f5a618975d70b9ef3d2e370ebcf371e840400bc59cdb8ed8816e21295378668349f9b6872ed38cceed565b37d67f7cc53ef3048b4dae2ff6e6ef05c54f08da2b25af6ff8971b1e9b56eaf59312a82e074fd03ff310d2d063fd604807c2e1c9d8d10f1f63ade7df27f0894daef9cf713bc1900b8e9697bbd19c8ccbb6f7e608cd751f6befce4d1672190beac40e81feaea5987e8be14ef53f95af53a766c864e1e20922d745ad3db7fbc03b0889525a00ae2e748a9675628439b5967ee7dc3f3babc24f4497744940448806af9143b552a304a25f9112aefaf7dd32ba9cac33bc8c3e77f7133ad325cc83a10a2890c5ebe73cab87e756e16d7f17721af90c927ddc53d448adec90932dfbfd28c031e497953f1b75d16fc59f44f232eda3c6d9a05d601b05"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "62f48629c7a24179701c9c7dd3ad6573b147a46ad95364fe9b061f1a7a53f22ca9c94b628fb114ae94219eb443ce43847a948c04b9c9e865d06a508eaa53ea6e95bd06c0d678a99c68eb5d637e1348669853ed27aaf9eac212e10e63db88ee4ae572d71bcbaa9559ee698af1464e8c7e06a6089fac21e0f44673b59ad886870556b6aad683457ec4c8000a7213544de10d493f70a67bf768472c06a4d8d013d246cb6301c05d251d06e396297510bbd802adfb16c44d5667d49784f390cdd51a989227db8a0547b70139cee85fb98405157566f48df9bd99fc93f05164a3806a7a73225b0369b66b1a5b297184ebea4bf6e6d003458da70655aa78f936236dcf096d1bf2afae7552b42cbfa127343ef081a8a63cc65f2075b33f01ebde0c4c80306b36a70657becca450f3d720f5c0855a827e4d43fc2a12512f5f19301ba404ec46814e1bbfdf81e41dc03154283df7a10e6c38a89d2e1d1c43a71cf19edd6e4fad846ede85d42faaaa84c1b5380be55933200ec463f149915d65321cbd21ffd57c3afcfb84832c9b81e654f9a402d9c5b305fd3bd042e99a33dfbb4e3d6f441ad9646bbfb8473c9c01707ac4cff91e7ba9d5996ed795a1d562a174cf117b22ecce7e679e474e1f7e2e305818058aa85a80f87efa5c2877db870e4d784a3446802339b9f8e1f09e6eda2aea8c447794ca16a814bdcb1877c29a5a0e99243f70"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1f40a467924354f3025b37a3c5569518bfcc634350ce3f82ba8ba961d2dc9ba4206cf8b99ac3838e24c1ad80a8a967a7224ac47d3b3b141bae6b6ac34e2d5e1c65305038ac88f83e63e1d59cfd3db23ebdd8e3d32ac2a8c57b16c367540e2eadf9ae41a9fe284e3b0a9514557d468d17883cd55f741fa03f4ad166cc9b40b96eae4ce3546264582281562357d66942d09aad87d739dcfe6510295d08189562276a0cb11b38a32acd0b4372fbcb8ab19ada423416a99173205aecda49447d0d000cfbccaa8ed870416a1ba8401ad61cd94d4e99a98c4789f7af5afb24685fca9ba12bd7052f69517b3024c3b1fbeac62ac04a4746731cfe00948acb95aee3ea746776a90c7a4a54411432adbecd6bc239e7f629f02faa24e55f42bc15ca566d7214494577611d173746ffb3d59adc68fb3dce801993f779a2b6cdc0c10cdbfe5af0c99a2edaa23dca3152585221cc17ddded8474dc77954a6c96c5f903d179bc00603c6e0c9b809ff31bf31bc4d91c1973d29a0931c8dbdbb70ed09730f6c8274cc43adb64004bba369b1f6a9c7be6a49ce36a50121c342b1ac60ee51e89b73afa1afbe52bc86667a89536eba90d5cf036849bc2c26e7c45cbb7f919d3c7d139a3c7c249c0b8943ddb1da3bd875e5aeb917a9730cd20c58994e965f7dc35f26d35642e08210a82024343289a724709c9eca3a468b5825f6a13eb2e22da584634e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c3f770ae10c10780d0ba92c89a1fcfabc248c0c4f8cccc3c6fe3e2887b543661e946c0ddb982d5b7cd89ae430058cba9fd40a321641646e590df3a2cf86b9645e347fb368c6ef5695ca8d2e9a9a327fdc75ae0d54010f594a050c9be6c5c0f60a4ee41f29191f7570f6dfb2d17d6b0933a22bf7822f520b3cba26419de1a91e39fbb12a84bab08ce9b1deb10b56e576e7be5dd9b746118ca8c8d991255bbcc34f9c7ba317f5e1190637c585f5a4f10dd037a498176b7d84d33a0370da7f834d443dbcfe1e5f502f09a0ca946eb4e6373dce383c9ae8714a5ae45ff555ba407405057d60dbbedb0b9782608a92f0710547330e842ff95533537e01272898f7a4dad71d4099b372a504a0e02770efc85190e0987fa7bc49a3ae482905f47d23260a698842c1d94123c79320d042c8f39f5ab91c241bc7ca834aae345548660617d0d886d89cc91780e070ac36d67dd28bd48109dfd69f7229077dbf490467ff14b6b57dcc05c3e46fd8a2688f248011b539d2fd5dc2b217a0b41d57fe667b936158be8c91c0044c688e752566a383db0525b9a72d9059b9d2793cda58dc9980ba8f4c3557304d991d190c935e76a9eccf50953d04d561b5fef7e62b1368fbcff1797c6cd6768885c9bb98e6876d556b29a54e7e535df63be53a4f509f5454d492bc92be81d1bb68516e35dac89aad54fb10e286b012a0d41a04f75860c7e03113b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "339ef221a9520ce055fc25955bcca1c6565b3f889fa1c2b2f078923905e9b6e950af0977e5d81bba0d8e39a5efc6a21ab6e6c942ea872d2311fab297d550d8444848ab12f920affb56ff2f70d750c3fcc4d5e0e8653b9f8cd1bc1a44985cd6c62b43d2b59e1f08e6a807e376295fde08fa32fc6ab25e8668a8bbe72c8e0332f83ba64e635f1cbecb0e06d548f24821a673a8b4600d45506a2e84fcbb57bacb0c47204a4006b0a5ac3d5e2677b01ec4b1461e4e862232010559dcbd177ca1c327cc2179b8c62f4b84c2bd77b8115b221ca83a1664daa100c060caf945dbce345b1f16c4c95f3fd8fdda21c1fd274b548862e751641d0152fe2be7f14e168c911c0400c589a6ba879995d017a31535a0dea22d29d6df8ad7d3f7e98c5f3c9a6c1a29f4dfa50002e59d39c9a46e03350dd2eada66f087e517dade0f72fe33ebd6af0859fb16d945aba9571d8e263127f633d14c68a61da09cec82dd75226388ba86c3b9499e6e5ab1fd34797a1f9f4a054d9636665e7e54442b24edf93c3b9e59119e15e0bc9e6d390aa42f3fba32b3c2dee6e66499ef065c0a0001b489e56ccf082264f9ebdb9ce1fc0c2de37c9fe81ca2c8071ea4e79d0cf70bbaa64e4b07af3a57a54ed85bcbc21cac3ab32ff623f38cbca65df1afc17ab5f6c7e7e54d67f8fb768a8c4f32d1a69b7b0ffd2ebf811a72219a9b0d26778ffce5da7cfa53655d57"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1ac7cb7cc3dace7b4cb1f0900ad3e3d0b246d19095bb39c2afa0965995d5ebd42a4dfb6bf8931f8f641adc2eb34dd714b1da21c3c64bece5d77b3e2e5a7757fdf885ae0a92afc7da4965cc4cbd83cb5ae15d7d104d92eec701fe676a61347f11d0afc1bd4ff3cccec0ba5bcf47615ec6f4ff6dc5d036ea64aef6dabe6d47c2252095f45f9f9165ee591498328131a379cea3548f0e403d4f859dc083124b67171256cb54d6d328c206056bd00e3168b1184a8c21704ee9a4b990221c37a524579d0ce74703be382858d921a8d8afa1915d6cdad89c753d828bb8afebd22eaa0298470221260fb7ad9d3267fdf6840e4efe266a26e591b55bdc742a8605debe986ef689f5bc9a0c131317f06daa631712c5c33a604f5af4f6e023bae233a74dded177d6cfe42bcbad3a82468fdb7f60da8f4e11b61fe1c635e0a9ea0eeaa8265344a75e34d66d42ec85c817d86686d0d0c19d8419ecbb119d023b603ff48f22e39bbfdfbab66314f8f0e3f22e750b873336c37a1612c075fe7959b28dd39362749062afa4f57e08ec8dd8781f878fd5ca8707b07417adb72cfbf8fab72b21faddb8a1be9356227f4738f56f03212f4198c2e5ad0888d6cff60796be3e77d85425f666c7ad8a2c684257b922aaa6f1574d469a6a7f9840f4851454f5772161c8509877c6f3b6ac748a56a63b0e4d8e07942efeae3fd88d239cc5341261defbd83d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "272f90a1f74f89ecd56326849a40d81bcb2ceb3cbbc7f961dd3c2a86fa187137b913b034012546e518e8cf9c5b07ce126435675f1f9f543e49f470a9d75f129d089c6c8aff33d19e51101502ea903f7b271817a58abe086dd8a2f41ad3aea277f17e26d3932c0fc0bfc506cdd19cd86cb41670d202bff6d55f413036c94520a197c12b58c3cbea1e9599e2ee80e361dad7ca71439a5e000720d8b0c979aa7f37e5637800f23fcfc736f8a9f687e2cdeca40936caadaac563a1a66c61b6e65ea3a251446ff0c38050516396aecef1762eb1d821b5c3d1a8dffefb29a77a8f680d240dfa98daea7d514216fb9dd5a9aa4e47795e6885c876b446df905a690044a85e30bd19aac5a32aab889e12663e5d68c2af656c12815c27ca62d28cadd5a08ef7c745a8dc0271799362da62dadc289243cfd8cdb422a348d23cbc5f3de64d2183d3d7e30677a665c656f60a40c0bfeab92442291ad1d15d9ee46e437df9391600af277bb2bd4000547dc4fedea3b0dcec337dc6db5bf2a18ff8561bf1952eda654fbdb865b7c06ec316a9244708c3466ca5b67356cdc702e1713d8a1591a4407e0f8eb6185437c2eb3b599c4b530aef6ec5a700f49ac3720f0761e69b97b71921212a75bf9c29ecd97ccbffa7f636860e12f54899ce4608cb774f2fb99b23c43e7f12dc262e593ee941a1b987936c16ade689e43d56ae9ca02fbaa0d4d7e9d3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "90fceda255c8612798fe325acdca9c8dff227bb9564768155bae0187bf834cc4c03bf14ccc9a58516389da715e70376272dd4112150d678983878b5a3af8784d1302a04f7f3dd7dbc47e2deda258051fbcd018be39605f34aa0af4bdfc3015de49afa72e966d1667630992c31aea0747ddc925ced69407c64352bfc65c6aa48b0236cb0f9e7869f4a408ad90f2ee7ffe5ffceaaa9db1c778b568a3c6a1844d1af2051c81c618d3327c6085b18beea8ced2168921f63bdeb67dfee4ddc481f247237cd3a6e7ed0e4b6b0f2a332899ec6726cf90eb317b54375122d975868d785d2a99e42a3914798a0378ee293f6b12ea6de0370ba30dc8bd33d4f0c81459a21a729556fb02456a2abed752b3e0c666704b1b3195d269ee43a9de6dc224b69b2def19fe10d247d0554182eb998b49833fa874c6ce3a2148c9addba17db473c09cee1b910316be921cbb19b18b1c2aab1ce08ec1753080aeb17af2b4aa88a2b76474481bfe347c744dced8e7c627b4c99c490d6f8a24d049b7fab93a134a485127cb58b817ffa2123497bd4961722a1e23c5f9a275d9de6fcb0d0e94992e7903d4856a92c85696fdac207d4716896afabe0cb9e500650632088f1d1a13414aaae61ea0a13b756b71e88711c5a810b2729b7320cd58698cf08bf9d6d1304154a06f9d8c6f2e8362fc4ccfb9e261ebc3a600450f30d09cabd456eba321f21e2e9a60"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "af7c386df1cba24f753c589d9756266b6473ca3513b51cc50c888103636e9cc1e0f2ae4f74220004ab02c9f734ffa96b6db34556fdd27a0a6ced6bd0f695f4550d941064f509185e4b3dc2e71de6512725fbe167083650e7deba3035a5d7bab68050d2a0bb1f3ac6e13dffb43db0f6355cff1809e0450f629a99975e9368213853a1bc49538ece8aa64aeb1dfd837ea7e7ef54845bccbb8c9a409f262004f55c5e0a807ba3cbd6f3c43cf498852765f740c2c3e8ca8b3fc4c43bd7d28f6ec2d29bcb0ffa8e484b4d9f6f26c75add460a3b98c0e911a3ace448a66d8a313afc2c1abff8e4f7cbb30bd7660659da17b4c7e7c42764363899881d43c3fb306cc0cfb17c7b4d2c1de8aba3a43a5bc16431d8630bdc1338421c12d65b2909a87b7f82b9e8a3af44a28cc762f5b62b58737e07ed34ef550d553b0447f994405287a2542befed0b2eefdc552a6fb94e42e354928eec6c8e93e0b24ae6719da20dfc2d6a4a79086379fdbe5dfbd3c35e4ab219481f8a64d33ab84a94f4b8b57a174788dfaf9e558798a98c4fdb52ebaefc0f1f5617652de0aec1724e015381ef7145a15245917de42cdde83188dd12afba47cef5b1fcb064a3a6945fa4d7c6ef37ea582d4036d6cfb6621335747fb6473306b27fec80afffc4deb77578644637c9c3f2cee11a0eb641b491c84e9201fb2829d80e7fb0418ee0b44b76b7c2940edf29a4a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b986dd481be76a98b5a23ee494a8264f9cf2b37e2ce40caf5a7ceaa1b2a5cced5827a652c998e1c26d03b48b77c440733d1be048a651ea93ee60695c34b4642a88d848897d89bc4f285081345f54516fb9705c9a90589115ddd0587544ec6a1984a4a72c1b6d36f2a57218b647b57315177834169b29d0b57326b3f4cd1df7914b088f48573b6b32efdaa678118e85aa6aa319ffd85cdfc4ca054a0f04822d934af73a7aa4d5f51d93b443e4d8473831b31bcd9aee22fcf4a6234f0fd6e27125905bc0bed0d7274f0734bb1f51414a5151fe60e4510e158e98004f9203c7a711bb2057d0e6aa7066469f900bfad93c7f9b1eb87459900b915da4d1a59aed8393088d5f23ea4614551607d8cd0c0dd0aea75734ae23a75e93e50c09bfeb7303fb704f3c976ae573f363553e89391d6f65035c613831abbb5f266cf40ad5ec1ef2a4871d798575216606ad76a1634d78abe9f16d6b2cc4ae3e99d1d43ec25e93b52c547be4a30a98e5d6c180e44a7c2db4eb0247b2b42993552e691cd9eb22547ff3bc4ee6cb2033549b883a58d3f50e121a70d51070b0d37647cfb6227764ad2703e0fe5ea61108f4e7e3d3318fc87a9ff59b005e7a6d232243ae16d4420e9e024d3904a6e54b30815a5bc1f1619b4416c2baa464a61cefd7a6fe1442d4552238414d5b2ecfe531bec9045e811fea37f8cd2e7a8345bb309cf17654cee8884c1b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5b3aac4ec4a0db836f2686221ab82071979fc1f09facbdaec056ad60e952c91ac77efef520fcd6627f5510b04b8651fe73c364e5fed835b412c37e5dbd81db1bb86838bf1cd865132fbffda55ecb18b2c7801be854a06aad0e1c2f0b4cafc8612ce40cba4865c3ddee40aa43782833f5ce775f2fc1be9a4097b1dd0fd5c7ea1afbeae7577fd70cd2c019642b74e2c94a259b26c34bcdebcd68982fd745127d0974a6397b92e9a3bd56ef74fbcf89a84546daf1b97b85be46106e6a6c91488694e25f9ed88ed136629ef0409a0686745c94322787dbb0df7f78d9e3424f5f47b24c6bd455d7bc1d89ce95e0229041bc985a6dc49695719878c28f821cd1aaf3cff0e23855890452bb92de37f04e9bb756fe62e9e4529e5f01b7b6a4374cd504cf7882c7377a82dbff7b4b87184709166e52238792368392c25d9b28218bf8730e6549cc9087e28fdc7bbcb0b6fc4c752b0482ab3b1c7c62d64b53fce9cfd558fcbba96c39c6a3d50708c0c5947dfc62a764f30feb857688e004d2e4e2c21523231dfa4cfaabb982b449ef516f93c81b53ff1a8dec51a441c50cc8a20ee5e2a19fa120b992e58e3cd5ca57a30f17c7ae47c6e579a572a1d667128e4285390f2906b69923fba414c6c92fadc58b87dae9378d2be30ad3240a27226530cb8afc70292eed5af4037ae6c0c28684fe964d049ddad06305ea30ddae64d0a86094339a6f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c53c7b94b6eaacda889c647202d90dfecaa05e75a1b78041a08526869cf299a48b306577c1a1d1efebc7dd694e45155dc434e11627a7e7246aa0703a1592b00898ce4cb40e672d35ffe4aee140a6bc1df6d40c560da214aaa637d94b665763a7cb34e1db10d0f6772debc15d05bd0e1af359b53a521fd359c7e67e28d87c903254bba1f0c48f95a8e4dfdf09ac7afa2fd37a836e85b10c2cc6e0e0986a526dff679d3bd9da38e24e1a8a91adbe57f40ec7fc713792294da7682008be9cda6652254f0af7128c5c5ada8f7d5530ca4659b19b3a2b4b900776a9e06fd7fbf96a80320f9cf52d16936038e151e1b4928a0232c7d0d69d7c16839cc975ccba76bf435f50521e1905548e68302e35ba6642cabd84facdb0e9e5964ea683e1f09a12939abf306564bd97bf95f2fd266ca17326c6bf4e2a3f52a32fee4acb963872893f502e7a12ed4e97080816d34a112f3b5d184f7e0c7f4fa06e716fefa909ddb8d04a07c13f23b9ac919e10231e8bccd43a91d71ef02dce87ba6728e32e6dd92b1cfd96e9f3997e56aeb57ebed6b5f9b33ef1b6e4fec0410053339a5e7eaf956f262bb0ee6e828204627755a4c7bfd29e0485cf9d38f459b36f4783a6888639e0117b5fb72505184a727e2f3c7d7117d0cd4ccf621c670b33b709d165b68374dbd1eae9ac58da2826336fa01fea00f2a09ddd7a32ec83ba4ce0cdf4108241a7ac5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7c757f1a1ca4ddc9e1b4cac3b2166c6b8185de0b1214c48cf1cbafecb58147d5649e741af62736cb3945afc90e720b3d0d4dae820fe84169b2857e0bed0119593520f6f6d0103490526b9952e62ab19544509c174de8d2683722f83a332b4b2ec736eb85dc08faa8c76ce48b0ce51521a967a559fac7f39767ec4544f5a4901fc4b3c7fec298a843eda287a152d48ef75d1ed2464de565da4b82fcdb872633509b67c6b15be1ae709539261595fda30b6f46423aa74b4e12f505c2f160082b4cde448f59a70137aefa4fa4ff3f146a25a91a657c639e4855fc97c98d2f21b52376a881554d39a23acb938ba15f7f63f849b20465e1583c27bdb32952635e497d8f7321a2d45678cb8d5d3317f8c8a593c84aa0b767ec5472a0cfa6f7f4b6c32cb48dd11eaeafa25b1e195545a602f3b3cd18ac318a48743e9adc8ee1ee4134787d9de88b796340c46862d7c7ca97f142a28e915985308e3f703df70d88d72bc22404aba08d6bde21e2540a3d58d49517bf48cc0b3138d1ac08aa427876630199e11460cd6bb04bb9bb29210d9880bdd05b95ac9d769f00da72cc2f7ee20d3cc10fbb20490957022837656a69fefa83c5f0873aac068481921fe82482c05943a6607ae92c38806f5396387617c26b9f330c52384bc0e818c66465ff3650c1d3414d95bb528a768c82a7c076fa4050b353fa614a830bfb0c603a5d44a01d4d0e72"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ba1157f9b6c0d31a4c928e0c3dae7df2e13853eba781fd40605da2d2e71edbe65adac0f982bd940f52cd816f791232ae056d2553f5c82027616a65501a2ad1239d5c7b2b7511aae7c385d72f63944d1f1fcd9613ce5ccd192e674d22280a79817ab3308c3dff66c0fadbe9c0434f5318fcb9e1da396f11b4ba9e961de9f18e5b2ba3716d917e38de29027de43cda232f50d6ad948368a0faaf96f28fc4bea690d347f80e3ce21aa0aa49f445d3a4a1ebe5640f9f16e0b3d8b24405b1afae7d7eae6339ceabfa538a7ebdb66a4da5716dd3aafe0305c928c12175c648384ccc85e425b202e4cb34410f602a6bea3be79038ccf90af5357ae8ae842fd46359225d56371b05146798f04e92869c33c4166acef5bdf5b433c191a31eb4d4ef8827cd9bfe40345789d07f685f5d6fea483ace17fc8bddd120b245e7362a4516cfe4c192f3922bb9638cedd5e6958a6d2cb5da85fbae98ed6db16208336baa6950265adcba00b0203b669b62494bb56dcf3a417fe0f7d568c1e0ad1c11137d5b5736d344d0e5b3451721653c4bc9278284d9881ddf0e0fee8fcbb3f54db82747a0d8ea828229e09ce7d5459dfa590e4ad6ea2ac31dc72e68768a702546f0a98687a3dd45f2783e1fca8617d391598a6f9aaba7c829dc8f6e824cc5f9a7df39e209d12264205609d49c9958da2a3a59e4706ff9b119bfde600cb3a1127a75c77c77e586"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4614ec70586ef4c0e772106102b65652fd9e90aea637b0c808e6d28ed8aeab18ab750d5b7b5d34f918ce863eee94fae4cb67d8d30951db4bfadf62070436630a495e108f22c383c08107fbf7e363d5e7f7b610c134617c527027490aa2582ed0d8769853f9447afb7444aca2034a7e0258585c49aab54e6124ecb9f95daa507e86d7dde366c9fb2eb0430b7a990f1f055df4b3b6c2cb7e353b394723a1672301a43579028a34a92235cc26d2a15d5c7b9935c5b98a99c752badd0836e7902cde06abfad9ee917052814fb9d8a775516b948450c06d3e33b612e848c0f7dd7322e8b264d17bb67ef21177a93b13e9fd54b70cf5737a6aa870caa9a082595e70e6df68fab028e9cbb7f72e9d48c2f2106a98a8298dfddf575afb3fe266729c3346f567dbd3cf2fbafb82ae5851ca031c6e8259d822ea8623a3b63dd1de7c266c89278b3bbe2d3384ebd94c7557c63d08d290508cb77ed80ad97663540b7209ac3f7e9608be2db31b837154f1accfed92e0124fcd1c626d0d24db9e9c5a316d3e9fedf2c62fa55483ceea4c9c1c9a540d3eb8116422ac4229f3be8ddf8dbca64151590b3eef0411aaeb2b25ca03ccdb5309b28153515e9d343d5def471d5c67ac2ce59b62db6291b8753b0ec15038b8ba5ed0fd17050cbafebde18d78cda92f21e162ed72758f68fd50ad4b84b4a2318dd06279937db705d535d516fdb0757241a2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "904acef8f764eda821c39c4c75443f43cc00e0ab0cdcc6ac9a3ecbf21c38999d04c15a9b11d7ca9de9c221b2ad3a233f988423868f5aff0ace189a48c4452c41d3cfd0bdfa29d6652cca3685062fd6d59122a37cded790122d1f4ddecdacfa50605658f23c2013c31814c23230ca2adef7ca10239fa9d56a141cfd6c4f48eb87b08d7fbf12e9e62d27a86f82f229cdad78ec31d1146d339aa6fe06261823f899f418d19a3bdf817f086077d7dfc8fa1b9f96586f0854279795e9b72596f25872f88a0e00e91ed18545823f8e427b2b4dde5dcc110381b77d4e5c397ad9cda2052062123b32293a1d73f7b32dd98761b9eac5cca2d397489469216eed8e4f359471c7025f66e7affd79c8b34c611233a197a96642ed5d7ae4d4a8155679f174386c5a90c8265f7c73faf1d9c510173dd52a00877bd7afc995f6399145816a764e68838afcc54dcebe67181290505d3a274be28c9b2a4db3924a98c3c13121239fe46b76685bedf1b89fa2c055f01d4a44679231dd9b9a2c24fcd0b7c95254c36de5251e496db67372c1f76422a687267186b3ebbb6b4fdb7a93ab5ca9eb0e0e45cab2b2b9ca8d5c8e19aad48776e45b92e1baa1b4275d7a8355911693e5f791793bd6cc01fba821d4b4e6150cbb4958cd1abf7e3c9e11e19254e74d441903791c8db111fc40b9cbe780ed3175596c98546073e918daffba9f87a92e397b61b8a3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b6b03138199eb4e399d472be6d3504666820c52260150bd3ed24fac67d346de3dfc5b94f8683704de5dce5e5e4fc2fc3dcd77a3f60ec393d4b7b183e3d609d2ada0e6b2107cc84089acf9209183607b22dfb9739f40557192292f51723b8a261bbf1f1184cbbea65f6da8118634abca9b8c23fccecd74f14c49fc0c83bf2e6c8a6ce20d8c50bdac4c52cc0053480626b01b3b468160fc47147ebf8edf75860a5a500455347630983ada520e7317e91824fdec6a0d17a9001b9d2322c39c8eafe67ec484efeceecae83c875589d6625b20f494e390fc79816cb80f8f305018143a68b46572252ce0ae5240fd55e40ad76d36993cdeec6bd6733ddfe71ea6be95998ce53a601dfe87e35ca08f6aef11a247cea520ee7f3a8c703053ecc85f9b041af3e68254b4c3cc28d10714cd9e1b6cb08b0f9a9e0a6f902a0bbaacc98db90caade714a1ede7f132593794e25a469243d7cbac76f852d822fc823515419e6f0ac8a85abae42abadf274abc5a9c4127a375cfaefe6cad2be69d14dd29829b62c9f748a2f64c632bfeedba192d7b0d686bcedb29be3ff0589866dae5ac16058e0227fc98eae32da566851c023ae67f5de3d2eea56a15effdb615d4aa217681216fd42d50b255ddcb9ddec8a81b2e7e881bacd3cc0f1a5212dd3f66dc52994555a67ac5df0607cdfd279adb3cb0983c05a0117daa86b2da84b5ce146c1dd58115a4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a6cbc4959b1df49d751233e534513fba0efb1d4670e72f76ceb2b0aa90c1caad8430ba7067e4e9f4d0a274762a78c6a4c24c4039ea668e6e51ed4df98be132804078ffff469d00acad620fae3be3a9b46d89824a4f8a4a34d0c837dd6e612c05477c39623429fc34504524d6cdfee03104c6cd05ab2e01f2e4cccab8b08e905cae05d7f858a67a149e8eefbee4e7c01c851215a1c303666ec39272b5ba9870c0d3824546b3d314bf0407e33bbd8e7c04ac77c935f90b4679e8b14f724601a25bbd3c61e304028eb9ed0f974daacd5fc9f6feaf36237bbd413e16aaf188c65def2ab73353c9f17a5fa0d490598f27f3c7ec41bc2399436e7ba6a10b8f2cd6639c932c5f1f8512e3e25bd40d6e2776633828c2556f0661bb80ae7a5fd22eb50d8b617916b64df8e4927d07d61685a0c31b168bbd3f89dca636864735b3d6851ab6d4cefe983d7e765a251d26ab98c530d19de0213c7625a7904604acd68633d0284d83e6a559cdeee27f1dc308dbf23521a22a42739d5db8119dbc5d34220d1f30e62bcdd97808f00920f990edea9c3cd73ab659cc443e6c38a7209669176f8530699dc22ec02bf01feb4b2f58674c4838663fdb37c8aed415bfd2b79b7779384ad4555c62670d271c553cc00e46537e4d25fec955ca504351b7c7786993ad92335e19bfbcbb8f4441714523f28755b8cfba031c719d1521ac05e399092ad4d51c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "95313651a554ffad8c251bddb24dac0c4fab3544e82d62f7445cc6be99be3a5eb2b7f6b7db3f26b91795210a56907af9ae5306b73d6b8993eda74c44184385c4c0368b9d4314e05ba0f519dfb3959376554989f4e850d5e25cc0c091ffaf3388cfdbe94688d54e5ed4954e00f74d1f719d8f9615d4406882bf37f0c1cf8c1c0f2a6c7a82aab3a820f9fb241971cf51d15bd26f8df90cd3597d9ee31e258c53372c1949b2728559e174ae34726ff176d38055ec1bda06cfa96d07c4934f4fcebeb9d4a4c03080cee9d611cdf6af64f051c5cbcdb97d91fa2de5b92bbb9b01bd874e1e9ed2964982bdf4dc9140ea84b2700693f804e4ab9c6bccfe251964fca579879e2c015e6537c4889743da609fa78b155fc02548f353db6f470358b9c6e72b1c40cc41a5c3da88581663e721f02d443f22c9d8db056925d805f505c77c270f37c448b15c0ecdb2396cd790c434c1b9cf8cb889c272c0524c44351abb64b3b65194eb7b76241d971d2505c21af85588aa98b4c020e3da106275d6ad92ac77b383b463f712c70ad7085c49f4515402264cfe1fdd70a220b3a0552d71be2c8f1caa3f6f7e53b9147b42d4971d7b0314da97a20dac44795849a155a48f40dd10d2025189d5a2a6a176e44aed266e79a52713d8820a52893efd32b3d2f22509c813245a6df5fb9076a9340352167f2aba0e5d9af38569feb6edf485cb106dde284b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a057eeff7fb0d83799344e85b08e98410e2a85f6bd08bcb9c15a1662b0d4ccc9d7cbbadd7494b8ad390b58e5c48c9fead61091df7b3b59c721b82438265b7ba6e3cfaf3912bd3eee3a8f0ea64cb8696a393dbaf55959d7e516e16785d184847daac958445a79013a4884e434ee756de7533853cd219b0f5a4faa1133ff09d43c00c49fe37dffe0e3fac850c2d9c8e0264e64955eb3f78fa17795dd595c38324742ed77b85560e3dee3867ba4a793dcaf8f08faa612530355bd377c8009a08687999a76b5e4c74b36385a074e7316392457486a8679b226a1ecfa53f3666977af37e860e2c074e817b11b9dd4965d660074ae3c5016029a3fc210823f3f849a1c8fbeace5688a7ae7fd3358bdd6ee47d96c0ae6090360ba5601fa21cd60e71594438fb4d99b3276d49e506575d86fca9749d2db9639df69e15c89c3d555f1bb0c74e4f1ba3297b8affe1fa70d8fe5a19649a1f0d7f06804b0e021598c881b696d8a0b9396cecb61abe0e14ec200cde80fbf23cf521e110934ee7f33abd6355dca78f543d71a2b05327e0dbd88c9becb1817feb07f18df694e9312c3b4e24bbccedafef4d0bd99a268dfaba389f6462471eb9133a3bb49379bba80389105c5200b899b53b4f504d4dcaac174f99dd742ef574be0350d8c4f2db3a896e162e3058af5b919f40249349c0c3e780f685b113d01a1f4405cdf8ed4bd865adb2d1c3140"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "04050d0ef42a4d145e63322e2b20da48aec3bd58dc95a4658e69be740b655bc94ba3af9c5f9af76f023eb6051d9e2956ec963fdf64cfef1862bf15b4e896d37e884a0a23b60754140aac87d15583b0cb84d8f9083555ca64530c64984e3d322b4233b0a318ce33c57857829986dcfd1d23dfed79d3c59ffc6ba44052fe9f74232348b9e4e2d704070449b4852d6985609b3d4f5b1ee55d99612d23db06f5d2fdcabc0b1f5cb2f47187aec2fad8f385a438a5ad5d6212574c5b61f500a0d192d253968282c393c42855fbe46fd1e85627c154e4df999ed95d905e89278c23eeb79c581c9bd2f9252c265e3368951fa3270b6582c99d80f7e2b58a6ea278d98b295273abda89f0dda0caeb3fc7819673d5116ad16991563f08db0c5639e1fadcf0ca122a2d1286a2f994f646fe98efd35a83999915df0170094add1271f2e3bb193d5605d8e410d0fd0bb3e73f64295dec54093626f92a227498b6af7aaabd88ae1f057d30b61d5da0778d67cf45c65a3bee3a172039efe97e25f3b3145c47cb824b02b393d15f7b67e2167da3f2c740eb591f6a4a6afdee0eaf602fc963af1792cadc6fcf805432cfe005e2d4484df25c999eb484ffe618b03ee9bfd373418ef12af89b73ba49021b2721d18f5f9a024497dfadf201b7f6fb7415f255fd8534b62b2e2cf1e337a2270d6c286ffbadd063fc09f0f8e9880820a6dc7d03d2bcdf5b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "25f364b8aed878c58caf9b40fabf09d3a9517f297dbe4e101eb1fd840a82e57ebe9ec185206756fc76a53d9f045eca0a4d819e87e81fb0569804c3b9f62a54ace4163c9695849878ade09dfae4f50fca5c68dd201e6a1bc2cb0cf970cdeab3630915556b79a9aed7903a526288b66b00a30f565e53875f448ce0b3b5b05e3b6cf71df9fbdf248fc1843eeb11955570136bcb4f8214c39e8c12ce59aba1f96062d7ba5e63ee178a9210f8cc53965b62fc4b0dfbcec2cb35933c7cc1bf5d5e26aa63aafe3c53e2b8d06bde785db99dd8ccc981435cc9a5c3d69a75de2c6ad22a87fb9262099563a6a149ed96012f25e0c87ea90885734332d21a66381b5c7c6a306ee571905a21d95a2e6374a3bb84aed9af3cecb5724a5afe5126541ceebae4cecf2a91802f18ab4c6f421c9ac31fec7fb6b883a576e1d26b1671663df442810ea405bb3d311b795dd8292b093e5650196189f83ae963623196ce850130f018eecf9a933c442f4f0f3b8067e24a50d363e4d10e2f254571b3acd5c318209c93f002436fdc0484373ba47b18b6ea50e9a9726dad987ff09b2bcd00bccd56e7572a75e321d1da85f0da1be719b893a06a40c3813ece6623dc70d0115946297ee0bc62d733aac3f1065e6f7b79d7b2a6f2be33e3264828e911b09e38582b56f0c1bb46c014506aa9c8293926401e0c6b4c1aabc2d70e739498f723605b7dce4eabf7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6dc8ab655d1a764a219c97ef4053addff2957e3d350b50f85d8c51c26e34d923a080ebb7a7ebf2feffa328b6d39109b821c241741ede029a55c83ed08c861f677470b8455ca048a0e329e67ec921943c1a6b5121ad714c3f7207a8b2ea1e7b100c3f95a8033afa5c0abf37f7f6120454466c019581bbf2fa26eb456f7f773cd5a60a6b1db90d9a26c652df8ef63e2de5b55b2fc14689e1a88df9cb95e11e5ce4944e1b9ad036d02cd25fa46ae08fddae96f5aa78539b062ba705af779a566209805190b57abf5698c129f149200ecd1260dd14dd59cb27160ead13c2f6d0494356a556295f6cbf5d237318e16b3ef9b0485c13a193e59f0adefba176d1f27ca5dbceed9ca6cbe8e112de56084ff3bd80d27a2d5e9306d6f56764feb4be5871930ad278c09bb444e213a7ec5f1fa6665a1f39c6fb4f4fc5aa8bec99141c4c559fdf9760ab4074780e191a9d3d1581ed411d502846748fa2956f75f779a2d0172c8011611da0a2e77e2fdf94aff98dfb549ca04227283d63224fe97d01bc3b80e08efab42b381013afdd1de26fe343acfe0d9981f0a432888c7e93afda0b4618d513663658556902c2396156ccfc4a8ea7bd650627a8228e51c4252b7df0ffd0f5b25df547c2691d6c4cae45081bd66e3e18ffe8eb37d378abef362024b4b73340cef4cceb36b38d78d816a2489be479244bf5fd25416a277535b350a90eb799c7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6f1c83e54cd4810755b1ab483607f44f5437b82d8fefd1428e4831a825ec7d2182fe4e0910a596413d425aea53665a58622f66bf3b2fd42b04d4fc0212a5bf06c6093c8fc87c3fdcd59ddfb4672e3e78a289e74f7715865035cb1d66dc82d70b4565594e368e02afce093f12106407f47c2a21fca84259fccda46fcd1de83b697d48123946b1cfcdd58415d3e8bb5603981b0ae3367f7a65fb80b8545104fbf8a7a1df79d2b9c5c2775c9e25d5675c8dea5beec01ddc6e404e1b13dba3cd00ee19f59e5fc69bb82aa31a26f7e5ebbc8884783ea3fbfb8a56558a487d12f2b54f6a79758f2f9c803475979c0ae53ef9f808a0ad08abc836cd87134cd956e76a440454e4b9632d38f67afc1fed63d142e58fe5b61fee453ad4fc180498f91d47ef3481622e390c81bb4ad16e641d2c6223aea9b99ac4a8c39aaa8048e2fe34fe938c0b2fd5f097df6f15280c6a8af7517e4f94b0d081582892937efd56aeae6dfd8e410c08527395fe58b7520c7557e3166a863c4c29c79172f164c4c99f084b7bcf661a2612851ae04656bfe640413b45e0597c05c221def5109be11c28038323d5fc183f0b8c487551696d800bc157303e06dcbb8ec86a7423bab242cf24fde4d08fc640735a0158865dfb338c23ce90a9f4976836860fb737d504e5ca6d3d733a4865d9aa9e97e9cc8d923d31b8088da0e575cbe4bf9c78410452704cf5a2e0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "92b2c003636f38616d66d59c6288063f36e8c81b57a64fbb4225fa0bce3d058dc3821098d60d44efe8c925c34d3c607bc79eb6a8b667bc99800843bcded44846a974dd0eccae8db6a5a6bf66bf8df83306ccd785e3d16b21bbebc9be03ee86f107dd9a99fb227d7c95aceafaaf2945b653df862269d16aa9eead9449d77c55dd998316f9f9f6f8de1b2fdbd9eac1791541e3b725902284e6ea5e29ab66bb00bde4b0f702891205363328f0a185527826a1cf3db16d016b34fa511234d672830606747f4b06c251cb153707207c22e76f1b85841db5a282554e6d35bdb540709fa1ff4a22d429ba582049766aa5b9a9767a37adef399ca976f086e7b8e0cdd61d8ec24258056921b487d2eb51ebeeb612d26d5678f51cf187be515a4dc642674c9c797ef0696ad4b6bffb3d958aa95b76b2320cc2383155e6ba45ec6546d57925c8ee96f212c46af7a3ad6f8bc833f3e3b416f5be85a1ff7cf77d112e7836ec085ae65c183b1fcc598e9f3af8bd032b0aaf83cdef8109bdf4c3c4a418c966fa459e1bbeb8ef48be950543a784016e84cb67d26f5755e499bf93e8047d16e954796d5522b28df0a20ba9f27b2141c9f20ee1a2421d13822fc35d50e1d6cc9ad4bb197b19b6b9613cf7f4d56501fe9188bd87a17f6ca070c95ec64c76f8637fd952188737895a327d3c90513f47cc9a76d7dbf74b554367882b934545ae2d030f3a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4e04d028ddc31ef77e19b3638cce03719a814aa2749b04c73be1d5d2235799185625bc17f1116b386bc70bff5caba577cfdd09270a7d1ba05de0770dd727f94c5a7a73a5beb611c68a765bfce90983e6f1948168b3921ee8fe338ae19d4af386b8c17dec3edf4ab7aa9cd98a3c8c6740b760de0b07bc7e5855c5c2ff196930d0af0674712f4b4b6c8043de8284d3175daef39756d8afe3bf5ae868045553ed7bd8233e087ddd4ff276246f16aa9676d8e8bd2d2499459c927c164c9faa9e9a0f12879c13fe204c422a4256fda1f67eeedfee97fd67c726ae522d2a67e56932588439aa6fa190b3cced40daca91f7f27e22c36dd17e4260e4e85cd1d005356863eee5fb09653054192003fce49dc211102513107f01cf0a86ff85ad0e9808a195f721ddc38405bd13b26603293b0edbe508f3df5da640270b33a7f4bd40558467ef1945087e57e387fc3864bcdff5de2246c86b11e1a5ec56161d11dc10cb116f099e9700060a0daa45c96930aaf58b440a5c78c58057cd93508558dc363c332bc9a825f0c0650e49053e69c6d3798e127236bb0397a4bbe0d7fada7b5caa28fd7ce9c86fe57c00eee1a7c0cf2e218519dc529455cf650ea19c6a446edddd04733376cd9423f3f64fd3dd9cd2ef9e79f1c905be8e1e2f1c95e6e0289cd57c281f715a283258e3887d853db97677e8f3f3a7fae06cd9eb29012ffec0ee3347b3ba"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "968d675e64da18df5f5a42aeff479ecfc8cca4c2e95d3f75df51328496dadb3b33b9a0c0606fcc8c709e9bba0327f8caaa1f5bbe11fdfe89b9e34e5e3411cd3a64e08b268689386b2a83b0e05a997083befc86a74fd3db92c0445f9f253466807cbcacc80592c5befa2441aad8b3ca3c561522eb0571556d6a71e1cbbef325183fe70e92af1bb2d0011b0f56ac2688d7d24364e324bd76a8f86a3274647197c4ae625c44f24891365e62bdfd0e50d13b3a883ce21c1a563620a4023f228078e56a75ec884e376b09a6f03729b28e515b3ebf7179e21017d0c129832a19f9762cba6af38a2ee230f2c2d3e07258ea3f50a92f39f13050578ee0b5523f05a5be71ab0f84d13b0b63eef3632ebd7139de37b37056982d202141582b086ff099aa4f919ce2a346e43f252289bb21d0005c97175764cb9ce717aec0e8ee1b81de516014ee5885d442b2bfbdd6e40c69ac74e149612b21a017e6d0dec38513e4c4049f47fd01c23b56274eb074292a1c40bf5c0725ff83ca0fa1e32c7ed454ab6cbe57507a1929530462531560f8b075d363948dc3ef4c3f48f44853d395999aae8d8efb4aee9e83e490d6a3e76a91aa2569551e8b82b760029c5f38713af907bdaeb0c36079ab3e16dd678762e67c7bf3239deee05de9b11d5ac35dbba0affa55b0682f20bdd42f5f37a6022d962720dbdaf9c7e0f751070489c850349fbd9f9ff486"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "99c99292436a3f1b088154826d134aa10426f2a1d3a359a316eecaba5537f4f655e99e268d66e146250da025b82a3265d8ba2994f7eec9c9dd87c1232225cd985a40def354a42c4ed35c428743def6871d2c3381bf8586634558c28f5eec0e5020993359037fac4d1ecffc2468e75c88ed996c7bec2fb9c7893a6114381662be9e476653973f9e93d12ba4c738a51e67f813ad34d625c75f99acf5acb3cbf9997c86c52da8b41aa2012f2d492e30e898ae5f79af10db51bb492ea3b25f4bff2f4bc00b35af3aea5666289cb2685917d3c67b32c3eabeabfc79b1fa2722157b8e1d36e503314017d022f6d188a62c6f9aa05ab53ee7851e911dce4ee74c555c3534660271e3fbad5d398e5d0472651079ac2d79d5ce759ef71e0b38f2d2f023c4d9e7126a02773c41c996940b84193fededb07651ccd5b411e5f44d0e14614978842fa7a38c127d781a59b9c1a9f76b50ada3c4835c3ba2691556ec3b90ca5ffc93890ed1a6fdff6b2e40dcb747d1c2f7112e4ae75e79e4061823f330c6931663c4540d4898ed2004209fdda0f65eb06436bc562546d0d49f8181f7aadb15995d2e3468e41bdbe96fb42079dff14133f05175ffc5c6547e76ee232de0887713d9aed4daf1f72b6e131002821b5ad30a0afae478de9b3e4a559bdc8db9fa523b1aa402cb00a55320bc3d1e7bb2bc7cd1a3fe9f367203926a5da28a745d3741b368"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a79dac666f7dd5d498b2e84b9b5eb5a88138bdb68e3d2377d85dd1608ccf2eb73cfbacab4f0ecc390c773e8676b88512fa3831093dc88264768a46a7914220b511f64155012df7927eac52a5367a8060e91259d169eedcc6be788dc39bee42b55e1c98f1c8597e5bc5ffe014cf2502dede3899e91ef7284689f726ee9ab4cb405d729452359e210d71219c236e1c66c694d69d36f85374d7f64d9ad4168a45e8e50309944b8bcec31f8131252ce42dcc840431a27a8b2d881bad3cafac25f653e65a182c8ed5afe75c82fb056ef7d6bc22e82c47f3bd0d389873c4decbc0b94313902331595c933bf445feeb6a9908fd2abe26f5744b963fcf6cb225d28612e609c1f443984f2ac84f1c49a8c814b21113d95dffd0307019b675f5b91e65c2d0756782ea1969e9afdba85d18ba0f7b4b5bc24bc06458cb3adb431af2be297387a28bac89f2266bd7dde35c9483183f8239bf7bb253df1305ca218d1d4ff7015f74df1ca7e1b29f7a66844f59e7ed96ed28b4bf53a3e6bc21b348fbcf144d26d4003d3e15ea5e51dfbb40bbf7eda7f5f0ed515532bdff3943f98fcebcf17c1d6cc73825f093a4fa261550417314ff9d53658c9f9aab00839394e91c1d07bce42a816f1a80f0192b76c482affa5c0e85d359e926d43bc595d0e74b44c3c6195bc5fcd3ac29734db6882e344bdb56c0dd367b9478880935bff82381f546d5182965"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5a6d798ed5ea0d324429c38276b8f78bd3dd300f80b5700df516a4ef353587029bccac953861455cec0fd8cafc06dc18d1bf4883c76ba7c52a55213b7b57cae878e6ffa29890c4ee9b1f9f402f81168ca1f8fccdaaa1d3b712c6426e67690b868391d32e11e238c8edba7ac67e52ce364c9dd3302972a14405e43b93e212ed0063474b1227ce409d4e4b9b6c6d100d96670e464272b3db6e2688bf3d3214b766218d14cb2d33c53cfcb70cb955bc8ccac2fe2943e9209fdf046d03bd3d278898aafaf4ce87bcff6fc9ca1145e66fc35534cfe5e9323ac1ca62665e71912d50b3d0510c2f831c5829a33d5b86ed5d67270f21d514745e4a1b1413157c4c059bb43340fd30552a0b2443b3a005f824a3fb3ba930f836c3346553c50fdc4c344e8ba0ebed8c5a095c9fcf3f6725c49738740cbc450fc6a6e07accf91ebdc8d73fe70be3ead564823e4dc86a6cf2766b1d528ad04dd6578f4cd582b23faa2a2da787882012a8239d28ee4a072265eec50637b753c9f03ac890767df638c37834a266251f57a7283efa8ad9f9eab2f636608a7708d41d06c94382c1dd19c057f163e4d1363e93fec15c4739c41e1428ee3e013354739a6321d7149c51740c23e03a3e31ed1856c04fd35aa3f5e974e5900c29257c5033db7930e8e1c3b0c08de956cd89ffd1adde36f330584b533891505df523481c41945842b3136a13fc183b9d0d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c16831c84203186d55d5391ca48c31c4a7ea17f4c83a773041af8fdbf4f98511ce7122decf06b7ed3a0b3e3a3fd3aa9927984c3a5e59661ae35366b2330caea6c2a33f01134d30fc210529c599e9f4dd0b12142acefef6b218ed6723dd06fe88a55d3e9f3cee052b83044a46e84d39a80eb1ebdbb0db8a0a7caa5231ea82a9738b1393e77965092377723f9a6b8f2d6a35deea4023d87c6e6a46fe9cde5fcec17ce55960a784df02dbfaa300f8e939d9afdc509e7805e253bdd64da9dc3e17cda39a4fa1e183c4e81f6fda5a79df2a4b9cd388509e350c47d5cc039514a25a37ec758ffe196afdaa8174578ba0e91d435580f17270847731123f0a9fe98a7586e6c82da1b9b59b43b283c03ace8da8eb56a3c4b6231893622100b3e277cdc0eeb13897ce9c676c0c1413b6751b220cc6394494962b4fc09aff620eb82d59f823afe1be2341908b3972eb0d17280a67de0156ea3430b498201e5bc38301928983a61473ba28fb8984daf6d1a551489c26d69b9f8761f2d5537e514e453d5d06ba960d298f25a16aeeb2dda3be6072535c336c8c8e96d99105a7b3dd93a310073e520e7cca1b3ca34bbcfd247c981685e7a0b141de1895c555d2feb883bdada9f070edf8cbfe32bcbc9d00a64e636c776fe7dc4ffb271ab92b673b396c90cf3774beeb7fc568dff65b46e73764c3c291c92ee2910604d75d3d890a90ef57461a2b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8cfbbab87567c1c9444563c93fbbc9900e197b42e47db8e082aee99df5eb7457e50282b28479c59a49a939ae6819eaec9f6e20b3631e4d1a86a23ae7eb5f7d7daa28ee3b5ee22b6ec7baa6541795d5785fd432d9586ea69951c0e2ab370ecda5836ce161abd44d2bf811c9145c40aa0d79eb3b26d2969b9e80d408c8a15f468989b0cd65af62445321c901309a18791eb87bd114dbd7f9a67d9ce717d3ee72c6604813593e885d52a7d6214c286c8b1160a50c816140ceba231b9b16e05f73006b90f63916941916b987d732138c6e8bab399f2ff0ef3e48aba6cbda52eba31555a89dca745c8e20c1dc4711189c49d58f212ab314159294aef96d6f3c3fddbcab72355d8d3b4cf26334543fd9f4e1b7e78314db152de2824f5001c1ec25fdb1cc9ad7a7ad753f4da458e70517e152b17961f27fd33b16222e974add27e34ff67f31da5bcb05c489d7b0bb163e0043d63d2e064a4f626f8d9917a9ac0a6ae79d94630773dee440af99562a7a918d77cac2d3c82e43cbf02a4cc00e4e7dbd149151b78b1aff4de3959b857fb8cf73f8c0da2d683101d4d3bfce02d234c343116836cf47aec0f593ce76f0ad9ce206194b4d830be1008937f5dd6418adbcd58f36c772e3ac456bb7d675f7027b692d3e759cbeb5f6fc57fd1ec70d459dc6153be6f056fa5c0b660cd37c0d3c73a8fe6a368e81c4f50a43d6147ffc057e6642000e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "06d7c10ab9db50ccadcab75474b8d9ac17dd43f24c5fb37ddac738e3e102150975e6b37c63bbcdd987b9675d6f96c1ffe35e74da3c13fcf689a5e0c33ad11db44e87fa3db110e19bb25a6c8abe573a52f0b35e718a2c3365dda52f566c62785e61a47f87f56d870f148ead3571a1569f2e58fc46a8f5f8b7bf03a6494d9bbba960da1ff465815dc697480c8c4d4ac08e960d9f17511aa2bb6347c0d95f33e7e9c444c302019100cba7aeb93eb4dab84d80764559ea3cd3e17ddc8606a279d7bd54f7f2d2e9eeee1ff28427cb8fc1d4d4c552b8c6a52940841a3409f0cdc28eefb5eccbb9e12f604bbc8ca24d02d706f633810810d9bdad9ee77cd4971c6c5c6aaf3718440c7a8191fd1e5b334435152552c34181aabad626384e68329b32b4abc53b157a255b8e077dbd950e9e6cba24cbdc59e54ef056139b5899ee90fcb0113909b0df2ca447ecc860c416c025f9d65f7f17afacb7075c3378660a9432f4e4582d5db2009c5180567522c5a58eb72efb1ab9b4799111f351fb5b0a8326559467ca4363094ce9de5ff622fe15ba857d5b24a091a39cf1bfc0a1f5ca167f3a61ef57bbecb827638abe183f8ff1bdd6231e262a98469a8dd2afa0b436d9c47e121ca9c9bf318ffa0020490e89684662eb540b4eca22282695f422aee1520f290e10c6a66cb7e2153bbd3bb90965784b46711cf93750907b632cd816fa9398614a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8bdd32c9ebc98617e93f5c81c5f9b2e65183486cd249dc4efdbe1a91aa9e3aae668f8008db7f2a09c42435766ecf436dc73bcc496e6908a17697129ad1594ea8d169b89198d632907e050340583a7e9580328cadc4c6cce0686eca1cf7cc5445b84846a4042648120de621104f05fea2f5f12ca2a856bb90654dbbe1ab3a15337deb7ef4798fae6eb3b9664d7afdcac73e1972e5abf2f16c8d1672e54c97e321f41d5ace05eaeb9513e2d18cbc2d7a1ad856aaf18bc84cc6cd6d7273279191315970e55838922b3d10fc4d99eedb22bca24e20e586258928343620a8361239b919d03a2ab2a537f2224376576eaa4a67e0e06cf79e335aa39b928e1c4d7a2a7c87ca4401d188715a6063802408582fb486c8890dab132276665f5f173a587fb2c4d3b1e9d50fb62e7ac6c548ca6da19d1a0c22a79d4c190550e109fd3a85a0adde9f00b22a9331eb72bedb1b564a788a5df7b5516388f37f8fb7b534adbd8ab7eb7be5e66963c6fd00bea58fdf570ed9b5b0aa7cebfb17b477e28ecd78461ab8b0cc026d2bde97fe1d1643a971670081ac495396e61d234b591ed07c58081fe938d0ec534eae561cef1999bc5cdb1f20cafe4dc4223ed015a41ceacbeef2e886bb0d3e5e70925f02c8e9f59afb86c5937598fd69d61e69054d5670c484ddd5b2b54a2e39633e611dbef4e4c72a8be0b7fd163ab5686e09030abcf373fe86138f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9188914ee2bbab207120e12f280d6176cd8e12276eaa94f9c7b7dc66d886879b5641f12ab8b232982db86ad14145191f13ef8909f63108806c49ed9998824845730ab86db5fb3a4b4ab100f79da8af5c10d0372fbd2c9a2448ad5f3b10365fa316762c3031218b4a874b66d14be5ecada07c9e772283a9a678450b60d56fe71a6c2ebb4936c5c89b66dd2b68ba4a5cb1dc2866cc3792e710bf6548e24565ed2b15eb02fea87d239ec8802f802a31bb62591b72f59bfb4a63403d89663d9ab2aaf87d37400aee9c44de5f246571bb2fbf0557ae04a35cb515d42232b0a311fecd31319830ee6d2e505e6b315aedaeb68e7efff3015da5d390521782d32edc15386e102247f81d0607bda75cb15e06bc7bf25bf3063207c36c85a4d1cb3da5b96b638df3c80fa40579209834a1bd980e28da8f1916f62d9bf567e0afae734afc2bb2ca8288487164a3a7941b64af1a86efcd630aff21587ae9d2927faf1534d23765f7e88432a8e2fea53f385540fb992a8ce42e89176c07e66656e03fc875f81b897e002783bdea0eb92d1f1e6a95b676f616c6a03cd1c952477f3744c5473d4e2132e7945c290239428c6f140f79907ee082bfb7e6b96a3f314956acca345e8b832a8f97057a33c70416d2382c5e695173365261fd1f32039215db4bffa1a08a0991ff2bd09b31ee4642f090fb029a95bc1edb6e310cbd50cacff508ec1d2040"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb7c6dd59e12462ac9895137d99e3c8d96772e6cce695c0c75abada842cb602c1a2a74d048e1ab581b237cca9dc909e6012bec30f40742375af7a0f6a00e85176c22ad0abb49cabfe3b15c90376898357e6b1faf61428cff699046a2b3b534b4c0abca5c1c5494c6549475a468a33e139edaa09ce1f59d58e51b80cb7c7e268b90338735bc3019c289cc610a9dabb6dd8751d00f7a90148db42d812aa53aee5223b76a19cdd0f41697aecbc2860f52aeaad6ea9927bfb1e7eb5b66c44c717c4378150c8df156a8dc9f42b9859a7905d79af61e7ab5e9aa7dacf2177c12c6cbb43c70815cbef1b4d4d7421564b1e6587553b64577961ed23b2da0113ca0b6a86f78d98ad3c91569992b1e1efec5a7accddafa8d806543f0705b0808fc52923575b068cfb227ca0bb8ddd65c421456c1d7028ecaecf56e2f42dab6b02c6b6df257263d941e7540c67cd09db507d1b63c59047ac7859f0d7d311419ce3016af5c2b74f68c3cefc073d5740aff573696c5f6c3e0c5f099f9d25d9ece981961a0591077e2ff0e07e1849bb75874350b68e368c48a1d9648a91904c53dda47b0071577a2217db4ed9edfa33aa44a250664d0a7c7c8defd05cd0c56d029f3c3213d1115cb44a109367617ff6cda8409e8e3eaf7042e49a9391e972b70024877ebae686909bb339d3f7c225256e1735d3b11028bff3ec7ac928f8469c60bc84c58fe7f41"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a292fadf0c5839f4b4c282a8871f366351d2f5889daf595e2d309f750fe7d05961004a614f398ad47138a63a9eb493f4232e8073b30f48245c12d700a7ca19a95af5f128a5203f80709e7ca612a8d3924dcfe28d626351553287de2bba75a6aeab85988566555b22e4b13f8bfa5a81e6e8b66f51758b2de5639bb7bfef99df264d0e0d5f4e475b73ad5533c9862fce2ac8c28463f9a2d9ad6ba7db7d94a387c309c92da156c46a7413bb6fbea0dcc14492f1b8fce4009daadefd6304e864559a1b27e473df7a8a7166054d9eef10511c90ea6c69cc19389529101f917c2562de3a1681fa1b41c789cae6ccdd82f93a9dbdc4775274783d37a8b975945ec05a0d7362941a041e4fe7ba87624a586586010444ac79ffea8d58057d808d3b8c1f2c705b8f77ed5e3907a16ed8685eba933d34f1dae99743a11a6cc6a47c6c168441ccdac81c0a9006ffe79473385d2c9f74ddd55d593af03b209df03eca844a26068c2da0967b7d0f2f4f2f2caca2decdb2ed3b33bab1250a0be60a2b0722cd481921518eb025f4aad96ac49e408b74ec6e372ef7c4921622b250a73de56b2a1721b5db919182eb3a5cad4e0f383d9ec82dd588e544741035be958e9bf14f7f029eec8828d98f8e2efc943efdac302e78e424779dda31d29ecdbfcb583e9573f0a3eb348d9f63d683d9e190f8f7a51c1fc7db924f70cbcdf8c70ac1ecd2176d38f6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "22e0569ccd3187cbe2091997452e48c5a91308a4f9c944f58afc3ba1f9b4c155121b4ebbcbcb90a548bdf98c8e713ba6ca20c701363af4fff2b0784af10414077f5a0747eb60d0f1a38a03d90aa952f3da3d908eb8d0de98d4dadee03d4fd2ddc4ada4389d21da9d8a2cd4ba752ace8be606c0c088e10e7b411c90eaa342c5e8425f5733d0668c586ccbece1482d0ee5855b3a5d93c5105d631df7a1d13c0597d5530b32c13ad5bc7ef5c578e442322267a48b427bc201d30c2010fc6c3e27c40bd924e897e9e4d932467c1389c3465c71374e8a289720332da4a0ec29d7aafdc115515edab8064cfb35c653b99cf651c2fb004dc898a0c4b66af1eb370b1556b3d28814cdce5b7fff88981e6b7707d95eece4b9b75d624b3c6efffc10222e742090dc030542b7c2918bb2c73e20139aa9c383be690e8be74f3ea9eb8881c6c0ab27c16ddf10867a4a7dce3496b1a0a2295357d49b498ff1ea0a27bc7ea182a7a89a7cc53859fe2ac8d876e30d1e810bbefc5a48bee8be7b3e12e83c1dff218814bd6ea42228faa6b69195121f0d079cd887d1da9c1be4e3b3ffa9e4d23a1884d19845e6c76e74d9319884bd31622e09525ae8507c4d4b66e93ab55d57e1dee708542e1ec9ba7baa2fbab8c41c8be4101bb7c75ff7f3178169f93899c0c0b4550276cf166962194091c177179481c620a50290fb85feb83665a399f0afe6d961"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1839350788eb5904ca9deb1c30ebfad0c8938522d127135e5dcf4f5cacf2f24e32f056ce74da93b68517acf3abf45b55bfd19f25adce4aed72e2fe8496376f8299f06e55c4e6fbcb516ba1c475751c2e8a848d6604d866c7a391505623265d7ac9b6397444f4d229f0b82cbfe673c1eb7e0f3f6528e2b662a5b50f94db86d53abf341bf927e70bfe6a25f6da50e1383c9e6892b3cc148aca796ec1d957c7933eb82ca92eddb7da4a488e0768e1bd980e61312cd614149a3420c6e5fc1e5f987d07ca223cf39319b03877de14e6766a191bd45d5905b1f92530e60c093e106b2575b254cc0965244c5fcdb788a82d3c54afdb41e009c401913109e068d5599c3fa599cd69034164ea03e4409a29c259410f460ce9743ed98ba3a9bfe9c513635610280b9505c331be4674613504bef0c45ea16030e1d917199c69ea701bae06cfcd6143981b1608c8662e7ea0d97aa0cd6a2c9a81cc5d5ef472c83c03d2b3649ec3b0a49aa32ced70f716af4f25b5d788b711dad4dbc3738651a29b080e7dd13f18292c5c31a18a769f6f1d7c5970a2693c1e38e9665673cb48ad316a3af9c4217d98fb69d7cc4fb0eefe950564d6666aac6804b4dd476568d86b1a0fef91cbbca49c4bdd7f845d8c7adc5bbf3eff13dc014cb29d8c7f1c6d033922d00eb4a14566af2850d76cec15a4e9ab5d5811577cd4dae6ec7e6792c23c4becb949e12212"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "af85d132381c07e90840669e177f93ed7c511b434145021a0be225287a5d97a9c1399ce025a73b3c3e15af034e8a568f5463d4f5c89fe39b28f0cba99191b8de71bee60621db19804b2401c6f6375b0adac5cd99b52927973f695660fe6b53eeecbf288cfa69cdc891c70be7c04a38453d9e81928f4799c9599b1e7f6f0f56319d30e98d16d7787075fc633bc3ac955ac6fd5b8c12f7e07272cba3d3af1506a77c5357e7c17b6883d1498d7465a675f015420da08f4029900dade8b94cad5e5ee3445c9b159b3acb81de430a39996e3d1abc7389e8ca34ef1a105437c543bb88995b02ebc01b97a86ee1520d15400dbc4c32a0b769ee2a9c71251e100634dea5c7771c7c7cc6ee8b9c5e2fad1c746f9be63394c1a36171828966ecc528f501e7a7f54f0a74d761c0a0fed6bd775047608350208c88a222b6b4e097285ff39a57620b579bd42d00f0adf09988c1e9ba8386806b79347d31460b8d1b96e0f26a9616ebdc8008a1ca46f60b294ba39e8c4080258d897a45a3c310cde1d71046f44f981c8de07b72c16dbacc53115555d19de38fa169414294caf0e90f7766d1e2cc3acddffb84d8b1770ec501fc32c22c7a2c5707f724590a73e96a30b243c8611c4342e2b5f1c94b67cd5fed0f10811ab82b28c16c38ef2aff795cf40babb92c19e62822bdb1b2d02333d14efeb3be8206165d3e75171d5666be0c92e96235ef2c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "57f36d681dbd16ac7cc447a9bd77b3f71ec31ae19853de2d9899d8acf7a95002f8e838efe479f56995d56e9822e5928d261017e1ff0042d00c9aa8b2adc00ea72778279e9665a394cba187af5b9ea3c9772cf0721528ca14d1cb6bcf0b13a71e455202641838f6bc353563204147960a5cadd5e370929cbed21150c85df76dfc907d4aa372e66e891adec59aab2460a97f473f0bc1f6480d2bffc94d0662d5a35c6771aaacd07e096f9802116b9b2440bd2c4b85c57556f4fe2d0765fef9c77b2428c39a1117fc26ef7f15fec08da0be03c0fd4617b32038d692aa3999f81bff85d1783a48a6f0973bbb7df191da707b797419c856e589a5acdff0a934b0646bc3e42fcf6f0568f233096209466f0aabb90d9e1ee5945820f46fc4d7d63f12048a542d3d4df4aaf21f43fd7ed74183971b458da1162864fe8c85187868a3916ba95e80cb130cd89116ce3ffac1b9d3090b8d90be18f48d61ac56635fda18498b4bc9a6ac1d41e5cc7f73b67f28dd03572f1efc3a73438652c3e49a6be79c9325439005be0d2d87d9fef65129bd6c9186a01fbc3812738b006e8952c500f4b271694f3cbc7b9dc648be76592fde4fd757f68f79d659ea3edb6b3434a73a125303e1bbe6d24bcd8e0e4b36e70b3e386b181ce8291492eca83fe7633901423ba5d273e1ce2bbb8da9b6afa8ca6870ce99cec7e5d470eee11d1835012fb228ca1c50"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "342ec794c9b7ca5d17ac049f38b6528a847ca8b9a56cbcf05d106b4f3ed1459b3d99df85f2f5c55f1c78aff72007ec8a04a7d484865120907cc4afc8cca65bbab407f60d7548e189ae03bbe3084a5eddb27412d63e2475b2bdd6f7e432e3715222dd21ab3311b70d1199fcf3a1577f94ddfa9ce19029b7d7e9bab354fb471188f03956773b839d4c2e2527d912fc13daefef311e023657e17f2accf7f76056e3ebb24ba42881ea916d88ee494eac687ce75c6af7bc5206a25ccf3988a6c39aadbefacf496ae5864a1176a1f556f70fa9885b4e0fc263d70f11463d1409f6dca8a3fabd5898a8b93add7cad8d46f122173a0b764328e649251ea1184c4d13d7236fd420c8dcdfd821df19e1ffbb082dac30220d3fb7e16bf9711917707842aeab180c3ee05ff2529a3c5be2677768be4ce7aed70c64c8dcb8c7b22fee404fbd9651a7a02d514c62e7dcd8038deeeb8adede607209fa263bdae4a5ac37b8e7f3c6e8c3a9c63ebd250c5846c331638c147e39f3f8ecb6356e9238b779e75da7b94f4924d63211796e88ca11343455a5d1b1f6c3918c311ece01e5fd65f766046452c644319cf4e495e67ae1c108e5b7c50fe5e3fbe3fa75c25ed71c013f81ab53a77dfb8014f357afe68a42da2e41e5f689ecdda7445e3c5996ccf16eb2dbc2b5f4c4601aa4094929986a776def1da70a530bd21d71d3ef62d559eb2727216f0f30"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "770f83107ea496e0b6104c4d507008ad00b37608d30426b960d834c64614b5ed556771cb945f69af00cf2b055a08c1e2292dbfef0135e913164732348607873891269417b291fa737bdf689a11f48638e55a5242b55698b1c19080fd01fb4b3d2409ec9cc3b8a06c0c6c3244ccfd38ee9af027e84a2ab0cc1a90bc9af780579dbac88ef61a5aad1a8cf6e625eb8b18df7413d4363d68171430088897f02c5751a321d5c44a2de28c4739e974a881a46bb3c7d33021dc40c6baee2b85baa12bc9a54047834ce19f2ac97859b1e3818cb9179fa04f339d0c348f3681f40eb775b0d5ae6df0a653b2816d98f6a3554846f007c357f1f357d4cfecc4177097b0eb88dc4d132d70872f3f51f18617781e6a4f7a3ed74fb653c7946ee6600392a113d446d5a957fec8b797313ecff115eabe61cc7f01af93fa1af6dedb962f26f10d703d4b984e5bc33e74de3c04289bb9a96db7180823bf74245b4ca80262438cea1cf2b552289976b026301fc1570d94fb8767def547f086d91609f5b133755631611b81b3bdf1d63e163c3457b2ff144bd2a98805ebfc29b75ccc605e2a98b75f66ccd4182be191f8558c4b5aaf3446b86ccc1fe74758b85b555a268eba91acec4473bf96729a423f22d3222b042aca2d7838348bcca7563df0659ac6625f1678454e7eeb35ae0a63873f0e0c2632a4ce990826e66b943d70bba0bf562db8a289fe"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bda7b5ffedb9d0072c3dd8fb9ca35213dfb68e61eb9e3ac88e2647e3a7dbfc28de193485f97561b7c72e899416bcb191798cdcff2f50630aea4b296943a970dfb983acd47ec990d55b1ec8c16329ad94320fb1c2c3b896a19619dc204523aca890324f022b41a20bff7ca4356314bc4e952313edf91cbebfe55a65d27ea92290b975adeaf952c5fbc4415e7d8d3bd6e6319b578de5a66fd0a2197736b88d06bbd0a58ca65e1ba649759c70ffc914ab4b88bb81a1c7e6a2d4327944c967019ee63e34adadd5c1c77c2c733d02f93503e532af0a5178be79777a75a30bc2b4a5a374ca61f35f9d166d9bd3eb0aec8cc31b4c7e89bb751d1e38a16df5860e393c7c7ce995a315fb7c9a3d5c7eb38ffdcd3a9888c5b80b19cf35885f2ca26ce78a00d05654ee97c5dca4624f5c763bdac9fa45e8a0f53c3a18859f544421f746d00021aecde92466e5be57731900e57711e49868f826286ccf44133411b566b5300d9205aaa3231d02caa8434043e30b891b4e47969db9cf85ae95617db31e9a9d8834f816552c239649dd0962414cc683a39089144f3c1ee8c622c41c7b9b740a840ccd7f24275618a3f1e68c50f37c8fa073bfce35629c5512de29e50e74cfd66600564469de2500572a3e1867f549590bdd99f20487276246742dd114eca02905ebaade0a3895ee0f3d5fc70249f28612550f1f7a9a0356d4fed33020125b21c7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4f7ebe74a37d53164e8aad17079b798dce589d4b27878e57789093081e1fd6333871fca7943ad1444010f8a181c2cc6fb35b0729830fbbe3313551d51dd443011fda09370cf7aff65c448e5270781e1483291efc6f6fedfec81ada2f141fd436f685d28acfd7e2a01ad2e87030e076d8a93c497bd986654409c427c4f58ff7bfb9937cc068230804fa78977fc7649f31202437db9475db9def4e9b8409438c0724b9c05f3ad9f5ed9908ae3211367d465442de238edc8c2ca8d0e109cabed865fe37f6a4994651bbcb4d0af61e466808be729cc6978d1c08a1332a21f04aef0ee77e62becf11590b096704ba67219147b0881a000fd06baecb87db7549a74e08c17f2c1b54d93cbd43adadcd94fd116f7aa45d6e595d9ceac28d5ea23847ae6424bebe2d856f1c5605f8c88ba0ede58b90382e3eacf64c1c153174732061f4c80d071bf985946fcbaa362049fa86e59a72a93781a26c0f52f93a80e42d4a01fa4d292911325fe2cd70fa48d7e02ae80ae50bd37a2b23010cb8805b26a6415c4c6d265b3e28196c54d65cb67736378b00551a44da7d2f9f345f697175e4d5628f61998429312045f2baa16579a8511d9b4656979bb89babdf101ca9b81d49dbe0e329c9104ff76e290f6182e96e729884cb8dc3c5d43818508a19f462f0b7e4c790ba7601ae40d41cc6678a8a6eeb694d7e2c374397dca9ebc6a49ff79ca5463d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8023460b5fd886c16f15c0a31d2ec5a0cf43fecfb5a5bf4c9ca5a13e4c076cd55483398a20920138d821f1ddea3706ce3ea84df82a1542e9905f89322462e818fbd22873176ef1112d5bc2d8be0363b84dafc4dfdd4f09a694469d0c60133e2f4563a8718f0666f3d137456c2a1b644e963100e43b038b0896bca1775567d9ea6f0dc112918c2a5049c00823652222109eb6de7ea784e1f620666d61ba1127b4b2efcbd184a2300365d04b4724fa89a915d59c62903e93e8aa2b5cd04f6e1713de76335ae34ab98e2ab7c8b2da8009da54124685b2ec2688c4cd324e0b550c521274c848799a24fc901cc8f4cdac2a83d702e8ae0dbd1cafb69cb5ef4980e39d6683ef62454b47d0234bcefd2a9d93a482492a1bf80da22c8f43c0315b81f845b9597f855288370dce9f3d4256573e867d9fab46e5fcbf419f7f87c8ead3beaf9ddb345970648a0ceb2a94b487aebfecf020ca6b2950619da60af583abecd0c3f35fd449f20de3c6ae3ced3d348019c60295d324d68ca6be1071d336658e98d6882468ea8086af6ec66777076425bd708a046c259a391d90c1c89fcd4a8012de03872630368419d5d71dc1d77d0624fc6c29202c60cfd4904a1455955874c8fea2ebd940215d8978c5d23cd40cac7e99575b9b536eceb3351dee111e7a724798039a9c0bf8b5e671060e1e497877788967fb482ca6569472b6a4fd195dd1f9a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e936a844e70aacab2a52b08c722035c1fece44e7da375047c8a0131072d4cd34598250ce2d953f1bcd3b9f010f6e73da16b5956b26017831e4937e3331c74f67de02623a0553e236e2f2c6c37b5ea6f9e88f2ccb33b6aa92823e23407998fca861bd2474c266070d32433b2d2d880dee2969b483b7b4701fc2eadaefb0954d17a2ab9ea94b050e84a71e32f319cb517f1c84a2df48cf8792fd4fe41ce53f71fcbef77a2aeb4b5f1214564e9bc238f92fddb7a231d154b65b1d02441e45a44c68fb775ecbad29b6b6afe0bcf37f7b28b9c2d0bf2aea540eb1a0035552147b25354f695070decab791e6a6f4524ed7d5991bb47b055fe4110a55dbff10c8d906c3b05bf012297cba96001c175130316a6080e9ef61f0afc653e9b0f82b7a5f07734865754753993c80b1aed172b2fc097d9cc1bb0eed9ecacab4f1954f454954db7bac959828a1b2e3e60f9a72280237d54653daf3561f65aacfb930774dabd34b52955d7f44cb81071bba7843ee327847e6f9190a6898f0907435595deb3ae9ea6bd6a11d1834f663fb9af3676f76a5e12762e893700eb9e65f4679dd2357b093285a96af7654cde9378919b5459c92f9d439b88cb3d9599204543a5ed89f24457c5f43f0afd36e774a23642c4359d1dda581cd27aec0fad4fb2554058d37cd5f517e3f0e9f71d9e80454f8c201144d966a626afeb31aa36126c115a33496461"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "89d47254637f19d578cbbf89ab9f8dd5d658411d763501e10dc13a73b1898421be0b28352e2c505c3957cb65d745aa6dec6227954e7d7f9b6be8ccb98ff67f5733efa8b10d2041b862d2123a055291bc3038f9abfd340eac2e2ce9e4a6ede56feaf504903e7e8a2b1534bbf774cf56db230ec03be0da2299cd316af26c3e2058d3551ea3319b38a2ed142c8d806a0fe308a752277e8061aed64fe252464d94d60e1ddba421ba48262073b114566b3c9837cf643b8d168342624282dc20272dd5d92fa3de55fb1edc0079f4c2f63f2bad399323c3d3697e48eb5497289bedfcde9303e1e8de42f45e6ae9bbe94ce1cdbc1e92755ede9dcec33f49e711d0120df200c0dd6747801ef42e08e6d32902876bfd9a946ce2167a6575d4f9ff6ead1c320c2234482aead7fa90720b8115932cf243f49d3545e16e70afbec4c27b12dbab36954899ec927833a81087abb75d9bd854a4fe4daa1c3c6d466ffaf15fc2371789d64abef79ba05036b671311944179bce2fd6e707e4987ef9201a2a20531ab0dd163501892696166c47fc00e1060f5eddc64d79dcaf85551afe31ba3d87aad9c302e7c22bff0d7a5aae109f9a1bd95e02ac5c41bb3177a0bbaf4a1efef0dd9efa6e09d4cc3900c5a0164f6d391fdab7720c577b7fa1f6e3699457c72bd7ffc0bc32198e7ecc87a26946090c0199252a340acaf9dc5ed063b0b2ead7350ce5ce"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "40a14c4df726ed0f62b294f62573994e821d855a28d990fe600b7efad50219b2b2fa584ac37aacaf50428a36194ae2674ca2d6775290eda47cd40bc7b15a43f1f14293ede4f90c29c3a5bdd4081328d03d19511663d1e83dae82a791fda6a97d70ce80a977e4cf6b68ec832c24e4cfab0b0bcc9730d95395630bf4ae205c54cd45a1b818c83b6f9e457644671370753036920d62c2d6f64ded5f8249c79badb8bd6c2a1664069979ec38a739a92fd81114abf1a143a51af4a8895912e83b5c08a5206931feaed126374e870bf73e36203c9ed70028bcfb8965f2fdd115538d3cd603e2b172555c11347ab15caf65cc535bc09429fd0e5ff2ee9ddea121b18caf4d6436c24c56c4d97de567d4dee96daeadd310c808358cb1fbbf7bacd2b87eadd063e9bd10d6969b9cfcbbb7287162eb2a5fc904d53408b64cfd346a507f39ba6d8bab3dc01a12ebd753a7113fe3bce02ddbb47e2d4ded5e342758cb9e9113f0f287da337594fa3da4ec03b167b606f1f5cb42aa205f275e5187d166d8769d0d210f88fd956580ffae30c6fc637bbf16204146309569fda24fd38ef7a7ca5bd0f74ca8197d2bb9b2ef82f58d5e541a54190d1198a1a3d88a4e0331f1900f8edf2d31d6d8c74f0662ad92ec598a7fa27ff41de4951fdc4c353cb90caee871e725bda215068e41ed1df37f6287157deaab3f6e30c68cdb71e3257165cdd4c1489b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "80c01d6f05ac1f8cea15e6adb85916192c365af6860d9760082ee6c15bfe56139b7bbe81865e9bccd775c0e805df4d82449dac42b29dcb7d404d5cb0532842572677fdfc834cd5fcdb0eb4be798a50d583b8d4ba730712e3f2d7c18c430aa7622b8239851441021fb08a9f98d51213ce81d0fb8e07ef990090610be6bd930367d76cd06835fb32cdff607d27f55a84b8ad7b8cdbab417cbc3072adaac5694c55a2e63a59a67585b925a56a4d9f47f0e9012935979ac75af96f7a40306363fe3bfdb428e9998adb3f2695e68cde1310212439abfcb5f78b56c5bd3db7b48caf897537d29c9433221359d080af9f8139d946d87ad5561741508f4ef400da92cebac640572c62ebd1d047a0f575fea856eefa057fac1fa3fc641dc8c1db63aa9074afec472feaf0082497cb37fe86fd84303b501f3e0346148635caa1ae2dc76f9fd7fc606529d5ffdc7a74d0ad667386aba017d510b11ee624adbc397e01b24ac8511bb1f3d1f74953a28114b5f26f0bd175f13949bdacaf9e69afc712f711d51c54c04db4da3c598c055ed786381c449265433719c26ebe442880f0797a254b165d0142527aef085a025b53c422e5ed4c4f8ad66455360e1344070c9ed3276979bcd210db43598033e60bfa302a02f77c30bb18487482d2c9b26447527d6cec876139379cc6b2a5df9f3ed91ddfd19a9ee6952ad4ffdece266203bb77a136a6de"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b260371786cab481593ce95cd03a0ae66ed3a9b9e15f0a5a928a94a44f26e0c965c0035901ca12d09b5acfcd95ae770c7598f49e9f67eb7cf5d62722242cb0da595e2b5ac350140dac4eb36df1fdcf2298365527f876e1f798396b141f083b5de06f4a37741da6d8a6b227a8ffa1437d9afb73bc5eac196d846e3d7b209e61ef8122809fd21571e22876c8229e3a6ba49501784199ad8836838d2c28b90f86c570e25edc8aa8ebdc2bc2c08e8b24a0fa61b57fcfaf9427e6899b8fd10f2c263e3d2eb6981537bf461c3bc0f13748b937fe6ca7dad710c1706fbea0df183efb1efaa5ea2a73a61be57acea6dc6480db146a0798c2d50a310bf538da086305efdcde7735da2bd5e4efe5f1546602abbb378b1e8cca85507e6af865914b07f271305cacab66ebbcdaa4f9a21c66bae144b97e80aef5b75150613d46a2da399f3a51d4abe8d5959f96819820594ac4b8e37672552f58e3339b259cbefb000ab82c3c00839c265c032bacd25fd5c0c7816e65539eb4598d669834e2771f0fc416c4527e0c904e96ba50dd6786f6296b4d0de93ddfee864f8f8cd1a38c82ff4f46494aed49bf928721945b5e7c881549dd31b603391f1eab6d67ed5065d19d78159766a807fe05083d13986949b5fa004bae48252878c98aeddb884b079dc55b3771a67e294bc3aed666d25dfc865c7302bb012ffca4f146abeabc1eb1268d88a6faa2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "84b69d46718915c6e9fb582d7209f64d7d05927985b47f60903584f73d1652d571ec61243051dafa5d440d9ba7ee59813c5ed847386952769b0c0ebb9633b302597a3eef713499129440a20e9f4c33d982261d68b87c5fec638475c41982e84229b6ce7e4d2fc957e66084dfe57702d94a7e8f31599c49e1baf6bcff00cf1a422e833c29233a71db631f125b1efd05c472d78f1244a2bdb1707d6c9f9b4fc7022b47a9a6de1530966e49a67e0b6346afb05bbf77e3fc415a696509b7ee4ca8e7b0a9b8cf7325f7f5d4cc37ebcdfa009d33d285e4064a554f0bf8010528db507d9dd12172236e02616a4e8693f064cc08e733eb1b975956d1db53b4d267fd0567e5a913f083df1dc3053e2377f0f2e063b69c4a741b51a2cc430a2539c13e831a7f35ce971587b08bd90ac0c3d801e22ece2a673ba1e224d4bed142f8a6fbdb6bc2a573bbd0674a05958868d994cc9c91165bddb67d6f2008a6b78896a77bbda1d14ca1f9c49dd34ae43f1e85585396b56223c2535b49df276e7e25bd6d75f137c9f3bc6411690c0dcf9b9d0882996df8ba5a36a5178e0975e8eea0007ca4b54bb7f6914172370226033f9780614236c21aa2864306da344876fce8f24a055caf66809648b608107ab0ce1881398ee5b14c2cdc6f49521317b9cb68fc877b3b52b4909be1d599a835903832bd243fd0dab75b43a02eabf7c7c61efdf59a2ce2ec"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7755314b6e33091c4217c503165e7465cf272fa856ade2cd36ff9a5db7b8e846f15a39418ab5e681d038fbe89ab6c7f7dc8ff7bc57040844b0ca6905a9019e592ac6a523b0edda7d3f11e224da2535338e371b05f736b7593c37ff156f73003b1ff335271649beccd87c02d5308b339ffd5b909b005274a2a09c8a0ac425e7d51599158407fe05de1d41e11008143dfca497f70c0e283faf9554025fc0ecdb1ff83b1cfafcb6ca8f0cc6e97e3a3a7b62b00d61cc4c1401dfeae2408622e19d5c06e69fe7fc1feb4570d58a7049de874751309af9ee0fc7ca3b50fa6493d03368405db1d483b61486bf06e640985c3adffe3540883716c3f78281347de09dc3de044a5c60c33caf0608fbb685d21fae3213fa280ba68aab5f822b9f1f5afcd51832b59466a1212c92063d657441b55fc39cdbf16801137cb531fd23de3fea0ff01d5cc68a6804fb7115a7deb35952d9a0dff4d3e31d52af4b68104f85654619908d08b16881c68a52b9b52b4807c3b44425b0987c08ab934c1342bb5469646ec0480798453d5c4d471f1c2b59fd4e4e363e1b01e1f05e19157e2508e57b615a1016269effd29890148867f5cc4159dc409a3320f9b2124997da6fce481be241ad7d4f780786eddd5ea0ee7a0b52fe419148059aadf0b90cf81825719abe73d6f9110b01b96fcd5640f945870404afda9550926db3611d89b22b73d05976adb679"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "51729b157cf61f9dc88245a3d0caed291c33d738c416ddc9f4aa73fc17a2a9b39500a361cd0db72243e02faf129acc8378f689842db2cff07ad43ee7cbf3948902d847ee2d43773e8a86fcc3016cc879d238ba4d7f19e097e331225146dfc915ae1c19184f81be47a3cace37327b134999c497425671a8f62e6678530114665f1861df49e8ef9a924e40424daf847b6ae1297d4c554ddf327f3b22b58488d83712fc5d736bb11e807bfb83297484902e100fa9abd4f36dae6195239d4ba9da11dd685574565df0b2cd9b4cd60dba42f646d76315d2eff56b24f7ad5744e109148d608a0a130b278974047992d7c508216a134cf0dc73931c85fa130ada08905d0046c2c5d05125db1fbac0af81c3c465bbec62fe0d93f7971639335013e7daebe749c1369764e9ca158bd27624fd1ed440046bdc49a6c4319ebc41a813f5859983fa023f781b0f99ffa62aa22d77363970f4e9085e2d5e928ce0dca2122df17dbcb3db72c73f68f7b507356ad1c7b3c47500408aaa4aa8b9070affa7c7fde7cbf29c3c93d29ac2283543e0912795d71e21e4c722d6db948ba8c30844879b151fa7e1543c0dddca62c34461ac3220a57e7efa9b01d48f8c41c13612c74e47feccae95fd8e1bf41b6e4c5946c32a5edaca3b6a89793ce34f3579fae2a765fc21c3521d5c3d5b3d80d7fc29f92bf94127ca0e509112aa579d66eb9a015c001be1d4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b39a0d5cfcdf3534ffd2b1f7f025b33dd949164a50acba28b30499c7c6a5ced79dc278df30aa2e1e8086377b9b958a79751f32c4804a435f237c74fcdcac84c6fc635723446196b46d44356771eb5e276f2c8a2e359b2cdf052c0ad7fb629fef23fc22c82c375ee52601f858cae79643646f77e4c84fcc31f50455a48095c1eb72a54b4c0dd36ea3199a762a885d20694e0875ea2d2237053086dd7d34982ae10971b6bb478a85193d1114aea5ceae7821cfca3f521d62c57e7c97b55dd5fc1369602f15874925745503ccdf131345815bfd16b386de391f32cffd30a529e9f210cb3b9efe865f07b50c26810fc7220089b193e51003c819197e0d4a4044c5eeac1e87288a091db026886e09ecc386cfc378b775f42d403d6cccab2e473f1936eccb4cd41d5b246870ebe32785d8f9abc503db5ac269554ac3b6286b3b63434de33aee9df97b817050b0b857906d6cd4cd4d07b11df2058bcf924405ce020c42d01ffe04bb3919deab04b190d1eb4906378288a6feb1a1ce01e8256cf5b5f8888d6ce18b093151ae18bacbe81c42058fd35d6fcd1f6385d9d7a01a164cbfeb6882c7d094d2f058a5686d64708c928967dc8c7115ea940f994416563115d847e1c3e15f63618d42af12b47ed76b2ec0a96634b409c80241abcf3a68b0e255b9da7985a966ffe8098f1af6c7fe9da64be053c7db9addeb142f97a3ee6a90fe2329"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1747d4961c28d37c225f944ffbd967ae2fcb8f5dbd3ec217cfed16b1ed602f3d00b16007f94369a754f240ccfbf089f13a086d7e5cb5c39b4205d24c1b1838ab13618c8e6607d9fa52d08243d09c2ada538ee032fbf4bde8fd0b80ad97a557f6d3deb365481e6895525db6664c10f909a87915091608764707a7afc42a64a5c8a8effd4855485de4457d74765aa82a744614d35c83a21ea8f6b5591eec74a31476f39fce293328f9d3865070942308d64599d704aebaa707e406f3ab55945b7f9165392c13d069527011d813d20638d80eca7fafbdb548161e7f6c8ed25c0e8ed1d0faa3179dd18e75f0132ae11bc1904f7b195a345ea2b78025f0de6d81e05c01bb1734c766eb23e4032febfd5a3617ed3641ba7e18a16cb46ba9cf89dd406f8ed55748e0e9e868578a6575470b1066e336b4bf8fa42fc687d0590c8055866c3bb33d272f435258fcc2208a161d300267e7014b2a6bc95a42638daccff3cdad1570bc3e92746108d56d5ecb4a5fbf7d43062b5906571f41e09a3f7d2c5858b80cc25f9fe54774874539ffeefb485e25f2330893a16a0754b681ef34672eb8b881adb6700f5e19251259a3d20f42fd8b9bf3d9bce3b7b53639564171ae6bf78943009583bb1eca73809b1703f1ddbefc678e3f435c356676803a6072bbd0711d367f28f70338414895bdead3c97688c1e070f77697eef691a8cc609660e4f6bd"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bc565c386b1056d48bf0bdfeaba954dca19874a51159f3ed835f2ed3d9023e3752171e70cdaa1f8ad1bb47cc921daab303f371759a5eb35a20722119921f2b3b866d2a806c4ce9ec9ea458b26c3e4d1e1c146b4e5cc855fffe27e4409a4fbf1c847ee6894a74a25a28e1dbdc4c3cc58c645e3b81be590aef4ea038add13779c29dc7c25710750cf516551d53e8a50f42f5117b9c6e139b2e8f1ab64331886a959136f55a03614d230b2f2b076c5d76df5dfe1a3ecdd38718cc6cf9c4d92f63df73b6672591760e46ed7e99ad65a800f15df2b88baed34d70242ae8f1a966f1289fd7beda15105bcafffa314f899016ad723a3e8fe067a7fb7763e019845caf1259b8f82cbf4dfb8682c7ac98d9293be1f0e697dd1c2c5bedac5a8f4c84e7a27f5fa5122007991c34a415ca7c8ea7cb15b16b2d85783e703e6b95ee7e2920fb5ca35b1f0e06b7f3107255e8b3d6041c5c105d225fd3eebd2799fc6677454a8a72d9086f741e0d83b4bf4a4c8051e5f02194328089182de71ad70c083287150c42eb48c613ced2aa51c713fffacf451c7bb03bed05280d3b30c2fb702e9efd31b7e79a3c27e419243da148024186afb40213a5c9b9325987c3abcc40187971b8590f6f4c3f945a63044851390ebb6ea99fc56e682c2c0c1b969f1fd265a7d6d11a38ec96f9ca517ee9849634bdd0cdfee2ecf0af21303ddc97b93e9c12e0a136fb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3d8f557eb9f275a861327edb49e64aab8f27f15b0503ef64543cb50003c8e8198d1a21b220ae7fa8f2b9a82d150a6c07777d68ddb51e2ce4954f96936bf62f4f8b0417138a28cdce24f760368cf8a2d316dbe30597fe6060da1ee0a6a8a79774431d63c425a70eccc0ba2e6edd5e6708183f556689235736610049a2ca48e3ea3f4e15966eb95401581d159f89128614af8ba09cb380b814a0e0798ca89413a7ac4dd882b051c95599e6997ea029667103433c8f899b97807ea5e08bfc96e2cf7b1f76bfebd1ee3bdec90b6ecdfec135f97ccdae19d9c2a8f27fd63bd4ebd8f081df8db0e467a6f8ccffc09525edf345558446a919ef25acb69d419264af84cf45ac9756af252d8108cb10fc63fe8d0f15d8ce8c3ba4aaa9131bee157b99821e2fbc479092a9bfaae7b816046826e104b9f89eb2472b1d604ca09d4d530dfbb5ce8ed2cb4caaa0b0bb0c7694b37e64ad1f7bc26a976bf69467c671561270b38b224f0817e0380be488f2a86d1eb753c1470de56eb72a18380979e7d2f4b6a39778b4546f8b4782b19b5cfa41544171ff640a90a418a8f3fbee0e0c7a5e3a30c7fc2beb63a6bb51a071d6fdb3ca6ffbfe9d49890529a4c47452cf34f828e46c2d14437c47fa7a0ed16a1024752b5a9112692ebec7fd4f81d443d52c94849d3a1de7880ca30886f1b7497a18ecb3da314e66b6ac35996b609682307e1846d1efdf"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7d26b01b6f272a51683167a0a345b132e2a259b1d2d255d839844bc1587837a366b9313c33a76a8e2c3b0dde023d4b4b45090fa8ee80ee3bc1ccbaa7a69aba4ca0dafaf412aa618b4ade92260a34b60792ab817a199d6a4efb8edbd1a6b1f9a2b9b100eca45f2566f29c9f3af891442804e7f9784ffe9cff2d8c78485640668ff7c0228acb147d66f8e42e72ac8961dd6f1102ed68d9812457c24e87708e4225ac098b4d604f1863fa90a45a6adbb67390d715a393e1229e1736bbc8a7a5cf7b7bf8a5d132122bc94f6056a47dd3f4ab0fb395adc96ea6f1ed3f96d0907e14b80d539abc99d5a5ecd1f7cfe310adf519a15c2cfa0447190c70982c07b35ca89c5717b8cc7bae01cdc7725af43fcd4ccea4175564b1a673c464d83f8c43dba42d0e2785245dffcc104f2e717782886dcddd29ca2a7ba5ee630ecd2ad185ae29647b728aed38924001ef055077ec01fb0333d5a687425a8385e7ec274635e780e0e4ed50dae9602b133111a08ffbd266945cb6e798b45820bfdece8b9ea7ac10253fa822e45071b8cfbe1387b0b7b70ca0a071cb20c5f0487c2ed022123606dd6a9228cbc892ff0c39e4816e8e1974942cc094cfa324e9074d55fc66acf160fb8577b04fa213a4010133211d59714fc1bc284a9d96d9a7351ac644d48e0ef6518142f06efdd702652638ac9725cb769b8c8faad1ac0c0edc344d17483f4f1dc073"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "19f9103e7ea9ba79c0e880bf8724136202b5ad3328108384813ebffa98e1c84c7f335c99473cb72207371222e86a6c6f601bbf017a1bc50a42749730a03bf6722c24a928156b86bccc97906be1ee6abde357a2ec4850719d8507a567cea7d1581c1bfd35b78aee7e44edcdecf768d636a257ad39f9def79e0459bc33aca63d97287e3bb37e41482bcdc0bc41071af3a01a33560db1a150ee744206dc5ea20da2bf75e5d2b7656d85e83d9bf63250d97998e3cbeee6eb3e112f590017c5d0883af97b7d3ed36ec7f8fce6bc84c7cccbcd7f69b205f9ffbe2aa940f929be01e25861efc0bc0701f366a5197e50da18f8d79cd277c48086d1373ed67b983dab817fe44fc1b85411c3205a46f4e209474a8b23c0da698f8c4130ec8e032714a05bb38dab60c79feacaac3907c4a353f21c40f00d3df123fa4327d686576606af1e380472712f65ff064f31ead17c79c87daaa0be792f8074099ce70bae1016a62f941aa124811b1316a6a584401ed8b3c5c58583cb43afb29140c90422c9557b8033413604cbf425a1f3d61e7d8aeb9f989a2b4d2549602f2db514b44b82e7850388cc396f5be16ac1a5d4e919724239c5c784e16d6439589e832031c1a133741ed373a1ea5a7ca08916b7a305ec97dd8f2ec080a051c60f4e7aee36ff5ec62ef81365806ce48a3eaf77ccdf4263b38207fe922ae4beb49621aa396376357b03dc88"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a5c5c5ceb2d575014100aa459cee7136fa14894260c42d89da8b5d63e100ff5b504c25103319366e169a99516de7d0e14d37c590b586b5eec989a9cce06141f6e130e377285e4c64bdf57f2821f6aca81db1bb95539016956039d74f7c3f47fd689eed707f5e6defddf68f0d5185debd03d67bd84172481df01a83bfa45787585be655f7a064f8cd86d03fa2537f061edcbf8a141caec80c6a745a77c5fa8a00821582e7975e0f61a5ef0cc5ec2ce48fb793dd28dfd076b67424fd2498ee01a7e6721ce868474bcae0f29ede3a3afc7d6dae8bc35790ddf1e61f170d6609bb9634ed6bcf2482870c700dafa2af9769ddeb7bc98fef19fc04ce1663006d44f388c93cd6f4e4cc56825f341c09073a6252f142404b1521c83b42272899b19b7853d238e50784a9d5424290d1763a441a7709d02e49bec7c7837fffecf13ac1a8fc21764b5d88e333172a660c816ec8472a921dee5782d1037f32f9b938da205411c05f8ba0e869fed9efb7b898558d0a5480ae0092f836279bf4bea3f20d202bd8a2cde9cd118c84cad909be76a5aafccd602158052bf7d2ad765526e26648eab3526a5d5e8d198231e88f487641c8232a9e15e6acb1e72b550c6d60ff47f3247a558e94b2838032b2a43ebcea66e47e554ab8783308c75713d58e57bac17ffd472bbb8ace21cd8aa3dd60e712c76d81b7bec09b23d3db48549dbaa7dcb42e5e9e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "959e078e58b4daeeb3cf822627f6603bf94ecc5bb5d06afe4755fb188b6d7f96223cbf39211a8a37929dfa8c429544723de33d8fc7082625ea483abd525551a0be89a2d3c80d810e7a66b86129675c87cbe54b3b5b636c057a3858a4151890fa45652b673399ccb0fbd66856c43452407adbf856deaa851b3e3fe39df38ce388bf8d368252d3ae1f6290328a3db8b924870eff43e61469aaf2f3a82a5afbd4ffcbff173bab81de4534bbda85f92571021975e06ceda4232b821e8c1fbc8fd897086ebd5a364a212ad0fae314767ff535632abae2e11d2012d40b4f7d4657fa6df28fd0105e6075414cbc05fa139adbd0f777d280ca6cb84c46b819293f165fb288a96a19fe58bb4ce835e0f2fc8827dac483bbd60c5d7398a9723646644c20edd068efa8ee85806a0db06f761bd325fefd07566a34d9f5e61897c39af9d7b953c3deb5817bf01084bfa3f8b1783e2f545abe8ac76f1d1e32ddc5ac66695d976f111e05dd921f4413063b014167e45228eb070a390dcb44443ea6ec44794c86804a64368a9ed51dab5d95b34de8719c602727dbe1952d7a6107a43a54877871ec9a82dca237eaf7ae007a3c35f33f3f39401fa4e134623ef69feee6c2ddca8e25cb8a07f8a696a0b344d046cf3f83d3580b1ae75af0a033a000ed490204ee19c0338e5eac9906dc3d66f5edd402baf5576c7df56eea17070dffe047997851e0a7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "62f4be8408c6b8884e73392b37df67e92bc0efc3ac3f8d75a226d0d4955177b71d63d25b25353f34d4ecc9b9389958129d3467b57448e75820fc6630cd595c58263a582027dca51a7e84767c2e619fda7746f230e9f0679ba4407e1d2719774e8a4476afed55cd636df12391a55e4f94a37b81747abbbac5d95891e4971c705402e8a9e6d0d9c4a028f36ff2db53a12624086ed6d4deca25801d849d82d79e95d09eebea8d783b2461d1af6ef4ba880aadc1b25c7ab8dfe474f8eff200ee551fb261c620499b7cc36de32f20bdde7891eb0e7683893f3bd9aedf0af9cb06fb090628d0b83ce6cc3f7a22bf337a30e9b3c77e112ded280a391e5c66774da01b282ae7444247f90a4ef58eca6983fa271442b8706f881b3f1ca7c338bd5316f16bc8e7f5887e54f39f1858d2496f724ad49cbf9d1c53bcfa4ceebc9327d977d844ce25cc3ee109a54f33c7fb5ed72149f454b39da42aa64a96227965936e70c79b3d1e0aaa670179e5293e601e30cf18632b00480592403b915408a054cbe42c81a9812e9722fb19d96d9838ce9b5f83e953305278e34ed676f520c49814fe45ff07d85085fcc262f93b622fa26af2adcb5996b241d137aed2af656db1d00b55f16935b04bf6f56961f093632f3876cc1285cf48262b3d5431932d1ab7c509681b98714fe34c59ea8ff235118155d1ca81ec1f7467cbeec0baab014b84d26d62f4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "93d462a876e26c401e4efed28a56ff2f4328d4b66d26ba4fe5679c334d7466d3b9907d4b4f78e933f91aa5fc18e36b751a6e40fb1221ba375dd55805fc0623834355d39985253dfcffa3802e8719db3a213fd3500506127fd9a3b856f06f1ba54c720458b1a40a7c349df52515615e61c7bb93ebf7871d7f781df46467e4cf37004fbbb87915fbea73368b5108de32ea25954d3ecc1777d1d6f818ed3ebc2b86b7c431df48974c5efccab71c44f8ee7882f9ef8057e87e1c48aeba10952b48f75ae296943988460bd489688a9179d27eca11e3878f7422177ab6f451ebc48d30ea79609b36c4fb16d35f43b0ac1bd2e765841f571413cd2474fef28d695a7daae3a42dbecfb4ccd3c3200b69bf39f725a15d749fca56eeee1b6c43bf59e490ae15237992561c8d7994592b4d911e8d26aa95b131ec228c5da95367e3a4a0ce74f73cf3a83d9ba31eac9673e73361ecc504ee52d943470db9668aaf8263bee6457338c19439cfc1d24a4f8fe20df2270fc32b145ef974d13e666124ddab7c5d879a2255cadcbcc78167e5a6afe692d2711450ed29f5459ca4a65168a090f17e82323b0ed5abd8558509071ec5b90acb7353a6bf5001bafd690c8c35cde3376e104a9c46b3c4d3302dbb00cfcf252d788a003c5cc50dd0e4cdb6a4038e4b7cf347ebaa49a9270c2b846d032b5dfced84571a1cf365c6a83a3f3eae71b97566a6c2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b1c3f45878014d91b5c757bdab09dc48b38af3068ea80e1c2d412b8518c6b3382d067bbb2308d3e5c109bee3e483c90717d7c6d71554812acbeae40566f205393c4873e63bfae5acfa95ee73559d152595b78f11ab33112fbaf0296b335e6efc4aff2dba640abc0cc76c69cdc0f4748aa1ab1c4ae9792e2801a852b63f297f0d6126fd57df87a628a12cd1b33f9fcfbacf140fd393282cb9c3c7d04a93d3c7e00ddd691095530643260973134504911d98aeffb49d04e8594a261b813995ba19ada639de090bccc10b87ed1f2304a16d2a4b5c0c868b376789d03f291ae8c0bb9ec336d89c5865536bb725fb94a73dcb830f03d49d4567a444b1ddcd1c575fbc27adcaea7b1d98949890acbb554b49bf92924ead8f616c83563ca93874317048a48d71ec0aada0a7b8d05daf073e8095bc9c6fc280c6e35ffe414d75b059efebcb67ce51c3f6efe0967bff90ff5b1ec7cf818d9485f1dc8baa5e8e30119e055448f0d12b0005a0581c4a296e8490ca032bd4ea05ee8d7bc3bcf290cebe11ea116609e13f5fb7b9f2caae9c5fd233c88b8f5ed90b5c8a167187c9510e6e902eb927aa7b315dac3ce141aaa61a3238f29c19a2af0d76c9ee5944257644d81a4e8a3a5ebd4aba0001c4fe6eea68d01a0b0fe715f591e07d7b39f560a91f3559542a8fe9be39424fd852f5dea99524cddecd1c7127be1f6524d5de2acd10c01da74"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9de0c820290da7fede3b34f8936c27812fd7c039c23a49117215ee99e2c17ee43c48727b6cf75a404936d393c1c592ef014682d49144263cec28708c1909cd4aec3270ccdc81de872f30b62fc6379ccb5fcf7056c100b2db6e57f4d2dc217a0ec9a3d6e912776c401b11d75b193e4b5d0104a92b0110d8af03740860d1824c5569451183c0f9a8bbbb84b64d2acc0595ff5c68ee203e0a0b148fae4115298ae9efda89aed3c7a5185f8e26b9b846bfee61d98da9bf0bb6cd5e4029dbb10f96e9f30815316399807ab31aaca8b3127ad35e2de8c01f2f63082898ff7913e3b8cbbe9191ca94074c3c99ead0b363d35d64df211462f42a30b280f4933d17b0f9df9ecbf424c07c733fef868c1a42cc380421df8a6c2ad49059d0cf7aa585c2a3314e1a0930a340d30cb4d4dbcb0514a7e8fbbe93a6071352ca91e9bfbce906189b8a319a4f44fbd4aae52477f90b75f82578adbf1310c6c62011279f1bc8c71519428b8b9be578a5532125a47900e9167f33d18307ce54b140778b5502b5a22198d1300ce03d16ebb95c4a927a69b9dafafcebb4435cab780851ce586b746f1bb46186bcffc2e78c58211087948546eb9260742ae938b3f04f10d194a4c937f9affd573be9942945e0720c5d3b4740f6a498259195243e51127a581cd6728f0d8ef67261320737906816810324089d9e535b111355d4bc1b1a1d082fe44820774e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1a14143280cfd555bd05a13d9d546a94f5fc0e7994eba32475ea07f73aaef2f5e914c6018db12835b3168fd8e39cd580918a52ae09df03b93afc2335f05caf5ed944f9210af9223108b50bc49a48627487f7131a12d35d338d840c74961a55b41c099b152d052371ed15a7849dfb37f65a980f628f4033803decab3db64c80cb39cfefd94a38e21c9c650d7734a40262200c1b9265c823b006a3c4d95e1ac3cdd493015e4616b70bf73ff0cdffe5c5c05de8e5007c8d58613fb4280e70e51ccf2680098fd89eec6aa1d860d03a8b2cb722208a68d721713ca6c2c5c514db6e296087a8aa4a65e0be3f721a9abf46aa4767677a0016e27e16fd12d00ea0b9bd30b8f44e698d659aedff34fee6f563ead88fd2d53f2c5260f23d299a4bea1829b85ae898b47d76fe64e6294c1a7629702e5807f9ae131a8ac34c694c8284065e986a4134401675ee4124fecbfb772ef057a5a2602b24e1842b7a4a160bf0ec6b599e9ec7ed6f4bb6be0c27c0c6505aff4b3ab889a3e8b9c24bd329d39a362b8446a9b01827330782323c455466855f5de197463fe4d9810d69490b12cb92023b4a02a01429d8e03f22dfe9f614aa326f0a7a0d153cc6f4f7c9b5d3916fbbf115839c7250657f03e17931269d043f16612be118f3d64b0a8a85fd57ac7fbc02ba7a5212c5e71813a3f711245c68a3b28db4723462af16e1a3db94e79c344b7614b4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "76afacb11b73f2de01c01482b3b9c0e0be0a814bd0f9dbfe73e5acc49d4089d7702dcd9cc4bb3a4efb3036c8ff062fd816b41ce2b144c6f7fccc9c6edec44609d13d052011ba6994c74c30c5e17670ba07868aeeeff18a65a70408fa422428bba9131b8586c2a4ac2af0aac2c2a0a2a56f3126d1b76dd2608a3d9512b9396559491a98c761226ed435ac657172664b865fc5a038747f3ee225694de434838e0b87d14fed71a9046fb36434104051a17a658d76b129bffd25a11098137f561cc4f2e3a72cc66619658848dafc5fabce6707acf3c919ca2f88fd4117eb3b9805d2a00dc65da7ae9656e77d671872d73dcc43e72a0c94846061cd7ab361f0e3d33e03d72732e39545e6283da8b50726c6ccaec0ff96c5a3504da85b11e61e167a7965ed18b828bce7606f1aabaf66701c2d7c23a6c7dabbe8e087ce5302d16b2bdfc372be4f7002e7d3204b5d410edab015995dbc4258205a76d9ba1981dac70aaff4059c87255ba196140a0a2b8e484edbaf242dd3e14780c499c78c5c809cb11fa0329e17d47d890b4011838aee545b4312517527eb59fff5e52a125ce8dbb9dae5f72f3577344cd4f2330f09758e36b50dfd38006382767393c308c0acf9f4bb0c580bee3eb619b8d94a30568eb5a67b32e602370f7023c363c7b6d8ac38cc2666914ebfbe0b190a032405d73c7c2a8cfd1349e4fecb90d7e50575e3d3f5be4a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a08cc360ffd7fa1cdf82be1d2ee5a39b9dfa9d34eec9a7e5125444a080ce3ef49061d8f188facd751b06abf4ab4360ae343c245244bee8f6517c894491c2dbfd94cffca8344066009a4be1275dcbf3932d58566e8d71be2365d3ac081350726d429cc0a4edeec41713a3496ffcc476451862190142d895449851f07a79bdd3387697dc0b76a1476ecfe9cb05675b49a12f3552d0c3d90239899921fb41bd26774e00ab270296300c7dfc577f854d7868600f8ac69d7efa5cf331095ac1300d410c6f25ad48894474e9008c91cdfeb187feaf47c6f4cab4e4cf83b300b19a566abdd957677eb63d30c53c4feafd3bf37e2bd4680f2c4e473a1ceb44dd7ff18e99dca6c506feac0785255f91a03267a3268603e4d39ccf16880a436c2c87c79e075dd4e712577cb9dbe0dec4f42328cd1f369478ab43ed516bdb45d91fb237194149ee89dc656e0814f951ad30f75ea04a0ecdf8e3d4657d47290502d67bd1fe18b9530765e4db10211da2e1470849d7021a39cd4e7b954464296595064883374cd3ad5ac417fa48fb2816d5896bd7f0b588be9e483246c48afd9898b49889d13af851d064cdcbb4ce35747b15d1c7a050aaf494ba7e79687f59f326acae771742ac7f7b0f1a680321d0356f97164203260e187d661fe9387b9d20f8f26e3871eb0ae331b4962599490743e1ed509c50d55721be351ab7662f2d9e039699ebaa52"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bb59b5832cc0b4cb649cf9bd8548cc025f6596fe73c3315684ccce1b79b453093328336edfd8562045a4ba413aec0ae63678fef9402cb0aadeceb20f9419a654d81c83ef0e4183797a054091dd8fb06d8614ab0d266cbef3b871bdb5643dbe7a93fb0a733166a556993a60809083ef5a4bc70b525c5c0de3ef220d725059561436ec2162c3beb9793f4e9849e7b89e0a26c44446e52c514e8000c9f206676fd6a034d54a77c31ca73c2396f58048d6c90148fd6d2924bf125e3b126edd1f17fdf31498ba04b7b86da5f1c4a6843a7bf6394d021b1692acc641d0956ff3bd6b7663a4759eafe920eb28a363ad12cfbbf654343aca9f670ce6757ee12f21446c23ea32ac46b79d10a3bb55683caa97450607b5473920cf10c7059b5719430102dc511b039f9a55b9e1824332c9b0e29608666c0f1ca37c8c299a9c1c5ecb25e2b9695903f8d406c98c0ca3d74052f09d16cd2f4a607d70732b8d877285c9089ae59dac80e031e563283270dffc024dbd8e70120d44b0fd36c643c135a811dc042fa376eaddf2e3c1fd5f2a23c0b7f481f5a053da7a4971d911db3acc6d4a3e60b63b291debff77fb55acc5b7081dc75c651706986e90e9f77edc2dcf721ead020f86bbb1ba439ffd165d127e51063b0916f36ca292eae26962cf9a59f68ef8d200652d42d13c80ce7f0b5817fa9c701600a4ec3fe770a4b42aa8e6016cd16d8dab"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "557a0cbd9b8b16b5c9603b2d36e541313d22a1904f446dbd308308679a096c2fc3110d4e98a474e0f5a7e04628f066b4480697dd29d63df810ef7f1890d5b16c3a7172200dbf7eff2862bbe6eea017cb8c98097bec1f342a985ed7d9e462a55da249f9a523c80b1cb5def853ce94cf43d22243c028c84201a993d2eb48a876722f939aaa81a9e92e65b07e541894e5bc23d8cc901b121dcb6f543a12272a81c8274bcf996bb010188d99efbbe07403c708085e5e7b24ac09e96b2fbe561c2d4ad49ab3f9d45ed7c2bfecdd26f089b9bbb3361c848607fb50ebb00fdcd8bc9dea6cd311ea49be89b1fc59063ef2da7a9b03c5b8aff5478e7d8a7aab8b271215d4f26afb0d6b71b4520eedb4687c72e26680e79c20ac06f7a245b0257567d3f325c186f891289513848c7066acb96241b1efc2bf2a2908f39576c9976131d89e4d1f7c71f0a4b97238d05e7e46cd207c0c864df8b8df368160fd766efb98cccd879afe48cf448eea4f660b069be0b15a6bbd561671997c5d92d0e1c0d24a52b5ac82aeceebe419b6e092ecc02b8f151a33108150301bffaacd8de624e4c50ef1e392063b9249ac6d2b7e747e5899619df886e41f92571d3015a1eccf1d1de6bf469bc54442161ecaa56d447c99ee5224e1d049e626faa95cd1b099151fe6091660fdd2dc9aae83b4c2228447b36a440c639bde2cf65a14fe778aaedb21fda83a1d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "857a7a9076c1d8345142a6f66d251882cd958629e8e4a101f22d75bf0080a964916c5224484f4ac8de771c2ae210567b09bf49e8842e08370c874bec3cb4472cbf597f4877571f9a89e01e2d7247229103a7d9086cdd86c488dd51065ad8dfed3b30c9505881f4daed5f86ee6e8ee2eebc995b8da2e8b3f44f768bad620192f5e798b31b6eae9abad0b6db18366958b5e6c04894af47deaa57dc443d03391adcd5fcaba34dafe33dc8bea6042fad8d5313cf8b5b7079bc3a3a7b68c36777ab2e6f6b72cdcd93ce0297509f3db4fbe69a628696b13f705622e679a0dcc64037aecdc5b3b379692c048162fb8290ac71f017e82a85a8e6550f53872ada3efad72da3632514e50e709f4ca60c1f079deb46e70724f7db31f1c47fbfafebe5be9e78168ee135a629b2daffecf3077b8456ff91dc520b344461bf2c8be7de3f9889a67d0811695efc5799853c23640cdf5f60d837019ea6a536e27ea9c16ab5a7014e1c4fb6005d74a74bf1921a6d7ec725e336d10e1d649f4731b4ec2be54ff6e61ccec57e07f6a90a80085897f584b371db73b27d0e8ca29dc7fc35a809f9c69d7a3bef3740c93b0aeb3938b59b018009a4580e35337599dd56b8d06c63025fd12952fa1f292e053adee0a8cfea8cc8b5ee5d01ed4f141356e294bf6056eb712248a0884508075f40d0facddeebba5d73e6a9dabddd829aead07c7e473859e479b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3722ef91b2465c53451d59972adbbe6b7f65bf07c91677858924b5b5b4ec59422d6d57ec065fc652357963d616593862e74dda3b43d2f93fafb8366d4a7c708e3d0ec1098c6f92a53b7067bf73054662385957ed8efaa09675436154fe3b069614a0c61f58e78ee5e18dbf8daa2cc43a3bf46e4a71bc3db0a80c719cdcb7e009fe6f0757861a8d6e3c59a5596c428bb1767e5648cf682d03f5d0794061bebb57ef1b817956e697bc5ff3746510f29242eb7a4ccfdcab6b9a9daa343f4d86763f498fb71cfd842f9f8d1f7ddd766959099066a2adf21170288b2dec74ceff77728cb1f3a75c5897c0ff781564f628286e61f21b25dd5b36f8c8682f596b783a29d84d7b450c910c2b6b20434f377c304d08983af0b12e16a700f063b370882ad64ef9310f5716ec50402f33b336ee84a6cc96f115982ddd3d35a9494ed3d347d70f61cc699fdc7a7a1fe8808cad7f13e52dabf86ad417bb76614c0cee7e63a53f5f5e5b7e7bf04e94ed42d5db1d1e70455ffee317ee167f041b2619b6549dc6627c954f65b4b06171889429a21bf286cc6b80cc18db089fbc00ec827e3360fa1ce1f4224ada5f778c7e433863afe19350a248bb78b7c5aa6ecba8c2f8b9936980611c4260ac3cbf4d821a22a3d886f598085c3efc8818a95336ee6a748d0c811b7256f3ab8eee183597956f793a44e85be9f87e92b6b197baf7cf2f7a08c5f9c3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8d1a54e2472f14039f1a2e1019fc6ae4159ad89f6480d141b78ebd8cd4837246a94c5938a67f2d2e05b5d5d196ae055d26e1b4fda469d6b8068163bef5bed0be6d098deb84e7007c06b3b6eaf14a07130b44dd01c14d7cd0d3fc2579c220f2822628edb9adb9aa5509858c14d242bf1d77d56a10e379e370c892d1ff2becf19aebbef2302aba66763c853e575c29421ed66f842b859c222ac2c0636078057adc1a185511085111d279b520cb2fe43b011554e8e7e37baf2a9a51003630759a9b6f6d2f18074751327ed739f39ad69f5275f340bfa985a4adcf865478278430eaca43d99cfe865bfe279ce417c10cff0f8cdf4d73a5e5ce77c95a0e306f3500b19055aba5b389de3d7809498725469f4396f05c2eb89a09f55cbfa087202d7c9b1f25fcca58f3908199a9e733f57aabdd3ca42bf2ddcc5612c81cd8619bce0c3b339ba8e9010535513d2aae38953b573800a4924a3e26a5739af64fb0667370038ec0e2f09b053e1c32312c72583ae40b78846c7fc128fb17b5f5cf88b276eaab83c54ce2db2b8d6ffb6cb8f6d0dea42f6c4b8a01999285a55c2e48aab2a29ee15d6101b699bd7d361436a6547788b68d40b340af8e61ed6caa189e1d095fe735bf98dd4fa8730c204f67dce1faa021238a1dcd34b14869d8ecf8bc283f964cfb7c8f01e4d1ed92204316b5f3eb5355adfc8f04ba97a2b9f0f221ba103551458e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "37a5fb4d5ba5c2177b7fe767e59ed949992e0bb6b0c9e5d1cd2b777bd1f57f60e79799b42cea9eef4b0415d6d1825199f44d703b80298c93f4cf5a46b33c891a93f9b54b9462f0286e6504f0877e32160d098fa7b8f593010c5a315399660567adcba7fcaeaf557feb6b0b743d09866cf92abb2586560c70897d2d1d5c7958cba4bd8fa33814091acf3e36260b44158faeed33510f1de9a6c8ca38f3182328576ca98ee18531b24c8699e4f975cdfadce528f87914aa1e9fedc573634534b2f080ff4458f64e1e02d71b2490a0db3595797b5ddcf213238d4b91d04c44bda997740e4d1a73b150f82e874cd6d062955f2993fbdf3523f2132d6cfd6ffb1e33ca1fca9dc53f2f767d604aea78a3f2751df2a21ef92b408d10549234490172c26168e293acc3b862e5537f9e6975476246e91a72e38b5554405e130caf094ffead06e397e885d79994dd3d7eefd7decce7e93621e93867d33c68ed87ed11ffa4ca700ee3c36cf06ad467f339fcbc35da52bad2c8e3cc65e9a89e6046ab0142095f0502f6ddab68f341f5b71c39d57629cd66bb7b0b4fdd507105cb12ec3810361430a78ccd1f0aedd96fac40f8f31823d6c3c11534ab3dc6978838ef91e2526362ae869fdfc52a6166bb5611a43f4783867649db78fda04954cb6a52f43d81048934519429de8de14a75a87f1802625c391138d79a96775b87ceff69d0f8d2b729"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0139c2571d73ed85895ed7e78bc4fd1eb47b9883d5feb7b17cf7b571ab4d9731e3210c4d4c3eb6c6f1f833f59e01e9487afb35a0ac558f8c337a1261f2c6bbb21de0a54d2f8740d452477ddb8ca734ac9fdbc508e77f266b6ea3291bd26b1617c7f2737fea1b154c035ecd0ec7c796955a66d23a799f755c64e28b0996ce26c529a11d876423df3aabe0f2cb7d8b5a7688b4b1a0563ec3ec9265171bd766f226e855567348df48da3e7c5b12bb6cd6b3773eff51d82f0de2fcea359d88b664dfa9b33c5aa079a9e0d874553a9ecaf76c0e1358c7e1f4cf2d0b8943555740a827b98d141e760c27f7c673c54d562d28ef86770b3673dfd205222e6ff0b03f394e89ce5e04825b4696c4c88e92dc3242746872a8a409e5e01b07ff64ef1e9554c35cd1630a842125516c6f4073b455217640711d80d6352e263ea0439cb67dfe9d9e169c5a9f0a34d21de64d63e67b4474e1004af8a251200e21ff01acc9290e6afcd02da6bd5f18c2af4ac01414eed63211b14af38ce103d190061ee6eb54edb69b4e443708703125883647466784e45ecdb6ff15a9be7281491bbd1e557445c77ef7d5de6d50f8b03ae9bbf670edc8d87b7ce3d39fb57fa245ea98b54c4da97ff4928206368841257880198236b308ac230a18b20e5b89ffaaa58be66fb748a2971794a88f36c7c3b81e389ca5cd993a0fe6d911838ae07480925d4899e38e83"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "65f98b901b21fca824a5c3c0175f305a09c7d99aaf15df12801c7b4a8decd14e99bf1e2a378aa29ad3544a15f281347812a6d02f80711139effb6fb0a916b15e56f87a3ab7c099ed807738b644722b0df4f9676bb039c4417ab9668244abfe10b660481832b515c3e756cb7726165a50281bd4655fa41e5df37ab0c870a334ab4377fa9861b0a7ce70dd8ad88fd7cc8f8cdf970784501e3ee3e62fb10ffa3da02ec33b723a79fdfab282baae9af35cba5656b6a568ca41a60d0bbe24f4d3405ace896b6267abbaa84666361b969ad8f64423cda7301e931830363cae6b98cf11f73fb9002780518d71f2f222cccd07965bf315c85625aaa3a47e319ac26f35ecd011282f1085dc1d84266153718b2b87b7736d4c0e175ce2a0759b57a3b412039ec5150ba3c2d84f6dee05006978437b65dc68fcdab6371a0e84c5db21697436fb4a74fe24219f077dce31a1377117807375774d4533f28b8710369c14d569806ab6026e0dad1f39a0a30a766d5f435da01b072ce6dd0649b23d25f9d16dd80645c0ddf93e80ac8d7d6ff552656ec048ad7c31a52047cddc86daf9ec2904358930b0f082187b104cf7fb866915caac8522e060141c8b580d602ff7f4bc60deb6c29db8cde03705e9d3ae4a6e84e95728e1584f3d00c58afa45136c38e482fa7c7bdffa39da749e78ae7e2a5e3013422ae9f9576933ddaad4afe500ba1104ddb3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "30a4511b14bd347031dbff60a60f69a111a19445c3369ee8d9fb20d3ba93114df68ceebfa1a1b28030a43dd8505518e9a4a04dfe14a828dd49005832e57fdf0890661eeb5717441b2e27a42624fecedaa2f3035d0de3ee48f1f86d1bfb4a57e17814940348e57fe704e44b7cc7ba5f7b8891ed9c11731f7744303439168e9ffbbd5c8705426cb33a6d52dc9127bfed861dd2e85edce5c0f848b99db2546ca10bd65f5b0c36f30367ada3d400aa9cbee083dc2c3d99fd1dff71d779faada417cda34f1df080e2c8c0200f545131e385457a8a0236099c61a28ae737cfe6e200198dce46d1e3b1c97b09b359e86b9909187e42eff1abf90fa53e8caf1e17d32544bb78fbc0160586b0e615cf0980314d1e13bbe66a1ff97c0675d72b7853c441874ad4979e8c22f726961b077d3e99cf92f4e6ed28c8fb0d4f79fb2414f62a07e8f55cd79bc55d2662822aa17220c53888588d89229bc596d1e07883dc713c2595d026957f4fa61ad2a00ddf1d4dad8080a39fad12242793b18ae23ca6106daf717afde60705d59aae2fc10ddfe7231969fccdd91a347b6fc127eb52de6b92e4887736004abf2b62a3f23446ad8a0e73cf75ad7067bb2724e16e7219d7b294af79cac1961b15e4d1c647f6a107c6745fbfc322025fdb386c5553dd986bfd0647d8496a71f264b9c70343fff829016a94ed4acad561b59bff1e94bf6a0ac86bf748"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1402744b6a6c94923bea2f48d4aca69150de1c4d4e04ed7e64e6cd2bc97bd7892ec94d70173cff6985c736b6bd5a698c41bc5987353109ee10c2df36a681b6c81e81dd0e391254100b9f219c49563dc7b871f797d025ed06906264906d2923ffa931a0309ff9e072ce756d0b4785328c12d630169cd34956ddd7a0e73078e7c738e8128c9d319686197e53b92cef17d8b10d5c8cebf5003d4d2c38c63c6cc230d3af7450766e7759ae4e854efc1945f855ef2e098d8199b6b024d43aa9f7793ad93dcd99ddda78e9f9be8da8e34d4796280d5a6816b6bb7565755659afcde89b5c12f9a90f5919c15ccc3de585d8543693ec44a63cadd1fa09a827880a406cae0b51568ff0e622efc2b7c65f4a17b1de728c68f3a9293d904ec1bd33e327ecf880efedcd0dab78e2e11fbac7da503bcb7ed989d0f8c534b1296587cb21dfb049b83bee34033a4a414b27dae3e7f6124622e90a58803d8e85a43a692b675f3bddb0fd2aa46687f41482e13edd65aaa6fa5b40c349c45db18039355612239b15bc13eabab538be3b56bff80d3e142f69109852c46420dc156e11babf02fb0a68246dfba0af8aea918e5e2ccfbe420ec162784ebf7520230680ba64d17fce66dcfad87affea0b5cd2c892e5f147a497dba031f4465d98d588dc925a93305425cda853d0eeafee04babcf0acf849ce36b511d90fa8a7510939b20ed11f7917ee37bb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2ec964d15d88d1bc2cefc93b2d5eb3f2c06f686bf4acd04ed7e27ec045597b571204092038d1b3c236cb18f1f4496bc48d1760f6276bb094b3fc8d3a1bccc51c3319597e8f4436cb3bf676751257ce3d33cad4e831b57f7979d7cdc3ba9d39b4fa4c7f599b5023de8c9e97fa4b263f6c715b2e6ce138eccd550c5741510c059cdbb6f16df84c47bc697384cc9c52e7a5cf35e9265fe4a7673817d5ee5d88ea643c155af4350d8503a4af044da8fa87b64f151b8c579deb09768a6f3a0862a3bdc8f23ea5c22f9862e24795bdbdf01e8446e93771b131beb46230440afa4aa5665083d373359b76c8b4d91e860b45699cc1c3714732889dac71319afca09a0b769c18810ab0a72b8c3aee35188e5758473230840972b1b55a0895894ea360c3be19d13f8ff89660971ee9c6c27da97dc3f09ba6291b19e2868a0c6e7132f5123b53152ba33caf41c7d941d3cd0908255a530cdabc356beea4169c996a6e9b317d28eee79ce021b714f54f398fb8554b24fac28993f8c40415241039a9176227735d4392ba15eae47d89c0281018df2edec17c5daf17ef4d2fb7cb0d849397d8cc5ed20b52fc4d222e3510c3d75c24ac4964053bff5d15476caa86218ed5988b92db01ff999e74846e5218595f9a67b604efa7e771ddfbc2367749ac8172d8504846ac64816e317e40c0c7ec59668981c7d91d39582d4e5ea1041136645a23ad37"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b82c24a2768b4dd4852565218795876793aad9712b4343afe30ecbd03a9112d47378859a1445a0a13f47c306e453541228e8a9273829aad0653d54a2126ba0658a2c0b730eaa1f8d5353386f16019a258ee69058a30912cbdc5e50cb84ed47f6df681713603dbfb51fa46b3d31a9f5e9cf937b348022db4f6f512c1aa60974bebc6b125a049894c2bd4def0b55af5ddb6d8a228ea02b9eac2c46c835ad00e94ef5952997b7626c37d899bf2609a224e54c2dd27c09c178a681a5a810d594f2ddb93fbdf44eba21b0e092ba99b8a7e9aca3306372e552293b51b6b17646bbd06a3fbac254f7549e544a4d1e3822adafbc46c299f9f2450b0ae267ff4ed4717e3f4c2fef81633f9a1499f90dc436ab2f0a598e5390a6978f56ad0dfd6c8d9a9f8c7f4d5370699d1b8a86c779488b6b6a9170d1a82e6de47833774ad76f06a05f19105c9936146e98c8a3a6b5dad4f6e6e5daa01dc0b803fb4cfe455f20c677ff501eccccb1c5fffdb111645835183cc06c3763beba5d753a6ede04aca03f5f96155de6ad93b211b2eb2a70d72e3c257ae4f1a0cbae5642b9fd4881e36c69bc9e4655fa9008cfd7821fd72391209241f604bb2b00ea99d8f545c9bbad6258a11a0fc22618cb44e713adbe4176edd9c30685f0bf76e4de97862d47c0c1abb80b47b6323b69b77451d59bbf274619374cb3745725d5ad2c828fee88829286a352714e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "43f736eaeec5b5ae03b1c68c460e115d20a6c1b456f5847599aed9af2900c6316bc090729d466a83b6879834108dda0325770913f14b248a71707a52fa2982db368f86b4eab52dcca31c07cc5e7ef1634c6a1b25e273fb35d3f802571278f79b8c27a6cf2a170205c493fc457248170ecbca4ebd0b42bc3d03198489680fcb5e58bb31c2b22d2aa1b99d8c8c3ccf42fb784c878f3c7632a656781ef638381c3604b0f4d84fc7086c0000664fb6bab33e55105dfd5dfbef634905dafbc12da2a25df3bd8530440fa636812da39c5faf26e76261a4ff947795156e9d159d6bd5b0c9c9b86ee1818d31dac3f541a4bb6b25a02df82057be4f9320c8be9764e989aaeab72d8559dd35bb1bfc221940624db06f46e467936bbeb1b97018b7e632d770447bdf7553d9f696b6ef56f2b737aa6171791d756c0809b3d50c5cde737492b87a9c5517c6607df77ca126e08e34139664137b6bd30ce2e6d97a9e2b8c4d4d4441c71697697bc3ff75fcd980d6e65e8ad8a0b3d29bc952e07c19a5bc0f5f09357cb664dc8b79ef7279f047ff1a7592b5ac8b1bc98b99a426da08a2178f76d96624ce84e1996e3b4af9e978e041c5e326f3c9e0db0fdd7787e2c138063db4415182e9af87c74cd36fef96761703e5843aca4c3963f484b90b1b800d189ff727debaa2773e08c8ca70c6f762bbc935687f4bb103b53805495cc0bd6caedee834eb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a9e80f11d11c6a1c07319788837939fcc55b76cae1c7338e5858e56aa250343b3a3b2c898e0e47623f4f3cc1fa6499ff7f12bdd8d43b4c811c067ba6739958dcba6c849a7f1dd924b12a6442a6bfe5ea60876452b86589a904d71b7b997a1dc4486bc1b4f2a9776948e0c3d1da887c20be126db414566425a409577eef6969836bb84afb715ff8e7f434505503193ba9e398bb7a15df0b132bcabe98d64e05aef8007b9acc87b1792283468ba77fa8173585411da87308f3715d0caf957f44b05f5fae579551a111288bfc8e3a2c2bd41db3dd741ae3c70bcd9f01504174d9117dae1bfae2f38b0391a377d230a6dc246c552b4fe41c7bc4e797daaf5dc5b421d1b5e7d88c69c5d5d7b4dcdad3a2a854935c01fc7e44fbcce85e6419511bd3191c973c6590e024dd21e46c0a5144e71b4f7166f4bb69455f59c6e617ee457d0fd1aabc9f77b56a05397cceae6c4a7dfda5758e52f6c94a8949d426e6f554b2aa86767d32ace6885f4c63767775ea2bc925325d9fdf665dbc941d6cebcc0385f590ba36100e6848e309d3d2e2cd0523fa7ab95fa871d78510a978a988c34e10204f1d669a4f78858fb49672c13e9f489fca236b913fdf075a7167d1e27e45a6b3614e55f7817f191cb2e09fa3c98a6a77ad0330385af0c875c471010e33a8c1633a23badc03f7046a6c2634054892d60d5b3da0aeb3f14282749e7e5e62c9760d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c0886e882249dcd81dd653f46d96e5db093c4216c375e4e7cf7317254f978c846c11d34220b4460ab2062309d059c6314563b5c128a68c46da172fc9f07f569d5043b328e48a18ef5a59ae15b8368820891fa36b883ca71ea14632985e61181491e71b607962f2574f95e9bf95eb22370babf73361b704cac83c814c5c0597bd45658fedeadd0d5d87671c7f67f6825d0d18618f337e4d5e55062f474b242a08fcb1831916d46648ba55c857c897f3cb8868b19c3b6179966fb79f0586020e3b6abe68621f48004df422c9e9a69534542ad1b5585ec2f052768a67471357c0350323f3ce372609621692c4714a672b42138f274cef4a6d47047218576e9fecc506f5bcaa2339383972aaaeadf7f1efa3e4ecf1ae300735d27cb919c1366eed82f2eda833154c96eba7a5f9eb7e45504dff0320c0a12181244f47303b774b925fc3887259003cf5db9adaeb956d3748aaeeaf18e0d67b000076210470af70074bc7633b20d06ed6d3b9f9cf5868fee480ec2f80fb5ad0d115515249b4a72e256ae6caea187a89db3691de3d63bf4c6eec37ef2a4df99b9da6c47cc4546ce39111eec9983b8d352f7d34e7a975893beafee92e0c5b50f40f91e15be4f8af8c4fea1cc8c176be238bde66e9cc0778ea0d8b55e4cabe379e002904e1b5ee757bfe632b4f0858f42e0789d57deacef432fa528045336437ea1752730c72c9345eb3f7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9a4fe22826f1c64e9c88e178efd07f4ef95991c6c3e9c1cb10bfcf0a0c9d028cf05207e93edf3ac302b72d2961073cd1113ea5c8b3ba05a0e3c913535839884eb595ab189ee81c5e67763268f47fa7e313951e65a84165fb096edc7f1a8318e66d740c61d8bd9031d78189120262d2b9e50bf639a7bd70881e9e598f8f7d83de56793cf960971b60dbb24f3b6e8209d87464776e55d4cd6291cf8fa578a2d943fe03251898aabd477b748dbf12712f30b4cc5732826318b76bd638788d2bab9b178e12d28433e52856b7f466a155e3fea2e45e7d3e570074eb6c2227b0fa3ce6a3372f448f7791f2c7471a0cfcb098060bdeb700729a53e5236b5e35eafe765d672627014c94450289a8f62b90c4f928768372ace3658bd158f02a7953863597f0f0774a463125e0b5eea643f2d1049514e5c6590cfe2c28ec9ddced3c6185d5cb2656cea16506a302b65070eba32f8a873a873164bda838744a0d5a315e37739ee4c66b511d036661114d4a0443b2fb8ebd433abbd045d219423ece0a2d6d7f3f2e24b8a5dd88988eaa96fcf879eda5f01c26a19728f9ed917a6741448f9e3dd64b02c8eb059c13bebec0d6df85a44be3887b8b25797941d2252f8605dcc3f0e7d3aed45bd110b6c79acd65adc8d6d8551345ca8b277de67279f2315c0a19240bd57466bb6263ddfea47474420b1be82a37e2f65bec7f973c15c961d5dbbf55"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2446322c0bcfed72abd95c57f8e7d815ada2a5a1d15f98c567f568cd033c0aec84af602fe7376a885166f611d4139dd9f78bb581b3f1ec373c474947c7751e67acd90c7c66bdb233811da04d5ddf9dbed9c6b560f144f6ced47c810142325103bbda47fcb5659688ae56e678c117f33fe01ec8b01de1faf0ff40a27c57f851e4ef399d8108c229471205a5d3a08a41069af72764842314887d3c141d1899926bdb6d825a0616a0d635c4ecabc4324c0f56418e7db0de1a7f94a9861ce9148f9da47e034157b522d60bec3387a659bba7d14a63d31fba5865d7a7b061d75f87be4bc830617c84445d7eefa53c5c4f77a730f7e06335b3fa4f5ae201834caa5bb73a14916dc4e6c577a0357039c8fcee155ac51f47b0c19ca692b73ec194d7db0134065e59bf784ddedb87233859e639fb675ea80ea4458b7f783b6c2de5bad3313844b4a7cbde66521597cf964e48ecd8f9ce97fe7e40dd2f3247192a382694f3d0ba5dc95d64028f8c0a11afa8708651cbf9d80438a0426424182f9b19f064ae7294d54baabe358255e258ea129cc81133032b73398942430657b796655a6d4a21e284425fca023f7d8609f80ff564e34d4919c1168b48322a32c6f3808eb977c7e696fe7f0709e5e1001ceb17233b5452fcf1f4b5939b4f0302ca90897073170f0a6efc3a5379905af1a813b384f3c850a69d700f0375fabc0e43680d847e53"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7531710ce5187fb75a63038aeca4e24e4c64b6746320b231ecd1073fe8c8d002a2f8fa7debecb3a7a156cc9485dbb452d0c39922e6ec9fe0ddba0f068d8a3615a459c8c2787e5224034094ec18a744508590723523492be0c307f0a241549f5c12c8bf9ef2561c402fb2c4b1989c351c9746133e75bb3b0edefbd81d334c46dc9c18208f2ea55614edac9f01ffe02688e3f5831de580ae2e02b70e3925ae2f791af72e992abd82c5c79122d81e32db603b2ab19e484e5ba13e1c319cb14ad23e746e90fb2091165822a88289c45095d9f823196d9c62c4d0222c53aeb192b5f69aaff7997d88e76c923942e1ad889e80ae7aaf33a225acf23e14c41b649df7c94ceba04bb9eb53f19220835c998cc9c55be022f4037a027c0e25ed2ead758d8a305c35fc3e94f2c410a1e7d49d75e0c34cd01c7924cfe4f7dd76d44c22ff53e3f8433f8c18486c99ba7e25afe3dd2eb2484bf01af23c24e61d92cc0a31d1f3a60952020269e640e9b22788df23c28e8132fba1655bae5df03da2cbfa87a416d2dec19ec427a733f3284cf9aebe2b915113e0976caf6110577687e73d0882d6d6653844a22b82ccae942dfda37c669eb81aff068b724d2f21c7b0b1b44a6ffe1b7dcf0272b1fc3555956a5dd97f2ee460e500d011067cb2fa8f2b43e15f66ad48e63c1a26f00516f9914c05b45d0daa854ac7f5a3be7829f6cbceae7fbd558cfa"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6e737db7a2273a789f038e94bace3aedcf7ef5e889b6859e1cc75a4a8854773368f32a500e9bfabf732548a3b3f4feaf62d0c20a0b5f4f7731f2dfec63dd1561fccccf0d9c91af47eb064c15e7883a41c9b49cbff3ee59f612a1b639617be841ac2e0fbfc5ea482a4ed9a245f8ac8a0a2e624ab1a4482eeea3e5f1e13f120c23829ee33ae2b6e2d5b90dec3b6f68eac069ac50634ce52b7f4f8653f48e3e92d3874172eb7d721d57d782475e8915b44476415260bd69eed4f15c2d99e2cdcfc2b1ef5d9cef4b105d00efbadfabf26392b1bf7b4f0634ba970a87eab426025d71191ac78e28abacded9d2fb99cfdd3d2dbebd6807da96c540e704b1396188c0778c022b9d0ce92dd9f70bd2c96eab2b47dfcbaa2f2a6546764fafd16ade9dd9c6ac65fbbccb7906138ad28beeb4ad74d87d1e477ef60763eb312954f8c1b3eacf0353f39b0cfe7da589d672a7403fa5ecd0c83ccf8879087639cf704edb09459abad3322b0b6d5c01138f4b19adefe1a02ab86f49cd964ff463e839f2334a39b44bb3661e80a55cd15343adae57e0e8f958ce50ee1693b40c4a61c48e119d05da98016dc6f29d85940a64d7a5b605f51313a586fc1ef9930073ad616011ad6662ef43c85c99857ed8a5fd0f6f7df8b180fb1c07a41374ca7c0fbb8334159243f630b63e76f068da81c6ce07c8b9f6fa543e1047418c126451f528e5ce8f495039"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9fb8c68e27ac09ce37068c09d56d3a4c354d5710945253078aa47f31c1e709cd2dd6d53be85eb45535c2aa0ce139d0dcecb093749193bb55d08d8af62f142db9a07dd178022b303ed05d49eb61e1094798f33ecdac79ae6f5726306dec7f652c58be5fb196c2b9479f0806b19adea15448d359987e9377f3706290e1e75237657310555d5cdbbbcef83dcfc90cafb1c98aaffd0c277c6b73c6e0023ec66136e60a6be3375e1140d87ebcbc11a753aaa679b8e4b2ab8d686d4954b0b85365f070a35d600f18b34151460227ee3b49d2770e07bedcff1cb69ccfddfbdc6541f3273990b6f3c708c0eb40863fbb691cf5cf8e19b87746270cf7cb827cb64984cc3be7b9357c66b00d8a90063d2af51c34bc3da3857f07eef270989fca58b09435d4b15335722fb5b214965494edd8a9dd0ac0abe5523ec62367d8c119a5ed637a97a507286705d06520e7df4077de24dce5e087bff576eae20f9bcc4b651a8630eb025edc7ea28ad2df19305658e20db4abbeb18b38aceab9c611da6ccf127429ca4d0c448aff54342431b3d99fc69010945cefefb905a4dc63def5c2adabf71bc9f02691b35bf9367408f4408c315ca0f8a0f28466f8b5a7b069ed76cf9180c0125e56df8b515cf590c1bd6d61f443fcbe584e0695b68c9b097c21e12c1d06f1ad0177252822474bbbb2c29b6f4810e749f71b18b306812525c42e727f92f1b949"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bf7d4aacb76f4174b6787a710da30bcbc9115857b5170f6f98d4aa4e9f74888fcd341824e5da12c26d05612b591d4aec64c008db58c2710f450eddb1fc71fcef26ca5f3cbac2bfe53f611f7f0b4f3909fd763481cf4aa76e25d755e33c3e7a2e3d7a2ab8cf9d49d2ebe952f02637cd901e8784556ee49407a5901d9a1b6cc777b5f036650de693440dbec5b466efb84053d73c7932aaf18350f9c6acba1cfee21f874ec779f0e5d756afe936644459edc592e217fad93d799c9bff84921a2159eaefb9a978021e8bc1673f8e1a809797d317bc8c3d4ce1c38ae1e995cdc37c50457a16d553cfcaa2cd58e36bb43557ef70e1588bc0f6a4fc59604f921abdde57a2b05375c4ddecf23c5ac0cfd3465a364a6387327844aae68e9732b776e04330744296429200be89136aced6bc329e4715de6be8db047d4810c62bc19c8c2ded5e34e6cf8ccf000563b342b6ac2df2833232d12be0bedf219dddc187ecf1a61f994225f04eadf96e330c2f8dd42fb7035d6785328f8f2a575513eff22390ecfb93bbf9a57b97a4458e95bfde6c676a9b8fca765ead93cdfe9927e2330cc17061da5f2860a0291513361dab4ee5bd7bfa91af6857d1afc47faab730066ac9777b69804f491f0e2106361161fdc83f1e89ad18e61a1cea4fb128dfa681d1126bb3fb11610a7071965c9f706347b2c521f63c6e59dde524cf107403205e905d0eba"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5b652650b3d26f1c5b3451483c4dd8072de76b639b34ed959f13328df20289042264a64d76d711a7b33dfc0b6e65a8d8a1ee8a747b7e4e1511c53200742b1b54bade56fea7895eca7557a45da92aca71daefde3e56cddc12667a06acaa609bef750ff1efda81490ecfec3838583c1a4d6453cfac3de7958dc0ee4fb650d50d36ed7724c53819a53de3e1498a8fd1cab183a567417c217a10f028edbfd4c35b339c4b5aafd0c8e04a474b7671681b80e95c3474702b2608478ae3ed0a8b0cef33d8265c98db5758a2c5c2166833cb560a0b88b9d2b5eb0f38392685cf8591eee3d38d66aab0a33b88e00dcca04f0a2a5b47d367d93390305e1fc0a49e70ec117836e6fad4d7cd5492379a612b2b0634f66195529a40293b1c08b87deb03ced33210721a63bc534e7e00761789d49a27cb348b2e89dfa1c238d733dbecec88d9e962bd32fbed47dbc134fc79990d0fac4dbeb7484b149a9b08169ee9ab46f1c9297fa19504f8f7060858bb57852386063c04d5e0a1c4e0545d57bda9d0f342574f02c7e3a2ef88842872461513bd524457856b24e4c25ab3f16527e9c90ff98ae9ec263358d6e8c192257c0269db714803cf2ef8a3e6c0d203c939adbdbdef1e7d37633c54873ba6b6ac5a26e8100f17f8b4be1e64ff884c40befef7c40e7e810cb03b1e738e6628ff424c20d2ca064df9b92a1f337b9905a918bb948fb9e03e52"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8de0ebcefe961be81df5cfbf212c86481071c93b89c876272597e9a1e069deb3677a8cc273c2f29233ee063611cf7a9d42af04e9e1d4a8c148f0152e7b7b73e5b6feb87e964b6bd71d7666cc25f96947442844a915425af387a876623c40f9760edd28bf2f6a51251db8b8139266a04b13258a6294dbd08bd1e9eb5154265d691afeaafc4fd1a386d09fb71f8c2241163fb84b9ac18f6294c3d3ffd10515532ec501998c2f73790e8e15075645061e9ac3109cee0b3b23e49ee7db31512cd251aecbd536aefa435b54980d6d2668812fed9516ae8e3e0f7e235e338f40d4fb192d126e19d709eb892c2e54f55e15d43e08373f0358f7ffe874d23596b63ef34511f59b692a20e386f410c2238f46b7d5d546619329790c8dcdf825e9bcd7a5251c650f25f8cad5eb4ac50735a04dda2fd03ad759eb1c5e1cb61f4befbe96f3bd432a4ac7882fe3f7a8aaec56a0d9d0ed4ef29b1332ad3c0155d3069de4b6fc6dd299c319ba67d1156549f2ff6403a087f21559d084ad4a0e6e99c55a9fe1efbb6cb1eba926673d182ca112a2d42ae8c402f24d54c4f8ecf0c2d5140850b3dcd676754d7cfb423c5c4da1fba0c1ee257eb22864b6481bab3228d8e42e8068993a87af19e78bde89cf7afc0643121880177d817f04523dc9e792b987bfc96ee4d5aaf4d18465a0e6d28f50e9701dc84c347302b7cee5fe7d048d07be8ee620a34c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "2fcc3280d48b7b6d5e9bcaa5d4dcbe70cad1bae22b1c4f407591021f4afab50c0a1f454329f8ba4cdfa69f4a7bb6fbec6744e32c78d9bdc6d585f30160e17117fa364638215531afbef6822ebdaa6ed89708343e14c843a24a6c152820b9e130b1a1a406270f50db5b0f2eb63204dfdc8e4230738ab9f43bb982a2435988e1e44ca08b77dade0c55e57b35db27e4cb9af9a35d634a69f6869110b219b2d8d231ce92aa5c1c2d8bfa78d67cac339e4af01a238e6cbf5dfbd58b92765d7818963f68e107db5388fd2b430b1541f2560c79a861288c17bd066d51672866ae8f9796ac5385ea4b4c165f2860dbb950435d830cf9d920f79a42507af93ee82876c02dc097b6c47c56a6bf3b1b165b98bd34c4335ab212b66c99c43894f67ae20e3e5730fb1fc1af38333f46f4aa8c745ed0f58b5d2f5b48a98fad75e922864eeb43e339b9ff8768f71f92a3bfc5806e34e02f2f3769c6d36f3a4d9bc13d939944bbbe1449735f9d848d2a4681e0dfd426115397bca1df86ea5739871722b0191dda8dbf93be29a8b8ecc154ef4810022500533425891991c3c8fd5540263a69a13fae3cdcc72c337d7e37571e9a3a590e82ce6a05daa260ea38f7fda25737716ac5a3b558bbcb5055e473f0d87cc8a171a4766432e66ab84177f924eec6e8504f658571ef737f466407717f30c7276306995831487ed1c6031bfa8929b68e51fb341f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6f76a4e433c0c2702e0bef87379cb827927b9350f9a6537aa67bc7812457c4406de7684ba9614e09e75ab4a54ae09717c7147c69ac0ce8b9b962f5842eed73aba82ba2db71c39337948fb4a2fa00ac018b5cf19e0dd9824f5b836ea9c04ac875abd8b8efdcffe7e6e17e75782b4c93ce0bc186a99e8567d9fe089dda051aa77b82f329dce58ff7228fde880d5e86342e3d049118f8e4c9034f2d586f3376851ead317eb691e9975f08f1767bdf8c5db321428fa7899e23ebbe11e2b5e7575805319a3b18a1e0fb7e763f6390434df2ec5062f4a4223b353bd12760d09636829a740cb3b6761536c1aa7f50f36711180ed2925d1aaa6bdd38d5d5c45b9b5f9c09de47751449ad6962cffccc6eb9a4939f7551a18f3cfb3dcfe13f1c160eef9de768b23faf85b480a2342216238ce93c59d202d861dabb693639695cbbd8009151ff64e5e3eab3bcb5e6a539bdd8d4bb5434f30a12a12ea92ae5d21dfacecbf559a2ce1dc9e5082e2217cea6c122b3468f01c737f0be0391723c8448f3372d88c9dc46cd40041e11a592606f6409c1fd831fd51fd6adc8cced49e62e9466cba70d177adb0a295019011d463b153c5e05a6c1177548c3dfac3ac1b2e8978e39ce1923244cf10dab652d250b2cd6abae03df960add94e9519dd801f4dcf2242cd5c22e287b34091fc42f6644e83006402dfce2b82bf8acebd4b65a9738642963bf82"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b1cb3df9c5d8e04a90cbaf83a03e1e976535db1d66372c4efa3370948e546cc310d827fad9227a7e35923d8b2fc56dfa1039d25968f984e5f22614cb2dd0e5dec8e1719fc7bd7018843889e3fca0c9e9ffa6de47fdf67c266398de961c51e7831475b0b8021a0c587617d62eef417b93e675630ca26d8f41111b20d944c39f47adaff1b636d7fa1ee000fca852038b3ccbb05d99a2fd664a50129e5062b8e5ab04a65476aa60dfc872345be0139f4e30f107f7e1d40a7a01a7889592c5ab40c2bfb188f345d3086af7e725b5a209420798e30084561fd5ac1626e93ccbc42e9c1f283073bf91232cb48f571c32c71e4b47c2575295726340cfb69112877501618575748da81e7f8fc6f898003ab89a11a8d7e3647c72f4389d30b265020e99814ea8bf0406bd75292aa55e69c5a168f5915bb1e9df30be1bfc1f097bcfe78d6f7ea963f8f0482f2a122d1b3d3c66465b6d7d035ac5249d4a3a2c54fdae260a9d50f29c84cc39defd53b616c785da76a862fc60a619e25903bef207cf1c93e8c765a13f87027c9bd7736fc044ef4f6dd3cf3752beda24b3d2890f09ed85e5f45c02fdcc474ecbac108d63f4bb0266f5f08d4a4cc09e5217793ed16532d0796bc22f05607f6f265d967e424e47d73a3c486532efbc91d8f7bd970cc9412fbf1650cdaceb99635885b78abe2b8047d3e04b07573018a5c8b9518d26f25fc6b64ff6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b4fb9d923c57a13fd71e27c25cf0edf872de5a7345f04c2d5e002a9a42445f823e976f078fcd9b24014d74b31c2380f953007afd3da3ffa66e89f03425faed2befeb11cdc7725e9a031277be6e2c6216b0f2d0a53bb8242f055b80fc4709292b1c56a18101f2c2abaeb9bc5ddcc6ad3184e6ae8562c30216e22b43c889ce27cdf1469fd996ed90ac09050f31264cd93051507aae73eab22c64a63a28150de06b43b3b4099aeda795811cdd47e2b73515c2cad2609b9d8adfa543ed2ab122285a12bfb7df219151f0eddfdb4be45a5624621e1d45ec511e7b505c92516b70bc7981ad61ac6b8b1037b5e00aabe9851e3577d4e335244f32de627a7fcf9e937715bf31414bf432d339c65ab8ceea49bfac6f5ddaa4ed0a9d2bd7f5d2abb29819ffdd7ddea9c71c3bd575eb18c4d69f50d98c4955373408651ae19bd2ad839ab1fcb43f5881fd290ac2109df9c16fc6c14a86a614fc5509b7329e7dfd8197bbf659966701a1395a5f498988c485025a25822423efb7775c9b44ad3f3c7c79efb329735b21339611e7756a532dfe00d2c426b2b41942d65c48be63f9188f0b851348405dda0ce3de333fb82ea80e3dccb7f4f2453415ab86bf5a5cf8512c6f5bc1846961fdeba1955b96a5145cf447aa34d6fa22b226bc6696db29a50e3455474754db86155065dd596f9412cac880a0132b1e1fec5ed015b1c8dc8b682ba771021c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "98a116f889aa8209366a0ff461bc3a2283c37f78b990622ee49e7046af1dfb8d5b56c2c669e71e4a0fa1f1cc5024d387d6f9f5d981e8fdf09142da58d760c1cf10ce4ce8f2b467f054a9c26eecf4abee45d3b582f9f881e77d626b3b30054507efcfa2d4444dca8a3075780d306f5780de76f70db07a57e0a49f80883bf0d9e838ca5770f07ced784ea09e4eee412d02e20411ee5ec48aa85330c5e2c7a93ade0ec3383ac0f821e086871c207144472a47ae36e15b5b6eb5c564031b1581afe321de00be20e5125cf4fa01d2cb7e510f85eb690c32bbcbf79de19d6f162805c4b630d2f0122176222799b9e5ec6729bc150e360ff7e5ad28741626577926efaf8541336a9bc1adb4d1205e0b2e7eee73740357ce21599ff5414082d228f089f2e218f413109fcc20bd61dac6218d84f90c2926a6dee012edf069adf4007465a8e3574033c4be54bedb51abda9bb2cec081d1ee2aa616178aa08cb0fe4836ec7536649cebd2a29b9056510b4a6fabc6b91c72fca3c46572f397749486e4b118df5237703be3de3b5efbbf31033905300c50efce2aaa7f0a819b819ace881984707bb1ec6680b9ab97186b0696e9cf1043ae43acb3fd9cac9fba305d756c4406418e5dd148034f6b3b87e207fb9d1ac3ac24bcbd5f681645773177d09c73e8c14874bca763c79f873a2853e742aeef70b4c74f88e2b2c8b094dead8ed088dca294"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "aa4cd5424b77ce7dbe0654a7609ce273d77cb2b2b0a2262a093f4ee53cd4fcc4bb01e16fb50a13b20023fe6f3003ac635d1fc7148318745b52e4df0a88a72a20ba60334fb5b445f9e67f31dcbc08b0933d10d320cc48b0ab426ccdbe5658d6dc66159d622a0b3550a970e4b90de79e76f1bb5e5f073f7802a627493dcdf5e8c22f3bd3cc6b48b1ee4077527b75fb38a23e0ab2ffb302f7c50a85215cbac99a49357ad13cbc12496c2495fb70608c242118e3bf01ebd0a63dc259e605c5421cb83e1003643a6ffa96e385bbff3f49a17de6846f54631c95d4534f3a9069069c578a40ca248be0e5915e6e499a42cf11f2652bd9b81719750f0e0a9707ba30753771af12726afe23a9c4e38b03e34c0bd18eb0cc93770a6f00543966d1709b659780a35af82b32c259d46f19efe26cb51f062d142f897cc99940bef767805c32ac8a1bda03d5e20c7f60385720e2d47544f8dd5999fdc766afd8c988751111521381422dfcc8816b862c422372e9b86a5d9859be32d8dfc02bd6f5e61f6bbba6cf7f4531ed7b12341c91533133d90402d0668552fc17470c21bb843cb36b8a4fa6a3db24b0d4254b3e16b92515d31baf6f76b988ccec2a420d0f0e9591962de92fdedd1b619711417af45702d7e1d5ce0daf2ef0154bfc46c6460492a8855d87e9a5046071a990d6e7fb0ca63c03b15b12c42c1ad5b0a20cc0472dc5e0028c642a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5f9515d56d86e65d565634ad95002b9595f25ecfbaf4dc44897a7d468d3c71278131444d48b1cbf19e6409b6756fe753eb6c3ac1c73fd6391d4cd6e1e7be9f0fc044cd124db1a3db575046698d140d477a4c6d95a5eb06de11d8bbbc8b2e6c04f8184008cb2388574fef51aecb8f188ab2206da09333cf536d004dfd33890cb24be2af682d02bbbac68fb1fcfa6a5cafd3266ef4b09a758c667ccbded9affc37c13ee29daa9d0db2c1afde3f6e7b070e2a9b5a9b3b7d75e0871e4e60d868d8ce38fee726c40a27fc4f54287fa7872e5f719198f20b7887ba524262feda06d751a670dc1827374cd2fd25330a180e21bca4cf8dffef445acdee58eaa8c6aea3cfe55ec6ed963c05b7d492e7984f976d6ee4831c4ea1e65b840a1d190f1c49b3cd7f8d289c3a2751c4885cd6368f17bfd0da533bb2ffdeeeef4281a1efa93667b9fb07042e0ce3d17c7c94d39fdf81c348bb3a9caa17b96b028fd04f89bbdaaba37ca3c867b5b06f913b6c3bd6f7c1dabc82be3cdbd4a184b1ee30dddd28b00b4f015765cc95db18c74847839ccd3ac02f3997ce47f63f26c9f20d02dc1aea57dbc768778534a8460f88554ded387a64fc65209c0413fcbfa81dc24a9b8a081e14509fd1c2cbc05aaa90e202acb0688da67cebcd3eb0eb867eaadba412cb6c88f0fe9c780b2f61b33f47ce2d70060b8146a6cc5ae825b1edc492a88b4e397f5c05"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "550fbcf50804c11a93debfbf269fbb6437b171fe00b9e93076ca7fc7db88e91765ee439bccc417d647d145943ed7994324b514a2d4a70527d8f857ff5933f4a47168b49f5920641c49ca5f287b0497ce878857f64c51afcf36f5f115b4a8e8491286e972f54deec16ffdc4b8b602b5eb76d8a729d35fa964fd685813bb7ef3ae6529d6610af6efcc825eb234e4561973956c0b0ce4f93c4bdbbc6787418a6a738b7771547deec774c404589efa676bc800019a9ec8a68f4f479d0c03b7cc7e7f04444fbcde9f8b1180db9a7e60a7fc82ef7f4e7ca2130833c5f5683ab06e244ca904e791dfd01be0a96cbd55b69cfb31d640f4bcdb72deac2cec6fcb045f3c259ff598e82c52b34b96a6e0f3e2558b6e84e8b90591ebec10c66f809c37738349cc6e2691f02d69e95a2db99510cc17e76993a5d860d7f19f21593f6be3907a3a56aee4e79eb2d5f61d9c8732796e3894002bc09a8550e682d9acc92fa3fbad21503b117c6a6382651d08eab777cc87dc06266709625d7f162739532ef1b8e25fa0254a71ac1dfb00c77ea5b593267b142fd60f565c6825985812e1a8c1e47353ecb743a2ea52f165c330a5f0a25a0a2edc515ccfda97dcaf40b774140e1306e68911932170e103aed2ffe108efd2197a05188f9f18b1f59bf59c6571f27ef20d12bd1f0b12d513243d0e117630b0f521e29e401cda904a0484eeed9ecf1d049c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "78c6bcc6e22b2051f5dcba26edd20d680536ea15aa5d5ed438db92b3b2ecce0eb59dd46c2496dafeac3e49911dbc72f895ca0cf6679f36c770847646e99ea102648b8fcc3d6e41466c5fbfb0a343d985fc95f4582b671650d991768403e4f75d852856a450804ee29e0203c076736076ae79929a88d307c07efa0992e45fe49205f67061f7ae2adc2caa37cdd4ae3e4b9157983834055bd521124360e8e03021f703ab4b245ba30b4e421505cb3263d955c6d315fbcfd08dba056e2eb96daba28abfda149084b0052a9f0013593692a35d52f3843a76ed35ce3f0c8e8aa3418a53bceb9d5cef61b84c766648563bf00ff3def6a71d02a03acbe3458679ad8b710225544af5c4f7142bcf0289e54f76b4ab0d2273a651ddaf4f565ad76f231eed8c80b5d98481eb6dd507da55396c6fec6571d81c3008081c7cb4792c47025ef33f89332a4f28f03bced3111c895c5f48fdb64faba97dedd1c18d86335be0b66a334113a0149c67dcad53040d8ad2325fd6c11b40350a92f03fce0d991034e25272ef3665d2bcffc8f52b7c08a23d821fb824713d04196075b05e82d3138c06319759e859c7973ce15c3aaf1baa2bf90ebed260f87a413ef0a17fa654c35aedfccb4e496612b947235522eca5b10e195f7341951cabe3e0db663532a8fb6cd8eea06a3667e1fcc4002a0a0bbbcb4d7b7e20bb635a4934f58213775693ed2c64f8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1ecc71fd2e34fccc01158a46f68fe41ac963dd9f4a5279ea5ca87e81195b05241a8f4799a862fbbc3250ab7e86bc508f8fe32a1ee65007f90d0b319dae0e226b9f3ceadf362a5488afbd3a4c22d9a5917856f5f7edf02f61ddcaee6e25720406c3fada9af24eb2f9b1e7826890f621bc26837a82bff1532448fee49185c6535b3c1561f845aca7bd7d934c6511f1513428b928ee0465157a829284e89639b76f514ffa1cede07fc6d88cc9ca9f8dc09f17ec65b1fa6b08820b895f408194fdfc17b98d29b6acd5b36504ec8c616b0476143622e513f0a8ad331792499bb18271ec3ad794677cfabdb22d192924ee982f74bbd062acffdc8eb70bd2f3161dd8bd0e0b130d8e63f940620b89010f76e4e6ef039b7fc8f2fca7db563f5f5b80da69662735eb47eb2def9730eaddb164db61445bb254e22a8bf71942e5b2cfddcad5d8d1c119e7c8c2663db3b526dc8a265d03454fb35b18923af4c8da19faf08c6f770e3ddfc38c5c3988a4e302fd9c8c92ad5cbeb0d18b1de43cb8bbea6d76e1b0e57a49af3d3a2e242fd1f390f71bde968b6ce91230d10401d466fe7b6fd2fa1ae8ca58999b808670ffb76488882a880f4b9eafd414acbb8a2abc3e2dbc79362cdf67a28242e8ebc393f065dab6659c3006854f577e34d876bbe0afa97484af0ebe454e44bca989d7e38f8c42e009d4b9aa118f8e2c560d7320074a777fafb9a6"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8abfb449d903f408a10718ce5c72d6160d662b03cfffabfe52cda027247d2af8ac9d870446a8b657b496fbf8d74d9d8e36d396f2e0d85d3948404788fdcc02f5462be06329efd901f711c77e83014ff3a02751ba8f3dd28cb2f30ccfe3a958ef2945c0f8a3c6d331e38a5c6534e71612c3f0b45dc81396410e4d55c7d31401ae7c7a1549104c718bbacbc9623637705a2342f261c37bbe35ed30c64d87be17ac10a263a2cdf82947b73144d145f8711693edbb51e707f1bc75a63ec875572f6f1913469bd9e8ce4f7dcb542ed3c5a61e82f671a39f69895f0c360233b0613c73ad683bb4d2b7771c7b7a24ffec537d8e9382c0b1a274d96eecc6a541e6a7a8115cb07767d7ff40bf1266df4b22bbaf49c8f1d103a3b9d3aab33bfb05dfced5b1e04a842add8f18a462c47363793d707f4fd5fce6fd1d2be48faf532523955adbd22d7294dd66e5c586e90a59be612777b3e66139a72fcb608329c297cb84134f20e55622d6f56e9653877042b1532c143a2d9c00004a5bb4355eb290695524c38a45f97a0d67eb4d1bb487d3967349e25fd4dd5b1823a545478dad20ee4dee931c6637ffca4f88549ead5f36d86e799ee757cc555f910835077f273f5c38c9508e8d1a932169618daf6269e2c85676c515f3a190dcdabb0bf1c748a385fef8bf108cd716ec09cf2251916ba42c20d67f178fd0853d40a90327053cabd5d8997f"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "33ebb328fe4a82206ee3db40d58d9e3081b53aa51ef33625afc2d778c8ef56c174bf40ad2a20d3524675269efc92579bccc332b1b1af5ae33092a3579d21ac756a232ca4c18f6a5e73ebb1fd0547e18b6bca99cd8dc715f715fc262461f587b2ebf4c2f7bf41c9a21cd45455d492d5dfbeba588cbdc2ad00183a3dfcdba9ebac02bed5425ba71d0890efa95d0caddd9c871cf414f2357ae97a28b48b656b27b3ce1efee9b29114ec551c2afb28c4057451d52c8ca1050444bccc8863c0b8ea65f45c985264022a767d245d3fb2d677b7bc56007d55ccc85dd572d2cf669855e38b41ea69b75f2a6f405a55c495daffd75ade0f086ecff34e3b89dd80627041165a91be8d92b58a44664c32bb7baeb5b3906a475e5efd680a85a0a3bc0aace9bcda1b5f83239d88f1d8f085149c3bf9b4dd972444d3885f266d4b30bb5ff239b05f2addf7e2e8b6588fe46ae137ab7fb9e795a37bea74766f79938b0d56d2df81bd3c7ff79c387909463dddfe36029275ba18c7fc7d2f50a042b4e2a65ecbee8b89f99cc2a5e45d34e1d4d42855f2d36a2a8e2459ad564ac9bd83b87a5d73e499cafff57c3742c652fa8651ceb10456b3673eaa564e4d72352e7f4f24e15a16ba94e7673f9c584cd9a12670cbf0f1fbd6764e15544a179e9e1cdada1c42ce8ea189d0d4bb9a275bc3102a180f440b09dfefb355a56f0c74ad80ab8954c6e35767"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9f80040b3371cf9b2bcbacc068f03645a114b73c73313b3e146d2c20e8c6d4bcad24f0893bfd320febd6991379ec8ea796faefa3384b9289f3023eb4a188439c79ad5c501cdc0807630ee7f9617a4ffb0e00fda1674972eadbf57692f516f52b3ca7c4146694cad95d54257d76abd3a93b6e2a30114217d2439959d9df1d218b95eefe36e4a01456aae9311932bbbaa34aeb12ed21039d643524462c7e0bfdd647576a3ced6b2a28558230ce33dec63a5123666d1522f9b2e624574fee22827ecd7314bd2e2ba28cb5b0fffb0e78798da8a61b1b752753f6053b67def7b19936e35fd9a0671a12cc54d099a7db5c4429b39eb4df20ba325ebf478675e5532cf79b9e534a96129dc71225e9cd337207fc1a060734c132843317b05c8b0b2a253366dd340a7d65e61f825a8b96af263b351a13c312141c7f70794a048c704294b152a918e21c1546b0e50694c12fa1feb5e999b2076dde418f2b3a8d4c906824a9735f80f0914e94740366fdad81a02911cd40e1a590a587dbdc31d15196698b8f1d658262a5d88752a0c102208f4c24c0e61a66561175cb71b3dafcb599ac327ecdb72bfc4794568e3ca5696e1d0b64039caaf2d2808d9f528d9740243d781359f9b4b9b68244a381ea74023f8b5c7eb770ef189b1c2638fa1234ecf74037ad0f6f03d62bcaf10df7755846d8d1ff31223d20b0543f39092e40d5aac96e3c5f58"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7216b71f801c5c4976a9db1cdba4262f4158e424644b9c9f9dadfb3de7648175ed1b4f57f2ffa25f6b5977153d059366e80bb07619ec5d9ba865cdb004bffee65b066fc285a4829891d17e502337991baac032138d85c6f0b3398e3029343010fb7ddfa6d9e444022cd4992918a55e5df7bf0604120d9adf25b30eba21725105077cbb6b142e00ae97f03a7ea943f6107e4e7ac8c639fce407f3a335cae69a960dd423a511802e8d1fb25f7e736a49d8ebfc4cdccdee4168726eba22246f9f21ce0483e6f07499d6375158a7761ffefe81948b59d47f0e9a45a8bf104b19536535d5b315fa325341c4c199b3dceed592b3b06d10f5b8223644e7e85287038f71cff7302ef5ea1cac02511e47aadff53010e8bf433ac804df5f0c80f71e580f1cfba783ba758b8fd1f62a6278eac81a798ccde4b15e3ce1909ddea724ce9ccc674320e3e023fa0c35bb5a705bf17875ba623e4c30feef0e6ffdd34f4c303e042d551f5a83ff18120f9f44c104cf8a604fa9cd0e300daec6298581cf6426b9f89f4b7fbeb7de681c638a2873c27e73528362c32332b9cf7bb03560f30558d1fa0c3b1ad8b3478911ae41bf1c939b59852570529eee9f7615109f1ca228a5ec78258e57276bfba2ff77f6ea715c2bd0113bf28e7bbc152dec211d14ccd8fb30e72149bd8c097ea8b6dd82d49481dc8794b120164ee0d9cbf9a2778216abaecbf4fa"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c11a64adfcc6711c6b80549a729c311ecf30d66ca2c7d31eaa2e7f7e867b3c3b5101146f4161aa11f6e44756215ec09859602051c7cf6238dc49cf3afcfea22683c4cef0cdddab1ee87365d9999445c083c5fa28234597bdb19b90789a84393c72aef4b7767694b3e0c09e62b4a2a864525e43e858e1e9a1424d7ea29a44f24038bfa2cac74501156e3fdb7d7956cae230f5d3efe726d817988351e893b3727643a3a78a484d91103a5c50fb80efdb8fd5852e9d63019c8d80a1ecfa043783c918d45e356c552b0957ac92841f3acaf38e725fd2cff798e941ca9a63d53c94a578c9e936140c2c0ea7f261c8cfe6376fd20bc3171b30fb386d9cad48a24fbf17896781d0c56d7635d9e61348673defc7ff1ddcd2530dd3b7d6a8b09c0c94a44ae450652b0954671ee78c93a0c5213b0e97dcef53b738fee913215684e4858a6f3bd6533591ac8988b91f1b60dcda60f17ed3f0de1388656589ddd78c5d61e40ab2280e7c4ccf83a0a6c0c0845b3036d55b48be0100f0945a86a3bd539f4d2421cd93a722eea084a839f70b21790a503a5c5c5ee89dddaec3fbe4f35ceb6fde832f281b8e2eba35d9dcdb0fddab11a7c6fc6c365cbc0eb59607e3dcb37ee8e15cf473f5118ba8727ebd705613a7a2ce2df80f21af23522c585d499a2503f11614a0fb7f2949f8e7882cac49e0fa077b6d5435c9a49e3f0714dd118709f95a27e5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "197247a515fb4a12e874a4d4c9be95cee53782ef475577df61e0e70e3c3bcd5bd4e9867c0e5c9ee5decdedc53603f5aaa5b783d756279f4f74cdeb36a93aa51bf6ae3db9d1647ee62f6a079286391c0f691d2aedc1378e83de154572db611b61b8f06a84e93b94a868b7e6f2d1346acfe7e154986e49afe19f906b69f3e8f420b57774deb244d26b515e88fc133eee717786da42a166de47d7ba2736bda6227ec63d089a37064130d95e1605c848407b38ae9d35850a3b4988a22b867078a01fa038281c5f7a5abd947a9ed12a2121a74e3da6b2b50a7d8c24009fecdd7018335a1de8d86677a2a2ce9c57241b4805310608fe7a5e7ed9d29d46f99f63f89f1c4a5012f41ca1696383d9b2b4d19bf92b7d0302639797b4dc5576a059278badf1da475fc4731bea6d6277117d03f4939ed50f989095286d5dfc484e535f7929cf0191c5e006f8876527169a49f3ccfb8b9b21a9fa48a371da5960ff7b399ac3cf89a1cc0dd0315b23207ebfff886cf03422a01405dd8c7098ca926f65db7bdc8f32ad9146ac2cd81f743568207ddd52b04420a6fdb861938790234b3ae923e2f483bc6905ddc5a084e6265b39a443178aba79079e33e7d18315a86a0ac42d6ec513e3a88c0619e09cb25195aea856355bb3df00820a856e1730a61196bae28b89fc1914cda5ce0f97447c5817798516b48c0dd437953ae7ca17a1c84502b31198"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "568e9fe5954b9d77643aff10e698d24ca734bb988a6591bcbd38659638e58e8ba7d5b03a9114c9dc8cd4c91613a5e90e21a83ecdb08844a6b42639e1c4a2929754eef740b7dd21626d2a3d0f93d1a78e6402361ea406652d98db84e235858c6c35aa4ae83133fdd08807fba77825668c0f6e36af5adbb5422db4b5bde2c9669fd6973e56dc12866d48e132be7393a95aee49613df83a042c6ec389d51fdf2e38ac4f9e816eb3fa5467f50d5939481ede71c94577095d2f94fa1f09fcb2529e86ee0e9548b455eeb7d435b14764fd9936b0b000b6157cdfb1940ebcc4f4ab2470913fa9af408042f4cd09a6e32bea3301a1ab093ea930413c230dcc72360391b95e9819e4e245529b0a1e75511cab8f2d4d3c10c37f2bd1c2548ca688f3db84c274d66ef934d6ae55a48ea68e8b9b37214cfda51036a526f33744bf2ba5a63b7d8be0a4e6f503949d38bcef9dfb8137984ad9c87c44e7e79c00a0a82d00c5757823d2c49f4ac73f05589a9ac3f97bddafa208a5e07171f9b2e5dbb692bec4aa4c7122a72084346ea665b87da227e31d8773f49e086c6ba1d2cfeadfb356419b3c695a3634693f2eb023eba301d6218685993c201eda426a377310f853afe4f5eb0171d772089c63faef2e7341145408d7a32ce5cf2d1212408446c8e04bb5a2ff58badae4019a56a99d64c95daff600d8ece037f98d7c763f9b699136106feab5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9d5698c424b9c2d5980a5913afc9fa988a5115e0e689b9684ac6a1f894749561467804d11fda1fd2e6fb7b983727f42229be82938ecba0e9c446bcae9f213d722baef08fe2386e490712104d795fe939ee7cefa78bdac9e63d23bc9a27f5a93f3577517b7607b432cd0b045babaf241c9fb6f2bc4abb0f710b7b707aee58249837fac16d3a0b8745713611082d50327daad96b57e8f9b256e72e0a32c11e439abaa21d1693de7e03016bfce396b3591d27d069616a8e0bdc340df8340048b0073a4b24dffc83f0d662a58ecf549b1821cf71f4acac30c1566c95f14f02f7dc3e7ab75f91827284c5417b47e3a513bfba2a8a34e15c253c5c4ecd87a4d470cffd49cccb44f1b94e0e43738e526e2fbde7a75d7984d317d2f7d0e3dff24d5c0edda477ce1ecde8e1ba73b84575fbf77d9dbe50112b9e130581f8587dc7a2dead3e2e52cd9ae558bb74243aea20fbec26c9323e45b30dd9cc6c68f1d0febd890920d89aa0fa1eab29b8658c7331d65790da9e12c4a92945ee54b38cb9b12795d74b5cb9bce70633b007a6051516d48018d0157a946a1b8297d5417d8fd54084ac611bac2ef2df20600c3bd1b6056d2a29c9d4369890958ba030eb25cfd33ea00455c682bd2c36bfd24b02a8862060feb3da9f437ced7faff2afbe5a157fa0ade435e94116fa17f67424faf3d01c22763f95c9486e03ca0c46527769393d47ba2daa"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "a63a208ccc6becc02fc5c8b433d34b4e380e232e4a03a0b95b8df2ca86d6a5c402852d3a9e3ca48f65af6733ebadbf99226b3522db6a7c851873822f859ebe6c12014ee9d792bacaa7b917c0b8408ff1eb328bbe31a36832b0729344a38a60ee140f3ff708b64e1af538d888345b5afd7015163f5749d2d025bcc9fde2da10a3a193447ffbb6b9f110da2cfabefb9b4e00bd151ae7855c35d3da37f03a17490e02416ea7b8075431f3280afa904df88fb8c5e4d3bb0a7f2a52c67134d8c81756540921c9ec8273983079c4bbba69e11ae24240725c6a4ed90cd8ce1311b7531908b2cb2a58ad8b49eaa208a5bbc67c4293d97d34f507b120971aba0f1bc9c539aaeec3dbe1f9a252e203e48b05eef955e0a2aec652d330a4766705a73f6c4edacd9da5b4fb5cbc20d39e9ed1954e2c80ac15f59abfbe6d8f5fffa95862f4c151132a2b11c4d1a7b615cd6f5c1b2658593c43124ad3d5da14c3d3923fc11dd0e797decae73ce25b58966c5d00e48fad63afc4204c52b27985f4b15012ababd9c901dc81d7f63797fdd350e748862e56228f7fc0516a93f3e95ad15c1d2401eccabe185a533d42630e94b7cbec2a200a59405350a5a9399d83c58dcc3a64429c6d9fea31cb1917aa6b312416bd19b9c6c6113b9f44d812d7e83690d5a9120d4bcf3caec2c7d1e629a840a50143da2c242b2a761193fdfa3d33707dcac7d09563da"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b6302a6dc2c5c9e13b4b3931769ba271d97f0df7e54b7b636e3275ef69f06b521563bc5f5ca1cc3170705fb1800500e67c97dfce5d4986514f4e8dcc67c8318fde5794e1ed138f9f50f748a66ffdefc9eb0c227cb8bdb6b003fe63558c6698cbfcb12cd53b5f986ce977eda7be54e62ac9ea523fc38ca255998b744c8ff907a99dd8bfdb0305e0b1d8e79c8313ea0c78d47d6b76a25ded0da248502800ccb44b1665d1793de207e20fecd09152eef0dadc99d24fc013e55c983e9a4b3097895d41c38cc6e9c7034b225de5a03fe11bfaf4aa2f2cc290ba0765732adcb24796ac9a7c3e2ad159856750cc9417427ca013e26fe911d2a31ba8746da30ae717dfe866446b6b6ada2fe9a5b9137ab9e65e2ab8fd79d8ea8f55d5f7215e234fd5ead6c334ef3405c567999e0b3a540e9467ad17ad20dba6ac7de39c11545e86e2d973c39f0a83e15a62d22b628b4b88903015ccc5c2ed12818c9f22fc97a9ebe1d32f426acbae9723f71b86f7ac7b6fdaf7075b9fb14620486a218da4ed75578aabe4600f2a394cc6865ab2f5c35913cdcb7d7580285ec08389ed9d8eca93a7490098c89c720bf1af7e1f37889fb85ca6b4bec4d552784fff6fce0be5c62a79e6ccf05f048bbcd033e6c7210c1311c48876d3e739827ced4e8344b7477ce5cbe5f561ca32a61b1927d0af1419e75f383a5ea01b117bf4ea4c9e0c64052f2367af8b4a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "56c674dd1819d11b4546be728e25e19c23ff0529c927013e81d637a082b2d0ae13e2f6f9f48727f3b9e318d6f15d4e737eee63a7e0104ae6c115539cd26c4133ba386bf5265d2d9fc91997d3f262b53c311f2b54e75ffc716844d806ee30a5ab463d1bbd635f882e188b67b06210c2afca567bc47af50c76d1bcf703397512d30b67c198af319c2afabe343fd0366ca8099b4e8bf925bb01f39ddfda97c1f0f3bb7f62b8285ad6dbd427889bb4d29bee788ff4b46b29dd8ff4c5e5af919e61e5cbd4242a0e46a1af6a26ad99d8de39a1864501f3724e348b62445673a9d71b997afe2348bf8cc6f9ca262e81b955e5109b0258502ad9ac8a24c5e220536b99be690851169c3ea56a125eee7b2b374daf9f6b95eeedaf97f8151f618f1499256656afcedb8fefd1a524128068ce65c98162f9b5467fe3e41f73b2039d056745544d927ed63f8a588c820a8b45ad7bbf4cde144fdea2f241560199eb8ce45b1868498385677a13ba3f3db9f2ecaf8b55985a398a8c95ec2e02dae95d4e4c0cf864aff3fac920c1f12d7685961bb6e681b31e944d58ca22d64d38322d66d28e2d7db1bbe640df42a108daa275ddf2050ca93cadee433f3a65e88e7e52733d4a352dab1449baf69c9efa736427443c26b587bb0e359de5ddb75253615654b33246f1a035a23eeedb2f150704589e986a52cb8354697f33ea874079cb828be00d56ca"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "876d9d2c9fe40b3d3c9b3589ac75cd8876b5e3b65fd15d39cf61daa157dabfb659ac0d411e5da5a4fc69edbd33f3f2dc2bdd12b5e2a497c7a0d6486cdccef0ca8ee1f654aafae800ed764670a34d2f2d6491a97724e6d8c933a318726bf91765baf06bac71788178e565ad8caf12c4c1003ed4f724d7fb83ab09cf05cebf660daa44fe8918b6bc6525e7361ce4190625c52442bc99ac3657f25a0ace3890b90eb947d8229adccf191f7b7362ebda5f62794de03589b7437d85991c91fd55f0123b6c489e18514c0a977a798ba90453f4bf4521f438b6c096f2cf76352e2d48737a28cbc26fcf1515ee54e6bda99524b9c2fb454abbcaa9835f36f73509ed7fdf1b367be380283f0d391a1ff6a9819bffe629e7144ae5fbe03fd5fa9bb9acb9bfc0c2906aba09f8d797c38046c996f458a2e55f1451dcac20e082257d6ebb13f6966b0c2cbee4b8df9e75d31b457205a8b534efecdbbfd8706aa8258b2a85669641fe9ee8132e6fb356ddfca16344329f9245b856aefd263fa4a74fec495e28eacc50eebb822792c400b2b3c0741013da880d5f739bfc5ed23b0f523c719588f3a1f4c45b8f3058794013ee49cd604888a1477b3227c9de0230210479dbeddb1fdd6b94573141200db3da79a6caae2b0118fa8ef28b924b7116b304d2f2b469db8757fb463a05c495baac6d63a76119ed4a8c4910048eb7813fdc86eb9b9db1de"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b0f76eeff1462f8ee6e73c524c8fc6792547774d17c00f38df8533546d802c0d8ebe192d23a5f1472eaf562423c423d3646c12574f69f7c85fed1aed0083532d1e52050053a8a111e3cf4e24a24b0944f0f14afbd70fe53615764524a9715e3336bfabad476c12faaeca1df21c0162b7ed9a5c91ea64b2b8ddfbe5d7d1b50149b31523d396e6c96ea7c5f9c2fd20fbbdcb699a6d75fa00adc390ff6ab95de2b405c314a1ae7398087f4d54f37b6805318fc8088a49ba46b2b1f7dcd6dd16881a641d922aae80e3cd0baa82cf1bc1da9b0d3af24d4b04bbfb1d1570b2385c848cad1902083f9e7823fd8f6afe84051ba54c76db9d7313238959791fe2b0947cef28b2954234a56ea3823433ff5fcfbeb37dd8d18f6a04d202c7757d2f0c0e91d6384a9037104041dabd72ca429a3b649315c5e700c51d35c16a585b0e9b6b9e019ab36c9168a17170fcc38b4c8dbfaf413b148b3217efee713e0a44540498f92cb33e8439ec585d03fb9c5ddb443253914b0ac90ff97c6c9093003bf10cb05652ac59cc2a4fb54e92ff6438f3985e7cedcc0fc7ff18e2e2683d5bc41eafb8bd267b3bb50b6370b164fd84f053acacd8dd38a26c08a3ca1ae85284249b5b9419080a6dea945191421504a1eaf3230ef8d1a8b353fa68452aff1423f5021e3b9b6c7d290c9eeb03101909f96a3b02d87a1239663e3460c6ca0453f5b2c17bc2f08a"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9ab76d318d79a840c7d81a15fb67baf380901dda026d6ad392eee9cad2520a7d87a659a49b65d5dee773b30c0d319dc57f31818902247868a55874f210b1e0b8629f4d565626837ee063deee65d95c8b569f3c38673172c48ad68cbacaee2d8c69fc3e22523f95ab75f587af15d5be529d95835f72c163b54af9d92831ae8f3fff0cf7920d57c28a88a23084649cb20a68216458ae67b6d99d54387fc00d845174e2f3e930c1a0e089cda56273ea4f673af196b56b55924b57aa0b91adee03b69e98438b12ef9d3c3a65f7ba06d7c58e5fc10eaec8253cb6fcdaeed5c31f177291945bf0c69e7bfa273d30504cc6e94f7b7d60754135117411ad5b25b6003ea86b808ad80efed199a559f9c84f473fa1f554eea985e7111dcb2df4c4bee1aae22e58fe0216c4a0c937aa08d62b9222833fde32d991e4f8eca619d0353c2770e61ba3abe08e9b71de29fbb71c10ee6d8220f0ac6289c9c425f4981fc290f9faffe65ef6d207572055a5cd5a33caf6a61f4eeb6205c76887accff381591c51499a32a310a50ac479b45ec1a3f05c1bffe4d38d1f083926a208d9ef6e8b9e852a6261cb4a9224d35b0eab8bced1a3e0946736e6d49edb2885325a01bc0e7f89a58ceb57f88cd7047c5b002104fb180415094251e49bed59112eeccb7ddf99977d1a25544cdba5b10516d7f6f95c9e9275b484fad64b7e2e25d995a541d28448329d"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1d21743f51fa1fe1038b8126f6ed9e62f99a0fccc2a8b645fd90b996de8ee8d76e0752c83ec965e342a87c02c248b96665413de03aa7cd413ca67b17f74bf9886c9fd8223cd94dd71c98f874476667ee96c311fb40e17f8e7446624a41c02791726e62c0489accdcebffcbde06bbe3ccae1d669667f0f6157b463eefe4474ee89f2e9c6ef07b6d63c1582c4570f8473e07b2d7d0be72ee7446633b7ca5f7838e92b977558444580f0d305dba8ac74e3542b0277c6c21d51491c1a5fc6abf3ece671675e48a41c254f78e1d2a58c2d5a0294ed4720e511985e03502458108200fb47ba00ce379da0f429877b62d6d60133f231debae91a29b940c8e8dd278f7551bb5df882a833a3205d2058958a0f11685b3bc0df0dfd5b8b2badb8e02c4449f1144fd744ebdc2452522ab32de4bba59a3abee73c9baa120a74474d79a5b414645ed827ed3b19842a78e9bb83f03ce2a985cd5ecebf6e773594af60e285638a7ab6fa5db555015460f03fe3fe2e4e815792108d5a39f2fc5fe620145e7899001cb722b1c1524c0c409d8207e48e7341ad209ffc2552e4fa4eb09c749c320f9568cf9fe1f4c0f1a04c20ebb522fa77a1d2016305a75dab806ff3f5dfa49a191bed0468fc5bcd680e0f5f4c730123571408d6e3c3d466fb5adb838e9be035d8588f1fc9055473200cfa569454bdc5a31531d9af5e7861f035119b1584356c7f505"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "807554d5b4af18450ab5584c0d81a98da3c2cd417048399c060fdc8d45d8fe3f621a06f7ebf08953c091157014bb9c555673aa6bafdfcff69bf27b62992af6694b1426236cff69fdad373f11044d2352259144ad73f37025bd23b2a9fb9b9d310eedef1c875c269194584c9672f229af762274bbff201e9cc0faf3a8ea4b0ac0605666aa358b87c63ad12c4fd644113fc049f98daf2b076abe82670f85853ca2ba8058480b124461057be13f690057a9cf68cff0cab120de21c6d18b7b6a099a0a3cd60c9bb40fc683c19a4def659ad9d806dfa876a2860c6f63bc48c96bb75d0e3bebc1fe6da96251703264b9657d4a3c355f692b27608ef72d5cc88b0415273c3717f5a3809fd1bab1be928881efe8ac5968050494030fbb332bca315a6b2b31ddb433cfeb1dcfd4a8aabb50d3db62f33822cc6d68d96f1e600fc83edb4b8784930c0b9c9b7ebb22b12218840fc65c6467703ce961b19d7a64aef4cd4c2acd350779df4ddb1050429a0858570ab155b174c928e168b818dfcd311e0d2d2135c7d2d639ef5e66c2b806ffba10edc6e789f3816b7de76bcf84e0db5e7509babe5c2cc057d835428aea81f13a5de5e38d5a4a34dd657c72874c21065c02b4f0bd841bcf58e1c35ae3f1214d719f8790f1c873ba3f0d7a70d18622382d94d0468c2f5b1834b57abcd33d1ecd71ff9cc18ff398a0c14a88a2ef0738d866c767d8b1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7bc68409ccab429900777ef7996b067cf577eb5c5005f8244e0aebc2d09f35dae9f555c6b3c103fc01df943d90d6d57ff6594d47f080dc486607df002fcbf308cdf2a0291f702c23127d7856e9e442ab0cadfaa393dd6a0cba3c07c66e864f8fd488ec6b309267a18bd3099be8f38c31eb016a7ba00d2a74103a78e7877365da66f3c16a7fb2165a9de1e8b81d7e2ba33f3d687298545af611ca205912b79a5c63425f8c9659ff27d0041ade0ef02a1cb204588000a37733de3b2099d6eb7addb0baf2cbd6c9c92ea36b39c38943d6550d13adccd447aac93c664efc2100f48a0a6f9cd490e2668de46299347d04090f39b01de69032cd527e2b961cfe90f888053cc177fe98eaadb3ebb1b8eb44a1b232aa0e286d6f7ffebb7ac0a4aaea6711c1f0b95db88ec6dd10e2b84e83c672e4015edca760899d69f0f7801eb95a50d6673220968db8d7459ea74982ef3e907caf08ed42343a48d60f529fa64011ea457f69d2fcf693013ed6da6eaea5e80965d4d218fdf3b3d46445ed081d47e9b148ac2aa7669b3f1ada4f5b110ccb4bab9c869f849bd1947aad30cadab36b69ee0de614765315b7926055d3704aa0ada17b9d109111e538ebe431ddb745c6a4910dfe276eda05629126422d70dc3d9490cb79cd25625cbb96b300e11c0ed68a2ac10f87322129494468999ac29a7b2f1871a6d06fa4029903bdc441c7bc6af879fa"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "3fd9709bd5e962443646b263ec4869daa6faeec59433cce2f237fdd1a1c6c4373bb770bc4172cb2374d937abadcd12abde5287705ba3b7c76aaa36e92c73e44b0dc629514ba6c24ce82daf867c21300d573970877b588c1292e2dfa8e9eb6dda466bd64c1f484e0a40fa25885f8cd3685de748df58e2fe3203451421b3aa0cedd45559e2c723747fb4d63c42ff078479b52ef98db0ad558def856f23ed9093ff8e7a36b475c66993ee13ca6ec2ab8d27d9021b5195cfe57c0d48fc51bf9237a7876d693bbb27cfd1668306bf5aaac676aa6a4095c8691d77b75a3e98725d2cf80a3136f64d2b7d11c26735f98b3f49000a67cbb37ed39a985cc3cb3af3ffe4ef43820b4bc9db22d2c5d7ec74b52b7b2ac1dcedca614265dddf30066fccc217043dcb37c1d40a370e6039a1490f41830be87766415dc6f0423e3b979e90f4ec0cc738ec11c03cec9bfe7cb1bca84c9086e0824cdcb55fcde0df40ba1fa4acaa51d2c548a58cffa69b14fc71f34f36c457989da718f9ab2ed5f428337bcd7211ea982879593724b8ad8a347bf1a8b260bf56dfe0994e2104c00d5cc1f6fadcff927b4e12ce53a2b784430a5b55ad52a1927c6a6c949fad1fa121b0061fc838e6923ec22734c94758b3d1ed033ca1f5c3235fbf79fddb61618b620b76bacd320ffc20e0110c8e106ef1fc8ba46f4cd42786a689c1ed80df66dde2c8f76716c5cbf7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0e698f7add604508b556c6f9a02cb65d3c8b494e68d440fdce02375781c264e4b0120bb5a417c1f1b47e355dc68821a5d2a72bd3bd5424e1f9671a1267c7672a411e1e6412998a1ef45f80d96a11e50a6585696389250f8f84dfcd8c9e357fc35edc022084ba99eae2af55885fb145db13636a81a5f7ea52eef79c9268cf98cdf43f1a47674daee33cb1df5f7a09f875c65f7f9978442827bbc156ced42e564070ab44d551bebc7d218617a9d1ec4a5f48619e5987629060700bc188ef8b90a48137f5b31eef4710d5ee7561691832a0af77df933bbaff392be3b2b598b57acb38240a5b204ff9b28b0a52972f278919a8c14d01deb6447fc78e9659c32ac9e68706c1b16f8db3303290ee0c94b5c33db127e741f6980d1868a91571ac2d72e3a174dd3eb417f3739ad61c68110b0ce8ec78cae6b20cc59a6e7a07a8ca7cb37214105f1cd04447127144882dc3cc7b86fbce2827b9b756deac3f911e11a35599db509cca6f41e2b718a850befb7401772a5b3453dfdcf99b1781f9f41411e1f67d22dccf2ac2e0db7b524feac72ea2029cc8ae2ff834ae17031d4e052652ad957593ca6a042501dab1a8b000d6499d7a79741b0b73ebbf497023e6854753cce30a43fd01cb3db662c9e06da25e17122733987cc156cebeae44d67f3c0c5abe680fe105d2b8b501960f75bfb2397130f1d3ac0c5c13aee841f3e5c0aca621300e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "06956b9875fd5b4f7e0bc252a1fb560303d1d5eab0b676b6aa555b0bfa9be63100357c74a05624f9babbbe980a94b5e68b37202082d6ae713b4dfd0a7689ad5ed3ff70e9aafba45f7e905ac6b9aa9e4717969065d51c003d23bad8f2c821e709746ef58a9fffee3a99dc782811b8af30501d28d6865d0f52899df3c08b2254b199faa6402ff9cbab16b168c801bda906e537f01d9a541bebd77f112947480f1d7d470add94411e0598e7f0895b1ede3ba2f1b907ed04b10ed415fc3880043871677624ca0b74ade7f18f6e01bedc0d1931986e29e7eb0e7e2514742f828879cc8668d110f4bb940d1f7573835a504ba6021d6075cecbb5a1e4e908a418f56b1cc7edc77957305521534fe00e919d6cd03ff0a3b9416e44fdf31cedbe02b47932a6d95b702418ec6fe6e3e69ce5cbab745bec15a6122b5e74dc32bf7ad2b984f25bf4018d4b62fe92b1010558024b28009a72cc4f72412a559d84559b97d12c549cc569f2ce4ec25a31567930cf85caa4cdd34117e775f48750b6b5c70d819b9e6e5579009179eb8fdf779bb8b898686f03617501d9293ecaa5df479b046819706d73a9b3afa0ed6292aa30504b65ab73aba5c1acf8485472bceea7256540a00e6c4624623286c9e4847172881b091f40e520e0a6d1280cba14abd774eb0db338f76a0d86ceaa5df7ce4fed554b890fec7f32874798265d1838a590be8634c217"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7afebee544075bd481ae14685a0fd2c391eca22ac5dc5379a2dfcf9cfaa21ff2cbc334c7ee489572c9cf30f34fef16457dd60f391f85c304779482bfe2ddfe8573345fb16860f60e3489f4314f971d169e8a4ebb910e05013965384830750e6d82e4dda7b366ee11372e638de2dbbab1c1cbb3439f45e57a8863bd7abe7c53d61f050c0a52b63bacf5e92fe47e3e7448f16ddf73d2576bd222ec6466572a134e54921ba1a7c29b6c6e7049ca08172e1d55cda0bcaabc7f6a38e17033d92b5d81e5c6c45fe117230fbdcb11541f019afca47ee5132d9368903ac946e5522b636fbd302c9013f0e5cd2acae07cf7e806fe7e96ed3390f214769ffe7a78fb76879820990ccf7799991695286944b5416aaa09e85fce29ac1360f055e7ff698a11c40de0be6c5d5d39b8e969552da090274fb2f996a0b7baf57d75e63669efd5113667f732a91aefe57c9fc18022ec83d1865f858c74a397806588c3849a30235749bdd7dbdd3f3d8debaa92d4c91cbde08fbd929073bc9d9d5855614415eb54ca518dc2b91ed1b90c0d2ec27a149d18f6ea006abca2cbccf1fdd9c03d46dab827e9cf420ffdc9109dd8505a0db745312d19bc3bb6896f99cd9ca124bc4ed4edfcfb972abd98b1fe606662ccd77471a35b8ae3f405d688cc8c6b2e27399fdc89d189b8aeb67031138c7168afdef50b9b2bf9c23191fd19203ba4e9d0b4629e5a0dd4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "806cbf33b9b7c058714403ea504babd8ac78416b0a3e77b4f821e6fe2161f86104703f2ecf9e747be60512aae660fe8f7c1dbacdde77b421172b5e68aec78d7646ae8e849fdc878b8dee55947e58deb80235f1d79999dedfb2967e52b2554350ed7954b21710c96537d58ee2ffb4f3310e77d8663fd6b1ff92efb0fbd5658d757c887b92c84f8d79c17bcc498543a38e97219029343f59eb0d67b0f16e80bf74d50361798999b7783f92575d3ae4fe8ad6efb51346fea20e6c0beaeea2f56af5d073dc45878e6e975bbab9632d38f84da8296165320652c4fdeaaeb8cf17e5a3ba72aea4e46d91008de112144d770ad7ce78ee230b296cb2df5b4a1585c6346566ba8963648750c3744a17de3dad45fad71702bc0f0396969cd6ffe6368b6274418d23b56de452f14894db50720f657bf2e3700635cd1e1fd80fc61de45297fb7f180d02d4563edd24e757c461987a06ec07638bda0f362a5b3ca2ca1d7272d6039d4cf161e2cadbbc755ba3d19157d4fbf320845e9c7242265807add4b18f5952229e4dad0d1eaa5d225d4d1aea144e83254e6c9690272e3312995ab337d673a285707fee499e72701a5283e0cf5802c49d07a113383d65e3496de37b3dbbfdec2b90df48490bd9e9dc21ae294144759434a7183c9c8767e0d8efcae2a6bd1bc794781f8df000431664256b0d1e3413824317eac6db977937e47f2e401a7c70"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4c9e5d015a27bbbdffff3fefa717015004f1daa497060fa5d67660621ae82c148dd128cf2c3b6a2212ee74303ede9736327d56b79bd967dbe4593ec445d551582f0094e4d6573f1425325778b1a9720949d4a67ad98019839314daac19044472fbb463e576f5164ea0815b013773ab8abaf57d895316e6b7baa4fea6168b2d5f622f88ea37612b75417016ed92defab4de906951df472ad10700b11ea13f8f43ebe8bc27a944572ac4435e8f03772ac427bb794bffc52cb26bd7f058750a991d2bfcb5eaa205a1ed321487e7a2d80157f6d394ea1fb4f51ae546b8f8189c41415cd6a983fc363422ee0cd1bc9c6b0e3f5171fac51406af6b93f47a9449c0ba274584c8332d6253aa967690e59671591f9cc783d045f8cd2e53ae695d2b43c6dbef08398f17cb53faffa1ee45475879bd6b1763c361af445175723c6fc55f1dd2f108d51f9e2249e6b1c0b11e8a1134dc4aa348942ca2818df11a84be7ef9056b57d0701e41373909b0b7f2acbbec997c20f9c4c5b6fb373396608f8e2cbf4d246b5ab7bef83eac4061caef51895ad856839c8b776522ad217f8cdf54311720c28da64ab5d9a339ca82d43ba98eac57b8532c5606dc6d1a9c7fcb20dab617ec74984246b326ddf2596326267dd90cddd41586ec2279a25c2798fafb68684df90036f3bbab85ccef8d50209fb317af04825ea69c844b613d0f8388db9c2cef819c"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "1b4fa86e9437a740396f01dfc719b300bc30013ef20702a886018f73ff6009e20b0aea169d6c8d3f8e5b39938edb137e2118fadf6c6b66a352880d08fd59d0db8e5682214fd2344a67ce6dce96e4e7d0bca67211498b3cb2688dc312c97b051bfdcb6e950c19edad779d41df34888a89ab67e9ed352890a8e29a9c9009d0c22facf3f18351faa3ebbbc617be26ed26787208e8c6028534155fe983e8a856addecde394e7eb182177e32179582f3eefa06f8db14915f65053e7e5a17575551774be4848c00c8d781984e6e421df5d2e2cf6a59fd7049c2a2a299bf1fbbe1aec676ecc30e2e20656410d98eacabaa9de1c216f16363097e81b49bb0783a611ab32dd19eaf4dea1f97c4ba1204cef5f6dc1f1b20ec8ae246c3ebcce57d61d0dcd13ac4765ff8f0f36c0f2e7249b85b9178ccb454a4aaef2c9a5d05bee8e1464404036f4e17fa1c6dc31aa622f4e130ee6c447ee85d78852b424bbfe55330265d2f013915edf736da1a3871d3c62df5a1b0007306706286fa6c3897eea636fb2de3f4cb6a0f3c23294a4831d388b4ddd0fdff21461a8cd27b84da0a12d1e35405e2726071c7a0ac8523d19254a15296737a8a08630a767aabe2ea6eeac27271479e1fca1ca2b13ebfe8341c52411abd3056d00947f68b2434d94129a0f604b3fc76734d32e5ea65078af02330543d4e7f728988506095925a9c215f1b8ee0e734ec4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "5b2d1405cd372618413fccf1492dda7ddd2aba5e48f1f0396cd56e4f51a8728c67d3e127839b8fd44871165e2b0ef25f31e612fee9614f5ad6a1112f20e9283ca7906eb93cbe75290d015bc90957e570324689e466ff8822863178fccd491e5aaf34b0e16bf00986abd15e2117523643761f45eecbd7beed4d59fc8be32473872f2cbc91b17410a35d55badc3bfb746cea5f725863dcbc6aedd0228f56e94f5021ccfbd522c5d25f6b8ec86ba5c15f784b4d819e91ac622edc774cb4863844ae120c35e5fe78ec777bd815b07df996ceb679d74141684358aa50f96c47940157aed461e465d6aafd16b1e22c85e93336f93cbecfa9cd113e72af41012374a8bc143f95004705925b35f1724369000ccc3c07ec572dbcfe36a0d29cfe99b9fb5d6fc620864a717b8556c931e05d32ee93674c092025cf01f37e36ec21d34b9631b3ce3fa40893376abfdaa2f7aad26a60817106651660948b8ca568128348534c82778af0c91bc6204ce6b6bcba682146244903d0c6ec12130005c97d390977f71ed0a3acb9fe5c69b62db6ecc0baa94d608a4c95a62f98ca67f9d4583cc96c98cedff1f563ce9254d4e4cc88d127d74b7f9e6e59bd83a03ad3c720cc687e102cde5bdff8bfa0b4969bf037126b2eabeaf4d67bbd8f19449ac1af10442c5976f0d99e57070d6fafd0c64a25ec8fbc380cb71ef952f120530f3940227d0de6c8c1"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "0ecfdc9e8f66eb0091fd4ba2c702c3be35664feb4a8f2cb6612b3aa6585180c8dd1cb81956b0ff84dd7463a00d007bd26bd4132f29fc540b8f6fd2a29806fcebb167ce31cfe9d307558deb60db8e68f6c22fc153ad979686e0bc82bc199500a1a71ceae7b3cced4141c95dfd54fe0d8af15c0fa93e416525892d30ea6890ea451c0425db2ad2437f6dd77d0487fafb966f2d82f6752456f8604a66ea9367c7fd5e7dae8e4a8237da2cbadc97814fe05be3fb8da7a8263151451300e8f6ac051d1f2757920d59d5138181c41649b786f8957246a3459a299177f5e895d47d1156bdb2dde021b20a1e6153aff898fbdbb17824036cb0c0965ab508f1a323044fcaa8bb7955ca9188aa42ba3807c595ad27632b7b381a219cf162d0a80d56f58c7b5089a167dd0766e6cd77f5a1af2945a1930752b46a3c729233f6d849a6aea1dd13ed3a2e7a91ee0b8bd00bcf4c5888542fea02792367d42a9a675d3b3c973c8f1497811d6fe27a8bd82bbe5b8b4abfb39cac4c2265da619a01fb5847e5a4fd423674b2d3949d262095805555597e4930a2895bac40b8e18c711223ae7b2ce23dd556ac179c0124a6f1ac327807e8540b1497e1c72499757468b1ea8c39e8e9b9a5058db4340846c410ccb4dd6c477484ef3c96b183b6586fa79054b06ff22475dd6fa7aa08bb6bc3451dff8de4457523a4c0fd832007396ecff76b16ad19017b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "97b76bef18ef7d36234435eb59cb4e7c93d3820b825122b19c2e0824f255cca6486aff6ed6f2cba7603e81e17c5839678b6e498e41c0959ec95415ecc8795a091655790cdd335ac12fc7be271587433ae2b8cec08d2375c16a02afca54b4a68fdb63e3645678977ecb5f05696fa668ee06a2e390e48057999f018e98ef9fad938b124d86bd4a4739282f5273d198339faadf0d6488e4b6a968ac25d7a0ca88ea7cf8aff0de54509970fee9bf9914773bf247b622f7471d0df722ee5e7fdafd18c33ad92c6673d464c9e1f0de460c106d4a54be1c7538248f65004eb7ca94aabffc4f37cce9f4e628fde81a3d8300e0ee486b52555c94d4182e5e7cd1eb6328f872f9b1528d0e1337d20bc96cae3b5744ae88db90bd9f3a5cb3ba6d64e949e9b64d84c47ec5f5b7af02b08fd06a820b4df22b808203d0f9e327ab64a54282a30ad12abddd03b9beb83b8647897c52a889e7039632fc63b40c3cd5a8554f0dc96e3727fa24948d97cf0ea2644f888129cc6a450840cc526b9bc9446430393d571e4081a10e6fae856e15ea97b5852ccb253517bd8db2ceedf23e50e51c1b3500919e0e4c915a3ef3b75c862290bc0b6dfd88129195ef4fb4b16837a0064c60513246f1d4ac068754aca0f59aa847ab5c7086ef65d371075ed4caf0345bb22a69163089d683465d48d27cff4d5a200a1cc93e54bea0033b6082d52cdec5726c9bb9"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "50bd7b6ee4aea6da1a7e92a2439817dd3e521030d55ffb99889681a9e938f9ff0fc50c4a329ce439f862b8c12744fd565f0f18063bc27357faee33bcaf24887a72f15851de6c014664501954ad7e27cadfa2a1c852bbdf212928807be0185ef51d11175195e8621dabf5d29a58cfa28d96a1aac79a60bf83dbf6508fe891177f521388e13ffef6e870614a35c60253c5717020d6e91f860c3f447f038d65891cd783d06095b615bf1016b0d73183bf417521bb05d007f6fc23ee5c46e9e43307b0e2ef35bab3d7c86601c54cdd7cf9d495a4a514a0e804e084f53235ba8b7050fcea6c858eb67c17f45f1baa9f4afb7d7cc0c0df4fff8301ff4cc3a5754ac6a9c2956e78ec3ed3faba10994621b8474982809418124f8392a123abf92d8bdb717b94e8dbe87fa620c1c8f597401ee7f3087cd1765d9bc008db8bc017fa151860c9280984db887cc74c9429b503413b6c2d29765a3bb04c70dad254d598104becffc37173c892048c490df48addf5970193f748eb51c5536692e61c21f6f33f5a4728455ca916e3d707053b6d781535ac3c75bd33a1f6048d3632b092fced4f4214a6e060aaf0e6fcb5153f1f65cd3e62d65842e8587b378c0310d9fa6197f1981adcefb5b33936763945704df6b871d7026a3a2d011e43aec8651020b01902168c216ccfe367edb111184ac012abff7dc1a188fdfe5d8e865db27fd9ce4a4af5"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8aa39e382cd8607c148606cb9693ec37591bf4f663b0ac40892656050e57dd9442cbfbf34d1b45d6e6b2ba24fb5910c6521627c45a580af8b26bc2c4dc411794a0115d11588fe7c24324661ad04023e8700f0958bd700e7319685e5e349497037a9dff809d5d8a2b89b62bb1e7530f35f5024ea927a4ad4c40ae09736fccdd967d0e59dba17af33d803061e4349e19066d92ecfc327cd660fd7dbf2863a1fb6685b5a7b9386c232fb7df96fee7244f37a5df24e4a039931a41cee3763919544bb1bb6d14e2adfb88607ab80fc0e434553a5e4c2186064a9c0d844571644977da31d6e5bb70d1ea319a6cd270983d22d73e226f65a5a5bc0c804272ebbc4553cf9666bd0985a97ddf676788d09889b2d323241c6fac07e13b7440554734d2c0aee1f3b882085f3a266b452ed2fb69d518304c5289b2c2a6484ab93f8a540e6d1f423aef15a8441485e5768cd0e9f47cbebdb85d7dcf045a5d2714f0d422fa2ff6a77325d5fddfe194eff9f03fb02a3914096a9078d0d954e981e7542c975fcf43503d2aa806bce49b2c6cdc971b290b3b2fe45b3e0b6c106cd6fe0e7003103fd2324665f800068f0a8ce635b6aa3de021ae52b2cf33cefd54b9e874a0665ef31fb8584ef80df6eeca5e1c323feeb36d804266cf2193c9a660efc6c791d9f571c22de39296deed36f10f59acb93b1558a15d5da024574a1a5c190ea80de8d9cc97"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "bde28951ec3257efc054f48bb34c43fa230009131244f0a909bbbb387527e8251d9594d22e435db30fa55c01c43421dd51ab38dcbc23cee280180d74b6a9c1c30fdcbca02070ce3e0868419d9f28b04dcb1013734bfe9678f7c16f156f382596d9561fc32fa8b9de8b7b1bbc0047a4a2deac7add9a0736f0b0546956291d231d39b53d19e533d99924c8237df0ff91bd74a5131f4f361d7e541083dd4f3d711ce4ec9aa869a082e4d93ac9cec840cd00690629d7aa30454991a18d8d342fd582d8054eb66c6bc41df3e7c98b47b50ef7d1955215d5ca27f80d2b919a75c25f6c18bf427caaf3431d64e27969b6002cf125758316378fe05a26e3b2cd0da2f86016a5a9a8587577463592ae0c02f95c0b099f2bb0ac2143a13b9131ba86af8b32414d33c63d4cc281d5b1b442a68033dbdb445591ab88d33d184b4d87e84ea09fc047261f6cdef18462ea8392ef9f8593b71acbcea15f81fa68c9418ef37720c8077d7384f9544f85a519614a6e900f178f57535761cb388f60fd15eff8ab321f49bc152626c2749bc3033f46bdc20e853e2b5d98297c4f74d9b0b632d0bd1b6b64346cb6704afcb8afe94979caba4f56713c4c966ceee9bc0d7d1f248bb55dca1c58b55fd04422c8f2c390238c1fa4778d6f31b54a3ffe7654fadd8bcb14540333ca3aee93184ea1022b355a902373d7de9b60f3785465668bb0ab7a2542bd86"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c996f9bc755208b9231ff74c7eb386572fae494aa1ef14d906947d8e392a8c9729df0875788716010cc0b65c2e7fc445425a3e0f3f268a981886ea82fa6638eeb399b13e382c699c9c2120190315dfbcabd96c64cc65251cadc8eaa344fd48bfb139a7f3b84d0b9ba2e8ba730807e8f39035672f4fcc6e16959e77b33457881af75f658ad3493dc8cc10e8ebeee25f6ab0c435b6608fa1754ce3610a729a8f620ab5007fe95866feeab912deaca144b8dcfc682bafd0d766372d37ca4f78ce57bdb180079f577ba2a8b38754d7849179df6fb76c26fb6e744d2ae5bc1ec622eadc77dc58789e691160f369e02c1490316a3236dd8938bb17627e9a2e0a6450ba6617b65d068ca22c3e2fd32c94a1edf25d05231dfa1848a79959f327ca2eb2a5945f3c6520f6fbee14f4271e22b47c53879f1e968979f08232619aaa82e5477692edf1df76ce5c7588bfcecd32986360ee77ff918d34b7fa81df9d9630cfbbe9e789382679ab360c9623a414cb8472ea1bb85184099a66e53074d35d8c6bfd8a7e2ab60fde351d253a69f5f75c103a43457024f2500c0175f09af86694e278f6d7c967445195c1094d93b5bc1d3871a673ba4038e59ab4e4a3e034b1ce2385ede252e6ca5d8b40785fe3c0f9fc02071db80e97deff27dff9d9b96679ef5c25e8e68d1ad5c17b1e35ee054d7a3e7e9bc8fb97b68918979741f8d73bf75ba910f0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b5fdeed7f0f69e4c0c2aeb07d36e868c827d2e7eccf409a77ee8bdb810d2dedf337dfbbf723bcf9411c5357650f8e92ca9189ed821dd2baddab466084d348b0580b19acb9dc7346739a314846aaa59d5c28e3120621b961b5d0b0c1d4de49739cd95eed627738cc1e4512881568e41ee94a77b9b0ae19c7c4f07bda6900c010a5e10ac9f8d110f2edf368669002d2585b1394aff0687e98ebb7e88a8fb1d950bd563e77c8c9852faaf941e17405c1d7f12a51e8ac338f5c0d6a605ed2445814c14ee949a781c65d318cf2e46064ed0eb8cfe68fbb0970115aace71722b6c5649017125685a79ea175c30d1d0ada039d453a56c59f4d01333948e769580db290c271c15e5800706db6b5ab775822b293be7c62c647f42feb2effc270d50accf866dc1b19616e7b2d7c5c91e298df86044df61f00ac48ebe2957258ad7d9f4d69266627a0aa7acce8350bcdd2d139a0e8a641d38b85070ee7a909ea71d3d10f9108324a5ba8288137b322367d973e5a6a8a8a12c2442eb93879bb4b3b3495960a4b704f7dab9690c44528d2bd442cf2d597c1ed9681f9352077bfe6177b3ecb157177cc572db7081113e45750d8850314a49e7fc38c31b4cd79709161b87d1f31280f496f07d39804d8b638819d250a5755b00440c91be15114e1244bdd8e5a783a61da98688af5781cff347fea61445580103bcd75422d43bcd77177c7ea0b554"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "8682d5bac51bb32bf283b8cab1172d6e8054dbfc672de6f35f33a9f7b3f0662fe19ec01a74d5cbe6d90351843e2b129d0ce30884fdbdcfc962d2721fec5b3b7f6a9db4a95b13def111c737cfae72d13aef4d0ea9c29181891505a0d28c5c8853ce5c37476654703ea2e7c68ed52591c182bc051b5d837ef3be064901be454967be52f9c7d406b7409e93308b74a826d3d1e6aedd8aba3f5f971824784167df53d042781b7c2d3cac29428c7da1fbc451680cc211517f9175ff1b2c00f819916d6d25581542c8f05479aacfc245e5894763db8e79849d3e2dd8d7178a38cd4cb7b03436c150c467540dfcdd001d6c8994b2f8b332705b2b5ae0c841708c83dadc7d647ae15e547403d689a00a6bd4de8602633443e0b7edf060bb7b529e0afeb1b4171f70a943a14f69c59720b4b5ae59313325685c102d992645fd23af12f3b8f8de79399cc6c80f9a0c006c316ff7a6963a1f8ef58a67d107e5b49fd8d7079bd45f23ef67f6a83127da157f54fef9dc01415a6cf7a957f5ffa15457a1a8bf831273f48f927ba8bde79da623a8a2784e7d8950c5fcbeef5868311acbb793cdfa54c702209073ad8599c4c74b31ce3b662399789febb36d922d77cddf63c1de3a6aba21d6d8ed54a1b48f48955602d0f6a4f5eb5546131561809236f0c71b8374290106b893ab70f6fec1fbc3bb6ef5e6c0263a7c8cd90c289968671744e853d7"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "088bef646bbe07ef0c2d8b191ba0b36420a35ca1a85f222bd9622af778497ec8e489fe00f0b7b236e7a594ac83963d8f07079e97397b8b973402225215d2fab8ddfbc11ab3de487fbf9fb704a5e0cd1191acfdd61031e72ab931407029a9fdf519de6fd39e61f89c6f8773b588b1645ba193de9c44cf9e237c4aab05767ac6b13b125b39b9e303d175f38952d536cd1f0a4aa92872fe6bbf630414bee94a824f063dac6238f846ff829ea4dac1ac46037ab115aad3fe76c58c28bfd15a0f43b445e0d2ca02f7a886ca123fb19ee6b9685b4a704796e35c2e05c3bdd7106efde0a2fc3f478fb734b39e1f6fe6507d8804d8067dc57a02f6687a5efa85168131db331b1b426a0f86a6c2581cb3101b1baa35e24c2fc5d8127ad8c749cfcb62e94f0bd1c68341cc9c680aa2a067d242b1085cc6724d5411e1e71fd0747b2a17408371740b2c95f6956385936ab4322c977d95d03dc320629bd8ac9326169c073c2c1a87f4e36bda5546766c2d8a1f6599e20aac010d447458b84f5160e186861096f035f28c44cfa6e6a4565ee25b8f1a2868fdc079e1e93beeaa0c2da15adbea1af2f4de54b4015218420e309c330476bca71e303bb2910edec339ffe7f9048d16d98c0e3e6f4c582c50fdcc85c54e11b72542ca7b1fe4507095b0fba9cabfe5ff9596ade9efddafe266d7a542ea8549bba6c52910a76ccdf5ce296271380ef6b3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "b363ab557c443634934971ec7a90537c3243f1c40aa765b76f02883c4bff89d32bd27565e4a34ad1fcc36ad6d657df085c19f3ea0c428dbbbb0def2762312e4e3917d658d7a7e0fc7ed4b073df80ac671fd4106bce4ddd34939b2c23c205e9838123c95a0fc6d3ed72918c09d15b93aa856b3d1a736fab56ce548f947d99634834049e6f9594e705ba037efcb6dfa46f738f49ef631678f8366897b261edbecd29feb13ebdb27dbeb95d432218dadaea3c313547fc5f938c3ddcd6216d6250441e0d89d1a58a0d736ea9ea33b63bb70ae6745a33f8923e6c7c4c665f324030ace94af922e1eaada9b641091799e04cb3b9a3a7f235ea915a955ca0be2679a00cc539580ff76fd66272e8d2fe4f9bf2f32fced7538edf0c703a0ac09c8ca909c5bb2585130326a44a172dae07e21cf10b2358f1cef04bc4a7aff332493fbe409e634a9b370423368eb2de662258d1f74ea79c7962e450377236c3f5a4031c0a8856b533608dc23fdfa65ead64a90c1e0e00c2900bcb4df00b0305a8ef7f244e4a1a8e6283225b26cd6a537de85d0b634937926b4ee5cd4b41ef67f3c6a91e60a7eb319c163c6d48cae6c32ad6015eebc85dfac2e34748b184d930d6dca11058eecb01c64f741d53e1955c1e4d8eaf8671f88b0b2b52c1b6b9571be73c8d8e42e38e5c665cc832ff9b321ccf63db49e6026db0837789e355a4aebecd473df6344b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7af72677251061769f1084ad9ae01faaf771b1287ac350f1f11fa2ad41a416e464cbc415825852aad2717f92481b2027ffd72a8c5de6e0fbb682d386d19f74305ff18ea65c8b46f46d4a1ec0df6dac7b73896072efd7b9ccf83d54d367dc27379e058aafa16bc42b734b0257cef0b2443f5820743d855130cb62a0fb81955cd477354ad5093bf370e22c083c28c4dee5ec0001d83f05ebe069e1de81703c8837dc34638ebfbc9111c60716f83b9603f60a9041782b360cbcbfdeaeeda3459072ec76206305fcc8182c30c76a1dd2376be109d3e95c0a37db6fe76c4f777f3e674e8fafdef17685832db568728cc1cb16acebe584d19d86317706144f92bd9a3557dbcc020c0582916d4d26d5464f4bbbb14e2cbd828700249d9439ce634bc3e73f483027a37d26fd01aff3e5a7eaa7f109be43cf008f74f7517b96620c1a2e490bb950485af2f9f215c05ec3c3dd8f8b40646a5e47691cca0185f3923f1e836a8db77155164a335a8cb4bd9cfdbac013b895e7de340419c4ca884e6c39eecc2fc420babfdddb06669f511559ef64ad9a1f54198b82810a9e35c30bc3e9b7ea1594e372d1c29584cb6af71444b07d4099d027bfeb42dda594790dade61f47b00019f78f6fe1408088018c5ff3a6d3334173379dc918f3939330de53de5272e6db98f15eb5d78d33c2ddf485c27e34279732ff82ed2230be48de068046fc25d56b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6364ba6ae98bc935690023d9df5f4bcda28e09e344719597ee429ae66f4271dc0420c366c2ee339a1964d9794cf5f5c8f1b823639088a0a7a1bc553edb8db695ac74e8498de5cd34a1d95248b05de56da0878d23f646072ebc37075a4c625f721149104578213dea116b26bf726ed2550b451fb893fb90bfd6963f3298f6c10629d42584dff7c8dc7d5060b52f93492c8dffb71cd3b55756b93ac27569acb2602dbff71a95ce74cafe6ef5759dcb85949c142384b4f15b059070dbc0511734ed977ad70bbe1dc2a45dc724e8d709559c975a731b619e5ff9737db0c7fa1c77fde76a63334e8fda761531d35d292428b199a5f2e08cd4ea2a37d5b2bf47b68fc18f0ea0c6b5f903f10e597f4c768124668ed832f9d6a8fd17c8bbfd352685196cf7b7a8f6b6c55aa4b1fb0fc516bf9b618ba23661d49fb70a4e0827b9439f7786fc29132752e258261ed8f6e2a06a869d85e2e48489114b636558edefeb1ad6de98a21125e1f2401cb20e76496037d801d7cdaff0fb5cd3c817efc7a67a30fab316593e9a6d487115a82ff32ca64eb79483ca337dac18e8b17f6f998bcc5bfafef937fb1233fcc06a2f151982a27ac27b3005569251ea6d1995dafe4f82f592dcce808882621ba245619b0a7ff4fb1a445b598a3ccd7acc072864729c5572d8a4c8c207dd7eafc9385a44e6a6e07b5a744795c74a1a789e1a3520e43eaf06640e"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "7104011b21345d72d2c8b9264b8841db3db436ed2b1d4943596a756144626de1663a5ff4f294c3bdadff4998a127c29522c63c44d8ae7af49a0e6715551a2a7da73bf69866ffe55bd20a9b2620b813b21d404be5d2a8ec857a95d160adca91f15bb8d95f5d53aca7a2a32611b113ebfa69a3ea903fdaf5d33488394dd574ac6d1359dbc584b00218c2bf3415baec27c2286054770ac75de56936d6a0429d1b46fd9ac35dfba0ff2d23e935b970874c128970876ae0e60326d2f7f117a72e2f205bbb63d9f33bf624aedef361b5d60d295cba044a43cffc079451158812a794b516aac6f4f086059e1a1adb94504cad7b3e4f6296c14a162655e54fd68f95576782700afa51357144485cd4959cf2cbb9c2be718f39210261d90b963f8e6cc9bd94442a13f98d2bc7178ae460e749d72cb648dbb7d9966b9700efbb908f039487abc607bf88fd4e7df9a4f045f998810972e68811c1c3961556e0ec85808d3ea4093ff0e0b10bd1d066f5adb9deb852a726690bc6294fa10f83d9281edc380c0cfe5e70e6ea344ddfdc2d071c37247821ea5a290f72b2ce509406968853d6fa4b2ceb635a612486cc903c01bb76d34c19d4bc75b39150de67fbc125e7022b3774d01260c0d62e6bc6eaaa189ebb70a00b1bb9a8ba25564afe00498d541010dbcdef82a597ad313871357115f8af3de78f366c3f0d9439acdc79556c8a3be6604b"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "705f11c3f722c49b395a58285d37c52a902ec2bc72cdc0b9e62204ec960792e3948b177a869b22c7cb78c9d3cad1ff44f6dc36e6838579ec83d1af74e64fa2ac19c169860782b698845fbc670aa5af00d0fac6a9026b16c908d8c8315267f273d629551dd83327f1502036cc06767bf9a8b58ab59e88e6e3fe0ba333b3fa0125d1f6ad98b7ac9c4a3743d79382384c6e3635be841e0edf973d45d1b5431d6d71dca1a7e190e0420a423525da056872842ef724d6b33d638274c7955f4c7d873fd95e5f8d4592d70e8df33774eff3da79d70e75e1e7a72d421d2f4cc487f62bddc4679e2b55cfadf269dd04ec021bbe4ff23620c89be3083975d8879e178a375ca564aee4868a22ff1eecbe1d91d2604ed0e3bcafba52402f07799d08452edb13af44d3109c2c3f85751ea38316755adf3b2f185c6d1ae9042009fcd4de3f14db8f867ee8614c652496cbc39c309dd4fca06ee6958dba3b95ffb9381634efbcff3beb66e61cc2327e56d39cbfe158cda5039563cc263ace1c684521b2d19efa3007a3bf26e6e92f175e521165ea5eee4fbef3809d649a9959fbaa7a5a1f7ee14bef47385f45aae72a44b5282d8c993cc6a7c07cbaff3712e87b23fa0157fb40dc067f9340b1be8ca26225ec74bd5b1b224dd0662ecf70369f807b2169c6022a34e0ac09190bcb31faebd4a586ddee007e7f7a1ec41736707c1a25069068ead480"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "89bd9b3797499c01328b4c3fa56e8690d2ed46c15333ed54ddf78ce11ea1864cd68c1b6443bb299bd9f33f9ae05807c55065d09c31c79c8757772bc3febc2c6ea61521a5bbb8c7311407240461f28bffbf9bf1a7c8bf0f60df94885c92160363a8d0846f93af95790ae8f20074d1af828ee638bffdc7570ba85bfe9592d82dcfff270d233dd8478437a78546884841aa46407f97e811fefc3a097469abc3ec1185dbb4ffd7f49005ce9ba89c127de5dfc41931078696f6763f208de4db2d28fec3e0d006aa2ae1d4ab92b09d2757a4f32c966609125bd423636c4d4c547d8ef6da446fa48e108ff881dcb78a06b3868ac544df71622c5e2810f2c0b63e866c1bdbb740da83846c1c82e2126d3e5354d589837a369fd547d954925af390981c6fd54083c6e4161147884e948516b777e9c3a5656f17252c104230a54bfa58e33333f16c829d1ba73a8c3df2e6920036f1f834dc0f65846a411cb2997e8f2cbc3c2efb9e03258c52539dbc4b678742465290b271ca321c9d7198cd6269ffbfea5dcfbc7c604a377415ec29ab57b5abdc5fd3050e056d3909f935bee8c8706eb7dd362401acfb3597f20542e462257d6cd9bd76d8c87fb8e5fd1607e0fc96e8f97703e5a175ef7e7813db24d3d866b5c844cb020ee39e291993627f8a7edf1325d7f033f527c937bf3d22e28afc861b75bd94bd8b769ce96236090c0b8d5666eb76"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "6048d8149c4c3744c35b315117e983d47ac0719c8417b41e7d001af0b9dcf465db93631d7ecfd4994086409d39cfbb2b2cb08a30c69bd45ad74d63007e0853f763dd5006d1f1f9b457d5fde60fb86904b669e0f3d5379eef168dd74f0d33989c308a80fcb26b61002a81a1ddd619d5c9bbb4f9fbd7c4f99eb2d4df27e37d0d4984ec2853475cfb533b5cacce9c31d65f06d7fb06613530d942696ff427150e112be4fd06517d643e50c59ee0e5f8fc28ad2f8a220399bdaa66569492dbc1a817bf76dfd07d9d99fcd2c290a6a289e4f5030508ef4d07c77fa1f61084cd14bc3041b20d1672b3948a4de3005e3709e126c46eb1ec1f63dff00785cdb4c16cd02645a7acc1bab969625977d2037a7ad910185c4c8109dd72294d553ef8b73998c12a118c4feeb40c27fa8ff4fac98da8ecb7b5883f22e09487db871351b89d484d113d58dab0dfabe42c06fd46547588c53f5cf11088025d54f61f724623275b18d4c361ec021379f2fa50df7d2bea9efaf028d13aa5f6a024dcd93454b278790844bc42cd39af896c23a46c37f5dbbd7fb791bd8e5378d5df68ef053264710c224fe80a197c9a9338a4433f174be73c37e25af31158c5bffd71fc480514560db478553adedde31fbb65ed5d28201e3bf15750f328834e5a963d0fc2daa4949df041f54a6a196ebcb789f023084e48433820815ed7e5c5359d3a0fffdaae8b34f4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "81fd5d22e36e8bce36644c47467559bf83c2aae87a22032922f6e0aef582e4c799b2a12ec8534183c982ff1cd97ec7410e7203c3ad426ed6a97efa158261c7d9486effed3640c469a6444a5b1e43ebf7c359b04aa37135bc51de5750519231f682c0ed6fc715d78c34bf52df4e3ccd28edd0cce4828042d3894381fb99429aa306b326bf59f030b752535914d324284ebb5073c14ce3cc1000e0d65ca90f068ddde05e2d7b22ba575b409aefbe37d110f92aeb4afb58d4d03d140f74fe04b6772b52c960bb1120d359b270f0bc926bbc21d0a42d7d8bc56c5756dbddd0b32af7fde1e8930e195874f590001fcf63968caa75bf9acf3067f22a64370ea68302bb36fcfe35b1c39f7e69bc69328ab6af1b5b67fe3f86c06dc823e34f8652a0f5e38f6965f930e3ec4abaea3e9ab3b81132a14b61357aae48bba795f585a4f87a81bcaa612ca564fffe043e663dd8469ccaa4a8f388fbf5dc498bccb23f72cbfda7a853c9c132c0ff27435a6baf40d77b7a52ad8e8ee7ed6f0d6524cdf060e3e843b538e586facd8a5f5f3dd97712ef426f229d803ac6d6ee6567ebd0ccc467b2301f567c92e1c4731a4134c18edc00c55779d7a34a6c155823320914157fe9d7226907a7750bb78f7b6b61b134c18133de7dd4357a7763f88fd3886d95d47449a6385243cde3bfb975738e96078cf8759d516b31268c0052045635ce50f8805ff0"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d3"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d30000"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = ""_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                shex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d2"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "c9a765c2661b4674cff3480e9a5e462ad0ad2fc9bc6fbef62847b3113d20991f653967971c28252753f5fbacce012c2a8ab592914d269efafa724fa4b920e340930c106f7b36f79cebf0e62e88e0e476888e9f0e22186acdb6c4523a232b65b4ff2cc22dc44f8a559527d79d7cd7dcf3773212f7bb9aa133c31165cc663690bf123d73923c838929ccafee59d6c7095b8d4a74baf2d192c9a4e87c4e12bc58013078b28a7789e82e9f31de1f4d6a2aa6e80632be8e4bdf263e8d49b09416fb19c488c07ad8af722ab79182b23028a71e065d02412a9eebc46d7d8f4e03d79238d8c0cb4a97a9a1200ebb6ec64042ebeccad9567526eeef12c17d94c1049c889970b96e94cc353172a268a49c5e8bee13c15b39dec44f2c7a1aa37a7a0b6f72290acada32b1d8af1fc3dc8a89487ba81347cbeb1350925d30f923958106b49959c871e7c1dba55da0772e362cf8621d78610868b894e16e5dfec96874a93a4cf379b47e7e318ce315066d70ee3938140a60148f205085cef8a7700ca3c53d52a5756a63b3b16f153062b61262a68496210c8be4ef3f9029ca0ea0e3b3a0d5d6d226edbbf44daf8f045dc286ded3c4ec4db6b45347079f33eaf98e3c95b4b60e79ef4a3093feec543703422ba74a118511c2193b54fe8b633866ed2c705ccbc6e7d9d3656809ec3d3356e7400a9648ec37505041e3e31af1c02eefe924a67047d4"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "9e591980e9ec3d62e2edc3163ac8206fc09fe026a2f7e622dc5a6d02976d30ecf141295335008d91a223ee98a143541494ccf7cb06a1aa61de524fb5bb4b379a67ed2ced447c7b395c57a625f835dec6844c3b67a85aaae10e273d3902f5f30539711f98d73f86beccd798b98541a84a03ccb3379e8eff88c19c88aac7b7ea99758194ffa6660153d4f22c1252dd1b7b574e19b3492f28cc097d3ee3f30f6b88576bc6299512f9f8749e0b297295bc275ca59f8056decfca9f3980e6f8d6e07b73e1a8ae8b3847556cd67ab77b96618979ed37744be2d6bc9f2b671615f1d4c4c1b419f05036148182ad4c6375f9e3c7cb37bb75d16c4486e97c0ac5685995cd8e5d76452934b26105be9074b2f8daeb1add13c9b127dca2858e5c80e686791a6f98cd98e540bdf27d21b2dc9fc84e09561df968d73c190b3081293d666be7d991761f4722450ac249a6eb4bcdf190c214630c85243a6c5970184e257c00c5a2a18bcd20195fd041887f001e06d4a6049e210cce62356f99853f3da2522d3d63739fbb2ff315e68ab4a05ba1e29e5b93808df51aeaced52539d7b956db2f229999ac09a6d4c2ef8714ef9d4783f538559f29af9d850bf71b001f231270874fb8dc60f1d1554f60fa69cd657112530e22563fcde26c3c86137e476a2fc1d8ba4a15dda42d4d8a20fbbad7586f472b716d6ea2ee30f1c111bdbb3db8e5e2d933a8"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "23e198d582d048874ce4e6e69f5a81234ca08be1fc9cf0f7be05454997fad87da8f05c2faf7285a7a9ca7aa50f772b8175479b7bec85919162b8a7eb7cd4c1b8f0aaa64a8f371e23ec2c3428d7d83411f24bbd4b80762a75fa0e5de468a71dbe9bac382b4072241e3c7085ed2b9e72ec3779c1f70bbd0f246834f3e81ebffee13312d133e1ddaeb58b84d1ac1b441f311ee1e2c9693e300862cdf5b4a5d820dfde870da22746be0b12dfb943780c0ba928c657c54bea0d84db37fe50f0965ceab905f2ec3ff177421b11c30e846ad93212485e7f6e52d7d51af1c96f31fef174ab38cfb1b1fb5961cfadac518a6a4991ff2d561a7d8dadc5ad430c94b40c04a297012f81e6e84ca02879fd82b73744c4372ec02f141ae6c4ce75595559f3f4cc9e4b7a7a6d93636487e34938082b3fd5f09366a062484d1820586a720a9618ec18d980c969a28d74c81fe4fe7bb61986769a89716c965a7f056aff60e9175527778210eae23e53e244b973b2452f40ab375222621a89e1f5f2abfe5039708f2a659553582f760f0d264f854840d069e8c4db0246738af1697b05980c1f53a1ba4eef8e08583781c13a93d03eb19db75e71bdd0602b91908a885b41f0b8d9588d6e05796c8a6f8d220922ef9bcdb026af9bb328ac7d96d4078205ba1abf00eea45b9c260e3b55da036864bf5bc0cc2d3944fdbcc7e64539a45238bb2061210514"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "4a80cafbe2a6095f8e8663f6289878514d7ee7daba0c1b0a077cefb333cacdf7c116ab89b0a01cab3161c68cac92a08aae7d117c9a3416d67365621da3380a85ff34a7a3b512846048acd1ec5957af942721c241a180a5dc5d8f6f6fe54d4d9fcb3709cde37081e2233b4fffa201d2029241932da170a5bad0d927a803a7f6289fc9f7b1d41cc1a6c94cbf588d5492b363920d0c98404f5da9eb9457648e2a4e9a034b2e2328c7f8c0e794771641a981df765887b5ba19b769156b375535911e1a2da68bb6a37eaa0ef8dded4ce3eac5caff4e8dc357703f0409d00baeedf3fbcbd6895dd3938e1f03dd9f131f9c979e22e4fcbea0c58721bc72d1f4976e93fc1a7649a23745c0310181031ac34b2200dfb4e8fe9bd4cdb52a23c31416745521aa4861eaea7dec4ea2c18ae9f75fa9d36c9b61bdc4185e434f8cb091cd731607b749a3990585cbbea2b1c0e0fff4f589a547d320bc7923b8a6b594c5866095df9c914cca80cd6c0e9aa3d691e2607f9de64322031ccfed04d9c805226cb476d3246d6caa1b04c63372a77668d5edf06365827b80391a6abd66010e8e1b873bd83db4dcc99444e109efa2414c6e5319f30a718eb43a1256b2142afa2382316e37aebde32da5bfec93e89d2adc39f62aca25a2289933a7cd8234d72a9b3c6a001d27560f8c8a2d9a233bac0b519b34f4f79288ea2cb08a87242953ac24ea144143"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })

                m = "313233343030"_hex;
                s = "727f107d20a02c2a2e530a78fdcc8ee88816badea1204d4c6a3b116776217f86f6fce6612cacb44aa288991146675cc0907094b5f90a06f0e940c886c07b5157605102c670aa9927fd0f2222b737890d1cb905f0fe4b47e67d254e6fef0f2004be64c94ba630839199b3656abe2c6eb59e84584bb652a181a64895d52d46aaebcb46bdd5eca4655eee4c340649a49a5eed60a2d3c95762bf825f622bc48d05fd6813393d39021c0db5b2104186f5cd00b203b43ca839c192755b40a8d946d1db6b0d2d7df6ec6929e5655396d935ce9d45bd7364b1e8e2bbc316918d33caf6a08ff1c8404fb66cc679f03f9ed6c5997f72e52da5df41af58893129bccf2fe3f2ab7173fa227f24c30438e064c0c1e99d3ab9bcc929391893187b9683cc1026546b6d21c02fed28fe1c43bf1eb679faa560375d445af434fdc2794ea44fea6445a8e89ed6c14379f756070227b20cc2c0add3a6709be39680eee5efac9697f45d2122a51ee64f9ae310c6a9b85d0b300528b858581d59e59c7755a0764c59cb81d355396042cf8150c91376660bc737d33144fa7b6d7231fbd43c16a79d06de0fd18a53415acb352065cf169e82abf94a3337e6b525ddc3d25eb6516208e9f832168faf3c3a224612c9791369ba2ab85a701e8332b738bf2942cd20975d2edac2ece8568d101ab8602d58fbdf652580b5008b499aa06062bb99697c41ce8e34bb"_hex;
                r = false; // result = invalid
                d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                REQUIRE_ASSERT( "RSA PKCS1.5 SHA512 signature verification failed", [&]() {
                    assert_rsa_sha512( rsa_public_key_view(n, e), d, s,
                        "RSA PKCS1.5 SHA512 signature verification failed"
                    );
                })
            }
        } // End of Google's Wycheproof tests

        // Test vectors from Google's Wycheproof RSA signature verification tests.
        // Generated from: 'rsa_signature_test.json'
        // URL: 'https://raw.githubusercontent.com/google/wycheproof/4672ff74d68766e7785c2cac4c597effccef2c5c/testvectors/rsa_signature_test.json'
        //
        // Algorithm: RSASSA-PKCS1-v1_5
        // GeneratorVersion: 0.8r12
        // Header: Test vectors of class RsassaPkcs1Verify are intended for checking the verification of RSA PKCS #1 v 1.5 signatures.
        // Notes:   MissingNull - Some legacy implementation of RSA PKCS#1 signatures did omit the parameter field instead of using an ASN NULL. Some libraries still accept these legacy signatures. This test vector contains such a legacy signature
        //   SmallModulus - The key for this test vector has a modulus of size < 2048.
        //   SmallPublicKey - The key for this test vector uses a small public key.
        {
            auto n = "f2ed0e93228f37c2ce1c215e00cce4ef00e2c08a004a39c4170dc73e5fbd9b91e7c55e596579ec9c60b9bd341e83029b1934e6493eb60099b6cfbb9804d4179c983099e19102bba49eaa28fa505efacc5a9d5374499c0c5775778317ed370de1919f38aff22d5aee8c8af36a86d036029e761f243dff3c205a11e9bce9ac1d6baf81e79ad4146b119abb13903f8562e8f3e6a918f48223465bc93d5e7d5abe3d08503ec42998fe087a1f935d1b8673c495f005dfa7453daf977e1608a8c276da2a4cd0567e4af4d18cba05fdbedcde74493ccabd9060c27d35a02f35c760b12a4deae1359f649f273fa408626fb789c916434a642d528f41db868ff93b7f889f"_hex;
            auto e = "03"_hex;
            {
                auto m = "38343432"_hex;
                auto s = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e7a1269086f0bbc0778ded8d7108ff4edcc2313425088117b2d5c53e9d9971950a5fe8b2b67d2bcd1be74f6b557a3f90650a96d7e4dbd63c05b94f73337eea682417c058d66ce523e4461065ac8ba990c4ecd04932"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );
            }

            n = "8733b9c2bc754216fac899159abb71c5ca84be37153720040f33f291f5f7861bc122cafde3091b5211bc81ee03e280e3c6c2902ec49afb8432c3273536edce7116048513e9b33e2fcfe56f9597c81bc9be81a1b1d46e863ca11db2c33ac1bdebf7c552332067e2e588497e7d9e0738caa57a73dd28157e88fc202b31bbe3b9993548399a0b0df9b72dfeece75ecd78376227e9cd21c8d24ca4aa64fa50a59ee8e7621158e7bac2420fc0d77064d3959afab664ecda0decb8c979eb402795b9a562f2de310aa7fc6864469ac88867788c57ee96f6dc32dbdbe3aa7d3ff47ae4b78e1106e1bc80350b2383dae54140a4605f4130d7e5d3f7818262a27c76a51e4c6db4ab4590b4766b8c50ec1bfed53f0d716b5c7d9dc971399246c75ce27745147151f2e7629039f0b2efed99c7f17cda8f3c3df764dfb40cc0c2ad7bf2b6c72829df93329a4bad6be8635953dd10840888784eea738c763be9f5dc3ba47a9e9d800e21b4ffcc18193e591e8a5283192426e8867331c72bdda06a0eb49367bb01"_hex;
            e = "03"_hex;
            {
                auto m = "36313237"_hex;
                auto sbdd0c9e451b5b3e5513a94492dbee1ada9ea87e65a8cd95cceb4d304294ce34bf09a212f14908f5b865c7a34a72e68e389794a2d1c5767ba17829e2044108ac7842b6bfe0a5663b433d656f4e38522c5a5a23c460b898833828d257350e5814291b54cf13089080f84998edcacf0fe5fca0c1f8b176b172c5f9989491a039bef"_hex;
                auto r = true; // result = acceptable - flags: ['SmallPublicKey']
                auto d = eosio::sha512( (const char*)m.data(), m.size() );
                REQUIRE_EQUAL( r, verify_rsa_sha512( rsa_public_key_view(n, e), d, s ));
                assert_rsa_sha512( rsa_public_key_view(n, e), d, s, "Failed verifying valid RSA PKCS1.5 SHA512 signature" );
            }
        } // End of Google's Wycheproof tests
    EOSIO_TEST_END // rsa_pkcs_1_5_sha512_test

    EOSIO_TEST_BEGIN( rsa_pkcs_1_5_test )
        EOSIO_TEST( rsa_pkcs_1_5_sha1_test )
        EOSIO_TEST( rsa_pkcs_1_5_sha256_test )
        EOSIO_TEST( rsa_pkcs_1_5_sha512_test )
    EOSIO_TEST_END
}